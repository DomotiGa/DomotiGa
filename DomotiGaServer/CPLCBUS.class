' Gambas class file

' Description:
' CPLCBUS.class
' Support for PLCBUS interface

' Development Status:
' Basic support for lights dim/bright and on/off, appliances on/off.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY Port AS String
PROPERTY Baud AS String
PROPERTY PollTime AS Integer
PROPERTY PLCBUSDebug AS Boolean
PROPERTY UserCode AS String
PROPERTY ThreePhase AS Boolean
PROPERTY HouseCodes AS String
PROPERTY Ack AS Boolean

PRIVATE sPort AS String
PRIVATE sBaud AS String
PRIVATE sUserCode AS String
PRIVATE iPollTime AS Integer
PRIVATE bPLCBUSDebug AS Boolean
PRIVATE bThreePhase AS Boolean
PRIVATE sHouseCodes AS String
PRIVATE bAck AS Boolean

PUBLIC hPLCBUS AS NEW SerialPort
PUBLIC tPLCBUSPoll AS Timer
PUBLIC tPLCBUSLed AS Timer
PUBLIC tPLCBUSBusy AS Timer

PRIVATE CONST STX AS Byte = &H02  ' start byte
PRIVATE CONST ETX AS Byte = &H03  ' end byte

PRIVATE aHomeAddr AS NEW String[]   ' holds all house codes to poll
PRIVATE bFirstByte AS Boolean = TRUE
PRIVATE RecBuf AS Byte[16]
PRIVATE iByteCount AS Integer = 0
PRIVATE cQueue AS NEW Collection    ' command buffer
PRIVATE bControllerBusy AS Boolean  ' waiting for delay timer to finish
PRIVATE iUnitsFound AS Integer[16]  ' holds all device addresses to update
PRIVATE iUnitsStat AS Integer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the port
  TRY hPLCBUS.Close

  ' get a new one
  hPLCBUS = NEW Serialport AS "PLCBUS"

  WITH hPLCBUS
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' define timer for PLCBUS status LED
  tPLCBUSLed = NEW Timer AS "tPLCBUSLED"
  tPLCBUSLed.Delay = 150
  tPLCBUSLed.Stop

  ' define timer for PLCBUS controller busy
  tPLCBUSBusy = NEW Timer AS "tPLCBUSBusy"
  tPLCBUSBusy.Stop

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("PLCBUS Error: ") & ERROR.Text & (" at ") & ERROR.Where)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try stop running timers
  TRY tPLCBUSPoll.Stop
  TRY tPLCBUSBusy.Stop
  TRY tPLCBUSLed.Stop

  ' try to close the connection
  TRY hPLCBUS.Close
  Main.WriteLog(("PLCBUS serial port close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("PLCBUS Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run at startup
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Run()

  DIM sAddress AS String

  tPLCBUSPoll = NEW Timer AS "tPLCBUSPoll"
  tPLCBUSPoll.Delay = iPollTime * 1000

  '--- get all plcbus house codes for polling ---
  IF Len(sHouseCodes) THEN
    TRY aHomeAddr = Split(sHouseCodes, ",")
    IF ERROR THEN
      tPLCBUSPoll.Stop
      IF bPLCBUSDebug THEN Main.WriteRFXDebugLog(("[PLCBUS] Error parsing House Codes setting!"))
    ELSE
      IF aHomeAddr.Length THEN
        IF bPLCBUSDebug THEN
          Main.WriteRFXDebugLog(("[PLCBUS] Defined House Codes to poll are "), FALSE)
          FOR EACH sAddress IN aHomeAddr
            Main.WriteRFXDebugLog(sAddress & " ", TRUE)
          NEXT
          Main.WriteRFXDebugLog("\n", TRUE)
        ENDIF
        GetKnownModules() ' find out which plcbus modules are defined in database
        IF iPollTime THEN
          tPLCBUSPoll.Start ' start poll timer
        ELSE
          IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] No Poll Time defined, polling is disabled."))
        ENDIF
      ENDIF
    ENDIF
  ELSE
    tPLCBUSPoll.Stop
    IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] No House Codes defined, polling is disabled."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' fill iUnitsFound with known plcbus modules from database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetKnownModules() AS Boolean

  DIM rResult AS Result
  DIM sAddress, sHouseCode AS String
  DIM iCode, iBit AS Integer

  '--- get all enabled devices of type plcbus ---
  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("PLCBUS Interface"))
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      '--- check address of each device ---
      FOR EACH rResult
        sAddress = rResult!address
        '--- check if it contains a valid address ---
        IF NOT (sAddress LIKE "[A-P][0-1][0-9]*") THEN CONTINUE
        sHouseCode = Left$(sAddress, 1)
        TRY iUnitsFound[Asc(sHouseCode) - 65] = BSet(iUnitsFound[Asc(sHouseCode) - 65], Right$(sAddress, 2) - 1)
      NEXT
      IF bPLCBUSDebug THEN
        FOR iCode = 0 TO 15
          IF iUnitsFound[iCode] THEN
            Main.WriteRFXDebugLog(("[PLCBUS] Devices found for house code " & Chr(iCode + 65) & " are "))
            FOR iBit = 0 TO 15
              IF BTst(iUnitsFound[iCode], iBit) THEN Main.WriteRFXDebugLog(Chr(iCode + 65) & (iBit + 1) & " ", TRUE)
            NEXT
            Main.WriteRFXDebugLog("\n", TRUE)
          ENDIF
        NEXT
      ENDIF
    ENDIF
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' plcbus poll routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tPLCBUSPoll_Timer()

  SendPollOnlyOnCommand()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' plcbus controller busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tPLCBUSBusy_Timer()

  bControllerBusy = FALSE
  tPLCBUSBusy.Stop

  IF cQueue.Count THEN ' if there are more commands left in queue, send next one
    IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] Sending next command from Queue (count = " & cQueue.Count & ")"))
    DoQueue()
  ENDIF

END

' poll all modules for on/off status
PUBLIC SUB SendPollOnlyOnCommand()

  DIM sHomeAddr AS String

  IF hPLCBUS.Status <> Net.Active THEN RETURN

  FOR EACH sHomeAddr IN aHomeAddr
    PLCBUSTXCommand(sHomeAddr & "01", "GET_ONLY_ON_ID_PULSE", FALSE, 0)
  NEXT

END

PUBLIC SUB PLCBUS_Read()

  DIM sData AS Byte

  TRY READ #hPLCBUS, sData
  IF NOT ERROR THEN
    ProcessReceivedChar(sData)
  ELSE
    Main.WriteDebugLog(("[PLCBUS] Error reading data from the serial port! ->") & ERROR.Text)
  ENDIF

END

PRIVATE SUB ProcessReceivedChar(bTemp AS Byte)

  IF bFirstByte = TRUE THEN
    bFirstByte = FALSE
    iByteCount = 0
    IF bPLCBUSDebug THEN Main.WriteRFXDebugLog("[PLCBUS] < ", FALSE)
  ENDIF

  IF bPLCBUSDebug THEN Main.WriteRFXDebugLog(Hex(bTemp, 2) & " ", TRUE)
  Main.ControlLed("PLCBUS", "On")
  IF Main.bServer THEN tPLCBUSLed.Start

  TRY RecBuf[iByteCount] = bTemp
  IF ERROR THEN Main.WriteDebugLog(("[PLCBUS] " & Error.Text & " at " & Error.Where))
  INC iByteCount
  IF iByteCount = 9 AND IF RecBuf[1] = &H06 THEN ProcessPLCBUS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices.setdevice
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCommand(sAddress AS String, sCmd AS String)

  DIM ibrightness AS Integer

  sCmd = UCase(sCmd)
  IF sCmd = "ON"
    PLCBUSTXCommand(sAddress, "ON", bAck, 0)
  ELSE IF sCmd = "OFF"
    PLCBUSTXCommand(sAddress, "OFF", bAck, 0)
  ELSE IF InStr(sCmd, "DIM ") THEN ' DIM 0-100
    iBrightness = Val(Replace(sCmd, "DIM ", ""))
    IF iBrightness >= 0 AND IF iBrightness <= 100 THEN
      PLCBUSTXCommand(sAddress, "PRESETDIM " & iBrightness & " 1", bAck, 0) ' fixed dim rate of 1
    ELSE
      Main.WriteDebugLog(("[PLCBUS] Invalid PRESETDIM value of ") & iBrightness & "!")
    ENDIF
  ELSE
    Main.WriteDebugLog(("[PLCBUS] Only DIM and ON/OFF commands are supported!"))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB QueueCommand(aPacket AS Byte[])

  ' add command to queue
  cQueue.Add(aPacket, Now() & Rnd)

  ' if controller is not busy process it
  IF bControllerBusy = FALSE THEN DoQueue()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DoQueue()

  DIM aPacket AS Byte[] = NULL

  FOR EACH aPacket IN cQueue
    WriteCommand(aPacket, cQueue.Key)
    BREAK ' only do first one
  NEXT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process data read from interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB ProcessPLCBUS()

  DIM bCommand, bRXTX AS Byte
  DIM sAddress, sCommand, sValue, sHouseCode AS String
  DIM iDeviceId, iUnit AS Integer

  bFirstByte = TRUE

  '--- check if valid frame ---
  IF RecBuf[0] = STX AND IF RecBuf[1] = &H6 AND IF (RecBuf[8] = ETX OR (RecBuf[0] + RecBuf[1] + RecBuf[2] + RecBuf[3] + RecBuf[4] + RecBuf[5] + RecBuf[6] + RecBuf[7] + RecBuf[8]) = 0) THEN
    '--- check rx_tx bit 5 or 6 if set, packets contains valid data ---
    IF BTst(RecBuf[7], 5) OR IF BTst(RecBuf[7], 6) OR IF BTst(RecBuf[7], 2) THEN
      IF RecBuf[3] <> 255 THEN
        ' save needed values
        bCommand = RecBuf[4] AND &H1F
        sAddress = PLCBUStoAddress(RecBuf[3])
        sHouseCode = Left(sAddress, 1)
        sCommand = PLCBUStoStatus(bCommand)
        bRXTX = RecBuf[7]

        IF bPLCBUSDebug THEN
          Main.WriteRFXDebugLog("Addr: " & sAddress, TRUE)
          Main.WriteRFXDebugLog(" Cmd: " & sCommand, TRUE)
          Main.WriteRFXDebugLog(" Data1: " & Hex(RecBuf[5], 2), TRUE)
          Main.WriteRFXDebugLog(" Data2: " & Hex(RecBuf[6], 2), TRUE)
          Main.WriteRFXDebugLog(" RXTX: " & Bin(bRXTX, 8) & "\n", TRUE)
        END IF

        SELECT CASE bCommand
          CASE &H1C ' GET ALL ID PULSE
            IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] " & Bin(iUnitsFound[Asc(sHouseCode) - 65], 16) & "\n", TRUE)
          CASE &H1D ' GET ONLY ON ID PULSE
            iUnitsStat = (RecBuf[5] * 256) + RecBuf[6]
            IF BTst(bRXTX, 6) THEN ' finisched receiving the id feedback signal
              IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] " & Bin(iUnitsStat, 16) & "\n", TRUE)
              FOR iUnit = 0 TO 15
                IF BTst(iUnitsFound[Asc(sHouseCode) - 65], iUnit) THEN
                  IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] Device with address '" & Left(sAddress, 1) & Format(iUnit + 1, "00") & "' is " & IIf(BTst(iUnitsStat, iUnit), "On", "Off"))
                  ' find device id
                  iDeviceId = Devices.Find(Left(sAddress, 1) & Format(iUnit + 1, "00"), Devices.FindInterface("PLCBUS Interface"), "PLCBUS Module")
                  ' update value
                  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, IIf(BTst(iUnitsStat, iUnit), "On", "Off"), " ", " ", " ")
                ENDIF
              NEXT
            ENDIF
          CASE &H02, &H03 ' ON/OFF
            IF RecBuf[5] = &H64 THEN sValue = "On"
            IF RecBuf[5] = &H00 THEN sValue = "Off"
            IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] Module: " & sAddress & " Cmd: " & sValue)
            ' find device id
            iDeviceId = Devices.Find(sAddress, Devices.FindInterface("PLCBUS Interface"), "PLCBUS Module")
            ' update value
            IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sValue, "", "", "")
          CASE &H04, &H05, &H0C, &H0D, &H0E ' DIM/BRIGHT/PRESETDIM/STATUS_ON/STATUS_OFF
            IF RecBuf[5] = &H64 THEN
              sValue = "On"
            ELSE IF RecBuf[5] = &H00 THEN
              sValue = "Off"
            ELSE
              sValue = "Dim " & Val("&H" & RecBuf[5])
            END IF
            IF bCommand = &H0D OR IF bCommand = &H0E THEN
              Main.PLCBUSStatus(sAddress & " Status: " & sValue)
            ENDIF
            IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] Module: " & sAddress & " Cmd: " & sValue)
            ' find device id
            iDeviceId = Devices.Find(sAddress, Devices.FindInterface("PLCBUS Interface"), "PLCBUS Module")
            ' update value
            IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sValue, "", "", "")
          CASE &H12 ' SCENE ADDR SETUP
          CASE &H13 ' SCENE ADDR ERASE
          CASE &H14 ' ALL SCENE ADDR ERASE
          CASE &H18 ' GET SIGNAL STRENGTH
          CASE &H19 ' GET NOISE STRENGTH"
          CASE &H1A ' REPORT SIGNAL STRENGTH"
            IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] Module: " & sAddress & " Signal strength: " & RecBuf[5])
            Main.PLCBUSStatus(sAddress & " Signal Strength: " & RecBuf[5])
          CASE &H1B ' REPORT NOISE STRENGTH"
            IF bPLCBUSDebug THEN Main.WriteDebugLog("[PLCBUS] Module: " & sAddress & " Noise strength: " & RecBuf[5])
            Main.PLCBUSStatus(sAddress & " Noise Strength: " & RecBuf[5])
        END SELECT
      ELSE
        IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] Invalid Home and Unit values!"), TRUE)
      ENDIF
    ENDIF
  ELSE
    IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] Frame not valid!"), TRUE)
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset led status in main status bar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tPLCBUSLED_Timer()

  Main.ControlLed("PLCBUS", "Off")
  tPLCBUSLED.Stop

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get timer delay for specific command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB PLCBUSDelay(bCode AS Byte) AS Integer

  DIM iDelay AS Integer

  '--- three phase installation ---
  IF bThreePhase THEN bCode = bCode AND &H40

  SELECT bCode
    ' "ALL_UNITS_OFF" "ALL_LIGHTS_ON" "ON" "OFF" "DIM" "BRIGHT" "ALL_LIGHTS_OFF" "PRESETDIM"
    CASE &H00, &H01, &H02, &H03, &H04, &H05, &H06, &H0C, &H20, &H21, &H22, &H23, &H24, &H25, &H26, &H2C, &H40, &H0F, &H2F
      iDelay = 500
    ' "STATUS_ON" "STATUS_OFF" "ALL_STATUS" "GET_SIGNAL_STRENGTH" "GET_NOISE_STRENGTH"
    CASE &H0D, &H0E, &H1E, &H18, &H19, &H38, &H39
      iDelay = 1000
    ' "GET_ALL_ID_PULSE" "GET_ONLY_ON_ID_PULSE" "SCENE_ADDR_SETUP" "SCENE_ADDR_ERASE" "ALL_SCENE_ADDR_ERASE"
    CASE &H1C, &H1D, &H12, &H13, &H14
      iDelay = 700
    CASE ELSE
      IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] No delay defined for this command '" & PLCBUStoStatus(bCode) & "' specified, using default."))
      iDelay = 500
  END SELECT

  IF bThreePhase THEN
    RETURN iDelay * 3
  ELSE
    RETURN iDelay
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' convert hex code to status
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB PLCBUStoStatus(bCode AS Byte) AS String

  SELECT bCode
    CASE &H00
      RETURN "ALL_UNITS_OFF"
    CASE &H01
      RETURN "ALL_LIGHTS_ON"
    CASE &H02
      RETURN "ON"
    CASE &H03
      RETURN "OFF"
    CASE &H04
      RETURN "DIM"
    CASE &H05
      RETURN "BRIGHT"
    CASE &H0D
      RETURN "STATUS_ON"
    CASE &H0E
      RETURN "STATUS_OFF"
    CASE &H06
      RETURN "ALL_LIGHTS_OFF"
    CASE &H1C
      RETURN "GET_ALL_ID_PULSE"
    CASE &H1D
      RETURN "GET_ONLY_ON_ID_PULSE"
    CASE &H1E
      RETURN "ALL_STATUS"
    CASE &H12
      RETURN "SCENE_ADDR_SETUP"
    CASE &H13
      RETURN "SCENE_ADDR_ERASE"
    CASE &H14
      RETURN "ALL_SCENE_ADDR_ERASE"
    CASE &H18
      RETURN "GET_SIGNAL_STRENGTH"
    CASE &H19
      RETURN "GET_NOISE_STRENGTH"
    CASE &H1A
      RETURN "REPORT_SIGNAL_STRENGTH"
    CASE &H1B
      RETURN "REPORT_NOISE_STRENGTH"
  END SELECT

  RETURN Hex(bCode, 2)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' convert command code to hex code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CommandtoPLCBUS(sCommand AS String) AS Byte

  SELECT sCommand
    CASE "ALL_UNITS_OFF"
      RETURN &H00
    CASE "ALL_LIGHTS_ON"
      RETURN &H01
    CASE "ON"
      RETURN &H02
    CASE "OFF"
      RETURN &H03
    CASE "DIM"
      RETURN &H04
    CASE "BRIGHT"
      RETURN &H05
    CASE "ALL_LIGHTS_OFF"
      RETURN &H06
    CASE "BLINK"
      RETURN &H0A
    CASE "FADE_STOP"
      RETURN &H0B
    CASE "PRESETDIM"
      RETURN &H0C
    CASE "STATUS_ON"
      RETURN &H0D
    CASE "STATUS_REQUEST"
      RETURN &H0F
    CASE "GET_SIGNAL_STRENGTH"
      RETURN &H18
    CASE "GET_NOISE_STRENGTH"
      RETURN &H19
    CASE "GET_ALL_ID_PULSE"
      RETURN &H1C
    CASE "GET_ONLY_ON_ID_PULSE"
      RETURN &H1D
    CASE "SCENE_ADDR_SETUP"
      RETURN &H12
    CASE "SCENE_ADDR_ERASE"
      RETURN &H13
    CASE "ALL_SCENE_ADDR_ERASE"
      RETURN &H14
  END SELECT

  RETURN &HFF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' convert homeunit to byte
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB AddresstoPLCBUS(sAddress AS String) AS Integer

  DIM iHome, iUnit AS Integer

  '--- A = 0000 ---
  iHome = Asc(Left$(sAddress, 1)) - 65
  '--- 01 = 0000 ---
  iUnit = Mid$(sAddress, 2, 2) - 1

  RETURN (Lsl(iHome, 4)) OR iUnit

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' convert byte to homeunit
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION PLCBUStoAddress(bAddress AS Byte) AS String

  DIM sHome, sUnit AS String

  sHome = Chr((bAddress AND &HF0) / 16 + 65)
  sUnit = (bAddress AND &H0F) + 1

  RETURN sHome & Format(sUnit, "00")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare packet to send to PLCBUS
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB PLCBUSTXCommand(sAddress AS String, sCmd AS String, bAck AS Boolean, bData AS Byte)

  DIM bUserCode, bHomeUnit, bCommand, bData1, bData2 AS Byte
  DIM aPacket AS Byte[]
  DIM aParams AS String[]

  '--- check if it contains a valid address ---
  IF NOT (sAddress LIKE "[A-P][0-1][0-9]*") THEN RETURN

  bUserCode = Val(sUserCode)
  bHomeUnit = AddresstoPLCBUS(sAddress)

  aParams = Split(sCmd, " ")
  '--- for example ON, OFF, GET SIGNAL/NOISE LEVEL ---
  IF aParams.Count = 1 THEN
    bCommand = CommandtoPLCBUS(aParams[0])
    SELECT CASE bCommand
    CASE &H12  ' SCENE_ADDR_SETUP
      bData1 = bdata
    CASE &HFF  ' invalid
      RETURN
    END SELECT
  '--- for example DIM 1 or PRESETDIM 50 1 ---
  ELSE IF aParams.Count = 2 OR IF aParams.Count = 3 THEN
    bCommand = CommandtoPLCBUS(aParams[0])
    IF bCommand = &HFF THEN RETURN
    SELECT CASE bCommand
      '--- dim, bright, blink ---
      CASE &H04, &H05, &H0A
        bData1 = Val(aParams[1])
      '--- preset dim 0-100 -> 0-64 hex ---
      CASE &H0C, &H0D
        bData1 = Val(aParams[1])
        bData2 = Hex(aParams[2])
    END SELECT
  ENDIF

  '--- three phase installation ---
  IF bThreePhase THEN bCommand = bCommand OR &H40
  '--- request ack ---
  IF bAck THEN bCommand = bCommand OR &H20

  aPacket = [STX, CByte(&H05), bUserCode, bHomeUnit, bCommand, bData1, bData2, ETX]
  QueueCommand(aPacket)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send packet to PLCBUS interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB WriteCommand(bBuffer AS Byte[], sKey AS String)

  DIM bByte AS Byte
  DIM iCnt, iLoop, iDelay AS Integer

  Main.ControlLed("PLCBUS", "On")
  IF Main.bServer THEN tPLCBUSLed.Start

  IF NOT bPLCBUSDebug THEN
    bBuffer.Write(hPLCBUS, 0, bBuffer.Length)
    ' --- wait 12.5mS ---
    SLEEP 0.0125
    bBuffer.Write(hPLCBUS, 0, bBuffer.Length)
  ELSE
    '--- send all packets strings twice ---
    REPEAT
      iCnt = 0
      Main.WriteDebugLog("[PLCBUS] >", TRUE)
      FOR EACH bByte IN bBuffer
        IF iCnt >= bBuffer.Length THEN BREAK
        TRY WRITE #hPLCBUS, CByte(bByte)
        IF ERROR THEN SLEEP 0.01
        Main.WriteRFXDebugLog(" " & Hex(bByte, 2), TRUE)
        INC iCnt
      NEXT
      Main.WriteRFXDebugLog("\n", TRUE)
      INC iLoop
      '--- wait 12.5mS ---
      SLEEP 0.0125
    UNTIL iLoop = 2
  END IF

  ' remove sent command from queue
  cQueue.Remove(sKey)

  iDelay = PLCBUSDelay(bBuffer[4])
  tPLCBUSBusy.Delay = iDelay
  tPLCBUSBusy.Start
  IF bControllerBusy = FALSE THEN bControllerBusy = TRUE
  IF bPLCBUSDebug THEN Main.WriteDebugLog(("[PLCBUS] Inserted a delay of " & iDelay & " mS"))

END

' implement properties
FUNCTION Port_Read() AS String

  RETURN sPort

END

SUB Port_Write(Value AS String)

  sPort = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION PLCBUSDebug_Read() AS Boolean

  RETURN bPLCBUSDebug

END

PRIVATE SUB PLCBUSDebug_Write(Value AS Boolean)

  bPLCBUSDebug = Value

END

PRIVATE FUNCTION PollTime_Read() AS Integer

  RETURN iPollTime

END

PRIVATE SUB PollTime_Write(Value AS Integer)

  iPollTime = Value

END

PRIVATE FUNCTION UserCode_Read() AS String

  RETURN sUserCode

END

PRIVATE SUB UserCode_Write(Value AS String)

  sUserCode = Value

END

PRIVATE FUNCTION ThreePhase_Read() AS Boolean

  RETURN bThreePhase

END

PRIVATE SUB ThreePhase_Write(Value AS Boolean)

  bThreePhase = Value

END

PRIVATE FUNCTION HouseCodes_Read() AS String

  RETURN sHouseCodes

END

PRIVATE SUB HouseCodes_Write(Value AS String)

  sHouseCodes = Value

END

PRIVATE FUNCTION Ack_Read() AS Boolean

  RETURN bAck

END

PRIVATE SUB Ack_Write(Value AS Boolean)

  bAck = Value

END
