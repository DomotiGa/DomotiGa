' Gambas module file

' Description:
' Energy.module
' Routines for logging energy usage.
' Need to check accuracy!

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read values from rfxmeter and pulse devices and write values to *_usage tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Log()

  DIM rResult AS Result
  DIM iMeter, iFactor AS Integer
  DIM iUsage, iNewCounter, iPrevCounter, iValue, iValue2 AS Float
  ' TO DO: the Meter to Usage table mapping should have been defined in the DB
  ' TO DO: only one Meter per Usage type at this moment; to be extended
  DIM aMeters AS String[] = ["P1 Meter Power Usage", "P1 Meter Gas Usage", "P1 Meter Water Usage", "P1 Meter Power Exported", "RFXPwr Power", "RFXPulse Gas", "RFXPulse Water", "RFXPulse Power"]
  DIM sMeter, sTable AS String
  ' just to check multiple device on one usage logging entry
  DIM cTableUsed AS NEW Collection

  ' lookup id's for device types
  FOR EACH sMeter IN aMeters
    ' first find devicetype id's
    TRY rResult = Main.hDB.Exec("SELECT id FROM devicetypes WHERE name = &1 ", sMeter)
    IF ERROR THEN RETURN
    IF rResult.Available THEN
      iMeter = rResult!id
    ELSE
      Main.WriteDebugLog(("[Energy] No Devicetype called '") & sMeter & ("' found!"))
    ENDIF

    ' then find device with this devicetype
    IF sMeter = ("P1 Meter Power Usage") 'Get the low and high tarif from the Smart meter
      rResult = Main.hDB.Exec("SELECT value2 + value3 AS value, id FROM devices WHERE module = &1 AND enabled is TRUE", iMeter)
    ELSE
      rResult = Main.hDB.Exec("SELECT value, id FROM devices WHERE module = &1 AND enabled is TRUE", iMeter)
    ENDIF

   ' we currently only support one of each type
   IF rResult.Count = 1 THEN
   ' device value is not filled yet, nothing to store
     IF NOT rResult.Available THEN RETURN
     iNewCounter = CFloat(rResult!value)
     iMeter = rResult!id
      ' construct table name
      sTable = ""
      SELECT sMeter
        CASE "RFXPulse Power", "RFXPwr Power", "P1 Meter Power Usage"
          sTable = "power_usage"
          IF NOT IsNull(cTableUsed[sTable]) THEN Error.Raise("More as one device for power usage")
          cTableUsed[sTable] = TRUE 
        CASE "RFXPulse Gas", "P1 Meter Gas Usage"
          sTable = "gas_usage"
          IF NOT IsNull(cTableUsed[sTable]) THEN Error.Raise("More as one device for gas usage")
          cTableUsed[sTable] = TRUE
        CASE "RFXPulse Water", "P1 Meter Water Usage"
          sTable = "water_usage"
          IF NOT IsNull(cTableUsed[sTable]) THEN Error.Raise("More as one device for water usage")
          cTableUsed[sTable] = TRUE
        CASE "P1 Meter Power Exported"
          sTable = "power_exported"
          IF NOT IsNull(cTableUsed[sTable]) THEN Error.Raise("More as one device for dual power usage")
          cTableUsed[sTable] = TRUE
        DEFAULT
          Error.Raise(("[Energy] Meter usage logging called with unknown name: '") & sMeter & "'")
      END SELECT
      ' get previous counter value
      rResult = Main.hDB.Exec(Subst("SELECT id, counter FROM &1 ORDER BY stamp DESC LIMIT 1", sTable))

      IF rResult.Count = 1 THEN
        iPrevCounter = rResult!counter
        iUsage = iNewCounter - iPrevCounter

        ' calculate right amount used
        SELECT sMeter
          CASE "RFXPwr Power", "RFXPulse Power"
            iValue = iUsage * 10 ' every pulse is 0.1 watt
          CASE "RFXPulse Gas"
            iValue = iUsage / 100 ' every pulse is 0.01 m3
          CASE "RFXPulse Water"
            iValue = iUsage / 2 ' every pulse is 0.5 liter
          CASE "P1 Meter Gas Usage", "P1 Meter Power Usage", "P1 Power Usage Exported", "P1 Meter Water Usage"
            iValue = iUsage ' 1 pulse = 1 kwh, gas calculation needs work
        END SELECT
        ' try to save some records by deleting zero usage ones
        IF iUsage = 0 THEN
          TRY Main.hDB.Exec(Subst("DELETE FROM &1 WHERE id = &2", sTable, rResult!id))
        ENDIF
      ELSE
        iUsage = 0
        iValue = 0
      END IF
      ' add new value to usage table
      Main.hDB.Begin()
      rResult = Main.hDB.Create(sTable)
      rResult!consumption = iUsage
      rResult!stamp = Now()
      rResult!counter = iNewCounter
      rResult.Update()
      Main.hDB.Commit()

      ' update value2 field of device with energy usage, except for smart meters
      IF NOT InStr(sMeter, "P1")
        rResult = Main.hDB.Exec("UPDATE devices SET value2 = &1 WHERE id = &2", CStr(iValue), iMeter)
      ENDIF
    ELSE
      IF rResult.Count > 1 THEN Main.WriteDebugLog(("[Energy] More then one '") & sMeter & ("' device found, not supported!"))
    ENDIF
  NEXT

CATCH
  Main.WriteDebugLog(("[Energy] Error '") & ERROR.Text & ("' at '") & ERROR.Where)

END
