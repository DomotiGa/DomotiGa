' Gambas module file

' Description:
' RRDTool.module
' Support for RRDTool graphing.

' Development Status:
' Working, make hardcoded heartbeat and step values configurable, need better error checking.
' Maybe create separate graphs table in db.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tRRDTool AS Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check for/create missing rrd files and start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Run()

  ' check for missing rrd databases
  CreateRRDs()

  ' start poll timer for RRDTool
  tRRDTool = NEW Timer AS "tRRDTool"
  tRRDTool.Delay = Main.iRRDToolPollTime * 1000 ' multiply for seconds
  tRRDTool.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRRDTool_Timer()

  UpdateRRDs() ' update rrd values every Polltime seconds

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete rrd file belonging to device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DeleteRRD(sDeviceName AS String)

  DIM sRRDName, sRRD, sCmd AS String

  sRRDName = LCase(Replace$(sDeviceName, " ", ""))
  sRRDName = Replace$(sRRDName, "/", "")
  sRRD = Main.sBaseDir &/ "rrd" &/ sRRDName & ".rrd"
  sCmd = "rm -f " & sRRD
  IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] Delete rrd database ") & sRRD & (" with ") & sCmd & ".")
  SHELL sCmd WAIT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete all rrd files
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DeleteAllRRDs()

  DIM sCmd AS String

  sCmd = "rm -f " & Main.sBaseDir &/ "rrd/*.rrd"
  IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] Delete rrd databases with ") & sCmd & ".")
  SHELL sCmd WAIT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete all graphic images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DeleteAllGraphs()

  DIM sCmd AS String

  sCmd = "rm -f " & Main.sBaseDir &/ "rrd/graphs/*.png"
  IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] Delete rrd graphs with ") & sCmd & ".")
  SHELL sCmd WAIT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices with graph boolean enabled and
' check for existance of rrd file, create one if missing
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB CreateRRDs()

  DIM rDevice AS Result
  DIM sRRD, sRRDCmd, sRRDName AS String

  IF NOT Main.bRRDToolEnabled THEN RETURN

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE graph is TRUE AND enabled is TRUE")
  IF (rDevice.Count > 0) THEN
    FOR EACH rDevice
      IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] Device with address '") & rDevice!address & ("' named '") & rDevice!name & ("' has graphing enabled."))
      sRRDName = LCase(Replace$(rDevice!name, " ", ""))
      sRRDName = Replace$(sRRDName, "/", "")
      sRRD = Main.sBaseDir &/ "rrd" &/ sRRDName & ".rrd"
      IF NOT Exist(sRRD) THEN
        sRRDCmd = "rrdtool create " & sRRD & " -s " & Main.iRRDToolPollTime & " "
        IF rDevice!valuerrddsname THEN sRRDCmd = sRRDCmd & "DS:" & rDevice!valuerrddsname & ":" & rDevice!valuerrdtype & ":600:U:U "
        IF rDevice!value2rrddsname THEN sRRDCmd = sRRDCmd & "DS:" & rDevice!value2rrddsname & ":" & rDevice!value2rrdtype & ":600:U:U "
        IF rDevice!value3rrddsname THEN sRRDCmd = sRRDCmd & "DS:" & rDevice!value3rrddsname & ":" & rDevice!value3rrdtype & ":600:U:U "
        IF rDevice!value4rrddsname THEN sRRDCmd = sRRDCmd & "DS:" & rDevice!value4rrddsname & ":" & rDevice!value4rrdtype & ":600:U:U "
        sRRDCmd = sRRDCmd & "RRA:AVERAGE:0.5:1:600 RRA:AVERAGE:0.5:2:600 RRA:AVERAGE:0.5:7:600 RRA:AVERAGE:0.5:30:600 RRA:AVERAGE:0.5:365:600"
        sRRDCmd &= " 2>&1 >/dev/null"
        IF Main.bRRDToolDebug THEN Main.WriteDebugLog("[RRDTool] " & sRRDCmd)
        SHELL sRRDCmd WAIT
      END IF
    NEXT
  ELSE
    IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] No device(s) with graphing enabled found!"))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph boolean enabled and create graphs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB CreateGraphs(sGroup AS String, sTime AS String)

  DIM rDevice AS Result
  DIM sRRD, sRRDCmd, sGraphImage, sRRDName, sValueRRDsName AS String
  DIM aValueRRDsName AS String[] = ["valuerrddsname", "value2rrddsname", "value3rrddsname", "value4rrddsname"]

  IF NOT Main.bRRDToolEnabled THEN RETURN

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND graph is TRUE AND enabled is TRUE", "%" & sGroup & "%")
  IF (rDevice.Count > 0) THEN
    FOR EACH rDevice
      sRRDName = LCase(Replace$(rDevice!name, " ", ""))
      sRRDName = Replace$(sRRDName, "/", "")
      FOR EACH sValueRRDsName IN aValueRRDsName
        IF rDevice[sValueRRDsName] THEN
          IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] Device with address '") & rDevice!address & ("' named '") & rDevice!name & ("' has graphing enabled for ") & rDevice[sValueRRDsName] & ".")
          sRRD = Main.sBaseDir &/ "rrd" &/ sRRDName & ".rrd"
          sGraphImage = Main.sBaseDir &/ "rrd/graphs/" &/ sRRDName & "-" & rDevice[sValueRRDsName] & "-" & sTime & ".png"
          sRRDCmd = "rrdtool graph " & sGraphImage & " --lazy --start -" & sTime & " -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t '" & rDevice!name & " " & Main.Caps(rDevice[sValueRRDsName]) & "' -v '" & rDevice!label & "' DEF:" & rDevice[sValueRRDsName] & "=" & sRRD & ":" & rDevice[sValueRRDsName] & ":AVERAGE LINE1:" & rDevice[sValueRRDsName] & "#00FF00:'" & Main.Caps(rDevice[sValueRRDsName]) & "'"
          sRRDCmd &= " GPRINT:" & rDevice[sValueRRDsName] & ":MIN:'Min\\:%1.1lf' GPRINT:" & rDevice[sValueRRDsName] & ":MAX:'Max\\:%1.1lf' GPRINT:" & rDevice[sValueRRDsName] & ":AVERAGE:'Avg\\:%1.1lf' GPRINT:" & rDevice[sValueRRDsName] & ":LAST:'Last\\:%1.1lf'"
          sRRDCmd &= " 2>&1 >/dev/null"
          IF Main.bRRDToolDebug THEN Main.WriteDebugLog("[RRDTool] " & sRRDCmd)
          SHELL sRRDCmd WAIT
        END IF
      NEXT
    NEXT
  ELSE
    IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] No device(s) with graphing enabled found!"))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph boolean enabled, return the names of their graphic images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Graphs(sGroup AS String) AS String

  DIM rDevice AS Result
  DIM sGraphs, sRRDName, sValueRRDsName AS String
  DIM aValueRRDsName AS String[] = ["valuerrddsname", "value2rrddsname", "value3rrddsname", "value4rrddsname"]

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND graph is TRUE AND enabled is TRUE", "%" & sGroup & "%")
  IF (rDevice.Count > 0) THEN
    FOR EACH rDevice
      sRRDName = LCase(Replace$(rDevice!name, " ", ""))
      sRRDName = Replace$(sRRDName, "/", "")
      FOR EACH sValueRRDsName IN aValueRRDsName
        IF rDevice[sValueRRDsName] THEN
          sGraphs &= Main.sBaseDir &/ "rrd/graphs/" &/ sRRDName & "-" & rDevice[sValueRRDsName] & "|"
          IF NOT Main.bRRDToolDebug THEN CONTINUE
          Main.WriteDebugLog(("[RRDTool] Device with address '") & rDevice!address & ("' named '") & rDevice!name & (" has graphing enabled for '") & rDevice[sValueRRDsName] & "'.")
          Main.WriteDebugLog(("[RRDTool] Graphs - ") & Main.sBaseDir &/ "rrd/graphs/" &/ sRRDName & "-" & rDevice[sValueRRDsName])
        END IF
      NEXT
    NEXT
  ELSE
    IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] No device(s) with graphing enabled found!"))
  END IF
  ' return string with all graph image names in this group
  RETURN sGraphs

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph enabled, and update rrd files with device values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB UpdateRRDs()

  DIM rDevice AS Result
  DIM sRRDCmd, sRRDName AS String

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE AND graph is TRUE")
  IF (rDevice.Count > 0) THEN
    FOR EACH rDevice
      sRRDName = LCase(Replace$(rDevice!name, " ", ""))
      sRRDName = Replace$(sRRDName, "/", "")
      sRRDCmd = "rrdtool update " & Main.sBaseDir &/ "rrd" &/ sRRDName & ".rrd" & " N"
      IF rDevice!valuerrddsname THEN sRRDCmd &= ":" & rDevice!value
      IF rDevice!value2rrddsname THEN sRRDCmd &= ":" & rDevice!value2
      IF rDevice!value3rrddsname THEN sRRDCmd &= ":" & rDevice!value3
      IF rDevice!value4rrddsname THEN sRRDCmd &= ":" & rDevice!value4
      sRRDCmd &= " 2>&1 >/dev/null"
      IF Main.bRRDToolDebug THEN Main.WriteDebugLog("[RRDTool] " & sRRDCmd)
      SHELL sRRDCmd WAIT
    NEXT
  ELSE
    IF Main.bRRDToolDebug THEN Main.WriteDebugLog(("[RRDTool] No device(s) with graphing enabled found!"))
  END IF

END