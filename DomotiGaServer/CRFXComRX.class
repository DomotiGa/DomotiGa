' Gambas class file

' Description:
' CRFXComRX.class
' Connect to RFXCom receiver interface via tcp socket or serial port.

' Development Status:
' Used RFXCom's RFReceiver source code as template.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS Integer
PROPERTY Interface AS String
PROPERTY SerPort AS String
PROPERTY Baud AS String
PROPERTY RFXComDebug AS Boolean
PROPERTY RelayPort AS Integer

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS Integer
PRIVATE sInterface AS String
PRIVATE sSerPort AS String
PRIVATE sBaud AS String
PRIVATE bRFXComRXDebug AS Boolean
PRIVATE iRelayPort AS Integer

PUBLIC hRFXComRX AS NEW Socket
PUBLIC hRFXComRXSer AS NEW SerialPort
PUBLIC hRFXComRXRelay AS NEW ServerSocket
PUBLIC hRelayRXClient AS Object[]
PUBLIC hRelayRXSocket AS NEW Socket

CONST SWVERS AS Byte = &H20
CONST MODEHS AS Byte = &H21
CONST MODEKOP AS Byte = &H23
CONST MODEARC AS Byte = &H24
CONST MODEBD AS Byte = &H25
CONST DISHE AS Byte = &H28
CONST MODEB32 AS Byte = &H29
CONST ENALL AS Byte = &H2A
CONST MODEVAR AS Byte = &H2C
CONST DISARC AS Byte = &H2D
CONST DISKOP AS Byte = &H2E
CONST DISX10 AS Byte = &H2F
CONST MODEVISONIC AS Byte = &H40
CONST MODENOXLAT AS Byte = &H41
CONST MODEVISAUX AS Byte = &H42
CONST DISOREGON AS Byte = &H43
CONST DISATI AS Byte = &H44
CONST DISVIS AS Byte = &H45
CONST DISSOMFY AS Byte = &H46
CONST DISEU AS Byte = &H47

PRIVATE bSlave AS Boolean
PRIVATE bFirstByte AS Boolean = TRUE
PRIVATE Protocol AS Byte = MODEVAR
PRIVATE RecBuf AS Byte[30]
PRIVATE RecBytes AS Byte
PRIVATE RecBits AS Byte
PRIVATE bMessage AS Boolean = FALSE
PRIVATE iByteCount AS Integer = 0
PRIVATE sMessage AS String
PUBLIC bSimulate AS Boolean
PUBLIC bWaitforAck AS Boolean
PUBLIC bVersion AS Boolean
PRIVATE bCmdHeader AS Byte
PRIVATE iSupplyVoltage AS Integer
PRIVATE sTemperature AS Single
PRIVATE iMaxTicks AS Integer

PUBLIC SUB RFXComRX_Ready()

  Main.WriteLog(("RFXCom receiver TCP socket connected."))
  ProtocolSetup("MODEVAR")

END

PUBLIC FUNCTION StartRelay() AS Boolean

  hRFXComRXRelay = NEW ServerSocket AS "RFXComRXRelay"
  hRFXComRXRelay.Type = Net.Internet
  hRFXComRXRelay.Port = iRelayPort
  ' we start listening for max 1 connection
  hRFXComRXRelay.Listen(1)

  IF hRFXComRXRelay.Status = Net.Active THEN
    hRelayRXClient = NEW Object[]
    ' all ok
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectTCP() AS Boolean

  ' try to close the connection
  TRY hRFXComRX.Close

  ' get a new one
  hRFXComRX = NEW Socket AS "RFXComRX"
  hRFXComRX.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("RFXCom receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectSerial() AS Boolean

  ' try to close the connection
  TRY hRFXComRXSer.Close

  ' get a new one
  hRFXComRXSer = NEW Serialport AS "RFXComRXSer"
  WITH hRFXComRXSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("RFXCom receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB RFXComRXRelay_Connection(sHost AS String)

  DIM sHostName AS String

  hRelayRXSocket = NEW Socket AS "RelayRXSocket"
  ' accept client
  IF hRFXComRXRelay.Status <= Net.Inactive THEN RETURN
  IF Main.bRFXComRXDebug THEN Main.WriteDebugLog(("[RFXComRXRelay] Connection request from client: ") & sHost)

  hRelayRXSocket = hRFXComRXRelay.Accept()
  hRelayRXClient.Add(hRelayRXSocket)
  IF hRelayRXSocket.Status = Net.Connected THEN
    sHostName = DNS.ResolveHost(hRelayRXSocket.RemoteHost)
    IF NOT sHostName THEN sHostName = hRelayRXSocket.RemoteHost
    Main.WriteLog(("RFXCom receiver Relay client connection from ") & sHostName & (" accepted."))
  END IF

END

PUBLIC SUB Socket_Read()

    DIM sBuf AS Byte
    DIM bAck AS Byte = &H2C

    IF LAST.Status <> Net.Connected THEN RETURN
    TRY READ #LAST, sBuf, Lof(LAST)

    IF sBuf = &HF0 THEN
      bCmdHeader = sBuf
    ELSE IF bCmdHeader THEN ' got command from relay client, reply with fake answer
      WRITE #LAST, bAck
      Main.WriteDebugLog(("[RFXComRXRelay] Client ") & LAST.RemoteHost & (" has sent command ") & Hex(bCmdHeader) & Hex(sBuf) & (", replied with fake ACK."))
      bCmdHeader = 0
    END IF

END

PUBLIC SUB RFXComRXRelay_Error()

  ' handle error
  SELECT CASE hRFXComRXRelay.Status
    CASE Net.CannotCreateSocket
      Main.WriteDebugLog(("[RFXComRXRelay] The system does not allow to create a socket."))
    CASE Net.CannotBindSocket
      Main.WriteDebugLog(("[RFXComRXRelay] Cannot bind socket."))
    CASE Net.CannotListen
      Main.WriteDebugLog(("[RFXComRXRelay] Cannot listen on port."))
  END SELECT

END

PUBLIC SUB Socket_Closed()

  Main.WriteLog(("RFXCom receiver Relay client connection closed."))
  hRelayRXClient.Remove(hRelayRXClient.Find(LAST))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ask for interface firmware version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetVersion()

  DIM b AS Byte[2]

  b[0] = &HF0
  b[1] = SWVERS

  Main.hRFXComRX.iMaxTicks = 0
  Main.hRFXComRX.bFirstByte = TRUE
  Main.hRFXComRX.bVersion = TRUE
  Main.hRFXComRX.SendCommand(b)
  Main.hRFXComRX.bVersion = TRUE
  Main.hRFXComRX.bWaitforAck = FALSE
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Version request to receiver => F020\n"), 0)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' protocol commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ProtocolSetup(sType AS String)

  DIM b AS Byte[2]
  DIM sText AS String

  b[0] = &HF0

  SELECT sType
    CASE "ALL"
      b[1] = ENALL
      sText = ("Enable ALL RF")
    CASE "OREGON"
      b[1] = DISOREGON
      sText = ("Disable Oregon")
    CASE "X10"
      b[1] = DISX10
      sText = ("Disable X10")
    CASE "KOPPLA"
      b[1] = DISKOP
      sText = ("Disable Koppla")
    CASE "ARC"
      b[1] = DISARC
      sText = ("Disable ARC")
    CASE "ATI"
      b[1] = DISATI
      sText = ("Disable ATI")
    CASE "VISONIC"
      b[1] = DISVIS
      sText = ("Disable Visonic")
    CASE "HEUK"
      b[1] = DISHE
      sText = ("Disable HomeEasy UK")
    CASE "HEEU"
      b[1] = DISEU
      sText = ("Disable HomeEasy EU")
    CASE "SOMFY"
      b[1] = DISSOMFY
      sText = ("Disable Somfy")
    CASE "MODEVAR"
      b[1] = MODEVAR
      sText = ("Variable Mode")
  END SELECT

  Main.hRFXComRX.SendCommand(b)
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(sText & " => F0" & Hex(b[1]) & "\n")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SendCommand(aCommand AS Array)

  DIM iCmd AS Byte

  FOR EACH iCmd IN aCommand
    IF sInterface = "tcp" THEN
      TRY WRITE #hRFXComRX, iCmd
      IF ERROR THEN Main.WriteDebugLog(("[RFXComRX] Error writing data to the TCP port! -> ") & Error.Text)
    ELSE
      TRY WRITE #hRFXComRXSer, iCmd
      IF ERROR THEN Main.WriteDebugLog(("[RFXComRX] Error writing data to the serial port! -> ") & Error.Text)
    END IF
  NEXT
  bWaitforAck = TRUE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hRFXComRX.Close
  TRY hRFXComRXSer.Close
  TRY hRFXComRXRelay.Close
  TRY hRelayRXClient.Remove
  IF InStr(sInterface, "tcp") THEN
    Main.WriteLog(("RFXCom receiver TCP socket close."))
  ELSE
    Main.WriteLog(("RFXCom receiver serial port close."))
  END IF
  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("RFXCom receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' inject packet into parser.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Simulate(sPacket AS String)

  DIM iCnt, iCnt2 AS Integer

  bFirstByte = TRUE
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("RFXCom receiver Simulate String: ") & sPacket & "\n")

  RecBits = Val("&H" & Mid(sPacket, 1, 2)) AND &H7F
  iCnt = Lsr(RecBits, 3)

  IF (Recbits AND &H7) THEN
    iCnt += 1
  END IF

  IF bVersion OR IF (iCnt = (Len(sPacket) / 2) - 1) THEN
    FOR iCnt2 = 1 TO Len(sPacket) STEP 2
      ProcessReceivedChar(Val("&H" & Mid(sPacket, iCnt2, 2)))
    NEXT
  ELSE
   bFirstByte = TRUE
   IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("1st byte doesn't correspond with packet length!"))
  END IF
  bSimulate = FALSE

END SUB

PUBLIC SUB RFXComRX_Error()

  DIM sString AS String = "RFXCom receiver: "

  ' handle error
  SELECT CASE hRFXComRX.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  END SELECT

END

PUBLIC SUB RFXComRX_Read()

  DIM sData AS Byte

  TRY READ #hRFXComRX, sData
  IF ERROR THEN Main.WriteDebugLog(("[RFXComRX] Error reading data from the TCP port! -> ") & Error.Text)
  IF NOT bSimulate THEN ProcessReceivedChar(sData)

END

PUBLIC SUB RFXComRXSer_Read()

  DIM sData AS Byte

  TRY READ #hRFXComRXSer, sData
  IF ERROR THEN Main.WriteDebugLog(("[RFXComRX] Error reading data from the serial port! -> ") & Error.Text)
  IF NOT bSimulate THEN ProcessReceivedChar(sData)

END

PRIVATE SUB ProcessReceivedChar(bTemp AS Byte)

  ' relay incoming data to relay port
  IF Main.bRFXComRXRelayEnabled THEN TRY WRITE #hRelayRXSocket, bTemp

  iMaxTicks = 0
  IF bFirstByte = TRUE THEN
    bFirstByte = FALSE
    iByteCount = 0
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog("", 0)
  END IF

  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(Hex(bTemp, 2), 1)
  Main.ControlLed("RFXCom", "On")

  IF bWaitforAck = FALSE THEN
    IF bVersion THEN ' display version?
      RecBuf[iByteCount] = bTemp
      IF iByteCount = 3 THEN
        bMessage = TRUE
      END IF
    ELSE
      SELECT CASE Protocol
        CASE MODEVAR, MODEVISONIC, MODENOXLAT, MODEARC
          IF iByteCount = 15 THEN
            RecBuf[iByteCount - 1] = bTemp
            bMessage = TRUE
          ELSE IF iByteCount = 0 THEN
            RecBits = bTemp AND &H7F
            IF (bTemp AND &H80) = 0 THEN
              bSlave = FALSE
            ELSE
              bSlave = TRUE
            END IF
            IF (RecBits AND &H7) = 0 THEN
              RecBytes = Lsr(RecBits, 3)
            ELSE
              RecBytes = Lsr(RecBits, 3) + 1
            END IF
          ELSE IF iByteCount = RecBytes THEN
            RecBuf[iByteCount - 1] = bTemp
            iByteCount -= 1
            bMessage = TRUE
          ELSE
            RecBuf[iByteCount - 1] = bTemp
          END IF
        CASE MODEB32
          RecBuf[iByteCount] = bTemp
          IF iByteCount = 3 THEN
            bMessage = TRUE
          END IF
        CASE MODEKOP
          RecBuf[iByteCount] = bTemp
          IF iByteCount = 2 THEN
            bMessage = TRUE
          END IF
      END SELECT
    END IF
    INC iByteCount
  ELSE
    bMessage = TRUE
  END IF
  IF bMessage THEN
    Display_Message()
  END IF

END

PRIVATE SUB Display_Message()

  DIM iParity AS Integer
  DIM bRFXSensor, bRFXPower, bSRFXPower AS Boolean

  bMessage = FALSE
  bFirstByte = TRUE

  IF NOT bWaitforAck THEN
    IF iByteCount = 4 THEN
      iParity = NOT (Lsr((RecBuf[0] AND &HF0), 4) + (RecBuf[0] AND &HF) + Lsr(RecBuf[1], 4) + (RecBuf[1] AND &HF) + Lsr(RecBuf[2], 4) + (RecBuf[2] AND &HF) + Lsr(RecBuf[3], 4)) AND &HF
      IF (iParity = (RecBuf[3] AND &HF)) AND (RecBuf[0] + (RecBuf[1] XOR &HF) = &HFF) THEN
        bRFXSensor = TRUE
      END IF
    ELSE IF RecBits = 48 THEN
      iParity = NOT (Lsr(RecBuf[0], 4) + (RecBuf[0] AND &HF) + Lsr(RecBuf[1], 4) + (RecBuf[1] AND &HF) + Lsr(RecBuf[2], 4) + (RecBuf[2] AND &HF) + Lsr(RecBuf[3], 4) + (RecBuf[3] AND &HF) + Lsr(RecBuf[4], 4) + (RecBuf[4] AND &HF) + Lsr(RecBuf[5], 4)) AND &HF
      IF (iParity = (RecBuf[5] AND &HF)) AND (RecBuf[0] + (RecBuf[1] XOR &HF) = &HFF) THEN
        bRFXPower = TRUE
      ELSE IF (iParity = (RecBuf[5] AND &HF)) THEN
        bSRFXPower = TRUE
      END IF
    END IF

    IF bVersion THEN ' display version?
      bVersion = FALSE
      RecBits = 0
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(" Version", TRUE)
        IF RecBuf[0] = Asc("M") OR RecBuf[0] = &H1 THEN
          Main.WriteRFXDebugLog(" Master=" & Hex(RecBuf[1], 2) & "\n", TRUE)
          IF iByteCount > 3 THEN
            IF RecBuf[2] = Asc("S") THEN
              Main.WriteRFXDebugLog(" Slave=" & Hex(RecBuf[3], 2) & "\n", TRUE)
            ELSE
              Main.WriteRFXDebugLog(Hex(RecBuf[2], 2), TRUE)
            END IF
          END IF
        ELSE IF RecBuf[0] = Asc("S") OR RecBuf[0] = &H81 THEN
          Main.WriteRFXDebugLog(" Slave=" & Hex(RecBuf[1], 2) & "\n", TRUE)
          IF iByteCount > 3 THEN
            IF RecBuf[2] = Asc("M") THEN
              Main.WriteRFXDebugLog(" Master=" & Hex(RecBuf[3], 2) & "\n", TRUE)
            ELSE
              Main.WriteRFXDebugLog(Hex(RecBuf[2], 2), TRUE)
            END IF
          END IF
        ELSE
          Main.WriteRFXDebugLog(" " & Hex(RecBuf[0], 2), TRUE)
          IF iByteCount > 3 THEN
            IF RecBuf[1] = Asc("S") OR RecBuf[0] = &H81 THEN
              Main.WriteRFXDebugLog(" Slave=" & Hex(RecBuf[2], 2) & "\n", TRUE)
            ELSE IF RecBuf[1] = Asc("M") OR RecBuf[0] = &H1 THEN
              Main.WriteRFXDebugLog(" Master=" & Hex(RecBuf[2], 2) & "\n", TRUE)
            ELSE
              Main.WriteRFXDebugLog(" " & Hex(RecBuf[1], 2), TRUE)
            END IF
          ELSE IF iByteCount = 3 THEN
            Main.WriteRFXDebugLog(" " & Hex(RecBuf[1], 2), TRUE)
          END IF
        END IF
      END IF
    ELSE IF Protocol = MODEARC THEN
      ProcessARC()
    ELSE IF Protocol = MODEKOP THEN
      ' ProcessKoppla()
    ELSE IF bRFXSensor THEN
      ProcessRFXSensor()
    ELSE IF bRFXPower THEN
      ProcessRFXMeter()
    ELSE IF bSRFXPower THEN
      ' ProcessSRFXMeter()
    ELSE IF Protocol = MODEVISONIC THEN
      ' ProcessVisonic(RecBits)
    ELSE IF Protocol = MODENOXLAT THEN
      IF RecBits = 36 OR RecBits = 66 OR RecBits = 72 THEN
        ' ProcessVisonic(RecBits)
      ELSE IF RecBits > 59 THEN
        IF ProcessOregon(RecBits) = FALSE THEN
        ' ProcessVisonic(RecBits)
        END IF
      ELSE
        ProcessX(RecBits)
      END IF
    ELSE IF Protocol = MODEVAR AND RecBits = 20 THEN
      ProcessAti()
    ELSE IF Protocol = MODEVAR AND RecBits = 21 THEN
      ProcessAtiPlus()
    ELSE IF Protocol = MODEVAR AND (RecBits = 12 OR RecBits = 34 OR RecBits = 38) THEN
      ProcessHE()
    ELSE IF Protocol = MODEVAR AND RecBits = 47 THEN
      ' ProcessCheaperTronics()
    ELSE IF Protocol = MODEVAR AND (RecBits = 56 OR RecBits > 59) THEN
      ProcessOregon(RecBits)
    ELSE
      ProcessX(RecBits)
    END IF

    IF (Protocol = MODEVAR OR Protocol = MODENOXLAT) AND RecBits <> 0 THEN
      Main.ControlLed("RFXCom", "Off")
      IF bRFXComRXDebug THEN
        IF bSlave THEN
          Main.WriteRFXDebugLog(" bits=" & Str(RecBits) & " from SLAVE\n", TRUE)
        ELSE
          Main.WriteRFXDebugLog(" bits=" & Str(RecBits) & "\n", TRUE)
        END IF
      END IF
    END IF
  ELSE
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" ACK\n", FALSE)
  END IF
  bWaitforAck = FALSE

END

PRIVATE SUB ProcessRFXSensor()

  DIM iBarometer, iDeviceId AS Integer
  DIM sMeasuredValue, sHumidity AS Single
  DIM sType AS String

  SELECT CASE (RecBuf[0] AND &H3)
    CASE 0
      sType = "]T"
    CASE 1
      sType = "]Z"
    CASE 2
      sType = "]V"
    CASE 3
      sType = "]?"
  END SELECT
  IF bRFXComRXDebug THEN
    Main.WriteRFXDebugLog(" RFXSENSOR[" & (RecBuf[0] * 256 + RecBuf[1]) & sType, TRUE)
    Main.WriteRFXDebugLog(" RFXSensor", TRUE)
    Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[0], 2), TRUE)
    Main.WriteRFXDebugLog(Hex(RecBuf[1], 2), TRUE)
    Main.WriteRFXDebugLog(" ID:" & CStr(RecBuf[1] + (RecBuf[0] * 256)) & " ", TRUE)
  END IF
  IF (RecBuf[3] AND &H10) <> 0 THEN
    IF bRFXComRXDebug THEN
      SELECT CASE RecBuf[2]
        CASE &H81
          Main.WriteRFXDebugLog((" Error: No 1-Wire device connected"), TRUE)
        CASE &H82
          Main.WriteRFXDebugLog((" Error: 1-Wire ROM CRC error"), TRUE)
        CASE &H83
          Main.WriteRFXDebugLog((" Error: 1-Wire device connected is not a DS1820"), TRUE)
        CASE &H84
          Main.WriteRFXDebugLog((" Error: No end of read signal received from 1-Wire device"), TRUE)
        CASE &H85
          Main.WriteRFXDebugLog((" Error: 1-Wire device Scratchpad CRC error"), TRUE)
        CASE &H1
          Main.WriteRFXDebugLog((" Info: address incremented"), TRUE)
        CASE &H2
          Main.WriteRFXDebugLog((" Info: battery low"), TRUE)
        CASE ELSE
          Main.WriteRFXDebugLog((" Unknown Info/Error code!"), TRUE)
      END SELECT
    END IF
  ELSE
    ' temperature sensor
    IF (RecBuf[0] AND &H3) = 0 THEN
      sMeasuredValue = RecBuf[2] + ((Lsr(RecBuf[3], 5)) * 0.125)
      IF sMeasuredValue > 200 THEN
        sMeasuredValue = 0 - (256 - sMeasuredValue)
      END IF
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Temp:") & CStr(sMeasuredValue) & "°C | " & CStr((sMeasuredValue) * 1.8 + 32) & "°F", TRUE)
      sTemperature = sMeasuredValue
      ' find device id
      iDeviceId = Devices.Find("RFXSENSOR[" & (RecBuf[0] * 256 + RecBuf[1]) & sType, Devices.FindInterface("RFXCom Receiver"), "RFXSensor Temp")
      ' update value
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C
          Devices.ValueUpdate(iDeviceId, CStr(sMeasuredValue), "", "", "")
        ELSE
          ' temp °F
          Devices.ValueUpdate(iDeviceId, CStr((sMeasuredValue) * 1.8 + 32), "", "", "")
        END IF
      END IF
    ' barometer, humidity or A/D sensor
    ELSE IF (RecBuf[0] AND &H3) = 1 THEN
      sMeasuredValue = Lsr((RecBuf[2] * 256 + RecBuf[3]), 5)
      ' it is assumed that only one RFXSensor is active!
      ' for correct processing you need to save the temp and voltage for each sensor
      ' and use this in the checks and calculations.
      IF iSupplyVoltage <> 0 THEN
        sHumidity = (((sMeasuredValue / iSupplyVoltage) - 0.16) / 0.0062)
        iBarometer = ((sMeasuredValue / iSupplyVoltage) + 0.095) / 0.0009
      ELSE
        IF bRFXComRXDebug THEN
          Main.WriteRFXDebugLog(("\nNot yet able to calculate the right RH and barometric pressure values."), TRUE)
          Main.WriteRFXDebugLog(("\nSupply Voltage not yet available! Now 4.7V assumed. Reset the RFXSensor or wait. (max. 80min)"), TRUE)
        END IF
        sHumidity = (((sMeasuredValue / 470) - 0.16) / 0.0062)
        iBarometer = ((sMeasuredValue / 470) + 0.095) / 0.0009
      END IF
      IF sTemperature <> 0 THEN
        sHumidity = Round(sHumidity / (1.0546 - 0.00216 * sTemperature))
      ELSE
        IF iSupplyVoltage <> 0 THEN
          IF bRFXComRXDebug THEN
            Main.WriteRFXDebugLog(("\nNot yet able to calculate the right RH and barometric pressure values."), TRUE)
          END IF
        END IF
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("\nTemperature not yet available! Now 25°C assumed. Reset the RFXSensor or wait. (max. 80min)"), TRUE)
          sHumidity = Round(sHumidity / (1.0546 - 0.00216 * 25))
      END IF
      IF iSupplyVoltage = 0 OR sTemperature = 0 THEN
        '
      END IF
      ' find device id
      iDeviceId = Devices.Find("RFXSENSOR[" & (RecBuf[0] * 256 + RecBuf[1]) & sType, Devices.FindInterface("RFXCom Receiver"), "RFXSensor Baro/Humid/Volt")
      IF iDeviceId THEN
        SELECT Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iDeviceId))
          CASE "Barometric Sensor"
            ' baro in hPa
            Devices.ValueUpdate(iDeviceId, CStr(iBarometer), "", "", "")
          CASE "A/D Sensor"
            ' a/d in volt
            Devices.ValueUpdate(iDeviceId, CStr(sMeasuredValue / 100), "", "", "")
          CASE "Humidity Sensor"
            ' hum in %
            Devices.ValueUpdate(iDeviceId, CStr(sHumidity), "", "", "")
          CASE ELSE
            Devices.ValueUpdate(iDeviceId, CStr(sMeasuredValue), "", "", "")
        END SELECT
      END IF
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog((" RH:") & CStr(sHumidity) & "%", TRUE)
        Main.WriteRFXDebugLog((" Barometer:") & CStr(iBarometer) & "hPa", TRUE)
        Main.WriteRFXDebugLog((" A/D voltage:") & CStr(sMeasuredValue / 100), TRUE)
      END IF
    ' supply voltage sensor
    ELSE IF (RecBuf[0] AND &H3) = 2 THEN
        iSupplyVoltage = Lsr((RecBuf[2] * 256 + RecBuf[3]), 5)
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Supply Voltage:") & CStr(iSupplyVoltage / 100), TRUE)
        ' find device id
        iDeviceId = Devices.Find("RFXSENSOR[" & (RecBuf[0] * 256 + RecBuf[1]) & sType, Devices.FindInterface("RFXCom Receiver"), "RFXSensor Supply Voltage")
        ' update value
        IF iDeviceId THEN
          ' supply voltage
          Devices.ValueUpdate(iDeviceId, Str(sMeasuredValue / 100), "", "", "")
        END IF
    ELSE IF (RecBuf[0] AND &H3) = 3 THEN
        IF (RecBuf[3] AND &H20) = 0 THEN
          IF bRFXComRXDebug THEN
            Main.WriteRFXDebugLog("ZAP25:" & CStr(Round((5 / 1024) * (RecBuf[2] * 2 + (Lsr(RecBuf[3], 7))) / 0.033, 2) & "A"), TRUE)
            Main.WriteRFXDebugLog("ZAP50:" & CStr(Round((5 / 1024) * (RecBuf[2] * 2 + (Lsr(RecBuf[3], 7))) / 0.023, 2) & "A"), TRUE)
            Main.WriteRFXDebugLog("ZAP100:" & CStr(Round((5 / 1024) * (RecBuf[2] * 2 + (Lsr(RecBuf[3], 7))) / 0.019, 2) & "A"), TRUE)
          END IF
        ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Voltage=") & CStr(RecBuf[2] * 2), TRUE)
        END IF
    END IF
  END IF

END

PRIVATE SUB ProcessARC()

  DIM Group, Unit AS Byte
  DIM sHouseCode, sValue AS String
  DIM iCnt, iDeviceId AS Integer

  IF iByteCount = 3 THEN
    Group = ((Lsr((RecBuf[1] AND &H40), 5)) OR (Lsr((RecBuf[1] AND &H10), 4))) + 1
    Unit = ((Lsr((RecBuf[1] AND &H4), 1)) OR (RecBuf[1] AND &H1)) + 1
    sHouseCode = Chr(((Lsr((RecBuf[2] AND &H40), 3)) OR (Lsr((RecBuf[2] AND &H10), 2)) OR (Lsr((RecBuf[2] AND &H4), 1)) OR (RecBuf[2] AND &H1)) + &H41)
    IF RecBuf[1] = &HFF THEN
      SELECT CASE RecBuf[0]
        CASE &H54
          sMessage = (" GROUP Housecode=") & sHouseCode & (" Command: ON")
          svalue = "On"
        CASE &H14
          sMessage = (" GROUP Housecode=") & sHouseCode & (" Command: OFF")
          sValue = "Off"
        CASE &H55
          sMessage = (" GROUP Housecode=") & sHouseCode & (" Command: Button released")
        CASE ELSE
      END SELECT
    ELSE
      SELECT CASE RecBuf[0]
        CASE &H54
          sMessage = (" Housecode=") & sHouseCode & (" Group=") & Str(Group) & (" Unit=") & Str(Unit) & (" Command: ON")
        CASE &H14
          sMessage = (" Housecode=") & sHouseCode & (" Group=") & Str(Group) & (" Unit=") & Str(Unit) & (" Command: OFF")
        CASE &H55
          sMessage = (" Housecode=") & sHouseCode & (" Group=") & Str(Group) & (" Unit=") & Str(Unit) & (" Command: Button released")
        CASE ELSE
      END SELECT
    END IF
  ELSE IF iByteCount = 8 OR iByteCount = 9 THEN
    sMessage = (" HomeEasy code=")
    FOR iCnt = 0 TO (iByteCount - 1)
      sMessage = sMessage & Hex(RecBuf[iCnt], 2)
    NEXT
  ELSE
    sMessage = (" Unknown code=")
    FOR iCnt = 0 TO (iByteCount - 1)
      sMessage = sMessage & Hex(RecBuf[iCnt], 2)
    NEXT
  END IF
  ' find device id
  iDeviceId = Devices.Find(sHouseCode & Right("0" & Unit, 2), Devices.FindInterface("RFXCom Receiver"), "ARC")
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sValue, "", "", "")
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(sMessage & " bits=" & RecBits, 1)

END

PRIVATE SUB ProcessAti()

  DIM iRemote, iDeviceId AS Integer
  DIM sCommand AS String

  IF RecBuf[0] > RecBuf[1] THEN
    iRemote = RecBuf[0] - RecBuf[1]
  ELSE
    iRemote = (RecBuf[0] + &H100&) - RecBuf[1]
  END IF

  IF bRFXComRXDebug THEN
    Main.WriteRFXDebugLog(" ATI[" & (Lsr(RecBuf[2], 4)) & "]C Remote type=", 1)

    SELECT CASE iRemote
      CASE &HC5
        Main.WriteRFXDebugLog("ATI Remote Wonder", 1)
      CASE &HD5
        Main.WriteRFXDebugLog("Medion", 1)
      CASE ELSE
        Main.WriteRFXDebugLog("Unknown remote:" & Hex(iRemote), 1)
    END SELECT
    Main.WriteRFXDebugLog(" Channel=" & Str(Lsr(RecBuf[2], 4)), 1)
  END IF

  SELECT CASE RecBuf[1]
    CASE &H0
      IF iRemote = &HC5 THEN
        sCommand = "Key-a"
      ELSE
        sCommand = "Mute"
      END IF
    CASE &H1
      sCommand = "Key-b"
    CASE &H2
      sCommand = "Power"
    CASE &H3
      sCommand = "Tv"
    CASE &H4
      sCommand = "Dvd"
    CASE &H5
      IF iRemote = &HC5 THEN
        sCommand = "Web"
      ELSE
        sCommand = "Photo"
      END IF
    CASE &H6
      IF iRemote = &HC5 THEN
        sCommand = "Guide"
      ELSE
        sCommand = "Music"
      END IF
    CASE &H7
      sCommand = "Drag"
    CASE &H8
      IF iRemote = &HC5 THEN
        sCommand = "Vol+"
      ELSE
        sCommand = "Vol-"
      END IF
    CASE &H9
      IF iRemote = &HC5 THEN
        sCommand = "Vol-"
      ELSE
        sCommand = "Vol+"
      END IF
    CASE &HA
      sCommand = "Mute"
    CASE &HB
      sCommand = "Chan+"
    CASE &HC
      sCommand = "Chan-"
    CASE &HD
      sCommand = "Key-1"
    CASE &HE
      sCommand = "Key-2"
    CASE &HF
      sCommand = "Key-3"
    CASE &H10
      sCommand = "Key-4"
    CASE &H11
      sCommand = "Key-5"
    CASE &H12
      sCommand = "Key-6"
    CASE &H13
      sCommand = "Key-7"
    CASE &H14
      sCommand = "Key-8"
    CASE &H15
      sCommand = "Key-9"
    CASE &H16
      sCommand = "Txt"
    CASE &H17
      sCommand = "Key-0"
    CASE &H18
      sCommand = "Snapshot"
    CASE &H19
      IF iRemote = &HC5 THEN
        sCommand = "Key-c"
      ELSE
        sCommand = "Dvd-menu"
      END IF
    CASE &H1A
      sCommand = "Cursor-up"
    CASE &H1B
      IF iRemote = &HC5 THEN
        sCommand = "Key-d"
      ELSE
        sCommand = "Setup"
      END IF
    CASE &H1C
      sCommand = "Tv-radio"
    CASE &H1D
      sCommand = "Cursor-left"
    CASE &H1E
      sCommand = "Ok"
    CASE &H1F
      sCommand = "Cursor-right"
    CASE &H20
      sCommand = "Return"
    CASE &H21
      sCommand = "Key-e"
    CASE &H22
      sCommand = "Cursor-down"
    CASE &H23
      sCommand = "Key-f"
    CASE &H24
      sCommand = "Rewind"
    CASE &H25
      sCommand = "Play"
    CASE &H26
      sCommand = "Fast-forward"
    CASE &H27
      sCommand = "Record"
    CASE &H28
      sCommand = "Stop"
    CASE &H29
      sCommand = "Pause"
    CASE &H2C
      sCommand = "Tv"
    CASE &H2D
      sCommand = "Vcr"
    CASE &H2E
      sCommand = "Radio"
    CASE &H2F
      sCommand = "Tv-preview"
    CASE &H30
      sCommand = "Channel-list"
    CASE &H31
      sCommand = "Video-desktop"
    CASE &H32
      sCommand = "Red"
    CASE &H33
      sCommand = "Green"
    CASE &H34
      sCommand = "Yellow"
    CASE &H35
      sCommand = "Blue"
    CASE &H36
      sCommand = "Rename-tab"
    CASE &H37
      sCommand = "Snapshot"
    CASE &H38
      sCommand = "Edit-image"
    CASE &H39
      sCommand = "Full-screen"
    CASE &H3A
      sCommand = "Dvd-audio"
    CASE &H70
      sCommand = "Mouse-left"
    CASE &H71
      sCommand = "Mouse-right"
    CASE &H72
      sCommand = "Mouse-up"
    CASE &H73
      sCommand = "Mouse-down"
    CASE &H74
      sCommand = "Mouse-up-left"
    CASE &H75
      sCommand = "Mouse-up-right"
    CASE &H76
      sCommand = "Mouse-down-right"
    CASE &H77
      sCommand = "Mouse-down-left"
    CASE &H78
      sCommand = "Key-v"
    CASE &H79
      sCommand = "Key-v-end"
    CASE &H7C
      sCommand = "Key-x"
    CASE &H7D
      sCommand = "Key-x-end"
    CASE ELSE
      sCommand = "Unknown"
  END SELECT
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Command=" & sCommand, 1)

  iDeviceId = Devices.Find("ATI[" & (Lsr(RecBuf[2], 4)) & "]C", Devices.FindInterface("RFXCom Receiver"), "ATI Remote Wonder")
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, Str(sCommand), "", "", "")

END

PRIVATE SUB ProcessAtiPlus()

  DIM iRemote, iDeviceId AS Integer
  DIM sCommand AS String

  IF RecBuf[0] > RecBuf[1] THEN
    iRemote = RecBuf[0] - RecBuf[1]
  ELSE
    iRemote = (RecBuf[0] + &H100&) - RecBuf[1]
  END IF

  IF bRFXComRXDebug THEN
    Main.WriteRFXDebugLog(" ATIPLUS[" & (Lsr(RecBuf[2], 4)) & "]C Remote type=", 1)

    SELECT CASE iRemote
      CASE &HC5
        Main.WriteRFXDebugLog("ATI Remote Wonder Plus", 1)
      CASE ELSE
        Main.WriteRFXDebugLog("Unknown remote:" & Hex(iRemote), 1)
    END SELECT
    Main.WriteRFXDebugLog(" Channel=" & Str(Lsr(RecBuf[2], 4)), 1)

    IF (RecBuf[1] AND &H80) = 0 THEN
      Main.WriteRFXDebugLog(" Even ", 1)
    ELSE
      Main.WriteRFXDebugLog(" Odd ", 1)
    END IF
  ENDIF

  SELECT CASE (RecBuf[1] AND &H7F)
    CASE &H0
      sCommand = "Key-a"
    CASE &H1
      sCommand = "Key-b"
    CASE &H2
      sCommand = "Power"
    CASE &H3
      sCommand = "Tv"
    CASE &H4
      sCommand = "Dvd"
    CASE &H5
      sCommand = "?"
    CASE &H6
      sCommand = "Guide"
    CASE &H7
      sCommand = "Drag"
    CASE &H8
      sCommand = "Vol+"
    CASE &H9
      sCommand = "Vol-"
    CASE &HA
      sCommand = "Mute"
    CASE &HB
      sCommand = "Chan+"
    CASE &HC
      sCommand = "Chan-"
    CASE &HD
      sCommand = "Key-1"
    CASE &HE
      sCommand = "Key-2"
    CASE &HF
      sCommand = "Key-3"
    CASE &H10
      sCommand = "Key-4"
    CASE &H11
      sCommand = "Key-5"
    CASE &H12
      sCommand = "Key-6"
    CASE &H13
      sCommand = "Key-7"
    CASE &H14
      sCommand = "Key-8"
    CASE &H15
      sCommand = "Key-9"
    CASE &H16
      sCommand = "Txt"
    CASE &H17
      sCommand = "Key-0"
    CASE &H18
      sCommand = "Setup-menu"
    CASE &H19
      sCommand = "Key-c"
    CASE &H1A
      sCommand = "Cursor-up"
    CASE &H1B
      sCommand = "Key-d"
    CASE &H1C
      sCommand = "Fm"
    CASE &H1D
      sCommand = "Cursor-left"
    CASE &H1E
      sCommand = "Ok"
    CASE &H1F
      sCommand = "Cursor-right"
    CASE &H20
      sCommand = "Max-restore-window"
    CASE &H21
      sCommand = "Key-e"
    CASE &H22
      sCommand = "Cursor-down"
    CASE &H23
      sCommand = "Key-f"
    CASE &H24
      sCommand = "Rewind"
    CASE &H25
      sCommand = "Play"
    CASE &H26
      sCommand = "Fast-forward"
    CASE &H27
      sCommand = "Record"
    CASE &H28
      sCommand = "Stop"
    CASE &H29
      sCommand = "Pause"
    CASE &H2A
      sCommand = "Tv2"
    CASE &H2B
      sCommand = "Clock"
    CASE &H2C
      sCommand = "Key-i"
    CASE &H2D
      sCommand = "Ati"
    CASE &H2E
      sCommand = "Radio"
    CASE &H2F
      sCommand = "Tv-preview"
    CASE &H30
      sCommand = "Channel-list"
    CASE &H31
      sCommand = "Video-desktop"
    CASE &H32
      sCommand = "Red"
    CASE &H33
      sCommand = "Green"
    CASE &H34
      sCommand = "Yellow"
    CASE &H35
      sCommand = "Blue"
    CASE &H36
      sCommand = "Rename-tab"
    CASE &H37
      sCommand = "Snapshot"
    CASE &H38
      sCommand = "Edit-image"
    CASE &H39
      sCommand = "Full-screen"
    CASE &H3A
      sCommand = "Dvd-audio"
    CASE &H70
      sCommand = "Mouse-left"
    CASE &H71
      sCommand = "Mouse-right"
    CASE &H72
      sCommand = "Mouse-up"
    CASE &H73
      sCommand = "Mouse-down"
    CASE &H74
      sCommand = "Mouse-up-left"
    CASE &H75
      sCommand = "Mouse-up-right"
    CASE &H76
      sCommand = "Mouse-down-right"
    CASE &H77
      sCommand = "Mouse-down-left"
    CASE &H78
      sCommand = "Left-mouse-button"
    CASE &H79
      sCommand = "Key-v-end"
    CASE &H7C
      sCommand = "Right-mouse-button"
    CASE &H7D
      sCommand = "Key-x-end"
    CASE ELSE
      sCommand = "Unknown"
  END SELECT
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Command=" & sCommand, 1)

  iDeviceId = Devices.Find("ATIPLUS[" & (Lsr(RecBuf[2], 4)) & "]C", Devices.FindInterface("RFXCom Receiver"), "ATI Wonder Plus")
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, Str(sCommand), "", "", "")

END

PRIVATE SUB ProcessHE()

  DIM sText, sDevice AS String
  DIM iDeviceId AS Integer

  IF RecBits <> 12 THEN
    sDevice = Hex(Lsr(RecBuf[0], 6)) & Hex((Lsl(RecBuf[0], 2) OR Lsr(RecBuf[1], 6)) AND &HFF) & Hex((Lsl(RecBuf[1], 2) OR Lsr(RecBuf[2], 6)) AND &HFF) & Hex((Lsl(RecBuf[2], 2) OR Lsr(RecBuf[3], 6)) AND &HFF)
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" HE Device=" & sDevice, TRUE)
      Main.WriteRFXDebugLog(" Unit=" & CStr((RecBuf[3] AND &HF) + 1), TRUE)
    END IF
    IF RecBits = 34 THEN
      SELECT CASE RecBuf[3] AND &H30
        CASE &H0
          sText = "OFF"
          iDeviceId = Devices.Find(sDevice & CStr((RecBuf[3] AND &HF) + 1), Devices.FindInterface("RFXCom Receiver"), "HE/KAKU")
          IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
        CASE &H10
          sText = "ON"
          iDeviceId = Devices.Find(sDevice & CStr((RecBuf[3] AND &HF) + 1), Devices.FindInterface("RFXCom Receiver"), "HE/KAKU")
          IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, "On", "", "", "")
        CASE &H20
          sText = "GROUP OFF"
        CASE &H30
          sText = "GROUP ON"
      END SELECT
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sText, TRUE)
    ELSE
      IF bRFXComRXDebug THEN 
        SELECT CASE RecBuf[4] AND &HC
          CASE &H0
            Main.WriteRFXDebugLog((" Error: preset record length without preset bits set"), TRUE)
          CASE &H4
              IF (RecBuf[3] AND &H20) = &H0 THEN
              Main.WriteRFXDebugLog((" Preset command,"), TRUE)
            ELSE
              Main.WriteRFXDebugLog((" Preset group command,"), TRUE)
            END IF
          CASE &H8, &HC
            Main.WriteRFXDebugLog((" Reserved (unexpected)"), TRUE)
        END SELECT
        Main.WriteRFXDebugLog((" Level=") & CStr((Lsr(RecBuf[4], 4)) + 1), TRUE)
      END IF
    END IF
  END IF

END

PRIVATE SUB ProcessRFXMeter()

  DIM sMeasuredValue AS Single
  DIM iDeviceId AS Integer
  DIM sTemp AS String

  IF bRFXComRXDebug THEN
    Main.WriteRFXDebugLog(" RFXMeter[" & (RecBuf[0] * 256 + RecBuf[1]) & "]M", TRUE)
    Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[0], 2) & Hex(RecBuf[1]), 1)
    Main.WriteRFXDebugLog(" ID:" & Format(Str(RecBuf[1] + (RecBuf[0] * 256)), "00") & " ", TRUE)
  END IF
  SELECT CASE RecBuf[5] AND &HF0
    CASE &H0
      sMeasuredValue = ((RecBuf[4] * 65536) + (RecBuf[2] * 256) + RecBuf[3])
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog("RFXMeter: " & Str(sMeasuredValue), TRUE)
        Main.WriteRFXDebugLog("; RFXPower: " & Str(sMeasuredValue / 100) & " kWh", TRUE)
        Main.WriteRFXDebugLog("; RFXPower-Module: " & Str(sMeasuredValue / 1000) & " kWh", TRUE)
      END IF
      iDeviceId = Devices.Find("RFXMETER[" & (RecBuf[0] * 256 + RecBuf[1]) & "]M", Devices.FindInterface("RFXCom Receiver"), "RFXMeter/Power")
      IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, Str(sMeasuredValue), "", "", "")
    CASE &H10
      sTemp = ("Interval: ")
      SELECT CASE RecBuf[2]
        CASE &H1
          sTemp = sTemp & ("30 seconds")
        CASE &H2
          sTemp = sTemp & ("1 minute")
        CASE &H4
          sTemp = sTemp & ("6 minutes")
        CASE &H8
          sTemp = sTemp & ("12 minutes")
        CASE &H10
          sTemp = sTemp & ("15 minutes")
        CASE &H20
          sTemp = sTemp & ("30 minutes")
        CASE &H40
          sTemp = sTemp & ("45 minutes")
        CASE &H80
          sTemp = sTemp & ("60 minutes")
        CASE ELSE
          sTemp = sTemp & ("illegal value")
      END SELECT
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(sTemp, TRUE)
    CASE &H20
      SELECT CASE (RecBuf[4] AND &HC0)
        CASE &H0
          sTemp = ("Input-0 ")
        CASE &H40
          sTemp = ("Input-1 ")
        CASE &H80
          sTemp = ("Input-2 ")
        CASE ELSE
          sTemp = ("Error, unknown input ")
      END SELECT
      sMeasuredValue = (((RecBuf[4] AND &H3F) * 65536) + (RecBuf[2] * 256) + RecBuf[3]) / 1000
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Calibration: ") & sMeasuredValue & "msec ", TRUE)
        Main.WriteRFXDebugLog(sTemp, TRUE)
        IF sMeasuredValue <> 0 THEN
          Main.WriteRFXDebugLog("RFXPower= " & Round(1 / ((16 * sMeasuredValue) / (3600000 / 100)), 3) & "kW", 1)
          Main.WriteRFXDebugLog(" RFXPwr= " & Round(1 / ((16 * sMeasuredValue) / (3600000 / 62.5)), 3) & "|" & Round((1 / ((16 * sMeasuredValue) / (3600000 / 62.5))) * 1.917, 3) & "kW", 1)
        END IF
      END IF
    CASE &H30
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("New address set"))
    CASE &H40
      SELECT CASE (RecBuf[4] AND &HC0)
        CASE &H0
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Counter for Input-0 will be set to zero within 5 seconds OR push MODE button for next command."))
        CASE &H40
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Counter for Input-1 will be set to zero within 5 seconds OR push MODE button for next command."))
        CASE &H80
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Counter for Input-2 will be set to zero within 5 seconds OR push MODE button for next command."))
        CASE ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Error, unknown input "))
      END SELECT
    CASE &H50
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Push MODE push button within 5 seconds to increment the 1st digit."))
        Main.WriteRFXDebugLog(("Counter value = ") & Format(sMeasuredValue, "00000"))
      END IF
    CASE &H60
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Push MODE push button within 5 seconds to increment the 2nd digit."))
        Main.WriteRFXDebugLog(("Counter value = ") & Format(sMeasuredValue, "00000"))
      END IF
    CASE &H70
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Push MODE push button within 5 seconds to increment the 3rd digit."))
        Main.WriteRFXDebugLog(("Counter value = ") & Format(sMeasuredValue, "00000"))
      END IF
    CASE &H80
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Push MODE push button within 5 seconds to increment the 4th digit."))
        Main.WriteRFXDebugLog(("Counter value = ") & Format(sMeasuredValue, "00000"))
      END IF
    CASE &H90
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Push MODE push button within 5 seconds to increment the 5th digit."))
        Main.WriteRFXDebugLog(("Counter value = ") & Format(sMeasuredValue, "00000"))
      END IF
    CASE &HA0
      SMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(("Push MODE push button within 5 seconds to increment the 6th digit."))
        Main.WriteRFXDebugLog(("Counter value = ") & Format(sMeasuredValue, "00000"))
      END IF
    CASE &HB0
      SELECT CASE RecBuf[4]
        CASE &H0
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Counter for Input-0 reset to zero."))
        CASE &H40
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Counter for Input-1 reset to zero."))
        CASE &H80
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Counter for Input-2 reset to zero."))
        CASE ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("protocol error."))
      END SELECT
    CASE &HC0
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Enter SET INTERVAL RATE mode within 5 seconds OR push MODE button for next command."))
    CASE &HD0
      SELECT CASE (RecBuf[4] AND &HC0)
        CASE &H0
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Enter CALIBRATION mode for Input-0 within 5 seconds OR push MODE button for next command."))
        CASE &H40
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Enter CALIBRATION mode for Input-1 within 5 seconds OR push MODE button for next command."))
        CASE &H80
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Enter CALIBRATION mode for Input-2 within 5 seconds OR push MODE button for next command."))
        CASE ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Error, unknown input "))
      END SELECT
    CASE &HE0
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("Enter SET ADDRESS mode within 5 seconds OR push MODE button for next command."))
    CASE &HF0
      IF RecBuf[2] < &H40 THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("RFXPower Identification,"), TRUE)
      ELSE IF RecBuf[2] < &H80 THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("RFXWater Identification,"), TRUE)
      ELSE IF RecBuf[2] < &HC0 THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("RFXGas Identification,"), TRUE)
      ELSE
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("RFXMeter Identification,"), TRUE)
      END IF
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Firmware Version: ") & Hex(RecBuf[2]))
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((", Interval rate: "), TRUE)
      SELECT CASE RecBuf[3]
        CASE &H1
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("30 seconds"), TRUE)
        CASE &H2
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("1 minute"), TRUE)
        CASE &H4
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("6 minutes"), TRUE)
        CASE &H8
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("12 minutes"), TRUE)
        CASE &H10
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("15 minutes"), TRUE)
        CASE &H20
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("30 minutes"), TRUE)
        CASE &H40
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("45 minutes"), TRUE)
        CASE &H80
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("60 minutes"), TRUE)
        CASE ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("illegal value"), TRUE)
    END SELECT
    CASE ELSE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(("illegal packet type"), TRUE)
  END SELECT

END

PRIVATE FUNCTION BatteryIndication() AS String

  IF (RecBuf[4] AND &H4) = 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Battery OK"), TRUE)
    RETURN "OK"
  ELSE
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Battery Empty"), TRUE)
    RETURN "Empty"
  END IF

END

PRIVATE FUNCTION ProcessOregon(RecBits AS Byte) AS Boolean

  DIM sCelsius, sUv, sWeight, sLb, sStlb, sStlbr, sTrain, sTrainRate, sSpeed, sDd, sMm, sYy, sCt1, sCt2, sCt3 AS Single
  DIM lCt4 AS Float
  DIM bOregon AS Boolean = FALSE
  DIM iDeviceId, iCnt, iDirection AS Integer
  DIM sUvText, sWrText, sBatt, sForecast, sWrSpeed, sWrAvgSpeed, sWrDirection, Hr, Mn, Sc, sDay AS String

  ' TEMP1 Oregon THR128,THx138
  IF RecBuf[0] = &HA AND RecBuf[1] = &H4D AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TEMP1[" & CStr((RecBuf[3]) * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] THR128,THx138", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    IF ((RecBuf[5] AND &HF0) < &HA0) AND ((RecBuf[5] AND &HF) < &HA) AND ((RecBuf[4] AND &HF0) < &HA0) THEN
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" temp:", 1)
      IF (RecBuf[6] AND &H8) = 0 THEN
        sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
      ELSE
        sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
      END IF
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
    ELSE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" wrong value in temperature field=") & Hex(RecBuf[5]) & "." & Hex(Lsr(RecBuf[4], 4)), TRUE)
    END IF
    sBatt = BatteryIndication()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TEMP1[" & CStr((RecBuf[3]) * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp THR128/138,THC138")
      ' update value & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), "", "", "")
        ELSE
          ' temp °F
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), "", "", "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TEMP2 Oregon THRN132N,THWR288,AW131
  ELSE IF RecBuf[0] = &HEA AND RecBuf[1] = &H4C AND RecBits >= 60 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TEMP2[" & CStr((RecBuf[3]) * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] THN132N,THWR288,AW131", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    IF ((RecBuf[5] AND &HF0) < &HA0) AND ((RecBuf[5] AND &HF) < &HA) AND ((RecBuf[4] AND &HF0) < &HA0) THEN
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" temp:", 1)
      IF (RecBuf[6] AND &H8) = 0 THEN
        sCelsius = (RecBuf[6] AND &H1) * 100 + CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
      ELSE
        sCelsius = 0 - (CSng(Hex(RecBuf[5]))) + CSng(Hex(Lsr(RecBuf[4], 4)) / 10)
      END IF
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
    END IF
    sBatt = BatteryIndication()
    IF ChecksumW() THEN
      ' find device id
      iDeviceId = Devices.Find("TEMP2[" & CStr((RecBuf[3]) * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp THC238/268,THN122/132,THWR288,AW129/131")
      ' update value & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), "", "", "")
        ELSE
          ' temp °F
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), "", "", "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TEMP3 Oregon THWR800
  ELSE IF RecBuf[0] = &HCA AND RecBuf[1] = &H48 AND RecBits >= 60 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TEMP3[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] THWR800", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    ENDIF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(Recbuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
    sBatt = BatteryIndication()
    IF ChecksumW() THEN
      ' find device id
      iDeviceId = Devices.Find("TEMP3[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp THWR800")
      ' update value & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), "", "", "")
        ELSE
          ' temp °F
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), "", "", "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TEMP4 Oregon RTHN318
  ELSE IF (RecBuf[0] AND &HF) = &HA AND RecBuf[1] = &HDC AND RecBits >= 64 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TEMP4[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] RTHN318", TRUE)
      WrChannel3()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    ENDIF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(Recbuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
    sBatt = BatteryIndication()
    IF ChecksumW() THEN
      ' find device id
      iDeviceId = Devices.Find("TEMP4[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp RTHN318")
      ' update value & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), "", "", "")
        ELSE
          ' temp °F
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), "", "", "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TH1 Oregon THGN122N,THGR122NX,THGR228N,THGR268
  ELSE IF RecBuf[0] = &H1A AND RecBuf[1] = &H2D AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TH1[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4) AND &H7)) & "] THGN122N,THGR122NX,THGR228N,THGR268", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    sBatt = BatteryIndication()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TH1[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum THGN122/123,THGR122/228/238/268")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        ELSE
          ' temp °F, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TH2 Oregon THGR810
  ELSE IF RecBuf[0] = &HFA AND RecBuf[1] = &H28 AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TH2[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4))) & "] THGR810", TRUE)
      WrChannel3()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", 1)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    sBatt = BatteryIndication()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TH2[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4))) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum THGR810")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        ELSE
          ' temp °F, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TH3 Oregon RTGR328N
  ELSE IF (RecBuf[0] AND &HF) = &HA AND RecBuf[1] = &HCC AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TH3[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4))) & "] RTGR328N", TRUE)
      WrChannel3()
      Main.WriteRFXDebugLog(" counter:" & CStr(Lsr(RecBuf[0], 4)), TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "#0.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    sBatt = BatteryIndication()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TH3[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4))) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum RTGR328N")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        ELSE
          ' temp °F, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TH4 Oregon THGR328
  ELSE IF RecBuf[0] = &HCA AND RecBuf[1] = &H2C AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TH4[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] THGR328", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" counter:" & CStr(Lsr(RecBuf[0], 4)), TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "#0.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    sBatt = BatteryIndication()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TH4[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum THGR328")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        ELSE
          ' temp °F, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TH5 Oregon WTGR800
  ELSE IF RecBuf[0] = &HFA AND RecBuf[1] = &HB8 AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TH5[" & CStr(RecBuf[3] * 256) & "] WTGR800", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "#0.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    sBatt = WrBattery()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TH5[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum WTGR800")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        ELSE
          ' temp °F, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' TH6 Oregon THGR918
  ELSE IF RecBuf[0] = &H1A AND RecBuf[1] = &H3D AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" TH6[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] THGR918/228", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "#0.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    sBatt = WrBattery()
    IF Checksum8() THEN
      ' find device id
      iDeviceId = Devices.Find("TH6[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum THGR918/228")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        ELSE
          ' temp °F, hum %, hum text
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), sWrText, "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' THB1 Oregon BTHR918
  ELSE IF RecBuf[0] = &H5A AND RecBuf[1] = &H5D AND RecBits >= 88 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" THB1[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] BTHR918", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", 1)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "#0.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" baro:" & CStr(RecBuf[8] + 795) & "hPa", TRUE)
    sForecast = WrForecast(RecBuf[9] AND &HF)
    sBatt = BatteryIndication()
    IF Checksum10() THEN
      ' find device id
      iDeviceId = Devices.Find("THB1[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum/Baro BTHR918")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, baro hPa, forecast
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), CStr(RecBuf[8] + 795), sForecast)
        ELSE
          ' temp °F, hum %, baro hPa, forecast
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "#0.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), CStr(RecBuf[8] + 795), sForecast)
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' THB2 Oregon BTHR918N,BTHR968
  ELSE IF RecBuf[0] = &H5A AND RecBuf[1] = &H6D AND RecBits >= 88 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" THB2[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] BTHR918N,BTHR968", TRUE)
      WrChannel()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
      Main.WriteRFXDebugLog(" temp:", TRUE)
    END IF
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(Format(CStr(sCelsius), "#0.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.##") & "°F", TRUE)
      Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), TRUE)
    END IF
    sWrText = WrHum(RecBuf[7] AND &HC0)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" baro:" & CStr(CSng(RecBuf[8]) + 856) & "hPa", TRUE)
    sForecast = WrForecast(Lsr(RecBuf[9], 4))
    sBatt = BatteryIndication()
    IF Checksum10() THEN
      ' find device id
      iDeviceId = Devices.Find("THB2[" & CStr(RecBuf[3] * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Temp/Hum/Baro BTHR918N,BTHR968")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C, hum %, baro hPa, forecast
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius), "#0.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), CStr(CSng(RecBuf[8]) + 856), sForecast)
        ELSE
          ' temp °F, hum %, baro hPa, forecast
          Devices.ValueUpdate(iDeviceId, Format(CStr(sCelsius * 1.8 + 32), "##.##"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), CStr(CSng(RecBuf[8]) + 856), sForecast)
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' RAIN1 Oregon RGR126,RGR682,RGR918
  ELSE IF RecBuf[0] = &H2A AND RecBuf[1] = &H1D AND RecBits >= 80 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" RAIN1[" & CStr(RecBuf[3] * 256) & "] RGR126/682/918", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), 1)
    END IF
    sTrainRate = (CSng(Hex(RecBuf[5])) * 10 + CSng(Hex((Lsr(RecBuf[4], 4)) AND &HF)))
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" rain fall " & CStr(sTrainRate) & " mm/hr", TRUE)
    sTrain = (CSng(Hex(RecBuf[8] AND &HF)) * 1000 + CSng(Hex(RecBuf[7])) * 10 + CSng(Hex(Lsr(RecBuf[6], 4))))
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" total rain cnt " & CStr(sTrain) & " mm", TRUE)
      Main.WriteRFXDebugLog(" flip cnt " & Hex(RecBuf[6] AND &HF), TRUE)
    END IF
    sBatt = BatteryIndication()
    IF Checksum2() THEN
      ' find device id
      iDeviceId = Devices.Find("RAIN1[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Rain RGR126/682/918")
      ' update values & battery status
      IF iDeviceId THEN
        ' rain rate mm/hr, total rain mm, flip count
        Devices.ValueUpdate(iDeviceId, Format(CStr(sTrainRate), "#0.#"), Format(CStr(sTrain), "#0.##"), Hex(RecBuf[6] AND &HF), "")
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' RAIN2 Oregon PCR800
  ELSE IF RecBuf[0] = &H2A AND RecBuf[1] = &H19 AND RecBits >= 84 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" RAIN2[" & CStr(RecBuf[3] * 256) & "] PCR800", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    sTrainRate = (CSng(Hex(RecBuf[5])) / 10) + (CSng(Hex((Lsr(RecBuf[4], 4)) AND &HF)) / 100) + (CSng(Hex((RecBuf[6] AND &HF))) / 1000)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" rain fall rate: " & Format(CStr(sTrainRate), "#0.##") & " inch/hr | " & Format(CStr(sTrainRate * 25.4), "#0.#") & " mm/hr", TRUE)
    sTrain = (CSng(Hex(RecBuf[7]))) / 100 + CSng(Hex(Lsr(RecBuf[6], 4)) / 1000)
    sTrain = sTrain + (CSng(Hex(RecBuf[9] AND &HF)) * 100 + CSng(Hex(RecBuf[8])))
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" total rain cnt: " & Format(CStr(sTrain), "#0.###") & " inch | " & Format(CStr(sTrain * 25.4), "#0.##") & " mm", TRUE)
    sBatt = BatteryIndication()
    IF ChecksumR() THEN
      ' find device id
      iDeviceId = Devices.Find("RAIN2[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Rain PCR800")
      ' update values & battery status
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' rain rate mm/hr, total rain mm
          Devices.ValueUpdate(iDeviceId, Format(CStr(sTrainRate * 25.4), "#0.#"), Format(CStr(sTrain * 25.4), "#0.##"), "", "")
        ELSE
          ' rain rate inch/hr, total rain inch
          Devices.ValueUpdate(iDeviceId, Format(CStr(sTrainRate), "#0.#"), Format(CStr(sTrain), "#0.##"), "", "")
        END IF
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' WIND1 Oregon WTGR800
  ELSE IF RecBuf[0] = &H1A AND RecBuf[1] = &H99 AND RecBits >= 80 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" WIND1[" & CStr(RecBuf[3] * 256) & "] WTGR800", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), 1)
    END IF
    iDirection = CSng(Lsr(RecBuf[4], 4)) * 22.5
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" direction " & CStr(iDirection) & "°", TRUE)
    sWrDirection = WrDirection(iDirection)
    sSpeed = (CSng(Hex(RecBuf[7] AND &HF)) * 10) + (CSng(Hex(RecBuf[6])) / 10)
    sWrSpeed = WrSpeed(sSpeed)
    sSpeed = CSng(Hex(RecBuf[8])) + (CSng(Hex((Lsr(RecBuf[7], 4)) AND &HF)) / 10)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" av.", TRUE)
    sWrAvgSpeed = WrSpeed(sSpeed)
    sBatt = BatteryIndication()
    IF Checksum9() THEN
      ' find device id
      iDeviceId = Devices.Find("WIND1[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Wind WTGR800")
      ' update values & battery status
      IF iDeviceId THEN
        ' direction °, direction text, speed m/s, avg speed m/s
        Devices.ValueUpdate(iDeviceId, CStr(iDirection), sWrDirection, Format(CStr(sWrSpeed), "#0.##"), Format(CStr(sWrAvgSpeed), "#0.##"))
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' WIND2 Oregon WGR800
  ELSE IF RecBuf[0] = &H1A AND RecBuf[1] = &H89 AND RecBits >= 80 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" WIND2[" & CStr(RecBuf[3] * 256) & "] WGR800", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    iDirection = CSng(Lsr(RecBuf[4], 4)) * 22.5
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" direction " & CStr(iDirection) & "°", TRUE)
    sWrDirection = WrDirection(iDirection)
    sSpeed = (CSng(Hex(RecBuf[7] AND &HF)) * 10) + (CSng(Hex(RecBuf[6])) / 10)
    sWrSpeed = WrSpeed(sSpeed)
    sSpeed = CSng(Hex(RecBuf[8])) + (CSng(Hex((Lsr(RecBuf[7], 4)) AND &HF)) / 10)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" av.", 1)
    sWrAvgSpeed = WrSpeed(sSpeed)
    sBatt = BatteryIndication()
    IF Checksum9() THEN
      ' find device id
      iDeviceId = Devices.Find("WIND2[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Wind WGR800")
      ' update values & battery status
      IF iDeviceId THEN
        ' direction °, direction text, speed m/s, avg speed m/s
        Devices.ValueUpdate(iDeviceId, CStr(iDirection), sWrDirection, Format(CStr(sWrSpeed), "#0.##"), Format(CStr(sWrAvgSpeed), "#0.##"))
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' WIND3 Oregon STR918,WGR918
  ELSE IF RecBuf[0] = &H3A AND RecBuf[1] = &HD AND RecBits >= 80 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" WIND3[" & CStr(RecBuf[3] * 256) & "] STR918,WGR918", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    iDirection = (CSng(Hex(RecBuf[5])) * 10) + CSng(Hex(Lsr(RecBuf[4], 4)))
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" direction " & CStr(iDirection) & "°", TRUE)
    sWrDirection = WrDirection(iDirection)
    sSpeed = (CSng(Hex(RecBuf[7] AND &HF)) * 10) + (CSng(Hex(RecBuf[6])) / 10)
    sWrSpeed = WrSpeed(sSpeed)
    sSpeed = CSng(Hex(RecBuf[8])) + (CSng(Hex((Lsr(RecBuf[7], 4)) AND &HF)) / 10)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" av.", TRUE)
    sWrAvgSpeed = WrSpeed(sSpeed)
    sBatt = WrBattery()
    IF Checksum9() THEN
      ' find device id
      iDeviceId = Devices.Find("WIND3[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Wind STR918,WGR918")
      ' update values & battery status
      IF iDeviceId THEN
        ' direction °, direction text, speed m/s, avg speed m/s
        Devices.ValueUpdate(iDeviceId, CStr(iDirection), sWrDirection, Format(CStr(sWrSpeed), "#0.##"), Format(CStr(sWrAvgSpeed), "#0.##"))
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' UV1 Oregon UVR138,UV138
  ELSE IF RecBuf[0] = &HEA AND RecBuf[1] = &H7C AND RecBits >= 60 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" UV1[" & CStr(RecBuf[3] * 256) & "] UVN128,UV138 ", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    sUv = CSng(Hex(RecBuf[5] AND &HF)) * 10 + CSng(Hex(Lsr(RecBuf[4], 4)))
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" UV factor:" & CStr(sUv) & " Level:", TRUE)
    IF sUv < 3 THEN
      sUvText = ("Low")
    ELSE IF sUv < 6 THEN
      sUvText = ("Medium")
    ELSE IF sUv < 8 THEN
      sUvText = ("High")
    ELSE IF sUv < 11 THEN
      sUvText = ("Very high")
    ELSE
      sUvText = ("Dangerous")
    END IF
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sUVText & " ", TRUE)
    sBatt = BatteryIndication()
    IF ChecksumW() THEN
      ' find device id
      iDeviceId = Devices.Find("UV1[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon UV UVN128,UV138")
      ' update values & battery status
      IF iDeviceId THEN
        ' uv level, uv text
        Devices.ValueUpdate(iDeviceId, CStr(sUv), sUvText, "", "")
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' UV2 Oregon UVN800
  ELSE IF RecBuf[0] = &HDA AND RecBuf[1] = &H78 AND RecBits >= 64 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" UV2[" & CStr(RecBuf[3] * 256) & "] UVN800", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    sUv = CSng(Lsr(RecBuf[4], 4))
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" UV factor:" & CStr(sUv) & " Level:", TRUE)
    IF sUv < 3 THEN
      sUvText = ("Low")
    ELSE IF sUv < 6 THEN
      sUvText = ("Medium")
    ELSE IF sUv < 8 THEN
      sUvText = ("High")
    ELSE IF sUv < 11 THEN
      sUvText = ("Very high")
    ELSE
      sUvText = ("Dangerous")
    END IF
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sUVText & " ", TRUE)
    sBatt = BatteryIndication()
    IF Checksum7() THEN
      ' find device id
      iDeviceId = Devices.Find("UV2[" & CStr(RecBuf[3] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon UV UVN800")
      ' update values & battery status
      IF iDeviceId THEN
        ' uv level, uv text
        Devices.ValueUpdate(iDeviceId, CStr(sUv), sUvText, "", "")
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' DT1 Oregon RTGR328 Date and Time
  ELSE IF (RecBuf[0] AND &HF) = &HA AND RecBuf[1] = &HEC AND RecBits >= 96 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" DT1[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4))) & "] RTGR328 Date and Time", 1)
      WrChannel3()
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[3], 2), TRUE)
    END IF
    Hr = Right("0" & CStr(CSng(RecBuf[7] AND &HF) * 10 + CSng(Lsr(RecBuf[6], 4))), 2)
    Mn = Right("0" & CStr(CSng(RecBuf[6] AND &HF) * 10 + CSng(Lsr(RecBuf[5], 4))), 2)
    Sc = Right("0" & CStr(CSng(RecBuf[5] AND &HF) * 10 + CSng(Lsr(RecBuf[4], 4))), 2)
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" time=" & CStr(Hr) & ":" & CStr(Mn) & ":" & CStr(Sc), TRUE)
    SELECT CASE RecBuf[9] AND &H7
      CASE 0
        sDay = ("Sunday")
      CASE 1
        sDay = ("Monday")
      CASE 2
        sDay = ("Tuesday")
      CASE 3
        sDay = ("Wednesday")
      CASE 4
        sDay = ("Thursday")
      CASE 5
        sDay = ("Friday")
      CASE 6
        sDay = ("Saterday")
      CASE ELSE
        sDay = ("day error")
    END SELECT
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sDay, TRUE)
    sDd = CSng(RecBuf[8] AND &HF) * 10 + CSng(Lsr(RecBuf[7], 4))
    sMm = CSng(Lsr(RecBuf[8], 4))
    sYy = CSng(RecBuf[10] AND &HF) * 10 + CSng(Lsr(RecBuf[9], 4)) + 2000
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sDd & "-" & sMm & "-" & sYy, TRUE)
    IF Checksum11() THEN
      iDeviceId = Devices.Find("DT1[" & CStr(RecBuf[3] * 256 + (Lsr(RecBuf[2], 4))) & "]", Devices.FindInterface(" RFXCom Receiver "), " Oregon Date & Time RTGR328 ")
      IF iDeviceId THEN
        ' hour:min:sec, date, weekday
        Devices.ValueUpdate(iDeviceId, CStr(Hr) & ":" & CStr(Mn) & ":" & CStr(Sc), sDd & "-" & sMm & "-" & sYy, sDay, "")
      END IF
    ENDIF

  ' WEIGHT1 Oregon BWR101,BWR102
  ELSE IF RecBits = 56 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" WEIGHT1[" & CStr(Lsr(RecBuf[1], 4)) & "] BWR101,BWR102", TRUE)
    IF IsDigit(Hex(RecBuf[4])) AND IF IsDigit(Hex(Lsr(RecBuf[3], 4))) THEN
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" addr:" & Hex(Lsr(RecBuf[1], 4)), TRUE)
      TRY sWeight = CSng(Hex(RecBuf[5] AND &H1)) * 100 + CSng(Hex(RecBuf[4])) + CSng(Hex(Lsr(RecBuf[3], 4))) / 10
      IF NOT ERROR
        sLb = sWeight * 2.2
        sStlb = Round(sLb / 14)
        sStlbr = sLb - sStlb * 14
        IF bRFXComRXDebug THEN
          Main.WriteRFXDebugLog(" Weight: " & Format(CStr(sWeight), "#0.#") & " kg | " & Format(CStr(sLb), "#0.#") & " lb | " & CStr(sStlb) & ": " & Format(CStr(sStlbr), "#0.#") & " st-lb", TRUE)
          Main.WriteRFXDebugLog(" Unknown byte=" & CStr(Hex(RecBuf[3] AND &HF)) & CStr(Hex(Lsr(Recbuf[2], 4))), TRUE)
        END IF
        IF NOT (((RecBuf[0] AND &HF0) = (RecBuf[5] AND &HF0)) AND ((RecBuf[1] AND &HF) = (RecBuf[6] AND &HF))) THEN
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Checksum error", TRUE)
        ELSE IF Lsr(RecBuf[1], 4)
          ' find device id
          iDeviceId = Devices.Find("WEIGHT1[" & CStr(Lsr(RecBuf[1], 4)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Weight BRW101,BRW102")
          ' update values
          IF iDeviceId THEN
            IF Main.sTemperature = "°C" THEN
              ' weigth in kg
              Devices.ValueUpdate(iDeviceId, Format(CStr(sWeight), "#0.#"), "", "", "")
            ELSE
              ' weight in lb
              Devices.ValueUpdate(iDeviceId, Format(CStr(sLb), "#0.#"), "", "", "")
            END IF
          END IF
        END IF
      END IF
    ELSE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" ERROR: weight value is not a decimal value.", TRUE)
    END IF

  ' WEIGHT2 Oregon GR101
  ELSE IF (RecBuf[0] AND &HF) = &H3 AND RecBits = 64 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" WEIGHT2[" & CStr(Lsr(RecBuf[1], 4)) & "] GR101 ", TRUE)
      FOR iCnt = 7 TO 0 STEP -1
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(Format(CStr(RecBuf[iCnt]), "#0.#"), TRUE)
      NEXT
    ENDIF
    sWeight = ((RecBuf[4] AND &HF) * 4096) + (Recbuf[3] * 16) + (Lsr(RecBuf[2], 4))
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Weight: " & CStr(sWeight) & " = " & Format(CStr(sWeight / 400.8), "#0.#") & " kg", TRUE)
    ' find device id
    iDeviceId = Devices.Find("WEIGHT2[" & CStr(Lsr(RecBuf[1], 4)) & "]", Devices.FindInterface("RFXCom Receiver"), "Oregon Weight GR101")
    ' update values
    IF iDeviceId THEN
      IF Main.sTemperature = "°C" THEN
        ' weigth in kg
        Devices.ValueUpdate(iDeviceId, Format(CStr(sWeight / 400.8), "#0.#"), "", "", "")
      ELSE
        ' weight in lb
        Devices.ValueUpdate(iDeviceId, Format(CStr(sWeight), "#0.#"), "", "", "")
      END IF
    END IF

  ' ELEC1 cent-a-meter
  ELSE IF (RecBuf[0] = &HEA AND (RecBuf[1] AND &HC0) = &H0) AND RecBits >= 64 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" ELEC1[" & CStr(RecBuf[2] * 256) & "] Cent-a-Meter", TRUE)
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[2], 2), TRUE)
      Main.WriteRFXDebugLog(" counter:" & CSng(RecBuf[1] AND &HF), TRUE)
    END IF
    sCt1 = (CSng(RecBuf[3]) + CSng((RecBuf[4] AND &H3) * 256)) / 10
    sCt2 = (CSng((Lsr(RecBuf[4], 2)) AND &H3F) + CSng((RecBuf[5] AND &HF) * 64)) / 10
    sCt3 = (CSng((Lsr(RecBuf[5], 4)) AND &HF) + CSng((RecBuf[6] AND &H3F) * 16)) / 10
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" CT1:" & CStr(sCt1) & " Ampere", TRUE)
      Main.WriteRFXDebugLog(" CT2:" & CStr(sCt2) & " Ampere", TRUE)
      Main.WriteRFXDebugLog(" CT3:" & CStr(sCt3) & " Ampere", TRUE)
    END IF
    IF (RecBuf[1] AND &H10) = 0 THEN
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Battery OK"), TRUE)
      sBatt = "OK"
    ELSE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Battery Empty"), TRUE)
      sBatt = "Empty"
    END IF
    IF (RecBuf[4] AND &H40) = &H40 THEN
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Check pressed"), TRUE)
    END IF
    IF ChecksumE() THEN
      ' find device id
      iDeviceId = Devices.Find("ELEC1[" & CStr(RecBuf[2] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "Cent-a-Meter")
      ' update values & battery status
      IF iDeviceId THEN
        ' ct1 amp, ct2 amp, ct3 amp
        Devices.ValueUpdate(iDeviceId, Format(CStr(sCt1), "##.###"), Format(CStr(sCt2), "##.###"), Format(CStr(sCt3), "##.###"), "")
        Devices.Battery(iDeviceId, sBatt)
      END IF
    ENDIF

  ' ELEC2 OWL CM119
  ELSE IF (RecBuf[0] = &H1A OR RecBuf[0] = &H2A OR RecBuf[0] = &H3A) AND RecBits = 108 THEN
    bOregon = TRUE
    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" ELEC2[" & CStr(RecBuf[2] * 256) & "] OWL CM119", TRUE)
      SELECT CASE (RecBuf[0] AND &HF0)
        CASE &H10
          Main.WriteRFXDebugLog(" CH 1", 1)
        CASE &H20
          Main.WriteRFXDebugLog(" CH 2", 1)
        CASE &H30
          Main.WriteRFXDebugLog(" CH 3", 1)
        CASE ELSE
          Main.WriteRFXDebugLog(" CH ? = " & Hex(Lsr(RecBuf[0], 4) AND &HF), TRUE)
      END SELECT
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[2], 2), TRUE)
      Main.WriteRFXDebugLog(" counter:" & CSng(RecBuf[1] AND &HF), TRUE)
    END IF
    sCt1 = CSng((RecBuf[5] AND &HF) * 65536) + CSng(RecBuf[4] * 256) + CSng(RecBuf[3])
    lCt4 = Lsl(CLng(RecBuf[10]), 36)
    lCt4 += Lsl(CLng(RecBuf[9]), 28)
    lCt4 += Lsl(CLng(RecBuf[8]), 20)
    lCt4 += Lsl(CLng(RecBuf[7]), 12)
    lCt4 += Lsl(CLng(RecBuf[6]), 4)
    lCt4 += (Lsr(CLng(RecBuf[5]), 4) AND &HF)
    lCt4 = lCt4 / 223000

    IF bRFXComRXDebug THEN
      Main.WriteRFXDebugLog(" Now:" & CStr(sCt1 / 1000) & "kW", TRUE)
      Main.WriteRFXDebugLog(" Total:" & Format(lCt4, "##.###") & "kWh", TRUE)
    END IF
    IF Checksum12() THEN
      ' find device id
      iDeviceId = Devices.Find("ELEC2[" & CStr(RecBuf[2] * 256) & "]", Devices.FindInterface("RFXCom Receiver"), "OWL CM119")
      ' update values & battery status
      IF iDeviceId THEN
        ' power usage total in kWh and now in Watt
        Devices.ValueUpdate(iDeviceId, Format(lCt4, "##.###"), CStr(sCt1), "", "")
      END IF
    ENDIF
  END IF
  RETURN bOregon

CATCH
  Main.WriteDebugLog(("ERROR: Parsing Oregon data: ") & Error.Text & " at " & Error.Where)

END

PRIVATE SUB WrChannel3()

  Main.WriteRFXDebugLog(" CH " & (Lsr(RecBuf[2], 4)), TRUE)

END

PRIVATE SUB WrChannel()

  DIM sChan AS String
  DIM sVal AS Integer

  SELECT CASE (RecBuf[2] AND &H70)
    CASE &H10
      sChan = "CH 1"
      sVal = 1
    CASE &H20
      sChan = "CH 2"
      sVal = 2
    CASE &H40
      sChan = "CH 3"
      sVal = 4
    CASE ELSE
      sChan = "CH ? = " & Hex(RecBuf[2], 2)
      sVal = 0
  END SELECT
  Main.WriteRFXDebugLog(" " & sChan, TRUE)

END

PRIVATE SUB WrHum(Hum AS Byte) AS String

  DIM sVerbose AS String

  SELECT CASE Hum
    CASE &H0
      sVerbose = ("Normal")
    CASE &H40
      sVerbose = ("Comfort")
    CASE &H80
      sVerbose = ("Dry")
    CASE &HC0
      sVerbose = ("Wet")
  END SELECT
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sVerbose, TRUE)
  RETURN sVerbose

END

PRIVATE SUB WrForecast(bForecast AS Byte) AS String

  DIM sMsg AS String

  SELECT CASE bForecast
    CASE &HC
      sMsg = ("Sunny")
    CASE &H6
      sMsg = ("Partly")
    CASE &H2
      sMsg = ("Cloudy")
    CASE &H3
      sMsg = ("Rain")
    CASE ELSE
      sMsg = "??"
  END SELECT
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sMsg & " ", TRUE)
  RETURN sMsg

END

PRIVATE SUB WrDirection(iDirection AS Integer) AS String

  DIM sDir AS String

  IF iDirection > 348.75 OR iDirection < 11.26 THEN
    sDir = "N"
  ELSE IF iDirection < 33.76 THEN
    sDir = "NNE"
  ELSE IF iDirection < 56.26 THEN
    sDir = "NE"
  ELSE IF iDirection < 78.76 THEN
    sDir = "ENE"
  ELSE IF iDirection < 101.26 THEN
    sDir = "E"
  ELSE IF iDirection < 123.76 THEN
    sDir = "ESE"
  ELSE IF iDirection < 146.26 THEN
    sDir = "SE"
  ELSE IF iDirection < 168.76 THEN
    sDir = "SSE"
  ELSE IF iDirection < 191.26 THEN
    sDir = "S"
  ELSE IF iDirection < 213.76 THEN
    sDir = "SSW"
  ELSE IF iDirection < 236.26 THEN
    sDir = "SW"
  ELSE IF iDirection < 258.76 THEN
    sDir = "WSW"
  ELSE IF iDirection < 281.26 THEN
    sDir = "W"
  ELSE IF iDirection < 303.76 THEN
    sDir = "WNW"
  ELSE IF iDirection < 326.26 THEN
    sDir = "NW"
  ELSE
    sDir = "NNW"
  END IF
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sDir & " ", TRUE)
  RETURN sDir

END

PRIVATE SUB WrSpeed(sSpeed AS Single) AS String

  DIM sSpd AS String

  IF bRFXComRXDebug THEN
    Main.WriteRFXDebugLog(" speed " & CStr(sSpeed) & " m/sec", TRUE)
    IF sSpeed < 0.2 THEN
      sSpd = "0"
    ELSE IF sSpeed < 1.6 THEN
      sSpd = "1"
    ELSE IF sSpeed < 3.4 THEN
      sSpd = "2"
    ELSE IF sSpeed < 5.5 THEN
      sSpd = "3"
    ELSE IF sSpeed < 8 THEN
      sSpd = "4"
    ELSE IF sSpeed < 10.8 THEN
      sSpd = "5"
    ELSE IF sSpeed < 13.9 THEN
      sSpd = "6"
    ELSE IF sSpeed < 17.2 THEN
      sSpd = "7"
    ELSE IF sSpeed < 20.8 THEN
      sSpd = "8"
    ELSE IF sSpeed < 25.4 THEN
      sSpd = "9"
    ELSE IF sSpeed < 28.5 THEN
      sSpd = "10"
    ELSE IF sSpeed < 32.7 THEN
      sSpd = "11"
    ELSE
      sSpd = "12"
    END IF
    Main.WriteRFXDebugLog(" " & sSpd & " Bft ", TRUE)
  END IF
  RETURN CStr(sSpeed)

END

PRIVATE SUB WrBattery() AS String

  DIM sMsg AS String

  SELECT CASE (RecBuf[4] AND &HF)
    CASE 0
      sMsg = "100%"
    CASE 1
      sMsg = "90%"
    CASE 2
      sMsg = "80%"
    CASE 3
      sMsg = "70%"
    CASE 4
      sMsg = "60%"
    CASE 5
      sMsg = "50%"
    CASE 6
      sMsg = "40%"
    CASE 7
      sMsg = "30%"
    CASE 8
      sMsg = "20%"
    CASE 9
      sMsg = "10%"
  END SELECT
  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Battery ") & sMsg, TRUE)
  RETURN sMsg

END

PRIVATE SUB Checksum2() AS Boolean

  DIM Checksum AS Short

  Checksum = Cs8()
  Checksum += RecBuf[8] AND &HF
  Checksum = (Checksum - ((Lsr(RecBuf[8], 4) AND &HF) + ((Lsl(RecBuf[9], 4)) AND &HF0))) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB Checksum7() AS Boolean

  DIM Checksum AS Short

  Checksum = (Lsr(RecBuf[0], 4) AND &HF) '+ (RecBuf[0] AND &HF)
  Checksum += (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  Checksum += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  Checksum += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  Checksum += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  Checksum += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  Checksum += (Lsr(RecBuf[6], 4) AND &HF) + (RecBuf[6] AND &HF)
  Checksum = (Checksum - RecBuf[7]) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB Checksum8() AS Boolean

  DIM Checksum AS Short

  Checksum = Cs8()
  Checksum = (Checksum - RecBuf[8]) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB ChecksumW() AS Boolean

  DIM Checksum AS Short

  Checksum = (Lsr(RecBuf[0], 4) AND &HF) '+ (RecBuf[0] AND &HF)
  Checksum += (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  Checksum += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  Checksum += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  Checksum += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  Checksum += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  Checksum += (RecBuf[6] AND &HF)
  Checksum = (Checksum - ((Lsr(RecBuf[6], 4) AND &HF) + (Lsl(RecBuf[7], 4) AND &HF0))) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB Checksum9() AS Boolean

  DIM Checksum AS Short

  Checksum = Cs8()
  Checksum += (Lsr(RecBuf[8], 4) AND &HF) + (RecBuf[8] AND &HF)
  Checksum = (Checksum - RecBuf[9]) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  END IF

END

PRIVATE SUB Checksum10() AS Boolean

  DIM Checksum AS Short

  Checksum = Cs8()
  Checksum += (Lsr(RecBuf[8], 4) AND &HF) + (RecBuf[8] AND &HF)
  Checksum += (Lsr(RecBuf[9], 4) AND &HF) + (RecBuf[9] AND &HF)
  Checksum = (Checksum - RecBuf[10]) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB Checksum11() AS Boolean

  DIM Checksum AS Short

  Checksum = Cs8()
  Checksum += (Lsr(RecBuf[8], 4) AND &HF) + (RecBuf[8] AND &HF)
  Checksum += (Lsr(RecBuf[9], 4) AND &HF) + (RecBuf[9] AND &HF)
  Checksum += (Lsr(RecBuf[10], 4) AND &HF) + (RecBuf[10] AND &HF)
  Checksum = (Checksum - Recbuf[11]) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB Checksum12() AS Boolean

  DIM Checksum AS Short

  Checksum = (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  Checksum += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  Checksum += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  Checksum += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  Checksum += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  Checksum += (Lsr(RecBuf[6], 4) AND &HF) + (RecBuf[6] AND &HF)
  Checksum += (Lsr(RecBuf[7], 4) AND &HF) + (RecBuf[7] AND &HF)
  Checksum += (Lsr(RecBuf[8], 4) AND &HF) + (RecBuf[8] AND &HF)
  Checksum += (Lsr(RecBuf[9], 4) AND &HF) + (RecBuf[9] AND &HF)
  Checksum += (Lsr(RecBuf[10], 4) AND &HF) + (RecBuf[10] AND &HF)
  Checksum += (RecBuf[11] AND &HF)
  Checksum = (Checksum - (Lsl((RecBuf[12] AND &HF), 4)) - (Lsr(RecBuf[11], 4) AND &HF)) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB ChecksumE() AS Boolean

  DIM Checksum AS Short

  CheckSum = (Lsr(RecBuf[0], 4) AND &HF) + (RecBuf[0] AND &HF)
  CheckSum += (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  CheckSum += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  CheckSum += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  CheckSum += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  CheckSum += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  CheckSum += (Lsr(RecBuf[6], 4) AND &HF) + (RecBuf[6] AND &HF)
  CheckSum = (CheckSum - RecBuf[7]) AND &HFF
  IF Checksum <> &H18 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE SUB ChecksumR() AS Boolean

  DIM Checksum AS Byte

  Checksum = Cs8()
  Checksum += (Lsr(RecBuf[8], 4) AND &HF) + (RecBuf[8] AND &HF)
  Checksum += (RecBuf[9] AND &HF)
  Checksum = (Checksum - ((Lsr(RecBuf[9], 4) AND &HF) + (Lsl(RecBuf[10], 4) AND &HF0))) AND &HFF
  IF Checksum <> 0 THEN
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Checksum Error"), TRUE)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PRIVATE FUNCTION Cs8() AS Byte

  DIM CheckSum AS Byte

  CheckSum = (Lsr(RecBuf[0], 4) AND &HF) ' + (RecBuf[0] AND &HF)
  CheckSum += (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  CheckSum += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  CheckSum += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  CheckSum += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  CheckSum += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  CheckSum += (Lsr(RecBuf[6], 4) AND &HF) + (RecBuf[6] AND &HF)
  CheckSum += (Lsr(RecBuf[7], 4) AND &HF) + (RecBuf[7] AND &HF)
  RETURN CheckSum

END

PRIVATE FUNCTION ProcessX(RecBits AS Byte) AS Boolean

  DIM sAddr, sAddr2, sValue, sValue2, sType, sName AS String
  DIM iHsAddr, iDeviceId AS Integer
  DIM bLowBatt, bUnknown AS Boolean

  IF ((RecBuf[0] XOR RecBuf[1]) = &HFF) AND (RecBuf[0] = &HEE) THEN
    ' ProcessRFRemote()
  ELSE IF RecBuf[3] = 0 AND (RecBuf[2] AND &HF) = 0 THEN
    ProcessAtiPlus()
  ELSE IF ((RecBuf[0] XOR RecBuf[1]) = &HFF) AND ((RecBuf[2] XOR RecBuf[3]) = &HFF) THEN
    ProcessX10()
  ELSE IF RecBits = 32 AND ((RecBuf[0] XOR RecBuf[1]) = &HFE) AND ((RecBuf[2] XOR RecBuf[3]) = &HFF) THEN
    ' ProcessDM10()
  ELSE IF (RecBuf[0] = ((RecBuf[1] AND &HF0) + (&HF - (RecBuf[1] AND &HF)))) AND ((RecBuf[2] XOR RecBuf[3]) = &HFF) THEN
    ProcessX10Security()
  ELSE IF ((RecBuf[2] XOR RecBuf[3]) = &HFF) THEN
    sAddr = Hex(RecBuf[0], 2) & Hex(RecBuf[1], 2) & Hex(RecBuf[4], 2) & "]S"
    sAddr2 = sAddr & " / " & (RecBuf[0] * 256 + RecBuf[1])
    sType = "DWS["
    SELECT CASE Recbuf[2]
      CASE &H44
        sName = "Door/Window Sensor"
        sValue = "Open"
        sValue2 = "Tamper"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic door sensor Alert + Tamper"), TRUE)
      CASE &HC4
        sName = "Door/Window Sensor"
        sValue = "Closed"
        sValue2 = "Tamper"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic door sensor Normal + Tamper)"), TRUE)
      CASE &H4
        sName = "Door/Window Sensor"
        sValue = "Open"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic door sensor Alert"), TRUE)
      CASE &H5
        bLowBatt = TRUE
        sName = "Door/Window Sensor"
        sValue = "Open"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic door sensor Alert (battery low)"), TRUE)
      CASE &H84
        sName = "Door/Window Sensor"
        sValue = "Closed"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic door sensor Normal"), TRUE)
      CASE &H85
        bLowBatt = TRUE
        sName = "Door/Window Sensor"
        sValue = "Closed"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic door sensor Normal (battery low)"), TRUE)
      CASE &H4C
        sName = "Motion Sensor"
        sValue = "Motion"
        sValue2 = "Tamper"
        sType = "MOTION["
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic motion sensor Alert + Tamper"), TRUE)
      CASE &HCC
        sName = "Motion Sensor"
        sValue = "No Motion"
        sValue2 = "Tamper"
        sType = "MOTION["
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic motion sensor Normal + Tamper)"), TRUE)
      CASE &HC
        sName = "Motion Sensor"
        sValue = "Motion"
        sType = "MOTION["
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic motion sensor Alert"), TRUE)
      CASE &HD
        bLowBatt = TRUE
        sName = "Motion Sensor"
        sValue = "Motion"
        sType = "MOTION["
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic motion sensor Alert (battery low)"), TRUE)
      CASE &H8C
        sName = "Motion Sensor"
        sValue = "No Motion"
        sType = "MOTION["
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic motion sensor Normal"), TRUE)
      CASE &H8D
        bLowBatt = TRUE
        sName = "Motion Sensor"
        sValue = "No Motion"
        sType = "MOTION["
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic motion sensor Normal (battery low)"), TRUE)
      CASE &HE0
        IF RecBuf[0] = &HFF THEN
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Master receiver jamming detected"), TRUE)
        ELSE IF RecBuf[0] = &H0 THEN
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Slave receiver jamming detected"), TRUE)
        ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Unknown data packet received"), TRUE)
          bUnknown = TRUE
        END IF
      CASE &HF8
        IF RecBuf[0] = &HFF THEN
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Master receiver end jamming detected"), TRUE)
        ELSE IF RecBuf[0] = &H0 THEN
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Slave receiver end jamming detected"), TRUE)
        ELSE
          IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" unknown cmd!"), TRUE)
          bUnknown = TRUE
        END IF
      CASE &H2
        sType = "REMOTE["
        sName = "Keyfob"
        sValue = "Arm Away"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic keyfob ARM Away (max)"), TRUE)
      CASE &HE
        sType = "REMOTE["
        sName = "Keyfob"
        sValue = "Arm Home"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic keyfob ARM Home (min)"), TRUE)
      CASE &H22
        sType = "REMOTE["
        sName = "Keyfob"
        sValue = "Panic"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic keyfob Panic"), TRUE)
      CASE &H42
        sType = "REMOTE["
        sName = "Keyfob"
        sValue = "Lights On"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic keyfob Lights On"), TRUE)
      CASE &H82
        sType = "REMOTE["
        sName = "Keyfob"
        sValue = "Disarm"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic keyfob Disarm"), TRUE)
      CASE ELSE
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Unknown data packet received"), TRUE)
        bUnknown = TRUE
    END SELECT

    IF bRFXComRXDebug THEN
      iHsAddr = CreateHsAddr()
      IF Protocol = MODEB32 THEN
        Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[0], 2), TRUE)
        Main.WriteRFXDebugLog(" ID:" & Right("    " & CStr(iHsAddr), 5), TRUE)
      ELSE
        Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[0], 2), TRUE)
        Main.WriteRFXDebugLog(Hex(RecBuf[1], 2), TRUE)
        Main.WriteRFXDebugLog(Hex(RecBuf[4], 2), TRUE)
        Main.WriteRFXDebugLog(" " & Hex(RecBuf[4], 2), TRUE)
        Main.WriteRFXDebugLog(" ID:" & Right("    " & CStr(iHsAddr), 5), TRUE)
      END IF
    END IF

    IF NOT bUnknown THEN
      IF NOT sValue2 THEN sValue2 = "Secure"
      iDeviceId = Devices.Find(sType & sAddr, Devices.FindInterface("RFXCom Receiver"), "Visonic " & sName)
      IF iDeviceId THEN
        Devices.ValueUpdate(iDeviceId, sValue, sValue2, "", "")
        IF bLowBatt THEN
          Devices.Battery(iDeviceId, ("Low"))
        ELSE
          Devices.Battery(iDeviceId, ("OK"))
        END IF
      END IF
    END IF

  ELSE IF Protocol = MODEVAR OR Protocol = MODENOXLAT THEN
    IF RecBits = 32 AND RecBuf[0] = &H52 AND RecBuf[1] = &H46 THEN
      IF bRFXComRXDebug THEN
        SELECT CASE RecBuf[2]
          CASE &H58
            Main.WriteRFXDebugLog(" RFXSensor Type-1,", TRUE)
          CASE &H32
            Main.WriteRFXDebugLog(" RFXSensor Type-2,", TRUE)
          CASE &H33
            Main.WriteRFXDebugLog(" RFXSensor Type-3,", TRUE)
          CASE &H34
            Main.WriteRFXDebugLog(" RFXVamp,", TRUE)
          CASE ELSE
            Main.WriteRFXDebugLog((" Unknown RFXSensor,"), TRUE)
        END SELECT
      END IF
      IF RecBuf[2] <> &H34 THEN
        IF bRFXComRXDebug THEN
          IF (RecBuf[3] AND &H80) = 0 THEN
            Main.WriteRFXDebugLog((" Fast sampling mode,"), TRUE)
          ELSE
            Main.WriteRFXDebugLog((" Slow sampling mode,"), TRUE)
          END IF
        END IF
      END IF
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" version:" & CStr(RecBuf[3] AND &H7F) & ",", TRUE)
    ELSE IF RecBits = 40 AND RecBuf[0] = &H53 AND RecBuf[1] = &H45 AND RecBuf[2] = &H4E THEN
      IF bRFXComRXDebug THEN
        Main.WriteRFXDebugLog(" Sensor " & Hex(RecBuf[3]) & " type=", TRUE)
        SELECT CASE RecBuf[4]
          CASE &H26
            Main.WriteRFXDebugLog("DS2438", TRUE)
          CASE &H28
            Main.WriteRFXDebugLog("DS18B20", TRUE)
          CASE ELSE
            Main.WriteRFXDebugLog(("unknown 1-Wire sensor"), TRUE)
         END SELECT
      END IF
    ELSE IF RecBits = 48 THEN
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Noise or a 1-Wire sensor internal address! "), TRUE)
    ELSE IF ((RecBuf[2] AND &HC0) = &H0) AND (RecBits = 24 OR RecBits = 44) THEN
      ' ProcessDigimax()
    ELSE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Noise or an unknown data packet received! "), TRUE)
    END IF
  ELSE
    IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" ProcessX(): Unknown data packet received! "), TRUE)
  END IF

END

PRIVATE SUB ProcessX10()

  DIM RecBytes AS Byte
  DIM sHouse, sUnit, sValue AS String
  DIM iDeviceId AS Integer

  sMessage = " "

  SELECT CASE (RecBuf[0] AND &HF0)
    CASE &H60
      sMessage &= "A"
      sHouse = "A"
    CASE &H70
      sMessage &= "B"
      sHouse = "B"
    CASE &H40
      sMessage &= "C"
      sHouse = "C"
    CASE &H50
      sMessage &= "D"
      sHouse = "D"
    CASE &H80
      sMessage &= "E"
      sHouse = "E"
    CASE &H90
      sMessage &= "F"
      sHouse = "F"
    CASE &HA0
      sMessage &= "G"
      sHouse = "G"
    CASE &HB0
      sMessage &= "H"
      sHouse = "H"
    CASE &HE0
      sMessage &= "I"
      sHouse = "I"
    CASE &HF0
      sMessage &= "J"
      sHouse = "J"
    CASE &HC0
      sMessage &= "K"
      sHouse = "K"
    CASE &HD0
      sMessage &= "L"
      sHouse = "L"
    CASE &H0
      sMessage &= "M"
      sHouse = "M"
    CASE &H10
      sMessage &= "N"
      sHouse = "N"
    CASE &H20
      sMessage &= "O"
      sHouse = "O"
    CASE &H30
      sMessage &= "P"
      sHouse = "P"
    CASE ELSE
      sMessage &= ("Unknown unit-")
  END SELECT
  SELECT CASE RecBuf[2]
    CASE &H80
      sMessage &= ("-All lights off")
    CASE &H90
      sMessage &= ("-All lights on")
    CASE &H88
      sMessage &= ("-Bright")
    CASE &H98
      sMessage &= ("-Dim")
    CASE ELSE
      IF (RecBuf[2] AND &H10) = 0 THEN
        RecBytes = 0
      ELSE
        RecBytes = &H1
      END IF
      IF (RecBuf[2] AND &H8) <> 0 THEN
        RecBytes = RecBytes + &H2
      END IF
      IF (RecBuf[2] AND &H40) <> 0 THEN
        RecBytes = RecBytes + &H4
      END IF
      IF (RecBuf[0] AND &H4) <> 0 THEN
        RecBytes = RecBytes + &H8
      END IF
      RecBytes = RecBytes + 1
      sMessage &= Trim(Str(RecBytes))
      sUnit = Trim(Str(RecBytes))
      IF (RecBuf[2] AND &H1) = 1 THEN
        sMessage &= ("-Prog Koppla (non X10)")
      ELSE IF (RecBuf[2] AND &H20) = 0 THEN
        sMessage &= "-On"
        sValue = "On"
      ELSE
        sMessage &= "-Off"
        sValue = "Off"
      END IF
  END SELECT

  iDeviceId = Devices.Find(sHouse & Right("0" & sUnit, 2), Devices.FindInterface("RFXCom Receiver"), "X10")
  IF iDeviceId THEN
    SELECT Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iDeviceId))
      CASE "Motion Sensor"
        ' Marmitek MS13E motion sensor part
        IF sValue = "On" THEN sValue = "Motion"
        IF sValue = "Off" THEN sValue = "No Motion"
      CASE "Light Sensor"
        ' Marmitek MS13E dark/light sensor part
        IF sValue = "On" THEN sValue = "Dark"
        IF sValue = "Off" THEN sValue = "Light"
    END SELECT
    Devices.ValueUpdate(iDeviceId, sValue, "", "", "")
  END IF

  IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(sMessage, TRUE)

END

PRIVATE SUB ProcessX10Security()

  DIM iHsAddr, iDeviceId AS Integer
  DIM sValue, sValue2, sType, sAddr, sAddr2 AS String
  DIM bLowBatt AS Boolean

  sAddr = Hex(RecBuf[0], 2) & Hex(RecBuf[1], 2) & Hex(RecBuf[4], 2) & "]S"
  sAddr2 = sAddr & " / " & CStr(RecBuf[0] * 256 + RecBuf[1])
  SELECT CASE RecBuf[2]
    CASE &H0
      sValue = "Open"
      sType = "DWS["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" DS10/90 Alert (max delay)"), TRUE)
    CASE &H1
      sValue = "Open"
      sType = "DWS["
      bLowBatt = TRUE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" DS10/90 Alert (max delay, batt low)"), TRUE)
    CASE &H40
      sValue = "Open"
      sType = "DWS["
      sValue2 = "Tamper"
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" DS90 Alert + Tamper (max delay)"), TRUE)
    CASE &H44
      sValue = "Open"
      sType = "DWS["
      sValue2 = "Tamper"
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or DS90 Alert + Tamper"), TRUE)
    CASE &HC0
      sValue = "Closed"
      sType = "DWS["
      sValue2 = "Tamper"
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" DS90 Normal + Tamper (max delay)"), TRUE)
    CASE &HC4
      sValue = "Closed"
      sType = "DWS["
      sValue2 = "Tamper"
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or DS90 Normal + Tamper)"), TRUE)
    CASE &H4
      sValue = "Open"
      sType = "DWS["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or DS10/90 Alert "), TRUE)
    CASE &H5
      sValue = "Open"
      sType = "DWS["
      bLowBatt = TRUE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or DS10/90 Alert (battery low)"), TRUE)
    CASE &H80
      sValue = "Closed"
      sType = "DWS["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" DS10/90 Normal (max delay)"), TRUE)
    CASE &H81
      sValue = "Closed"
      sType = "DWS["
      bLowBatt = TRUE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" DS10/90 Normal (max delay, batt low)"), TRUE)
    CASE &H84
      sValue = "Closed"
      sType = "DWS["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or DS10/90 Normal"), TRUE)
    CASE &H85
      sValue = "Closed"
      sType = "DWS["
      bLowBatt = TRUE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or DS10/90 Normal (battery low)"), TRUE)
    CASE &HC
      sValue = "Motion"
      sType = "MOTION["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or MS10/20/90 Alert "), TRUE)
    CASE &H8C
      sValue = "No Motion"
      sType = "MOTION["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or MS10/20/90 Normal"), TRUE)
    CASE &H20
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" MS20 Dark sensor"), TRUE)
      sValue2 = "Dark"
    CASE &H4C
      sValue = "Motion"
      sValue2 = "Tamper"
      sType = "MOTION["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or MS90 Alert + Tamper"), TRUE)
    CASE &HCC
      sValue = "No Motion"
      sValue2 = "Tamper"
      sType = "MOTION["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or MS90 Normal + Tamper"), TRUE)
    CASE &HD
      sValue = "Motion"
      sType = "MOTION["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or MS90 Alert (battery low)"), TRUE)
      bLowBatt = TRUE
    CASE &H8D
      sValue = "No Motion"
      sType = "MOTION["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr2 & (" Visonic or MS90 Normal (battery low)"), TRUE)
      bLowBatt = TRUE
    CASE &HE0
      IF RecBuf[0] = &HFF THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Master receiver jamming detected"), TRUE)
      ELSE IF RecBuf[0] = &H0 THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog((" Slave receiver jamming detected"), TRUE)
      ELSE
        sValue = "Motion"
        sType = "DM10["
        sAddr = CStr(RecBuf[0] * 256 + RecBuf[1]) & "]GF"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" DM10 Motion"), TRUE)
      END IF
    CASE &HF0
      sValue = "Dark"
      sType = "DM10["
      sAddr = CStr(RecBuf[0] * 256 + RecBuf[1]) & "]GF"
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" DM10 Darkness detected"), TRUE)
    CASE &HF8
      IF RecBuf[0] = &HFF THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Master receiver end jamming detected", TRUE)
      ELSE IF RecBuf[0] = &H0 THEN
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Slave receiver end jamming detected", TRUE)
      ELSE
        sValue = "Light"
        sType = "DM10["
        sAddr = CStr(RecBuf[0] * 256 + RecBuf[1]) & "]GF"
        IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" DM10 Light detected"), TRUE)
      END IF
    CASE &H6
      sValue = "Arm Away"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" KR10/SH624 ARM Away (min)"), TRUE)
    CASE &H26
      sValue = "Panic"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" Visonic or KR10/Smoke Panic"), TRUE)
    CASE &H46
      sValue = "Lights On"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" KR10 Lights On"), TRUE)
    CASE &H86
      sValue = "Disarm"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" KR10 Disarm"), TRUE)
    CASE &HC6
      sValue = "Lights Off"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" KR10 Lights Off"), TRUE)
    CASE &H2
      sValue = "Arm Away"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" Visonic or SH624 ARM Away (max)"), TRUE)
    CASE &H3
      sValue = "Panic"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" SH624 Panic"), TRUE)
    CASE &HA
      sValue = "Arm Home"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" SH624 ARM Home (max)"), TRUE)
    CASE &HE
      sValue = "Arm Home"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" Visonic or SH624 ARM Home (min)"), TRUE)
    CASE &H22
      sValue = "Panic"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" SH624 Panic "), TRUE)
    CASE &H42
      sValue = "Lights On"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" Visonic or SH624 Lights On"), TRUE)
    CASE &H82
      sValue = "Disarm"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" Visonic or SH624 Disarm"), TRUE)
    CASE &HC2
      sValue = "Lights Off"
      sType = "REMOTE["
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" " & sType & sAddr & (" SH624 Lights Off"), TRUE)
    CASE ELSE
      IF bRFXComRXDebug THEN Main.WriteRFXDebugLog(" Secur ??????", TRUE)
  END SELECT

  IF bRFXComRXDebug THEN
    iHsAddr = CreateHsAddr()
    IF Protocol = MODEB32 THEN
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[0], 2), TRUE)
      Main.WriteRFXDebugLog(" ID:" & Right("    " & CStr(iHsAddr), 5), TRUE)
    ELSE
      Main.WriteRFXDebugLog(" addr:" & Hex(RecBuf[0], 2), TRUE)
      Main.WriteRFXDebugLog(Hex(RecBuf[1], 2), TRUE)
      Main.WriteRFXDebugLog(Hex(RecBuf[4], 2), TRUE)
      Main.WriteRFXDebugLog(" " & Hex(RecBuf[4], 2), TRUE)
      Main.WriteRFXDebugLog(" ID:" & Right("    " & CStr(iHsAddr), 5), TRUE)
    END IF
  END IF

  IF NOT sValue2 AND sValue <> "Panic" THEN sValue2 = "Secure"

  iDeviceId = Devices.Find(sType & sAddr, Devices.FindInterface("RFXCom Receiver"), "X10 Security")
  IF iDeviceId THEN
    Devices.ValueUpdate(iDeviceId, sValue, sValue2, "", "")
    IF bLowBatt THEN
      Devices.Battery(iDeviceId, ("Low"))
    ELSE
      Devices.Battery(iDeviceId, ("OK"))
    END IF
  END IF

END

PRIVATE FUNCTION CreateHsAddr() AS Integer

  DIM iHsAddr AS Integer = 0

  iHsAddr = 0
  IF (RecBuf[0] AND &H1) <> 0 THEN
    iHsAddr = iHsAddr OR &H80
  END IF
  IF (RecBuf[0] AND &H2) <> 0 THEN
    iHsAddr = iHsAddr OR &H40
  END IF
  IF (RecBuf[0] AND &H4) <> 0 THEN
    iHsAddr = iHsAddr OR &H20
  END IF
  IF (RecBuf[0] AND &H8) <> 0 THEN
    iHsAddr = iHsAddr OR &H10
  END IF
  IF (RecBuf[0] AND &H10) <> 0 THEN
    iHsAddr = iHsAddr OR &H8
  END IF
  IF (RecBuf[0] AND &H20) <> 0 THEN
    iHsAddr = iHsAddr OR &H4
  END IF
  IF (RecBuf[0] AND &H40) <> 0 THEN
    iHsAddr = iHsAddr OR &H2
  END IF
  IF (RecBuf[0] AND &H80) <> 0 THEN
    iHsAddr = iHsAddr OR &H1
  END IF
  IF (RecBuf[1] AND &H1) <> 0 THEN
    iHsAddr = iHsAddr OR &H8000&
  END IF
  IF (RecBuf[1] AND &H2) <> 0 THEN
    iHsAddr = iHsAddr OR &H4000&
  END IF
  IF (RecBuf[1] AND &H4) <> 0 THEN
    iHsAddr = iHsAddr OR &H2000&
  END IF
  IF (RecBuf[1] AND &H8) <> 0 THEN
    iHsAddr = iHsAddr OR &H1000&
  END IF
  IF (RecBuf[1] AND &H10) <> 0 THEN
    iHsAddr = iHsAddr OR &H800&
  END IF
  IF (RecBuf[1] AND &H20) <> 0 THEN
    iHsAddr = iHsAddr OR &H400&
  END IF
  IF (RecBuf[1] AND &H40) <> 0 THEN
    iHsAddr = iHsAddr OR &H200&
  END IF
  IF (RecBuf[1] AND &H80) <> 0 THEN
    iHsAddr = iHsAddr OR &H100&
  END IF
  RETURN iHsAddr

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS Integer

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS Integer)

  iTCPPort = Value

END

PRIVATE FUNCTION Interface_Read() AS String

  RETURN sInterface

END

PRIVATE SUB Interface_Write(Value AS String)

  sInterface = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION SerPort_Read() AS String

  RETURN sSerPort

END

PRIVATE SUB SerPort_Write(Value AS String)

  sSerPort = Value

END

PRIVATE FUNCTION RFXComDebug_Read() AS Boolean

  RETURN bRFXComRXDebug

END

PRIVATE SUB RFXComDebug_Write(Value AS Boolean)

  bRFXComRXDebug = Value

END

PRIVATE FUNCTION RelayPort_Read() AS Integer

  RETURN iRelayPort

END

PRIVATE SUB RelayPort_Write(Value AS Integer)

  iRelayPort = Value

END
