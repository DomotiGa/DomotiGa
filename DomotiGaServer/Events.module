' Gambas module file

' Description:
' Events.module
' This module provides support for events, triggers and actions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC SUB CheckTimeNowEvents()

  DIM rResult, rResultAction AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 1 AND events.enabled AND triggers.param1 = &1 AND triggers.param2 = &2", Format(Main.GlobalVar["Hour"], "00"), Format(Main.GlobalVar["Minute"], "00"))
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Event '" & rResult["events.name"] & "' is triggered.")
        IF rResult["events.action1"] THEN
          rResultAction = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1 ", rResult["events.action1"])
          IF rResultAction THEN
            IF RunAction(rResult["events.action1"]) THEN UpdateEvent(rResult["events.id"])
          ELSE
            IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Action '" & rResult["events.name"] & "' no first action defined!")
          END IF
        END IF
      NEXT
    END IF
  ELSE
    Main.WriteLog("Error: table 'events' not found!")
    RETURN
  END IF

END

PUBLIC SUB CheckDeviceChangeEvents(iId AS Integer, sField AS String, sValue AS String)

  DIM rResult, rResultCondition AS Result
  DIM bTrigger AS Boolean
  DIM sDateDiff AS String

  rResult = Main.hDB.Exec("SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 3 AND events.enabled AND triggers.param1 = &1", iId)
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        ' check trigger
        IF rResult["triggers.param2"] <> sField THEN
          IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Event '" & rResult["events.name"] & "' " & sField & " changed, but trigger is on field " & rResult["triggers.param2"])
          IF Main.bEventsDebug THEN Main.WriteDebugLog("iId = " & iId & " triggers.param2 = " & rResult["triggers.param2"] & " sField = " & sField)
          CONTINUE
        END IF
        IF NOT CheckTrigger(sValue, rResult["triggers.param3"], rResult["triggers.param4"]) THEN CONTINUE
        ' SELECT rResult["triggers.param3"]
        '   CASE "="
        '   IF Main.bEventsDebug THEN Main.WriteDebugLog("triggers.param4 = " & rResult["triggers.param4"] & " = " & sValue)
        '     IF Comp(sValue, rResult["triggers.param4"]) <> 0 THEN CONTINUE
        '   CASE "<>"
        '     IF sValue == rResult["triggers.param4"] THEN CONTINUE
        '   ' CASE ">"
        '   '   IF IsDigit(sValue) = FALSE IsDigit(rResult["triggers.param4"]) THEN
        '   '   IF sValue == rResult["triggers.param4"] THEN CONTINUE
        '   CASE ELSE
        '     IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Event '" & rResult["events.name"] & "' unsupported operand found!")
        '     CONTINUE
        ' END SELECT
        IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Device Status trigger on '" & rResult["triggers.param2"] & "' " & sValue & " " & rResult["triggers.param3"] & " " & rResult["triggers.param4"])
        ' check rerun condition
        IF rResult!rerunenabled = TRUE AND IsDate(rResult!lastrun) THEN
          IF NOT CheckReRunCondition(rResult!lastrun, rResult!reruntype, rResult!rerunvalue) THEN
            IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Already ran in the last " & rResult!rerunvalue & " " & rResult!reruntype & " so discarding")
            CONTINUE
          END IF
        END IF
        ' check condition1
        IF rResult["events.condition1"] THEN
          rResultCondition = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", rResult["events.condition1"])
          IF rResultCondition THEN
            SELECT rResultCondition!type
              CASE 2 ' variable
              IF NOT CheckCondition(Main.GlobalVar[rResultCondition!param1], rResultCondition!param2, rResultCondition!param3) AND IF NOT rResult["events.condition2"] THEN CONTINUE
                ' SELECT rResultCondition!param2
                '   CASE "="
                '     IF Main.GlobalVar[rResultCondition!param1] == rResultCondition!param3 THEN
                '       bTrigger = TRUE
                '     END IF
                '   CASE "<>"
                '     IF Main.GlobalVar[rResultCondition!param1] <> rResultCondition!param3 THEN
                '       bTrigger = TRUE
                '     END IF
                '   CASE ELSE
                '     bTrigger = FALSE
                ' END SELECT
              CASE ELSE
                IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Event '" & rResult["events.name"] & "' unsupported condition type found!")
                IF NOT rResult["events.condition2"] THEN CONTINUE
            END SELECT
          END IF
        END IF
        ' ' check condition2
        ' IF rResult["events.condition2"] THEN
        '   IF rResult["events.operand"] == "OR" THEN
        '     rResultCondition = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", rResult["events.condition2"])
        '     IF rResultCondition THEN
        '       IF rResultCondition!type = 2 THEN ' variable
        '         SELECT rResultCondition!param2
        '           CASE "="
        '             IF Main.GlobalVar[rResultCondition!param1] == rResultCondition!param3 THEN
        '               bTrigger = TRUE
        '             END IF
        '           CASE "<>"
        '             IF Main.GlobalVar[rResultCondition!param1] <> rResultCondition!param3 THEN
        '               bTrigger = TRUE
        '             END IF
        '           CASE ELSE
        '             bTrigger = FALSE
        '         END SELECT
        '       ELSE
        '         IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Event '" & rResult["events.name"] & "' unsupported condition type found!")
        '       END IF
        '     END IF
        '   END IF
        ' END IF
        ' run action(s)
'        IF bTrigger THEN
          Main.WriteDebugLog("[Events] Event '" & rResult["events.name"] & "' is triggered.")
          IF rResult["events.action1"] THEN
            IF RunAction(rResult["events.action1"]) THEN UpdateEvent(rResult["events.id"])
          ELSE
            IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Action '" & rResult["events.name"] & "' no first action defined!")
          END IF
          IF rResult["events.action2"] THEN
            IF RunAction(rResult["events.action2"]) THEN UpdateEvent(rResult["events.id"])
          END IF
          IF rResult["events.action3"] THEN
            IF RunAction(rResult["events.action3"]) THEN UpdateEvent(rResult["events.id"])
          END IF
'        END IF
'        bTrigger = FALSE
      NEXT
    END IF
  ELSE
    Main.WriteLog("Error: table 'events' not found!")
    RETURN
  END IF

END

PRIVATE SUB CheckReRunCondition(dDate AS Date, sPeriod AS String, iValue AS Integer) AS Boolean

  IF DateDiff(dDate, Now(), Eval(sPeriod)) > iValue THEN
    RETURN TRUE
  ELSE
    IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Event Rerun condition " & iValue & " " & sPeriod & " is false.")
    RETURN FALSE
  END IF

  ' SELECT sPeriod
  '   CASE "Seconds"
  '     IF DateDiff(dDate, Now(), gb.Second) > iValue THEN RETURN TRUE
  '   CASE "Minutes"
  '     IF DateDiff(dDate, Now(), gb.Minut) > iValue THEN RETURN TRUE
  '   CASE "Hours"
  '     IF DateDiff(dDate, Now(), gb.Hour) > iValue THEN RETURN TRUE
  '   CASE "Days"
  '     IF DateDiff(dDate, Now(), gb.Day) > iValue THEN RETURN TRUE
  '   CASE "Weeks"
  '     IF DateDiff(dDate, Now(), gb.Week) > iValue THEN RETURN TRUE
  '   CASE "Weekdays"
  '     IF DateDiff(dDate, Now(), gb.WeekDay) > iValue THEN RETURN TRUE
  '   CASE "Months"
  '     IF DateDiff(dDate, Now(), gb.Month) > iValue THEN RETURN TRUE
  '   CASE "Quarters"
  '     IF DateDiff(dDate, Now(), gb.Quarter) > iValue THEN RETURN TRUE
  '   CASE "Years"
  '     IF DateDiff(dDate, Now(), gb.Year) > iValue THEN RETURN TRUE
  ' END SELECT
  ' RETURN FALSE

END

PUBLIC SUB RunAction(iAction AS Integer) AS Boolean

  DIM rResultAction AS Result
  DIM bOk AS Boolean

  rResultAction = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1 ", iAction)
  IF rResultAction.Available THEN
    SELECT rResultAction!type
      CASE 1 ' device change
        IF rResultAction!param1 AND IF rResultAction!param2 AND IF rResultAction!param3 THEN
          Devices.SetDevice(Devices.FindNameForDevice(rResultAction!param1), rResultAction!param3)
          bOk = TRUE
        END IF
      CASE ELSE
        bOk = FALSE
    END SELECT
  END IF

  IF bOk THEN
    IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Action '" & rResultAction!name & "' executed!")
    RETURN TRUE
  ELSE
    IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Action '" & rResultAction!name & "' failed to execute!")
    RETURN FALSE
  END IF

END

PUBLIC SUB UpdateEvent(iId AS Integer)

  DIM rResult AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events where id = &1", iId)
  IF rResult.Available THEN
    IF rResult.Count = 1 THEN
      IF rResult!firstrun = "00:00:00" OR rResult!firstrun = "" THEN
        rResult = Main.hDB.Exec("UPDATE events SET firstrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
      END IF
    END IF
    rResult = Main.hDB.Exec("UPDATE events SET lastrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  END IF

END

PRIVATE SUB CheckTrigger(sValue AS Variant, sOperand AS String, sCond AS Variant) AS Boolean

  DIM bReturn AS Boolean

  IF IsBoolean(sCond) THEN sCond = CBool(sValue)

  SELECT sOperand
    CASE "="
      IF Comp(sValue, sCond) = 0 THEN bReturn = TRUE
    CASE "<>"
      IF sValue <> sCond THEN bReturn = TRUE
    CASE ">"
      IF IsDigit(sValue) AND IF IsDigit(sCond) = FALSE THEN
        IF Val(sValue) > Val(sCond) THEN bReturn = TRUE
      ENDIF
    CASE "<"
      IF IsDigit(sValue) AND IF IsDigit(sCond) = FALSE THEN
        IF Val(sValue) < Val(sCond) THEN bReturn = TRUE
      ENDIF
    CASE ELSE
      IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Unsupported operand found!")
  END SELECT
    IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Check trigger " & sCond & " " & sOperand & " " & sValue & " = " & Main.DisplayBool(bReturn))
  RETURN bReturn

END

PRIVATE SUB CheckCondition(sValue AS Variant, sOperand AS String, sCond AS Variant) AS Boolean

  DIM bReturn AS Boolean

  IF IsBoolean(sCond) THEN sCond = CBool(sValue)

  SELECT sOperand
    CASE "="
      IF Comp(sValue, sCond) = 0 THEN bReturn = TRUE
    CASE "<>"
      IF sValue <> sCond THEN bReturn = TRUE
    CASE ">"
      IF IsDigit(sValue) AND IF IsDigit(sCond) = FALSE THEN
        IF Val(sValue) > Val(sCond) THEN bReturn = TRUE
      ENDIF
    CASE "<"
      IF IsDigit(sValue) AND IF IsDigit(sCond) = FALSE THEN
        IF Val(sValue) < Val(sCond) THEN bReturn = TRUE
      ENDIF
    CASE ELSE
      IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Unsupported operand found!")
  END SELECT
    IF Main.bEventsDebug THEN Main.WriteDebugLog("[Events] Check condition " & sCond & " " & sOperand & " " & sValue & " = " & Main.DisplayBool(bReturn))
  RETURN bReturn

END
