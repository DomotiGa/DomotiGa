' Gambas module file

' Description:
' Main.module

' DomotiGa Server - the server part of DomotiGa an open source home automation program
' Copyright(C) 2008-2010 Ron Klinkien

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the
' GNU General PUBLIC License for more details.

' You should have received a copy of the GNU General PUBLIC License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' this is the place where all global variables are defined
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Main
PUBLIC sProgramVersion AS String = "0.1.189"
PUBLIC sBaseDir AS String
PUBLIC sSettings AS String = "server-domotiga.conf"
PUBLIC bMainDebug AS Boolean
PUBLIC bExitProgram AS Boolean ' exit program flag
PUBLIC bProgramStartup AS Boolean ' program is started
PRIVATE iLoopTickCount AS Integer ' main loop counter
PUBLIC sLanguage AS String
PUBLIC bAllowAutoUpgrade AS Boolean

' Client/Server
PUBLIC bStandalone AS Boolean = FALSE
PUBLIC hBroadcastEvent AS UdpSocket
PUBLIC aBroadcastAddrs AS NEW String[]

' Debug
PUBLIC bEventsDebug AS Boolean
PUBLIC bDevicesDebug AS Boolean
PUBLIC bEnergyDebug AS Boolean

' Message counters
PUBLIC iNewMails AS Integer
PUBLIC iNewCalls AS Integer
PUBLIC iNewVoicemails AS Integer

' Logfiles
PUBLIC iLogBuffer AS Integer = 10000 ' default size of buffer after logwindows gets flushed
PUBLIC sMainLogFile AS String
PUBLIC sSpeakLogFile AS String
PUBLIC sDebugLogFile AS String
PUBLIC hMainLogFile AS File ' main log file
PUBLIC hSpeakLogFile AS File ' speak log file
PUBLIC hDebugLogFile AS File ' debug log file

' Collection with Global Variables (these survive a program restart)
PUBLIC GlobalVar AS NEW Collection

' Time and Date related
PUBLIC bNew_Second AS Boolean
PUBLIC bNew_Msecond_500 AS Boolean
PUBLIC bNew_Msecond_250 AS Boolean
PUBLIC bNew_Minute AS Boolean
PUBLIC bNew_Hour AS Boolean
PUBLIC bNew_Day AS Boolean
PUBLIC bNew_Week AS Boolean
PUBLIC bNew_Month AS Boolean
PUBLIC bNew_Year AS Boolean
PUBLIC dTime AS Date
PUBLIC dTime_Now AS Date
PUBLIC dPrev_Time AS Date
PUBLIC iPrev_Sec AS Integer
PUBLIC iPrev_Min AS Integer
PUBLIC iPrev_Hour AS Integer
PUBLIC iPrev_Mday AS Integer
PUBLIC iPrev_Month AS Integer
PUBLIC iPrev_Year AS Integer
PUBLIC iDelayOccured AS Integer

' Timers
PUBLIC tMainFlush AS Timer
PUBLIC iMainFlushTime AS Integer = 3000
PUBLIC tMainSleep AS Timer
PUBLIC iMainSleepTime AS Integer = 50

' MySQL
PUBLIC sSQLHost AS String
PUBLIC sSQLUser AS String
PUBLIC sSQLPass AS String
PUBLIC sSQLDatabase AS String
PUBLIC bSQLDebug AS Boolean
PUBLIC hDB AS NEW Connection

' Sound
PUBLIC bSoundEnabled AS Boolean ' enable sound support
PUBLIC bSoundDebug AS Boolean ' debug sound
PUBLIC iSoundVolume AS Integer ' default volume level

' VoiceText
PUBLIC bVoiceTextEnabled AS Boolean ' enable TTS support
PUBLIC sVoiceTextEngine AS String ' currently only 'cepstral' and 'espeak' are supported
PUBLIC sVoiceTextVoicesMale AS String ' list of voices, first is default
PUBLIC sVoiceTextVoicesFemale AS String ' list of voices, first is default
PUBLIC sVoiceTextPrefixCmd AS String ' prefix command like 'padsp'
PUBLIC bVoiceTextDebug AS Boolean ' debug TTS

' Astro
PUBLIC iAstroLatitude AS Float
PUBLIC iAstroLongitude AS Float
PUBLIC iAstroTimezone AS Float
PUBLIC sAstroSeasons AS String
PUBLIC sAstroSeasonStarts AS String
PUBLIC sAstroTwilight AS String
PUBLIC bAstroDebug AS Boolean
PUBLIC bAstroDST AS Boolean
PUBLIC sTemperature AS String
PUBLIC sCurrency AS String

' Astro MoonPhase
PUBLIC MoonPhase AS String
PUBLIC MoonZodiac AS String
PUBLIC MoonAge AS Integer
PUBLIC MoonDistance AS Float
PUBLIC MoonLatitude AS Float
PUBLIC MoonLongitude AS Float
PUBLIC MoonIsLeapYear AS Boolean

' Heyu
PUBLIC bHeyuEnabled AS Boolean
PUBLIC sHeyuCommand AS String
PUBLIC bHeyuMonitor AS Boolean
PUBLIC bHeyuDebug AS Boolean

' CTX35
PUBLIC bCTX35Enabled AS Boolean
PUBLIC sCTX35SerialPort AS String
PUBLIC sCTX35Baudrate AS String
PUBLIC iCTX35PollTime AS Integer
PUBLIC bCTX35Debug AS Boolean
PUBLIC hCTX35 AS CCTX35

' SMS Modem
PUBLIC bSMSEnabled AS Boolean
PUBLIC sSMSSerialPort AS String
PUBLIC sSMSBaudrate AS String
PUBLIC sSMSPIN AS String
PUBLIC sSMSServiceCentre AS String
PUBLIC sSMSContact AS String
PUBLIC iSMSPollTime AS Integer
PUBLIC bSMSDebug AS Boolean
PUBLIC hSMS AS CSMS

' RFXCom Receiver
PUBLIC bRFXComRXEnabled AS Boolean
PUBLIC sRFXComRXTCPHost AS String
PUBLIC iRFXComRXTCPPort AS Integer
PUBLIC sRFXComRXSerialPort AS String
PUBLIC sRFXComRXBaudrate AS String
PUBLIC sRFXComRXType AS String
PUBLIC bRFXComRXDebug AS Boolean
PUBLIC hRFXComRX AS CRFXComRX
PUBLIC bRFXComRXRelayEnabled AS Boolean
PUBLIC iRFXComRXRelayPort AS Integer

' RFXCom Transmitter
PUBLIC bRFXComTXEnabled AS Boolean
PUBLIC sRFXComTXTCPHost AS String
PUBLIC iRFXComTXTCPPort AS Integer
PUBLIC sRFXComTXSerialPort AS String
PUBLIC sRFXComTXBaudrate AS String
PUBLIC sRFXComTXType AS String
PUBLIC bRFXComTXDebug AS Boolean
PUBLIC hRFXComTX AS CRFXComTX
PUBLIC bRFXComTXHandshake AS Boolean
PUBLIC bRFXComTXRelayEnabled AS Boolean
PUBLIC iRFXComTXRelayPort AS Integer
PUBLIC bRFXComTXDisableX10 AS Boolean
PUBLIC bRFXComTXEnableARC AS Boolean
PUBLIC bRFXComTXEnableHarrison AS Boolean
PUBLIC bRFXComTXEnableKoppla AS Boolean
PUBLIC sRFXComTXACAddress1 AS String
PUBLIC sRFXComTXACAddress2 AS String

' UPS
PUBLIC bUPSEnabled AS Boolean
PUBLIC sUPSTCPHost AS String
PUBLIC iUPSTCPPort AS Integer
PUBLIC iUPSPollTime AS Integer
PUBLIC bUPSDebug AS Boolean
PUBLIC hUPS AS CUPS

' E-mail
PUBLIC bEmailEnabled AS Boolean
PUBLIC sEmailSMTPServer AS String
PUBLIC iEmailSMTPPort AS Integer
PUBLIC sEmailFromAddress AS String
PUBLIC sEmailToAddress AS String
PUBLIC sEmailSubject AS String
PUBLIC bEmailDebug AS Boolean

' Gmail RSS
PUBLIC bGmailEnabled AS Boolean
PUBLIC sGmailUser AS String
PUBLIC sGmailPassword AS String
PUBLIC iGmailPollTime AS Integer
PUBLIC bGmailDebug AS Boolean

' Webserver
PUBLIC bWebserverEnabled AS Boolean
PUBLIC sWebserverDocRoot AS String
PUBLIC iWebserverHTTPPort AS Integer
PUBLIC bWebserverDebug AS Boolean
PUBLIC hWebserver AS CWebserver

' GPS
PUBLIC bGPSEnabled AS Boolean
PUBLIC sGPSSerialPort AS String
PUBLIC sGPSBaudrate AS String
PUBLIC iGPSPollTime AS Integer
PUBLIC bGPSDebug AS Boolean
PUBLIC hGPS AS CGPS

' 1-Wire
PUBLIC bOneWireEnabled AS Boolean
PUBLIC sOneWireSerialPort AS String
PUBLIC sOneWireBaudrate AS String
PUBLIC bOneWireDebug AS Boolean
PUBLIC hOneWire AS COneWire

' VISCA
PUBLIC bVISCAEnabled AS Boolean
PUBLIC sVISCASerialPort AS String
PUBLIC sVISCABaudrate AS String
PUBLIC iVISCACameraAddress AS Integer
PUBLIC bVISCADebug AS Boolean
PUBLIC sVISCAVideoDevice AS String
PUBLIC hVISCA AS CVISCA

' VideoServer
PUBLIC bVideoServerEnabled AS Boolean
PUBLIC sVideoServerAddress AS String
PUBLIC iVideoServerPort AS Integer
PUBLIC sVideoServerUser AS String
PUBLIC sVideoServerPassword AS String
PUBLIC bVideoServerDebug AS Boolean
PUBLIC sVideoServerChannel1 AS String
PUBLIC sVideoServerChannel2 AS String
PUBLIC sVideoServerChannel3 AS String
PUBLIC sVideoServerChannel4 AS String

' HDDTemp
PUBLIC bHDDTempEnabled AS Boolean
PUBLIC sHDDTempTCPHost AS String
PUBLIC iHDDTempTCPPort AS Integer
PUBLIC iHDDTempPollTime AS Integer
PUBLIC iHDDTempThreshold AS Integer
PUBLIC bHDDTempDebug AS Boolean

' RRDTool
PUBLIC bRRDToolEnabled AS Boolean
PUBLIC iRRDToolPollTime AS Integer
PUBLIC bRRDToolDebug AS Boolean

' Asterisk *
PUBLIC bAsteriskEnabled AS Boolean
PUBLIC sAsteriskTCPHost AS String
PUBLIC iAsteriskTCPPort AS Integer
PUBLIC iAsteriskPollTime AS Integer
PUBLIC sAsteriskUser AS String
PUBLIC sAsteriskPassword AS String
PUBLIC bAsteriskDebug AS Boolean
PUBLIC hAsterisk AS CAsterisk

' Bluetooth
PUBLIC bBluetoothEnabled AS Boolean
PUBLIC sBluetoothDevice AS String
PUBLIC iBluetoothThreshold AS Integer
PUBLIC iBluetoothPollTime AS Integer
PUBLIC bBluetoothDebug AS Boolean

' Weeder I/O
PUBLIC bWeederEnabled AS Boolean
PUBLIC sWeederSerialPort AS String
PUBLIC bWeederDebug AS Boolean
PUBLIC hWeeder AS CWeeder

' TV Guide
PUBLIC bTVGuideEnabled AS Boolean
PUBLIC sTVGuideXMLGrabCommand AS String
PUBLIC sTVGuideXMLFile AS String
PUBLIC bTVGuideDebug AS Boolean

' Server Stats
PUBLIC bServerStatsEnabled AS Boolean
PUBLIC sServerStatsName AS String
PUBLIC bServerStatsDebug AS Boolean

' IRMan Infrared
PUBLIC bIRManEnabled AS Boolean
PUBLIC sIRManSerialPort AS String
PUBLIC bIRManDebug AS Boolean
PUBLIC hIRMan AS CIRMan

' WakeOnLan
PUBLIC hBroadcast AS UdpSocket

' Plugwise
PUBLIC bPlugwiseEnabled AS Boolean
PUBLIC sPlugwiseSerialPort AS String
PUBLIC iPlugwisePollTime AS Integer
PUBLIC bPlugwiseDebug AS Boolean
PUBLIC iPlugwiseFirmware AS Integer
PUBLIC hPlugwise AS CPlugwise

' Fritz!Box
PUBLIC bFritzBoxEnabled AS Boolean
PUBLIC sFritzBoxTCPHost AS String
PUBLIC bFritzBoxDebug AS Boolean
PUBLIC hFritzBox AS CFritzBox

' XMLRPC
PUBLIC bXMLRPCEnabled AS Boolean
PUBLIC iXMLRPCMaxConn AS Integer
PUBLIC iXMLRPCHTTPPort AS Integer
PUBLIC bXMLRPCDebug AS Boolean
PUBLIC hXMLRPC AS CXMLRPC

' Broadcast UDP
PUBLIC bBroadcastUDPEnabled AS Boolean

' Bwired Domotica World
PUBLIC bBwiredMapEnabled AS Boolean
PUBLIC sBwiredMapTitle AS String
PUBLIC sBwiredMapWebsite AS String
PUBLIC sBwiredMapWebsitePicUrl AS String
PUBLIC sBwiredMapUser AS String
PUBLIC sBwiredMapPassword AS String
PUBLIC sBwiredMapScreenName AS String
PUBLIC sBwiredMapGpsLat AS String
PUBLIC sBwiredMapGpsLong AS String
PUBLIC sBwiredMapCity AS String
PUBLIC iBwiredMapPushTime AS Integer
PUBLIC bBwiredMapDebug AS Boolean

' Twitter
PUBLIC bTwitterEnabled AS Boolean
PUBLIC sTwitterUser AS String
PUBLIC sTwitterPassword AS String
PUBLIC bTwitterTimeStamp AS Boolean
PUBLIC bTwitterDebug AS Boolean

' DSC Security
PUBLIC bDSCEnabled AS Boolean
PUBLIC sDSCSerialPort AS String
PUBLIC sDSCBaudrate AS String
PUBLIC bDSCDebug AS Boolean
PUBLIC hDSC AS CDSC

' KNX/EIB
PUBLIC bEIBEnabled AS Boolean
PUBLIC sEIBTCPHost AS String
PUBLIC iEIBTCPPort AS Integer
PUBLIC bEIBDebug AS Boolean
PUBLIC hEIB AS CEIB

' Domotica
PUBLIC bDomoticaEnabled AS Boolean
PUBLIC sDomoticaSerialPort AS String
PUBLIC bDomoticaDebug AS Boolean
PUBLIC hDomotica AS CDomotica

' Digitemp
PUBLIC bDigitempEnabled AS Boolean
PUBLIC sDigitempCommand AS String
PUBLIC sDigitempConfig AS String
PUBLIC iDigitempReadTime AS Integer
PUBLIC iDigitempPollTime AS Integer
PUBLIC bDigitempDebug AS Boolean

' Z-Wave
PUBLIC bZWaveEnabled AS Boolean
PUBLIC sZWaveSerialPort AS String
PUBLIC sZWaveBaudrate AS String
PUBLIC bZWaveDebug AS Boolean
PUBLIC bZWaveReloadNodes AS Boolean
PUBLIC hZWave AS CZWave

' One-Wire Weather
PUBLIC bOwwEnabled AS Boolean
PUBLIC sOwwTCPHost AS String
PUBLIC iOwwTCPPort AS Integer
PUBLIC sOwwServerType AS String
PUBLIC bOwwDebug AS Boolean
PUBLIC hOwwTCP AS COww
PUBLIC hOwwUDP AS COww

' LIRC
PUBLIC bLIRCEnabled AS Boolean
PUBLIC sLIRCTCPHost AS String
PUBLIC iLIRCTCPPort AS Integer
PUBLIC bLIRCDebug AS Boolean
PUBLIC hLIRC AS CLIRC

' Pachube
PUBLIC bPachubeEnabled AS Boolean
PUBLIC iPachubeFeed AS Integer
PUBLIC iPachubePushTime AS Integer
PUBLIC sPachubeAPIKey AS String
PUBLIC bPachubeDebug AS Boolean

' JeeLabs JeeLink
PUBLIC bJeeLabsEnabled AS Boolean
PUBLIC sJeeLabsSerialPort AS String
PUBLIC sJeeLabsBaudrate AS String
PUBLIC bJeeLabsDebug AS Boolean
PUBLIC hJeeLabs AS CJeeLabs

' Ping
PUBLIC bPingEnabled AS Boolean
PUBLIC iPingPollTime AS Integer
PUBLIC bPingDebug AS Boolean

' PLCBUS
PUBLIC bPLCBUSEnabled AS Boolean
PUBLIC sPLCBUSSerialPort AS String
PUBLIC sPLCBUSUserCode AS String
PUBLIC sPLCBUSBaudrate AS String
PUBLIC iPLCBUSPollTime AS Integer
PUBLIC bPLCBUSDebug AS Boolean
PUBLIC bPLCBUSThreePhase AS Boolean
PUBLIC hPLCBUS AS CPLCBUS

' CallerID
PUBLIC bCallerIDEnabled AS Boolean
PUBLIC sCallerIDCountryCode AS String
PUBLIC sCallerIDAreaCode AS String
PUBLIC sCallerIDNationalPrefix AS String
PUBLIC sCallerIDInternationalPrefix AS String
PUBLIC bCallerIDAutoCreateContacts AS Boolean
PUBLIC bCallerIDDebug AS Boolean

' TemperatureNu
PUBLIC bTemperaturNuEnabled AS Boolean
PUBLIC sTemperaturNuCity AS String
PUBLIC sTemperaturNuId AS Integer
PUBLIC iTemperaturNuPushTime AS Integer
PUBLIC bTemperaturNuDebug AS Boolean
PUBLIC iTemperaturNuDeviceId AS Integer
PUBLIC sTemperaturNuDeviceValue AS String

' SqueezeServer
PUBLIC bSqueezeServerEnabled AS Boolean
PUBLIC sSqueezeServerTCPHost AS String
PUBLIC iSqueezeServerTCPPort AS Integer
PUBLIC bSqueezeServerDebug AS Boolean
PUBLIC hSqueezeServer AS CSqueezeServer

' LEDMatrix
PUBLIC bLEDMatrixEnabled AS Boolean
PUBLIC sLEDMatrixSerialPort AS String
PUBLIC sLEDMatrixID AS String
PUBLIC iLEDMatrixColor AS Integer
PUBLIC iLEDMatrixSpeed AS Integer
PUBLIC bLEDMatrixDebug AS Boolean
PUBLIC hLEDMatrix AS CLEDMatrix

' WeatherBug
PUBLIC bWeatherBugEnabled AS Boolean
PUBLIC sWeatherBugID AS String
PUBLIC sWeatherBugCity AS String
PUBLIC sWeatherBugCityCode AS String
PUBLIC sWeatherBugCountryName AS String
PUBLIC bWeatherBugDebug AS Boolean

' EZcontrol
PUBLIC bEZcontrolEnabled AS Boolean
PUBLIC sEZcontrolUDPHost AS String
PUBLIC iEZcontrolUDPPort AS Integer = 7042
PUBLIC bEZcontrolDebug AS Boolean
PUBLIC hEZcontrol AS CEZcontrol

' Current Cost
PUBLIC bCurrentCostEnabled AS Boolean
PUBLIC sCurrentCostSerialPort AS String
PUBLIC sCurrentCostBaudrate AS String
PUBLIC bCurrentCostDebug AS Boolean
PUBLIC hCurrentCost AS CCurrentCost

' Denon
PUBLIC bDenonEnabled AS Boolean
PUBLIC sDenonTCPHost AS String
PUBLIC iDenonTCPPort AS Integer
PUBLIC sDenonSerialPort AS String
PUBLIC sDenonBaudrate AS String
PUBLIC sDenonType AS String
PUBLIC bDenonDebug AS Boolean
PUBLIC hDenon AS CDenon

' IRTrans
PUBLIC bIRTransEnabled AS Boolean
PUBLIC sIRTransTCPHost AS String
PUBLIC iIRTransTCPPort AS Integer
PUBLIC bIRTransDebug AS Boolean
PUBLIC hIRTrans AS CIRTrans

' Onkyo/Intergra
PUBLIC bOnkyoEnabled AS Boolean
PUBLIC sOnkyoTCPHost AS String
PUBLIC iOnkyoTCPPort AS Integer
PUBLIC sOnkyoSerialPort AS String
PUBLIC sOnkyoBaudrate AS String
PUBLIC sOnkyoType AS String
PUBLIC bOnkyoDebug AS Boolean
PUBLIC hOnkyo AS COnkyo

' Anel PwrCtrl
PUBLIC bPwrCtrlEnabled AS Boolean
PUBLIC iPwrCtrlUDPRead AS Integer
PUBLIC iPwrCtrlUDPSend AS Integer
PUBLIC bPwrCtrlDebug AS Boolean
PUBLIC sPwrCtrlUserPw AS String
PUBLIC hPwrCtrl AS CPwrCtrl

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' this is where domotiga starts
' determine basedir, set language and run application
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Main() AS Boolean

  ' determine basedir
  IF Exist(Application.Path &/ "logs") THEN
    sBaseDir = Application.Path
  ELSE IF Exist(Mid$(Application.Path &/ "logs", 1, RInStr(Application.Path, "/")))
    sBaseDir = Mid$(Application.Path, 1, RInStr(Application.Path, "/"))
  ELSE
    Main.WriteLog(("Error: Couldn't determine DomotiGa's basedir."))
    QUIT
  END IF

  ' parse cmd line arguments
  ParseArgs()

  ' load program settings
  Main.GetConfig()
  ' set language
  System.Language = sLanguage
  ' start different sections
  Main.Setup_BroadcastAddrs()
  Main.Setup_Logfiles()
  Main.DisplayProgramInfo()
  Main.WriteLog(("Checking directory structure ..."))
  Main.CreateDirectoryTree()

  ' connect to the mysql database
  WriteLog(("Connecting to database ..."))
  IF NOT Main.ConnectDatabase() THEN
    Main.WriteLog(("Error: Couldn't open the database (called '") & Main.sSQLDatabase & ("') Check '") & Main.sSettings & ("' or create & load a database."))
    QUIT
  END IF

  ' check versions
  CheckDatabaseVersion()

  ' start all setups for modules
  Main.WriteLog(("Loading modules ..."))
  Main.Setup()

  ' update house status
  Main.WriteLog(("Starting main program ..."))
  IF NOT Main.GlobalVar["House_Mode"] THEN Main.GlobalVar["House_Mode"] = "normal"
  IF Len(Main.GlobalVar["Mute"]) < 1 THEN Main.GlobalVar["Mute"] = FALSE
  Main.ChangeHouseMode(Main.GlobalVar["House_Mode"])
  Main.ChangeMuteMode(Main.GlobalVar["Mute"])

  Main.bProgramStartup = TRUE
  Main.WriteLog(("Entering main program loop ..."))
  Main.Check_for_Action()
  Main.SetupTimers() ' start timers

  IF Main.bMainDebug THEN Main.WriteLog(("Main Debug enabled."))
  Main.GlobalVar["Tagline"] = Main.Random_Text("remarks_tags")
  Main.WriteLog("The current tagline is '" & Main.GlobalVar["Tagline"] & "'")
  Sounds.PlaySnd("click.wav")

  IF Main.GlobalVar["EmailCount"] THEN Main.iNewMails = Main.GlobalVar["EmailCount"]
  IF Main.GlobalVar["CallCount"] THEN Main.iNewCalls = Main.GlobalVar["CallCount"]
  IF Main.GlobalVar["VoiceMailCount"] THEN Main.iNewVoicemails = Main.GlobalVar["VoiceMailCount"]

  ' exit program

CATCH ' error trap
  Main.WriteLog(("Error: ") & Error.Text & " " & Error.Code & " " & Error.Where)
  Main.WriteLog(("Program abort."))
  QUIT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse command line arguments
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION ParseArgs()

  DIM sArg AS String
  DIM iCnt AS Integer

  FOR iCnt = 1 TO Application.Args.Count - 1
    sArg = Application.Args[iCnt]
    IF Left(sArg) = "-" THEN
      IF sArg = "-d" THEN
        ' start as a daemon in the background
        Application.Daemon = TRUE
      ELSE IF sArg = "-h" THEN
        ' display help info
        PRINT Application.Name & " version " & sProgramVersion
        PRINT "Copyright(C) 2008-2010 Ron Klinkien"
        PRINT
        PRINT "This program is free software; you can redistribute it and/or"
        PRINT "modify it under the terms of the GNU General Public License as"
        PRINT "published by the Free Software Foundation; either version 2, or"
        PRINT "(at your option) any later version."
        PRINT
        PRINT "Usage: " & Application.Args[0] & " [options]"
        PRINT
        PRINT "Options:"
        PRINT " -h              display this help"
        PRINT " -a              allow automatic upgrade"
        PRINT " -c <configfile> specify config file"
        PRINT
        QUIT
      ELSE IF sArg = "-a" THEN
        ' allow automatic database upgrade
        bAllowAutoUpgrade = TRUE
      ELSE IF Left(sArg, 2) = "-c" THEN
        ' run with specified config file
        IF Len(sArg) > 2 THEN
          sSettings = Trim(Right(sArg, Len(sArg) - 2))
        ELSE
          IF iCnt < (Application.Args.Count - 1) THEN 
            sSettings = Trim(Application.Args[iCnt + 1])
          ELSE
            Main.WriteLog(("Error: No config filename specified, using default ..."))
          ENDIF
        ENDIF
      ENDIF
    ENDIF
  NEXT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the mysql database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectDatabase() AS Boolean

  ' try to close the connection first
  TRY hDB.Close

  ' get a new one
  WITH hDB
    .Type = "mysql"
    .Host = sSQLHost
    .Login = sSQLUser
    .Password = sSQLPass
    .Name = sSQLDatabase
    .Open
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
   Main.WriteLog(("MySQL Error: ") & ERROR.Text)
   RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display startup information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DisplayProgramInfo()

  DIM sUptime, sModified AS String

  WITH Stat(Application.Path)
    sModified = Format$(.LastModified, "yyyy-mm-dd at hh:nn:ss")
  END WITH

  EXEC ["uptime"] TO sUptime
  WriteLog(("  ---- Program Restart ----"))
  WriteLog(("Starting ") & Application.Name & " V" & Main.sProgramVersion & (" last updated on ") & sModified)
  WriteLog(("Running on ") & System.Host & " (pid " & Application.Id & (") as user ") & System.User.Name & " (id " & System.User.Id & ")" & (" with language ") & System.Language)
  WriteLog(("Program base directory is '") & sBaseDir & "'.")
  WriteLog(("Database settings are loaded from '") & sSettings & "'.")
  WriteLog(("Active logfiles are '") & sMainLogFile & "', '" & sSpeakLogFile & ("' and '") & sDebugLogFile & "'.")
  WriteLog(("Running on Gambas version ") & GetGambasVersion())
  WriteLog(("Server uptime is ") & Left$(Replace$(sUptime, "  ", " "), -2))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create main directory structure if incomplete
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB CreateDirectoryTree()

  IF NOT Exist(sBaseDir) THEN
    WriteLog(("Creating default directory structure."))
    TRY MKDIR (sBaseDir)
    TRY MKDIR (sBaseDir &/ "logs")
    TRY MKDIR (sBaseDir &/ "www")
    TRY MKDIR (sBaseDir &/ "icons")
    TRY MKDIR (sBaseDir &/ "images")
    TRY MKDIR (sBaseDir &/ "sounds")
    TRY MKDIR (sBaseDir &/ "rrd")
    TRY MKDIR (sBaseDir &/ "rrd/graphs")
    TRY MKDIR (sBaseDir &/ "tvguide")
    TRY MKDIR (sBaseDir &/ "tvguide/imdb")
    TRY MKDIR (sBaseDir &/ "tvguide/cache")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save settings to file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SetConfig()

  SetConfigValue("MySQL/Host", sSQLHost)
  SetConfigValue("MySQL/User", sSQLUser)
  SetConfigValue("MySQL/Password", sSQLPass)
  SetConfigValue("MySQL/Database", sSQLDatabase)
  SetConfigValue("Program/Language", sLanguage)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' load config, create default config file if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetConfig()

  DIM hSettings AS Settings

  ' load basic settings from file, if the settings file is not
  ' found then create one with default settings
  IF NOT Exist(sBaseDir &/ sSettings) THEN
    hSettings = NEW Settings(sBaseDir &/ sSettings)
    hSettings["MySQL/Host"] = "localhost"
    hSettings["MySQL/User"] = "domouser"
    hSettings["MySQL/Password"] = "kung-fu"
    hSettings["MySQL/Database"] = "domotiga"
    hSettings["Program/Language"] = "en_US.UTF-8"
    hSettings.Save
    ' re-load
    GetConfig()
    Main.WriteLog(("Couldn't open config file called '") & Main.sSettings & ("'. Created one with default settings!"))
  ELSE
    sSQLHost = GetConfigValue("MySQL/Host", "localhost")
    sSQLUser = GetConfigValue("MySQL/User", "domouser")
    sSQLPass = GetConfigValue("MySQL/Password", "kung-fu")
    sSQLDatabase = GetConfigValue("MySQL/Database", "domotiga")
    sLanguage = GetConfigValue("Program/Language", "en_US.UTF-8")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get all settings from settings_ database tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetSettings()

  DIM rResult AS Result

  ' Main
  rResult = GetSettingTable("main")
  bMainDebug = rResult!debug
  bDevicesDebug = rResult!debugdevices
  bEventsDebug = rResult!debugevents
  bEnergyDebug = rResult!debugenergy
  iMainSleepTime = rResult!sleeptime
  iMainFlushTime = rResult!flushtime
  iLogBuffer = rResult!logbuffer

  ' Sound
  rResult = GetSettingTable("sound")
  bSoundEnabled = rResult!enabled
  bSoundDebug = rResult!debug
  iSoundVolume = rResult!volume

  ' Voice Text
  rResult = GetSettingTable("voicetext")
  bVoiceTextEnabled = rResult!enabled
  sVoiceTextEngine = rResult!engine
  sVoiceTextPrefixCmd = rResult!prefixcmd
  sVoiceTextVoicesMale = rResult!voicesmale
  sVoiceTextVoicesFemale = rResult!voicesfemale
  bVoiceTextDebug = rResult!debug

  ' Astro and Location
  rResult = GetSettingTable("astro")
  iAstroLatitude = rResult!latitude
  iAstroLongitude = rResult!longitude
  iAstroTimezone = rResult!timezone
  sAstroTwilight = rResult!twilight
  sAstroSeasons = rResult!seasons
  sAstroSeasonStarts = rResult!seasonstarts
  bAstroDebug = rResult!debug
  sTemperature = rResult!temperature
  sCurrency = rResult!currency
  bAstroDST = rResult!dst

  ' Heyu
  rResult = GetSettingTable("heyu")
  bHeyuEnabled = rResult!enabled
  sHeyuCommand = rResult!command
  bHeyuMonitor = rResult!monitor
  bHeyuDebug = rResult!debug

  ' CTX35
  rResult = GetSettingTable("ctx35")
  bCTX35Enabled = rResult!enabled
  sCTX35SerialPort = rResult!serialport
  sCTX35Baudrate = rResult!baudrate
  iCTX35PollTime = rResult!polltime
  bCTX35Debug = rResult!debug

  ' SMS
  rResult = GetSettingTable("sms")
  bSMSEnabled = rResult!enabled
  sSMSSerialPort = rResult!serialport
  sSMSBaudrate = rResult!baudrate
  iSMSPollTime = rResult!polltime
  sSMSPIN = rResult!pin
  sSMSServiceCentre = rResult!servicecentre
  sSMSContact = rResult!contact
  bSMSDebug = rResult!debug

  ' RFXCom Receiver
  rResult = GetSettingTable("rfxcomrx")
  bRFXComRXEnabled = rResult!enabled
  sRFXComRXTCPHost = rResult!tcphost
  iRFXComRXTCPPort = rResult!tcpport
  sRFXComRXType = rResult!type
  sRFXComRXSerialPort = rResult!serialport
  sRFXComRXBaudrate = rResult!baudrate
  bRFXComRXDebug = rResult!debug
  bRFXComRXRelayEnabled = rResult!relayenabled
  iRFXComRXRelayPort = rResult!relayport

  ' RFXCom Transmitter
  rResult = GetSettingTable("rfxcomtx")
  bRFXComTXEnabled = rResult!enabled
  sRFXComTXTCPHost = rResult!tcphost
  iRFXComTXTCPPort = rResult!tcpport
  sRFXComTXType = rResult!type
  sRFXComTXSerialPort = rResult!serialport
  sRFXComTXBaudrate = rResult!baudrate
  bRFXComTXDebug = rResult!debug
  bRFXComTXHandshake = rResult!handshake
  bRFXComTXRelayEnabled = rResult!relayenabled
  iRFXComTXRelayPort = rResult!relayport
  bRFXComTXDisableX10 = rResult!disablex10
  bRFXComTXEnableARC = rResult!enablearc
  bRFXComTXEnableHarrison = rResult!enableharrison
  bRFXComTXEnableKoppla = rResult!enablekoppla
  sRFXComTXACAddress1 = rResult!acaddress1
  sRFXComTXACAddress2 = rResult!acaddress2

  ' E-Mail
  rResult = GetSettingTable("email")
  bEmailEnabled = rResult!enabled
  sEmailSMTPServer = rResult!smtpserver
  iEmailSMTPPort = rResult!smtpport
  sEmailFromAddress = rResult!fromaddress
  sEmailToAddress = rResult!toaddress
  bEmailDebug = rResult!debug

  ' Gmail RSS
  rResult = GetSettingTable("gmail")
  bGmailEnabled = rResult!enabled
  sGmailUser = rResult!user
  sGmailPassword = rResult!password
  iGmailPollTime = rResult!polltime
  bGmailDebug = rResult!debug

  ' UPS
  rResult = GetSettingTable("ups")
  bUPSEnabled = rResult!enabled
  sUPSTCPHost = rResult!tcphost
  iUPSTCPPort = rResult!tcpport
  iUPSPollTime = rResult!polltime
  bUPSDebug = rResult!debug

  ' Webserver
  rResult = GetSettingTable("webserver")
  bWebserverEnabled = rResult!enabled
  sWebserverDocRoot = rResult!docroot
  iWebserverHTTPPort = rResult!httpport
  bWebserverDebug = rResult!debug

  ' GPS
  rResult = GetSettingTable("gps")
  bGPSEnabled = rResult!enabled
  sGPSSerialPort = rResult!serialport
  sGPSBaudrate = rResult!baudrate
  iGPSPollTime = rResult!polltime
  bGPSDebug = rResult!debug

  ' OneWire
  rResult = GetSettingTable("onewire")
  bOneWireEnabled = rResult!enabled
  sOneWireSerialPort = rResult!serialport
  sOneWireBaudrate = rResult!baudrate
  bOneWireDebug = rResult!debug

  ' VISCA
  rResult = GetSettingTable("visca")
  bVISCAEnabled = rResult!enabled
  sVISCASerialPort = rResult!serialport
  sVISCABaudrate = rResult!baudrate
  iVISCACameraAddress = rResult!cameraaddress
  sVISCAVideoDevice = rResult!device
  bVISCADebug = rResult!debug

  ' HDDTemp
  rResult = GetSettingTable("hddtemp")
  bHDDTempEnabled = rResult!enabled
  sHDDTempTCPHost = rResult!tcphost
  iHDDTempTCPPort = rResult!tcpport
  iHDDTempPollTime = rResult!polltime
  iHDDTempThreshold = rResult!threshold
  bHDDTempDebug = rResult!debug

  ' VideoServer
  rResult = GetSettingTable("videoserver")
  bVideoServerEnabled = rResult!enabled
  sVideoServerAddress = rResult!tcphost
  iVideoServerPort = rResult!tcpport
  sVideoServerUser = rResult!user
  sVideoServerPassword = rResult!password
  bVideoServerDebug = rResult!debug
  sVideoServerChannel1 = rResult!channel1
  sVideoServerChannel2 = rResult!channel2
  sVideoServerChannel3 = rResult!channel3
  sVideoServerChannel4 = rResult!channel4

  ' RRDTool
  rResult = GetSettingTable("rrdtool")
  bRRDToolEnabled = rResult!enabled
  iRRDToolPollTime = rResult!polltime
  bRRDToolDebug = rResult!debug

  ' Asterisk *
  rResult = GetSettingTable("asterisk")
  bAsteriskEnabled = rResult!enabled
  sAsteriskTCPHost = rResult!tcphost
  iAsteriskTCPPort = rResult!tcpport
  iAsteriskPollTime = rResult!polltime
  sAsteriskUser = rResult!user
  sAsteriskPassword = rResult!password
  bAsteriskDebug = rResult!debug

  ' Bluetooth
  rResult = GetSettingTable("bluetooth")
  bBluetoothEnabled = rResult!enabled
  sBluetoothDevice = rResult!device
  iBluetoothThreshold = rResult!threshold
  iBluetoothPollTime = rResult!polltime
  bBluetoothDebug = rResult!debug

  ' Weeder I/O
  rResult = GetSettingTable("weeder")
  bWeederEnabled = rResult!enabled
  sWeederSerialPort = rResult!serialport
  bWeederDebug = rResult!debug

  ' XML TVGuide
  rResult = GetSettingTable("tvguide")
  bTVGuideEnabled = rResult!enabled
  sTVGuideXMLGrabCommand = rResult!xmlgrabcmd
  sTVGuideXMLFile = rResult!xmlfile
  bTVGuideDebug = rResult!debug

  ' Server Stats
  rResult = GetSettingTable("serverstats")
  bServerStatsEnabled = rResult!enabled
  sServerStatsName = rResult!servername
  bServerStatsDebug = rResult!debug

  ' IRMan Infrared
  rResult = GetSettingTable("irman")
  bIRManEnabled = rResult!enabled
  sIRManSerialPort = rResult!serialport
  bIRManDebug = rResult!debug

  ' Plugwise
  rResult = GetSettingTable("plugwise")
  bPlugwiseEnabled = rResult!enabled
  iPlugwisePollTime = rResult!polltime
  sPlugwiseSerialPort = rResult!serialport
  iPlugwiseFirmware = rResult!firmware
  bPlugwiseDebug = rResult!debug

  ' Fritz!Box
  rResult = GetSettingTable("fritzbox")
  bFritzBoxEnabled = rResult!enabled
  sFritzBoxTCPHost = rResult!tcphost
  bFritzBoxDebug = rResult!debug

  ' XMLRPC
  rResult = GetSettingTable("xmlrpc")
  bXMLRPCEnabled = rResult!enabled
  iXMLRPCMaxConn = rResult!maxconn
  iXMLRPCHTTPPort = rResult!httpport
  bXMLRPCDebug = rResult!debug
  bBroadcastUDPEnabled = rResult!broadcastudp

  ' Bwired GoogleMap
  rResult = GetSettingTable("bwiredmap")
  bBwiredMapEnabled = rResult!enabled
  sBwiredMapTitle = rResult!title
  sBwiredMapWebsite = rResult!website
  sBwiredMapWebsitePicUrl = rResult!websitepicurl
  sBwiredMapUser = rResult!user
  sBwiredMapPassword = rResult!password
  sBwiredMapScreenName = rResult!screenname
  sBwiredMapGpsLat = rResult!gpslat
  sBwiredMapGpsLong = rResult!gpslong
  sBwiredMapCity = rResult!city
  iBwiredMapPushTime = rResult!pushtime
  bBwiredMapDebug = rResult!debug

  ' Twitter
  rResult = GetSettingTable("twitter")
  bTwitterEnabled = rResult!enabled
  sTwitterUser = rResult!username
  sTwitterPassword = rResult!password
  bTwitterTimeStamp = rResult!sendtimestamp
  bTwitterDebug = rResult!debug

  ' DSC Security
  rResult = GetSettingTable("dsc")
  bDSCEnabled = rResult!enabled
  sDSCSerialPort = rResult!serialport
  sDSCBaudrate = rResult!baudrate
  bDSCDebug = rResult!debug

  ' KNX/EIB
  rResult = GetSettingTable("eib")
  bEIBEnabled = rResult!enabled
  sEIBTCPHost = rResult!tcphost
  iEIBTCPPort = rResult!tcpport
  bEIBDebug = rResult!debug

  ' Domotica
  rResult = GetSettingTable("domotica")
  bDomoticaEnabled = rResult!enabled
  sDomoticaSerialPort = rResult!serialport
  bDomoticaDebug = rResult!debug

  ' Digitemp
  rResult = GetSettingTable("digitemp")
  bDigitempEnabled = rResult!enabled
  sDigitempCommand = rResult!command
  sDigitempConfig = rResult!config
  iDigitempReadTime = rResult!readtime
  iDigitempPollTime = rResult!polltime
  bDigitempDebug = rResult!debug

  ' Z-Wave
  rResult = GetSettingTable("zwave")
  bZWaveEnabled = rResult!enabled
  sZWaveSerialPort = rResult!serialport
  sZWaveBaudrate = rResult!baudrate
  bZWaveDebug = rResult!debug
  bZWaveReloadNodes = rResult!reloadnodes

  ' One-Wire Weather
  rResult = GetSettingTable("oww")
  bOwwEnabled = rResult!enabled
  sOwwTCPHost = rResult!tcphost
  iOwwTCPPort = rResult!tcpport
  sOwwServerType = rResult!servertype
  bOwwDebug = rResult!debug

  ' LIRC
  rResult = GetSettingTable("lirc")
  bLIRCEnabled = rResult!enabled
  sLIRCTCPHost = rResult!tcphost
  iLIRCTCPPort = rResult!tcpport
  bLIRCDebug = rResult!debug

  ' Pachube
  rResult = GetSettingTable("pachube")
  bPachubeEnabled = rResult!enabled
  iPachubeFeed = rResult!feed
  sPachubeAPIKey = rResult!apikey
  iPachubePushTime = rResult!pushtime
  bPachubeDebug = rResult!debug

  ' JeeLabs JeeLink
  rResult = GetSettingTable("jeelabs")
  bJeeLabsEnabled = rResult!enabled
  sJeeLabsSerialPort = rResult!serialport
  sJeeLabsBaudrate = rResult!baudrate
  bJeeLabsDebug = rResult!debug

  ' Ping
  rResult = GetSettingTable("ping")
  bPingEnabled = rResult!enabled
  iPingPollTime = rResult!polltime
  bPingDebug = rResult!debug

  ' PLCBUS
  rResult = GetSettingTable("plcbus")
  bPLCBUSEnabled = rResult!enabled
  sPLCBUSSerialPort = rResult!serialport
  sPLCBUSBaudrate = rResult!baudrate
  sPLCBUSUserCode = rResult!usercode
  iPLCBUSPollTime = rResult!polltime
  bPLCBUSThreePhase = rResult!threephase
  bPLCBUSDebug = rResult!debug

  ' CallerID
  rResult = GetSettingTable("callerid")
  bCallerIDEnabled = rResult!enabled
  sCallerIDCountryCode = rResult!countrycode
  sCallerIDAreaCode = rResult!areacode
  sCallerIDNationalPrefix = rResult!prefixnational
  sCallerIDInternationalPrefix = rResult!prefixinternational
  bCallerIDAutoCreateContacts = rResult!autocreatecontacts
  bCallerIDDebug = rResult!debug

  ' TemperaturNu
  rResult = GetSettingTable("temperaturnu")
  bTemperaturNuEnabled = rResult!enabled
  sTemperaturNuCity = rResult!city
  sTemperaturNuId = rResult!apikey
  iTemperaturNuPushTime = rResult!pushtime
  iTemperaturNuDeviceId = rResult!deviceid
  sTemperaturNuDeviceValue = rResult!devicevalue
  bTemperaturNuDebug = rResult!debug

  ' Squeeze Server
  rResult = GetSettingTable("squeezeserver")
  bSqueezeServerEnabled = rResult!enabled
  sSqueezeServerTCPHost = rResult!tcphost
  iSqueezeServerTCPPort = rResult!tcpport
  bSqueezeServerDebug = rResult!debug

  ' LED Matrix
  rResult = GetSettingTable("ledmatrix")
  bLEDMatrixEnabled = rResult!enabled
  sLEDMatrixSerialPort = rResult!serialport
  sLEDMatrixID = rResult!displayid
  iLEDMatrixColor = rResult!color
  iLEDMatrixSpeed = rResult!speed
  bLEDMatrixDebug = rResult!debug

  ' WeatherBug
  rResult = GetSettingTable("weatherbug")
  bWeatherBugEnabled = rResult!enabled
  sWeatherBugID = rResult!weatherbugid
  sWeatherBugCity = rResult!city
  sWeatherBugCityCode = rResult!citycode
  sWeatherBugCountryName = rResult!countryname
  bWeatherBugDebug = rResult!debug

  ' EZcontrol
  rResult = GetSettingTable("ezcontrol")
  bEZcontrolEnabled = rResult!enabled
  sEZcontrolUDPHost = rResult!udphost
  bEZcontrolDebug = rResult!debug

  ' Current Cost
  rResult = GetSettingTable("currentcost")
  bCurrentCostEnabled = rResult!enabled
  sCurrentCostSerialPort = rResult!serialport
  sCurrentCostBaudrate = rResult!baudrate
  bCurrentCostDebug = rResult!debug

  ' Denon
  rResult = GetSettingTable("denon")
  bDenonEnabled = rResult!enabled
  sDenonTCPHost = rResult!tcphost
  iDenonTCPPort = rResult!tcpport
  sDenonType = rResult!type
  sDenonSerialPort = rResult!serialport
  sDenonBaudrate = rResult!baudrate
  bDenonDebug = rResult!debug

  ' IRTrans
  rResult = GetSettingTable("irtrans")
  bIRTransEnabled = rResult!enabled
  sIRTransTCPHost = rResult!tcphost
  iIRTransTCPPort = rResult!tcpport
  bIRTransDebug = rResult!debug

  ' Onkyo/Integra
  rResult = GetSettingTable("onkyo")
  bOnkyoEnabled = rResult!enabled
  sOnkyoTCPHost = rResult!tcphost
  iOnkyoTCPPort = rResult!tcpport
  sOnkyoType = rResult!type
  sOnkyoSerialPort = rResult!serialport
  sOnkyoBaudrate = rResult!baudrate
  bOnkyoDebug = rResult!debug

  ' Anel PWrCtrl
  rResult = GetSettingTable("pwrctrl")
  bPwrCtrlEnabled = rResult!enabled
  iPwrCtrlUDPRead = rResult!udpread
  iPwrCtrlUDPSend = rResult!udpsend
  sPwrCtrlUserPw = rResult!userpw
  bPwrCtrlDebug = rResult!debug

CATCH
  Main.WriteLog(("Error: " & Error.Text & " " & Error.Code & " while loading settings! Is your database version correct?"))
  CloseAll()
  QUIT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set a value in the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SetConfigValue(sKey AS String, vValue AS Variant)

   DIM hSettings AS Settings

   hSettings = NEW Settings(sBaseDir &/ sSettings)
   hSettings[sKey] = vValue
   hSettings.Save

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get a value from the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION GetConfigValue(sKey AS String, OPTIONAL vValue AS Variant) AS Variant

  DIM hSettings AS Settings

  hSettings = NEW Settings(sBaseDir &/ sSettings)

  IF NOT IsNull(vValue) THEN
     RETURN hSettings[sKey, vValue]
  ELSE
     RETURN hSettings[sKey]
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB WriteLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  PRINT sText;
  IF hMainLogFile THEN PRINT #hMainLogFile, sText;
  Main.BroadcastEvent("[MainLog]" & sText)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB WriteSpeakLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  PRINT sText;
  IF hSpeakLogFile THEN PRINT #hSpeakLogFile, sText;
  Main.BroadcastEvent("[SpeakLog]" & sText)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB WriteDebugLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  PRINT sText;
  IF hDebugLogFile THEN PRINT #hDebugLogFile, sText;
  Main.BroadcastEvent("[DebugLog]" & sText)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log without date/time (for RFXCom)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB WriteRFXDebugLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  PRINT sText;
  IF hDebugLogFile THEN PRINT #hDebugLogFile, sText;
  Main.BroadcastEvent("[DebugLog]" & sText)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return version of gambas we are running with
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetGambasVersion() AS String

  DIM sVer AS String

  SHELL "gbx" & System.Version & " -V " TO sVer
  RETURN Trim(Mid$(sVer, InStr(sVer, "-") + 1))

CATCH
  RETURN "?"

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get settings table from db, return defaults if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetSettingTable(sGroup AS String, OPTIONAL bDefault AS Boolean) AS Result

  DIM rResult AS Result

  IF bDefault THEN
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' load default settings
  ELSE
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 1") ' try to load active settings
    IF (rResult.Count < 1) THEN
      hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' fall back to defaults
    END IF
  END IF

  RETURN rResult

CATCH
  WriteLog(("GetSettings : ") & Error.Text & (" for ") & sGroup)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close all what's open
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB CloseAll()

  ' stop all running timers
  StopTimers()
  ' save all globalvars in db
  SaveGlobalVars()
  ' stop Heyu monitor
  TRY Heyu.Monitor_Stop
  ' squeezeserver close
  TRY hSqueezeServer.Disconnect
  ' plcbus close
  TRY hPLCBUS.Disconnect
  ' ctx35 close
  TRY hCTX35.Disconnect
  ' ledmatrix close
  TRY hLEDMatrix.Disconnect
  ' rfxcom close
  TRY hRFXComRX.Disconnect
  TRY hRFXComTX.Disconnect
  ' ups close
  TRY hUPS.Disconnect
  ' sms close
  TRY hSMS.Disconnect
  ' gps close
  TRY hGPS.Disconnect
  ' 1-wire close
  TRY hOneWire.Disconnect
  ' visca close
  TRY hVISCA.Disconnect
  ' asterisk TCP socket close
  TRY hAsterisk.Disconnect
  ' weeder close
  TRY hWeeder.Disconnect
  ' irman close
  TRY hIRMan.Disconnect
  ' plugwise close
  TRY hPlugwise.Disconnect
  ' fritzbox close
  TRY hFritzBox.Disconnect
  ' xmlrpc close
  TRY hXMLRPC.Disconnect
  ' dsc close
  TRY hDSC.Disconnect
  ' denon close
  TRY hDenon.Disconnect
  ' onkyo close
  TRY hOnkyo.Disconnect
  ' irtrans close
  TRY hIRTrans.Disconnect
  ' eib close
  TRY hEIB.Disconnect
  ' domotica close
  TRY hDomotica.Disconnect
  ' z-wave close
  TRY hZWave.Disconnect
  ' one-wire weather close
  TRY hOwwTCP.Disconnect
  TRY hOwwUDP.Disconnect
  ' lirc close
  TRY hLIRC.Disconnect
  ' jeelabs close
  TRY hJeeLabs.Disconnect
  ' ezcontrol close
  TRY hEZcontrol.Disconnect()
  ' current cost close
  TRY hCurrentCost.Disconnect()
  ' pwrctrl cloese
  TRY hPwrCtrl.Disconnect()
  ' webserver close
  TRY hWebserver.Disconnect
  ' db close
  TRY hDB.Close

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start various stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Setup()

  WriteLog(("Starting setup ..."))

  ' setup modules
  GetSettings() ' read all settings from database
  RestoreGlobalVars() ' restore globalvars from database

  Setup_Astro() ' init time and location related stuff
  Setup_Webserver() ' built in HTTP server (very minimal)
  Setup_Email() ' e-mail SMTP client
  Setup_Sound() ' built in sound player
  Setup_VoiceText() ' text2speech support
  Setup_RRDTool() ' RRDTool graphing framework
  Setup_XMLRPC() ' XML-RPC server
  Setup_Heyu() ' Heyu X10 command interface
  Setup_RFXComRX() ' RFXCom receiver
  Setup_RFXComTX() ' RFXCom transmitter
  Setup_CTX35() ' Xanura CTX35 X10 interface
  Setup_UPS() ' Nut SmartUPS monitoring client
  Setup_SMS() ' SMS modem support
  Setup_GPS() ' uBlox GPS receiver
  Setup_OneWire() ' Midon TEMP08 1-wire interface
  Setup_VISCA() ' Sony VISCA PTZ interface
  Setup_HDDTemp() ' read disk temperatures
  Setup_VideoServer() ' IP9100 videoserver
  Setup_Asterisk() ' Asterisk PABX support
  Setup_Bluetooth() ' Bluetooth Proximity support
  Setup_Weeder() ' Weeder I/O modules support
  Setup_Gmail() ' fetch Gmail RSS feed
  Setup_TVGuide() ' XMLTV guide
  Setup_ServerStats() ' Server Statistics
  Setup_IRMan() ' IRMan Infrared
  Setup_Plugwise() ' Plugwise support
  Setup_FritzBox() ' FritzBox support
  Setup_BwiredMap() ' Bwired support
  Setup_Twitter() ' Twitter support
  Setup_DSC() ' DSC security interface support
  Setup_EIB() ' KNX/EIB support
  Setup_Domotica() ' Domotica modules support
  Setup_Digitemp() ' Digitemp support
  Setup_ZWave() ' Z-Wave support
  Setup_Oww() ' One-Wire Weather support
  Setup_LIRC() ' LIRC support
  Setup_Pachube() ' Pachube support
  Setup_JeeLabs() ' JeeLabs support
  Setup_Ping() ' Ping support
  Setup_PLCBUS() ' PLCBUS support
  Setup_TemperaturNu() ' TemperaturNu support
  Setup_SqueezeServer() ' SqueezeServer support
  Setup_LEDMatrix() ' LED Matrix message support
  Setup_WeatherBug() ' WeatherBug support
  Setup_EZcontrol() ' EZcontrol support
  Setup_CurrentCost() ' Current Cost support
  Setup_Denon() ' Denon support
  Setup_IRTrans() ' IRTrans support
  Setup_Onkyo() ' Onkyo/Integra support
  Setup_PwrCtrl() ' Anel PwrCtrl support
  WriteLog(("Done with setup ..."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open logfiles
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Setup_Logfiles()

  ' close open files first (in case of new month)
  TRY CLOSE #hMainLogFile
  TRY CLOSE #hSpeakLogFile
  TRY CLOSE #hDebugLogFile

  sMainLogFile AS String = "server-main-" & Format(Now, "yyyy-mm") & ".log"
  sSpeakLogFile AS String = "server-speak-" & Format(Now, "yyyy-mm") & ".log"
  sDebugLogFile AS String = "server-debug-" & Format(Now, "yyyy-mm") & ".log"

  ' open the file in append mode and write to it
  OPEN sBaseDir &/ "logs" &/ sMainLogFile FOR APPEND AS #hMainLogFile
  OPEN sBaseDir &/ "logs" &/ sSpeakLogFile FOR APPEND AS #hSpeakLogFile
  OPEN sBaseDir &/ "logs" &/ sDebugLogFile FOR APPEND AS #hDebugLogFile

CATCH
  WriteLog(("ERROR: While opening logfiles: ") & Error.Text & (" at ") & Error.Where)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reload main settings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Main()

  ' not much todo now
  GetSettings()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' location info, and calc. sunset/sunrise and moonphase
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Astro()

  WriteLog(("Latitude: ") & iAstroLatitude & (" Longitude: ") & iAstroLongitude & (" Timezone: ") & iAstroTimezone)
  ' the rest is done in SetGlobalVars()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reload astro settings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Astro()

  GetSettings()
  Setup_Astro()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start webserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Webserver()

  IF bWebserverEnabled THEN
    IF bWebserverDebug THEN WriteLog(("Webserver enabled."))

      ' create a new WebServer class instance
      hWebserver = NEW CWebServer

    ' create a new WebServer class instance
    hWebserver = NEW CWebServer

    ' set the properties
    hWebserver.DocRoot = sWebserverDocRoot
    hWebserver.HTTPPort = iWebserverHTTPPort
    hWebserver.WebServerDebug = bWebserverDebug

    ' start webserver
    IF hWebserver.Connect() THEN
      WriteLog(("Webserver active on Port ") & iWebserverHTTPPort, bMainDebug)
    ELSE
      WriteLog(("ERROR: Webserver FAILED to start on Port ") & iWebserverHTTPPort)
    END IF
  ELSE
    WriteLog(("Webserver disabled."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart webserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Webserver()

  IF hWebserver THEN
    hWebserver.Disconnect
    hWebserver = NULL
  END IF
  Setup_Webserver()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start xmlrpc
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_XMLRPC()

  IF bXMLRPCEnabled THEN
    IF bXMLRPCDebug THEN WriteLog(("XML-RPC server enabled."))

    ' create a new xmlrpc class instance
    hXMLRPC = NEW CXMLRPC

    ' set the properties
    hXMLRPC.MaxConn = iXMLRPCMaxconn
    hXMLRPC.HTTPPort = iXMLRPCHTTPPort
    hXMLRPC.XMLRPCDebug = bXMLRPCDebug

    ' start xmlrpc server
    IF hXMLRPC.Connect() THEN
      WriteLog(("XML-RPC server listening on Port ") & iXMLRPCHTTPPort, bMainDebug)
    ELSE
      WriteLog(("ERROR: XML-RPC server FAILED to start on Port ") & iXMLRPCHTTPPort)
    END IF
    IF bBroadcastUDPEnabled THEN
      WriteLog(("UDP Broadcasts are enabled on Port ") & Str(iXMLRPCHTTPPort + 10000))
    ELSE
      WriteLog(("UDP Broadcasts are disabled."))
    END IF
  ELSE
    WriteLog(("XML-RPC server disabled."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart xmlrpc server after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_XMLRPC()

  IF hXMLRPC THEN
    hXMLRPC.Disconnect
    hXMLRPC = NULL
  END IF
  Setup_XMLRPC()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if e-mail client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Email()

  IF bEmailEnabled THEN
    WriteLog(("e-mail client enabled."), bMainDebug)
  ELSE
    WriteLog(("e-mail client disabled."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart e-mail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Email()

  ' not much todo now
  Setup_Email()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Gmail Rss client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Gmail()

  IF bGmailEnabled THEN
    WriteLog(("Gmail RSS feed support enabled."), bMainDebug)
    Mail.GmailRun()
  ELSE
    WriteLog(("Gmail RSS feed support disabled."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Gmail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Gmail()

  ' not much todo now
  Setup_Gmail()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup sound related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Sound()

  IF bSoundEnabled THEN
    WriteLog(("Sound support enabled."))
    Sounds.LoadSounds()
  ELSE
    WriteLog(("Sound support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sound after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Sound()

  ' not much todo now
  Setup_Sound()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup bwired related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_BwiredMap()

  IF bBwiredMapEnabled THEN
    WriteLog(("Bwired XML upload enabled."))
    ' start timer
    Bwired.Run()
  ELSE
    WriteLog(("Bwired XML upload disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart bwired after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_BwiredMap()

  TRY Bwired.tBwired.Stop
  ' not much todo now
  Setup_BwiredMap()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup voicetext related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_VoiceText()

  IF bVoiceTextEnabled THEN
    WriteLog(("VoiceText support enabled."))
  ELSE
    WriteLog(("VoiceText support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart voicetext after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_VoiceText()

  ' not much todo now
  Setup_VoiceText()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize heyu if needed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Heyu()

  DIM sTemp AS String

  IF bHeyuEnabled THEN
    WriteLog(("Heyu X10 interface enabled."))
    IF ProgramExist(sHeyuCommand) THEN
      EXEC [sHeyuCommand, "version"] TO sTemp
      WriteLog(("Found executable Heyu ") & sTemp)
    ELSE
      WriteLog(("ERROR: Heyu command '") & sHeyuCommand & ("' not found, did you install it?"))
      bHeyuEnabled = FALSE
      WriteLog(("Heyu X10 interface disabled."))
    END IF
  ELSE
    WriteLog(("Heyu X10 support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart heyu after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Heyu()

  ' not much todo now
  TRY Heyu.Monitor_Stop
  Setup_Heyu()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create dummy class to send simulated packets to parser
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Setup_DummyRFXCom()

  hRFXComRX = NEW CRFXComRX
  ' set the properties
  WITH hRFXComRX
    .TCPHost = sRFXComRXTCPHost
    .TCPPort = iRFXComRXTCPPort
    .Interface = sRFXComRXType
    .Baud = sRFXComRXBaudrate
    .SerPort = sRFXComRXSerialPort
    .RFXComDebug = bRFXComRXDebug
  END WITH

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_RFXComRX()

  IF bRFXComRXEnabled THEN
    WriteLog(("RFXCom receiver support enabled."))
    ' create a new RFXCom class instance
    hRFXComRX = NEW CRFXComRX
    ' set the properties
    WITH hRFXComRX
      .TCPHost = sRFXComRXTCPHost
      .TCPPort = iRFXComRXTCPPort
      .Interface = sRFXComRXType
      .Baud = sRFXComRXBaudrate
      .SerPort = sRFXComRXSerialPort
      .RFXComDebug = bRFXComRXDebug
      .RelayPort = iRFXComRXRelayPort
    END WITH
    IF InStr(sRFXComRXType, "tcp") THEN
      ' connect to the rfxcom host:port
      IF hRFXComRX.ConnectTCP() THEN
        WriteLog(("RFXCom receiver TCP interface connecting to ") & sRFXComRXTCPHost & ":" & iRFXComRXTCPPort)
      ELSE
        WriteLog(("ERROR: RFXCom receiver TCP interface FAILED to connect to ") & sRFXComRXTCPHost & ":" & iRFXComRXTCPPort)
        hRFXComRX = NULL
      END IF
    ELSE
      ' connect to the rfxcom serial interface
      IF hRFXComRX.ConnectSerial() THEN
        WriteLog(("RFXCom receiver serial interface connected to Port ") & sRFXComRXSerialPort)
        hRFXComRX.ProtocolSetup("MODEVAR")
      ELSE
        WriteLog(("ERROR: RFXCom receiver serial interface FAILED to connect to Port ") & sRFXComRXSerialPort)
        hRFXComRX = NULL
      END IF
    END IF
    IF hRFXComRX AND IF bRFXComRXRelayEnabled THEN
      IF hRFXComRX.StartRelay() THEN
        WriteLog(("RFXCom receiver Relay listening for client on port ") & iRFXComRXRelayPort)
      ELSE
        WriteLog(("ERROR: RFXCom receiver Relay FAILED to listen on port ") & iRFXComRXRelayPort)
      END IF
    ELSE
      WriteLog(("RFXCom receiver Relay disabled."))
    END IF
  ELSE
    WriteLog(("RFXCom receiver support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_RFXComRX()

  IF hRFXComRX THEN
    hRFXComRX.Disconnect
    hRFXComRX = NULL
  END IF
  Setup_RFXComRX()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom transmitter tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_RFXComTX()

  IF bRFXComTXEnabled THEN
    WriteLog(("RFXCom transmitter support enabled."))
    ' create a new RFXCom class instance
    hRFXComTX = NEW CRFXComTX
    ' set the properties
    WITH hRFXComTX
      .TCPHost = sRFXComTXTCPHost
      .TCPPort = iRFXComTXTCPPort
      .Interface = sRFXComTXType
      .Baud = sRFXComTXBaudrate
      .SerPort = sRFXComTXSerialPort
      .RFXComDebug = bRFXComTXDebug
      .RelayPort = iRFXComTXRelayPort
      .Handshake = bRFXComTXHandshake
      .DisableX10 = bRFXComTXDisableX10
      .EnableARC = bRFXComTXEnableARC
      .EnableHarrison = bRFXComTXEnableHarrison
      .EnableKoppla = bRFXComTXEnableKoppla
      .ACAddress1 = sRFXComTXACAddress1
      .ACAddress2 = sRFXComTXACAddress2
    END WITH
    IF InStr(sRFXComTXType, "tcp") THEN
      ' connect to the rfxcom host:port
      IF hRFXComTX.ConnectTCP() THEN
        WriteLog(("RFXCom transmitter TCP interface connecting to ") & sRFXComTXTCPHost & ":" & iRFXComTXTCPPort)
      ELSE
        WriteLog(("ERROR: RFXCom transmitter TCP interface FAILED to connect to ") & sRFXComTXTCPHost & ":" & iRFXComTXTCPPort)
        hRFXComTX = NULL
      END IF
    ELSE
      ' connect to the rfxcom serial interface
      IF hRFXComTX.ConnectSerial() THEN
        WriteLog(("RFXCom transmitter serial interface connected to Port ") & sRFXComTXSerialPort)
      ELSE
        WriteLog(("ERROR: RFXCom transmitter serial interface FAILED to connect to Port ") & sRFXComTXSerialPort)
        hRFXComTX = NULL
      END IF
    END IF
    IF hRFXComTX AND IF bRFXComTXRelayEnabled THEN
      IF hRFXComTX.StartRelay() THEN
        WriteLog(("RFXCom transmitter Relay listening for client on port ") & iRFXComTXRelayPort)
      ELSE
        WriteLog(("ERROR: RFXCom transmitter Relay FAILED to listen on port ") & iRFXComTXRelayPort)
      END IF
    ELSE
      WriteLog(("RFXCom transmitter Relay disabled."))
    END IF
  ELSE
    hRFXComTX = NULL
    WriteLog(("RFXCom transmitter support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom transmitter after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_RFXComTX()

  IF hRFXComTX THEN
    hRFXComTX.Disconnect
    hRFXComTX = NULL
  END IF
  Setup_RFXComTX()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open ctx35 serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_CTX35()

  IF bCTX35Enabled THEN 
    WriteLog(("Xanura CTX35 X10 support enabled."))
    ' create a new CTX35 class instance
    hCTX35 = NEW CCTX35
    ' set the properties
    WITH hCTX35
      .Port = sCTX35SerialPort
      .Baud = sCTX35Baudrate
      .PollTime = iCTX35PollTime
      .CTX35Debug = bCTX35Debug
    END WITH
    ' connect to the serial port
    IF hCTX35.Connect() THEN
      WriteLog(("Xanura CTX35 interface connected to Port ") & sCTX35SerialPort)
      hCTX35.Run()
    ELSE
      WriteLog(("ERROR: Xanura CTX35 interface FAILED to connect to Port ") & sCTX35SerialPort)
      hCTX35 = NULL
    END IF
  ELSE
    WriteLog(("Xanura CTX35 X10 support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ctx35 after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_CTX35()

  IF hCTX35 THEN
    TRY hCTX35.tCTX35.Stop
    hCTX35.Disconnect
    hCTX35 = NULL
  END IF
  Setup_CTX35()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open plcbus serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_PLCBUS()

  IF bPLCBUSEnabled THEN
    WriteLog(("PLCBUS support enabled."))
    ' create a new PLCBUS class instance
    hPLCBUS = NEW CPLCBUS
    ' set the properties
    WITH hPLCBUS
      .Port = sPLCBUSSerialPort
      .Baud = sPLCBUSBaudrate
      .PollTime = iPLCBUSPollTime
      .UserCode = sPLCBUSUserCode
      .ThreePhase = bPLCBUSThreePhase
      .PLCBUSDebug = bPLCBUSDebug
    END WITH
    ' connect to the serial port
    IF hPLCBUS.Connect() THEN
      WriteLog(("PLCBUS interface connected to Port ") & sPLCBUSSerialPort)
      hPLCBUS.Run()
    ELSE
      WriteLog(("ERROR: PLCBUS interface FAILED to connect to Port ") & sPLCBUSSerialPort)
      hPLCBUS = NULL
    END IF
  ELSE
    WriteLog(("PLCBUS support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart plcbus after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_PLCBUS()

  IF hPLCBUS THEN
    TRY hPLCBUS.tPLCBUS.Stop
    TRY hPLCBUS.tPLCBUSLed.Stop
    hPLCBUS.Disconnect
    hPLCBUS = NULL
  END IF
  Setup_PLCBUS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with ups tcp host and port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_UPS()

  IF bUPSEnabled THEN
    WriteLog(("UPS TCP support enabled."))
    ' create a new UPS class instance
    hUPS = NEW CUPS
    ' set the properties
    WITH hUPS
      .Host = sUPSTCPHost
      .Port = iUPSTCPPort
      .PollTime = iUPSPollTime
      .UPSDebug = bUPSDebug
    END WITH
    ' connect to the ups host:port
    IF hUPS.Connect() THEN
      WriteLog(("UPS TCP interface connecting to ") & sUPSTCPHost & ":" & iUPSTCPPort)
    ELSE
      WriteLog(("ERROR: UPS TCP interface FAILED to connect to ") & sUPSTCPHost & ":" & iUPSTCPPort)
    END IF
  ELSE
    TRY hUPS.tUPS.Stop
    WriteLog(("UPS TCP support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ups after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_UPS()

  IF hUPS THEN
    TRY hUPS.tUPS.Stop
    hUPS.Disconnect
    hUPS = NULL
  END IF
  Setup_UPS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize sms modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_SMS()

  IF bSMSEnabled THEN
    WriteLog(("SMS modem support enabled."))

    ' create a new SMS class instance
    hSMS = NEW CSMS

    ' set the properties
    WITH hSMS
      .Port = sSMSSerialPort
      .Baud = sSMSBaudrate
      .PIN = sSMSPIN
      .ServiceCentre = sSMSServiceCentre
      .Contact = sSMSContact
      .SMSDebug = bSMSDebug
    END WITH
    ' connect to the serial port
    IF hSMS.Connect() THEN
      WriteLog(("SMS modem interface connected to Port ") & sSMSSerialPort)
      IF NOT hSMS.InitModem() THEN
        WriteLog(("ERROR: SMS modem interface FAILED to initialize."))
      END IF
    ELSE
      WriteLog(("ERROR: SMS modem interface FAILED to connect to Port ") & sSMSSerialPort)
    END IF
  ELSE
    WriteLog(("SMS modem support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sms after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_SMS()

  IF hSMS THEN
    hSMS.Disconnect
    hSMS = NULL
  END IF
  Setup_SMS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if network device is reachable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Ping()

  IF bPingEnabled THEN
    WriteLog(("Network Ping support enabled."))
    ' start timer
    Ping.Run()
  ELSE
    TRY Ping.tPing.Stop
    WriteLog(("Network Ping support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ping after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Ping()

  TRY Ping.tPing.Stop
  ' not much todo now
  Setup_Ping()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if bluetooth devices are around
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Bluetooth()

  IF bBluetoothEnabled THEN
    IF ProgramExist("hcitool") THEN
      WriteLog(("Bluetooth Proximity support enabled."))
      ' start timer
      Bluetooth.Run()
    ELSE
      WriteLog(("ERROR: Bluetooth command 'hcitool' not found, did you install it?"))
      bBluetoothEnabled = FALSE
      WriteLog(("Bluetooth Proximity support disabled."))
    END IF
  ELSE
    TRY Bluetooth.tBluetooth.Stop
    WriteLog(("Bluetooth Proximity support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart bluetooth after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Bluetooth()

  ' not much todo now
   Setup_Bluetooth()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize gps receiver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_GPS()

  IF bGPSEnabled THEN
    WriteLog(("GPS receiver support enabled."))
    ' create a new GPS class instance
    hGPS = NEW CGPS
    ' set the properties
    WITH hGPS
      .Port = sGPSSerialPort
      .Baud = sGPSBaudrate
      .GPSDebug = bGPSDebug
    END WITH

    ' connect to the serial port
    IF hGPS.Connect() THEN
      WriteLog(("GPS receiver connected to Port ") & sGPSSerialPort)
    ELSE
      WriteLog(("ERROR: GPS receiver FAILED to connect to Port ") & sGPSSerialPort)
    END IF
  ELSE
    WriteLog(("GPS receiver support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart gps after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_GPS()

  IF hGPS THEN
    hGPS.Disconnect
    hGPS = NULL
  END IF
  Setup_GPS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize weeder i/o
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Weeder()

  IF bWeederEnabled THEN
    WriteLog(("Weeder Module support enabled."))
    ' create a new Weeder class instance
    hWeeder = NEW CWeeder
    ' set the properties
    WITH hWeeder
      .Port = sWeederSerialPort
      .WeederDebug = bWeederDebug
    END WITH

    ' connect to the serial port
    IF hWeeder.Connect() THEN
      WriteLog(("Weeder Module(s) connected to Port ") & sWeederSerialPort)
    ELSE
      WriteLog(("ERROR: Weeder Module FAILED to connect to Port ") & sWeederSerialPort)
      hWeeder = NULL
    END IF
  ELSE
    WriteLog(("Weeder Module support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart weeder after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Weeder()

  IF hWeeder THEN
    hWeeder.Disconnect
    hWeeder = NULL
  END IF
  Setup_Weeder()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open 1-wire serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_OneWire()

  IF bOneWireEnabled THEN
    WriteLog(("Midon 1-Wire support enabled."))
    ' create a new OneWire class instance
    hOneWire = NEW COneWire
    ' set the properties
    WITH hOneWire
      .Port = sOneWireSerialPort
      .Baud = sOneWireBaudrate
      .OneWireDebug = bOneWireDebug
    END WITH
    ' connect to the serial port
    IF hOneWire.Connect() THEN
      WriteLog(("Midon 1-Wire interface connected to Port ") & sOneWireSerialPort)
    ELSE
      WriteLog(("ERROR: Midon 1-Wire interface FAILED to connect to Port ") & sOneWireSerialPort)
    END IF
  ELSE
    WriteLog(("Midon 1-Wire support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart onewire after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_OneWire()

  IF hOneWire THEN
    hOneWire.Disconnect
    hOneWire = NULL
  END IF
  Setup_OneWire()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open visca ptz control serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_VISCA()

  IF bVISCAEnabled THEN
    WriteLog(("Sony VISCA support enabled."))
    ' create a new VISCA class instance
    hVISCA = NEW CVISCA
    ' set the properties
    hVISCA.Port = sVISCASerialPort
    hVISCA.VISCADebug = bVISCADebug
    ' connect to the serial port
    IF hVISCA.Connect() THEN
      WriteLog(("Sony VISCA interface connected to Port ") & sVISCASerialPort)
    ELSE
      WriteLog(("ERROR: Sony VISCA interface FAILED to connect to Port ") & sVISCASerialPort)
    END IF
  ELSE
    WriteLog(("Sony VISCA support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart visca after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_VISCA()

  IF hVISCA THEN
    hVISCA.Disconnect
    hVISCA = NULL
  END IF
  Setup_VISCA()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if HDD temps are below threshold
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_HDDTemp()

  IF bHDDTempEnabled THEN
    WriteLog(("HDDTemp support enabled."))
    ' start timer
    HDDTemp.Run()
  ELSE
    TRY HDDTemp.tHDDTemp.Stop
    WriteLog(("HDDTemp support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart hddtemp after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_HDDTemp()

  Setup_HDDTemp()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' capture video images from videoserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_VideoServer()

  IF bVideoServerEnabled THEN
    WriteLog(("IP9100 VideoServer support enabled."))
  ELSE
    WriteLog(("IP9100 VideoServer support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart videoserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_VideoServer()

  ' not much todo now
   Setup_VideoServer()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if rrdtool support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_RRDTool()

  IF bRRDToolEnabled THEN
    IF ProgramExist("rrdtool") THEN
      RRDTool.Run()
      WriteLog(("RRDTool support enabled."))
    ELSE
      WriteLog(("ERROR: RRDTool command 'rrdtool' not found, did you install it?"))
      bRRDToolEnabled = FALSE
      WriteLog(("RRDTool support disabled."))
    END IF
  ELSE
    TRY RRDTool.tRRDTool.Stop
    WriteLog(("RRDTool support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rrdtool after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_RRDTool()

  ' not much todo now
  Setup_RRDTool()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if asterisk support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Asterisk()

  IF bAsteriskEnabled THEN
    WriteLog(("Asterisk API support enabled."))

    ' create a new Asterisk class instance
    hAsterisk = NEW CAsterisk

    ' set the properties
    WITH hAsterisk
      .TCPHost = sAsteriskTCPHost
      .TCPPort = iAsteriskTCPPort
      .User = sAsteriskUser
      .Password = sAsteriskPassword
      .Polltime = iAsteriskPollTime
      .AsteriskDebug = bAsteriskDebug
    END WITH

    ' connect to the asterisk host:port
    IF hAsterisk.Connect() THEN
      WriteLog(("Asterisk API interface connecting to ") & sAsteriskTCPHost & ":" & iAsteriskTCPPort)
    ELSE
      WriteLog(("ERROR: Asterisk API interface FAILED to connect to ") & sAsteriskTCPHost & ":" & iAsteriskTCPPort)
    END IF
  ELSE
    WriteLog(("Asterisk API support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart asterisk support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Asterisk()

  IF hAsterisk THEN
    hAsterisk.Disconnect
    hAsterisk = NULL
  END IF
  Setup_Asterisk()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if tvguide support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_TVGuide()

  IF bTVGuideEnabled THEN
    WriteLog(("TV Guide support enabled."))
  ELSE
    WriteLog(("TV Guide support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart tvguide after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_TVGuide()

  Setup_TVGuide()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if server statistics is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_ServerStats()

  IF bServerStatsEnabled THEN
    ServerStats.Run()
    WriteLog(("Server Statistics enabled."))
  ELSE
    TRY ServerStats.tServerStats.Stop
    WriteLog(("Server Statistics disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart server statistics after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_ServerStats()

  Setup_ServerStats()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open IRMan serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_IRMan()

  IF bIRManEnabled THEN
    WriteLog(("IRMan IR support enabled."))
    ' create a new IRMan class instance
    hIRMan = NEW CIRMan
    ' set the properties
    WITH hIRMan
      .Port = sIRManSerialPort
      .IRManDebug = bIRManDebug
    END WITH
    ' connect to the serial port
    IF hIRMan.Connect() THEN
      WriteLog(("IRMan IR interface connected to Port ") & sIRManSerialPort)
      ' wakeup device
      hIRMan.Run()
    ELSE
      WriteLog(("ERROR: IRMan IR interface FAILED to connect to Port ") & sIRManSerialPort)
    END IF
  ELSE
    WriteLog(("IRMan IR support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart irman after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_IRMan()

  IF hIRMan THEN
    hIRMan.Disconnect
    hIRMan = NULL
  END IF
  Setup_IRMan()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open plugwise serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Plugwise()

  IF bPlugwiseEnabled THEN
    WriteLog(("Plugwise support enabled."))
    ' create a new Plugwise class instance
    hPlugwise = NEW CPlugwise
    ' set the properties
    WITH hPlugwise
      .Port = sPlugwiseSerialPort
      .Polltime = iPlugwisePolltime
      .PlugwiseDebug = bPlugwiseDebug
      .Firmware = iPlugwiseFirmware
    END WITH
    ' connect to the serial port
    IF hPlugwise.Connect() THEN
      WriteLog(("Plugwise interface connected to Port ") & sPlugwiseSerialPort)
      WriteLog(("Plugwise is configured for firmware version ") & iPlugwiseFirmware)
      hPlugwise.Run()
    ELSE
      WriteLog(("ERROR: Plugwise interface FAILED to connect to Port ") & sPlugwiseSerialPort)
      hPlugwise = NULL
    END IF
  ELSE
    WriteLog(("Plugwise support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart plugwise after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Plugwise()

  IF hPlugwise THEN
    TRY hPlugwise.tPlugwise.Stop
    hPlugwise.Disconnect
    hPlugwise = NULL
  END IF
  Setup_Plugwise()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if fritzbox support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_FritzBox()

  IF bFritzBoxEnabled THEN
    WriteLog(("Fritz!Box API support enabled."))

    ' create a new FritzBox class instance
    hFritzBox = NEW CFritzBox

    ' set the properties
    WITH hFritzBox
      .TCPHost = sFritzBoxTCPHost
      .FritzBoxDebug = bFritzBoxDebug
    END WITH

    ' connect to the fritzbox host:port
    IF hFritzBox.Connect() THEN
      WriteLog(("Fritz!Box API interface connecting to ") & sFritzBoxTCPHost & ":1012")
    ELSE
      WriteLog(("ERROR: Fritz!Box API interface FAILED to connect to ") & sFritzBoxTCPHost & ":1012")
    END IF
  ELSE
    WriteLog(("Fritz!Box API support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart fritzbox support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_FritzBox()

  IF hFritzBox THEN
    hFritzBox.Disconnect
    hFritzBox = NULL
  END IF
  Setup_FritzBox()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Twitter support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Twitter()

  IF bTwitterEnabled THEN
    WriteLog(("Twitter support enabled."))
  ELSE
    WriteLog(("Twitter support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Twitter settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Twitter()

  ' not much todo now
  Setup_Twitter()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open DSC serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_DSC()

  IF bDSCEnabled THEN
    WriteLog(("DSC Security support enabled."))
    ' create a new DSC class instance
    hDSC = NEW CDSC
    ' set the properties
    WITH hDSC
      .Port = sDSCSerialPort
      .Baud = sDSCBaudrate
      .DSCDebug = bDSCDebug
    END WITH
    ' connect to the serial port
    IF hDSC.Connect() THEN
      WriteLog(("DSC Security interface connected to Port ") & sDSCSerialPort)
    ELSE
      WriteLog(("ERROR: DSC Security interface FAILED to connect to Port ") & sDSCSerialPort)
    END IF
  ELSE
    WriteLog(("DSC Security support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart DSC after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_DSC()

  IF hDSC THEN
    hDSC.Disconnect
    hDSC = NULL
  END IF
  Setup_DSC()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with eibd via tcp
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_EIB()

  IF bEIBEnabled THEN
    WriteLog(("KNX/EIB TCP support enabled."))
    ' create a new EIB class instance
    hEIB = NEW CEIB
    ' set the properties
    WITH hEIB
      .TCPHost = sEIBTCPHost
      .TCPPort = iEIBTCPPort
      .EIBDebug = bEIBDebug
    END WITH
    ' connect to eibd host:port
    IF hEIB.Connect() THEN
      WriteLog(("KNX/EIB TCP interface connecting to ") & sEIBTCPHost & ":" & iEIBTCPPort)
    ELSE
      WriteLog(("ERROR: KNX/EIB TCP interface FAILED to connect to ") & sEIBTCPHost & ":" & iEIBTCPPort)
    END IF
  ELSE
    WriteLog(("KNX/EIB TCP support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart eib after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_EIB()

  IF hEIB THEN
    hEIB.Disconnect
    hEIB = NULL
  END IF
  Setup_EIB()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open Domotica serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Domotica()

  IF bDomoticaEnabled THEN
    WriteLog(("Domotica support enabled."))
    ' create a new Domotica class instance
    hDomotica = NEW CDomotica
    ' set the properties
    WITH hDomotica
      .Port = sDomoticaSerialPort
      .DomoticaDebug = bDomoticaDebug
    END WITH
    ' connect to the serial port
    IF hDomotica.Connect() THEN
      WriteLog(("Domotica interface connected to Port ") & sDomoticaSerialPort)
    ELSE
      WriteLog(("ERROR: Domotica interface FAILED to connect to Port ") & sDomoticaSerialPort)
    END IF
  ELSE
    WriteLog(("Domotica support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Domotica after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Domotica()

  IF hDomotica THEN
    hDomotica.Disconnect
    hDomotica = NULL
  END IF
  Setup_Domotica()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read sensors via digitemp
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Digitemp()

  DIM bNotOk AS Boolean

  IF bDigitempEnabled THEN
    IF NOT ProgramExist(sDigitempCommand) THEN
      bNotOk = TRUE
      WriteLog(("ERROR: Digitemp command ") & sDigitempCommand & (" not found, did you install it?"))
    END IF
    IF NOT Exist(sDigitempConfig) THEN
      bNotOk = TRUE
      WriteLog(("ERROR: Digitemp config file ") & sDigitempConfig & (" not found, did you initialize it?"))
    END IF
    IF bNotOk THEN
      bDigitempEnabled = FALSE
      WriteLog(("Digitemp support disabled."))
    ELSE
      WriteLog(("Digitemp support enabled."))
      ' start timer
      Digitemp.Run()
    END IF
  ELSE
    TRY Digitemp.tDigitemp.Stop
    WriteLog(("Digitemp support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart digitemp after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Digitemp()

  ' not much todo now
   Setup_Digitemp()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open Z-Wave serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_ZWave()

  IF bZWaveEnabled THEN
    WriteLog(("Z-Wave support enabled."))
    ' create a new Z-Wave class instance
    hZWave = NEW CZWave
    ' set the properties
    WITH hZWave
      .Port = sZWaveSerialPort
      .Baud = sZWaveBaudrate
      .ZWaveDebug = bZWaveDebug
      .ReloadNodes = bZWaveReloadNodes
    END WITH
    ' connect to the serial port
    IF hZWave.Connect() THEN
      WriteLog(("Z-Wave interface connected to Port ") & sZWaveSerialPort)
      hZWave.InitZWave()
    ELSE
      WriteLog(("ERROR: Z-Wave interface FAILED to connect to Port ") & sZWaveSerialPort)
      hZWave = NULL
    END IF
  ELSE
    WriteLog(("Z-Wave support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Z-Wave after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_ZWave()

  IF hZWave THEN
    TRY hZWave.tZWave.Stop
    hZWave.Disconnect
    hZWave = NULL
  END IF
  Setup_ZWave()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if One-Wire Weather support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Oww()

  IF bOwwEnabled THEN
    WriteLog(("One-Wire Weather support enabled."))
    ' create a new One-Wire Weather class instance
    IF sOwwServerType = "Henriksen WServer UDP" THEN
      hOwwUDP = NEW COww
      ' set the properties
      WITH hOwwUDP
        .TCPHost = sOwwTCPHost
        .TCPPort = iOwwTCPPort
        .ServerType = sOwwServerType
        .OwwDebug = bOwwDebug
      END WITH
      ' connect to the One-Wire Weather host:port
      IF hOwwUDP.Connect() THEN
        WriteLog(("One-Wire Weather UDP interface listening on port: ") & iOwwTCPPort)
      ELSE
        WriteLog(("ERROR: One-Wire Weather UDP interface FAILED to connect to port: ") & iOwwTCPPort)
      END IF
    ELSE
      hOwwTCP = NEW COww
      ' set the properties
      WITH hOwwTCP
        .TCPHost = sOwwTCPHost
        .TCPPort = iOwwTCPPort
        .ServerType = sOwwServerType
        .OwwDebug = bOwwDebug
      END WITH
      ' connect to the One-Wire Weather host:port
      IF hOwwTCP.Connect() THEN
        WriteLog(("One-Wire Weather TCP interface connecting to ") & sOwwTCPHost & ":" & iOwwTCPPort)
      ELSE
        WriteLog(("ERROR: One-Wire Weather TCP interface FAILED to connect to ") & sOwwTCPHost & ":" & iOwwTCPPort)
      END IF
    END IF
  ELSE
    WriteLog(("One-Wire Weather support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart One-Wire Weather support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Oww()

  IF hOwwUDP THEN
    hOwwUDP.Disconnect
    hOwwUDP = NULL
  END IF
  IF hOwwTCP THEN
    hOwwTCP.Disconnect
    hOwwTCP = NULL
  END IF
  Setup_Oww()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if LIRC support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_LIRC()

  IF bLIRCEnabled THEN
    WriteLog(("LIRC support enabled."))
    ' create a new LIRC class instance
    hLIRC = NEW CLIRC
    ' set the properties
    WITH hLIRC
      .TCPHost = sLIRCTCPHost
      .TCPPort = iLIRCTCPPort
      .LIRCDebug = bLIRCDebug
    END WITH
    ' connect to the LIRC host:port
    IF hLIRC.Connect() THEN
      WriteLog(("LIRC interface connecting to ") & sLIRCTCPHost & ":" & iLIRCTCPPort)
    ELSE
      WriteLog(("ERROR: LIRC interface FAILED to connect to ") & sLIRCTCPHost & ":" & iLIRCTCPPort)
    END IF
  ELSE
    WriteLog(("LIRC support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart LIRC support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_LIRC()

  IF hLIRC THEN
    hLIRC.Disconnect
    hLIRC = NULL
  END IF
  Setup_LIRC()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Pachube support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Pachube()

  IF bPachubeEnabled THEN
    WriteLog(("Pachube support with ") & IIf(Main.iPachubePushTime, "Manual", "Automatic") & (" feeds enabled."))
    IF Main.iPachubePushTime THEN
      Pachube.Run()
    END IF
  ELSE
    TRY Pachube.tPachube.Stop
    WriteLog(("Pachube support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart pachube after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Pachube()

  Setup_Pachube()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open jeelink serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_JeeLabs()

  IF bJeeLabsEnabled THEN
    WriteLog(("JeeLabs JeeLink support enabled."))
    ' create a new JeeLabs class instance
    hJeeLabs = NEW CJeeLabs
    ' set the properties
    WITH hJeeLabs
      .Port = sJeeLabsSerialPort
      .Baud = sJeeLabsBaudrate
      .JeeLabsDebug = bJeeLabsDebug
    END WITH
    ' connect to the serial port
    IF hJeeLabs.Connect() THEN
      WriteLog(("JeeLabs JeeLink interface connected to Port ") & sJeeLabsSerialPort)
    ELSE
      WriteLog(("ERROR: JeeLabs JeeLink interface FAILED to connect to Port ") & sJeeLabsSerialPort)
      hJeeLabs = NULL
    END IF
  ELSE
    WriteLog(("JeeLabs JeeLink support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart jeelabs after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_JeeLabs()

  IF hJeeLabs THEN
    hJeeLabs.Disconnect
    hJeeLabs = NULL
  END IF
  Setup_JeeLabs()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if TemperaturNu support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_TemperaturNu()

  IF bTemperaturNuEnabled THEN
    WriteLog(("TemperaturNu support enabled."))
    ' start timer
    IF Main.iTemperaturNuPushTime THEN TemperaturNu.Run()
  ELSE
    TRY TemperaturNu.tTemperaturNu.Stop
    WriteLog(("TemperaturNu support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart TemperaturNu after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_TemperaturNu()

  Setup_TemperaturNu()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with squeezeserver via socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_SqueezeServer()

  IF bSqueezeServerEnabled THEN
    WriteLog(("Squeeze Server support enabled."))
    ' create a new SqueezeServer class instance
    hSqueezeServer = NEW CSqueezeServer
    ' set the properties
    WITH hSqueezeServer
      .TCPHost = sSqueezeServerTCPHost
      .TCPPort = iSqueezeServerTCPPort
      .SqueezeServerDebug = bSqueezeServerDebug
    END WITH
    ' connect to squeezeserver host:port
    IF hSqueezeServer.Connect() THEN
      WriteLog(("Squeeze Server TCP interface connecting to ") & sSqueezeServerTCPHost & ":" & iSqueezeServerTCPPort)
    ELSE
      WriteLog(("ERROR: Squeeze Server TCP interface FAILED to connect to ") & sSqueezeServerTCPHost & ":" & iSqueezeServerTCPPort)
    END IF
  ELSE
    WriteLog(("Squeeze Server support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart squeezeserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_SqueezeServer()

  IF hSqueezeServer THEN
    hSqueezeServer.Disconnect
    hSqueezeServer = NULL
  END IF
  Setup_SqueezeServer()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open led matrix serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_LEDMatrix()

  IF bLEDMatrixEnabled THEN
    WriteLog(("LED Matrix support enabled."))
    ' create a new LEDMatrix class instance
    hLEDMatrix = NEW CLEDMatrix
    ' set the properties
    WITH hLEDMatrix
      .Port = sLEDMatrixSerialPort
      .LEDMatrixDebug = bLEDMatrixDebug
      .DisplayID = sLEDMatrixID
      .DisplayColor = iLEDMatrixColor
      .DisplaySpeed = iLEDMatrixSpeed
    END WITH
    ' connect to the serial port
    IF hLEDMatrix.Connect() THEN
      WriteLog(("LED Matrix interface connected to Port ") & sLEDMatrixSerialPort)
      ' show startup message
      hLEDMatrix.Run()
    ELSE
      WriteLog(("ERROR: LED Matrix interface FAILED to connect to Port ") & sLEDMatrixSerialPort)
    END IF
  ELSE
    WriteLog(("LED Matrix support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart led matrix after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_LEDMatrix()

  IF hLEDMatrix THEN
    hLEDMatrix.Disconnect
    hLEDMatrix = NULL
  END IF
  Setup_LEDMatrix()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if weatherbug support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_WeatherBug()

  IF bWeatherBugEnabled THEN
    WriteLog(("WeatherBug support enabled."))
  ELSE
    WriteLog(("WeatherBug support disabled."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart weatherbug after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_WeatherBug()

  ' not much todo now
  Setup_WeatherBug()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with ezcontrol interface via udpsocket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_EZcontrol()

  IF bEZcontrolEnabled THEN
    WriteLog(("EZcontrol support enabled."))
      ' create a new EZcontrol class instance
      hEZcontrol = NEW CEZcontrol
      ' set the properties
      WITH hEZcontrol
        .UDPHost = sEZcontrolUDPHost
        .UDPPort = iEZcontrolUDPPort
        .EZcontrolDebug = bEZcontrolDebug
      END WITH
      ' connect to interface host:port
      IF hEZcontrol.Connect() THEN
        WriteLog(("EZcontrol UDP interface setup for ") & sEZcontrolUDPHost & ":" & iEZcontrolUDPPort & ".")
      ELSE
        WriteLog(("ERROR: EZcontrol UDP interface FAILED to setup for ") & sEZcontrolUDPHost & ":" & iEZcontrolUDPPort & ".")
      END IF
  ELSE
    WriteLog(("EZcontrol support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ezcontrol after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_EZcontrol()

  IF hEZcontrol THEN
    hEZcontrol.Disconnect
    hEZcontrol = NULL
  END IF
  Setup_EZcontrol()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with Current Cost
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_CurrentCost()

  IF bCurrentCostEnabled THEN
    WriteLog(("CurrentCost receiver support enabled."))
      ' create a new CurrentCost class instance
      hCurrentCost = NEW CCurrentCost
      ' set the properties
      WITH hCurrentCost
        .Baud = sCurrentCostBaudrate
        .Port = sCurrentCostSerialPort
        .CurrentCostDebug = bCurrentCostDebug
      END WITH
      ' connect to the currentcost serial interface
      IF hCurrentCost.Connect() THEN
        WriteLog(("CurrentCost receiver serial interface connected to Port ") & sCurrentCostSerialPort)
      ELSE
        WriteLog(("ERROR: CurrentCost receiver serial interface FAILED to connect to Port ") & sCurrentCostSerialPort)
        hCurrentCost = NULL
      END IF
  ELSE
    WriteLog(("CurrentCost receiver support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Current Cost after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_CurrentCost()

  IF hCurrentCost THEN
    hCurrentCost.Disconnect
    hCurrentCost = NULL
  END IF
  Setup_CurrentCost()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with denon receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Denon()

  IF bDenonEnabled THEN
    WriteLog(("Denon receiver support enabled."))
    ' create a new Denon class instance
    hDenon = NEW CDenon
    ' set the properties
    WITH hDenon
      .TCPHost = sDenonTCPHost
      .TCPPort = iDenonTCPPort
      .Interface = sDenonType
      .Baud = sDenonBaudrate
      .SerPort = sDenonSerialPort
      .DenonDebug = bDenonDebug
    END WITH
    IF InStr(sDenonType, "tcp") THEN
      ' connect to the denon host:port
      IF hDenon.ConnectTCP() THEN
        WriteLog(("Denon receiver TCP interface connecting to ") & sDenonTCPHost & ":" & iDenonTCPPort)
      ELSE
        WriteLog(("ERROR: Denon receiver TCP interface FAILED to connect to ") & sDenonTCPHost & ":" & iDenonTCPPort)
        hDenon = NULL
      END IF
    ELSE
      ' connect to the denon serial interface
      IF hDenon.ConnectSerial() THEN
        WriteLog(("Denon receiver serial interface connected to Port ") & sDenonSerialPort)
      ELSE
        WriteLog(("ERROR: Denon receiver serial interface FAILED to connect to Port ") & sDenonSerialPort)
        hDenon = NULL
      END IF
    END IF
  ELSE
    WriteLog(("Denon receiver support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart denon after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Denon()

  IF hDenon THEN
    hDenon.Disconnect
    hDenon = NULL
  END IF
  Setup_Denon()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with irtrans receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_IRTrans()

  IF bIRTransEnabled THEN
    WriteLog(("IRTrans support enabled."))
    ' create a new IRTrans class instance
    hIRTrans = NEW CIRTrans
    ' set the properties
    WITH hIRTrans
      .TCPHost = sIRTransTCPHost
      .TCPPort = iIRTransTCPPort
      .IRTransDebug = bIRTransDebug
    END WITH
    ' connect to the irtrans host:port
    IF hIRTrans.Connect() THEN
      WriteLog(("IRTrans TCP interface connecting to ") & sIRTransTCPHost & ":" & iIRTransTCPPort)
    ELSE
      WriteLog(("ERROR: IRTrans TCP interface FAILED to connect to ") & sIRTransTCPHost & ":" & iIRTransTCPPort)
      hIRTrans = NULL
    END IF
  ELSE
    WriteLog(("IRTrans support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart irtrans after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_IRTrans()

  IF hIRTrans THEN
    hIRTrans.Disconnect
    hIRTrans = NULL
  END IF
  Setup_IRTrans()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with onkyo receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Onkyo()

  IF bOnkyoEnabled THEN
    WriteLog(("Onkyo/Integra receiver support enabled."))
    ' create a new Onkyo class instance
    hOnkyo = NEW COnkyo
    ' set the properties
    WITH hOnkyo
      .TCPHost = sOnkyoTCPHost
      .TCPPort = iOnkyoTCPPort
      .Interface = sOnkyoType
      .Baud = sOnkyoBaudrate
      .SerPort = sOnkyoSerialPort
      .OnkyoDebug = bOnkyoDebug
    END WITH
    IF InStr(sOnkyoType, "tcp") THEN
      ' connect to the onkyo host:port
      IF hOnkyo.ConnectTCP() THEN
        WriteLog(("Onkyo/Integra receiver TCP interface connecting to ") & sOnkyoTCPHost & ":" & iOnkyoTCPPort)
      ELSE
        WriteLog(("ERROR: Onkyo/Integra receiver TCP interface FAILED to connect to ") & sOnkyoTCPHost & ":" & iOnkyoTCPPort)
        hOnkyo = NULL
      END IF
    ELSE
      ' connect to the onkyo serial interface
      IF hOnkyo.ConnectSerial() THEN
        WriteLog(("Onkyo/Integra receiver serial interface connected to Port ") & sOnkyoSerialPort)
      ELSE
        WriteLog(("ERROR: Onkyo/integra receiver serial interface FAILED to connect to Port ") & sOnkyoSerialPort)
        hOnkyo = NULL
      END IF
    END IF
  ELSE
    WriteLog(("Onkyo/Integra receiver support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart onkyo after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_Onkyo()

  IF hOnkyo THEN
    hOnkyo.Disconnect
    hOnkyo = NULL
  END IF
  Setup_Onkyo()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with pwrctrl interface via udpsocket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_PwrCtrl()

  IF bPwrCtrlEnabled THEN
    WriteLog(("PwrCtrl support enabled."))
      ' create a new PwrCtrl class instance
      hPwrCtrl = NEW CPwrCtrl
      ' set the properties
      WITH hPwrCtrl
        .UDPPortRead = iPwrCtrlUDPRead
        .UDPPortSend = iPwrCtrlUDPSend
        .PwrCtrlDebug = bPwrCtrlDebug
        .PwrCtrlUserPw = sPwrCtrlUserPw
      END WITH
      ' connect to interface host:port
      IF hPwrCtrl.Connect() THEN
        WriteLog(("PwrCtrl listening on UDP port ") & iPwrCtrlUDPRead)
        ' get state for all devices
        hPwrCtrl.GetAllState()
      ELSE
        WriteLog(("ERROR: PwrCtrl UDP interface FAILED to setup to listen for Port ") & iPwrCtrlUDPRead)
      END IF
  ELSE
    WriteLog(("PwrCtrl support disabled."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart PwrCtrl after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Restart_PwrCtrl()

  IF hPwrCtrl THEN
    hPwrCtrl.Disconnect
    hPwrCtrl = NULL
  END IF
  Setup_PwrCtrl()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' main loop checking for action and acted upon
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Check_for_Action()

  IF bExitProgram THEN
    WriteLog(("Exiting loop!"))
    RETURN
  END IF
  IF bProgramStartup THEN iLoopTickCount = 0

  SetGlobalVars()
  bProgramStartup = FALSE
  EventLoop.Run()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change house mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ChangeHouseMode(sMode AS String)

  Main.GlobalVar["House_Mode"] = sMode
  Main.WriteLog(("House mode is set to '") & Caps(sMode) & "'.")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change mute mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ChangeMuteMode(bMode AS Boolean)

  SetGlobalVar("Mute", bMode)

  IF bMode THEN
    Main.WriteLog(("Mute mode is set to 'Audio Disabled'."))
  ELSE
    Main.WriteLog(("Mute mode is set to 'Audio Enabled'."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update counters
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB UpdateCounters()

  ' IF iNewMails OR IF iNewCalls OR IF iNewVoicemails THEN Main.WriteLog(("Inbox counters are: ") & iNewMails & If(iNewMails <> 1, (" e-mails, "), (" e-mail, ")) & iNewCalls & If(iNewCalls <> 1, (" calls "), (" call ")) & ("and ") & iNewVoicemails & If(iNewVoicemails <> 1, (" voicemsgs"), (" voicemsg")) & ".")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return with capital first letter
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Caps(sString AS String) AS String

  RETURN UCase(Mid(sString, 1, 1)) & Mid(sString, 2)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start basic timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SetupTimers()

  ' main loop sleep timer
  tMainSleep = NEW Timer AS "tSleep"
  tMainSleep.Delay = iMainSleepTime
  tMainSleep.Enabled = TRUE

  ' flush logfile buffers to disk
  tMainFlush = NEW Timer AS "tFlush"
  tMainFlush.Delay = iMainFlushTime
  tMainFlush.Enabled = TRUE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stop all timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB StopTimers()

  WriteLog(("Stopping running timers."))

  ' temperaturnu timer
  TRY TemperaturNu.tTemperaturNu.Stop
  ' plugwise timer
  TRY hPlugwise.tPlugwise.Stop
  ' pachube timer
  TRY Pachube.tPachube.Stop
  ' bwired timer
  TRY Bwired.tBwired.Stop
  ' ping timer
  TRY Ping.tPing.Stop
  ' digitemp timer
  TRY Digitemp.tDigitemp.Stop
  ' serverstats timer
  TRY ServerStats.tServerStats.Stop
  ' bluetooth timer
  TRY Bluetooth.tBluetooth.Stop
  ' dsc timer
  TRY hDSC.tDSC.Stop
  ' HDDTemp timer
  TRY HDDTemp.tHDDTemp.Stop
  ' plcbus timers
  TRY hPLCBUS.tPLCBUS.Stop
  TRY hPLCBUS.tPLCBUSLed.Stop
  ' ctx35 timers
  TRY hCTX35.tCTX35.Stop
  TRY hCTX35.tX10.Stop
  ' z-wave timer
  TRY hZWave.tZWave.Stop
  ' ups timer
  TRY hUPS.tUPS.Stop
  ' rrdtool timer
  TRY RRDTool.tRRDTool.Stop
  ' gmail timer
  TRY Mail.tGmail.Stop
  ' flush output streams
  TRY tMainFlush.Stop
  ' main loop sleep timer
  TRY tMainSleep.Stop

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by flush timer, flushes buffered data to disk
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tFlush_Timer()

  FLUSH

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by sleep timer, triggers main loop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tSleep_Timer()

  Check_for_Action()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' time related functions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Time_Less_Than(sTime AS String) AS Boolean

  IF (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Minute) < 0) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

PRIVATE FUNCTION Time_Greater_Than(sTime AS String) AS Boolean

  IF (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Minute) > 0) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

PUBLIC FUNCTION Time_Now(sTime AS String) AS Boolean

  IF (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Second) = 0) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' routine from misterhouse, loop with time related code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SetGlobalVars()

  DIM sSeasons, sSeason_Starts AS Array
  DIM bSunRise AS Boolean = TRUE
  DIM bSunSet AS Boolean = FALSE
  DIM iTwilight AS Integer
  DIM rResult AS Result
  DIM sSplitTime AS String[]

  bNew_Second = 0
  bNew_Msecond_500 = 0
  bNew_Msecond_250 = 0
  bNew_Minute = 0
  bNew_Hour = 0
  bNew_Day = 0
  bNew_Week = 0
  bNew_Month = 0
  bNew_Year = 0
  iDelayOccured = 0
  dTime_Now = Now()

  IF bProgramStartup THEN
    dPrev_Time = -1
    iPrev_Min = -1
    iPrev_Hour = -1
    iPrev_Mday = -1
    iPrev_Month = -1
    iPrev_Year = -1
    GlobalVar["Program_Start"] = Now()
  END IF

  dTime = Now()

  ' prevent repeating time based events
  IF (dPrev_Time > dTime) THEN dTime = dPrev_Time

  IF (dPrev_Time <> dTime) THEN
    INC iLoopTickCount

    ' new Msecond_250
    bNew_Msecond_250 = 1

    ' new Msecond_500
    IF iLoopTickCount = 2 THEN
      iLoopTickCount = 0
      bNew_Msecond_500 = 1
    END IF

    dPrev_Time = dTime
    GlobalVar["Second"] = Second(dTime)

    ' new second
    IF (iPrev_Sec <> GlobalVar["Second"]) THEN
      bNew_Second = 1
      SetGlobalVar("Minute", Minute(dTime))

      iPrev_Sec = GlobalVar["Second"]
      GlobalVar["Program_Uptime"] = UptimeString(DateDiff(GlobalVar["Program_Start"], Now(), gb.Second))
    ENDIF

    ' new minute
    IF (iPrev_Min <> GlobalVar["Minute"]) THEN
      bNew_Minute = 1

      SetGlobalVar("Hour", Hour(dTime))
      SetGlobalVar("Day", Day(dTime))
      SetGlobalVar("Month", Month(dTime))
      SetGlobalVar("Weekday", WeekDay(dTime))

      iPrev_Min = GlobalVar["Minute"]

      ' check if it's dark or light
      IF (Time_Less_Than(GlobalVar["Sunrise"]) OR Time_Greater_Than(GlobalVar["Sunset"])) THEN
        SetGlobalVar("Dark", TRUE)
      ELSE
        SetGlobalVar("Dark", FALSE)
      END IF
      ' new hour
      IF (iPrev_Hour <> GlobalVar["Hour"]) THEN
        bNew_Hour = 1
        iPrev_Hour = GlobalVar["Hour"]
        IF (Time_Less_Than("5:00")) THEN
          SetGlobalVar("Time_Of_Day", ("night"))
        ELSE IF (Time_Less_Than("11:59")) THEN
          SetGlobalVar("Time_Of_Day", ("morning"))
        ELSE IF (Time_Less_Than("17:00")) THEN
          SetGlobalVar("Time_Of_Day", ("afternoon"))
        ELSE IF (Time_Less_Than("23:59")) THEN
          SetGlobalVar("Time_Of_Day", ("evening"))
        ELSE
          SetGlobalVar("Time_Of_Day", ("night"))
        END IF
        WriteLog("The Time of Day is " & Main.GlobalVar["Time_Of_Day"] & ".")
        WriteLog("It's " & IIf(GlobalVar["Dark"], ("dark"), ("light")) & " outside.")
        WriteLog(("DomotiGa is running for ") & Main.GlobalVar["Program_Uptime"])
        ' new day
        IF (iPrev_Mday <> GlobalVar["Day"]) THEN
          bNew_Day = 1
          iPrev_Mday = GlobalVar["Day"]
          IF (GlobalVar["Weekday"] = 0 OR GlobalVar["Weekday"] = 6) THEN
            SetGlobalVar("Weekend", TRUE)
          ELSE
            SetGlobalVar("Weekend", FALSE)
          END IF
          IF (GlobalVar["Weekday"] = 0) THEN 
            bNew_Week = 1
          END IF
          SetGlobalVar("Year", Year(Now))
          ' calculate sun set/rise
          SetGlobalVar("Sunrise", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunRise, 0))
          SetGlobalVar("Sunset", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunSet, 0))
          WriteLog("Sunrise at " & GlobalVar["Sunrise"] & (", Sunset at ") & GlobalVar["Sunset"])
          IF (sAstroTwilight = "civil") THEN iTwilight = 1
          IF (sAstroTwilight = "nautical") THEN iTwilight = 2
          IF (sAstroTwilight = "astronomical") THEN iTwilight = 3
          SetGlobalVar("Sunrise_Twilight", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunRise, iTwilight))
          SetGlobalVar("Sunset_Twilight", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunSet, iTwilight))
          WriteLog("Twilight Sunrise at " & GlobalVar["Sunrise_Twilight"] & (", Twilight Sunset at ") & GlobalVar["Sunset_Twilight"] & " (" & sAstroTwilight & ")")

          ' calculate moon data
          Astro.CalcMoonPhase()

          WriteLog(("Moon phase is ") & MoonPhase & ".")
          WriteLog(("Moon is in ") & MoonZodiac & ".")
          WriteLog(("Age from new ") & MoonAge & (" days."))
          WriteLog(("Distance ") & MoonDistance & (" Earth radii."))
          WriteLog(("Ecliptic latitude: ") & MoonLatitude & (" degrees."))
          WriteLog(("Ecliptic longitude: ") & MoonLongitude & (" degrees."))
          IF MoonIsLeapYear THEN WriteLog(("This is a leap year."))

          ' calculate season
          sSeasons = Split(sAstroSeasons, ",")
          sSeason_Starts = Split(sAstroSeasonStarts, ",")
          IF (GlobalVar["Month"] < 3 OR (GlobalVar["Month"] = 3 AND GlobalVar["Day"] < Val(sSeason_Starts[0])) OR (GlobalVar["Month"] = 12 AND GlobalVar["Day"] > Val(sSeason_Starts[3]))) THEN
            SetGlobalVar("Season", sSeasons[0])
          ELSE IF (GlobalVar["Month"] < 6 OR (GlobalVar["Month"] = 6 AND GlobalVar["Day"] < Val(sSeason_Starts[1]))) THEN
            SetGlobalVar("Season", sSeasons[1])
          ELSE IF (GlobalVar["Month"] < 9 OR (GlobalVar["Month"] = 9 AND GlobalVar["Day"] < Val(sSeason_Starts[2]))) THEN
            SetGlobalVar("Season", sSeasons[2])
          ELSE
            SetGlobalVar("Season", sSeasons[3])
          END IF
          WriteLog("Season is " & GlobalVar["Season"] & ".")
          ' new month
          IF (iPrev_Month <> GlobalVar["Month"]) THEN
            bNew_Month = 1
            iPrev_Month = GlobalVar["Month"]
            ' new year
            IF (iPrev_Year <> GlobalVar["Year"]) THEN
              bNew_Year = 1
              iPrev_Year = GlobalVar["Year"]
            END IF ' new year
          END IF ' new month

          ' update Sunset/Sunrise triggers in database
          sSplitTime = Split(GlobalVar["Sunset"], ":")
          rResult = hDB.Exec("UPDATE triggers t SET t.param1 = &1 ,t.param2 = &2 WHERE t.name = 'Time is Sunset' ", sSplitTime[0], sSplitTime[1])
          sSplitTime = Split(GlobalVar["Sunrise"], ":")
          rResult = hDB.Exec("UPDATE triggers t SET t.param1 = &1 ,t.param2 = &2 WHERE t.name = 'Time is Sunrise' ", sSplitTime[0], sSplitTime[1])

          IF bProgramStartup THEN
            bNew_Second = 0
            bNew_Minute = 0
            bNew_Hour = 0
            bNew_Day = 0
            bNew_Week = 0
            bNew_Month = 0
            bNew_Year = 0
          END IF
        END IF ' new day loop
      END IF ' new hour loop
    END IF ' new minute loop
  END IF ' time changed loop

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse cron function
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Time_Cron(sTimeDate AS String) AS Boolean

  DIM aCron, aMore, aCron_Now, LowHigh AS String[]
  DIM sField AS String
  DIM iField AS Integer
  DIM sTag AS Boolean
  DIM bDebug AS Boolean = FALSE

  ' * * * * *
  ' - - - - -
  ' | | | | |
  ' | | | | +----- day of week (0 - 6) (Sunday=0)
  ' | | | +------- month (1 - 12)
  ' | | +--------- day of month (1 - 31)
  ' | +----------- hour (0 - 23)
  ' +------------- min(0 - 59)

  ' only on minute boundarys
  IF NOT bNew_Minute THEN RETURN

  aCron = Split(sTimeDate, " ")

  IF aCron.Count <> 5 THEN
    WriteDebugLog(("[Main] Bad Time_Cron() format (needs 5 fields): ") & sTimeDate)
    RETURN FALSE
  END IF

  aCron_Now = [Str(GlobalVar["Minute"]), Str(GlobalVar["Hour"]), Str(GlobalVar["Day"]), Str(GlobalVar["Month"]), Str(GlobalVar["Weekday"])]
  FOR iField = 0 TO 4
    ' wildcard used
    IF aCron[iField] = "*" THEN
      IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & (" | * so continue"))
      CONTINUE
    ' normal value
    ELSE IF aCron[iField] = aCron_Now[iField] THEN
      IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & " | aCron[" & iField & "] " & aCron[iField] & " = aCron_Now[" & iField & "] " & aCron_Now[iField] & " so continue")
      CONTINUE
    ' more values given
    ELSE IF InStr(aCron[iField], ",") THEN
      aMore = Split(aCron[iField], ",")
      FOR EACH sField IN aMore
          IF sField = aCron_Now[iField] THEN
            IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & " | sField " & sField & " = aCron_Now[" & iField & "] " & aCron_Now[iField] & (" so tag=true"))
            sTag = TRUE
          ELSE
            IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & " | sField " & sField & " <> aCron_Now[" & iField & "] " & aCron_Now[iField])
          END IF
      NEXT
      IF sTag THEN
        CONTINUE
      ELSE
        IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & (" | none of , sFields match so return false"))
        RETURN FALSE
      END IF
    ' range given
    ELSE IF InStr(aCron[iField], "-") THEN
      LowHigh = Scan(aCron[iField], "*-*")
      IF aCron_Now[iField] >= LowHigh[0] AND aCron_Now[iField] <= LowHigh[1] THEN
        IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & (" | within range so continue"))
        CONTINUE
      ELSE
        IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & (" | not within range so return false"))
        RETURN FALSE
      END IF
    END IF
    IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & " | aCron[" & iField & "] " & aCron[iField] & " <> aCron_Now[" & iField & "] " & aCron_Now[iField] & (" so return false"))
    RETURN FALSE ' not all of the entries qualified
    sTag = FALSE
  NEXT
  IF bDebug THEN Main.WriteDebugLog("[cron] " & sTimeDate & " | return true")
  RETURN TRUE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return random string from table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Random_Text(sTable AS String) AS String

  DIM rResult AS Result

  TRY rResult = Main.hDB.Exec("SELECT text FROM " & hDB.Quote(sTable) & " ORDER BY rand() LIMIT 1")
  IF rResult.Count THEN
    RETURN rResult!text
  ELSE
    RETURN ("Error fetching random text!")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set globalvar to value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SetGlobalVar(sVar AS String, vValue AS Variant)

  IF Events.CheckCondition(Main.GlobalVar[sVar], "<>", vValue, TRUE) THEN Events.CheckGlobalVarEvents(sVar, vValue)
  Main.GlobalVar[sVar] = vValue

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save globalvars to database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SaveGlobalVars()

  DIM tableGlobalVars AS Table
  DIM vValue AS Variant
  DIM rResult AS Result

  ' delete complete history
  Main.hDB.Tables.Remove("globalvars")
  ' recreate empty one
  tableGlobalVars = Main.hDB.Tables.Add("globalvars")
  tableGlobalVars.Fields.Add("id", db.Serial)
  tableGlobalVars.Fields.Add("var", db.String, 64)
  tableGlobalVars.Fields.Add("value", db.String, 0)
  tableGlobalVars.PrimaryKey = ["id"]
  tableGlobalVars.Update()

  ' write vars to db table
  FOR EACH vValue IN Main.GlobalVar
    Main.hDB.Begin()
    rResult = Main.hDB.Create("globalvars")
    rResult!var = Main.GlobalVar.Key
    rResult!value = vValue
    rResult.Update()
    Main.hDB.Commit()
  NEXT
  IF Main.bMainDebug THEN Main.WriteDebugLog(("[Main] Globalvars Saved."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restore all globalvars from database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB RestoreGlobalVars()

  DIM rResult AS Result
  DIM bValue AS Boolean
  DIM sValue AS String

  TRY rResult = Main.hDB.Exec("SELECT * FROM globalvars")
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        Main.GlobalVar[rResult!var] = rResult!value
      NEXT
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Main] Globalvars Restored."))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if command can be found on system
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ProgramExist(sProg AS String) AS Boolean

  DIM sTemp AS String
  DIM iPos AS Integer

  iPos = String.InStr(sProg, " ")
  IF iPos THEN sProg = String.Left(sProg, iPos - 1)

  SHELL "which " & sProg TO sTemp

  IF NOT sTemp THEN RETURN FALSE
  RETURN NOT (Trim$(sTemp) LIKE "which: *")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' insert spaces at end of string until length reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SpaceAlignLeft(sString AS String, iLength AS Integer) AS String

  WHILE Len(sString) < iLength
    sString = sString & " "
  WEND
  RETURN sString

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' insert spaces at start of string until length reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SpaceAlign(sString AS String, iLength AS Integer) AS String

  WHILE Len(sString) < iLength
    sString = " " & sString
  WEND
  RETURN sString

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' wake up a computer by sending a WOL magic packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB WakeOnLan(sMAC AS String)

  DIM aMAC, aIPs, athisIP AS String[]
  DIM sHWAddress, sMsg, sHost, sIP AS String
  DIM iCount AS Integer

  aMAC = Split(sMAC, ":")

  FOR iCount = 0 TO 5
    sHWAddress &= aMAC[icount]
  NEXT
  sMsg = Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255)
  FOR iCount = 1 TO 16
    sMsg &= sHWAddress
  NEXT

  ' sent it to all computers on this network
  hBroadcast = NEW UdpSocket AS "Broadcast"
  hBroadcast.Broadcast = TRUE
  hBroadcast.Bind(0)
  hBroadcast.TargetPort = 9

  EXEC ["hostname", "-i"] TO sHost
  aIPs = Split(Trim$(sHost), " ")
  FOR EACH sIP IN aIPs
    athisIP = Split(sIP, ".")
    IF CInt(athisIP[0]) = 127 THEN CONTINUE
    hBroadcast.TargetHost = athisIP[0] & "." & athisIP[1] & "." & athisIP[2] & "." & "255"
    WRITE #hBroadcast, sMsg, Len(sMsg)
  NEXT
  CLOSE hBroadcast

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Broadcast_Error()

  SELECT CASE hBroadcast.Status
    CASE Net.CannotBindSocket
      Main.WriteDebugLog(("[WOL] Unable to Bind to that port"))
    CASE Net.CannotCreateSocket
      Main.WriteDebugLog(("[WOL] System does not allow to create a socket"))
    CASE Net.CannotRead
      Main.WriteDebugLog(("[WOL] Error Sending Data"))
    CASE Net.CannotWrite
      Main.WriteDebugLog(("[WOL] Error Receiving Data"))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' simple check for time string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION IsTime(sString AS String) AS Boolean

  IF Len(sString) > 3 AND InStr(sString, ":") THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' calculate program uptime string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION UptimeString(lSeconds AS Long) AS String

  DIM lDays, lHrs, lMins, lSecs AS Long

  lSecs = lSeconds MOD 60
  lMins = (lSeconds MOD 3600) \ 60
  lHrs = (lSeconds MOD (3600 * 24)) \ 3600
  lDays = lSeconds \ (3600 * 24)
  RETURN lDays & IIf(lDays = 1, " day, ", " days, ") & lHrs & IIf(lHrs = 1, " hr, ", " hrs, ") & lMins & IIf(lMins = 1, " min,", " mins,") & " and " & lSecs & IIf(lSecs = 1, " sec.", " secs.")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name of caller if known
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ReturnCallerID(sPhoneNo AS String) AS String

  DIM rResult AS Result
  DIM sName AS String = ("Unknown")

  IF Len(sPhoneNo) THEN
    rResult = Main.hDB.Exec("SELECT name, cidphone FROM contacts WHERE phoneno = &1", sPhoneNo)
    IF rResult.Count THEN
      IF rResult!cidphone THEN
        sName = rResult!cidphone
      ELSE
        sName = rResult!name
      END IF
    END IF
    rResult = Main.hDB.Exec("SELECT name, cidmobile FROM contacts WHERE mobileno = &1", sPhoneNo)
    IF rResult.Count THEN 
      IF rResult!cidmobile THEN
        sName = rResult!cidmobile
      ELSE
        sName = rResult!name
      END IF
    END IF
    RETURN sName
  ELSE
    RETURN ("Hidden")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if system has minimal gambas version required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION CheckReq(iMinimalVersion AS Integer) AS Boolean

  DIM iVer AS Integer

  iVer = Val(Replace(Main.GetGambasVersion(), ".", ""))
  IF iVer >= iMinimalVersion THEN
    RETURN FALSE
  ELSE
    RETURN TRUE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get broadcast addresses of this machine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Setup_BroadcastAddrs()

  DIM aIPs, athisIP AS String[]
  DIM sHost, sIP AS String

  SHELL "/sbin/ifconfig | grep Bcast |awk -F':' '{print $3}'|awk '{print $1}'" TO sHost
  aIPs = Split(Trim$(sHost), " ")
  FOR EACH sIP IN aIPs
    athisIP = Split(sIP, ".")
    IF CInt(athisIP[0]) = 127 THEN CONTINUE
    aBroadcastAddrs.Add(athisIP[0] & "." & athisIP[1] & "." & athisIP[2] & "." & "255")
  NEXT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' broadcast events via UDP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB BroadcastEvent(sMessage AS String)

  DIM sIP AS String

  ' sent it to all computers on this network
  hBroadcastEvent = NEW UdpSocket AS "BroadcastUDP"
  hBroadcastEvent.Broadcast = TRUE
  hBroadcastEvent.Bind(0)
  hBroadcastEvent.TargetPort = iXMLRPCHTTPPort + 10000

  FOR EACH sIp IN aBroadcastAddrs
    hBroadcastEvent.TargetHost = sIp
    WRITE #hBroadcastEvent, sMessage, Len(sMessage)
  NEXT

CATCH
  Main.WriteLog(("ERROR: Cannot broadcast UDP message! ") & ERROR.Text & (" at ") & ERROR.Where)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB BroadcastUDP_Error()

  SELECT CASE hBroadcastEvent.Status
    CASE Net.CannotBindSocket
      Main.WriteDebugLog(("[BroadcastUDP] Unable to Bind to that port"))
    CASE Net.CannotCreateSocket
      Main.WriteDebugLog(("[BroadcastUDP] System does not allow to create a socket"))
    CASE Net.CannotRead
      Main.WriteDebugLog(("[BroadcastUDP] Error Sending Data"))
    CASE Net.CannotWrite
      Main.WriteDebugLog(("[BroadcastUDP] Error Receiving Data"))
  END SELECT

END

PUBLIC SUB DisplayBool(bSwitch AS Boolean) AS String

  SELECT bSwitch
    CASE TRUE
        RETURN ("True")
    CASE ELSE
        RETURN ("False")
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if program and database versions match and try to update
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CheckDatabaseVersion()

  DIM rResult AS Result
  DIM sDBVersion, sPrgVersion, sDumpFile, sToVersion AS String
  DIM iDBVersion, iPrgVersion AS Integer
  DIM hMysql AS Process

  sPrgVersion = sProgramVersion
  iPrgVersion = Val(Replace(sPrgVersion, ".", ""))

  ' fetch database version from database
  rResult = Main.hDB.Exec("SELECT * FROM version ORDER BY db DESC LIMIT 1 ")
  IF rResult.Count = 1 THEN
    sDBVersion = Str(rResult!db)
    ' convert 0.1.180 to 01180
    iDBVersion = Val(Replace(sDBVersion, ".", ""))
    IF iDBVersion < iPrgVersion THEN
      Main.WriteLog(("The version of your database is ") & sDBVersion & (" but the version of the program is ") & sPrgVersion & ("!"))
      REPEAT
        IF bAllowAutoUpgrade THEN
          IF Main.ProgramExist("mysql") THEN
            sToVersion = Format(Str(iDBVersion + 1), "00000")
            sDumpFile = "upgrade/" & Replace(sDBVersion, ".", "") & "to" & sToVersion & ".sql"
            IF Exist(sBaseDir &/ sDumpFile) THEN
              hMysql = SHELL "mysql --host=" & sSQLHost & " --user=" & sSQLUser & " --password=" & sSQLPass & " --execute='SOURCE " & sBaseDir &/ sDumpFile & "'" WAIT
              IF hMysql.Value THEN ' mysql returned an error
                Main.WriteLog(("Mysql command returned an error! The database is now at version ") & sDBVersion)
                QUIT
              ELSE
                ' check if we are there yet
                rResult = Main.hDB.Exec("SELECT * FROM version ORDER BY db DESC LIMIT 1")
                IF rResult.Count = 1 THEN
                  sDBVersion = Str(rResult!db)
                  ' convert 0.1.180 to 01180
                  iDBVersion = Val(Replace(sDBVersion, ".", ""))
                END IF
              END IF
            ELSE
              Main.WriteLog(("Couldn't find upgrade file ") & sDumpFile & ("! The Database is now at version ") & sDBVersion)
              QUIT
            END IF
            Main.WriteLog(("Database has been upgraded to version ") & sDBVersion)
            IF iPrgVersion = iDBVersion THEN RETURN
          ELSE
            Main.WriteLog(("Couldn't find mysql program!"))
            QUIT
          END IF
        ELSE
          Main.WriteLog(("You can run " & Application.Name & " with the -a parameter to allow automatic upgrade!"))
          QUIT
        END IF
      UNTIL iPrgVersion = iDBVersion
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' some GUI related routines are placed here, so max number of
' modules for client and server can share code.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ControlLed(sLed AS String, sStatus AS String)

  ' do nothing

END

PUBLIC SUB RefreshDeviceList()

  Main.BroadcastEvent("[DeviceUpdate]")

END

PUBLIC SUB RefreshPhoneCallList()

  Main.BroadcastEvent("[PhoneCallUpdate]")

END

PUBLIC SUB SendSMS(sText AS String, sTo AS String)

  IF Main.hSMS THEN Main.hSMS.SendSMS(sText, sTo)

END
