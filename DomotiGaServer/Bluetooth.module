' Gambas module file

' Description:
' Bluetooth.module
' Support for Bluetooth proximity, see if a user is around by checking his bluetooth device(s).

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tBluetooth AS Timer
PRIVATE sScan AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer for polling
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Run()

  ' start poll timer for bluetooth
  tBluetooth = NEW Timer AS "tBluetooth"
  tBluetooth.Delay = Main.iBluetoothPollTime * 1000 ' multiply for seconds
  tBluetooth.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start one of two scan types depending on Threshold setting
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tBluetooth_Timer()

  IF Main.iBluetoothThreshold = 255 THEN
    ScanBluetooth()
  ELSE
    CheckBluetooth()
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan for BT devices, don't calculate RSSI
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CheckBluetooth()

  DIM rResult AS Result
  DIM iDeviceId, iRSSI AS Integer
  DIM sRSSI, sProx, sOutput AS String

  ' get all enabled devices of type blutooth
  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("Bluetooth Dongle"))
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      ' check each device
      FOR EACH rResult
        iDeviceId = rResult!id
        IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] Checking device named '") & rResult!name & ("' with address '") & rResult!address & "'.")
        ' check device for signal strenght
        sRSSI = GetRSSI(rResult!address)
        IF Main.bBluetoothDebug THEN Main.WriteDebugLog("[Bluetooth] " & Replace(sRSSI, gb.NewLine, ""))
        IF IsInteger(Val(sRSSI)) THEN
          iRSSI = IsInteger(Val(sRSSI))
          sProx = IIf(iRSSI > Main.iBluetoothThreshold, "Near", "Far")
          IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sProx, Val(sRSSI), "", "")
          IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] Got RSSI value ") & iRSSI)
        ELSE
          IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, ("Away"), "", "", "")
        ENDIF
      NEXT
    ELSE
      Main.WriteLog(("Bluetooth: No Bluetooth device(s) found in device table!"))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan bluetooth network
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION ScanBluetooth() AS String

  IF Main.bBluetoothDebug THEN
    Main.WriteDebugLog(("[Bluetooth] Starting device scan."))
    Main.WriteDebugLog(("[Bluetooth] 'hcitool -i " & Main.sBluetoothDevice & " scan'"))
  ENDIF
  EXEC ["hcitool", "-i", Main.sBluetoothDevice, "scan"] FOR READ AS "ScanBT"

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ScanBT_Read()

  DIM sBuffer AS String

  READ #LAST, sBuffer, -256
  sScan &= sBuffer

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan bluetooth has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ScanBT_Kill()

  DIM sLine AS String
  DIM aScan AS String[]
  DIM iDeviceId AS Integer
  DIM rResult AS Result

  IF Len(sScan) > 13 THEN
    rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("Bluetooth Dongle"))
    IF rResult.Available THEN
      IF rResult.Count >= 1 THEN
        ' check each device
        FOR EACH rResult
          IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] Checking device named '") & rResult!name & ("' with address '") & rResult!address & "'.")
          IF InStr(sScan, rResult!address) THEN
            iDeviceId = Devices.Find(rResult!address, Devices.FindInterface("Bluetooth Dongle"), "BLUETOOTH")
            IF iDeviceId THEN Devices.ValueUpdate(rResult!id, "Home", "", "", "")
          ELSE
            iDeviceId = Devices.Find(rResult!address, Devices.FindInterface("Bluetooth Dongle"), "BLUETOOTH")
            IF iDeviceId THEN Devices.ValueUpdate(rResult!id, ("Away"), "", "", "")
          ENDIF
        NEXT
      ELSE
        Main.WriteLog(("Bluetooth: No Bluetooth device(s) found in device table!"))
      ENDIF
    ENDIF

    ' parse each line
    FOR EACH sLine IN Split(sScan, "\n")
      ' check for sensor data
      IF InStr(sLine, "Scanning") THEN CONTINUE
      aScan = Scan(sLine, " * *")
      IF aScan.Count = 2 THEN
        IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] Found device with address '") & aScan[0] & ("' and name '") & aScan[1] & "'.")
      ENDIF
    NEXT
    sScan = ""
  ELSE
    IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] No device(s) found."))
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return BT field strenght info for sAddress
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetRSSI(sAddress AS String) AS String

  DIM sStrength AS String

  IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] 'hcitool rssi " & sAddress & "'"))
  EXEC ["hcitool", "rssi", sAddress] TO sStrength
  RETURN Replace$(sStrength, "RSSI return value: ", "")

END
