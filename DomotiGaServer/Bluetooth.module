' Gambas module file

' Description:
' Bluetooth.module
' Support for Bluetooth proximity, see if a user is around by checking his bluetooth device(s).

' Development Status:
' Just build, bugs around, maybe need to reorganize.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tBluetooth AS Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer for polling
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Run()

  ' start poll timer for bluetooth
  tBluetooth = NEW Timer AS "tBluetooth"
  tBluetooth.Delay = Main.iBluetoothPollTime * 1000 ' multiply for seconds
  tBluetooth.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start one of two scan types depending on Threshold setting
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tBluetooth_Timer()

  CheckBluetooth()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan for BT devices, don't calculate RSSI
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CheckBluetooth()

  DIM rResult, rUser AS Result
  DIM iRSSI AS Integer
  DIM sRSSI, sProx, sOutput AS String

  ' get all enabled devices of type blutooth
  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("Bluetooth Dongle"))
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      ' scan the bluetooth network
      IF Main.iBluetoothThreshold = 255 THEN sOutput = ScanBluetooth()
      IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] : ") & sOutput)
      ' check each device
      FOR EACH rResult
        IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] Checking device named '") & rResult!name & ("' with MAC address '") & rResult!address & "'.")
        ' do a simple check, no proximity
        IF Main.iBluetoothThreshold = 255 THEN
          IF InStr(sOutput, rResult!address) THEN
            Devices.ValueUpdate(rResult!id, "Home", "", "", "")
            ' is there a user linked to this device?
            IF rResult!user THEN
              rUser = Main.hDB.Exec("SELECT * FROM users WHERE id = &1", rResult!user)
              IF rUser.Available THEN Main.WriteLog(("Bluetooth Proximity detected that '") & rUser!fullname & ("' is home!"))
            END IF
          ELSE
            Devices.ValueUpdate(rResult!id, ("Away"), "", "", "")
          END IF
        ELSE
          ' check device for signal strenght
          sRSSI = GetRSSI(rResult!address)
          IF Main.bBluetoothDebug THEN Main.WriteDebugLog("[Bluetooth] " & Replace(sRSSI, gb.NewLine, ""))
          IF IsInteger(Val(sRSSI)) THEN
            iRSSI = IsInteger(Val(sRSSI))
            IF iRSSI > Main.iBluetoothThreshold THEN
              sProx = ("Near")
            ELSE
              sProx = ("Far")
            END IF
            Devices.ValueUpdate(rResult!id, sProx, Val(sRSSI), "", "")
            IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] Got RSSI value ") & iRSSI)
            ' if signal strenght is within set threshold
            IF iRSSI > Main.iBluetoothThreshold THEN
              ' is there a user linked to this device?
              IF rResult!user THEN
                rUser = Main.hDB.Exec("SELECT * FROM users WHERE id = &1", rResult!user)
                IF rUser.Available THEN Main.WriteLog(("Bluetooth Proximity detected that '") & rUser!fullname & ("' is home!"))
              END IF
            END IF
          ELSE
            Devices.ValueUpdate(rResult!id, ("Away"), "", "", "")
          END IF
        END IF
      NEXT
    ELSE
      Main.WriteLog(("Bluetooth: No Bluetooth device(s) found in device table!"))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan BT network and return output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION ScanBluetooth() AS String

  DIM sScan AS String

  EXEC ["hcitool", "scan", "2>&1"] TO sScan
  RETURN sScan

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return BT field strenght info for sAddress
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetRSSI(sAddress AS String) AS String

  DIM sStrength AS String

  EXEC ["hcitool", "rssi", sAddress, "2>&1"] TO sStrength
  RETURN Replace$(sStrength, "RSSI return value: ", "")

END
