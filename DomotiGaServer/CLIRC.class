' Gambas class file

' Description:
' LIRC.class
' Provide support for LIRC.

' Development Status:
' Just started developing this one.

' Links:
' http://www.lirg.org

' DomotiGa - an open source home automation program.
' Copyright(C) 2009 Ron Klinkien
' This module is written by and Copyright(C) 2009 Timo Sariwating

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS String
PROPERTY LIRCDebug AS Boolean

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS String
PRIVATE bLIRCDebug AS Boolean
PRIVATE sCode AS String

PUBLIC hLIRC AS NEW Socket
PUBLIC sBuffer AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the connection
  TRY hLIRC.Close

  ' get a new one
  hLIRC = NEW Socket AS "LIRC"
  hLIRC.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("LIRC Error: " & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB LIRC_Ready()

  Main.WriteLog("LIRC TCP socket connected.")

END

PUBLIC SUB LIRC_Closed()

  Main.WriteLog("LIRC Error: TCP socket closed. (is lircd still running?)")
  ' TRY Main.Restart_LIRC()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hLIRC.Close
  Main.WriteLog("LIRC TCP socket port close.")

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("LIRC Error: " & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB LIRC_Read()

  DIM sData AS String

  READ #hLIRC, sData, 1
  IF sData = Chr(10) THEN ' buffer until linefeed then parse
    IF Len(sBuffer) > 1 THEN ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = NULL
  ELSE
    sBuffer &= sData
  END IF

END

PRIVATE SUB ParseLine(sStr AS String)

  DIM aScan AS String[]

  aScan = Scan(sStr, "* * * *")
  SELECT CASE (aScan[2])
    CASE "BEO4-tv-on"
      IF Main.bLIRCDebug THEN Main.WriteDebugLog("[LIRC] Bang & Olufsen BEO4 TV Selected")
    CASE "BEO4-light-on"
      Erase()
      IF Main.bLIRCDebug THEN Main.WriteDebugLog("[LIRC] Bang & Olufsen BEO4 Lights Selected")
    CASE "BEO4-light-0"
      sCode &= "0"
    CASE "BEO4-light-1"
      sCode &= "1"
    CASE "BEO4-light-2"
      sCode &= "2"
    CASE "BEO4-light-3"
      sCode &= "3"
    CASE "BEO4-light-4"
      sCode &= "4"
    CASE "BEO4-light-5"
      sCode &= "5"
    CASE "BEO4-light-6"
      sCode &= "6"
    CASE "BEO4-light-7"
      sCode &= "7"
    CASE "BEO4-light-8"
      sCode &= "8"
    CASE "BEO4-light-9"
      sCode &= "9"
    CASE "BEO4-light-up"
      Light_On()
    CASE "BEO4-light-down"
      Light_Off()
    CASE "BEO4-sat-on"
    CASE ELSE
      Main.WriteDebugLog(aScan[2])
  END SELECT

END

PRIVATE SUB Erase()

  sCode = NULL

END

PRIVATE SUB Light_On()

  TRY Devices.SetDevice(Devices.FindNameForDevice(sCode), "On")
  ' XBMC.XBMC_Send_OSD("Lights Set", Devices.FindNameForDevice(sCode) & " On")

END

PRIVATE SUB Light_Off()

  TRY Devices.SetDevice(Devices.FindNameForDevice(sCode), "Off")
  ' XBMC.XBMC_Send_OSD("Lights Set", Devices.FindNameForDevice(sCode) & " Off")

END

PUBLIC SUB LIRC_Error()

  ' handle error
  SELECT CASE hLIRC.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("LIRC: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("LIRC: Host ") & sTCPHost & (" not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(("LIRC: Unable to connect. Connection refused."))
      WAIT 2.5
      TRY Main.Restart_LIRC
    CASE Net.CannotRead
      Main.WriteLog(("LIRC: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("LIRC: Error writing data."))
  END SELECT

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS String

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS String)

  iTCPPort = Value

END

PRIVATE FUNCTION LIRCDebug_Read() AS Boolean

  RETURN bLIRCDebug

END

PRIVATE SUB LIRCDebug_Write(Value AS Boolean)

  bLIRCDebug = Value

END