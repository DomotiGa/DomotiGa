' Gambas class file

' Description:
' CSMS.class
' Support for SMS modem for outgoing SMS text messages
' Tested with Siemens MC35i and Nokia 6300

' Development Status:
' Modem init and sending SMS text messages works.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY Port AS String
PROPERTY Baud AS String
PROPERTY PIN AS String
PROPERTY ServiceCentre AS String
PROPERTY Contact AS String
PROPERTY SMSDebug AS Boolean

PRIVATE sPort AS String
PRIVATE sBaud AS String
PRIVATE sPIN AS String
PRIVATE sServiceCentre AS String
PRIVATE sContact AS String
PRIVATE bSMSDebug AS Boolean

PUBLIC hSMS AS NEW SerialPort
PRIVATE sManufacturer AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the port
  TRY hSMS.Close

  ' get a new one
  hSMS = NEW Serialport AS "SMS"
  WITH hSMS
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("SMS Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize SMS modem, enter PIN if needed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB InitModem() AS Boolean

  DIM sResult AS String

  ' a few possible commands strings
  ' sCmd = "AT+CGMI" ' get manufacturer info
  ' sCmd = "AT+CPIN=0000" ' enter PIN
  ' sCmd = "AT+CPIN?" ' ask PIN status
  ' sCmd = "AT+CREG?" ' network status
  ' sCmd = "AT+COPS=?" ' show network(s)
  ' sCmd = "AT+CSQ" ' show network field strength
  ' sCmd = "AT+CGSN" ' show IMEI number
  ' init
  IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] Send init AT:"))
  IF InStr(SendCmd("AT"), "OK") THEN
    sManufacturer = SendCmd("AT+GMI")
    ' ask PIN status
    IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] Ask PIN status:"))
    sResult = SendCmd("AT+CPIN?")
    IF InStr(sResult, "OK") THEN
      ' no PIN needed
      IF InStr(sResult, "READY") THEN
        IF SetServiceCenter() THEN RETURN TRUE
      END IF
      ' modem ask for PIN
      IF InStr(sResult, "SIM PIN") THEN
        IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] Send PIN:"))
        SendCmd("AT+CPIN=" & sPIN)
        ' ask for PIN status again
        IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] Ask PIN status:"))
        ' PIN ok
        IF InStr(SendCmd("AT+CPIN?"), "READY") THEN
          IF SetServiceCenter() THEN RETURN TRUE
        END IF
      END IF
    END IF
  END IF
  ' something went wrong
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set or get SMS service center
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SetServiceCenter() AS Boolean

  DIM sResult, sNetwork AS String

  ' check manufacturer
  IF InStr(sManufacturer, "Nokia") THEN
    ' get service center
    sResult = SendCmd("AT+CSCA?")
    IF bSMSDebug THEN TRY Main.WriteLog("SMS ServiceCenter is " & Mid(sResult, InStr(sResult, Chr(34)), RInStr(sResult, Chr(34)) - InStr(sResult, Chr(34)) + 1))
  ELSE
    ' set service center
    IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] Set ServiceCenter:"))
    sResult = SendCmd("AT+CSCA=" & sServiceCentre)
  END IF
  IF InStr(sResult, "OK") THEN
    sResult = SendCmd("AT+COPS?")
    TRY sNetwork = Mid(sResult, InStr(sResult, Chr(34)), RInStr(sResult, Chr(34)) - InStr(sResult, Chr(34)) + 1)
    IF InStr(sManufacturer, "Nokia") THEN
      SELECT Mid$(sNetwork, 2, 5)
        CASE 20404
          sNetwork = "Vodafone NL" 'Libertel
        CASE 20408
          sNetwork = "KPN NL"
        CASE 20412
          sNetwork = "Telfort NL"
        CASE 20416
          sNetwork = "T-Mobile NL" 'Ben
        CASE 20420
          sNetwork = "T-Mobile NL" 'Orange, Dutchtone?
        CASE ELSE
          sNetwork = "??"
      END SELECT
    END IF
    Main.WriteLog(("SMS modem is initialized and registered at ") & sNetwork & (" network."))
    RETURN TRUE
  END IF
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create SMS message and send it to modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendSMS(sText AS String, sTo AS String) AS Boolean

  DIM sTemp, sData, sResult AS String
  DIM iTries AS Integer = 32

  ' send message
  IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] SendSMS:"))
  sResult = SendCmd("AT+CMGF=1")
  IF InStr(sResult, "OK") THEN
    IF hSMS.Status <> Net.Active THEN RETURN
    IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] > AT+CMGS=") & Chr(34) & sTo & Chr(34))
    PRINT #hSMS, "AT+CMGS=" & Chr(34) & sTo & Chr(34) & Chr(13)

    WHILE (iTries > 0)
      ' see if we got some data.
      TRY READ #hSMS, sTemp, Lof(hSMS)
      ' wait a bit and read response.
      SLEEP 0.01
      sData &= sTemp
      IF InStr(sData, ">") THEN
        IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] got '>' at try #") & iTries)
        IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] > ") & sText & "CTRL-Z")
        PRINT #hSMS, sText & Chr(26);
        Main.WriteLog(("I have just sent an SMS message to ") & sTo & ".")
        BREAK
      END IF
      DEC iTries
    WEND
  END IF
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read SMS messages
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ReadSMS() AS String

  DIM sCmd, sResult AS String

  sCmd = "AT+CMGL" ' read messages
  IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] ReadSMS:"))
  sResult = SendCmd(sCmd, 1)

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send AT command string to modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCmd(sCmd AS String, OPTIONAL bFlag AS Boolean) AS String

  DIM sData, sTemp, sOutput AS String
  DIM iTries AS Integer = 80

  IF hSMS.Status <> Net.Active THEN RETURN

  IF bFlag THEN
    PRINT #hSMS, sCmd;
  ELSE
    PRINT #hSMS, sCmd; Chr$(13); Chr$(10);
  END IF
  IF bSMSDebug THEN Main.WriteDebugLog("[SMS] > " & sCmd)

  WHILE (iTries > 0)
    ' see if we got some data.
    TRY READ #hSMS, sTemp, Lof(hSMS)
    ' wait a bit and read response.
    SLEEP 0.01
    sData &= sTemp
    IF Right(sData, 2) = Chr(13) & Chr(10) THEN
      IF bSMSDebug THEN Main.WriteDebugLog(("[SMS] got response at try #") & iTries)
      BREAK
    END IF
    DEC iTries
  WEND
  sOutput = Replace(sData, "\r", "")
  IF bSMSDebug THEN Main.WriteDebugLog("[SMS] < " & sOutput)

  RETURN sOutput

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hSMS.Close
  Main.WriteLog(("SMS serial port close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("SMS Error: ") & ERROR.Text)
  RETURN FALSE

END

' implement the properties
PRIVATE FUNCTION Port_Read() AS String

  RETURN sPort

END

PRIVATE SUB Port_Write(sValue AS String)

  sPort = sValue

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(sValue AS String)

  sBaud = sValue

END

PRIVATE FUNCTION PIN_Read() AS String

  RETURN sPIN

END

PRIVATE SUB PIN_Write(sValue AS String)

  sPIN = sValue

END

PRIVATE FUNCTION Contact_Read() AS String

  RETURN sContact

END

PRIVATE SUB Contact_Write(sValue AS String)

  sContact = sValue

END

PRIVATE FUNCTION ServiceCentre_Read() AS String

  RETURN sServiceCentre

END

PRIVATE SUB ServiceCentre_Write(sValue AS String)

  sServiceCentre = sValue

END

PRIVATE FUNCTION SMSDebug_Read() AS Boolean

  RETURN bSMSDebug

END

PRIVATE SUB SMSDebug_Write(sValue AS Boolean)

  bSMSDebug = sValue

END
