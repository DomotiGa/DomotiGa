#! /bin/sh
### BEGIN INIT INFO
# Provides:          DomotiGa
# Required-Start:    $remote_fs $local_fs $syslog $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Home Automation server
# Description:	     DomotiGa is Open Source Home Automation Software from the Netherlands.
#             	     It is written in Gambas Basic and runs on Linux, you can read all kinds of sensor values with it,
#             	     let it detect motion and schedule lights at certain times by the use of several hardware.
### END INIT INFO

#
# $Id$
#

# Do NOT "set -e"

##############################################
# this script name. Tested on Ubuntu 10.04 and 12.04
# INSTALL: the daemon is run as user/group: domotiga/dialout in directory /home/domotiga
# do not run the script as root!
SERVICE=domotiga
DESC="DomotiGa daemon"
# script is run by gbr2 gambas runtime interpreter
# gambas interpreter process name
GAMBAS=gbr3
NAME=DomotiGaServer3.gambas
# where gambas scripts reside
HOME=/home/$SERVICE
# server script
DAEMON=$HOME/$NAME
# owner settings for access log files and interfaces devices: default domotiga/dialout
# make sure domotiga/dialout is added as user and eg home is /home/domotiga
USER=$SERVICE:dialout
##############################################

SCRIPTNAME=/etc/init.d/$SERVICE
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
# PID file for kill process
PIDFILE=/var/run/$NAME.pid

##############################################

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# DomotiGa default executable command line options:
#  run as daemon
DAEMON_ARGS="-d"
OPTIONS=
# where DomotiGa config file resides, must be relative to startup dir! ?!?
CONFIG=./server-domotiga.conf

# Read configuration variable file if it is present
[ -r /etc/default/$SERVICE ] && . /etc/default/$SERVICE
# -c server config file
DAEMON_ARGS="$DAEMON_ARGS $OPTIONS ${CONFIG:+-c $CONFIG}"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	OMIT=`/bin/pidof gbr2 | /bin/sed 's/ /,/g'`
	if [ -n "$OMIT" ] ; then OMIT="-o $OMIT"; fi
	start-stop-daemon --start --quiet --pidfile $PIDFILE  --make-pidfile --chuid $USER \
		--chdir "$HOME" --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# gambas interpreter: process has child pid
	/bin/pidof $OMIT $GAMBAS >$PIDFILE
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name ${GAMBAS}
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --name ${GAMBAS}
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	########################################## IRTRANS
	# seems irtrans does not restart lirc port
	# so we just restart it if pid exists
	#if [ -f /var/run/irtrans.pid -a -f /etc/init.d/irtrans ]
	#then
	#	# irtrans should give time to establish service when started!
	#	/etc/init.d/irtrans restart
	#fi
	##########################################
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
