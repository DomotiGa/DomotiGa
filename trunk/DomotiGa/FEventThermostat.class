' Gambas class file

' Description:
' FThermostat.class
' Thermostat management functions.

' Development Status:
' Beta.

' Credits: This module is build by Francois.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE Profiles AS NEW Collection
PRIVATE Thermostat AS NEW Collection
PRIVATE ThermostatGlobalVar AS NEW String[]

PUBLIC SUB Form_Open()

  ME.Move(FMain.X + 50, FMain.Y + 70)
  txtRenameBox.Hide()

  LoadSchedule()
  WITH lcThermostat
    .Header = GridView.Horizontal
    .Columns.Count = 8
    .Rows.Count = 1
    .Columns.Width = 120
    .Columns[0].Title = ("Control point")
    .Columns[1].Title = ("Monday")
    .Columns[2].Title = ("Tuesday")
    .Columns[3].Title = ("Wednesday")
    .Columns[4].Title = ("Thursday")
    .Columns[5].Title = ("Friday")
    .Columns[6].Title = ("Saturday")
    .Columns[7].Title = ("Sunday")
  END WITH

  LoadProfiles()
  FillProfileMenu()
  LoadTable()

END

PRIVATE SUB LoadSchedule()

  DIM rResult AS Result

  TRY rResult = Main.hDB.Exec("SELECT * FROM thermostat")
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        Thermostat[rResult!name] = Split(rResult!profiles, "|")
        ThermostatGlobalVar.Add(rResult!name)
      NEXT
    ENDIF
  ENDIF

END

PRIVATE SUB LoadProfiles()

  DIM rResult AS Result
  DIM bValue AS Boolean
  DIM sTemperatures AS String[24]
  DIM sVal AS String
  DIM iCnt AS Integer

  Profiles.Clear()
  TRY rResult = Main.hDB.Exec("SELECT * FROM temperature_profile")
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        iCnt = 0
        Profiles[rResult!name] = NEW Integer[24]
        sTemperatures = Split(Trim(rResult!values), " ")
        FOR EACH sVal IN sTemperatures
          Profiles[rResult!name][iCnt] = CInt(sVal)
          INC iCnt
        NEXT
      NEXT
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Main] Temperature profile restored."))
    ENDIF
  ENDIF

END

PRIVATE SUB FillProfileMenu()

  DIM aMenu AS Menu

  FOR EACH MenuProfiles.Children
    MenuProfiles.Children.Clear
  NEXT
  FOR EACH Profiles
    aMenu = NEW Menu(MenuProfiles)
    aMenu.Text = Profiles.Key
    aMenu.Picture = FEditEventThermostatProfiles.GetProfilePicture(Profiles.Key)
    aMenu.Action = Profiles.Key
  NEXT

END

PRIVATE SUB LoadTable()

  DIM aList AS String[]
  DIM iRow, iCol AS Integer = 0
  DIM sVal AS String

  lcThermostat.Clear()
  lcThermostat.Rows.Count = Thermostat.Count
  lcThermostat.Rows.Height = 27

  FOR EACH alist IN Thermostat
    iCol = 0
    lcThermostat[iRow, iCol].Text = Thermostat.Key
    FOR EACH sVal IN aList
      INC iCol
      IF Profiles.Exist(sVal) THEN
        lcThermostat[iRow, iCol].Picture = FEditEventThermostatProfiles.GetProfilePicture(sVal)
        lcThermostat[iRow, iCol].Text = sVal
      ELSE
        lcThermostat[iRow, iCol].Text = "Not available"
        aList[iCol - 1] = "Not available"
      ENDIF
    NEXT
    INC iRow
  NEXT

END

PUBLIC SUB btnSave_Click()

  DIM sVal, sGlobalvar, sProfile AS String
  DIM aList AS String[]
  DIM rResult AS Result
  DIM tableProfiles AS Table
  DIM iCnt AS Integer

  ' check definition
  FOR EACH aList IN Thermostat
    FOR EACH sProfile IN aList
      IF sProfile = "" OR sProfile = "Not available" THEN
        Message("Thermostat '" & Thermostat.Key & "' definition is not complete!")
        RETURN
      ENDIF
    NEXT
  NEXT

  ' delete old globalvars
  FOR EACH sVal IN ThermostatGlobalVar
    Main.DelGlobalVar("Thermo_Profile_" & sVal)
    Main.DelGlobalVar("Thermo_Temp_" & sVal)
    Main.DelGlobalVar("Thermo_Control_" & sVal)
  NEXT

  ' delete complete history
  TRY Main.hDB.Tables.Remove("thermostat")
  ' recreate new table
  tableProfiles = Main.hDB.Tables.Add("thermostat")
  tableProfiles.Fields.Add("id", db.Serial)
  tableProfiles.Fields.Add("name", db.String, 64)
  tableProfiles.Fields.Add("profiles", db.String, 0)
  tableProfiles.PrimaryKey = ["id"]
  tableProfiles.Update()

  FOR EACH aList IN Thermostat
    Main.hDB.Begin()
    rResult = Main.hDB.Create("thermostat")
    rResult!name = Thermostat.Key
    sVal = ""
    sGlobalvar = ""
    FOR EACH sProfile IN aList
      sVal &= sProfile & "|"
      FOR EACH iCnt IN Profiles[sProfile]
         IF iCnt < 10 AND iCnt > 0 THEN
           sGlobalvar &= "0" & CStr(iCnt) & " "
         ELSE
           sGlobalvar &= CStr(iCnt) & " "
         ENDIF
      NEXT
    NEXT
    rResult!profiles = Mid(sVal, 1, -1)
    rResult.Update()
    Main.hDB.Commit()
    Main.SetGlobalVar("Thermo_Profile_" & Thermostat.Key, sGlobalvar, TRUE)
    Main.SetGlobalVar("Thermo_Control_" & Thermostat.Key, "Profile", TRUE)
  NEXT
  ME.Close()

END

PUBLIC SUB btnCancel_Click()

  ME.Close()

END

PUBLIC SUB btnAdd_Click()

  DIM sThermostat AS String
  DIM iCnt AS Integer
  DIM aN AS String[7]
  DIM iRow AS Integer = lcThermostat.Rows.Count

  DO
    sThermostat = (lcThermostat.Rows.Count + iCnt)
    INC iCnt
    TRY Thermostat.Add(aN, sThermostat)
  LOOP UNTIL ERROR = FALSE

  INC lcThermostat.Rows.Count
  lcThermostat[iRow, 0].Text = sThermostat
  lcThermostat.Rows.Height = 27

END

PUBLIC SUB lcThermostat_Menu()

  IF lcThermostat.Column > 0 THEN MenuProfiles.Popup()

END

PUBLIC SUB Action_Activate(sKey AS String) AS Boolean

  lcThermostat.Current.Text = sKey
  lcThermostat.Current.Picture = FEditEventThermostatProfiles.GetProfilePicture(sKey)
  Thermostat[lcThermostat[lcThermostat.Row, 0].Text][lcThermostat.Column - 1] = sKey

END

PUBLIC SUB btnRemove_Click()

  IF lcThermostat.Row > 0 THEN
    IF lcThermostat.Rows[lcThermostat.Row].Selected THEN
      Thermostat.Remove(lcThermostat[lcThermostat.Row, 0].Text)
      lcThermostat.Rows.Remove(lcThermostat.Row)
    ENDIF
  ENDIF

END

PUBLIC SUB lcThermostat_Activate()

  IF lcThermostat.Column = 0 THEN
    txtRenameBox.X = lcThermostat.Current.X + lcThermostat.X
    txtRenameBox.Y = lcThermostat.Current.Y + lcThermostat.Y
    txtRenameBox.Text = lcThermostat[lcThermostat.Row, 0].Text
    txtRenameBox.Show()
    lcThermostat.Enabled = FALSE
  ENDIF

END

PUBLIC SUB txtRenameBox_Activate()

  txtRenameBox.Hide()
  lcThermostat[lcThermostat.Row, 0].Text = txtRenameBox.Text
  RebuildThermostat()
  lcThermostat.Enabled = TRUE

END

PUBLIC SUB RebuildThermostat()

  DIM iCnt AS Integer

  Thermostat.Clear()
  FOR iCnt = 0 TO lcThermostat.Rows.Count - 1
    Thermostat[lcThermostat[iCnt, 0].Text] = NEW String[7]
    Thermostat[lcThermostat[iCnt, 0].Text][0] = lcThermostat[iCnt, 1].Text
    Thermostat[lcThermostat[iCnt, 0].Text][1] = lcThermostat[iCnt, 2].Text
    Thermostat[lcThermostat[iCnt, 0].Text][2] = lcThermostat[iCnt, 3].Text
    Thermostat[lcThermostat[iCnt, 0].Text][3] = lcThermostat[iCnt, 4].Text
    Thermostat[lcThermostat[iCnt, 0].Text][4] = lcThermostat[iCnt, 5].Text
    Thermostat[lcThermostat[iCnt, 0].Text][5] = lcThermostat[iCnt, 6].Text
    Thermostat[lcThermostat[iCnt, 0].Text][6] = lcThermostat[iCnt, 7].Text
  NEXT

END

PUBLIC SUB btnEditProfiles_Click()

  FEditEventThermostatProfiles.ShowModal()
  LoadProfiles()
  FillProfileMenu()
  LoadTable()

END
