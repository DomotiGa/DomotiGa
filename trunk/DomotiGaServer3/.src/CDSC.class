' Gambas class file

' Description:
' CDSC.class
' Support for DSC Security Panels.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' This module is written by and Copyright(C) 2009-2010 Timo Sariwating

' Read file called COPYING for license details.

Property Port As String
Property Baud As String
Property DSCDebug As Boolean

Private sPort As String
Private sBaud As String
Private bDSCDebug As Boolean

Public hDSC As New SerialPort
Public tDSC As New Timer

Public sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hDSC.Close

  ' get a new one
  hDSC = New Serialport As "DSC"

  With hDSC
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .EndOfLine = 1
    .Open()
  End With

  DSC_Descriptive_Arming()
  DSC_System_Time()
  DSC_LCDText()
  TX("001")

   ' start poll timer for DSC status LED
  tDSC = New Timer As "tDSCLED"
  tDSC.Delay = 250
  tDSC.Stop

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("DSC Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Enable Descriptive Arming
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DSC_Descriptive_Arming()

  TX("0501")
  Main.WriteDebugLog(("[DSC] Descriptive Arming Enabled"))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send System Time to DSC Panel
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DSC_System_Time()

  Dim sTime_Now As String

  sTime_Now = "010" & Format$(Now, "hhnnmmddyy")
  TX(sTime_Now)
  Main.WriteDebugLog(("[DSC] System time set to ") & Now & (" on alarm system"))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read Serial Port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DSC_Read()

  Dim sData As String

  Read #hDSC, sData, 1
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then RX(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' RX - Process the Received Data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RX(sStr As String)

  Dim sString, sCommand, sData, sChecksum, sCheckSumCalculating, sCheckSumCalculated As String
  Dim iCheckSumFloat, iInd, iDeviceId, iVirtDeviceId As Integer

  ' read rs-232 datastream
  sCommand = Left$(sStr, 3)
  sData = Left$(Mid$(sStr, 4, Len(sStr)), -3)
  sChecksum = Right$(sStr, 3)

  ' calculate checksum
  For iInd = 1 To Len(sCommand)
    sCheckSumCalculating = Asc(Mid$(sCommand, iInd, 1))
    iCheckSumFloat = iCheckSumFloat + sCheckSumCalculating
  Next
    For iInd = 1 To Len(sData)
    sCheckSumCalculating = Asc(Mid$(sData, iInd, 1))
    iCheckSumFloat = iCheckSumFloat + sCheckSumCalculating
  Next
  sCheckSumCalculated = Right$(Hex$(iCheckSumFloat), 2)

  ' process if checksum is ok
  If Val(sChecksum) = Val(sCheckSumCalculated)

    iVirtDeviceId = Devices.FindVirtualDeviceID("securitysystem")

    Select Case sCommand
      Case 500
        Main.WriteLog(("[DSC] Command Acknowledge ") & sData)
      Case 501
        Main.WriteLog(("[DSC] Bad Checksum [501]"))
      Case 502
        Error_Code(sData)
      Case 550
        Main.WriteDebugLog(("[DSC] System Time ") & sData)
      Case 561
        Main.WriteDebugLog(("[DSC] Indoor Temperature ") & sData)
      Case 562
        Main.WriteDebugLog(("[DSC] Outdoor Temperature ") & sData)
      Case 601
        Main.WriteLog(("[DSC] Partition ") & Left$(sData, 1) & (" Zone ") & Right$(sData, -1) & (" !ALARM!"))
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC5401 Interface"), "DSC DWS")
        If iDeviceId Then
          Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System in Alarm <>", Devices.FindNameForDevice(iDeviceId))
          If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "!ALARM!", "", Devices.FindNameForDevice(iDeviceId), "")
          If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is in Alarm! Zone: " & Devices.FindNameForDevice(iDeviceId)), Main.sSMSContact)
        Else
          Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System in Alarm <>", ("Zone " & Right$(sData, -1)))
          If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "!ALARM!", "", "Zone " & Right$(sData, -1), "")
          If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is in Alarm! Zone: " & Right$(sData, -1)), Main.sSMSContact)
        End If
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 602
        Main.WriteLog(("[DSC] Partition ") & Left$(sData, 1) & (" Zone ") & Right$(sData, -1) & (" Alarm Restored"))
      Case 603
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC5401 Interface"), "DSC DWS")
        If iDeviceId Then
          Main.WriteLog(("[DSC] Partition ") & Left$(sData, 1) & (" Zone ") & Right$(sData, -1) & " " & Devices.FindNameForDevice(iDeviceId) & (" Tamper"))
          Devices.ValueUpdate(iDeviceId, "", "Tamper", "", "")
        End If
      Case 604
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC5401 Interface"), "DSC DWS")
        If iDeviceId Then
          Main.WriteDebugLog(("[DSC] Partition ") & Left$(sData, 1) & (" Zone ") & Right$(sData, -1) & " " & Devices.FindNameForDevice(iDeviceId) & (" Tamper Restored"))
          Devices.ValueUpdate(iDeviceId, "", "Secure", "", "")
        End If
      Case 605
        Main.WriteDebugLog(("[DSC] Zone ") & sData & (" Fault"))
      Case 606
        Main.WriteDebugLog(("[DSC] Zone ") & sData & (" Fault Restored"))
      Case 609
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC5401 Interface"), "DSC PIR")
        If bDSCDebug And iDeviceId Then
          Main.WriteDebugLog(("[DSC] Zone ") & sData & " " & Devices.FindNameForDevice(iDeviceId) & (" Open"))
        End If
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, "Motion", "", "", "")
        End If
      Case 610
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC5401 Interface"), "DSC PIR")
        If bDSCDebug And iDeviceId Then
          Main.WriteDebugLog(("[DSC] Zone ") & sData & " " & Devices.FindNameForDevice(iDeviceId) & (" Restored"))
        End If
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, "No Motion", "", "", "")
        End If
      Case 620
        If bDSCDebug Then
          Main.WriteDebugLog(("[DSC] Duress Alarm ") & sData)
        End If
      Case 621
        Main.WriteLog(("[DSC] Fire Alarm Key Activated"))
      Case 622
        Main.WriteDebugLog(("[DSC] Fire Alarm Key Restored"))
      Case 623
        Main.WriteLog(("[DSC] Key Alarm Key Activated"))
      Case 624
        Main.WriteDebugLog(("[DSC] Key Alarm Restored"))
      Case 625
        Main.WriteLog(("[DSC] Panic Key Alarm Activated"))
      Case 626
        Main.WriteDebugLog(("[DSC] Panel Key Alarm Restored"))
      Case 631
        Main.WriteDebugLog(("[DSC] 2-Wire Smoke Alarm Activated"))
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC5401 Interface"), "DSC SMOKE")
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, "Panic", "", "", "")
        End If
      Case 632
        Main.WriteDebugLog(("[DSC] 2-Wire Smoke Alarm Restored"))
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC5401 Interface"), "DSC SMOKE")
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, "Normal", "", "", "")
        End If
      Case 650
        If bDSCDebug Then
          Main.WriteDebugLog("[DSC] Partition " & sData & " Ready")
        End If
        Try Main.hDB.Exec("UPDATE security SET ready = TRUE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "Ready", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 651
        If bDSCDebug Then
          Main.WriteDebugLog(("[DSC] Partition ") & sData & (" Not Ready"))
        End If
        Try Main.hDB.Exec("UPDATE security SET ready = FALSE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "Not Ready", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 652
        Try Main.hDB.Exec("UPDATE security SET ready = FALSE, armed = TRUE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", " ", "", "")
        Select Case Right$(sData)
          Case 0
            Main.WriteLog(("[DSC] Partition ") & Left$(sData) & (" Armed Away"))
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Away Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Away", "", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
          Case 1
            Main.WriteLog(("[DSC] Partition ") & Left$(sData) & (" Armed Stay"))
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Stay Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Stay", "", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
          Case 2
            Main.WriteLog(("[DSC] Partition ") & Left$(sData) & (" Armed Zero Entry Away"))
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Zero Entry Away Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Zero Entry Away", "", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
          Case 3
            Main.WriteLog(("[DSC] Partition ") & Left$(sData) & (" Armed Zero Entry Stay"))
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Zero Entry Stay Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Zero Entry Stay", "", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
        End Select
      Case 654
        Main.WriteLog(("[DSC] Partition ") & sData & (" !ALARM!"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "!ALARM!", "Partition " & sData, "", "")
      Case 655
        Main.WriteLog(("[DSC] Partition ") & sData & (" Disarmed"))
        Try Main.hDB.Exec("UPDATE security SET ready = TRUE, armed = FALSE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Disarmed", "Ready", "", "")
        DSC_LCDText()
      Case 656
        Main.WriteLog(("[DSC] Exit Delay Partition ") & sData)
        Try Main.hDB.Exec("UPDATE security SET armed = TRUE, lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "Exit Delay in", "Progress")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Exit Delay", "Arming", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 657
        Main.WriteLog(("[DSC] Entry Delay Partition ") & sData)
        Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "Entry Active", "Enter Your Code")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Entry Delay", "", "", "")
        Main.BroadcastEvent("[SecurityUpdate] Entry")
      Case 658
        Main.WriteLog(("[DSC] Keypad Lock-out Partition ") & sData)
      Case 670
        Main.WriteLog(("[DSC] Invalid Acces Code Partition ") & sData)
        Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "Invalid Access Code", "")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Invalid Access Code", "", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 671
        Main.WriteDebugLog(("[DSC] Function Not Available Partition ") & sData)
      Case 700
        Main.WriteLog(("[DSC] Partition ") & Left$(sData, 1) & (" armed by user ") & Right$(sData, -1))
      Case 701
        Main.WriteLog(("[DSC] Special Closing Partition ") & sData)
      Case 702
        Main.WriteLog(("[DSC] Partial Closing Partition ") & sData)
      Case 750
        Main.WriteLog(("[DSC] Partition ") & Left$(sData, 1) & (" disarmed by user ") & Right$(sData, -1))
      Case 751
        Main.WriteLog(("[DSC] Special Opening Partition ") & sData)
      Case 800
        Main.WriteLog(("[DSC] Panel Battery Trouble"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Battery Trouble", "")
      Case 801
        Main.WriteDebugLog(("[DSC] Panel Battery Trouble Restore"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 802
        Main.WriteLog(("[DSC] Panel AC Trouble"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "AC Trouble", "")
      Case 803
        Main.WriteLog(("[DSC] Panel AC Trouble Restore"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 806
        Main.WriteLog(("[DSC] System Bell Trouble"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Bell Trouble", "")
      Case 807
        Main.WriteDebugLog(("[DSC] System Bell Trouble Restored"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 810
        Main.WriteLog(("[DSC] TLM Trouble"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "TLM Trouble", "")
      Case 811
        Main.WriteDebugLog(("[DSC] TLM Trouble Restored"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 812
        Main.WriteLog(("[DSC] TLM Line 2 Trouble"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "TLM Line 2 Trouble", "")
      Case 813
        Main.WriteDebugLog(("[DSC] TLM Line 2 Trouble Restored"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 814
        Main.WriteLog(("[DSC] FTC Trouble"))
      Case 816
        Main.WriteLog(("[DSC] Event Buffer Near Full"))
      Case 821
        Main.WriteLog(("[DSC] Wireless Low Battery Zone ") & sData)
      Case 822
        Main.WriteDebugLog(("[DSC] Wireless Low Battery Restore Zone ") & sData)
      Case 825
        Main.WriteLog(("[DSC] Wireless Low Battery Key ") & sData)
      Case 826
        Main.WriteDebugLog(("[DSC] Wireless Low Battery Restore Key ") & sData)
      Case 827
        Main.WriteLog(("[DSC] Wireless Low Battery Handheld ") & sData)
      Case 828
        Main.WriteDebugLog(("[DSC] Wireless Low Battery Restore Handheld ") & sData)
      Case 829
        Main.WriteLog(("[DSC] General System Tamper"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "System Tamper", "")
      Case 830
        Main.WriteDebugLog(("[DSC] General System Tamper Restored"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 831
        Main.WriteLog(("[DSC] ESCORT 5580TC Trouble"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "ESCORT 5580TC Trouble", "")
      Case 832
        Main.WriteDebugLog(("[DSC] ESCORT 5580TC Trouble Restored"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 840
        Main.WriteDebugLog(("[DSC] Trouble Status Partition ") & sData)
        Try Main.hDB.Exec("UPDATE security SET trouble = TRUE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Trouble " & sData, "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 841
        Main.WriteDebugLog(("[DSC] Trouble Status Partition ") & sData & (" Restored"))
        Try Main.hDB.Exec("UPDATE security SET trouble = FALSE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 842
        Main.WriteLog(("[DSC] Fire Trouble Alarm"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Fire Trouble", "")
      Case 843
        Main.WriteDebugLog(("[DSC] Fire Trouble Restored"))
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 900
        Main.WriteLog(("[DSC] Code Required"))
        Main.BroadcastEvent("[SecurityUpdate] Entry")
    End Select
    ' checksum not ok
  Else
    Main.WriteDebugLog(("[DSC] Bad CheckSum"))
  End If

  Main.ControlLed("DSC", "On")
  tDSC.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process Error Codes
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Error_Code(sStr As String)

  Select Case Val(sStr)
    Case 000
      Main.WriteLog(("[DSC] System Error - No Error"))
    Case 001
      Main.WriteLog(("[DSC] System Error - RS-232 Receive Buffer Overrun"))
    Case 002
      Main.WriteLog(("[DSC] System Error - RS-232 Receive Buffer Overfow"))
    Case 003
      Main.WriteLog(("[DSC] System Error - Keybus Transmit Buffer Overrun"))
    Case 010
      Main.WriteLog(("[DSC] System Error - Keybus Transmit Buffer Overrun"))
    Case 011
      Main.WriteLog(("[DSC] System Error - Keybus Transmit Time Timeout"))
    Case 012
      Main.WriteLog(("[DSC] System Error - Keybus Transmit Mode Timeout"))
    Case 013
      Main.WriteLog(("[DSC] System Error - Keybus Transmit Keystring Timeout"))
    Case 014
      Main.WriteLog(("[DSC] System Error - Keybus Not Functioning"))
    Case 015
      Main.WriteLog(("[DSC] System Error - Keybus Busy (Attempting to Arm / Disarm)"))
    Case 016
      Main.WriteLog(("[DSC] System Error - Keybus Busy (Lockout)"))
    Case 017
      Main.WriteLog(("[DSC] System Error - Keybus Busy (Installers Mode)"))
    Case 020
      Main.WriteLog(("[DSC] System Error - API Command Syntax Error"))
    Case 021
      Main.WriteLog(("[DSC] System Error - API Command Partition Error"))
    Case 022
      Main.WriteLog(("[DSC] System Error - API Command Not Supported"))
    Case 023
      Main.WriteLog(("[DSC] System Error - API System Not Armed"))
    Case 024
      Main.WriteLog(("[DSC] System Error - API System Not Ready to Arm"))
      Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1 WHERE id = 0", "System not Ready to Arm")
      Main.BroadcastEvent("[SecurityUpdate]")
    Case 025
      Main.WriteLog(("[DSC] System Error - API Command Invalid Length"))
    Case 026
      Main.WriteLog(("[DSC] System Error - API User Code Not Required"))
    Case 027
      Main.WriteLog(("[DSC] System Error - API Invalid Characters in Command"))
    Case Else
      Main.WriteLog(("[DSC] System Error - ") & sStr)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' TX - Calculate the CheckSum and Transmit the data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub TX(sStr As String)

  Dim sCheckSumCalculating, sCheckSumCalculated As String
  Dim iCheckSumFloat, iInd As Integer

  ' calculate checksum
  For iInd = 1 To Len(sStr)
    sCheckSumCalculating = Asc(Mid$(sStr, iInd, 1))
    iCheckSumFloat = iCheckSumFloat + sCheckSumCalculating
  Next
  sCheckSumCalculated = Right(Hex$(iCheckSumFloat), 2)

  Print #hDSC, sStr & sCheckSumCalculated

End

Public Sub tDSCLED_Timer()

  Main.ControlLed("DSC", "Off")
  tDSC.Stop

End

Public Sub DSC_LCDText()

  Dim sLCDTime As String = Format$(Now(), "dd/mmmm/yyyy hh:nn")

  Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "DSC Security", sLCDTime)
  Main.BroadcastEvent("[SecurityUpdate]")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hDSC.Close
  Main.WriteLog(("DSC serial port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("DSC Error: ") & ERROR.Text)
  Return False

End

' implement properties
Private Function Port_Read() As String

  Return sPort

End

Sub Port_Write(Value As String)

  sPort = Value

End

Private Function Baud_Read() As String

  Return sBaud

End

Private Sub Baud_Write(Value As String)

  sBaud = Value

End

Private Function DSCDebug_Read() As Boolean

  Return bDSCDebug

End

Private Sub DSCDebug_Write(Value As Boolean)

  bDSCDebug = Value

End
