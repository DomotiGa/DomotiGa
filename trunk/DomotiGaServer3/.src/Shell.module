' Gambas module file

' Description:
' Execute.module
' Support for getting shell script output in device values.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

Public tShell As Timer
Private hShell As Process
Private cOutput As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for Shell
  tShell = New Timer As "tShell"
  tShell.Delay = Main.iShellPollTime * 1000 ' multiply for seconds
  tShell.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tShell_Timer()

  CheckShell()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices of type Shell and run command to get value(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckShell()

  Dim rResult As Result
  Dim iInterface As Integer

  ' get all devices with this devicetype
  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("Shell Interface"))
  If rResult.Available Then
    If rResult.Count >= 1 Then
      For Each rResult
        If Main.bShellDebug Then Main.WriteDebugLog(("[Shell] Getting value(s) for device '") & rResult!name & ("' with command '") & rResult!address & "'.")
        RunShellCommand(rResult!id, rResult!address)
      Next
    Else
      Main.WriteLog(("Shell: No devices of type shell script found in device table!"))
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run command to get value(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub RunShellCommand(iId As Integer, sAddress As String)

  hShell = Exec [sAddress] For Read As "Shell"
  hShell.Tag = iId
  cOutput.Add("", iId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read command output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Shell_Read()

  Dim sBuffer As String
  Dim iId As Integer

  Read #Last, sBuffer, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and returned value(s) and store them
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Shell_Kill()

  Dim iId, iRc, iCnt As Integer
  Dim sOutput, sLine, sValue, sValue2, sValue3, sValue4 As String

  iId = Last.Tag
  iRc = Last.Value

  ' save shell output
  sOutput = cOutput[iId]
  cOutput.Remove(iId)

  Select iRC
    Case 0
      For Each sLine In Split(sOutput, "\n")
        Select iCnt
          Case 0
            sValue = sLine
          Case 1
            sValue2 = sLine
          Case 2
            sValue3 = sLine
          Case 3
            sValue4 = sLine
        End Select
        Inc iCnt
      Next
      ' debug output
      If Main.bShellDebug Then
        Main.WriteDebugLog("[Shell] < '" & sOutput)
        Main.WriteDebugLog(("[Shell] Device with id '") & iId & ("' returned value(s)") & IIf(sValue, " '" & sValue & "'", "") & IIf(sValue2, " '" & sValue2 & "'", "") & IIf(sValue3, " '" & sValue3 & "'", "") & IIf(sValue4, " '" & sValue4 & "'", "") & ".")
      Endif
      ' find and update device
      Devices.CheckFirstSeen(iId)
      Devices.ValueUpdate(iId, sValue, sValue2, sValue3, sValue4)
    Case 127
      If Main.bShellDebug Then Main.WriteDebugLog(("[Shell] Command of device with id '") & iId & ("' not found!"))
    Case Else
      If Main.bShellDebug Then Main.WriteDebugLog(("[Shell] Device with id '") & iId & ("' returned unknown shell error '" & iRc & "'"))
    End Select

Catch
  Main.WriteDebugLog(("ERROR: Parsing Shell Result: ") & Error.Text & " at " & Error.Where)

End
