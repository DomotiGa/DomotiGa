' Gambas module file

' Description:
' Ping.module
' Support for Network related devices.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tPing AS Timer
PRIVATE hPing AS Process

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Run()

  ' start poll timer for Ping
  tPing = NEW Timer AS "tPing"
  tPing.Delay = Main.iPingPollTime * 1000 ' multiply for seconds
  tPing.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tPing_Timer()

  CheckPing()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices with type Ping and see if we can ping it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CheckPing()

  DIM rResult AS Result
  DIM iInterface AS Integer

  ' get all devices with this devicetype
  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("Ping Socket"))
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      FOR EACH rResult
        IF Main.bPingDebug THEN Main.WriteDebugLog(("[Ping] Checking '") & rResult!name & ("' with address '") & rResult!address & "'.")
        ' try to fetch their index page
        NetworkPing(rResult!id, rResult!address)
      NEXT
    ELSE
      Main.WriteLog(("Ping: No Network devices found in device table!"))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' try to ping the Device to detect if it's up or down
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB NetworkPing(iId AS Integer, sAddress AS String)

  hPing = EXEC ["ping", "-c1", sAddress] FOR READ AS "Ping"
  hPing.Tag = iId

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and return value, 0 means ok, anything else is not reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Ping_Kill()

  DIM iId, iRc AS Integer
  DIM sStatus, sType AS String

  iId = LAST.Tag
  iRc = LAST.Value

  sType = Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iId))

  SELECT sType
    CASE "Status AIBO"
      IF iRc = 0 THEN
        ' ping succesfull
        sStatus = ("Awake")
      ELSE
        ' not reachable, unknown host etc.
        sStatus = ("Sleeping")
      END IF
    CASE "Status On/Off"
      IF iRc = 0 THEN
        ' ping succesfull
        sStatus = ("On")
      ELSE
        ' not reachable, unknown host etc.
        sStatus = ("Off")
      END IF
    CASE "Status Up/Down"
      IF iRc = 0 THEN
        ' ping succesfull
        sStatus = ("Up")
      ELSE
        ' not reachable, unknown host etc.
        sStatus = ("Down")
      END IF
  END SELECT
  ' debug output
  IF Main.bPingDebug THEN Main.WriteDebugLog(("[Ping] Device with id '") & iId & ("' is '") & sStatus & "'.")
  ' find and update device
  Devices.ValueUpdate(iId, sStatus, "", "", "")

END
