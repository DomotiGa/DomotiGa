' Gambas module file

' Description:
' VoiceText.module
' Support for VoiceText, Cepstral's Swift, and espeak.

' Development Status:
' Not implemented completely, but it works.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE sOutput AS String

PUBLIC SUB Speak(sText AS String, OPTIONAL sSex AS String)

  DIM sVoiceSex AS String

  IF Main.GlobalVar["Mute"] THEN
    Main.WriteSpeakLog(("[Muted] '") & sText & "'")
  ELSE
    Main.WriteSpeakLog("'" & sText & "'")
    IF Main.bVoiceTextEnabled AND Main.sVoiceTextEngine = "cepstral" THEN
      IF sSex THEN
        SELECT CASE sSex
          CASE "female"
            sVoiceSex = PickVoice(Main.sVoiceTextVoicesFemale)
          CASE "male"
            sVoiceSex = PickVoice(Main.sVoiceTextVoicesMale)
          CASE ELSE
            sVoiceSex = sSex
        END SELECT
      ELSE
        sVoiceSex = PickVoice(Main.sVoiceTextVoicesFemale)
      END IF
      IF Main.bStandalone THEN
        ' Swift command-line synthesis program
        ' Version 5.1.0 of July 2008
        ' Copyright (c) 2000-2006, Cepstral LLC.

        ' Voice      | Version | Lic? | Gender | Age | Language         | Sample Rate
        ' -----------|---------|------|--------|-----|------------------|------------
        ' Linda      | 5.1.0   | Yes  | female | 25  | US English       | 16000 Hz
        ' Emily      | 5.1.0   | Yes  | female | 30  | US English       | 16000 Hz

        ' swift -n voice 'text to speak'

        IF NOT Main.sVoiceTextPrefixCmd THEN
          EXEC ["swift", "-n", sVoiceSex, "'" & sText & "'"] FOR READ AS "Speaking"
        ELSE
          EXEC [Main.sVoiceTextPrefixCmd, "swift", "-n", sVoiceSex, "'" & sText & "'"] FOR READ AS "Speaking"
        END IF
      ELSE
        XMLClient.VoiceTextSpeak(sText, sVoiceSex)
      END IF
    ELSE IF Main.bVoiceTextEnabled AND Main.sVoiceTextEngine = "espeak" THEN
      IF Main.bStandalone THEN
        ' espeak -v voice 'text to speak'
        IF NOT Main.sVoiceTextPrefixCmd THEN
          EXEC ["espeak", "-v", Main.sVoiceTextVoicesMale, "'" & sText & "'"] FOR READ AS "Speaking"
        ELSE
          EXEC [Main.sVoiceTextPrefixCmd, "espeak", "-v", Main.sVoiceTextVoicesMale, "'" & sText & "'"] FOR READ AS "Speaking"
        END IF
      ELSE
        XMLClient.VoiceTextSpeak(sText, Main.sVoiceTextVoicesMale)
      END IF
    END IF
  END IF

END

PUBLIC SUB Speaking_Read()

  DIM sLine AS String

  READ #LAST, sLine, -256
  sOutput &= sLine

END

PUBLIC SUB Speaking_Error(sString AS String)

  Main.WriteDebugLog("[VoiceText] " & Replace$(sString, "\n", ""))

END

PUBLIC SUB Speaking_Kill()

  IF Main.bVoiceTextDebug AND sOutput THEN Main.WriteDebugLog("[VoiceText] " & sOutput)

END

PUBLIC SUB PickVoice(sVoices AS String) AS String

  DIM aVoices AS String[]
  DIM sVoice AS String

  ' split them up if more than one voice is specified
  aVoices = Split(sVoices, ",")
  IF aVoices.Count > 1 THEN
    ' pick a random one ourselfs
    RETURN aVoices[Rnd(aVoices.Count)]
  ELSE
    RETURN sVoices
  END IF

END
