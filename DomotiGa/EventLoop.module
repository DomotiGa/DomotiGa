' Gambas module file

' Description:
' EventLoop.module
' This is a program loop where all events run which are not started by a timer event.
' It will be run 4 times per second (every 250mS)

' Development Status:
' This currently holds hardcodes events, these should be places inside the database instead and
' should be configurable via a GUI.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC SUB Run()

  DIM sPlantTalk, sFrom, sTo, sSql AS String
  DIM rResult AS Result

  ' create new log files if needed
  IF Main.bNew_Month THEN
    Main.Setup_Logfiles()
  END IF

  ' put things that can be triggered on a minute boundary here
  ' this should be placed in a database table instead, with nice gui to manage. ;-)

  IF Main.bNew_Minute THEN

    Events.CheckTimeNowEvents()

    Devices.CheckRepeatDevice()
    Devices.CheckResetDevice()

    ' update DSC virtual LCD screen
    IF Main.hDSC THEN Main.hDSC.DSC_LCDText()

    ' run Z-Wave tasks
    IF Main.hZWave AND IF Main.bZWaveUseOZW THEN Main.hZWave.RunTasks

    ' store energy usage in database and rrd files every 5 minutes
    IF Main.GlobalVar["Minute"] MOD 5 = 0 THEN
      Energy.Log() ' write energy usage to *_usage tables
    ENDIF

    ' mail list of devices with low battery
    ' and fetch random quote for this day
    IF Main.bNew_Minute THEN
      ' Devices.MailBatteryStatus("all")
      Main.GlobalVar["Tagline"] = Main.Random_Text("remarks_tags")
    END IF

    ' generate plant watering messages
    IF Events.TimeCron("30 12,16,18 * * 0") THEN
      sPlantTalk = Main.Random_Text("remarks_plants")
      VoiceText.Speak(("Your plants want to be watered. They gave me the following message: ") & sPlantTalk)
      Twitter.PostTweet(("Your plants wrote this msg: ") & sPlantTalk)
    END IF

    ' if in normal/house mode, auto-go to mute mode
    IF Events.TimeCron("30 22 * * 0-4") AND InStr(Main.GlobalVar["House_Mode"], "normal") THEN
      VoiceText.Speak(("I am going to mute mode now. Nite nite."))
      Main.ChangeMuteMode(TRUE)
      Main.SetGlobalVar("Mode_Set", "auto")
    END IF

    ' if I auto-went to mute mode, go to normal mode (don't mess with manually overides)
    IF Events.TimeCron("0 7 * * 1-5") AND InStr(Main.GlobalVar["Mode_Set"], "auto") THEN
      Main.ChangeMuteMode(FALSE)
      VoiceText.Speak(("Gooooodmorning."))
    END IF

    ' home simulation
    IF Main.GlobalVar["Simulation"] = "On" THEN
      sFrom = Format(Date(Now() - 7), "yyyy-mm-dd") & " " & Format(Time(), "hh:nn")
      sTo = sFrom & ":59"
      sFrom = sFrom & ":00"
      sSql = "SELECT devices.name, devices_log. * FROM devices, devices_log where groups LIKE '%|Simulation|%' AND enabled = -1 AND Log = -1 AND (switchable = -1 OR dimable = -1) AND devices.id = deviceid AND devices_log.lastchanged >= '" & sFrom & "' and devices_log.lastchanged <='" & sTo & "'"
      rResult = Main.hDB.Exec(sSql)
      IF rResult.Count THEN
        IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Simulate] Got ") & rResult.Count & (" result(s)."))
        FOR EACH rResult
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Simulate] Setting device '") & rResult!name & "' to '" & rResult!value & "'")
          Devices.SetDevice(rResult!name, rResult!value)
        NEXT
      ENDIF
    ENDIF
  ENDIF

CATCH
  Main.WriteDebugLog(("[EventLoop.Run] Error ") & Error.Text & (" at ") & Error.Where)

END

PUBLIC SUB DeviceChanged(iId AS Integer, sField AS String, sValue AS String, sLabel AS String)

  ' log device status changes who are not hidden and have log changes enabled
  IF Devices.FindLogDisplayForDevice(iId) AND NOT Devices.FindHideForDevice(iId) THEN
    Main.WriteLog(Devices.FindNameForDevice(iId) & " status changed to " & sValue & IIf(sLabel, " " & sLabel, "") & ".")
  END IF

  Events.CheckDeviceChangeEvents(iId, sField, sValue)

  ' detect postal mail delivery
  IF Devices.FindNameForDevice(iId) = "Mailbox Sensor" AND IF sValue == "open" THEN
    ' grab video image with frontdoor camera
    IF Main.bVideoServerEnabled THEN
      VideoServer.Grab(0, ("Mailbox Status"), ("Someone just delivered you postal mail!"), Main.sEmailToAddress)
    END IF
    'Mail.SendMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", Main.sEmailToAddress)
    ' Mail.SendCaptureByMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", 0, Main.sEmailToAddress)
    Main.WriteLog(("Mail delivered at front door, sending an e-mail."))
    Twitter.PostTweet(("Mail is just delivered at the front door."))
  END IF

  ' detect doorbell ring
  IF Devices.FindNameForDevice(iId) = "Doorbell" AND IF sValue == "on" THEN
    ' grab video image with frontdoor camera
    IF Main.bVideoServerEnabled THEN
      VideoServer.Grab(0, ("Doorbell Status"), ("Someone just rang your doorbell!"), Main.sEmailToAddress)
    END IF
    Main.WriteLog(("Someone just rang the Doorbell, sending an e-mail."))
    Twitter.PostTweet(("Someone just rang the Doorbell."))
  END IF

  ' detect front door opening
  IF Devices.FindNameForDevice(iId) = "Front Door Sensor" AND IF sValue == "open" THEN
    ' grab video image with frontdoor camera
    IF Main.bVideoServerEnabled THEN
      VideoServer.Grab(0, ("Front Door Status"), ("Someone just opened the Front Door!"), Main.sEmailToAddress)
    END IF
    Main.WriteLog(("Someone just opened the front door, sending an e-mail."))
    Twitter.PostTweet(("Someone just opened the front door."))
  END IF

END
