' Gambas module file

' Description:
' EventLoop.module
' This is a program loop where all events run which are not started by a timer event.
' It will be run 4 times per second (every 250mS)

' Development Status:
' This currently holds hardcodes events, these should be places inside the database instead and
' should be configurable via a GUI.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called LICENSE for license details.

PUBLIC SUB Run()

  ' put things that can be triggered on a minute boundary here
  ' this should be placed in a database table instead, with nice gui to manage. ;-)

  IF Main.bNew_Minute THEN

    ' store power usage in database and rrd files every 5 minutes
    IF Main.GlobalVar["Minute"] MOD 5 = 0 THEN
      Energy.LogPower() ' write power usage to power_usage table
    END IF

    ' mail list of devices with low battery
    IF Main.Time_Now("00:05") THEN
      Devices.MailBatteryStatus()
    END IF

    ' control the porch light
    IF Main.Time_Now("18:00") THEN
      Devices.SetDevice("Porch Light", "On")
    END IF

    IF Main.Time_Now("6:30") THEN
      Devices.SetDevice("Porch Light", "Off")
    END IF

    ' generate plant watering messages
    IF Main.Time_Cron("30 12,16,18 * * 0") THEN
      VoiceText.Speak("Your plants want to be watered. They gave me the following message: " & Main.Random_Text("remarks_plants"))
    END IF

    ' if in normal/house mode, auto-go to mute mode
    IF Main.Time_Cron("30 22 * * 0-4") AND InStr(Main.GlobalVar["House_Mode"], "normal") THEN
      VoiceText.Speak("I am going to mute mode now. Nite nite.")
      Main.ChangeMuteMode(TRUE)
      Main.GlobalVar["Mode_Set"] = "auto"
    END IF

    ' if I auto-went to mute mode, go to normal mode (don't mess with manually overides)
    IF Main.Time_Cron("0 7 * * 1-5") AND InStr(Main.GlobalVar["Mode_Set"], "auto") THEN
      Main.ChangeMuteMode(FALSE)
      VoiceText.Speak("Gooooodmorning.")
    END IF
  END IF

END

PUBLIC SUB DeviceChange(iId AS Integer, sValue AS String, sLabel AS String, sLabel2 AS String, OPTIONAL sValue2 AS String)

  DIM sStatus AS String

  ' log device status changes who are not hidden and have log changes enabled
  IF Devices.FindLogForDevice(iId) AND NOT Devices.FindHideForDevice(iId) THEN
    sStatus = sValue & " " & sLabel
    IF sValue2 THEN sStatus &= " and " & sValue2 & " " & sLabel2
    Main.WriteLog(Devices.FindNameForDevice(iId) & " status changed to " & sStatus)
  END IF

  ' detect postal mail delivery
  ' bit of a hack, should be made more user-friendly
  IF Devices.FindNameForDevice(iId) = "Mailbox Sensor" AND IF sValue == "open" THEN
    ' grab video image with frontdoor camera
    IF Main.bVideoServerEnabled THEN VideoServer.Grab(0)
    Mail.SendMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", Main.sEmailToAddress)
    Main.WriteLog("Mail delivered at front door, sending an e-mail.")
  END IF

END
