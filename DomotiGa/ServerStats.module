' Gambas module file

' Description:
' ServerStats.module
' Support for server statistics monitoring.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tServerStats AS NEW Timer

PUBLIC FUNCTION CreateRRDs()

  DIM sRRDCmd, sRRD AS String

  sRRD = Main.sBaseDir &/ "rrd/serverload.rrd"
  IF NOT Exist(sRRD) THEN
    sRRDCmd = "rrdtool create " & sRRD & " -s 60 "
    sRRDCmd = sRRDCmd & "DS:load1:GAUGE:300:0:U "
    sRRDCmd = sRRDCmd & "DS:load5:GAUGE:300:0:U "
    sRRDCmd = sRRDCmd & "DS:load15:GAUGE:300:0:U "
    sRRDCmd = sRRDCmd & "RRA:AVERAGE:0.5:1:600 RRA:AVERAGE:0.5:2:600 RRA:AVERAGE:0.5:7:600 RRA:AVERAGE:0.5:30:600 RRA:AVERAGE:0.5:365:600"
    IF Main.bServerStatsDebug THEN
      Main.WriteDebugLog("[ServerStats] Create rrdtool database for system load.")
      Main.WriteDebugLog("[ServerStats] " & sRRDCmd)
    END IF
    SHELL sRRDCmd WAIT
  END IF
  sRRD = Main.sBaseDir &/ "rrd/servermemory.rrd"
  IF NOT Exist(sRRD) THEN
    sRRDCmd = "rrdtool create " & sRRD & " -s 60 "
    sRRDCmd = sRRDCmd & "DS:used:GAUGE:300:U:U "
    sRRDCmd = sRRDCmd & "DS:free:GAUGE:300:U:U "
    sRRDCmd = sRRDCmd & "DS:buffers:GAUGE:300:U:U "
    sRRDCmd = sRRDCmd & "DS:cached:GAUGE:300:U:U "
    sRRDCmd = sRRDCmd & "RRA:AVERAGE:0.5:1:600 RRA:AVERAGE:0.5:2:600 RRA:AVERAGE:0.5:7:600 RRA:AVERAGE:0.5:30:600 RRA:AVERAGE:0.5:365:600"
    IF Main.bServerStatsDebug THEN
      Main.WriteDebugLog("[ServerStats] Create rrdtool database for memory usage.")
      Main.WriteDebugLog("[ServerStats] " & sRRDCmd)
    END IF
    SHELL sRRDCmd WAIT
  END IF

END

PUBLIC FUNCTION Run()

  IF NOT Main.bRRDToolEnabled THEN RETURN

  CreateRRDs() ' check for missing rrd databases

  ' start poll timer for ServerStats
  tServerStats = NEW Timer AS "tServerStats"
  tServerStats.Delay = 60 * 1000 ' every minute
  tServerStats.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get cpuload and memory values and update rrd files
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION UpdateRRDs()

  DIM sLoad, sMemory, sRRDCmd, sVal AS String
  DIM aLoad, aMemory AS String[]
  DIM cVal AS NEW Collection

  ' run tool to fetch system load
  EXEC ["cat", "/proc/loadavg"] TO sLoad
  aLoad = Scan(sLoad, "* * * * *")
  'rrdtool update serverload.rrd N:$USER:$NICE:$SYSTEM:$IOWAIT:$IDLE
  sRRDCmd = "rrdtool update " & Main.sBaseDir &/ "rrd/serverload.rrd" & " N"
  sRRDCmd &= ":" & aLoad[0] & ":" & aLoad[1] & ":" & aLoad[2]
  IF Main.bServerStatsDebug THEN
    Main.WriteDebugLog("[ServerStats] " & sLoad)
    Main.WriteDebugLog("[ServerStats] " & sRRDCmd)
  ELSE
    sRRDCmd &= " >/dev/null" & " 2>&1"
  END IF
  SHELL sRRDCmd WAIT

  EXEC ["cat", "/proc/meminfo"] TO sMemory
  FOR EACH sVal IN Split(sMemory, "\n", "", TRUE)
    aMemory = Split(sVal, " ", "", TRUE)
    cVal[Left$(aMemory[0], -1)] = Val(aMemory[1])
  NEXT

  ' rrdtool update servermemory.rrd N:$MEMUSED:$MEMFREE:$BUFFERS:$CACHED
  sRRDCmd = "rrdtool update " & Main.sBaseDir &/ "rrd/servermemory.rrd" & " N"
  sRRDCmd = sRRDCmd & ":" & Str(cVal!MemTotal / 1024) & ":" & Str(cVal!MemFree / 1024) & ":" & Str(cVal!Buffers / 1024) & ":" & Str(cVal!Cached / 1024)
  IF Main.bServerStatsDebug THEN
    Main.WriteDebugLog("[ServerStats] MemTotal: " & cVal!MemTotal & " MemFree:" & cVal!MemFree & " Buffers: " & cVal!Buffers & " Cached: " & cVal!Cached)
    Main.WriteDebugLog("[ServerStats] " & sRRDCmd)
  ELSE
    sRRDCmd &= " >/dev/null" & " 2>&1"
  END IF
  SHELL sRRDCmd WAIT

END

PUBLIC SUB tServerStats_Timer()

  UpdateRRDs() ' update rrd values every polltime seconds

END

PUBLIC SUB DisplayGraphs(iMode AS Integer, sGroup AS String, oPanel AS Object)

  DIM pGraph AS Picture
  DIM sGraphs AS String[]
  DIM sList, sGraph, sType, sName AS String
  DIM hPictureBox AS PictureBox
  DIM oObject AS Object
  DIM iHeight AS Integer

  CreateGraphs()

  SELECT CASE iMode
    CASE 0
      sType = "1h"
      sName = ("Hour")
    CASE 1
      sType = "1d"
      sName = ("Day")
    CASE 2
      sType = "1w"
      sName = ("Week")
    CASE 3
      sType = "1m"
      sName = ("Month")
    CASE 4
      sType = "1y"
      sName = ("Year")
  END SELECT

  ' delete previous graphs first
  FOR EACH oObject IN oPanel.Children
    oObject.Delete()
  NEXT

  Main.DisplayHeader(sGroup & (" Performance - Last") & " " & sName, oPanel)
  sList = ServerStats.Graphs()
  sGraphs = Split(sList, "|")
  FOR EACH sGraph IN sGraphs
    IF sGraph THEN
      sGraph &= "-" & sType & ".png"
      TRY pGraph = Picture.Load(sGraph)
      IF pGraph THEN
        hPictureBox = NEW PictureBox(oPanel) AS "Graph"
        WITH hPictureBox
          .Picture = pGraph
          .Height = 200
          .Width = 528
          .Tag = sGraph
        END WITH
      END IF
    END IF
  NEXT
  iHeight = 0
  ' calculated needed scrollview height
  FOR EACH oObject IN oPanel.Children
    iHeight += oObject.Height
  NEXT
  oPanel.Height = iHeight

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create graphs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION CreateGraphs()

  DIM sRRD, sRRDCmd, sGraphImage, sRRDName, sTime AS String
  DIM aTimeFrame AS String[] = ["1h", "1d", "1w", "1m", "1y"]
  DIM aTimeStr AS String[]

  IF NOT Main.bRRDToolEnabled THEN RETURN

  sRRD = Main.sBaseDir &/ "rrd/serverload.rrd"
  ' rrdtool graph /home/ron/domotiga/rrd/graphs/server-load-hour.png --lazy --start -1h -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t "Power Usage - Last Hour" -v "Watt" DEF:watt=/home/ron/domotiga/rrd/powerusage.rrd:watt:AVERAGE LINE2:watt#00FF00:"Watt"
  FOR EACH sTime IN aTimeFrame
    sGraphImage = Main.sBaseDir &/ "rrd/graphs/server-load" & "-" & sTime & ".png"
    sRRDCmd = "rrdtool graph " & sGraphImage & " --lazy --units-exponent=0 --start -" & sTime & " -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t '" & Main.sServerStatsName & " " & ("System Load") & "' -v Load DEF:load1=" & sRRD & ":load1:AVERAGE LINE1:load1#8080ff:'1 Minute load average' DEF:load5=" & sRRD & ":load5:AVERAGE LINE1:load5#ff8080:'5 Minute load average' DEF:load15=" & sRRD & ":load15:AVERAGE LINE1:load15#000000:'15 Minutes load average'"
    IF Main.bServerStatsDebug THEN
      Main.WriteDebugLog("[ServerStats] " & sRRDCmd)
    ELSE
      sRRDCmd &= " >/dev/null" & " 2>&1"
    END IF
    SHELL sRRDCmd WAIT
  NEXT

  sRRD = Main.sBaseDir &/ "rrd/servermemory.rrd"
  ' rrdtool graph /home/ron/domotiga/rrd/graphs/server-memory-hour.png --lazy --start -1h -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t "Power Usage - Last Hour" -v "Watt" DEF:watt=/home/ron/domotiga/rrd/powerusage.rrd:watt:AVERAGE LINE2:watt#00FF00:"Watt"
  FOR EACH sTime IN aTimeFrame
    sGraphImage = Main.sBaseDir &/ "rrd/graphs/server-memory" & "-" & sTime & ".png"
    sRRDCmd = "rrdtool graph " & sGraphImage & " --lazy --base=1024 --alt-autoscale-max --lower-limit=0 --start -" & sTime & " -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t '" & Main.sServerStatsName & " " & ("Memory Usage") & "' -v MBytes DEF:a=" & sRRD & ":used:AVERAGE AREA:a#6666FF:'Used' DEF:b=" & sRRD & ":free:AVERAGE STACK:b#99FF66:'Free' DEF:c=" & sRRD & ":buffers:AVERAGE LINE2:c#FFFF00:'Buffers' DEF:d=" & sRRD & ":cached:AVERAGE LINE2:d#663300:'Cached'"
    IF Main.bServerStatsDebug THEN
      Main.WriteDebugLog("[ServerStats] " & sRRDCmd)
    ELSE
      sRRDCmd &= " >/dev/null" & " 2>&1"
    END IF
    SHELL sRRDCmd WAIT
  NEXT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return names of graph images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Graphs() AS String

  ' return string with all graph image names in this group
  RETURN "|" & Main.sBaseDir &/ "rrd/graphs/server-load" & "|" & Main.sBaseDir &/ "rrd/graphs/server-memory" & "|"

END
