' Gambas module file

' Description:
' TVGuide.module
' Download and parse XMLTV files.

' Development Status:
' Just started, lots of things to build!
' Only fetching channel icons and tvguide.xml is finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Almost all of this code is written by Kris Wauters on February, 14th - 2010
' For more info or help: kris@digitalplayground.be

' Read file called COPYING for license details.

PRIVATE hTVProcess AS Process
PRIVATE sMC2XMLLog AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' grab XML with grab command string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ImportGuide()

  IF NOT Main.bTVGuideEnabled THEN RETURN
  sMC2XMLLog = ""
  hTVProcess = SHELL (Main.sTVGuideXMLGrabCommand) FOR READ WRITE AS "hTVProcess"
  Main.WriteDebugLog(("[TVGuide] Started grabbing XML with '") & Main.sTVGuideXMLGrabCommand & "'.")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save grab command output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB hTVProcess_Read()

  '--- declare variables ---
  DIM sLine AS String

  READ #hTVProcess, sLine, Lof(hTVProcess)
  sMC2XMLLog = sMC2XMLLog & sLine

END

PUBLIC SUB hTVProcess_Kill()

  '--- declare variables ---
  DIM hFile AS File
  DIM sLine, sFile AS String = Temp()

  '--- command not found etc. ---
  IF hTVProcess.Value THEN Main.WriteDebugLog(("[TVGuide] Error return value: ") & hTVProcess.Value)

  File.Save(sFile, sMC2XMLLog)
  hFile = OPEN sFile FOR INPUT
  WHILE NOT Eof(hFile)
    LINE INPUT #hFile, sLine
    IF Left(sLine, 15) = "Start time .. :" THEN Main.WriteDebugLog(("[TVGuide] EPG - Valid from:") & " " & Right(sLine, Len(sLine) - 15))
    IF Left(sLine, 15) = "End time .... :" THEN Main.WriteDebugLog(("[TVGuide] EPG - Valid until:") & " " & Right(sLine, Len(sLine) - 15))
    IF Left(sLine, 15) = "Parsing ..... :" THEN Main.WriteDebugLog(("[TVGuide] Identifier:") & " " & Right(sLine, Len(sLine) - 15))
    IF Left(sLine, 15) = "Completed ... :" THEN Main.WriteDebugLog(("[TVGuide] Summary:") & " " & PushTVGuideXMLToDB(Main.sTVGuideXMLFile))
    IF Left(sLine, 15) = "Status ...... :" THEN Main.WriteDebugLog(("[TVGuide] Status:") & " " & Right(sLine, Len(sLine) - 15))
  WEND
  hFile.Close
  KILL sFile

END

' push the retrieved xml file to the DB
PUBLIC FUNCTION PushTVGuideXMLToDB(sData AS String) AS String

    ' declare variables
   DIM XmlR AS NEW XmlReader
   DIM iCI, iPI, iChannelCount, iProgramCount, iCategoriesCount AS Integer
   DIM sChannel, sProgram, sChannelInfo, sProgramInfo AS String
   DIM rRes AS Result

   ' init variables & cleanup database
   sChannelInfo = ("[TVGuide] Processing XML file ... Channels so far: ")
   sProgramInfo = ("[TVGuide] Processing XML file ... Programs so far: ")
   XmlR = NEW XmlReader
   XmlR.Open(sData)
   Main.hDB.Exec("UPDATE tv_channels SET isupdated = 0")
   Main.hDB.Exec("UPDATE tv_categories SET isupdated = 0")
   Main.hDB.Exec("UPDATE tv_subcategories SET isupdated = 0")
   Main.hDB.Exec("DELETE FROM tv_programs")
   sChannel = ""
   sProgram = ""
   iChannelCount = 0
   iProgramCount = 0
   iPI = 0
   iCI = 0

   ' loop trough the whole XML buffer
   WHILE NOT XmlR.Eof
    SELECT CASE XmlR.Node.Name
      CASE "display-name"
        INC iCI
      CASE "title", "desc", "category"
        INC iPI
    END SELECT
    IF XmlR.Node.name = "#text" THEN
      IF iCI = 6 THEN
        sChannel &= XmlR.Node.Value
        SaveChannelToDB(sChannel, Main.sActiveUserID)
      ELSE
        IF iPI = 2 OR IF iPI = 4 OR IF iPI = 6 OR IF iPI = 8 THEN
          sProgram &= XmlR.Node.value & "|"
        END IF
        IF iPI = 8 THEN
          SaveProgramToDB(sProgram, Main.sActiveUserID)
        END IF
      END IF
    ELSE
      ' here we have an XML node with subelements, split it up in different lines
      SELECT CASE XmlR.Node.Type
        CASE XmlReaderNodeType.Element
          IF XmlR.Node.Attributes.count > 0 THEN
            FOR EACH XmlR.Node.Attributes
              SELECT CASE XmlR.Node.Name
                CASE "id"
                  sChannel = XmlR.Node.Value & "|"
                  iCI = 1
                  INC iChannelCount
                  IF iChannelCount / 10 = Int(iChannelCount / 10) THEN
                    Main.WriteDebugLog(sChannelInfo & CStr(iChannelCount))
                    WAIT
                  END IF
                CASE "start"
                  sProgram = Left(XmlR.Node.Value, 12) & "|"
                  iPI = 1
                  INC iProgramCount
                  IF (iProgramCount / 1000 = Int(iProgramCount / 1000)) OR IF (iProgramCount = 1) THEN
                    Main.WriteDebugLog(sProgramInfo & CStr(iProgramCount))
                    WAIT
                  END IF
                CASE "stop"
                  sProgram &= Left(XmlR.Node.Value, 12) & "|"
                CASE "channel"
                  sProgram &= XmlR.Node.Value & "|"
              END SELECT
            NEXT
          END IF
        END SELECT
    END IF
    XmlR.Read()
   WEND
   XmlR.Close
   XmlR = NULL
   ' do a little cleanup in the channels
   Main.hDB.Exec("DELETE FROM tv_channels WHERE IsUpdated = 0")
   Main.hDB.Exec("DELETE FROM tv_categories WHERE IsUpdated = 0")
   Main.hDB.Exec("DELETE FROM tv_subcategories WHERE IsUpdated = 0")
   ' we converted all channels and programs, now update category/subcategory tables
   iCategoriesCount = UpdateTVCategories(Main.sActiveUserID)
   RETURN "Finished. " & iChannelCount & " " & ("Channels") & ", " & CStr(iCategoriesCount) & " " & ("Main Categories and") & " " & CStr(iProgramCount) & " " & ("Programs processed !")

CATCH
  Main.WriteDebugLog(("[TVGuide] Error parsing XML file: ") & Error.Text & (" at ") & Error.Where)

END

' write the info in the channeltag (taken from the MC XML file) into the database
PRIVATE SUB SaveChannelToDB(sChannelTag AS String, sUserID AS String)

  ' declare variables
  DIM rRes AS Result

  ' first check if channel already exists
  rRes = Main.hDB.Exec("SELECT * FROM tv_channels WHERE ChannelName = &1 AND ChannelID = &2", Main.ParseTag(sChannelTag, 2, "|"), Main.ParseTag(sChannelTag, 1, "|"))
  IF rRes THEN
    ' channel found, update modification info, and set IsUpdated
    IF rRes.Count THEN
      Main.hDB.Exec("UPDATE tv_channels SET IsUpdated = 1, ModificationDate = &1, FK_Users = &2 WHERE ChannelName = &3 AND ChannelID = &4", Format(Now, "yyyymmddhhnn"), sUserID, Main.ParseTag(sChannelTag, 2, "|"), Main.ParseTag(sChannelTag, 1, "|"))
    ELSE
      sChannelTag = Replace(sChannelTag, "'", "`")
      Main.hDB.Exec("INSERT INTO tv_channels (ChannelName, ChannelID, CreationDate, ModificationDate, FK_Users, IsUsed, IsUpdated) VALUES(&1,&2,&3,&4,&5,&6,&7)", Main.ParseTag(sChannelTag, 2, "|"), Main.ParseTag(sChannelTag, 1, "|"), Format(Now, "yyyymmddhhnn"), Format(Now, "yyyymmddhhnn"), sUserID, 0, 1)
    END IF
  END IF

END

' update the categories/categories table, based on contents of the tv_programs table
PRIVATE SUB UpdateTVCategories(sUserID AS String) AS Integer

  ' declare variables
  DIM rRes, rResTmp AS Result
  DIM bOK AS Boolean

  Main.WriteDebugLog(("[TVGuide] Processing Categories ..."))
  rRes = Main.hDB.Exec("SELECT DISTINCT CategoryName FROM tv_programs ORDER BY CategoryName")
  IF rRes THEN
    IF rRes.Count > 0 THEN
      FOR EACH rRes
        ' first check if category exists
        bOK = FALSE
        rResTmp = Main.hDB.Exec("SELECT * FROM tv_categories WHERE CategoryName = &1", rRes!CategoryName)
        IF rResTmp THEN
          ' category found, update it
          IF rResTmp.count > 0 THEN
            bOK = TRUE
            Main.hDB.Exec("UPDATE tv_categories SET IsUpdated = 1, ModificationDate = &1, FK_Users = &2 WHERE CategoryName = &3", Format(Now, "yyyymmddhhnn"), sUserID, rRes!CategoryName)
          END IF
        END IF
        ' when category not yet found, add it to database
        IF bOK = FALSE THEN
          Main.hDB.Exec("INSERT INTO tv_categories (CategoryName, CreationDate, ModificationDate, FK_Users, IsUpdated) VALUES(&1,&2,&3,&4,&5)", rRes!CategoryName, Format(Now, "yyyymmddhhnn"), Format(Now, "yyyymmddhhnn"), sUserID, 1)
        END IF
      NEXT
    END IF
  END IF
  ' return count of categories
  rRes = Main.hDB.Exec("SELECT * FROM tv_categories")
  IF rRes THEN
    IF rRes.count > 0 THEN
      RETURN rRes.Count
    END IF
  END IF

END

' write the info in the ProgramTag (taken from the XML file) into the database
PRIVATE SUB SaveProgramToDB(sProgramTag AS String, sUserID AS String)

  Main.hDB.Exec("INSERT INTO tv_programs (StartPoint, EndPoint, ChannelID, ProgramName, ProgramDescription, CategoryName, SubCategoryName, CreationDate, FK_Users) VALUES(&1,&2,&3,&4,&5,&6,&7,&8,&9)", Main.ParseTag(sProgramTag, 1, "|"), Main.ParseTag(sProgramTag, 2, "|"), Main.ParseTag(sProgramTag, 3, "|"), Main.ParseTag(sProgramTag, 4, "|"), Main.ParseTag(sProgramTag, 5, "|"), Main.ParseTag(sProgramTag, 6, "|"), Main.ParseTag(sProgramTag, 7, "|"), Format(Now, "yyyymmddhhnn"), sUserID)

END
