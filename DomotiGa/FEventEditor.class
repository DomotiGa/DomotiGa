' Gambas class file

' Description:
' FEventEditor.class
' Support for creating and editing of all events parameters.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright(C) 2010-2012 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultTriggerTypes AS Result
PRIVATE rResultTriggers AS Result
PRIVATE rResultConditions AS Result
PRIVATE rResultActions AS Result
PRIVATE $aActions AS NEW String[]
PUBLIC bAddEvent AS Boolean
PUBLIC iTrigger AS Integer
PUBLIC iAction AS Integer
PUBLIC iCondition AS Integer
PUBLIC iEditingCondition AS Integer
PUBLIC iEditingAction AS Integer

PUBLIC SUB Form_Open()

  IF bAddEvent THEN ME.Text = ("Create Event")
  ME.Move(FMain.X + 50, FMain.Y + 70)
  LoadEvent()

  btnMoveUpAction.Enabled = FALSE
  btnMoveDownAction.Enabled = FALSE
  btnRemoveAction.Enabled = FALSE
  btnInsertAction.Enabled = FALSE

END

PUBLIC SUB GetTriggers()

  ' fill combos with available triggers
  TRY rResultTriggers = Main.hDB.Exec("SELECT * FROM triggers order by name")
  cmbTrigger.Clear
  cmbTrigger.Add("")
  IF rResultTriggers THEN
    IF (rResultTriggers.Count >= 1) THEN
      FOR EACH rResultTriggers
        cmbTrigger.Add(rResultTriggers!name)
      NEXT
    ENDIF
  ELSE
    Message(("No triggers database table found!"))
  ENDIF

END

PUBLIC SUB GetConditions(oObject AS Object)

  ' fill combos with available conditions
  TRY rResultConditions = Main.hDB.Exec("SELECT * FROM conditions order by name")
  oObject.Clear
  oObject.Add("")
  IF rResultConditions THEN
    IF (rResultConditions.Count >= 1) THEN
      FOR EACH rResultConditions
        oObject.Add(rResultConditions!name)
      NEXT
    ENDIF
  ELSE
    Message(("No conditions database table found!"))
  ENDIF

END

PUBLIC SUB GetCategories()

  DIM rCategory AS Result
  DIM sKey AS String

  ' fill combo with available categories
  TRY rCategory = Main.hDB.Exec("SELECT * FROM category")
  cmbCategory.Clear
  cmbCategory.Add("")
  IF rCategory THEN
    IF (rCategory.Count >= 1) THEN
      FOR EACH rCategory
        cmbCategory.Add(rCategory!name)
      NEXT
    ENDIF
  ELSE
    Message(("No category database table found!"))
  ENDIF

END

PUBLIC SUB GetCategory() AS Integer

  DIM rCat AS Result
  DIM iCat AS Integer

  rCat = Main.hDB.Exec("SELECT * FROM category where name=&1", cmbCategory.Text)
  IF rCat.Count THEN iCat = rCat!id
  RETURN iCat

END

PUBLIC SUB GetCategoryName(iId AS Integer) AS String

  DIM rCat AS Result
  DIM sCat AS String

  rCat = Main.hDB.Exec("SELECT * FROM category where id=&1", iId)
  IF rCat.Count THEN sCat = rCat!name
  RETURN sCat

END

PUBLIC SUB GetActions()

  DIM rAction AS Result
  DIM sKey AS String

  ' fill combos with available actions
  TRY rResultActions = Main.hDB.Exec("SELECT * FROM actions order by name")
  cmbAction.Clear
  cmbAction.Add("")
  IF rResultActions THEN
    IF (rResultActions.Count >= 1) THEN
      FOR EACH rResultActions
        cmbAction.Add(rResultActions!name)
      NEXT
    ENDIF
  ELSE
    Message(("No actions database table found!"))
  ENDIF

  IF NOT bAddEvent THEN
    tvActions.Clear
    $aActions.Clear
    ' fill tableview with actions
    TRY rAction = Main.hDB.Exec("SELECT * FROM events_actions WHERE event = &1 ORDER BY events_actions.order", FEvents.txtCurEvent)
    IF NOT ERROR THEN
      IF rAction THEN
        FOR EACH rAction
          $aActions.Add(GetActionName(rAction!action), rAction!order)
        NEXT
        tvActions.Rows.Count = $aActions.Count
        tvActions.Rows.Resizable = FALSE
        tvActions.Columns.Count = 1
        tvActions.Columns.Resizable = FALSE
      ENDIF
    ENDIF
  ENDIF

END

PUBLIC SUB LoadEvent()

  DIM rResultActions AS Result

  btnEditCondition2.Enabled = FALSE

  GetTriggers()
  GetConditions(cmbCondition1)
  GetConditions(cmbCondition2)
  GetActions()
  GetCategories()

  IF NOT bAddEvent THEN
    ' get selected event values
    TRY rResult = Main.hDB.Exec("SELECT * FROM events WHERE id = &1", FEvents.txtCurEvent)
    IF NOT ERROR THEN
      IF rResult.Count >= 1 THEN
        tbName.Text = rResult!name
        IF rResult!lastrun THEN tbRunLast.Text = Replace$(Str$(Format(rResult!lastrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        IF rResult!firstrun THEN tbRunFirst.Text = Replace$(Str$(Format(rResult!firstrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        TRY chkEnabled.Value = rResult!enabled
        TRY chkReRun.Value = rResult!rerunenabled
        TRY spbReRunValue.Value = rResult!rerunvalue
        TRY cmbReRunType.Text = StripRerun(rResult!reruntype)
        TRY chkLog.Value = rResult!log
        txtDescription.Text = rResult!comments
        IF rResult!trigger1 THEN
          cmbTrigger.Text = GetTriggerName(rResult!trigger1)
          btnEditTrigger.Enabled = TRUE
        END IF
        IF rResult!condition1 THEN
          cmbCondition1.Text = GetConditionName(rResult!condition1)
          btnEditCondition1.Enabled = TRUE
        END IF
        IF rResult!condition2 THEN
          cmbCondition2.Text = GetConditionName(rResult!condition2)
          btnEditCondition2.Enabled = TRUE
        ELSE
          cmbCondition2.Enabled = FALSE
        END IF
        cmbOperand.Text = rResult!operand
        IF cmbOperand.Text THEN cmbCondition2.Enabled = TRUE
        TRY cmbCategory.Text = GetCategoryName(rResult!category)
      ELSE
        Message(("Couldn't load event record!"))
        ME.Close
      END IF
      btnRun.Enabled = TRUE 
    END IF
  END IF

END

PRIVATE SUB GetTriggerName(iId AS Integer) AS String

  DIM rResultTrig AS Result

  rResultTrig = Main.hDB.Exec("SELECT name FROM triggers WHERE id = &1", iId)
  TRY RETURN rResultTrig!name

END

PRIVATE SUB GetConditionName(iId AS Integer) AS String

  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT name FROM conditions WHERE id = &1", iId)
  TRY RETURN rResultCondition!name

END

PRIVATE SUB GetTriggerId(sName AS String) AS Integer

  DIM rResultTrig AS Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  IF rResultTrig THEN
    IF rResultTrig.Count = 1 THEN RETURN rResultTrig!id
  END IF

END

PRIVATE SUB GetConditionId(sName AS String) AS Integer

  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  IF rResultCondition THEN
    IF rResultCondition.Count = 1 THEN RETURN rResultCondition!id
  END IF

END

PRIVATE SUB GetActionId(sName AS String) AS Integer

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  IF rResultAction THEN
    IF rResultAction.Count THEN
      RETURN rResultAction!id
    END IF
  ELSE
    RETURN 0
  END IF

END

PRIVATE SUB GetActionName(iId AS Integer) AS String

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT name FROM actions WHERE id = &1", iId)
  TRY RETURN rResultAction!name

END

PUBLIC SUB tbName_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnCancel_Click()

  bAddEvent = FALSE
  ME.Close

END

PUBLIC SUB btnDeleteEvent_Click()

  SELECT Message.Question(("Are you sure that you want to delete this event?"), ("Yes"), ("No"))
    CASE 1
      Main.hDB.Exec("DELETE FROM events WHERE id = &1", rResult!id)
      Main.hDB.Exec("DELETE FROM events_actions WHERE event = &1", rResult!id)
      ME.Close
      FEvents.UpdateEventView()
  END SELECT

END

PUBLIC SUB btnNewEvent_Click()

  bAddEvent = TRUE
  btnSave_Click()

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM sSql AS String
  DIM iTriggerId1, iConditionId1, iConditionId2, iCnt, iEventId AS Integer

  IF cmbTrigger.Text THEN
    iTriggerId1 = GetTriggerId(cmbTrigger.Text)
  ELSE
    Balloon(("Please select a trigger!"), cmbTrigger)
    RETURN
  ENDIF
  IF cmbCondition1.Text THEN
    iConditionId1 = GetConditionId(cmbCondition1.Text)
  ENDIF
  IF cmbCondition2.Text THEN
    iConditionId2 = GetConditionId(cmbCondition2.Text)
  ENDIF
  IF chkEnabled.Value = FALSE THEN
    SELECT Message.Question(("You haven't enabled this event, shall I enabled it?"), ("Yes"), ("No"))
      CASE 1
        chkEnabled.Value = TRUE
      CASE 0
        ' you want it
    END SELECT
  END IF
  IF bAddEvent THEN
    ' create new event row
    sSql = "INSERT INTO events SET id = NULL, name = &1, enabled = &2, log = &3, comments = &4, trigger1 = &5, condition1 = &6, condition2 = &7, operand = &8, rerunenabled = &9, reruntype = &10, rerunvalue = &11, category = &12"
    rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, chkEnabled.Value, chkLog.Value, txtDescription.Text, iTriggerId1, iConditionId1, iConditionId2, cmbOperand.Text, chkReRun.Value, ParseRerun(cmbReRunType.Text), spbReRunValue.Value, GetCategory())
    rResultUpdate = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM events")
    iEventId = rResultUpdate!lastid
  ELSE
    ' update new event details
    sSql = "UPDATE events SET name = &1, enabled = &2, log = &3, comments = &4, trigger1 = &5, condition1 = &6, condition2 = &7, operand = &8, rerunenabled = &9, reruntype = &10, rerunvalue = &11, category = &12 WHERE id = &13"
    rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, chkEnabled.Value, chkLog.Value, txtDescription.Text, iTriggerId1, iConditionId1, iConditionId2, cmbOperand.Text, chkReRun.Value, ParseRerun(cmbReRunType.Text), spbReRunValue.Value, GetCategory(), rResult!id)
    iEventId = rResult!id
  ENDIF

  IF iEventId THEN
    ' then we save it's action(s)
    sSql = "DELETE from events_actions WHERE event = &1"
    rResultUpdate = Main.hDB.Exec(sSql, iEventId)
    sSql = "INSERT events_actions SET event = &1, action = &2, events_actions.order= &3, delay= &4"
    IF $aActions.Count > 0 THEN
      WHILE iCnt < $aActions.Count
        rResultUpdate = Main.hDB.Exec(sSql, iEventId, GetActionId($aActions[iCnt]), iCnt, 0)
        INC iCnt
      WEND
    ENDIF
  ENDIF
  FEvents.UpdateEventView()
  bAddEvent = FALSE
  ME.Close

END


PUBLIC SUB chkEnabled_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkLog_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB txtDescription_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnEditTrigger_Click()

  iTrigger = GetTriggerId(cmbTrigger.Text)
  FTriggerEditor.Show()

END

PUBLIC SUB btnEditCondition1_Click()

  iCondition = GetConditionId(cmbCondition1.Text)
  iEditingCondition = 1
  FConditionEditor.Show()

END

PUBLIC SUB btnEditCondition2_Click()

  iCondition = GetConditionId(cmbCondition2.Text)
  iEditingCondition = 2
  FConditionEditor.Show()

END

PUBLIC SUB cmbCondition1_Click()

  IF cmbOperand.Text THEN
    IF cmbCondition1.Text THEN
      btnEditCondition2.Enabled = TRUE
    ELSE
      btnEditCondition2.Enabled = FALSE
    END IF
  ELSE
    btnEditCondition2.Enabled = FALSE
  END IF

  IF cmbCondition1.Text THEN
    btnEditCondition1.Text = ("Edit")
  ELSE
    btnEditCondition1.Text = ("Create")
  ENDIF
  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbCondition2_Click()

  IF cmbCondition1.Text THEN
    btnEditCondition2.Enabled = TRUE
  ELSE
    btnEditCondition2.Enabled = FALSE
  END IF

  IF cmbCondition2.Text THEN
    btnEditCondition2.Text = ("Edit")
  ELSE
    btnEditCondition2.Text = ("Create")
  ENDIF
  btnSave.Enabled = TRUE

END

PUBLIC SUB btnEditAction_Click()

  iAction = GetActionId(cmbAction.Text)
  iEditingAction = 1
  FActionEditor.Show()
  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbOperand_Click()

  IF cmbCondition1.Text THEN
    IF cmbOperand.Text THEN
      cmbCondition2.Enabled = TRUE
      btnEditCondition2.Enabled = TRUE
    ELSE
      cmbCondition2.Enabled = FALSE
      btnEditCondition2.Enabled = FALSE
    END IF
  END IF
  btnSave.Enabled = TRUE

END

PRIVATE SUB ParseRerun(sRerun AS String) AS String

  IF sRerun THEN
    RETURN "gb." & Left(sRerun, Len(sRerun) - 1)
  ELSE
    RETURN ""
  END IF

END

PRIVATE SUB StripRerun(sRerun AS String) AS String

  IF sRerun THEN
    RETURN Replace(sRerun, "gb.", "") & "s"
  ELSE
    RETURN ""
  END IF

END

PUBLIC SUB tvActions_Data(Row AS Integer, Column AS Integer)

  tvActions.Data.Text = $aActions[Row]

END

PUBLIC SUB btnInsertAction_Click()

  IF cmbAction.Text <> "" THEN
    $aActions.Add(cmbAction.Text, GetActionId(cmbAction.Text))
    INC tvActions.Rows.Count
    tvActions.MoveTo($aActions.Max, 0)
    btnRun.Enabled = FALSE
  ENDIF

END

PUBLIC SUB btnRemoveAction_Click()

  IF $aActions.Count = 0 THEN RETURN
  IF tvActions.Row < 0 THEN RETURN
  $aActions.Remove(tvActions.Row)
  DEC tvActions.Rows.Count
  tvActions.Refresh
  btnRun.Enabled = FALSE

END

PUBLIC SUB btnMoveUpAction_Click()

  IF tvActions.Row <= 0 THEN RETURN
  tvActions.Save
  SWAP $aActions[tvActions.Row], $aActions[tvActions.Row - 1]
  tvActions.Refresh
  DEC tvActions.Row
  btnRun.Enabled = FALSE

END

PUBLIC SUB btnMoveDownAction_Click()

  IF tvActions.Row >= (tvActions.Rows.Count - 1) THEN RETURN
  tvActions.Save
  SWAP $aActions[tvActions.Row], $aActions[tvActions.Row + 1]
  tvActions.Refresh
  INC tvActions.Row
  btnRun.Enabled = FALSE

END

PUBLIC SUB tvActions_Click()

  TRY cmbAction.Text = $aActions[tvActions.Row]
  IF NOT ERROR THEN
    btnEditAction.Enabled = TRUE
    btnMoveUpAction.Enabled = TRUE
    btnMoveDownAction.Enabled = TRUE
    btnRemoveAction.Enabled = TRUE
  ENDIF

END

PUBLIC SUB cmbAction_Click()

  IF cmbAction.Text <> "" THEN
    btnInsertAction.Enabled = TRUE
    btnEditAction.Text = ("Edit")
  ELSE
    btnEditAction.Text = ("Create")
  ENDIF

END

PUBLIC SUB cmbTrigger_Click()

  IF cmbTrigger.Text <> "" THEN
    btnEditTrigger.Text = ("Edit")
  ELSE
    btnEditTrigger.Text = ("Create")
  ENDIF

END

PUBLIC SUB tvActions_DblClick()

  btnEditAction_Click()

END

PUBLIC SUB btnRun_Click()

  IF Main.bServer THEN
    Events.RunActions(rResult!id)
  ELSE
    XMLClient.RunActions(rResult!id)
  ENDIF
  Balloon("Action(s) executed", btnRun)

END
