' Gambas class file

' Description:
' FEventEditor.class
' Support for creating and edit all events parameters.

' Development Status:
' Just started, not working yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultTriggerTypes AS Result
PRIVATE rResultTriggers AS Result
PRIVATE rResultConditions AS Result
PRIVATE rResultActions AS Result
PUBLIC bAddEvent AS Boolean
PUBLIC iTrigger AS Integer
PUBLIC iAction AS Integer
PUBLIC iCondition AS Integer

PUBLIC SUB Form_Open()

  IF bAddEvent THEN ME.Text = ("Add Event")
  ME.Move(FMain.X + 50, FMain.Y + 70)
  LoadEvent()

END

PUBLIC SUB LoadEvent()

  ' btnEditTrigger1.Enabled = FALSE
  ' btnEditCondition1.Enabled = FALSE
  btnEditCondition2.Enabled = FALSE
  ' btnEditAction1.Enabled = FALSE
  ' btnEditAction2.Enabled = FALSE
  ' btnEditAction3.Enabled = FALSE

  ' fill combos with available triggers
  TRY rResultTriggers = Main.hDB.Exec("SELECT * FROM triggers")
  cmbTrigger1.Add("")
  IF rResultTriggers THEN
    IF (rResultTriggers.Count >= 1) THEN
      FOR EACH rResultTriggers
        cmbTrigger1.Add(rResultTriggers!name)
      NEXT
    END IF
  ELSE
    Message("No triggers database table found!")
  END IF

  ' fill combos with available conditions
  TRY rResultConditions = Main.hDB.Exec("SELECT * FROM conditions")
  cmbCondition1.Add("")
  cmbCondition2.Add("")
  IF rResultConditions THEN
    IF (rResultConditions.Count >= 1) THEN
      FOR EACH rResultConditions
        cmbCondition1.Add(rResultConditions!name)
        cmbCondition2.Add(rResultConditions!name)
      NEXT
    END IF
  ELSE
    Message("No conditions database table found!")
  END IF

  ' fill combos with available actions
  TRY rResultActions = Main.hDB.Exec("SELECT * FROM actions")
  cmbAction1.Add("")
  cmbAction2.Add("")
  cmbAction3.Add("")
  IF rResultActions THEN
    IF (rResultActions.Count >= 1) THEN
      FOR EACH rResultActions
        cmbAction1.Add(rResultActions!name)
        cmbAction2.Add(rResultActions!name)
        cmbAction3.Add(rResultActions!name)
      NEXT
    END IF
  ELSE
    Message("No actions database table found!")
  END IF

  IF NOT bAddEvent THEN
    ' get selected event values
    rResult = Main.hDB.Exec("SELECT * FROM events WHERE id = &1", FEvents.tbvEvents[FEvents.iCurRow, 0].Text)
    IF rResult.Count >= 1 THEN
      tbName.Text = rResult!name
      IF rResult!lastrun THEN tbRunLast.Text = Replace$(Str$(Format(rResult!lastrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      IF rResult!firstrun THEN tbRunFirst.Text = Replace$(Str$(Format(rResult!firstrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      TRY chkEnabled.Value = rResult!enabled
      TRY chkReRun.Value = rResult!rerunenabled
      TRY spbReRunValue.Value = rResult!rerunvalue
      TRY cmbReRunType.Text = StripRerun(rResult!reruntype)
      TRY chkLog.Value = rResult!log
      tbComments.Text = rResult!comments
      IF rResult!trigger1 THEN
        cmbTrigger1.Text = GetTriggerName(rResult!trigger1)
        btnEditTrigger1.Enabled = TRUE
      END IF
      IF rResult!condition1 THEN
        cmbCondition1.Text = GetConditionName(rResult!condition1)
        btnEditCondition1.Enabled = TRUE
      END IF
      IF rResult!condition2 THEN
        cmbCondition2.Text = GetConditionName(rResult!condition2)
        btnEditCondition2.Enabled = TRUE
      ELSE
        cmbCondition2.Enabled = FALSE
      END IF
      cmbOperand.Text = rResult!operand
      IF cmbOperand.Text THEN cmbCondition2.Enabled = TRUE
      IF rResult!action1 THEN
        cmbAction1.Text = GetActionName(rResult!action1)
        btnEditAction1.Enabled = TRUE
      END IF
      IF rResult!action2 THEN
        cmbAction2.Text = GetActionName(rResult!action2)
        btnEditAction2.Enabled = TRUE
      END IF
      IF rResult!action3 THEN
        cmbAction3.Text = GetActionName(rResult!action3)
        btnEditAction3.Enabled = TRUE
      END IF
    ELSE
      Message("Couldn't load event record!")
      ME.Close
    END IF
  END IF

END

PRIVATE SUB GetTriggerName(iId AS Integer) AS String

  DIM rResultTrig AS Result

  rResultTrig = Main.hDB.Exec("SELECT name FROM triggers WHERE id = &1", iId)
  TRY RETURN rResultTrig!name

END

PRIVATE SUB GetConditionName(iId AS Integer) AS String

  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT name FROM conditions WHERE id = &1", iId)
  TRY RETURN rResultCondition!name

END

PRIVATE SUB GetTriggerId(sName AS String) AS Integer

  DIM rResultTrig AS Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  IF rResultTrig THEN
    IF rResultTrig.Count = 1 THEN RETURN rResultTrig!id
  END IF

END

PRIVATE SUB GetConditionId(sName AS String) AS Integer

  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  IF rResultCondition THEN
    IF rResultCondition.Count = 1 THEN RETURN rResultCondition!id
  END IF

END

PRIVATE SUB GetActionId(sName AS String) AS Integer

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  IF rResultAction THEN
    IF rResultAction.Count THEN
      RETURN rResultAction!id
    END IF
  ELSE
    RETURN 0
  END IF

END

PRIVATE SUB GetActionName(iId AS Integer) AS String

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT name FROM actions WHERE id = &1", iId)
  RETURN rResultAction!name

END

PUBLIC SUB tbName_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnCancel_Click()

  bAddEvent = FALSE
  ME.Close

END

PUBLIC SUB btnDeleteEvent_Click()

  SELECT Message.Question("Are you sure that you want to delete this event?", "Yes", "No")
    CASE 1
      Main.hDB.Exec("DELETE FROM events WHERE id = &1", rResult!id)
      ME.Close
      FEvents.GetEventList()
  END SELECT

END

PUBLIC SUB btnNewEvent_Click()

  DIM iTriggerId1, iConditionId1, iConditionId2 AS Integer
  ' DIM sTrigger1Op, sTrigger2Op AS String

  IF cmbTrigger1.Text THEN iTriggerId1 = GetTriggerId(cmbTrigger1.Text)
  IF cmbCondition1.Text THEN iConditionId1 = GetConditionId(cmbCondition1.Text)
  IF cmbCondition2.Text THEN iConditionId2 = GetConditionId(cmbCondition2.Text)

  Main.hDB.Begin()
  rResult = Main.hDB.Create("events")
  rResult!name = tbName.Text
  rResult!comments = tbComments.Text
  rResult!enabled = chkEnabled.Value
  rResult!log = chkLog.Value
  rResult!trigger1 = iTriggerId1
  rResult!condition1 = iConditionId1
  rResult!condition2 = iConditionId2
  rResult!operand = cmbOperand.Text
  rResult!action1 = GetActionId(cmbAction1.Text)
  rResult!action2 = GetActionId(cmbAction2.Text)
  rResult!action3 = GetActionId(cmbAction3.Text)
  rResult!rerunenabled = chkReRun.Value
  rResult!rerunvalue = spbReRunValue.Value
  rResult!reruntype = ParseRerun(cmbReRunType.Text)
  rResult.Update()
  Main.hDB.Commit()
  FEvents.GetEventList()
  bAddEvent = FALSE

  ME.Close

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM sSql AS String
  DIM iTriggerId1, iConditionId1, iConditionId2 AS Integer
  DIM iActionId1, iActionId2, iActionId3 AS Integer

  IF bAddEvent THEN
    btnNewEvent_Click()
    bAddEvent = FALSE
    RETURN
  END IF
  IF cmbTrigger1.Text THEN
    iTriggerId1 = GetTriggerId(cmbTrigger1.Text)
  ELSE
    iTriggerId1 = 0
  END IF
  IF cmbCondition1.Text THEN
    iConditionId1 = GetConditionId(cmbCondition1.Text)
  END IF
  IF cmbCondition2.Text THEN
    iConditionId2 = GetConditionId(cmbCondition2.Text)
  END IF

  IF cmbAction1.Text THEN
    iActionId1 = GetActionId(cmbAction1.Text)
  ELSE
    iActionId1 = 0
  END IF
  IF cmbAction2.Text THEN
    iActionId2 = GetActionId(cmbAction2.Text)
  ELSE
    iActionId2 = 0
  END IF
  IF cmbAction3.Text THEN
    iActionId3 = GetActionId(cmbAction3.Text)
  ELSE
    iActionId3 = 0
  END IF

  ' save new event details
  sSql = "UPDATE events SET name = &1, enabled = &2, log = &3, comments = &4, trigger1 = &5, condition1 = &6, condition2 = &7, operand = &8, action1 = &9, action2 = &10, action3 = &11, rerunenabled = &12, reruntype = &13, rerunvalue = &14 WHERE id = &15"
  rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, chkEnabled.Value, chkLog.Value, tbComments.Text, iTriggerId1, iConditionId1, iConditionId2, cmbOperand.Text, iActionId1, iActionId2, iActionId3, chkReRun.Value, ParseRerun(cmbReRunType.Text), spbReRunValue.Value, rResult!id)

  FEvents.GetEventList()
  bAddEvent = FALSE
  ME.Close

END

PUBLIC SUB chkEnabled_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkLog_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbComments_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnEditTrigger1_Click()

  iTrigger = GetTriggerId(cmbTrigger1.Text)
  FTriggerEditor.Show()

END

PUBLIC SUB btnEditCondition1_Click()

  iCondition = GetConditionId(cmbCondition1.Text)
  FConditionEditor.Show()

END

PUBLIC SUB btnEditCondition2_Click()

  iCondition = GetConditionId(cmbCondition2.Text)
  FConditionEditor.Show()

END

PUBLIC SUB cmbCondition1_Click()

  IF cmbCondition1.Text THEN
    btnEditCondition1.Enabled = TRUE
  ELSE
    btnEditCondition1.Enabled = FALSE
  END IF

END

PUBLIC SUB cmbCondition2_Click()

  IF cmbCondition2.Text THEN
    btnEditCondition2.Enabled = TRUE
  ELSE
    btnEditCondition2.Enabled = FALSE
  END IF

END


PUBLIC SUB btnEditAction1_Click()

  iAction = GetActionId(cmbAction1.Text)
  FActionEditor.Show()

END

PUBLIC SUB btnEditAction2_Click()

  iAction = GetActionId(cmbAction2.Text)
  FActionEditor.Show()

END

PUBLIC SUB btnEditAction3_Click()

  iAction = GetActionId(cmbAction3.Text)
  FActionEditor.Show()

END

PUBLIC SUB cmbOperand_Click()

  IF cmbOperand.Text THEN 
    cmbCondition2.Enabled = TRUE
    btnEditCondition2.Enabled = TRUE
  ELSE
    cmbCondition2.Enabled = FALSE
    btnEditCondition2.Enabled = FALSE
  END IF

END

PRIVATE SUB ParseRerun(sRerun AS String) AS String

  IF sRerun THEN 
    RETURN "gb." & Left(sRerun, Len(sRerun) - 1)
  ELSE
    RETURN ""
  END IF

END

PRIVATE SUB StripRerun(sRerun AS String) AS String

  IF sRerun THEN
    RETURN Replace(sRerun, "gb.", "") & "s"
  ELSE
    RETURN ""
  END IF

END