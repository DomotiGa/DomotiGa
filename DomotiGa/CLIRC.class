' Gambas class file

' Description:
' LIRC.class
' Provide support for LIRC.

' Development Status:
' Just started developing this one.

' Links:
' http://www.lirg.org

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by 2009 Timo Sariwating in 2009.

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS String
PROPERTY LIRCDebug AS Boolean

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS String
PRIVATE bLIRCDebug AS Boolean

PUBLIC hLIRC AS NEW Socket
PUBLIC sBuffer AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the connection
  TRY hLIRC.Close

  ' get a new one
  hLIRC = NEW Socket AS "LIRC"
  hLIRC.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("LIRC Error: " & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB LIRC_Ready()

  Main.WriteLog("LIRC TCP socket connected.")

END

PUBLIC SUB LIRC_Closed()

  Main.WriteLog("LIRC Error: TCP socket closed. (is lircd still running?)")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hLIRC.Close
  Main.WriteLog("LIRC TCP socket port close.")

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("LIRC Error: " & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB LIRC_Read()

  DIM sData AS String

  READ #hLIRC, sData, 1
  IF sData = Chr(10) THEN ' buffer until linefeed then parse
    IF Len(sBuffer) > 1 THEN ParseLine(sBuffer)
    sBuffer = NULL
  ELSE
    sBuffer &= sData
  ENDIF

END

PRIVATE SUB ParseLine(sStr AS String)

  DIM aScan AS String[]
  DIM sRemote, sButton AS String

  IF Main.bLIRCDebug THEN Main.WriteDebugLog(("[LIRC] Parse String: ") & (sStr))
  TRY aScan = Scan(sStr, "* * * *")
  IF NOT ERROR THEN
    sRemote = aScan[3]
    sButton = aScan[2]
    IF aScan[1] = "00" THEN Events.CheckIRRemoteEvents(sRemote, sButton)
    IF Main.bLIRCDebug THEN Main.WriteDebugLog(("[LIRC] Remote: ") & sRemote & (" Button: ") & sButton)
  ENDIF

END

PUBLIC SUB LIRC_Error()

  ' handle error
  SELECT CASE hLIRC.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("LIRC: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("LIRC: Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(("LIRC: Unable to connect. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(("LIRC: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("LIRC: Error writing data."))
  END SELECT

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS String

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS String)

  iTCPPort = Value

END

PRIVATE FUNCTION LIRCDebug_Read() AS Boolean

  RETURN bLIRCDebug

END

PRIVATE SUB LIRCDebug_Write(Value AS Boolean)

  bLIRCDebug = Value

END
