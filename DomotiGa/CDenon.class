' Gambas class file

' Description:
' CDenon.class
' Support for Denon receiver control.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien.

' This module is written by and Copyright(C) 2010 Daniel Keller.

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS String
PROPERTY DenonDebug AS Boolean
PROPERTY Interface AS String
PROPERTY SerPort AS String
PROPERTY Baud AS String

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS String
PRIVATE bDenonDebug AS Boolean
PRIVATE sInterface AS String
PRIVATE sSerPort AS String
PRIVATE sBaud AS String

PUBLIC hDenon AS NEW Socket
PUBLIC hDenonSer AS NEW SerialPort

PUBLIC sBuffer AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectTCP() AS Boolean

  ' try to close the connection
  TRY hDenon.Close

  ' get a new one
  hDenon = NEW Socket AS "Denon"
  hDenon.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Denon receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectSerial() AS Boolean

  ' try to close the connection
  TRY hDenonSer.Close

  ' get a new one
  hDenonSer = NEW Serialport AS "DenonSer"
  WITH hDenonSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Denon receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Denon_Ready()

  Main.WriteLog(("Denon TCP socket connected."))

  ' send some commands to get the states of the device and write them back in variable.
  SendCommand("MV?")
  WAIT 0.5
  SendCommand("SV?")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Denon_Closed()

  Main.WriteLog(("Denon TCP socket closed."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hDenon.Close
  TRY hDenonSer.Close
  IF InStr(sInterface, "tcp") THEN
    Main.WriteLog(("Denon receiver TCP socket close."))
  ELSE
    Main.WriteLog(("Denon receiver TCP serial port close."))
  END IF
  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Denon receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Denon_Error()

  ' handle error
  SELECT CASE hDenon.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("Denon: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("Denon: Host '") & sTCPHost & ("' not found.")) 
    CASE Net.ConnectionRefused
      Main.WriteLog(("Denon: Unable to connect to receiver. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(("Denon: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("Denon: Error writing data."))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCommand(sCmd AS String)

  IF Main.bDenonDebug THEN Main.WriteDebugLog(("[Denon] Sending '") & sCmd & ("' to Receiver."))
  IF sInterface = "tcp" THEN
    TRY WRITE #hDenon, sCmd & Chr$(13), Len(sCmd) + 1
    IF ERROR THEN Main.WriteDebugLog(("[Denon] Error writing data to the TCP port! -> ") & Error.Text)
  ELSE
    TRY WRITE #hDenonSer, sCmd & Chr$(13), Len(sCmd) + 1
    IF ERROR THEN Main.WriteDebugLog(("[Denon] Error writing data to the serial port! -> ") & Error.Text)
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' denon commands to call
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DenonPower(sValue AS String)

  ' STANDBY, ON or ? for state
  SendCommand("PW" & sValue)

END

PUBLIC SUB DenonMainPower(sValue AS String)

  ' STANDBY, ON or ? for state
  SendCommand("ZM" & sValue)

END

PUBLIC SUB DenonZ2Power(sValue AS String)

  ' ON or OFF
  SendCommand("Z2" & sValue)

END

PUBLIC SUB DenonVolume(sValue AS String)

  ' UP or DOWN
  SendCommand("MV" & sValue)

END

PUBLIC SUB DenonVolumeFix(sValue AS String)

  ' 18(db) until -80 (db)
  sValue = Val(sValue) + 80
  SendCommand("MV" & sValue)

END

PUBLIC SUB DenonMute(sValue AS String)

  ' ON or OFF
  SendCommand("MV" & sValue)

END

' TODO: has to be completed with others and Z2

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Denon_Read()

  DIM sData AS String

  TRY READ #hDenon, sData, 1
  IF ERROR THEN Main.WriteDebugLog(("[Denon] Error reading data from the TCP port! -> ") & Error.Text)
  IF sData = Chr$(13) THEN ' buffer until linefeed then parse
    IF Len(sBuffer) > 1 THEN ParseLine(Left(sBuffer, Len(sBuffer)))
    sBuffer = NULL
  ELSE
    sBuffer &= sData
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DenonSer_Read()

  DIM sData AS String

  TRY READ #hDenonSer, sData, 1
  IF ERROR THEN Main.WriteDebugLog(("[Denon] Error reading data from the serial port! -> ") & Error.Text)
  IF sData = Chr$(13) THEN ' buffer until linefeed then parse
    IF Len(sBuffer) > 1 THEN ParseLine(Left(sBuffer, Len(sBuffer)))
    sBuffer = NULL
  ELSE
    sBuffer &= sData
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB ParseLine(sStr AS String)

  DIM sMaincat, sZonecat, sItem, sValue, sTemp AS String

  IF Main.bDenonDebug THEN Main.WriteDebugLog(("[Denon] Received: ") & sStr)

  sMaincat = Left(sStr, 2)
  sZonecat = Mid(sStr, 3)

  SELECT CASE sMaincat

    CASE "PW"
      ' Main Power
      sItem = "Power"
      IF sStr = "PWON" THEN sValue = "ON"
      IF sStr = "PWSTANDBY" THEN sValue = "OFF"
      DenonSetValue(sItem, sValue)

    CASE "MV"
      ' Master Volume
      sTemp = Mid(sStr, 3)
      IF Mid(sStr, 3, 3) = "MAX"
        'do nothing
      ELSE
        sItem = "MasterVolume"
        IF sTemp = "99"
          sValue = ""
        ELSE
          IF Len(sTemp) = 1 THEN sTemp = sTemp & "00"
          IF Len(sTemp) = 2 THEN sTemp = sTemp & "0"
          sValue = (Val(sTemp) / 10) - 80
          DenonSetValue(sItem, sValue)
        ENDIF
      ENDIF

    CASE "MU"
      ' Main Mute
      sItem = "MainMute"
      IF sStr = "MUON" THEN sValue = "ON"
      IF sStr = "MUOFF" THEN sValue = "OFF"
      DenonSetValue(sItem, sValue)

    CASE "ZM"
      ' Power MainZone
      sItem = "MainZonePower"
      IF sStr = "ZMON" THEN sValue = "ON"
      IF sStr = "ZMOFF" THEN sValue = "OFF"
      DenonSetValue(sItem, sValue)

    CASE "SI"
      ' Source Input
      sItem = "MainInput"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    CASE "SV"
      ' Video Input
      sItem = "VideoInput"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    CASE "MS"
      sItem = "SurroundMode"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    CASE "DC"
      sItem = "Digital Input Mode"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    CASE "SD"
      sItem = "Input Mode"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    CASE "SR"
      sItem = "Record Selection"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    CASE "Z2"
      ' zone2 integration

      SELECT CASE sZonecat

        CASE "PHONO"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "CD"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "TUNER"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "DVD"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "HDP"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "TV/CBL"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "SAT"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "VCR"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "V.AUX"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "SOURCE"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        CASE "MUON"
          sItem = "Zone2Mute"
          DenonSetValue(sItem, "ON")

        CASE "MUOFF"
          sItem = "Zone2Mute"
          DenonSetValue(sItem, "OFF")

        CASE "ON"
          sItem = "Zone2Power"
          DenonSetValue(sItem, "ON")

        CASE "OFF"
          sItem = "Zone2Power"
          DenonSetValue(sItem, "OFF")
      END SELECT

      IF IsNull(Val(sZonecat)) THEN
        ' not a number, do nothing
      ELSE
        sTemp = Mid(sStr, 3)
        sItem = "Zone2Volume"
        IF sTemp = "99"
          sValue = ""
        ELSE
          IF Len(sTemp) = 1 THEN sTemp = sTemp & "00"
          IF Len(sTemp) = 2 THEN sTemp = sTemp & "0"
          sValue = (Val(sTemp) / 10) - 80
          DenonSetValue(sItem, sValue)
        ENDIF
      ENDIF

    CASE "Z3"
      ' not implemented yet

    CASE ELSE
      IF Main.bDenonDebug THEN Main.WriteDebugLog(("[Denon] Not implemented yet!"))

  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB DenonSetValue(sItem AS String, vValue AS Variant)

  Main.SetGlobalVar("Denon_" & sItem, vValue)
  IF Main.bDenonDebug THEN Main.WriteDebugLog("[Denon] Received Item: " & sItem & " Value: " & vValue)

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS String

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS String)

  iTCPPort = Value

END

PRIVATE FUNCTION DenonDebug_Read() AS Boolean

  RETURN bDenonDebug

END

PRIVATE SUB DenonDebug_Write(Value AS Boolean)

  bDenonDebug = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION SerPort_Read() AS String

  RETURN sSerPort

END

PRIVATE SUB SerPort_Write(Value AS String)

  sSerPort = Value

END

PRIVATE FUNCTION Interface_Read() AS String

  RETURN sInterface

END

PRIVATE SUB Interface_Write(Value AS String)

  sInterface = Value

END
