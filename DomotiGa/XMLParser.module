' Gambas module file

' Description:
' XMLParser.module
' XML parse routines.

' Development Status:
' Imported from Kris's own project, needs testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Kris Wauters on February, 13th - 2010
' For more info or help, mailto: kris@digitalplayground.be

' Read file called COPYING for license details.

'--- converts a URL with an XML stream to a "workable" file :-) ---
'--- StrUrl = URL where to download the XML structure, returns a file in PML format (with parsetags between parents, collected on one line ---
PUBLIC FUNCTION ParseXML(StrUrl AS String) AS String

  '--- declare variables ---
  DIM hHttpC AS HttpClient
  DIM StrBuffer, StrFile AS String

  hHttpC = NEW HttpClient AS "hHttpC"
  hHttpC.URL = StrUrl
  hHttpC.Async = FALSE
  hHttpC.Timeout = 10
  hHttpC.Get()

  '--- check if succesfull ---
  IF hHttpC.Status < 0 THEN
    '--- something went wrong ---
    Main.WriteDebugLog("ERROR: XMLParser.ParseXML couldn't download. Error code = " & CStr(hHttpC.Status), FALSE)
    StrBuffer = ""
    hHttpC.Close
    hHttpC = NULL
    RETURN
  ELSE
    '--- success - read the data ---
    IF Lof(hHttpC) THEN READ #hHttpC, StrBuffer, Lof(hHttpC)
  END IF
  hHttpC.Close
  hHttpC = NULL
  '--- do a final check (especially for WeatherBug) ---
  IF Trim(UCase(strBuffer)) = "ACCESS DENIED" THEN
    Message.Error(Main.Translate("Access Denied to given URL!\nYou need to register at WeatherBug, and enter your ID in setup!\nBrowse to http://weather.weatherbug.com/desktop-weather/api-register.html"))
    Main.WriteDebugLog("ERROR: XMLParser.ParseXML access denied to " & StrUrl, FALSE)
    RETURN ""
  ELSE
    StrFile = ConvertXMLtoPML(StrBuffer, FALSE)
    RETURN StrFile
  END IF

END

'--- make a workable file out of the XML stream ---
'--- StrBuffer = input XML data, Boolfile FALSE=String,TRUE=File, returns a path/filename to a .PML file
PUBLIC FUNCTION ConvertXMLtoPML(StrBuffer AS String, BoolFile AS Boolean) AS String

  '--- declare variables ---
   DIM XmlR AS NEW XmlReader
   DIM StrName, StrFile, StrNewBuffer AS String
   DIM StrHeader AS String[10]
   DIM IntI AS Integer
   DIM fFile AS File

   XmlR = NEW XmlReader
   IF BoolFile = FALSE THEN
     XmlR.FromString(StrBuffer)
   ELSE
     XmlR.Open(StrBuffer)
   END IF
   StrFile = Temp() & ".PML"
   fFile = OPEN (StrFile) FOR CREATE
   '--- loop trough the while XML buffer ---
   WHILE NOT XmlR.Eof
      '--- make a difference between regular values and sub-elements ---
      IF CStr(XmlR.Node.name) = "#text" THEN
        '--- put all headers onto one line, so by reading a line, we always know the "parent names" easy ---
        FOR IntI = 0 TO XmlR.Node.depth - 1
          StrNewBuffer = StrNewBuffer & StrHeader[IntI] & "|"
        NEXT
        StrNewBuffer = StrNewBuffer & StrName & "|=|" & Replace(XmlR.Node.value, "&deg;", "°")
        PRINT #fFile, StrNewBuffer
        StrNewBuffer = ""
      ELSE
        StrName = XmlR.Node.name
      END IF
      '--- keep track of headers ---
      IF CStr(XmlR.Node.value) = "" THEN
        StrHeader[XmlR.Node.depth] = XmlR.Node.name
      END IF
      '--- here we have an XML node with subelements, split it up in different lines ---
      SELECT CASE XmlR.Node.Type
        CASE XmlReaderNodeType.Element
          IF XmlR.Node.Attributes.count > 0 THEN
            FOR EACH XmlR.Node.Attributes
              FOR IntI = 0 TO XmlR.Node.depth - 1
                StrNewBuffer = StrNewBuffer & StrHeader[IntI] & "|"
              NEXT
              StrNewBuffer = StrNewBuffer & XmlR.Node.name & "|=|" & Replace(XmlR.Node.value, "&deg;", "°")
              PRINT #fFile, StrNewBuffer
              StrNewBuffer = ""
            NEXT
          END IF
      END SELECT
      XmlR.Read()
   WEND
  '--- put everyting in a "parseable markup language" file (hey, I made this fileformat up myself, lol)
  fFile.Close
  fFile = NULL
  RETURN StrFile

CATCH
  Main.WriteDebugLog("ERROR: XMLParser.ParseXML " & Error.Text & " at " & Error.Where)

END

'--- Retrieve a file from the internet, from the given URL, and return a TmpFile-location for this file ---
PUBLIC FUNCTION GetFileFromInternet(StrUrl AS String) AS String

  '--- declare variables ---
  DIM hHttpC AS HttpClient
  DIM StrBuffer, StrFile AS String

  hHttpC = NEW HttpClient AS "hHttpC"
  hHttpC.URL = StrUrl
  hHttpC.Async = FALSE
  hHttpC.Timeout = 30
  hHttpC.Get()

  '--- check if succesfull ---
  IF hHttpC.Status < 0 THEN
    '--- something went wrong ---
    Main.WriteDebugLog("ERROR: XMLParser.GetFileFromInternet: " & CStr(hHttpC.Status), FALSE)
    StrBuffer = ""
    hHttpC.Close
    hHttpC = NULL
    RETURN
  ELSE
    '--- success - read the data ---
    IF Lof(hHttpC) THEN READ #hHttpC, StrBuffer, Lof(hHttpC)
  END IF
  hHttpC.Close
  hHttpC = NULL
  '--- do a final check (especially for WeatherBug) ---
  IF Trim(UCase(strBuffer)) = "ACCESS DENIED" THEN
    Main.WriteDebugLog("ERROR: XMLParser.ParseXML: access denied to " & StrUrl)
    RETURN ""
  ELSE
    StrFile = Temp() & Right(StrUrl, 4)
    File.Save(StrFile, StrBuffer)
    RETURN StrFile
  END IF

END

'--- function returns a path to the correspondig GIF files ---
'--- StrDirection = WindDirection(N, E, S, W, NNE, SSE, NNW, SSW)
PUBLIC SUB ReturnWindDirectionPic(StrDirection AS String) AS String

  '--- declare variables ---
  DIM StrDir AS String

  '--- reduce string to 2 characters ---
  StrDir = Left(StrDirection, 1) & Right(StrDirection, 1)
  '--- if characters are the same, then leave only one character! ---
  IF Right(StrDir, 1) = Mid(StrDir, 2, 1) THEN
    StrDir = Left(StrDir, 1)
  END IF

  RETURN (Main.sBaseDir &/ "icons/weather" &/ UCase(strdir) & ".gif")

END
