' Gambas class file

' Description:
' CRFXCom.class
' Connect to RFXCom receiver interface via host/tcp socket like meteohub provides (read-only!)

' Development Status:
' Took RFXCom's RFReceiver source AS template.
' NOTE: Limited support!
' I only ported for the hardware I have, RFXPower, X10, X10Security, SD90, and Oregon UV, Temp, Humidity sensor support
' You can donate me some if you want so I can text it.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called LICENSE for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS Integer
PROPERTY Interface AS String
PROPERTY SerPort AS String
PROPERTY Baud AS String
PROPERTY RFXComDebug AS Boolean

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS Integer
PRIVATE sInterface AS String
PRIVATE sSerPort AS String
PRIVATE sBaud AS String
PRIVATE bRFXComDebug AS Boolean

PUBLIC hRFXCom AS NEW Socket
PUBLIC hRFXComSer AS NEW SerialPort

CONST MODESRAW AS Byte = &H21
CONST MODEKOP AS Byte = &H23
CONST MODEKAKU AS Byte = &H24
CONST MODEBD AS Byte = &H25
CONST MODEMRAW AS Byte = &H27
CONST MODEB32 AS Byte = &H29
CONST ENALL AS Byte = &H2A
CONST MODEVAR AS Byte = &H2C
CONST DISKAKU AS Byte = &H2D
CONST DISKOP AS Byte = &H2E
CONST DISX10 AS Byte = &H2F
CONST MODEVISONIC AS Byte = &H40
CONST MODENOXLAT AS Byte = &H41
CONST MODEVISAUX AS Byte = &H42

PRIVATE bSlave AS Boolean
PRIVATE bFirstByte AS Boolean = TRUE
PRIVATE Protocol AS Byte = MODEVAR
PRIVATE RecBuf AS Byte[30]
PRIVATE RecBytes AS Byte
PRIVATE RecBits AS Byte
PRIVATE bMessage AS Boolean = FALSE
PRIVATE iByteCount AS Integer = 0
PRIVATE sMessage AS String

PRIVATE DecodeMessage AS Boolean = TRUE

PUBLIC SUB RFXCom_Ready()

  Main.WriteLog("RFXCom TCP socket connected.")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectTCP() AS Boolean

  ' try to close the connection
  TRY hRFXCom.Close

  ' get a new one
  hRFXCom = NEW Socket AS "RFXCom"
  hRFXCom.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("RFXCom Error: " & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectSerial() AS Boolean

  ' try to close the connection
  TRY hRFXComSer.Close

  ' get a new one
  hRFXComSer = NEW Serialport AS "RFXComSer"
  WITH hRFXComSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' init interface
  PRINT #hRFXComSer, "F02A"

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("RFXCom Error: " & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hRFXCom.Close
  TRY hRFXComSer.Close
  Main.WriteLog("RFXCom TCP socket/serial port close.")

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("RFXCom Error: " & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB RFXCom_Error()

  ' handle error
  SELECT CASE hRFXCom.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog("RFXCom: The system does not allow to create a socket.")
    CASE Net.HostNotFound
      Main.WriteLog("RFXCom: Host not found.")
    CASE Net.ConnectionRefused
      Main.WriteLog("RFXCom: Unable to connect. Connection refused.")
    CASE Net.CannotRead
      Main.WriteLog("RFXCom: Error reading data.")
    CASE Net.CannotWrite
      Main.WriteLog("RFXCom: Error writing data.")
  END SELECT

END

PUBLIC SUB RFXCom_Read()

  DIM sData AS Byte

  TRY READ #hRFXCom, sData
  ProcessReceivedChar(sData)

END

PUBLIC SUB RFXComSer_Read()

  DIM sData AS Byte

  TRY READ #hRFXComSer, sData
  ProcessReceivedChar(sData)

END

PRIVATE SUB ProcessReceivedChar(sComChar AS Byte)

  DIM bTemp AS Byte

  IF bFirstByte = TRUE THEN
    bFirstByte = FALSE
    iByteCount = 0
  END IF

  ' write the output to the screen
  bTemp = sComChar
  IF Protocol <> MODEMRAW AND Protocol <> MODESRAW THEN
    FMain.pbRFXCom.Picture = Main.pLedOn
  END IF

  SELECT CASE Protocol
    CASE MODEVAR, MODEVISONIC, MODENOXLAT
      IF iByteCount = 15 THEN
        RecBuf[iByteCount - 1] = bTemp
        bMessage = TRUE
      ELSE IF iByteCount = 0 THEN
        RecBits = bTemp AND &H7F
        IF (bTemp AND &H80) = 0 THEN
          bSlave = FALSE
        ELSE
          bSlave = TRUE
        END IF
        IF (RecBits AND &H7) = 0 THEN
          RecBytes = Lsr((RecBits AND &H7F), 3)
        ELSE
          RecBytes = Lsr((RecBits AND &H7F), 3) + 1
        END IF
      ELSE IF iByteCount = RecBytes THEN
        RecBuf[iByteCount - 1] = bTemp
        iByteCount -= 1
        bMessage = TRUE
      ELSE
        RecBuf[iByteCount - 1] = bTemp
      END IF

    CASE MODEB32
      RecBuf[iByteCount] = bTemp
      IF (iByteCount = 3) THEN
        bMessage = TRUE
      END IF

    CASE MODEMRAW, MODESRAW
      RecBuf[iByteCount] = bTemp
      IF iByteCount = 29 THEN
        bMessage = TRUE
      END IF

    CASE MODEKOP
      RecBuf[iByteCount] = bTemp
      IF iByteCount = 2 THEN
        bMessage = TRUE
      END IF

    CASE MODEKAKU
      RecBuf[iByteCount] = bTemp
      IF iByteCount = 2 THEN
        bMessage = TRUE
      END IF
  END SELECT

  iByteCount += 1
  IF bMessage THEN
    Display_Message()
  END IF

END

PRIVATE SUB Display_Message()

  DIM iParity, i AS Integer
  DIM bRFXSensor, bRFXPower AS Boolean

  bMessage = FALSE
  bFirstByte = TRUE

  IF DecodeMessage THEN
    IF iByteCount = 4 THEN
      iParity = NOT (Lsr((RecBuf[0] AND &HF0), 4) + (RecBuf[0] AND &HF) + Lsr(RecBuf[1], 4) + (RecBuf[1] AND &HF) + Lsr(RecBuf[2], 4) + (RecBuf[2] AND &HF) + Lsr(RecBuf[3], 4)) AND &HF
      IF (iParity = (RecBuf[3] AND &HF)) AND (RecBuf[0] + (RecBuf[1] XOR &HF) = &HFF) THEN
        bRFXSensor = TRUE
      ELSE
        bRFXSensor = FALSE
      END IF
    ELSE IF iByteCount = 6 THEN
      iParity = NOT (Lsr(RecBuf[0], 4) + (RecBuf[0] AND &HF) + Lsr(RecBuf[1], 4) + (RecBuf[1] AND &HF) + Lsr(RecBuf[2], 4) + (RecBuf[2] AND &HF) + Lsr(RecBuf[3], 4) + (RecBuf[3] AND &HF) + Lsr(RecBuf[4], 4) + (RecBuf[4] AND &HF) + Lsr(RecBuf[5], 4)) AND &HF
      IF (iParity = (RecBuf[5] AND &HF)) AND (RecBuf[0] + (RecBuf[1] XOR &HF) = &HFF) THEN
        bRFXPower = TRUE
      ELSE
        bRFXPower = FALSE
      END IF
    END IF

    IF Protocol = MODEVAR AND (RecBits = 56 OR RecBits > 59) THEN
      ProcessOregon(RecBits)
    ELSE IF bRFXPower THEN
      ProcessRFXMeter()
    ELSE
      ProcessX(RecBits)
    END IF

    IF (Protocol = MODEVAR OR Protocol = MODENOXLAT) AND RecBits <> 0 THEN
      FMain.pbRFXCom.Picture = Main.pLedOff
      IF Main.bRFXComDebug THEN
        IF bSlave THEN
          Main.WriteRFXDebugLog(" bits=" & Str(RecBits) & " from SLAVE")
        ELSE
          Main.WriteRFXDebugLog(" bits=" & Str(RecBits))
        END IF
      END IF
    END IF
  END IF

END

PRIVATE SUB ProcessRFXMeter()

  DIM sMeasuredValue AS Single
  DIM iDeviceId AS Integer
  DIM sTemp AS String

  IF bRFXComDebug THEN
    Main.WriteRFXDebugLog("RFXMeter", 1)
    Main.WriteRFXDebugLog(" addr:" & Format(Hex(RecBuf[0]), "00"), 1)
    Main.WriteRFXDebugLog(Hex(RecBuf[1]), 1)
    Main.WriteRFXDebugLog(" = ACRF-ID:" & Format(Str(RecBuf[1] + (RecBuf[0] * 256)), "00") & " ", 1)
  END IF
  SELECT CASE RecBuf[5] AND &HF0
    CASE &H0
      sMeasuredValue = ((RecBuf[4] * 65536) + (RecBuf[2] * 256) + RecBuf[3])
      IF bRFXComDebug THEN 
        Main.WriteRFXDebugLog("RFXMeter: " & Str(sMeasuredValue), 1)
        Main.WriteRFXDebugLog(";  RFXPower: " & Str(sMeasuredValue / 100) & " kWh", 1)
        Main.WriteRFXDebugLog(";  RFXPower-Module: " & Str(sMeasuredValue / 1000) & " kWh", 1)
      END IF

      iDeviceId = Devices.Find(Format(Hex(RecBuf[0]), "00") & Hex(RecBuf[1]), Devices.FindInterface("RFXCom Receiver"))
      IF iDeviceId THEN
        Devices.Update(iDeviceId, Str(sMeasuredValue))
      END IF
    CASE &H10
      sTemp = "Interval: "
      SELECT CASE RecBuf[2]
        CASE &H1
          sTemp = sTemp & "30 sec."
        CASE &H2
          sTemp = sTemp & "1 min."
        CASE &H4
          sTemp = sTemp & "6 (old=5) min."
        CASE &H8
          sTemp = sTemp & "12 (old=10) min."
        CASE &H10
          sTemp = sTemp & "15 min."
        CASE &H20
          sTemp = sTemp & "30 min."
        CASE &H40
          sTemp = sTemp & "45 min."
        CASE &H80
          sTemp = sTemp & "60 min."
        CASE ELSE
          sTemp = sTemp & "illegal value"
      END SELECT
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(sTemp, 1)
    CASE &H20
      SELECT CASE (RecBuf[4] AND &HC0)
        CASE &H0
          sTemp = "Input-0 "
        CASE &H40
          sTemp = "Input-1 "
        CASE &H80
          sTemp = "Input-2 "
        CASE ELSE
          sTemp = "Error, unknown input "
    END SELECT

    sMeasuredValue = (((RecBuf[4] AND &H3F) * 65536) + (RecBuf[2] * 256) + RecBuf[3]) / 1000
    IF bRFXComDebug THEN
      Main.WriteRFXDebugLog("Calibration: " & sMeasuredValue & "msec ", 1)
      Main.WriteRFXDebugLog(sTemp, 1)
      IF sMeasuredValue <> 0 THEN
        Main.WriteRFXDebugLog("RFXPower= " & Round(1 / ((16 * sMeasuredValue) / (3600000 / 100)), 3) & "kW", 1)
        Main.WriteRFXDebugLog(" RFXPwr= " & Round(1 / ((16 * sMeasuredValue) / (3600000 / 62.5)), 3) & "|" & Round((1 / ((16 * sMeasuredValue) / (3600000 / 62.5))) * 1.917, 3) & "kW", 1)
      END IF
    END IF
    CASE &H30
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("New address set")
    CASE &H40
      SELECT CASE (RecBuf[4] AND &HC0)
        CASE &H0
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter for Input-0 will be set to zero within 5 seconds OR push MODE button for next command.")
        CASE &H40
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter for Input-1 will be set to zero within 5 seconds OR push MODE button for next command.")
        CASE &H80
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter for Input-2 will be set to zero within 5 seconds OR push MODE button for next command.")
        CASE ELSE
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Error, unknown input ")
      END SELECT
    CASE &H50
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Push MODE push button within 5 seconds to increment the 1st digit.")
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter value = " & Format(sMeasuredValue, "00000"))
    CASE &H60
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Push MODE push button within 5 seconds to increment the 2nd digit.")
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter value = " & Format(sMeasuredValue, "00000"))
    CASE &H70
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Push MODE push button within 5 seconds to increment the 3rd digit.")
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter value = " & Format(sMeasuredValue, "00000"))
    CASE &H80
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Push MODE push button within 5 seconds to increment the 4th digit.")
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter value = " & Format(sMeasuredValue, "00000"))
    CASE &H90
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Push MODE push button within 5 seconds to increment the 5th digit.")
      sMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter value = " & Format(sMeasuredValue, "00000"))
    CASE &HA0
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Push MODE push button within 5 seconds to increment the 6th digit.")
      SMeasuredValue = Lsr(RecBuf[2], 4) * 100000 + (RecBuf[2] AND &HF) * 10000 + Lsr(RecBuf[3], 4) * 1000 + (RecBuf[3] AND &HF) * 100 + Lsr(RecBuf[4], 4) * 10 + (RecBuf[4] AND &HF)
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter value = " & Format(sMeasuredValue, "00000"))
    CASE &HB0
      SELECT CASE RecBuf[4]
        CASE &H0
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter for Input-0 reset to zero.")
        CASE &H40
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter for Input-1 reset to zero.")
        CASE &H80
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Counter for Input-2 reset to zero.")
        CASE ELSE
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("protocol error.")
      END SELECT
    CASE &HC0
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Enter SET INTERVAL RATE mode within 5 seconds OR push MODE button for next command.")
    CASE &HD0
      SELECT CASE (RecBuf[4] AND &HC0)
        CASE &H0
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Enter CALIBRATION mode for Input-0 within 5 seconds OR push MODE button for next command.")
        CASE &H40
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Enter CALIBRATION mode for Input-1 within 5 seconds OR push MODE button for next command.")
        CASE &H80
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Enter CALIBRATION mode for Input-2 within 5 seconds OR push MODE button for next command.")
        CASE ELSE
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("Error, unknown input ")
      END SELECT
    CASE &HE0
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Enter SET ADDRESS mode within 5 seconds OR push MODE button for next command.")
    CASE &HF0
      IF RecBuf[2] < &H40 THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("RFXPower Identification,", 1)
      ELSE IF RecBuf[2] < &H80 THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("RFXWater Identification,", 1)
      ELSE IF RecBuf[2] < &HC0 THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("RFXGas Identification,", 1)
      ELSE
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("RFXMeter Identification,", 1)
      END IF
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Firmware Version: " & Hex(RecBuf[2]))
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(", Interval rate: ", 1)
      SELECT CASE RecBuf[3]
        CASE &H1
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("30 seconds", 1)
        CASE &H2
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("1 minute", 1)
        CASE &H4
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("6 minutes", 1)
        CASE &H8
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("12 minutes", 1)
        CASE &H10
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("15 minutes", 1)
        CASE &H20
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("30 minutes", 1)
        CASE &H40
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("45 minutes", 1)
        CASE &H80
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("60 minutes", 1)
        CASE ELSE
          IF bRFXComDebug THEN Main.WriteRFXDebugLog("illegal value", 1)
    END SELECT
    CASE ELSE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("illegal packet type", 1)
  END SELECT

END SUB

PRIVATE FUNCTION ProcessOregon(RecBits AS Byte) AS Boolean

  DIM sCelsius, sUv AS Single
  DIM bOregon AS Boolean = FALSE
  DIM Channel AS Byte
  DIM iDeviceId AS Integer
  DIM sUvText AS String

  IF RecBuf[0] = &HA AND RecBuf[1] = &H4D AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComDebug THEN Main.WriteRFXDebugLog("TEMP1[" & CStr((RecBuf[3]) * 256 + ((Lsr(RecBuf[2], 4)) AND &H7)) & "] THR128,THx138", 1)
    Channel = WrChannel()
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" addr:" & Right("0" & Hex(RecBuf[3]), 2), 1)
    IF ((RecBuf[5] AND &HF0) < &HA0) AND ((RecBuf[5] AND &HF) < &HA) AND ((RecBuf[4] AND &HF0) < &HA0) THEN
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" temp:", 1)
      IF (RecBuf[6] AND &H8) = 0 THEN
        sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
      ELSE
        sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
      END IF
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(Format(CStr(sCelsius), "##.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.#") & "°F", 1)
    ELSE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" wrong value in temperature field=" & Hex(RecBuf[5]) & "." & Hex(Lsr(RecBuf[4], 4)), 1)
    END IF

    iDeviceId = Devices.Find(Right("0" & Hex(RecBuf[3]), 2), Devices.FindInterface("RFXCom Receiver"))

    IF (RecBuf[4] AND &H4) = &H4 THEN
       IF iDeviceId THEN Devices.Battery(iDeviceId, "low")
       IF bRFXComDebug THEN Main.WriteRFXDebugLog(" battery low", 1)
    END IF
    Checksum8()

    IF iDeviceId THEN
      Devices.Update(iDeviceId, Format(CStr(sCelsius), "##.#"))
    END IF

  ELSE IF RecBuf[0] = &H1A AND RecBuf[1] = &H2D AND RecBits >= 72 THEN
    bOregon = TRUE
    IF bRFXComDebug THEN Main.WriteRFXDebugLog("TH1[" & CStr(RecBuf[3] * 256 + Channel) & "] THGN122N,THGR122NX,THGR228N,THGR268", 1)
    Channel = WrChannel()
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" addr:" & Right("0" & Hex(RecBuf[3]), 2), 1)
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" temp:", 1)
    IF (RecBuf[6] AND &H8) = 0 THEN
      sCelsius = CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10
    ELSE
      sCelsius = 0 - (CSng(Hex(RecBuf[5])) + CSng(Hex(Lsr(RecBuf[4], 4))) / 10)
    END IF
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(Format(CStr(sCelsius), "##.#") & "°C | " & Format(CStr(sCelsius * 1.8 + 32), "##.#") & "°F", 1)
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" hum:" & Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2), 1)
    WrHum(RecBuf[7] AND &HC0)

    iDeviceId = Devices.Find(Right("0" & Hex(RecBuf[3]), 2), Devices.FindInterface("RFXCom Receiver"))

    IF (RecBuf[4] AND &H4) = &H4 THEN
       IF bRFXComDebug THEN Main.WriteRFXDebugLog(" battery low", 1)
       IF iDeviceId THEN Devices.Battery(iDeviceId, "low")
    END IF
    Checksum8()

    IF iDeviceId THEN
      Devices.Update(iDeviceId, Format(CStr(sCelsius), "##.#"), Right(Hex(((Lsl(RecBuf[7], 4)) AND &HF0) + ((Lsr(RecBuf[6], 4)) AND &HF)), 2))
    END IF
  ELSE IF RecBuf[0] = &HEA AND RecBuf[1] = &H7C AND RecBits >= 60 THEN
    bOregon = TRUE
    IF bRFXComDebug THEN Main.WriteRFXDebugLog("UV1[" & CStr(RecBuf[3] * 256) & "] UVR138 ", 1)
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" addr:" & Right("0" & Hex(RecBuf[3]), 2), 1) 
    sUv = CSng(Hex(RecBuf[5] AND &HF)) * 10 + CSng(Hex(Lsr(RecBuf[4], 4)))
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" UV factor:" & CStr(sUv) & " Level:", 1)
    IF sUv < 3 THEN
      sUvText = "Low"
    ELSE IF sUv < 6 THEN
      sUvText = "Medium"
    ELSE IF sUv < 8 THEN
      sUvText = "High"
    ELSE IF sUv < 11 THEN
      sUvText = "Very high"
    ELSE
      sUvText = "Dangerous"
    END IF
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" " & sUVText & " ", 1)
    iDeviceId = Devices.Find(Right("0" & Hex(RecBuf[3]), 2), Devices.FindInterface("RFXCom Receiver"))
    IF (RecBuf[4] AND &H4) = &H4 THEN
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" battery low", 1)
      IF iDeviceId THEN Devices.Battery(iDeviceId, "low")
    END IF
    ChecksumW()
    IF iDeviceId THEN
      Devices.Update(iDeviceId, CStr(sUv), sUvText)
    END IF
  END IF

END

PRIVATE FUNCTION WrChannel() AS Byte

  SELECT CASE (RecBuf[2] AND &H70)
    CASE &H10
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" CH 1", 1)
      RETURN 1
    CASE &H20
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" CH 2", 1)
      RETURN 2
    CASE &H40
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" CH 3", 1)
      RETURN 4
    CASE ELSE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" CH ? = " & Right("0" & Hex(RecBuf[2]), 2), 1)
      RETURN 0
  END SELECT

END

PRIVATE SUB WrHum(Hum AS Byte)

  SELECT CASE Hum
    CASE &H0
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Normal ", 1)
    CASE &H40
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Comfort ", 1)
    CASE &H80
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Dry ", 1)
    CASE &HC0
      IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Wet ", 1)
  END SELECT

END

PRIVATE SUB Checksum8()

  DIM cs AS Short

  cs = cs8()
  cs = (cs - RecBuf[8]) AND &HFF
  IF cs <> &HA THEN
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Checksum Error", 1)
  END IF

END

PRIVATE FUNCTION ChecksumW() AS Byte

  DIM cs AS Short

  cs = (Lsr(RecBuf[0], 4) AND &HF) + (RecBuf[0] AND &HF)
  cs += (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  cs += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  cs += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  cs += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  cs += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  cs += (RecBuf[6] AND &HF)
  cs = (cs - ((Lsr(RecBuf[6], 4) AND &HF) + (Lsl(RecBuf[7], 4) AND &HF0))) AND &HFF
  IF cs <> &HA THEN
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Checksum Error", 1)
  END IF
  RETURN cs

END

PRIVATE FUNCTION Cs8() AS Byte

  DIM CheckSum AS Byte

  CheckSum = (Lsr(RecBuf[0], 4) AND &HF) + (RecBuf[0] AND &HF)
  CheckSum += (Lsr(RecBuf[1], 4) AND &HF) + (RecBuf[1] AND &HF)
  CheckSum += (Lsr(RecBuf[2], 4) AND &HF) + (RecBuf[2] AND &HF)
  CheckSum += (Lsr(RecBuf[3], 4) AND &HF) + (RecBuf[3] AND &HF)
  CheckSum += (Lsr(RecBuf[4], 4) AND &HF) + (RecBuf[4] AND &HF)
  CheckSum += (Lsr(RecBuf[5], 4) AND &HF) + (RecBuf[5] AND &HF)
  CheckSum += (Lsr(RecBuf[6], 4) AND &HF) + (RecBuf[6] AND &HF)
  CheckSum += (Lsr(RecBuf[7], 4) AND &HF) + (RecBuf[7] AND &HF)
  RETURN CheckSum

END

PRIVATE FUNCTION ProcessX(RecBits AS Byte) AS Boolean

  IF ((RecBuf[0] XOR RecBuf[1]) = &HFF) AND ((RecBuf[2] XOR RecBuf[3]) = &HFF) THEN
    ProcessX10()
  ELSE IF (RecBuf[0] = ((RecBuf[1] AND &HF0) + (&HF - (RecBuf[1] AND &HF)))) AND ((RecBuf[2] XOR RecBuf[3]) = &HFF) THEN
    ProcessX10Security()
  ELSE
    IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Unknown data packet received", 1)
  END IF

END

PRIVATE SUB ProcessX10()

  DIM RecBytes AS Byte
  DIM sHouse, sUnit, sValue AS String
  DIM iDeviceId AS Integer

  sMessage = ""

  SELECT CASE (RecBuf[0] AND &HF0)
    CASE &H60
      sMessage = sMessage & "A"
      sHouse = "A"
    CASE &H70
      sMessage = sMessage & "B"
      sHouse = "B"
    CASE &H40
      sMessage = sMessage & "C"
      sHouse = "C"
    CASE &H50
      sMessage = sMessage & "D"
      sHouse = "D"
    CASE &H80
      sMessage = sMessage & "E"
      sHouse = "E"
    CASE &H90
      sMessage = sMessage & "F"
      sHouse = "F"
    CASE &HA0
      sMessage = sMessage & "G"
      sHouse = "G"
    CASE &HB0
      sMessage = sMessage & "H"
      sHouse = "H"
    CASE &HE0
      sMessage = sMessage & "I"
      sHouse = "I"
    CASE &HF0
      sMessage = sMessage & "J"
      sHouse = "J"
    CASE &HC0
      sMessage = sMessage & "K"
      sHouse = "K"
    CASE &HD0
      sMessage = sMessage & "L"
      sHouse = "L"
    CASE &H0
      sMessage = sMessage & "M"
      sHouse = "M"
    CASE &H10
      sMessage = sMessage & "N"
      sHouse = "N"
    CASE &H20
      sMessage = sMessage & "O"
      sHouse = "O"
    CASE &H30
      sMessage = sMessage & "P"
      sHouse = "P"
    CASE ELSE
      sMessage = sMessage & "Unknown unit-"
  END SELECT
  SELECT CASE RecBuf[2]
    CASE &H80
      sMessage = sMessage & "-All lights off"
    CASE &H90
      sMessage = sMessage & "-All lights on"
    CASE &H88
      sMessage = sMessage & "-Bright"
    CASE &H98
      sMessage = sMessage & "-Dim"
    CASE ELSE
      IF (RecBuf[2] AND &H10) = 0 THEN
        RecBytes = 0
      ELSE
        RecBytes = &H1
      END IF
      IF (RecBuf[2] AND &H8) <> 0 THEN
        RecBytes = RecBytes + &H2
      END IF
      IF (RecBuf[2] AND &H40) <> 0 THEN
        RecBytes = RecBytes + &H4
      END IF
      IF (RecBuf[0] AND &H4) <> 0 THEN
        RecBytes = RecBytes + &H8
      END IF
      RecBytes = RecBytes + 1
      sMessage = sMessage & Trim(Str(RecBytes))
      sUnit = Trim(Str(RecBytes))
      IF (RecBuf[2] AND &H1) = 1 THEN
        sMessage = sMessage & "-Prog Koppla (non X10)"
      ELSE IF (RecBuf[2] AND &H20) = 0 THEN
        sMessage = sMessage & "-On"
        sValue = "On"
      ELSE
        sMessage = sMessage & "-Off"
        sValue = "Off"
      END IF
  END SELECT

  iDeviceId = Devices.Find(sHouse & Right("0" & sUnit, 2), Devices.FindInterface("RFXCom Receiver"))

  IF iDeviceId THEN
    ' marmitek MS13E motion sensor part
    IF Devices.FindModuleForDevice(iDeviceId) = 4 THEN 
      IF sValue = "On" THEN sValue = "Motion"
      IF sValue = "Off" THEN sValue = "No Motion"
    ' marmitek MS13E dark/light sensor part
    ELSE IF Devices.FindModuleForDevice(iDeviceId) = 5 THEN 
      IF sValue = "On" THEN sValue = "Dark"
      IF sValue = "Off" THEN sValue = "Light"
    END IF
    Devices.Update(iDeviceId, sValue)
  END IF

  IF bRFXComDebug THEN Main.WriteRFXDebugLog(sMessage, 1)

END

PRIVATE SUB ProcessX10Security()

  DIM iHsAddr, iDeviceId AS Integer
  DIM sValue, sValue2 AS String
  DIM bLowBatt AS Boolean

  SELECT CASE RecBuf[2]
    CASE &H0
      sValue = "Open"
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DS10/90  Alert (max delay)", 1)
    CASE &H1
      sValue = "Open"
      bLowBatt = TRUE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DS10/90  Alert (max delay, batt low)", 1)
    CASE &H40
      sValue = "Open"
      sValue2 = "Tamper"
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DS90  Alert + Tamper(max delay)", 1)
    CASE &H44
      sValue = "Open"
      sValue2 = "Tamper"
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or DS90  Alert + Tamper", 1)
    CASE &HC0
      sValue = "Closed"
      sValue2 = "Tamper"
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DS90  Normal + Tamper (max delay)", 1)
    CASE &HC4
      sValue = "Closed"
      sValue2 = "Tamper"
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or DS90  Normal + Tamper)", 1)
    CASE &H4
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or DS10/90  Alert ", 1)
      sValue = "Open"
    CASE &H5
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or DS10/90  Alert (battery low)", 1)
      sValue = "Open"
      bLowBatt = TRUE
    CASE &H80
      sValue = "Normal"
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DS10/90  Normal (max delay)", 1)
    CASE &H81
      sValue = "Closed"
      bLowBatt = TRUE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DS10/90  Normal (max delay, batt low)", 1)
    CASE &H84
      sValue = "Closed"
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or DS10/90  Normal", 1)
    CASE &H85
      sValue = "Closed"
      bLowBatt = TRUE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or DS10/90  Normal (battery low)", 1)
    CASE &HC
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or MS10/20/90  Alert ", 1)
    CASE &H8C
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or MS10/20/90  Normal", 1)
    CASE &H20
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("MS20  Dark sensor", 1)
    CASE &H4C
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or MS90  Alert + Tamper", 1)
    CASE &HCC
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or MS90  Normal + Tamper", 1)
    CASE &HD
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or MS90  Alert + batt.low ", 1)
    CASE &H8D
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or MS90  Normal + batt.low", 1)
    CASE &HE0
      IF RecBuf[0] = &HFF THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Master receiver jamming detected", 1)
      ELSE IF RecBuf[0] = &H0 THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Slave receiver jamming detected", 1)
      ELSE
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("DM10  Motion", 1)
      END IF
    CASE &HF0
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("DM10  Darkness detected", 1)
    CASE &HF8
      IF RecBuf[0] = &HFF THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Master receiver end jamming detected", 1)
      ELSE IF RecBuf[0] = &H0 THEN
        IF bRFXComDebug THEN Main.WriteRFXDebugLog(" Slave receiver end jamming detected", 1)
      ELSE
        IF bRFXComDebug THEN Main.WriteRFXDebugLog("DM10  Light detected", 1)
      END IF
    CASE &H6
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("KR10/SH624 ARM Away (min)", 1)
    CASE &H26
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or KR10/Smoke Panic", 1)
      sValue = "Panic"
    CASE &H46
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("KR10  Lights On", 1)
    CASE &H86
     IF bRFXComDebug THEN Main.WriteRFXDebugLog("KR10  Disarm", 1)
    CASE &HC6
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("KR10  Lights Off", 1)
    CASE &H2
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or SH624 ARM Away (max)", 1)
    CASE &H3
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("SH624 Panic", 1)
    CASE &HA
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("SH624 ARM Home (max)", 1)
    CASE &HE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or SH624 ARM Home (min)", 1)
    CASE &H22
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("SH624 Panic ", 1)
    CASE &H42
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or SH624 Lights On", 1)
    CASE &H82
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Visonic or SH624 Disarm", 1)
    CASE &HC2
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("SH624 Lights Off", 1)
    CASE ELSE
      IF bRFXComDebug THEN Main.WriteRFXDebugLog("Secur ??????", 1)
  END SELECT
  iHsAddr = CreateHsAddr()
  IF Protocol = MODEB32 THEN
    IF bRFXComDebug THEN
      Main.WriteRFXDebugLog(" addr:" & Right("0" & Hex(RecBuf[0]), 2), 1)
      Main.WriteRFXDebugLog(" = ACRF-ID:" & Right("    " & Str(iHsAddr), 5), 1)
    END IF
  ELSE
    IF bRFXComDebug THEN
      Main.WriteRFXDebugLog(" addr:" & Right("0" & Hex(RecBuf[0]), 2), 1)
      Main.WriteRFXDebugLog(Right("0" & Hex(RecBuf[1]), 2), 1)
      Main.WriteRFXDebugLog(" " & Right("0" & Hex(RecBuf[4]), 2), 1)
      Main.WriteRFXDebugLog(" = ACRF-ID:" & Right("    " & Str(iHsAddr), 5), 1)
      Main.WriteRFXDebugLog(Right("0" & Hex(RecBuf[0]), 2), 1)
      Main.WriteRFXDebugLog(Right("0" & Hex(RecBuf[1]), 2), 1)
      Main.WriteRFXDebugLog(Right("0" & Hex(RecBuf[4]), 2), 1)
    END IF
  END IF

  IF NOT sValue2 AND sValue <> "Panic" THEN sValue2 = "Secure"

  iDeviceId = Devices.Find(Right("0" & Hex(RecBuf[0]), 2) & Right("0" & Hex(RecBuf[1]), 2) & Right("0" & Hex(RecBuf[4]), 2), Devices.FindInterface("RFXCom Receiver"))

  IF bLowBatt THEN
    IF iDeviceId THEN Devices.Battery(iDeviceId, "low")
  END IF

  IF iDeviceId THEN 
    Devices.Update(iDeviceId, sValue, sValue2)
  END IF

END

PRIVATE FUNCTION CreateHsAddr() AS Integer

  DIM iHsAddr AS Integer

  iHsAddr = 0
  IF (RecBuf[0] AND &H1) <> 0 THEN
    iHsAddr = iHsAddr OR &H80
  END IF
  IF (RecBuf[0] AND &H2) <> 0 THEN
    iHsAddr = iHsAddr OR &H40
  END IF
  IF (RecBuf[0] AND &H4) <> 0 THEN
    iHsAddr = iHsAddr OR &H20
  END IF
  IF (RecBuf[0] AND &H8) <> 0 THEN
    iHsAddr = iHsAddr OR &H10
  END IF
  IF (RecBuf[0] AND &H10) <> 0 THEN
    iHsAddr = iHsAddr OR &H8
  END IF
  IF (RecBuf[0] AND &H20) <> 0 THEN
    iHsAddr = iHsAddr OR &H4
  END IF
  IF (RecBuf[0] AND &H40) <> 0 THEN
    iHsAddr = iHsAddr OR &H2
  END IF
  IF (RecBuf[0] AND &H80) <> 0 THEN
    iHsAddr = iHsAddr OR &H1
  END IF
  IF (RecBuf[1] AND &H1) <> 0 THEN
    iHsAddr = iHsAddr OR &H8000
  END IF
  IF (RecBuf[1] AND &H2) <> 0 THEN
    iHsAddr = iHsAddr OR &H4000
  END IF
  IF (RecBuf[1] AND &H4) <> 0 THEN
    iHsAddr = iHsAddr OR &H2000
  END IF
  IF (RecBuf[1] AND &H8) <> 0 THEN
    iHsAddr = iHsAddr OR &H1000
  END IF
  IF (RecBuf[1] AND &H10) <> 0 THEN
    iHsAddr = iHsAddr OR &H800
  END IF
  IF (RecBuf[1] AND &H20) <> 0 THEN
    iHsAddr = iHsAddr OR &H400
  END IF
  IF (RecBuf[1] AND &H40) <> 0 THEN
    iHsAddr = iHsAddr OR &H200
  END IF
  IF (RecBuf[1] AND &H80) <> 0 THEN
    iHsAddr = iHsAddr OR &H100
  END IF
  RETURN iHsAddr

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS Integer

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS Integer)

  iTCPPort = Value

END

PRIVATE FUNCTION Interface_Read() AS String

  RETURN sInterface

END

PRIVATE SUB Interface_Write(Value AS String)

  sInterface = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION SerPort_Read() AS String

  RETURN sSerPort

END

PRIVATE SUB SerPort_Write(Value AS String)

  sSerPort = Value

END

PRIVATE FUNCTION RFXComDebug_Read() AS Boolean

  RETURN bRFXComDebug

END

PRIVATE SUB RFXComDebug_Write(Value AS Boolean)

  bRFXComDebug = Value

END
