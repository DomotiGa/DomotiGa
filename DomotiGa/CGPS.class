' Gambas class file

' Description:
' CGPS.class
' u-blox AG MS1E GPS module (NMEA) support to get GPS time, precise position, and altitude
' GPS module version: $Version 1.3.4P00283 uBlx308

' Development Status:
' Reads serial data, needs parsing to be implemented.
' Wrote it for fun, no serious purpose for a non mobile server.

' Links:
' http://aprs.gids.nl/nmea/

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien
' Module additions Copyright(C) 2009 by Timo Sariwating

' Read file called COPYING for license details.

' Notes:
' NMEA sentences: 
' $GPBOD - Bearing, origin TO destination
' $GPBWC - Bearing AND distance TO waypoint, great circle
' $GPGGA - Global Positioning System Fix Data
' $GPGLL - Geographic position, latitude / longitude
' $GPGSA - GPS DOP AND active satellites 
' $GPGSV - GPS Satellites IN view
' $GPHDT - Heading, TRUE
' $GPR00 - List OF waypoints IN currently active route
' $GPRMA - Recommended minimum specific Loran - C data
' $GPRMB - Recommended minimum navigation info
' $GPRMC - Recommended minimum specific GPS / Transit data
' $GPRTE - Routes
' $GPTRF - Transit Fix Data
' $GPSTN - Multiple Data ID
' $GPVBW - Dual Ground / Water Speed
' $GPVTG - Track made good AND ground speed
' $GPWPL - Waypoint location
' $GPXTE - Cross - track ERROR , Measured
' $GPZDA - Date & Time

PROPERTY Port AS String
PROPERTY Baud AS String
PROPERTY GPSDebug AS Boolean

PRIVATE sPort AS String
PRIVATE sBaud AS String
PRIVATE bGPSDebug AS Boolean

PUBLIC hGPS AS NEW SerialPort

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the port
  TRY hGPS.Close

  ' get a new one
  hGPS = NEW Serialport AS "GPS"
  WITH hGPS
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("GPS Error: " & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hGPS.Close
  Main.WriteLog("GPS serial port close.")

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("GPS Error: " & ERROR.Text & "")
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data input
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GPS_Read()

  DIM sData AS String

  LINE INPUT #hGPS, sData
    SELECT CASE Mid$(sdata, 2, 5)
    CASE "GPGLL" ' position
    Main.WriteDebugLog("[GPS] Position: " & sData)
    CASE "GPZDA" ' date & time
    Main.WriteDebugLog("[GPS] Date & Time: " & sData)
    CASE "GPGGA" ' fix data
    GPSFix(sData)
    CASE "GPGSV" ' satellites in view
    'Main.WriteDebugLog("[GPS] Satellites in view: " & sData)
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse fix data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION GPSFix(sValue AS String)

  DIM sGPSFix AS String[]
  DIM sB, sC AS String
  DIM iCounter AS Integer = 1

  sGPSFix = Split(sValue, ",")

  FOR EACH sB IN sGPSFix
    SELECT CASE (iCounter)
    CASE 1
      INC iCounter
    CASE 2
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Time: " & sB)
      INC iCounter
    CASE 3
      sC = sB
      INC iCounter
    CASE 4
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Latitude: " & sC & " " & sB)
      sC = ""
      INC iCounter
    CASE 5
      sC = sB
      INC iCounter
    CASE 6
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Longitude: " & sC & " " & sB)
      sC = ""
      INC iCounter
    CASE 7
    IF bGPSDebug THEN
      SELECT CASE (sB)
      CASE 0
        Main.WriteDebugLog("[GPS] Fix Quality: Invalid")
        INC iCounter
      CASE 1
        Main.WriteDebugLog("[GPS] Fix Quality: GPS Fix")
        INC iCounter
      CASE 2
        Main.WriteDebugLog("[GPS] Fix Quality: DGPS Fix")
        INC iCounter
      END SELECT
      ELSE
        INC iCounter
      ENDIF
    CASE 8
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Number of Satellites: " & sB)
      INC iCounter
    CASE 9
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] HDOP: " & sB)
      INC iCounter
    CASE 10
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Altitude: " & sB)
      INC iCounter
    CASE 11
      INC iCounter
    CASE 12
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Heigh above WGS84: " & sB)
      INC iCounter
    CASE 13
      INC iCounter
    CASE 14
      IF bGPSDebug THEN Main.WriteDebugLog("[GPS] Time since last DGPS update: " & sB)
      INC iCounter
    CASE 15
      IF bGPSDebug THEN
        Main.WriteDebugLog("[GPS] DGPS Station ID: " & Left$(sB, 4))
        Main.WriteDebugLog("[GPS] CheckSum: " & Right$(sB, -4))
      ENDIF
    END SELECT
  NEXT

END

' implement the properties
PRIVATE FUNCTION Port_Read() AS String

  RETURN sPort

END

PRIVATE SUB Port_Write(sValue AS String)

  sPort = sValue

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(sValue AS String)

  sBaud = sValue

END

PRIVATE FUNCTION GPSDebug_Read() AS Boolean

  RETURN bGPSDebug

END

PRIVATE SUB GPSDebug_Write(sValue AS Boolean)

  bGPSDebug = sValue

END
