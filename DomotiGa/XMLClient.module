' Gambas module file

' Description:
' XMLRPC.module
' Support for client/server setup via XMLRPC interface.

' Development Status:
' Sort of working, needs better error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' let server reload config and restart module named sModule
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ModuleRestart(sModule AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("module.restart", [XmlRpc.xstring], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sModule)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully (re)started '") & sModule & ("' module on server."))
  ELSE
    Main.WriteLog(("Error: There was a problem (re)starting ") & sModule & (" module on server, check it's log."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send e-mail
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SendEmail(sTo AS String, sSubject AS String, sBody AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("send.email", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sTo)
  vVar.Add(sSubject)
  vVar.Add(sBody)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully sent e-mail to '") & sTo & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem sending e-mail to ") & sTo & ".")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send tweet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SendTweet(sText AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("send.tweet", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sText)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully sent tweet to 'http://twitter.com/") & Main.sTwitterUser & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem sending tweet to 'http://twitter.com/") & Main.sTwitterUser & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send sms
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SendSMS(sTo AS String, sText AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("send.sms", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sTo)
  vVar.Add(sText)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully sent SMS to '") & sTo & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem sending SMS to '") & sTo & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set house mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SetHouseMode(sMode AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("set.housemode", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sMode)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set House mode to '") & sMode & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem setting House mode to '") & Main.Caps(sMode) & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set mute mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SetMuteMode(bMode AS Boolean)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("set.mutemode", [XmlRpc.xBoolean], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(bMode)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set Mute mode to '") & IIf(bMode, "Audio Disabled", "Audio Enabled") & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem setting Mute mode to '") & bMode & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set device value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION DeviceSetDevice(sDevice AS String, sValue AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("device.setdevice", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sDevice)
  vVar.Add(sValue)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem setting value of device '") & sDevice & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create rrdtool databases
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION CreateRRDs(iId AS Integer)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("rrdtool.createrrds", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(iId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem creating rrdtool databases."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update rrdtool graphs for a group and range
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION UpdateRRDGraphs(sGroup AS String, sRange AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("rrdtool.updategraphs", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sGroup)
  vVar.Add(sRange)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem updating rrdtool graphs."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set alarm pin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SetAlarmPin(sPin AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("set.alarmpin", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPin)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set Alarm pin."))
  ELSE
    Main.WriteLog(("Error: There was a problem setting Alarm pin."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set alarm mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SetAlarmMode(sMode AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("set.alarmmode", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sMode)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set Alarm mode."))
  ELSE
    Main.WriteLog(("Error: There was a problem setting Alarm mode."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' play sound
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION PlaySound(sSound AS String, iVolume AS Integer)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("play.sound", [XmlRpc.xString, XmlRpc.xInteger], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sSound)
  vVar.Add(iVolume)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem playing sound."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' speak voicetext
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION VoiceTextSpeak(sText AS String, sVoice AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("voicetext.speak", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sText)
  vVar.Add(sVoice)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem speaking voicetext."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display led matrix message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION DisplayLEDMessage(sId AS String, sText AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("display.ledmessage", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sId)
  vVar.Add(sText)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem displaying led message."))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set audio control
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION AVSetControl(sModel AS String, sCmd AS String, sValue AS String, sAddress AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("av.setcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sModel)
  vVar.Add(sCmd)
  vVar.Add(sValue)
  vVar.Add(sAddress)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem controlling audio/video device '") & sModel & ("' with '") & sCmd & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get audio control
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION AVGetControl(sModel AS String, sCmd AS String, sAddress AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("av.getcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sModel)
  vVar.Add(sCmd)
  vVar.Add(sAddress)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem getting audio/video device setting '") & sModel & ("' with '") & sCmd & "'.")
  END IF

END

PUBLIC FUNCTION GetGlobalVars()

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM Result AS RpcArray
  DIM vValue AS Variant
  DIM sVar AS String
  DIM i AS Integer

  fRpc = NEW RpcFunction("globalvar.get", NULL, XmlRpc.xArray)
  cRpc = NEW RpcClient(fRpc)

  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  TRY Result = cRpc.Call(NULL)
  IF ERROR THEN
    Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  ELSE
    FOR i = 0 TO (Result.Count - 1) / 2
      vValue = Result.Pop()
      sVar = Result.Pop()
      Main.GlobalVar[sVar] = vValue
    NEXT
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set global var
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SetGlobalVar(sVar AS String, sValue AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("globalvar.set", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sVar)
  vVar.Add(sValue)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set '") & sVar & ("' to '") & sValue & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem setting '") & sVar & ("' to '") & sValue & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save global var to database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SaveGlobalVars()

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("globalvar.save", NULL, XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort

  TRY bOk = cRpc.Call(NULL)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog("Successfully saved globalvars to database.")
  ELSE
    Main.WriteLog("Error: There was Saving global vars to database.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete globalvar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION DelGlobalVar(sVar AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("globalvar.del", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sVar)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully deleted '") & sVar & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem deleting '") & sVar & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cul simulate packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION CULSimulate(sPacket AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("cmdr.culsimulate", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPacket)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem simulating CUL packet '") & sPacket & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cul queuecommand
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION CULQueueCommand(sPacket AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("cmdr.culqueuecommand", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPacket)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem queueing CUL command '") & sPacket & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' plcbus send command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION PLCBUSTXCommand(sAddress AS String, sCmd AS String, bAck AS Boolean, bData AS Byte)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("cmdr.plcbustxcommand", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xBoolean, XmlRpc.xInteger], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sAddress)
  vVar.Add(sCmd)
  vVar.Add(bAck)
  vVar.Add(bData)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF NOT bOk THEN
    Main.WriteLog(("Error: There was a problem sending PLCBUS command for '") & sAddress & "'.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run actions from event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION RunActions(iEventId AS Integer)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("events.runactions", [XmlRpc.xInteger], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(iEventId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully executed actions from event with id '") & iEventId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem executing actions from event with id '") & iEventId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run action
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION RunAction(iActionId AS Integer)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("events.runaction", [XmlRpc.xInteger], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(iActionId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully executed action with id '") & iActionId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem executing action with id '") & iActionId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get program version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetProgramVersion() AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM sResult AS String

  fRpc = NEW RpcFunction("system.program_version", NULL, XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)

  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  TRY sResult = cRpc.Call(NULL)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get calendar planning
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetPlanning()

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM Result AS RpcArray
  DIM d AS Date
  DIM i AS Integer

  fRpc = NEW RpcFunction("calendar.getplanning", NULL, XmlRpc.xArray)
  cRpc = NEW RpcClient(fRpc)

  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  TRY Result = cRpc.Call(NULL)
  IF ERROR THEN
    Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  ELSE
    Calendar.dPlanning.Clear()
    FOR i = 0 TO (Result.Count - 1) 
      d = Result.Pop()
      Calendar.dPlanning.Add(d)
    NEXT
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set planning
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SetPlanning()

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean
  DIM d AS Date
  DIM list AS NEW RpcArray

  fRpc = NEW RpcFunction("calendar.setplanning", [XmlRpc.xArray], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort

  FOR EACH d IN Calendar.dPlanning
    list.Add(d, XmlRpc.xDate)
  NEXT

  vVar.Add(list)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog("Successfully set occupancy planning.")
  ELSE
    Main.WriteLog("Error: There was a problem setting ocupancy planning.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set volume squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxSetVolumePlayer(sPlayerId AS String, sVolume AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.setvolumeplayer", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)
  vVar.Add(sVolume)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set volume player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to set volume player '") & sPlayerId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' play squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetVolumePlayer(sPlayerId AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS String

  fRpc = NEW RpcFunction("squeezebox.getvolumeplayer", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY sResult = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stop squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxStopPlayer(sPlayerId AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.stopplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set stop player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to set stop player '") & sPlayerId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' play squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxPlayPlayer(sPlayerId AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.playplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set play player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to set play player '") & sPlayerId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set next number squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxNextNumberPlayer(sPlayerId AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.nextnumberplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set next number player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to set next number player '") & sPlayerId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set prev squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxPrevNumberPlayer(sPlayerId AS String)

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.prevnumberplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set prev number player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to set prev number player '") & sPlayerId & "'.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get current title squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetCurrentTitlePlayer(sPlayerId AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS String

  fRpc = NEW RpcFunction("squeezebox.getcurrentnumberplayer", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY sResult = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get current mode squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetModePlayer(sPlayerId AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS String

  fRpc = NEW RpcFunction("squeezebox.getmodeplayer", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY sResult = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get current player id squeezebox player with player index
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetPlayerId(sPlayerIndex AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS String

  fRpc = NEW RpcFunction("squeezebox.getplayerid", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerIndex)

  TRY sResult = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get current name squeezebox player with player index
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetPlayerName(sPlayerIndex AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS String

  fRpc = NEW RpcFunction("squeezebox.getplayername", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerIndex)

  TRY sResult = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get current type squeezebox player with player index
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetIsPlayer(sPlayerIndex AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS String

  fRpc = NEW RpcFunction("squeezebox.getisplayer", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerIndex)

  TRY sResult = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")

  RETURN sResult

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get albums squeezebox server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetAlbums() AS String[]

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sResult AS NEW RpcArray
  DIM aResults AS NEW String[]
  DIM i AS Integer

  fRpc = NEW RpcFunction("squeezebox.getalbums", NULL, XmlRpc.xArray)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort

  TRY sResult = cRpc.Call(NULL)
  IF ERROR THEN
    Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  ELSE
    FOR i = 0 TO (sResult.Count - 1) 
      aResults.Add(sResult.Pop())
    NEXT
  ENDIF

  RETURN aResults

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' clear playlist squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxClearPlaylistPlayer(sPlayerId AS String) AS Boolean

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.clearplaylistplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set clear playlist player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to clear playlistplayer '") & sPlayerId & "'.")
  ENDIF

  RETURN bOk

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add album to playlist squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxAddAlbumToPlaylistPlayer(sPlayerId AS String, sAlbumName AS String) AS Boolean

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bOk AS Boolean

  fRpc = NEW RpcFunction("squeezebox.addalbumtoplaylistplayer", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)
  vVar.Add(sAlbumName)

  TRY bOk = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bOk THEN
    Main.WriteLog(("Successfully set add album to playlist player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to add a ablum to playlist player '") & sPlayerId & "'.")
  ENDIF

  RETURN bOk

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get current artist squeezebox player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetCurrentArtistPlayer(sPlayerId AS String) AS String

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM sArtist AS String

  fRpc = NEW RpcFunction("squeezebox.getcurrentartistplayer", [XmlRpc.xString], XmlRpc.xString)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY sArtist = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF sArtist = NOT NULL THEN
    Main.WriteLog(("Successfully get current artist player '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to get current artist player '") & sPlayerId & "'.")
  END IF

  RETURN sArtist

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' is player connected to squeezebox server player with player id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SqueezeboxGetIsPlayerConnectedToServer(sPlayerId AS String) AS Boolean

  DIM fRpc AS RpcFunction
  DIM cRpc AS RpcClient
  DIM vVar AS NEW Variant[]
  DIM bConnected AS Boolean

  fRpc = NEW RpcFunction("squeezebox.getplayerisconnectedtoserver", [XmlRpc.xString], XmlRpc.xBoolean)
  cRpc = NEW RpcClient(fRpc)
  cRpc.URL = "http://" & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort
  vVar.Add(sPlayerId)

  TRY bConnected = cRpc.Call(vVar)
  IF ERROR THEN Main.WriteLog(("Error: ") & ERROR.Text & (" when posting to URL 'http://") & Main.sXMLRPCHost & ":" & Main.iXMLRPCPort & "'")
  IF bConnected THEN
    Main.WriteLog(("Successfully player is connected to server player id '") & sPlayerId & "'.")
  ELSE
    Main.WriteLog(("Error: There was a problem to get player is connected to server player id '") & sPlayerId & "'.")
  ENDIF

  RETURN bConnected

END
