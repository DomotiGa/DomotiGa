' Gambas class file

' Description:
' FScenarioEditor.class
' Support for creating and editing of all thermostat constants.

' Development Status:
' Works for 99%.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC rResultDevices AS Result
PUBLIC rResultSensors AS Result

PRIVATE rResult AS Result
PUBLIC bAddHeating AS Boolean
PRIVATE bShift AS Boolean = FALSE

PUBLIC SUB Form_Open()

  IF bAddHeating THEN ME.Text = ("Create Heating")
  ME.Move(FMain.X + 50, FMain.Y + 70)

  vbRegTemp.Value = 20

  GetDevices()
  GetSensors()
  LoadHeating()

END

PUBLIC SUB LoadHeating()

  DIM i AS Integer

  IF NOT bAddHeating THEN
    ' get selected event values
    TRY rResult = Main.hDB.Exec("SELECT * FROM thermostat_heating WHERE id = &1 ", FThermostat.txtCurTherm)
    IF NOT ERROR THEN
      IF rResult.Count >= 1 THEN
        txtName.Text = rResult!name
        cmbSensor.Text = GetDeviceName(rResult!sensor)
        cmbDevice.Text = GetDeviceName(rResult!device)
        TRY cbxInvertedDevice.Value = rResult!deviceInverted
        cmbRegulator.Text = GetDeviceName(rResult!regulator)
        TRY cbxInvertedRegulator.Value = rResult!regulatorInverted
        txtDescription.Text = rResult!description
        vbDeviceOffsetBottom.Value = rResult!deviceOffsetBottom 
        vbDeviceOffsetTop.Value = rResult!deviceOffsetTop
        vbDeviceLatency.Value = rResult!deviceLatency
        vbRegulatorOffsetBottom.Value = rResult!regulatorOffsetBottom
        vbRegulatorOffsetTop.Value = rResult!regulatorOffsetTop
        Display_OffsetControl
      ELSE
        Message(("Couldn't load heating record!"))
        ME.Close
      ENDIF
    ENDIF
  ENDIF

END

PUBLIC SUB btnCancel_Click()

  bAddHeating = FALSE
  ME.Close

END

PUBLIC SUB btnDelete_Click()

  SELECT Message.Question(("Are you sure that you want to delete this heating ?"), ("Yes"), ("No"))
    CASE 1
      Main.hDB.Exec("DELETE FROM thermostat_heating WHERE id = &1", rResult!id)
      ME.Close
      FThermostat.GetThermList()
  END SELECT

END

PUBLIC SUB GetDeviceName(iId AS Integer) AS String

  DIM rResultDevName AS result

'  rResultDevName = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  rResultDevName = Devices.Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!name
    ENDIF
  ENDIF
  RETURN ""

END

PUBLIC SUB btnNew_Click()

  bAddHeating = TRUE
  btnSave_Click()

END

PUBLIC SUB btnSave_Click()

  DIM iRow, iCol AS Integer
  DIM rResultUpdate AS Result
  DIM sSql AS String
  DIM iRet AS Integer

  IF NOT txtName.Text THEN
    Balloon(("Please enter a name for this heating !"), txtName)
    RETURN
  ENDIF
  IF NOT cmbSensor.Text THEN
    Balloon(("Please select a sensor for this heating !"), cmbSensor)
    RETURN
  ENDIF
  IF NOT cmbDevice.Text THEN
    Balloon(("Please select a device for this heating !"), cmbDevice)
    RETURN
  ENDIF
  IF NOT vbDeviceOffsetTop.Text THEN
    Balloon(("Please enter a value !"), vbDeviceOffsetTop)
    RETURN
  ENDIF
  IF NOT vbDeviceOffsetBottom.Text THEN
    Balloon(("Please enter a value !"), vbDeviceOffsetBottom)
    RETURN
  ENDIF
  IF cmbRegulator.Text THEN     
    IF NOT vbRegulatorOffsetTop.Text THEN
      Balloon(("Please enter a value !"), vbRegulatorOffsetTop)
      RETURN
    ENDIF
    IF NOT vbRegulatorOffsetBottom.Text THEN
      Balloon(("Please enter a value !"), vbRegulatorOffsetBottom)
      RETURN
    ENDIF
    IF vbRegulatorOffsetTop.Value >= vbDeviceOffsetTop.value THEN 
      Balloon(("Device offset must be greater than Regulator offset !"), vbRegulatorOffsetTop)
      RETURN
    ENDIF
    IF vbRegulatorOffsetBottom.Value >= vbDeviceOffsetBottom.value THEN 
      Balloon(("Device offset must be greater than Regulator offset !"), vbRegulatorOffsetBottom)
      RETURN
    ENDIF
  ENDIF
  IF bAddHeating THEN
    ' create new scenario row
    sSql = "INSERT INTO thermostat_heating SET name = &1, sensor = &2, device= &3, deviceInverted=&4, deviceLatency=&5, regulator=&6, regulatorInverted=&7, description=&8, deviceOffsetTop=&9, regulatorOffsetTop=&10, deviceOffsetBottom=&11, regulatorOffsetBottom=&12"
    rResultUpdate = Main.hDB.Exec(sSql, txtName.Text, GetDeviceId(cmbSensor.Text), GetDeviceId(cmbDevice.Text), cbxInvertedDevice.Value, vbDeviceLatency.Value, GetDeviceId(cmbRegulator.Text), cbxInvertedRegulator.Value, txtDescription.Text, vbDeviceOffsetTop.Value, vbRegulatorOffsetTop.Value, vbDeviceOffsetBottom.Value, vbRegulatorOffsetBottom.Value)
  ELSE
    ' update new event details
    sSql = "UPDATE thermostat_heating SET name = &1, sensor = &2, device= &3, deviceInverted=&4, deviceLatency=&5, regulator=&6, regulatorInverted=&7, description=&8, deviceOffsetTop=&9, regulatorOffsetTop=&10, deviceOffsetBottom=&11, regulatorOffsetBottom=&12 WHERE id = &13 "
    rResultUpdate = Main.hDB.Exec(sSql, txtName.Text, GetDeviceId(cmbSensor.Text), GetDeviceId(cmbDevice.Text), cbxInvertedDevice.Value, vbDeviceLatency.Value, GetDeviceId(cmbRegulator.Text), cbxInvertedRegulator.Value, txtDescription.Text, vbDeviceOffsetTop.Value, vbRegulatorOffsetTop.Value, vbDeviceOffsetBottom.Value, vbRegulatorOffsetBottom.Value, rResult!id)    
  ENDIF

  FThermostat.GetThermList()
  bAddHeating = FALSE
  ME.Close

END

PUBLIC SUB GetDeviceId(sName AS String) AS Integer

  DIM rResultDevName AS result

'  rResultDevName = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sName)
  rResultDevName = Devices.FindIdForDevice(sName)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!id
    ENDIF
  ENDIF
  RETURN 0

END

PUBLIC SUB GetDevices()

  cmbDevice.Clear
  cmbRegulator.Clear
  cmbDevice.Add("")
  cmbRegulator.Add("")
  rResultDevices = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE and switchable is TRUE ORDER BY name")
  IF rResultDevices THEN
    IF rResultDevices.Count THEN
      FOR EACH rResultDevices
        cmbDevice.Add(rResultDevices!name)
        cmbRegulator.Add(rResultDevices!name)
      NEXT
    ENDIF
  ELSE
    Message.Info(("Error: couldn't find devices table!"))
    RETURN
  ENDIF

END

PUBLIC SUB GetSensors()

  cmbSensor.Clear
  cmbSensor.Add("")
  rResultSensors = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE and switchable is FALSE ORDER BY name")
  IF rResultSensors THEN
    IF rResultSensors.Count THEN
      FOR EACH rResultSensors
        cmbSensor.Add(rResultSensors!name)
      NEXT
    ENDIF
  ELSE
    Message.Info(("Error: couldn't find devices table!"))
    RETURN
  ENDIF

END

PUBLIC SUB cbxInvertedDevice_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cbxInvertedRegulator_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbSensor_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbDevice_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbRegulator_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB txtDescription_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB txtName_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB vbDeviceOffsetTop_KeyPress()

  btnSave.Enabled = TRUE
  Display_OffsetControl

END

PUBLIC SUB vbDeviceOffsetBottom_KeyPress()

  btnSave.Enabled = TRUE
  Display_OffsetControl

END

PUBLIC SUB vbRegulatorOffsetTop_KeyPress()

  btnSave.Enabled = TRUE
  Display_OffsetControl

END

PUBLIC SUB vbRegulatorOffsetBottom_KeyPress()

  btnSave.Enabled = TRUE
  Display_OffsetControl

END

PUBLIC SUB vbDeviceLatency_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB vbRegTemp_KeyPress()

  Display_OffsetControl

END

PUBLIC SUB Display_OffsetControl()

  TRY lblDevMin.Text = vbRegTemp.Value - vbDeviceOffsetBottom.Value
  TRY lblDevMax.Text = vbRegTemp.Value + vbDeviceOffsetTop.Value
  TRY lblRegMin.Text = vbRegTemp.Value - vbRegulatorOffsetBottom.Value
  TRY lblRegMax.Text = vbRegTemp.Value + vbRegulatorOffsetTop.Value

END
