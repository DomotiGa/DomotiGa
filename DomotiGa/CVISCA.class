' Gambas class file

' Description:
' CVISCA.class
' Support for Sony VISCA protocol to control PTZ camera's

' Development Status:
' Just build.

' Links:
' http://www.vision.auc.dk/~tbm/Sony/EVID30.pdf
' http://animatlab.lip6.fr/~gouricho/SonyPTZCamEVID31/evidapplication.html
' http://www.j3soft.net/webcam/evi-d30.htm
' http://www.j3soft.net/webcam/evi-d31.htm
' http://f1chf.free.fr/SONY/

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY Port AS String
PROPERTY VISCADebug AS Boolean

PRIVATE sPort AS String
PRIVATE bVISCADebug AS Boolean

PUBLIC hVISCA AS NEW SerialPort
PUBLIC bCamNum AS Byte = &H80 + Hex(Main.iVISCACameraAddress)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the port
  TRY hVISCA.Close

  ' get a new one
  hVISCA = NEW Serialport AS "VISCA"
  WITH hVISCA
    .PortName = sPort
    .Speed = 9600
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("VISCA Error: " & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hVISCA.Close
  Main.WriteLog("VISCA serial port close.")

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog("VISCA Error: " & ERROR.Text)
  RETURN FALSE

END

' send a command to the camera
PUBLIC FUNCTION SendCommand(aCommand AS Array)

  DIM iCmd AS Byte

  IF Main.bVISCADebug THEN Main.WriteDebugLog("[VISCA]")

  FOR EACH iCmd IN aCommand
    IF Main.bVISCADebug THEN Main.WriteDebugLog("Sent " & Hex$(iCmd) & " ")
    TRY WRITE #hVISCA, iCmd
  NEXT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data input
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB VISCA_Read()

  DIM sData AS Byte

  READ #hVISCA, sData
  IF Main.bVISCADebug THEN Main.WriteDebugLog("Recv " & Hex$(sData))

  ProcessReceivedChar(sData)

END

PRIVATE SUB ProcessReceivedChar(sComChar AS Byte)

  DIM bTemp AS Byte

  ' write the output to the screen
  bTemp = sComChar

END

' AddressSet broadcast 88 30 01 FF Send Address_set command and if_clear command before starting communication.
' If_Clear broadcast 88 01 00 01 FF Broadcast.

PUBLIC SUB AddressSet()

  'send address set command to cameras
  DIM b AS Byte[4]

  b[0] = &H88
  b[1] = &H30
  b[2] = &H1
  b[3] = &HFF

  SendCommand(b)

END

PUBLIC SUB IFClear()

  ' send if_Clear command to cameras
  DIM b AS Byte[5]

  b[0] = &H88
  b[1] = &H1
  b[2] = &H0
  b[3] = &H1
  b[4] = &HFF

  SendCommand(b)

END

' CAM_Power
' On 8x 01 04 00 02 FF When Camera main power is on, camera can be changed to
' Off 8x 01 04 00 03 FF Power Save Mode.

PUBLIC SUB Power(sMode AS String)

  DIM b AS Byte[6]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H0

  SELECT CASE sMode
    CASE "On"
      b[4] = &H2
    CASE "Off"
      b[4] = &H3
  END SELECT

  b[5] = &HFF
  SendCommand(b)

END

' CAM_WB
' Auto 8x 01 04 35 00 FF White Balance Setting.
' Indoor mode 8x 01 04 35 01 FF Auto: Trace the light source automatically.
' Outdoor mode 8x 01 04 35 02 FF Indoor / Outdoor: Fixed at Factory.
' OnePush mode 8x 01 04 35 03 FF Pull - in to White with a Trigger then hold the data until next
' OnePush trigger 8x 01 04 10 05 FF Trigger coming

PUBLIC SUB WhiteBalance(sMode AS String)

  DIM b AS Byte[6]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H35

  FCamera.btnWBAuto.Enabled = TRUE
  FCamera.btnWBIndoor.Enabled = TRUE
  FCamera.btnWBOutdoor.Enabled = TRUE
  FCamera.btnWBOnePush.Enabled = TRUE
  FCamera.btnWBTrigger.Enabled = TRUE

  SELECT CASE sMode
    CASE "Auto"
      b[4] = &H0
      FCamera.btnWBAuto.Enabled = FALSE
    CASE "Indoor"
      b[4] = &H1
      FCamera.btnWBIndoor.Enabled = FALSE
    CASE "Outdoor"
      b[4] = &H2
      FCamera.btnWBOutdoor.Enabled = FALSE
    CASE "OnePush"
      b[4] = &H3
      FCamera.btnWBOnePush.Enabled = FALSE
    CASE "Trigger"
      b[4] = &H4
      FCamera.btnWBTrigger.Enabled = FALSE
  END SELECT

  b[5] = &HFF
  SendCommand(b)

END

' CAM_AE
' Full Auto 8x 01 04 39 00 FF Auto Exposure Mode
' Manual 8x 01 04 39 03 FF Iris, Shutter and Gain can be set individually.
' Shutter priority 8x 01 04 39 0A FF Shutter fixed Auto Exposure Mode. Shutter speed can be selected.
' Iris priority 8x 01 04 39 0B FF Iris fixed Auto Exposure Mode. Iris can be selected.
' Bright mode 8x 01 04 39 0D FF

PUBLIC SUB AutoExposure(sMode AS String)

  DIM b AS Byte[6]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H39

  FCamera.btnAEAuto.Enabled = TRUE
  FCamera.btnAEManual.Enabled = TRUE
  FCamera.btnAEIris.Enabled = TRUE
  FCamera.btnAEShutter.Enabled = TRUE

  SELECT CASE sMode
    CASE "Auto"
      b[4] = &H0
      FCamera.btnAEAuto.Enabled = FALSE
    CASE "Manual"
      b[4] = &H3
      FCamera.btnAEManual.Enabled = FALSE
    CASE "Shutter"
      b[4] = &HA
      FCamera.btnAEShutter.Enabled = FALSE
    CASE "Iris"
      b[4] = &HB
      FCamera.btnAEIris.Enabled = FALSE
    CASE "Bright"
      b[4] = &HD
      FCamera.btnAEBright.Enabled = FALSE
  END SELECT

  b[5] = &HFF
  SendCommand(b)

END

' CAM_Bright 
' Reset 8x 01 04 0 D 00 FF Gain AND Shutter at the Time THEN increase OR decrease 3 dB /
' Up 8x 01 04 0 D 02 FF STEP using UP / DOWN command.
' Down 8x 01 04 0 D 03 FF

' CAM_Shutter
' Reset 8x 01 04 0 A 00 FF Electronic Shutter Setting.
' Up 8x 01 04 0 A 02 FF Enable on AE_Manual, Shutter_Priority
' Down 8x 01 04 0 A 03 FF
' Direct 8x 01 04 4 A 0 Z 0 Z 0 Z 0 Z FF ZZZZ = 0000: 1 / 60, 001 B: 1 / 10000 Second

' CAM_Iris
' Reset 8x 01 04 0 B 00 FF Iris Setting.Enable on AE_Manual OR Iris_Priority
' Up 8x 01 04 0 B 02 FF
' Down 8x 01 04 0 B 03 FF
' Direct 8x 01 04 4 B 0 Z 0 Z 0 Z 0 Z FF ZZZZ = 0000: CLOSE TO 0011: F1.8

' CAM_Gain
' Reset 8x 01 04 0 C 00 FF Gain Setting.Enable on AE_Manual only
' Up 8x 01 04 0 C 02 FF
' Down 8x 01 04 0 C 03 FF
' Direct 8x 01 04 4 C 0 Z 0 Z 0 Z 0 Z FF ZZZZ = 0001: 0 dB TO 0007: +18 dB

PUBLIC SUB ManualExposure(sMode AS String, sDo AS String)

  DIM b AS Byte[7]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H0

  SELECT CASE sMode
    CASE "Bright"
      b[4] = &HD
    CASE "Shutter"
      b[4] = &HA
    CASE "Iris"
      b[4] = &HB
    CASE "Gain"
      b[4] = &HC
  END SELECT

  IF sDo = "-" THEN
    b[5] = &H2
  ELSE IF sDo = "+" THEN
    b[5] = &H3
  ELSE
    b[5] = &H0 ' reset
  END IF

  b[6] = &HFF
  SendCommand(b)

END

' CAM_Backlight
' On 8x 01 04 33 02 FF Back light compensation
' Off 8x 01 04 33 03 FF Gain - up to 6 dB max.

PUBLIC SUB BackLight(sMode AS String)

  DIM b AS Byte[6]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H33

  SELECT CASE sMode
    CASE "On"
      b[4] = &H2
    CASE "Off"
      b[4] = &H3
  END SELECT

  b[5] = &HFF
  SendCommand(b)

END

' Pan - tiltDrive
' Up 8x 01 06 01 VV WW 03 01 FF VV: pan speed 01 TO 18,
' Down 8x 01 06 01 VV WW 03 02 FF WW: tilt speed 01 TO 14
' Left 8x 01 06 01 VV WW 01 03 FF YYYY: pan position: approx.FC90 to 0370
' Right 8x 01 06 01 VV WW 02 03 FF(center 0000)
' UpLeft 8x 01 06 01 VV WW 01 01 FF ZZZZ: tilt position: approx.FED4 to 012 C
' UpRight 8x 01 06 01 VV WW 02 01 FF(center 0000)
' DownLeft 8x 01 06 01 VV WW 01 02 FF
' DownRight 8x 01 06 01 VV WW 02 02 FF
' STOP 8x 01 06 01 VV WW 03 03 FF
' Absolute position 8x 01 06 02 VV WW Absolute Position Drive
' 0 Y 0 Y 0 Y 0 Y 0 Z 0 Z 0 Z 0 Z FF
' Relative position 8x 01 06 03 VV WW Relative Position Drive.Set the relative coordinates between
' 0 Y 0 Y 0 Y 0 Y 0 Z 0 Z 0 Z 0 Z FF current position TO the the target position.
' Reset 8x 01 06 05 FF Pan / Tilt Initialize command

PUBLIC SUB Direction(sMode AS String)

  DIM b AS Byte[9]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H6
  b[3] = &H1
  b[4] = Format(Val("&H" & Hex(FCamera.slPan.Value)))
  b[5] = Format(Val("&H" & Hex(FCamera.slTilt.Value)))

  SELECT CASE sMode
    CASE "Up"
      b[6] = &H3
      b[7] = &H1
    CASE "Down"
      b[6] = &H3
      b[7] = &H2
    CASE "Left"
      b[6] = &H1
      b[7] = &H3
    CASE "Right"
      b[6] = &H2
      b[7] = &H3
    CASE "UpLeft"
      b[6] = &H1
      b[7] = &H1
    CASE "DownLeft"
      b[6] = &H1
      b[7] = &H2
    CASE "UpRight"
      b[6] = &H2
      b[7] = &H1
    CASE "DownRight"
      b[6] = &H2
      b[7] = &H2
    CASE "Stop"
      b[6] = &H3
      b[7] = &H3
  END SELECT

  b[8] = &HFF
  SendCommand(b)

END

PUBLIC SUB StopCommand()

  DIM b AS Byte[9]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H6
  b[3] = &H1
  b[4] = &H10
  b[5] = &H10
  b[6] = &H3
  b[7] = &H3
  b[8] = &HFF

  SendCommand(b)

END

' Home 8x 01 06 04 FF

PUBLIC SUB Home()

  DIM b AS Byte[5]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H6
  b[3] = &H4
  b[4] = &HFF

  SendCommand(b)

END

' CAM_Memory
' Reset 8x 01 04 3 F 00 0 Z FF Preset memory for memorize camera condition.
' Set 8x 01 04 3 F 01 0 Z FF Z = 0 TO 5, 6 positions
' Recall 8x 01 04 3 F 02 0 Z FF

PUBLIC SUB Memory(sPreset AS String)

  DIM b AS Byte[7]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H3F

  IF FCamera.rbPresetRecall.Value = TRUE THEN
    b[4] = &H2 ' Recall
  ELSE IF FCamera.rbPresetSet.Value = TRUE THEN
    b[4] = &H1 ' Set
  ELSE 
    b[4] = &H0 ' Reset
  END IF

  b[5] = sPreset
  b[6] = &HFF
  SendCommand(b)

END

' CAM_PowerInq 
' 8x 09 04 00 FF
' Y0 50 02 FF On
' Y0 50 03 FF Off

PUBLIC SUB PowerInq()

  DIM b AS Byte[5]

  b[0] = bCamNum
  b[1] = &H9
  b[2] = &H4
  b[3] = &H0
  b[4] = &HFF

  SendCommand(b)

END

' CAM_Focus
' Stop 8x 01 04 08 00 FF Focus control.
' Far 8x 01 04 08 02 FF When adjust the focus, change the mode to Manual the
' Near 8x 01 04 08 03 FF send Far / Near or Direct command.
' Auto focus on 8x 01 04 38 02 FF
' Manual focus on 8x 01 04 38 03 FF
' Auto / Manual 8x 01 04 38 10 FF

PUBLIC SUB Focus(sMode AS String)

  DIM b AS Byte[6]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4

  SELECT CASE sMode
    CASE "Stop"
      b[3] = &H8
      b[4] = &H0
    CASE "Far"
      b[3] = &H8
      b[4] = &H2
    CASE "Near"
      b[3] = &H8
      b[4] = &H3
    CASE "Auto"
      b[4] = &H38
      b[4] = &H2
    CASE "Manual"
      b[4] = &H38
      b[5] = &H3
  END SELECT

  b[5] = &HFF
  SendCommand(b)

END

' CAM_Zoom
' Stop 8x 01 04 07 00 FF
' Tele(Standard) 8x 01 04 07 02 FF
' Wide(Standard) 8x 01 04 07 03 FF
' Tele(Variable) 8x 01 04 07 2 Z FF Z: Speed Parameter, 2(Low) to 7(High)
' Wide(Variable) 8x 01 04 07 3 Z FF
' Direct 8x 01 04 47 0 Z 0 Z 0 Z 0 Z FF ZZZZ: Zoom Data, 0000(Wide) to 03 FF(Tele)

PUBLIC SUB Zoom(sMode AS String)

  DIM b AS Byte[6]

  b[0] = bCamNum
  b[1] = &H1
  b[2] = &H4

  SELECT CASE sMode
    CASE "Stop"
      b[3] = &H7
      b[4] = &H0
    CASE "Tele"
      b[3] = &H7
      IF FCamera.slZoom.Value > 1 THEN 
        b[4] = &H2 + Hex(FCamera.slZoom.Value)
      ELSE 
        b[4] = &H2
      END IF
    CASE "Wide"
      b[3] = &H7
      IF FCamera.slZoom.Value > 1 THEN 
        b[4] = &H3 + Hex(FCamera.slZoom.Value)
      ELSE 
        b[4] = &H3
      END IF
      b[4] = &H3
  END SELECT

  b[5] = &HFF
  SendCommand(b)

END

PUBLIC SUB ChangeAddress()

  bCamNum = &H80 + Hex(FCamera.spAddress.Value)

END

' PUBLIC SUB cDateOn()
'
'     DIM b[7] AS Byte
'
'         b[0] = bCamNum
'         b[1] = b1
'         b[2] = b7
'         b[3] = b2A
'         b[4] = b2
'         b[5] = bFF
'         b[6] = b0
'         FCameraControl.txtComm.Text = b
'
' END SUB
'
' PUBLIC SUB cDateOff()
'
'     DIM b[7] AS Byte
'
'         b[0] = bCamNum
'         b[1] = b1
'         b[2] = b7
'         b[3] = b2A
'         b[4] = b3
'         b[5] = bFF
'         b[6] = b0
'         FCameraControl.txtComm.Text = b
'
' END SUB
'
' PUBLIC SUB cTimeOff()
'
'     DIM b[7] AS Byte
'
'         b[0] = bCamNum
'         b[1] = b1
'         b[2] = b7
'         b[3] = b2B
'         b[4] = b3
'         b[5] = bFF
'         b[6] = b0
'         FCameraControl.txtComm.Text = b
'
' END SUB
'
' PUBLIC SUB cTimeOn()
'
'     DIM b[7] AS Byte
'
'         b[0] = bCamNum
'         b[1] = b1
'         b[2] = b7
'         b[3] = b2B
'         b[4] = b2
'         b[5] = bFF
'         b[6] = b0
'         FCameraControl.txtComm.Text = b
'
' END SUB
'
' PUBLIC SUB cAbsolute()
'
'     DIM b[16] AS Byte
'         b[0] = bCamNum
'         b[1] = b1
'         b[2] = b6
'         b[3] = b2
'         b[4] = gPanSpeedVal
'         b[5] = gTiltSpeedVal
'         b[6] = bF
'         b[7] = bF
'         b[8] = bF
'         b[9] = bF
'         b[10] = b0
'         b[11] = b0
'         b[12] = b0
'         b[13] = b0
'         b[14] = bFF
'         b[15] = b0
'
'         FCameraControl.txtComm.Text = b
'
' END SUB

' PUBLIC SUB cRelative()
'
'     DIM b[16] AS Byte
'         b[0] = bCamNum
'         b[1] = b1
'         b[2] = b6
'         b[3] = b3
'         b[4] = gPanSpeedVal
'         b[5] = gTiltSpeedVal
'         b[6] = bF
'         b[7] = bF
'         b[8] = bB
'         b[9] = bB
'         b[10] = bF
'         b[11] = bF
'         b[12] = bF
'         b[13] = b3
'         b[14] = bFF
'         b[15] = b0
'         FCameraControl.txtComm.Text = b
'
' END SUB

' implement the properties
PRIVATE FUNCTION Port_Read() AS String

  RETURN sPort

END

PRIVATE SUB Port_Write(sValue AS String)

  sPort = sValue

END

PRIVATE FUNCTION VISCADebug_Read() AS Boolean

  RETURN bVISCADebug

END

PRIVATE SUB VISCADebug_Write(sValue AS Boolean)

  bVISCADebug = sValue

END
