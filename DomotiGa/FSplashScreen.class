' Gambas class file

' Description:
' FSplashScreen.class

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC tStartup AS Timer
PRIVATE bAuthOk AS Boolean
PRIVATE iCountLogin AS Integer

PUBLIC SUB _new()

  tStartup = NEW Timer AS "tStartup"
  tStartup.Delay = 100
  tStartup.Enabled = TRUE

END

PUBLIC SUB Form_Open()

  lblVersion.Text = "version " & Main.sProgramVersion
  ME.Height = 180
  Panel1.Height = 165
  prbStatus.Y = 120
  lblStatus.Y = 135
  txtCopyright.Text = "Copyright (C) 2008-" & Year(Now) & " Ron Klinkien"

END

PUBLIC SUB tStartup_Timer()

  tStartup.Enabled = FALSE
  IF Main.bLogout THEN
    Login()
  ELSE
    StartProgram()
  ENDIF

END

PRIVATE SUB StartProgram()

  SetProgressValue(0)

  lblStatus.Text = ("Checking directory structure ...")
  SetProgressValue(20)
  WAIT 0.1
  Main.Setup_BroadcastAddrs()
  Main.Setup_Logfiles()
  Main.DisplayProgramInfo()
  Main.CreateDirectoryTree()

  lblStatus.Text = ("Loading configuration ...")
  SetProgressValue(40)
  lblStatus.Text = ("Connecting to database ...")
  WAIT 0.1
  IF NOT Main.ConnectDatabase() THEN FInstallDBWizard.ShowModal

  ' update database
  SetProgressValue(50)
  lblStatus.Text = ("Updating database ...")
  WAIT 0.1
  Main.UpdateDatabase()

  SetProgressValue(60)
  lblStatus.Text = ("Loading modules ...")
  WAIT 0.1
  Main.Setup()

  SetProgressValue(80, ("Starting main program ..."))

  ' update house status
  IF Main.bServer THEN
    IF NOT Main.GlobalVar["House_Mode"] THEN Main.SetGlobalVar("House_Mode", "normal")
    IF Len(Main.GlobalVar["Mute"]) < 1 THEN Main.SetGlobalVar("Mute", FALSE)
    Main.ChangeHouseMode(Main.GlobalVar["House_Mode"])
    Main.ChangeMuteMode(Main.GlobalVar["Mute"])
  ENDIF

  IF Main.GlobalVar["EmailCount"] THEN Main.iNewMails = Main.GlobalVar["EmailCount"]
  IF Main.GlobalVar["CallCount"] THEN Main.iNewCalls = Main.GlobalVar["CallCount"]
  IF Main.GlobalVar["VoiceMailCount"] THEN Main.iNewVoicemails = Main.GlobalVar["VoiceMailCount"]

  Main.WriteLog(("Entering main program loop."))
  Main.bProgramStartup = TRUE
  SetProgressValue(100, ("Entering main program loop ..."))
  WAIT 0.1
  Main.Check_for_Action()
  Main.SetupTimers() ' start timers

  IF Main.bAuthEnabled THEN
    Login()
  ELSE
    bAuthOk = TRUE
    ME.Close
  ENDIF

END

PUBLIC SUB Login()

  ME.Height = 260
  Panel1.Height = 246
  lblStatus.Y = 215
  Label1.Visible = TRUE
  Label2.Visible = TRUE
  txtUser.Visible = TRUE
  txtPassword.Visible = TRUE
  btnLogin.Visible = TRUE
  prbStatus.Visible = FALSE
  btnLogin.Enabled = TRUE
  iCountLogin = 0
  lblStatus.Text = ("Please authenticate yourself.")

  IF Main.GlobalVar["Last_User"] THEN
    txtUser.Text = Main.GlobalVar["Last_User"]
    txtPassword.SetFocus()
  ENDIF

END

PUBLIC SUB SetProgressValue(iValue AS Integer, OPTIONAL sStatus AS String)

  IF iValue > 100 THEN iValue = 100
  IF iValue < 0 THEN iValue = 0

  prbStatus.Value = iValue / 100
  IF sStatus THEN lblStatus.Text = sStatus

END

PUBLIC SUB btnLogin_Click()

  Enter()

END

PRIVATE SUB Enter()

  IF NOT txtUser.Text THEN
    lblStatus.Text = ("Please specify a Username.")
  ELSE
    IF CheckAuth() THEN
      bAuthOk = TRUE
      ME.Close
    ELSE
      lblStatus.Text = ("Sorry wrong Username and/or Password!")
      ' and only allow three failures to login
    ENDIF
  ENDIF

END

PRIVATE SUB CheckAuth() AS Boolean

  DIM rResult AS Result
  DIM sSalt, sHash, sType AS String

  ' add column cookie if DB table has not got it
  TRY rResult = Main.hDB.Exec("SELECT cookie FROM users")
  IF NOT rResult THEN TRY Main.hDB.Exec("ALTER TABLE users ADD COLUMN cookie VARCHAR(64) DEFAULT ''")

  TRY rResult = Main.hDB.Exec("SELECT username, password, id, admin, cookie FROM users WHERE username = &1", txtUser.Text)
  IF rResult.Count THEN
    IF (Len(rResult!password) = 33) AND (Left$(rResult!password, 3) = "MD5") THEN
      sSalt = Left$(rResult!password, 11)
      sType = "MD5" ' Left$(sSalt, 3)
      sSalt = Right$(sSalt, 8)
      sHash = Right$(Crypt.MD5(txtPassword.Text, sSalt), 22)
    ELSE
      sHash = rResult!password
    ENDIF
    IF rResult!password = (sType & sSalt & sHash) THEN
      Main.GlobalVar["Last_User"] = txtUser.Text
      Main.sActiveUser = txtUser.Text
      Main.sActiveUserID = rResult!id
      IF Len(rResult!cookie) < 1 THEN ' we have to init the cookie; the decrypted cookie will never change
      ' in DB the cookie is encrypted with MD5 (MD5 hash seed) hash of current password
      ' we avoid sending user password over to DB, but the crypt key is however communicated in clear!
      ' the cookie will protect private user info within the DB
      TRY Main.hDB.Exec("UPDATE users SET cookie = AES_ENCRYPT(&1,&2) WHERE username = &3", Crypt.MD5(txtPassword.Text), Crypt.MD5(txtPassword.Text, Right(sHash, 8)), txtUser.Text)
      ENDIF
      TRY rResult = Main.hDB.Exec("SELECT AES_DECRYPT(cookie,&1) AS cookie, admin FROM users WHERE username = &2", Crypt.MD5(txtPassword.Text, Right(sHash, 8)), txtUser.Text)
      Main.sActiveUserCookie = rResult!cookie ' the crypt key for private user info in the DB

      IF rResult!admin THEN
        Main.WriteLog(("Logged in as '") & txtUser.Text & ("' (Administrator)."))
        Main.bUserisAdmin = TRUE  ' hide non admin menu's
      ELSE
        Main.WriteLog(("Logged in as '") & txtUser.Text & ("' (User)."))
        Main.bUserisAdmin = FALSE
        FMain.MenuEdit.Visible = FALSE
        FMain.MenuDevices.Visible = FALSE
        FMain.MenuSetup.Visible = FALSE
        FMain.MenuTools.Visible = FALSE
        FMain.MenuThermostats.Visible = FALSE
        FMain.MenuEvents.Visible = FALSE
      END IF
      FMain.pbUser.Visible = TRUE
      FMain.txtUser.Text = LCase$(txtUser.Text)
      rResult = Main.hDB.Exec("UPDATE users SET lastlogin = &1 WHERE username = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), txtUser.Text)
      FMain.MenuLogout.Visible = TRUE
      FMain.MenuEditUser.Visible = TRUE
      RETURN TRUE
    ENDIF
  ENDIF
  INC iCountLogin
  IF iCountLogin > 3 THEN
     Main.WriteLog("User &1 entered invalid password.", txtUser.Text)
     Message(("Invalid password, too many tries, exit program!"))
     Main.CloseAll()
     FMain.Close
  ENDIF
  RETURN FALSE

END

PUBLIC SUB Form_Close()

  IF bAuthOk = FALSE THEN STOP EVENT

END
