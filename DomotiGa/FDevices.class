' Gambas class file

' Description:
' FDevices.class
' Display all devices.

' Development Status:
' Finished, needs some tweaking here and there.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC iCurRow AS Integer
PRIVATE tRefresh AS NEW Timer
PRIVATE bAutoRefresh AS Boolean
PRIVATE bExpand AS Boolean
PRIVATE bFontBig AS Boolean

PUBLIC SUB Form_Open()

  GetDeviceList()

  ' create refresh timer
  tRefresh = NEW Timer AS "tRefresh"
  tRefresh.Delay = 3000 ' 3 seconds

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRefresh_Timer()

  GetDeviceList()

END

PUBLIC SUB Form_Close()

  tRefresh.Stop

END

PUBLIC SUB Form_LostFocus()

  tRefresh.Stop

END

PUBLIC SUB Form_GotFocus()

  IF bAutoRefresh THEN tRefresh.Enabled = TRUE

END

PUBLIC SUB GetDeviceList()

  DIM iRows, iCount AS Integer
  DIM rResult, rResult2 AS Result
  DIM rResult3, rResult4 AS Result
  DIM rResult5 AS Result
  DIM sValue, sValue2, sValue3 AS String

  INC Application.Busy

  rResult = Main.hDB.Exec("SELECT * FROM devices")

  IF NOT rResult THEN 
    Message.Info("Error: table 'devices' not found!")
    RETURN
  END IF
  iRows = rResult.Count

    WITH tbvDevices
      IF bFontBig THEN 
        .Font.Size = "10"
      ELSE 
        .Font.Size = "8"
      END IF
      .Columns.Count = IIf(bExpand, 27, 11)
      .Rows.Count = iRows
      .Columns[0].Title = "Id"
      .Columns[0].Width = 20
      .Columns[1].Width = 20
      .Columns[2].Title = ("Name")
      .Columns[2].Width = 130
      .Columns[3].Title = ("Address")
      .Columns[3].Width = 98
      .Columns[4].Title = ("Device")
      .Columns[4].Width = 126
      .Columns[5].Title = ("Type")
      .Columns[5].Width = 138
      .Columns[6].Title = ("Location")
      .Columns[7].Width = 94
      .Columns[7].Title = ("Value1")
      .Columns[7].Width = 68
      .Columns[8].Title = ("Value2")
      .Columns[8].Width = 65
      .Columns[9].Title = ("Value3")
      .Columns[9].Width = 65
      .Columns[10].Title = ("Last Seen")
      .Columns[10].Width = 125

      IF bExpand THEN
        .Columns[11].Title = ("Last Changed")
        .Columns[11].Width = 125
        .Columns[12].Title = ("User")
        .Columns[12].Width = 80
        .Columns[13].Title = ("Protocol")
        .Columns[13].Width = 80
        .Columns[14].Title = ("Groups")
        .Columns[14].Width = 204
        .Columns[15].Title = ("Interface")
        .Columns[15].Width = 120
        .Columns[16].Title = ("First Seen")
        .Columns[16].Width = 140
        .Columns[17].Title = ("Enabled")
        .Columns[17].Width = 58
        .Columns[18].Title = ("Hide")
        .Columns[18].Width = 55
        .Columns[19].Title = ("Log")
        .Columns[19].Width = 40
        .Columns[20].Title = ("On Icon")
        .Columns[20].Width = 75
        .Columns[21].Title = ("Off Icon")
        .Columns[21].Width = 75
        .Columns[22].Title = ("Battery")
        .Columns[22].Width = 55
        .Columns[23].Title = ("Graph")
        .Columns[23].Width = 50
        .Columns[24].Title = ("X")
        .Columns[24].Width = 25
        .Columns[25].Title = ("Y")
        .Columns[25].Width = 25
        .Columns[26].Title = ("Floorplan")
        .Columns[26].Width = 94
      END IF
  END WITH

  FOR iCount = 0 TO iRows - 1
    tbvDevices[iCount, 0].Text = rResult!id
    IF rResult!onicon OR rResult!officon THEN
      IF UCase$(rResult!value) = "ON" OR UCase$(rResult!value) = "OPEN" OR UCase$(rResult!value) = "MOTION" THEN
        TRY tbvDevices[iCount, 1].Picture = Picture[Main.sBaseDir &/ "icons" &/ rResult!onicon]
      ELSE
        TRY tbvDevices[iCount, 1].Picture = Picture[Main.sBaseDir &/ "icons" &/ rResult!officon]
      END IF
    END IF
    tbvDevices[iCount, 2].Text = rResult!name
    tbvDevices[iCount, 3].Text = rResult!address

    ' fetch devicetype values
    TRY rResult2 = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rResult!module)
    TRY tbvDevices[iCount, 4].Text = rResult2!name
    TRY tbvDevices[iCount, 5].Text = rResult2!description

    ' fetch location name
    TRY rResult3 = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResult!location)
    TRY tbvDevices[iCount, 6].Text = rResult3!name

    sValue = rResult!value
    sValue2 = rResult!value2
    sValue3 = rResult!value3

    ' RFXPwr Module
    IF rResult2!name = "RFXPwr Module" THEN
      sValue = sValue / 100
      sValue2 = sValue2
    END IF

    IF sValue THEN tbvDevices[iCount, 7].Text = sValue & " " & rResult!label
    IF sValue2 THEN tbvDevices[iCount, 8].Text = sValue2 & " " & rResult!label2
    IF sValue3 THEN tbvDevices[iCount, 9].Text = sValue3 & " " & rResult!label3

    IF rResult!lastseen THEN tbvDevices[iCount, 10].Text = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")

    IF bExpand THEN
      IF rResult!lastchanged THEN tbvDevices[iCount, 11].Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      TRY rResult4 = Main.hDB.Exec("SELECT * FROM users WHERE id = &1", rResult!user)
      TRY tbvDevices[iCount, 12].Text = rResult4!fullname
      TRY tbvDevices[iCount, 13].Text = rResult2!type
      tbvDevices[iCount, 14].Text = LTrim$(Replace$(rResult!groups, "|", " "))
      ' fetch interface name
      TRY rResult4 = Main.hDB.Exec("SELECT * FROM interfaces WHERE id = &1", rResult!interface) 
      TRY tbvDevices[iCount, 15].Text = rResult4!name
      IF rResult!firstseen THEN tbvDevices[iCount, 16].Text = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      tbvDevices[iCount, 17].Text = FetchBool(rResult!enabled)
      tbvDevices[iCount, 18].Text = FetchBool(rResult!hide)
      tbvDevices[iCount, 19].Text = FetchBool(rResult!log)
      tbvDevices[iCount, 20].Text = rResult!onicon
      tbvDevices[iCount, 21].Text = rResult!officon
      tbvDevices[iCount, 22].Text = rResult!batterystatus
      tbvDevices[iCount, 23].Text = FetchBool(rResult!graph)
      tbvDevices[iCount, 24].Text = rResult!x
      tbvDevices[iCount, 25].Text = rResult!y

      ' fetch floorplan name
      TRY rResult5 = Main.hDB.Exec("SELECT * FROM floors WHERE floor = &1", rResult!floorplan) 
      TRY tbvDevices[iCount, 26].Text = rResult5!name
    END IF
    rResult.MoveNext
  NEXT

FINALLY
  DEC Application.Busy

END

PUBLIC SUB tbvDevices_ColumnClick(Column AS Integer)

  Main.SortTableView(FDevices.tbvDevices, Column, TRUE)

END

PUBLIC SUB Form_Resize()

  tbvDevices.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 31)

END

PRIVATE SUB FetchBool(bSwitch AS Boolean) AS String

  SELECT bSwitch
    CASE TRUE
        RETURN "True"
    CASE ELSE
        RETURN "False"
  END SELECT

END

PUBLIC SUB tbvDevices_DblClick()

  ' open device editor window
  iCurRow = tbvDevices.Row
  IF Main.bUserisAdmin OR NOT Main.bAuthEnabled THEN
    FDeviceEditor.Show()
  ELSE
    Message("Sorry, editing devices is not enabled for users.\nLogin as an admin.")
  END IF

END

PUBLIC SUB tbtnRefresh_Click()

  IF tbtnRefresh.Value = TRUE THEN
    tRefresh.Start
    bAutoRefresh = TRUE
    btnRefresh.Enabled = FALSE
  ELSE
    tRefresh.Stop
    bAutoRefresh = FALSE
    btnRefresh.Enabled = TRUE
  END IF

END

PUBLIC SUB btnRefresh_Click()

  GetDeviceList()

END

PUBLIC SUB tbtnExpand_Click()

  IF tbtnExpand.Value = TRUE THEN
    bExpand = TRUE
    tbtnExpand.Text = ("Shrink")
  ELSE
    bExpand = FALSE
    tbtnExpand.Text = ("Expand")
  END IF

  GetDeviceList()

END

PUBLIC SUB tbtnFont_Click()

  IF tbtnFont.Value = TRUE THEN
    bFontBig = TRUE
    tbtnFont.Text = "Font -"
  ELSE
    bFontBig = FALSE
    tbtnFont.Text = "Font +"
  END IF

  GetDeviceList()

END
