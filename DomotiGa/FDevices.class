' Gambas class file

' Description:
' FDevices.class
' Display all devices.

' Development Status:
' Finished, needs some tweaking here and there.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC iCurRow AS Integer
PUBLIC bAutoRefresh AS Boolean
PRIVATE bExpand AS Boolean

PUBLIC SUB Form_Open()

  GetDeviceList()

END

PUBLIC SUB GetDeviceList()

  DIM iCount AS Integer
  DIM rResult AS Result
  DIM sValue, sValue2, sValue3, sValue4, sSql AS String
  DIM hMoviebox AS MovieBox
  DIM aValue AS String[]

  INC Application.Busy

  IF bExpand THEN
    sSql = "SELECT devices.*,locations.name AS 'locationname',interfaces.name AS 'interfacename',devicetypes.name AS 'devicetypename',floors.name AS 'floorplanname',users.fullname AS 'username' FROM devices LEFT JOIN locations ON locations.id = devices.location LEFT JOIN interfaces ON interfaces.id = devices.interface LEFT JOIN devicetypes ON devicetypes.id = devices.module LEFT JOIN floors ON floors.floor = devices.floorplan LEFT JOIN users ON users.id = devices.user"
  ELSE
    sSql = "SELECT devices.*,locations.name AS 'locationname' FROM devices LEFT JOIN locations ON locations.id = devices.location"
  END IF
  IF chkDisabled.Value = TRUE THEN
    sSql &= " WHERE enabled IS FALSE ORDER BY name"
  ELSE
    sSql &= " WHERE enabled IS TRUE ORDER BY name"
  END IF

  rResult = Main.hDB.Exec(sSql)
  IF NOT rResult THEN
    Message.Info(("Error: table 'devices' not found!"))
    RETURN
  END IF

  WITH tbvDevices
    .Font.Size = "9"
    .Columns.Count = IIf(bExpand, 26, 9)
    .Rows.Count = rResult.Count
    .Columns[0].Width = 20
    .Columns[0].Title = ("Id")
    .Columns[1].Width = 20
    .Columns[2].Title = ("Device")
    .Columns[2].Width = 165
    .Columns[3].Title = ("Location")
    .Columns[3].Width = 100
    .Columns[4].Title = ("Value1")
    .Columns[4].Width = 90
    .Columns[5].Title = ("Value2")
    .Columns[5].Width = 90
    .Columns[6].Title = ("Value3")
    .Columns[6].Width = 90
    .Columns[7].Title = ("Value4")
    .Columns[7].Width = 90
    .Columns[8].Title = ("Last Seen")
    IF bExpand THEN
      .Columns[9].Title = ("DeviceType")
      .Columns[9].Width = 138
      .Columns[10].Title = ("Address")
      .Columns[10].Width = 98
      .Columns[11].Title = ("Interface")
      .Columns[11].Width = 125
      .Columns[12].Title = ("First Seen")
      .Columns[12].Width = 140
      .Columns[13].Title = ("Last Changed")
      .Columns[13].Width = 140
      .Columns[14].Title = ("Enabled")
      .Columns[14].Width = 58
      .Columns[15].Title = ("Hide")
      .Columns[15].Width = 55
      .Columns[16].Title = ("Log")
      .Columns[16].Width = 40
      .Columns[17].Title = ("Graph")
      .Columns[17].Width = 50
      .Columns[18].Title = ("On Icon")
      .Columns[18].Width = 75
      .Columns[19].Title = ("Off Icon")
      .Columns[19].Width = 75
      .Columns[20].Title = ("Battery")
      .Columns[20].Width = 55
      .Columns[21].Title = ("Groups")
      .Columns[21].Width = 204
      .Columns[22].Title = ("X")
      .Columns[22].Width = 25
      .Columns[23].Title = ("Y")
      .Columns[23].Width = 25
      .Columns[24].Title = ("Floorplan")
      .Columns[24].Width = 94
      .Columns[25].Title = ("User")
      .Columns[25].Width = 120
    END IF
  END WITH

  FOR iCount = 0 TO rResult.Max
    tbvDevices[iCount, 0].Text = rResult!id
    IF rResult!onicon OR rResult!officon THEN tbvDevices[iCount, 1].Picture = Picture[FMain.GetStatusIcon(rResult!value, rResult!onicon, rResult!officon, rResult!dimicon)]

    tbvDevices[iCount, 2].Text = rResult!name
    TRY tbvDevices[iCount, 3].Text = rResult!locationname

    sValue = rResult!value
    TRY sValue = (sValue / rResult!divider) + rResult!calibration
    sValue2 = rResult!value2
    TRY sValue2 = (sValue2 / rResult!divider2) + rResult!calibration2
    sValue3 = rResult!value3
    TRY sValue3 = (sValue3 / rResult!divider3) + rResult!calibration3
    sValue4 = rResult!value4
    TRY sValue4 = (sValue4 / rResult!divider4) + rResult!calibration4

    ' fetch devicetype values
    IF sValue THEN
      tbvDevices[iCount, 4].Text = sValue & " " & rResult!label
    ELSE
      tbvDevices[iCount, 4].Text = ""
    END IF
    IF sValue2 THEN
      tbvDevices[iCount, 5].Text = sValue2 & " " & rResult!label2
    ELSE
      tbvDevices[iCount, 5].Text = ""
    END IF
    IF sValue3 THEN
      tbvDevices[iCount, 6].Text = sValue3 & " " & rResult!label3
    ELSE
      tbvDevices[iCount, 6].Text = ""
    END IF
    IF sValue4 THEN
      tbvDevices[iCount, 7].Text = sValue4 & " " & rResult!label4
    ELSE
      tbvDevices[iCount, 7].Text = ""
    END IF
    IF rResult!lastseen THEN
      tbvDevices[iCount, 8].Text = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    ELSE
      tbvDevices[iCount, 8].Text = ("Never")
    END IF

    IF bExpand THEN
      TRY tbvDevices[iCount, 9].Text = rResult!devicetypename
      tbvDevices[iCount, 10].Text = rResult!address
      TRY tbvDevices[iCount, 11].Text = rResult!interfacename
      IF rResult!firstseen THEN tbvDevices[iCount, 12].Text = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      IF rResult!lastchanged THEN tbvDevices[iCount, 13].Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      tbvDevices[iCount, 14].Text = Main.DisplayBool(rResult!enabled)
      tbvDevices[iCount, 15].Text = Main.DisplayBool(rResult!hide)
      tbvDevices[iCount, 16].Text = Main.DisplayBool(rResult!log)
      tbvDevices[iCount, 17].Text = Main.DisplayBool(rResult!graph)
      tbvDevices[iCount, 18].Text = rResult!onicon
      tbvDevices[iCount, 19].Text = rResult!officon
      tbvDevices[iCount, 20].Text = rResult!batterystatus
      TRY tbvDevices[iCount, 21].Text = LTrim$(Replace$(rResult!groups, "|", " "))
      tbvDevices[iCount, 22].Text = rResult!x
      tbvDevices[iCount, 23].Text = rResult!y
      TRY tbvDevices[iCount, 24].Text = rResult!floorplanname
      TRY tbvDevices[iCount, 25].Text = rResult!username
    END IF
    rResult.MoveNext
  NEXT

FINALLY
  DEC Application.Busy

END

PUBLIC SUB tbvDevices_ColumnClick(Column AS Integer)

  Main.SortTableView(FDevices.tbvDevices, Column, TRUE)

END

PUBLIC SUB Form_Resize()

  tbvDevices.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 31)
  HBox1.Width = ME.ClientWidth - 15

END

PUBLIC SUB tbvDevices_DblClick()

  ' open device editor window
  iCurRow = tbvDevices.Row
  IF Main.bUserisAdmin OR NOT Main.bAuthEnabled THEN
    FDeviceEditor.Show()
  ELSE
    Message(("Sorry, editing devices is not enabled for users.\nLogin as an admin."))
  END IF

END

PUBLIC SUB tbtnRefresh_Click()

  IF tbtnRefresh.Value = TRUE THEN
    bAutoRefresh = TRUE
    btnRefresh.Enabled = FALSE
  ELSE
    bAutoRefresh = FALSE
    btnRefresh.Enabled = TRUE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnRefresh_Click()

  GetDeviceList()

END

PUBLIC SUB tbtnExpand_Click()

  IF tbtnExpand.Value = TRUE THEN
    bExpand = TRUE
    tbtnExpand.Text = ("Shrink")
  ELSE
    bExpand = FALSE
    tbtnExpand.Text = ("Expand")
  END IF

  GetDeviceList()

END

PUBLIC SUB chkDisabled_Click()

  GetDeviceList()

END
