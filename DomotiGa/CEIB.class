' Gambas class file

' Description:
' EIB.class
' Provide support for KNX / EIB using eibd.

' Development Status:
' Just started developing this one.

' Links:
' http://www.auto.tuwien.ac.at/~mkoegler/index.php/eibd

' DomotiGa - an open source home automation program.
' Copyright(C) 2009 Ron Klinkien
' This module is written by and Copyright(C) 2009 Timo Sariwating

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS String
PROPERTY EIBDebug AS Boolean

PRIVATE sTCPHost AS String
PRIVATE sTCPPort AS String
PRIVATE bEIBDebug AS Boolean

PUBLIC hEIB AS NEW Socket
PUBLIC tEIB AS Timer
PUBLIC sBuffer AS String

PRIVATE CONST ON AS Byte = &H81
PRIVATE CONST OFF AS Byte = &H80

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the connection
  TRY hEIB.Close

  ' get a new one
  hEIB = NEW Socket AS "eib"
  hEIB.Connect(sTCPHost, sTCPPort)

  ' start poll timer for KNX/EIB status LED
  tEIB = NEW Timer AS "tEIBLED"
  tEIB.Delay = 250
  tEIB.Stop

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("KNX/EIB Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB EIB_Ready()

  DIM sCommand AS String[5]
  sCommand[0] = &H00
  sCommand[1] = &H26 'opengroupsocket
  sCommand[2] = &H00
  sCommand[3] = &H00
  sCommand[4] = &H00
  Main.WriteLog(("KNX/EIB TCP socket connected."))
  TX(sCommand)

END

PUBLIC SUB EIB_Closed()

  Main.WriteLog(("KNX/EIB Error: TCP socket closed. (is eibd still running?)"))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read EIB/KNX socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB EIB_Read()

  DIM bMyBuf AS Byte[512]
  DIM iCnt, iCount AS Integer
  DIM sDevice, sAddress AS String
  DIM sReceived AS String[0]

  IF hEIB.Status <> Net.Connected THEN RETURN
    bMyBuf[0] = 0
    READ #hEIB, bMyBuf[0] ' read the first byte
    FMain.pbEIB.Picture = Main.pLedOn
    tEIB.Start

    SELECT bMyBuf[0]
    CASE 0
      TRY READ #hEIB, bMyBuf[0 + 1], 1 ' read the length byte
        FOR iCnt = 0 TO bMyBuf[1] - 1 ' read the rest of the frame
          TRY READ #hEIB, bMyBuf[0 + 2 + iCnt], 1
          IF NOT ERROR THEN
          ENDIF
        NEXT
    END SELECT

    SELECT Hex$(bMyBuf[3])
      CASE 26
      Main.WriteLog(("KNX/EIB GroupSocket OK"))
      CASE 27
      sDevice = Left$(Hex$(bMyBuf[4], 2), 1) & "." & Right$(Hex$(bMyBuf[4], 2), 1) & "." & bMyBuf[5]
      sAddress = Left$(Hex$(bMyBuf[6], 2), 1) & "/" & Mid$(Hex$(bMyBuf[6], 2), 2, 1) & "/" & bMyBuf[7]
      FOR iCount = 9 TO bMyBuf.Length
      TRY sReceived.Add(Hex$(bMyBuf[iCount], 2))
      NEXT
      Lookup_EIS(sDevice, sAddress, sReceived)
    END SELECT

END


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' lookup the EIS type for received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Lookup_EIS(sDevice AS String, sAddress AS String, sReceived AS String[])

  DIM iDeviceId AS Integer = Devices.Find("%" & sAddress & "%", Devices.FindInterface("KNX/EIB Interface"))
  SELECT CASE Devices.FindDescriptionForID(Devices.FindModuleForDevice(iDeviceId))
    CASE "EIS 1" ' On/Off
      EIS1(iDeviceId, sReceived)
    CASE "EIS 2" ' Dim
      EIS2(iDeviceId, sReceived)
    CASE "EIS 3" ' Time
      EIS3(iDeviceId, sReceived)
    CASE "EIS 4" ' Date
      EIS4(iDeviceId, sReceived)
    CASE "EIS 5" ' Values
      EIS5(iDeviceId, sReceived)
    CASE ELSE
      Main.WriteDebugLog(("[KNX/EIB] EIS Unknown: ") & sAddress & " " & sReceived)
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB1 devices (switch on/off)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS1(iDeviceId AS Integer, sReceived AS String[])

  SELECT CASE sReceived[0]
    CASE 80
      Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      FControl.RefreshPage()
      FDevices.GetDeviceList()
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS1: ") & Devices.FindNameForDevice(iDeviceId) & " Off")
    CASE 81
      Devices.ValueUpdate(iDeviceId, "On", "", "", "")
      FControl.RefreshPage()
      FDevices.GetDeviceList()
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS1: ") & Devices.FindNameForDevice(iDeviceId) & " On")
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB2 devices (dim)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS2(iDeviceId AS Integer, sReceived AS String[])

  DIM sAddress, sDeviceName AS String
  DIM sAddressSplit AS String[]
  DIM sCommand AS String[6]
  DIM iPercentage AS Integer

  sDeviceName = Devices.FindNameForDevice(iDeviceId)
  sAddress = Devices.FindAddressForDevice(sDeviceName)

  sAddressSplit = Split(sAddress, "|" "/")

  sCommand[0] = &H00
  sCommand[1] = &H27
  sCommand[2] = Hex$(Val(sAddressSplit[6]) & Val(sAddressSplit[7]))
  sCommand[3] = Val(sAddressSplit[8])
  sCommand[4] = &H00
  sCommand[5] = &H00

  SELECT CASE sReceived[0]
  CASE 80
    IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS2: ") & sDeviceName & " Off")
      TX(sCommand)
  CASE 81
    IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS2: ") & sDeviceName & " On")
      TX(sCommand)
  CASE 89
    IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS2: ") & sDeviceName & " Dim")
      TX(sCommand)
  CASE 40
      iPercentage = Val("&h" & sReceived[1]) / 255 * 100
      IF iPercentage = 0 THEN
        Devices.ValueUpdate(iDeviceId, "Off", CStr(iPercentage), "", "")
      ELSE
        Devices.ValueUpdate(iDeviceId, "On", CStr(iPercentage), "", "")
      END IF
      FControl.RefreshPage()
      FDevices.GetDeviceList()
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB3 devices (time)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS3(iDeviceId AS Integer, sReceived AS String[])

  DIM sAddressSplit AS String[]
  DIM sCommand AS String[9]
  DIM iMinute, iHour, iSecond AS Integer

  SELECT CASE sReceived[1]
    CASE 80
      iHour = Val("&h" & (Mid$(sReceived, 5, 2)))
      iMinute = Val("&h" & (Mid$(sReceived, 7, 2)))
      iSecond = Val("&h" & (Mid$(sReceived, 9, 2)))
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS3: ") & Devices.FindNameForDevice(iDeviceId) & " " & Time(iHour, iMinute, iSecond))
    CASE 00
      sAddressSplit = Split(Devices.FindAddressForDevice(Devices.FindNameForDevice(iDeviceId)), "/")
      sCommand[0] = &H00
      sCommand[1] = &H27
      sCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      sCommand[3] = Val(sAddressSplit[2])
      sCommand[4] = &H00
      sCommand[5] = &H80
      sCommand[6] = Hex$(Hour(Now))
      sCommand[7] = Hex$(Minute(Now))
      sCommand[8] = Hex$(Second(Now))
      TX(sCommand)
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS3: Time ") & Time(Now) & (" send to bus"))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB4 devices (date)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS4(iDeviceId AS Integer, sReceived AS String[])

  DIM sAddressSplit AS String[]
  DIM sCommand AS String[9]
  DIM iDay, iMonth, iYear AS Integer

  SELECT CASE sReceived[1]
    CASE 80
      iday = Val("&h" & (Mid$(sReceived, 5, 2)))
      iMonth = Val("&h" & (Mid$(sReceived, 7, 2)))
      iYear = Val("&h" & (Mid$(sReceived, 9, 2))) + 2000
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS4: ") & Devices.FindNameForDevice(iDeviceId) & " " & Date(iYear, iMonth, iDay))
    CASE 00
      sAddressSplit = Split(Devices.FindAddressForDevice(Devices.FindNameForDevice(iDeviceId)), "/")
      sCommand[0] = &H00
      sCommand[1] = &H27
      sCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      sCommand[3] = Val(sAddressSplit[2])
      sCommand[4] = &H00
      sCommand[5] = &H80
      sCommand[6] = Hex$(Day(Now))
      sCommand[7] = Hex$(Month(Now))
      sCommand[8] = Hex$(Right$(CStr(Year(Now)), 2))
      TX(sCommand)
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS4: Date ") & Day(Now) & "/" & Month(Now) & "/" & Year(Now) & (" send to bus"))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received for EIB5 devices (values)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS5(iDeviceId AS Integer, sReceived AS String[])

  DIM iValue AS Integer

  iValue = Val(Hex$(sReceived[1]))
  Main.WriteDebugLog(("[KNX/EIB] EIS5: ") & Devices.FindNameForDevice(iDeviceId) & " " & iValue)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare a command for sending to the KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION SendCommand(sAddress AS String, sValue AS String)

  DIM sModule AS String
  DIM sAddressSplit AS String[]
  DIM sCommand AS String[5]
  DIM iBrightness AS Integer

  sModule = Devices.FindIDForDeviceType(Devices.FindModuleForDevice(Devices.Find(sAddress, Devices.FindInterface("KNX/EIB Interface"))))
  SELECT CASE sModule
    CASE "EIS 1" ' (On/Off)
      sAddressSplit = Split(sAddress, "/")
      sCommand[0] = &H00
      sCommand[1] = &H27
      sCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      sCommand[3] = Val(sAddressSplit[2])
      sCommand[4] = &H00
      SELECT CASE sValue
        CASE "On"
        sCommand.Add(ON)
        TX(sCommand)
        CASE "Off"
        sCommand.Add(OFF)
        TX(sCommand)
      END SELECT
    CASE "EIS 2" ' (Dim)
      sAddressSplit = Split(sAddress, "|" "/")
      sCommand[0] = &H00
      sCommand[1] = &H27
      sCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      sCommand[3] = Val(sAddressSplit[2])
      sCommand[4] = &H00
      SELECT CASE sValue
        CASE "On"
          sCommand.Add(ON)
          TX(sCommand)
        CASE "Off"
          sCommand.Add(OFF)
          TX(sCommand)
        CASE "Stop"
          sCommand[2] = Hex$(Val(sAddressSplit[3]) & Val(sAddressSplit[4]))
          sCommand[3] = Val(sAddressSplit[5])
          sCommand.Add(&H80)
          TX(sCommand)
        CASE ELSE
        IF InStr(sValue, "Dim ") THEN ' DIM 0-100
          iBrightness = Val(Replace(sValue, "Dim ", ""))
          sCommand[2] = Hex$(Val(sAddressSplit[6]) & Val(sAddressSplit[7]))
          sCommand[3] = Val(sAddressSplit[8])
          sCommand.Add(&H80)
          sCommand.Add(CInt(iBrightness * 2.55))
          TX(sCommand)
        END IF
      END SELECT
  END SELECT

END

PUBLIC SUB tEIBLED_Timer()

  FMain.pbEIB.Picture = Main.pLedOff
  tEIB.Stop

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB TX(sCommand AS String[])

  DIM sHeader AS String[2]
  DIM sTX AS String
  DIM iCount AS Integer
  
  sHeader[0] = &H00
  sHeader[1] = Hex$(sCommand.Length)

  IF hEIB.Status = Net.Connected THEN
    WRITE #hEIB, Chr$(sHeader[0]) & Chr$(sHeader[1]), 2
    FOR iCount = 0 TO sCommand.Length
    TRY sTX &= Chr$(sCommand[iCount])
    NEXT
    WRITE #hEIB, sTX, sCommand.Length
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hEIB.Close
  Main.WriteLog(("KNX/EIB TCP socket port close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("KNX/EIB Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB EIB_Error()

  ' handle error
  SELECT CASE hEIB.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("KNX/EIB: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("KNX/EIB: Host ") & sTCPHost & (" not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(("KNX/EIB: Unable to connect to eibd. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(("KNX/EIB: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("KNX/EIB: Error writing data."))
  END SELECT

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS String

  RETURN sTCPPort

END

PRIVATE FUNCTION TCPPort_Write(Value AS String)

  sTCPPort = Value

END

PRIVATE FUNCTION EIBDebug_Read() AS Boolean

  RETURN bEIBDebug

END

PRIVATE SUB EIBDebug_Write(Value AS Boolean)

  bEIBDebug = Value

END
