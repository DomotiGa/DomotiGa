' Gambas class file

' Description:
' FDatabaseAdmin.class
' Support to backup database or delete tables, use with care!

' Development Status:
' Finished, make backup async/background job.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC sOutput AS String

PUBLIC SUB Form_Open()

  ME.Move(FMain.X + 50, FMain.Y + 70)

END

PUBLIC SUB btnClose_Click()

  ME.Close

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ask user for confirmation twice
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB YesNo(sText AS String) AS Boolean

  SELECT Message.Question(sText, ("Yes"), ("No"))
    CASE 1
    SELECT Message.Question(("Last Time: ") & sText, ("Yes"), ("No"))
      CASE 1
      RETURN TRUE
    END SELECT
    RETURN FALSE
  END SELECT
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete selected database records
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnDelete_Click()

  IF YesNo(("Are you very sure that you want to Erase all selected Data?")) THEN
    IF chkDevices.Value THEN Main.hDB.Exec("TRUNCATE TABLE devices")
    IF chkDevicesLog.Value THEN Main.hDB.Exec("TRUNCATE TABLE devices_log")
    IF chkDevicesBwired.Value THEN Main.hDB.Exec("TRUNCATE TABLE devices_bwired")
    IF chkDevicesPachube.Value THEN Main.hDB.Exec("TRUNCATE TABLE devices_pachube")
    IF chkPowerUsage.Value THEN Main.hDB.Exec("TRUNCATE TABLE power_usage")
    IF chkWaterUsage.Value THEN Main.hDB.Exec("TRUNCATE TABLE water_usage")
    IF chkGasUsage.Value THEN Main.hDB.Exec("TRUNCATE TABLE gas_usage")
    IF chkPhoneCalls.Value THEN Main.hDB.Exec("TRUNCATE TABLE cdr")
    IF chkEvents.Value THEN Main.hDB.Exec("TRUNCATE TABLE events")
    IF chkConditions.Value THEN Main.hDB.Exec("TRUNCATE TABLE conditions")
    IF chkTriggers.Value THEN Main.hDB.Exec("TRUNCATE TABLE triggers")
    IF chkActions.Value THEN Main.hDB.Exec("TRUNCATE TABLE actions")
    IF chkStock.Value THEN Main.hDB.Exec("TRUNCATE TABLE stock")
    IF chkContacts.Value THEN Main.hDB.Exec("TRUNCATE TABLE contacts")
    IF chkCaptures.Value THEN
      Main.hDB.Exec("TRUNCATE TABLE capture_camera0")
      Main.hDB.Exec("TRUNCATE TABLE capture_camera1")
      Main.hDB.Exec("TRUNCATE TABLE capture_camera2")
      Main.hDB.Exec("TRUNCATE TABLE capture_camera3")
    END IF
    IF chkTVChannels.Value THEN Main.hDB.Exec("TRUNCATE TABLE tv_channels")
    IF chkTVPrograms.Value THEN Main.hDB.Exec("TRUNCATE TABLE tv_programs")
    IF chkTVCategories.Value THEN Main.hDB.Exec("TRUNCATE TABLE tv_categories")
    IF chkTVSubCategories.Value THEN Main.hDB.Exec("TRUNCATE TABLE tv_subcategories")
  END IF
  Message.Info("Selected data is deleted!")
  chkDevices.Value = FALSE
  chkDevicesLog.Value = FALSE
  chkDevicesBwired.Value = FALSE
  chkDevicesPachube.Value = FALSE
  chkPowerUsage.Value = FALSE
  chkWaterUsage.Value = FALSE
  chkGasUsage.Value = FALSE
  chkPhoneCalls.Value = FALSE
  chkEvents.Value = FALSE
  chkConditions.Value = FALSE
  chkTriggers.Value = FALSE
  chkActions.Value = FALSE
  chkStock.Value = FALSE
  chkContacts.Value = FALSE
  chkCaptures.Value = FALSE
  chkTVChannels.Value = FALSE
  chkTVPrograms.Value = FALSE
  chkTVCategories.Value = FALSE
  chkTVSubCategories.Value = FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' backup database to sql file and gzip it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnBackupDB_Click()

  DIM sExt AS String[]

  ' only show sql or compressed files
  Dialog.Filter = ["*.tar.gz", ("MySQL Backup Files Compressed"), "*.sql", ("MySQL Backup Files")]
  Dialog.Title = ("Backup Database")
  Dialog.Path = User.Home &/ Lower(Application.Name) & "-" & Format$(Now(), "yyyy-mm-dd") & ".sql.tar.gz"

  IF NOT (Dialog.SaveFile() = TRUE) THEN
    ' set program status to busy
    INC Application.Busy
    ' save backup to temp file first
    SHELL "mysqldump -u " & Main.sSQLUser & " --routines --password=" & Main.sSQLPass & " --databases " & Main.sSQLDatabase & " > " & "/tmp" &/ Lower(Application.Name) & ".sql" WAIT

    ' check selected extension
    sExt = Split(Dialog.Path, ".")
    IF (Lower$(sExt[sExt.count - 1]) = "gz") THEN
      ' compress file
      SHELL "tar -cvzf " & Dialog.Path & " -C /tmp " & Lower(Application.Name) & ".sql >/dev/null" WAIT
    ELSE
      ' copy file
      SHELL "cp " & "/tmp" &/ Lower(Application.Name) & ".sql " & Dialog.Path 
    END IF
    SHELL "rm " & "/tmp" &/ Lower(Application.Name) & ".sql"
    ' set program status to free
    DEC Application.Busy
    Message.Info(("Database Backup Finished!"))
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete all RRD database files after confirmation
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnDelRRDs_Click()

  IF YesNo(("Are you very sure that you want to Erase all RRD Data?")) THEN
    RRDTool.DeleteAllRRDs()
    RRDTool.CreateRRDs()
    ServerStats.CreateRRDs()
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete all RRD graph images files after confirmation
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnDelGraphs_Click()

  IF YesNo(("Are you very sure that you want to Erase all RRD graph Images?")) THEN
    RRDTool.DeleteAllGraphs()
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' repair mysql database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnRepairDB_Click()

  IF YesNo(("Are you very sure that you want to repair your db?\nOnly use it when there are problems, because device id's may change and relations lost!")) THEN
    SHELL "mysqlcheck --repair --host " & Main.sSQLHost & " --databases " & Main.sSQLDatabase & " -u " & Main.sSQLUser & " -p" & Main.sSQLPass & " 2>&1" FOR READ AS "DatabaseRepair"
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DatabaseRepair_Read()

  DIM sBuffer AS String

  READ #LAST, sBuffer, -256
  sOutput &= sBuffer

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' database repair finished, display result
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DatabaseRepair_Kill()

  FTextViewer.sTitle = ("Database Repair Finished!")
  FTextViewer.sText = sOutput
  FTextViewer.Show
  sOutput = ""

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' optimize mysql database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB btnOptimizeDB_Click()

  IF YesNo(("Are you very sure that you want to optimize your db?\nOnly use it when there are problems, because device id's may change and relations lost!")) THEN
    SHELL "mysqlcheck --optimize --host " & Main.sSQLHost & " --databases " & Main.sSQLDatabase & " -u " & Main.sSQLUser & " -p" & Main.sSQLPass & " 2>&1" FOR READ AS "DatabaseOptimize"
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DatabaseOptimize_Read()

  DIM sBuffer AS String

  READ #LAST, sBuffer, -256
  sOutput &= sBuffer

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' database optimize finished, display result
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DatabaseOptimize_Kill()

  FTextViewer.sTitle = ("Database Optimize Finished!")
  FTextViewer.sText = sOutput
  FTextViewer.Show
  sOutput = ""

END
