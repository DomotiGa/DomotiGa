' Gambas class file

' Description:
' FEvents.class
' Future event management functions.

' Development Status:
' Not started yet, things to build are:
' Store events, triggers and actions inside the database.
' Display overview of these items on this page.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC txtCurEvent AS String
PRIVATE tRefresh AS NEW Timer
PRIVATE bAutoRefresh AS Boolean
PRIVATE bExpand AS Boolean
PRIVATE iTable AS Integer = 1

PUBLIC SUB Form_Open()

  btnEvents.Enabled = FALSE
  GetEventList()

  ' create refresh timer
  tRefresh = NEW Timer AS "tRefresh"
  tRefresh.Delay = 3000 ' 3 seconds

END

PUBLIC SUB tbvEvents_ColumnClick(Column AS Integer)

  Main.SortTableView(FEvents.tbvEvents, Column, TRUE)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRefresh_Timer()

  btnRefresh_Click()

END

PUBLIC SUB Form_Close()

  tRefresh.Stop

END

PUBLIC SUB Form_LostFocus()

  tRefresh.Stop

END

PUBLIC SUB Form_GotFocus()

  IF bAutoRefresh THEN tRefresh.Enabled = TRUE

END

PUBLIC SUB GetEventTree()

  DIM iCount, iAction AS Integer
  DIM label AS String
  DIM rResult, rTrigger, rCond, rAction AS Result
  DIM node AS Object

  INC Application.Busy

  tvEvents.Clear
  tvEvents.Visible = TRUE
  tbvEvents.Visible = FALSE

  rResult = Main.hDB.Exec("SELECT * FROM events ORDER BY name")
  IF NOT rResult THEN
    Message.Info(("Error: table 'events' not found!"))
    RETURN
  ENDIF

  tvEvents.Font.Size = "9"
  tvEvents.Add("home", "Event Tree")

  FOR iCount = 0 TO rResult.Count - 1
    ' event node
    label = rResult!name
    IF rResult!enabled = FALSE THEN label = "(" & label & ")"
    IF rResult!comments <> "" THEN label = label & " [" & rResult!comments & "]"
    tvEvents.Add("event-" & rResult!id, label, Picture[Main.sBaseDir &/ "icons/events.png"], "home")
    ' trigger node
    rTrigger = Main.hDB.Exec("SELECT * FROM triggers where id=&1", rResult!trigger1)
    IF rTrigger.Count THEN
      label = rTrigger!name
      IF rTrigger!description <> "" THEN label = label & " [" & rTrigger!description & "]"
      tvEvents.Add("trigger-" & rTrigger!id & "-" & rResult!id, label, Picture[Main.sBaseDir &/ "icons/triggers.png"], "event-" & rResult!id)
    ENDIF
    ' condition node
    rCond = Main.hDB.Exec("SELECT * FROM conditions where id=&1", rResult!condition1)
    IF rCond.Count THEN
      label = rCond!name
      IF rCond!description <> "" THEN label = label & " [" & rCond!description & "]"
      tvEvents.Add("cond-" & rCond!id & "-" & rResult!id, label, Picture[Main.sBaseDir &/ "icons/conditions.png"], "event-" & rResult!id)
    ENDIF
    rCond = Main.hDB.Exec("SELECT * FROM conditions where id=&1", rResult!condition2)
    IF rCond.Count THEN
      label = rCond!name
      IF rCond!description <> "" THEN label = label & " [" & rCond!description & "]"
      tvEvents.Add("cond-" & rCond!id & "-" & rResult!id, label, Picture[Main.sBaseDir &/ "icons/conditions.png"], "event-" & rResult!id)
    ENDIF

    ' action node
    rAction = Main.hDB.Exec("SELECT * FROM events_actions, actions where id=action and event=&1 order by `order`", rResult!id)
    FOR iAction = 0 TO rAction.count - 1
      label = rAction!name
      IF rAction!description <> "" THEN label = label & " [" & rAction!description & "]"
      tvEvents.Add("action-" & rAction!id & "-" & rResult!id, label, Picture[Main.sBaseDir &/ "icons/actions.png"], "event-" & rResult!id)
      rAction.MoveNext
    NEXT
    rResult.MoveNext
  NEXT

  tvEvents["home"].Expanded = TRUE

FINALLY
  DEC Application.Busy

END


PUBLIC SUB GetEventList()

  DIM iRows, iCount AS Integer
  DIM rResult, rSubResult AS Result
  DIM aTriggerType AS String[] = ["Time Now", "Variable Change", "Device Change", "IR Remote", "iViewer Remote", "Multi-Trigger"]
  DIM aActionType AS String[] = ["Set Device Value", "Set GlobalVar Value", "Send e-mail", "Speak Text", "Execute Shell Command", "Send Tweet", "Send SMS Message", "Send IRTrans Code", "Play Sound", "Write Log Entry", "Display LED Message", "AV Control", "Delay Timer", "Notify-Send"]
  INC Application.Busy

  tvEvents.Visible = FALSE
  tbvEvents.Visible = TRUE
  tbvEvents.Clear
  tbvEvents.Rows.Count = 0
  SELECT CASE iTable
    CASE 1 ' display events
      rResult = Main.hDB.Exec("SELECT * FROM events ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'events' not found!"))
        RETURN
      END IF
      iRows = rResult.Count

      WITH tbvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 7, 5)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
        .Columns[3].Title = ("Last Run")
        .Columns[3].Width = 180
        .Columns[4].Title = ("Enabled")
        .Columns[4].Width = 55
        IF bExpand THEN
          .Columns[5].Title = ("Log")
          .Columns[5].Width = 40
          .Columns[6].Title = ("First Run")
          .Columns[6].Width = 125
        END IF
      END WITH

      FOR iCount = 0 TO iRows - 1
        tbvEvents[iCount, 0].Text = rResult!id
        tbvEvents[iCount, 1].Text = rResult!name
        tbvEvents[iCount, 2].Text = rResult!comments
        IF rResult!lastrun THEN tbvEvents[iCount, 3].Text = Replace$(Str$(Format(rResult!lastrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        tbvEvents[iCount, 4].Text = Main.DisplayBool(rResult!enabled)
        IF bExpand THEN
          tbvEvents[iCount, 5].Text = Main.DisplayBool(rResult!log)
          IF rResult!firstrun THEN tbvEvents[iCount, 6].Text = Replace$(Str$(Format(rResult!firstrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        END IF
        rResult.MoveNext
      NEXT
    CASE 2 ' display triggers
      rResult = Main.hDB.Exec("SELECT * FROM triggers ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'triggers' not found!"))
        RETURN
      END IF
      iRows = rResult.Count

      WITH tbvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 5, 4)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
        .Columns[3].Title = ("Type")
        .Columns[3].Width = 240
        IF bExpand THEN
          .Columns[4].Title = ("Used")
          .Columns[4].Width = 55
        END IF
      END WITH
      FOR iCount = 0 TO iRows - 1
        tbvEvents[iCount, 0].Text = rResult!id
        tbvEvents[iCount, 1].Text = rResult!name
        tbvEvents[iCount, 2].Text = rResult!description
        TRY tbvEvents[iCount, 3].Text = aTriggerType[rResult!type - 1]
        IF bExpand THEN
          rSubResult = Main.hDB.Exec("SELECT * FROM events where trigger1=&1", rResult!id)
          tbvEvents[iCount, 4].Text = "False"
          IF rSubResult THEN 
            IF rSubResult.Count >= 1 THEN
              tbvEvents[iCount, 4].Text = "True"
            ENDIF
          ENDIF
        ENDIF
        rResult.MoveNext
      NEXT
    CASE 3 ' display conditions
      rResult = Main.hDB.Exec("SELECT * FROM conditions ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'conditions' not found!"))
        RETURN
      END IF
      iRows = rResult.Count
      WITH tbvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 5, 4)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
        .Columns[3].Title = ("Formula")
        .Columns[3].Width = 340
        IF bExpand THEN
          .Columns[4].Title = ("Used")
          .Columns[4].Width = 55
        END IF
      END WITH
      FOR iCount = 0 TO iRows - 1
        tbvEvents[iCount, 0].Text = rResult!id
        tbvEvents[iCount, 1].Text = rResult!name
        tbvEvents[iCount, 2].Text = rResult!description
        TRY tbvEvents[iCount, 3].Text = rResult!formula
        IF bExpand THEN
          rSubResult = Main.hDB.Exec("SELECT * FROM events where condition1=&1 or condition2=&1 ", rResult!id)
          tbvEvents[iCount, 4].Text = "False"
          IF rSubResult THEN
            IF rSubResult.Count >= 1 THEN
              tbvEvents[iCount, 4].Text = "True"
            ENDIF
          ENDIF
        ENDIF
        rResult.MoveNext
      NEXT
    CASE 4 ' display actions
      rResult = Main.hDB.Exec("SELECT * FROM actions ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'actions' not found!"))
        RETURN
      END IF
      iRows = rResult.Count
      WITH tbvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 5, 4)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
        .Columns[3].Title = ("Type")
        .Columns[3].Width = 340
        IF bExpand THEN
          .Columns[4].Title = ("Used")
          .Columns[4].Width = 55
        END IF
      END WITH
      FOR iCount = 0 TO iRows - 1
        tbvEvents[iCount, 0].Text = rResult!id
        tbvEvents[iCount, 1].Text = rResult!name
        tbvEvents[iCount, 2].Text = rResult!description
        TRY tbvEvents[iCount, 3].Text = aActionType[rResult!type - 1]

        IF bExpand THEN
          rSubResult = Main.hDB.Exec("SELECT * FROM events_actions where action=&1", rResult!id)
          tbvEvents[iCount, 4].Text = "False"
          IF rSubResult THEN
            IF rSubResult.Count >= 1 THEN
              tbvEvents[iCount, 4].Text = "True"
            ENDIF
          ENDIF
        ENDIF
        rResult.MoveNext
      NEXT
  END SELECT

FINALLY
  DEC Application.Busy

END

PUBLIC SUB Form_Resize()

  tbvEvents.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 31)
  tvEvents.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 31)

END

PUBLIC SUB tvEvents_DblClick()

  DIM key AS String
  DIM aScan AS String[]

  ' open event editor window
  IF Main.bUserisAdmin OR NOT Main.bAuthEnabled THEN
    key = tvEvents.Current.Key
    aScan = Scan(key, "*-*-*")
    IF aScan.Count = 0 THEN
      aScan = Scan(key, "*-*")
      IF aScan.Count > 0 THEN
        IF aScan[0] = "event" THEN
          txtCurEvent = aScan[1]
          FEventEditor.Show()
        ENDIF
      ENDIF
      RETURN
    ENDIF
    IF aScan[0] = "trigger" THEN
      txtCurEvent = aScan[1]
      FTriggerEditor.bTriggerEdit = TRUE
      FTriggerEditor.Show()
    ENDIF
    IF aScan[0] = "cond" THEN
      txtCurEvent = aScan[1]
      FConditionEditor.bConditionEdit = TRUE
      FConditionEditor.Show()
    ENDIF
    IF aScan[0] = "action" THEN
      txtCurEvent = aScan[1]
      FActionEditor.bActionEdit = TRUE
      FActionEditor.Show()
    ENDIF
  ELSE
    Message(("Sorry, editing events is not enabled for users.\nLogin as an admin."))
  ENDIF

END

PUBLIC SUB tbvEvents_DblClick()

  ' open event editor window
  txtCurEvent = tbvEvents[tbvEvents.Row, 0].Text
  IF Main.bUserisAdmin OR NOT Main.bAuthEnabled THEN
    SELECT CASE iTable
      CASE 1
        FEventEditor.Show()
      CASE 2
        FTriggerEditor.bTriggerEdit = TRUE
        FTriggerEditor.Show()
      CASE 3
        FConditionEditor.bConditionEdit = TRUE
        FConditionEditor.Show()
      CASE 4
        FActionEditor.bActionEdit = TRUE
        FActionEditor.Show()
    END SELECT
  ELSE
    Message(("Sorry, editing events is not enabled for users.\nLogin as an admin."))
  ENDIF

END

PUBLIC SUB tbtnRefresh_Click()

  IF tbtnRefresh.Value = TRUE THEN
    tRefresh.Start
    bAutoRefresh = TRUE
    btnRefresh.Enabled = FALSE
  ELSE
    tRefresh.Stop
    bAutoRefresh = FALSE
    btnRefresh.Enabled = TRUE
  ENDIF

END

PUBLIC SUB btnRefresh_Click()

  IF btnTreeView.Enabled THEN 
    GetEventList()
  ELSE
    GetEventTree()
  ENDIF

END

PUBLIC SUB tbtnExpand_Click()

  IF tbtnExpand.Value = TRUE THEN
    bExpand = TRUE
    tbtnExpand.Text = ("Shrink")
  ELSE
    bExpand = FALSE
    tbtnExpand.Text = ("Expand")
  ENDIF
  GetEventList()

END

PUBLIC SUB btnEvents_Click()

  iTable = 1
  btnEvents.Enabled = FALSE
  btnTriggers.Enabled = TRUE
  btnConditions.Enabled = TRUE
  btnActions.Enabled = TRUE
  btnTreeView.Enabled = TRUE
  GetEventList()

END

PUBLIC SUB btnTriggers_Click()

  iTable = 2
  btnEvents.Enabled = TRUE
  btnTriggers.Enabled = FALSE
  btnConditions.Enabled = TRUE
  btnActions.Enabled = TRUE
  btnTreeView.Enabled = TRUE
  GetEventList()

END

PUBLIC SUB btnConditions_Click()

  iTable = 3
  btnEvents.Enabled = TRUE
  btnTriggers.Enabled = TRUE
  btnConditions.Enabled = FALSE
  btnActions.Enabled = TRUE
  btnTreeView.Enabled = TRUE
  GetEventList()

END

PUBLIC SUB btnActions_Click()

  iTable = 4
  btnEvents.Enabled = TRUE
  btnTriggers.Enabled = TRUE
  btnConditions.Enabled = TRUE
  btnActions.Enabled = FALSE
  btnTreeView.Enabled = TRUE
  GetEventList()

END

PUBLIC SUB btnTreeView_Click()

  btnEvents.Enabled = TRUE
  btnTriggers.Enabled = TRUE
  btnConditions.Enabled = TRUE
  btnActions.Enabled = TRUE
  btnTreeView.Enabled = FALSE
  GetEventTree()
END
