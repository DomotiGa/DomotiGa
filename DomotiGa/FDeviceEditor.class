' Gambas class file

' Description:
' FDeviceEditor.class
' Support for creating and edit all device parameters.

' Development Status:
' Finished and working, maybe needs better error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC rResult AS Result
PUBLIC rResultType AS Result
PUBLIC rResultInterface AS Result
PUBLIC rResultInterfaces AS Result
PUBLIC rResultLocations AS Result
PUBLIC rResultLocation AS Result
PUBLIC rResultGroups AS Result
PUBLIC rResultDeviceTypes AS Result
PUBLIC rResultFloorplan AS Result
PUBLIC bAddDevice AS Boolean
PRIVATE sCurrentDeviceName AS String
PRIVATE sRRDValueType AS String
PRIVATE sRRDValue2Type AS String
PRIVATE sRRDValue3Type AS String
PRIVATE sRRDValue4Type AS String
PRIVATE sValueDS AS String
PRIVATE sValue2DS AS String
PRIVATE sValue3DS AS String
PRIVATE sValue4DS AS String
PRIVATE bDeletedRRD AS Boolean

PUBLIC SUB Form_Open()

  ME.Move(FMain.X + 50, FMain.Y + 70)
  cmbHouseCode.Hide
  spDeviceCode.Hide
  LoadDevice()
  FillLog()

  ' give focus to first field
  tbName.SetFocus

END

PRIVATE SUB FillLog()

  WITH DataBrowserLog.GridView
    .Columns[0].Text = ("Changed")
    .Columns[0].Width = 170
    .Columns[1].Text = ("Value1")
    .Columns[1].Width = 60
    .Columns[2].Text = ("Value2")
    .Columns[2].Width = 60
    .Columns[3].Text = ("Value3")
    .Columns[3].Width = 60
    .Columns[4].Text = ("Value4")
    .Columns[4].Width = 60
  END WITH
  IF NOT bAddDevice THEN
    DataSourceLog.Filter = "deviceid = " & FDevices.tbvDevices[FDevices.iCurRow, 0].Text
  ELSE
    DataSourceLog.Filter = "deviceid = -1"
  ENDIF

END

PUBLIC SUB LoadDevice()

  DIM cDeviceType AS NEW Collection
  DIM sDeviceType AS String

  ' fill combo with available modules/devicetypes
  cmbModule.Add(" ")
  cmbDeviceType.Add(" ")
  TRY rResultDeviceTypes = Main.hDB.Exec("SELECT * FROM devicetypes ORDER BY name")
  IF rResultDeviceTypes THEN
    IF rResultDeviceTypes.Count THEN
      FOR EACH rResultDeviceTypes
        cmbModule.Add(rResultDeviceTypes!name)
        ' weed out double device types
        IF Len(rResultDeviceTypes!type)
          IF cDeviceType.Exist(rResultDeviceTypes!type) THEN CONTINUE
          cDeviceType.Add(rResultDeviceTypes!type, rResultDeviceTypes!type)
        ENDIF
      NEXT
      FOR EACH sDeviceType IN cDeviceType
        cmbDeviceType.Add(sDeviceType)
      NEXT
    ELSE
      Message(("No devicetypes found!"))
    END IF
  ELSE
    Message(("No devicetypes database table found!"))
  END IF

  ' fill combo with available interfaces
  cmbInterface.Add(" ")
  TRY rResultInterfaces = Main.hDB.Exec("SELECT * FROM interfaces ORDER BY name")
  IF rResultInterfaces THEN
    IF rResultInterfaces.Count THEN
      FOR EACH rResultInterfaces
        cmbInterface.Add(rResultInterfaces!name)
      NEXT
    ELSE
      Message(("No interfaces found!"))
    END IF
  ELSE
    Message(("No interfaces database table found!"))
  END IF

  ' fill available groups list
  rResultGroups = Main.hDB.Exec("SELECT * FROM groups ORDER BY name")
  IF rResultGroups THEN
    IF rResultGroups.Count THEN
      FOR EACH rResultGroups
        TRY lvGroupAvail.Add(rResultGroups!name, rResultGroups!name)
      NEXT
    END IF
  ELSE
    Message(("No groups database table found!"))
  END IF

  ' fill combo with available locations
  cmbLocation.Add(" ")
  rResultLocations = Main.hDB.Exec("SELECT * FROM locations ORDER BY name")
  IF rResultLocations THEN
    IF rResultLocations.Count THEN
      FOR EACH rResultLocations
        cmbLocation.Add(rResultLocations!name)
      NEXT
    END IF
  ELSE
    Message(("No locations database table found!"))
  END IF

  ' fill combo with available floorplans
  cmbFloorplan.Add(" ")
  rResultFloorplan = Main.hDB.Exec("SELECT * FROM floors ORDER BY name")
  IF rResultFloorplan THEN
    IF rResultFloorplan.Count THEN
      FOR EACH rResultFloorplan
        cmbFloorplan.Add(rResultFloorplan!name)
      NEXT
    END IF
  ELSE
    Message(("No floorplans database table found!"))
  END IF

  IF NOT bAddDevice THEN
    ' get selected device values
    rResult = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", FDevices.tbvDevices[FDevices.iCurRow, 0].Text)
    IF rResult.Count >= 1 THEN
      tbName.Text = rResult!name
      FDeviceEditor.Title = "Edit Device: " & rResult!name
      sCurrentDeviceName = rResult!name
      TRY rResultType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rResult!module)
      IF rResultType.Count THEN
        cmbModule.Text = rResultType!name
        cmbDeviceType.Text = rResultType!type
        tbDeviceDescr.Text = rResultType!description
        FillAddressFields(rResultType!type)
        SelectAddressFields(rResultType!type, rResultType!addressformat)
      END IF
      ' load device picture if available
      LoadDeviceImage()
      ' select interface
      TRY rResultInterface = Main.hDB.Exec("SELECT * FROM interfaces WHERE id = &1", rResult!interface)
      IF rResultInterface.Count THEN cmbInterface.Text = rResultInterface!name

      ' select location
      rResultLocation = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResult!location)
      IF rResultLocation.Count THEN
        TRY cmbLocation.Text = rResultLocation!name
      ELSE
        cmbLocation.Text = ("Not Defined")
      END IF

      ' put groups in selected or available groups list
      rResultGroups = Main.hDB.Exec("SELECT * FROM groups")
      IF (rResultGroups.Count >= 1) THEN
        FOR EACH rResultGroups
          IF InStr("|" & rResult!groups & "|", "|" & rResultGroups!name & "|") THEN
            TRY lvGroupActive.Add(rResultGroups!name, rResultGroups!name)
            TRY lvGroupAvail.Remove(rResultGroups!name)
          END IF
        NEXT
      END IF

      ' rest of fields
      cmbLabel.Text = rResult!label
      cmbLabel2.Text = rResult!label2
      cmbLabel3.Text = rResult!label3
      cmbLabel4.Text = rResult!label4
      tbValue.Text = rResult!value
      tbValue2.Text = rResult!value2
      tbValue3.Text = rResult!value3
      tbValue4.Text = rResult!value4
      tbOnIcon.Text = rResult!onicon
      tbOffIcon.Text = rResult!officon
      tbDimIcon.Text = rResult!dimicon
      TRY tbLastSeen.Text = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      TRY tbFirstSeen.Text = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      TRY tbLastChanged.Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")

      tbCorrection1.Text = rResult!correction
      tbCorrection2.Text = rResult!correction2
      tbCorrection3.Text = rResult!correction3
      tbCorrection4.Text = rResult!correction4

      FillCorrectionFields()

      DisplayIcons()

      TRY chkEnabled.Value = rResult!enabled
      TRY chkHide.Value = rResult!hide
      TRY chkLog.Value = rResult!log
      TRY chkLogDisplay.Value = rResult!logdisplay
      TRY chkLogSpeak.Value = rResult!logspeak
      TRY chkSwitchable.Value = rResult!switchable
      TRY chkDimable.Value = rResult!dimable
      TRY chkExtended.Value = rResult!extcode
      TRY chkRepeat.Value = rResult!repeatstate
      TRY chkPoll.Value = rResult!poll
      vbRepeatPeriod.Value = rResult!repeatperiod
      vbRepeatPeriod.Enabled = chkRepeat.Value
      TRY chkReset.Value = rResult!reset
      vbResetPeriod.Value = rResult!resetperiod
      vbResetPeriod.Enabled = chkReset.Value
      tbResetValue.Text = rResult!resetvalue
      tbResetValue.Enabled = chkReset.Value

      tbComments.Text = rResult!comments
      tbBatt.Text = rResult!batterystatus
      ' floorplan values
      tbX.Text = rResult!x
      tbY.Text = rResult!y

      ' select floorplan
      rResultFloorplan = Main.hDB.Exec("SELECT * FROM floors WHERE floor = &1", rResult!floorplan)
      IF rResultFloorplan.Count THEN
        cmbFloorplan.Text = rResultFloorplan!name
      ELSE
        cmbFloorplan.Text = ("Not Defined")
      END IF

      ' rrdtool graph stuff
      TRY chkRRD.Value = rResult!rrd
      chkRRD_Click()
      TRY chkGraph.Value = rResult!graph
      tbValueDS.Text = rResult!valuerrddsname
      tbValue2DS.Text = rResult!value2rrddsname
      tbValue3DS.Text = rResult!value3rrddsname
      tbValue4DS.Text = rResult!value4rrddsname
      cmbValueType.Text = rResult!valuerrdtype
      cmbValue2Type.Text = rResult!value2rrdtype
      cmbValue3Type.Text = rResult!value3rrdtype
      cmbValue4Type.Text = rResult!value4rrdtype
      sRRDValueType = rResult!valuerrdtype
      sRRDValue2Type = rResult!value2rrdtype
      sRRDValue3Type = rResult!value3rrdtype
      sRRDValue4Type = rResult!value4rrdtype
      sValueDS = rResult!valuerrddsname
      sValue2DS = rResult!value2rrddsname
      sValue3DS = rResult!value3rrddsname
      sValue4DS = rResult!value4rrddsname
    ELSE
      Message(("Couldn't load device record!"))
      ME.Close
    END IF
  END IF

END

PUBLIC SUB FillCorrectionFields()

  tbResult1.Text = Devices.CorrectValue(rResult!value, tbCorrection1.Text, rResult)
  tbResult2.Text = Devices.CorrectValue(rResult!value2, tbCorrection2.Text, rResult)
  tbResult3.Text = Devices.CorrectValue(rResult!value3, tbCorrection3.Text, rResult)
  tbResult4.Text = Devices.CorrectValue(rResult!value4, tbCorrection4.Text, rResult)

END

PUBLIC SUB RefreshDeviceType()

  rResultType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE name = &1", cmbModule.Text)
  IF rResultType.Count THEN
    ' enable correct address fields
    SelectAddressFields(rResultType!type, rResultType!addressformat)
    cmbDeviceType.Text = rResultType!type
    tbDeviceDescr.Text = rResultType!description
  ENDIF

END

PUBLIC SUB DoesInterfaceDoDeviceType() AS Boolean

  DIM rResultInt, rResultDevType AS Result
  DIM sDevProtocol, sIntProtocol AS String

  rResultDevType = Main.hDB.Exec("SELECT type FROM devicetypes WHERE name = &1", cmbModule.Text)
  sDevProtocol = rResultDevType!type

  rResultInt = Main.hDB.Exec("SELECT type FROM interfaces WHERE name = &1", cmbInterface.Text)
  sIntProtocol = rResultInt!type

  IF InStr(sIntProtocol, sDevProtocol) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

PUBLIC SUB GetDeviceType() AS Integer

  rResultType = Main.hDB.Exec("SELECT id FROM devicetypes WHERE name = &1", cmbModule.Text)
  RETURN rResultType!id

END

PUBLIC SUB GetInterface() AS Integer

  rResultInterface = Main.hDB.Exec("SELECT id FROM interfaces WHERE name = &1", cmbInterface.Text)
  RETURN rResultInterface!id

END

PUBLIC SUB GetLocation() AS Integer

  rResultLocation = Main.hDB.Exec("SELECT id FROM locations WHERE name = &1", cmbLocation.Text)
  TRY RETURN rResultLocation!id

END

PUBLIC SUB SelectAddressFields(sType AS String, sAddressFormat AS String)

  cmbHouseCode.Enabled = FALSE
  lblOther.Show
  cmbHouseCode.Hide
  spDeviceCode.Hide
  tbOtherAddress.Show
  lblX10.Hide
  chkPoll.Enabled = FALSE

  SELECT CASE sType
    CASE "Shell"
      lblOther.Text = ("Command")
    CASE "Ping"
      lblOther.Text = ("IP Addr.")
    CASE "1-Wire"
      lblOther.Text = ("1-Wire ID")
    CASE "Bluetooth"
      lblOther.Text = ("MAC Addr.")
    CASE "HDDTemp"
      lblOther.Text = ("Device")
    CASE "Plugwise"
      lblOther.Text = ("MAC Addr.")
    CASE "HEUK", "AC", "HEEU"
      lblOther.Text = ("Dev Unit")
    CASE "UPS"
      lblOther.Text = ("UPS Name")
    CASE "DSC"
      lblOther.Text = ("Zone Name")
    CASE "Weeder"
      lblOther.Text = ("Output")
    CASE "X10", "KAKU", "ARC", "PLCBUS", "Harrison", "Koppla", "Flamingo", "Waveman", "Impuls", "HE105", "RTS10", "RisingSun", "PhilipsSBC", "EMW200"
      cmbHouseCode.Show
      spDeviceCode.Show
      tbOtherAddress.Hide
      lblOther.Hide
      lblX10.Show
      cmbHouseCode.Enabled = TRUE
    CASE "KNX/EIB"
    CASE "Z-Wave"
      lblOther.Text = ("Node ID")
      chkPoll.Enabled = TRUE
    CASE "T10-Preset"
      lblOther.Text = ("SwitchNo.")
    CASE "FS10", "FS20", "RS200", "AB400", "AB601", "IT", "REV", "BS-QU", "MARMI", "OA-FM", "KO-FC", "RS862"
      lblOther.Text = ("Addr.Str.")
    CASE "GLatitude"
      lblOther.Text = ("Badge ID")
    CASE "K8055"
      lblOther.Text = ("Port")
    CASE ELSE
      lblOther.Text = ("Address")
  END SELECT
  lblInfo.Text = sAddressFormat

END

PUBLIC SUB FillAddressFields(sType AS String)

  SELECT CASE sType
    CASE "X10", "KAKU", "ARC", "PLCBUS", "Harrison", "Koppla", "Flamingo", "Waveman", "Impuls", "HE105", "RTS10", "RisingSun", "PhilipsSBC", "EMW200"
      ' fill address fields
      IF rResult!address THEN
        cmbHouseCode.Text = Left$(rResult!address, 1)
        TRY spDeviceCode.Value = Right$(rResult!address, 2)
        IF ERROR THEN
          TRY spDeviceCode.Value = Right$(rResult!address, 1)
        ENDIF
      END IF
    CASE ELSE
      IF rResult!address THEN
        tbOtherAddress.Text = rResult!address
      END IF
  END SELECT

END

PUBLIC SUB GetAddress() AS String

  IF cmbHouseCode.Enabled = TRUE THEN
    RETURN cmbHouseCode.Text & Format$(spDeviceCode.Value, "0#")
  ELSE
    RETURN tbOtherAddress.Text
  END IF

END

PUBLIC SUB tbName_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbInterface_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbHouseCode_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB spDeviceCode_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbOtherAddress_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbLocation_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbLabel_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbLabel2_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbLabel3_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbLabel4_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbValue_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnCancel_Click()

  bAddDevice = FALSE
  ME.Close

END

PUBLIC SUB cmbModule_Click()

  RefreshDeviceType()
  btnSave.Enabled = TRUE
  LoadDeviceImage()

END

PRIVATE SUB LoadDeviceImage()

  DIM sImage, sImage2, sName, sName2 AS String

  sName = LCase(Replace(cmbModule.Text, " ", "-"))
  sName = Replace(sName, "/", "-")

  sName2 = LCase(Replace(tbName.Text, " ", "-"))
  sName2 = Replace(sName2, "/", "-")

  sImage = Main.sBaseDir &/ "icons/devices" &/ sName & ".jpg"
  sImage2 = Main.sBaseDir &/ "icons/devices" &/ sName2 & ".jpg"
  txtDeviceImage.Hide
  TRY pbDevice.Picture = Picture.Load(sImage2)
  IF ERROR THEN
    TRY pbDevice.Picture = Picture.Load(sImage)
    IF ERROR THEN
      pbDevice.Hide
      txtDeviceImage.Text = sName2 & ".jpg\n" & sName & ".jpg"
      txtDeviceImage.Show
    ELSE
      pbDevice.Show
    END IF
  END IF

END

PUBLIC SUB GetGroups() AS String

  DIM iCount AS Integer
  DIM sGroups AS String = "|"

  lvGroupActive.MoveFirst

  FOR iCount = 1 TO lvGroupActive.Count
    sGroups &= lvGroupActive.Item.Text & "|"
    lvGroupActive.MoveNext
  NEXT

  RETURN sGroups

END

PUBLIC SUB lvGroupAvail_Click()

  btnSave.Enabled = TRUE
  lvGroupActive.Add(lvGroupAvail.Key, lvGroupAvail.Key) 
  lvGroupAvail.Remove(lvGroupAvail.Key)

END

PUBLIC SUB lvGroupActive_Click()

  btnSave.Enabled = TRUE
  lvGroupAvail.Add(lvGroupActive.Key, lvGroupActive.Key) 
  lvGroupActive.Remove(lvGroupActive.Key)

END

PUBLIC SUB btnDeleteDevice_Click()

  SELECT Message.Question(("Are you sure that you want to delete this device?"), ("Yes"), ("No"))
    CASE 1
      Main.hDB.Exec("DELETE FROM devices WHERE id = &1", rResult!id)
      Main.hDB.Exec("DELETE FROM devices_log WHERE deviceid = &1", rResult!id)
      ME.Close
      FDevices.GetDeviceList()
  END SELECT

END

PRIVATE SUB DeviceNameExist(sName AS String, OPTIONAL iDeviceId AS Integer) AS Boolean

  DIM rResultDevice AS Result

  rResultDevice = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sName)
  IF rResultDevice THEN
    IF rResultDevice.Count THEN
      FOR EACH rResultDevice
        IF iDeviceId THEN
          IF rResultDevice!id <> iDeviceId THEN RETURN TRUE
        ELSE
          RETURN TRUE
        END IF
      NEXT
    END IF
  END IF
  RETURN FALSE

END

PRIVATE SUB DeviceAddressExist(sAddress AS String, iInterface AS Integer, OPTIONAL iDeviceId AS Integer) AS Boolean

  DIM rResultDevice AS Result

  IF Len(sAddress) = 0 THEN RETURN TRUE

  rResultDevice = Main.hDB.Exec("SELECT id,address FROM devices WHERE interface = &1 AND enabled is TRUE", iInterface)
  IF rResultDevice THEN
    IF rResultDevice.Count THEN
      FOR EACH rResultDevice
        IF iDeviceId THEN
          IF sAddress = rResultDevice!address AND IF rResultDevice!id <> iDeviceId THEN RETURN TRUE
        ELSE
          IF sAddress = rResultDevice!address THEN RETURN TRUE
        END IF
      NEXT
    END IF
  END IF
  RETURN FALSE

END

PUBLIC SUB btnNewDevice_Click()

  DIM iId AS Integer

  IF NOT tbName.Text THEN
    Balloon(("Please enter a name for this device!"), tbName)
    RETURN
  END IF
  IF DeviceNameExist(tbName.Text) THEN
    Balloon(("Please enter a unique name for this device!"), tbName)
    RETURN
  END IF
  IF Len(cmbModule.Text) < 2 THEN
    Balloon(("Please select a device type for this device!"), cmbModule)
    RETURN
  END IF
  IF Len(cmbInterface.Text) < 2 THEN
    Balloon(("Please select an interface for this device!"), cmbInterface)
    RETURN
  END IF
  IF NOT DoesInterfaceDoDeviceType() THEN
    Balloon(("Selected interface does not support this devicetype!"), cmbDeviceType)
    RETURN
  END IF
  IF chkEnabled.Value = FALSE AND bAddDevice THEN
    SELECT Message.Question(("You haven't enabled this device, shall I enabled it?"), ("Yes"), ("No"))
      CASE 1
        chkEnabled.Value = TRUE
      CASE 0
        ' you want it
    END SELECT
  ENDIF
  IF chkEnabled.Value = TRUE THEN
    IF DeviceAddressExist(GetAddress(), GetInterface()) THEN
      Balloon(("Please enter a unique address for this device!"), Frame2)
      RETURN
    ENDIF
  ENDIF

  Main.hDB.Begin()
  rResult = Main.hDB.Create("devices")
  rResult!name = tbName.Text
  rResult!module = GetDeviceType()
  rResult!interface = GetInterface()
  rResult!address = GetAddress()
  rResult!location = GetLocation()
  rResult!groups = GetGroups()
  rResult!label = cmbLabel.Text
  rResult!label2 = cmbLabel2.Text
  rResult!label3 = cmbLabel3.Text
  rResult!label4 = cmbLabel4.Text
  rResult!onicon = tbOnIcon.Text
  rResult!correction = tbCorrection1.Text
  rResult!correction2 = tbCorrection2.Text
  rResult!correction3 = tbCorrection3.Text
  rResult!correction4 = tbCorrection4.Text
  rResult!officon = tbOffIcon.Text
  rResult!dimicon = tbDimIcon.Text
  rResult!comments = tbComments.Text
  rResult!enabled = chkEnabled.Value
  rResult!hide = chkHide.Value
  rResult!log = chkLog.Value
  rResult!logdisplay = chkLogDisplay.Value
  rResult!logspeak = chkLogSpeak.Value
  rResult!switchable = chkSwitchable.Value
  rResult!dimable = chkDimable.Value
  rResult!poll = chkPoll.Value
  rResult!rrd = chkRRD.Value
  rResult!graph = chkGraph.Value
  rResult!valuerrddsname = LCase(tbValueDS.Text)
  rResult!value2rrddsname = LCase(tbValue2DS.Text)
  rResult!value3rrddsname = LCase(tbValue3DS.Text)
  rResult!value4rrddsname = LCase(tbValue4DS.Text)
  rResult!valuerrdtype = cmbValueType.Text
  rResult!value2rrdtype = cmbValue2Type.Text
  rResult!value3rrdtype = cmbValue3Type.Text
  rResult!value4rrdtype = cmbValue4Type.Text
  IF tbX.Text THEN rResult!x = tbX.Text
  IF tbY.Text THEN rResult!y = tbY.Text
  rResult!floorplan = GetFloorplan()
  rResult!repeatstate = chkRepeat.Value
  rResult!repeatperiod = vbRepeatPeriod.Value
  rResult!reset = chkReset.Value
  rResult!resetperiod = vbRepeatPeriod.Value
  rResult!resetvalue = tbResetValue.Text
  rResult.Update()
  Main.hDB.Commit()
  FDevices.GetDeviceList()
  IF chkRRD.Value THEN
    rResult = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM devices")
    iId = rResult!lastid
    IF Main.bServer THEN
      RRDTool.CreateRRDs(iId)
    ELSE
      XMLClient.CreateRRDs(iId)
    ENDIF
  ENDIF
  IF FControl.Visible THEN FControl.ReloadPage()
  bAddDevice = FALSE

  ME.Close

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM sSql, sAddress, sGroups AS String
  DIM iLocation, iInterface, iDeviceType, iFloorplan AS Integer
  DIM sDivider1, sDivider2, sDivider3, sDivider4, sCorrection1, sCorrection2, sCorrection3, sCorrection4 AS String

  IF Main.bRRDToolEnabled = FALSE AND IF chkRRD.Value = TRUE THEN
    Message(("You also need to enable the RRDTool module!"))
  ENDIF

  IF bAddDevice THEN
    btnNewDevice_Click()
    RETURN
  END IF
  IF NOT tbName.Text THEN
    Balloon(("Please enter a name for this device!"), tbName)
    RETURN
  END IF
  IF DeviceNameExist(tbName.Text, rResult!id) THEN
    Balloon(("Please enter a unique name for this device!"), tbName)
    RETURN
  END IF
  IF Len(cmbModule.Text) < 2 THEN
    Balloon(("Please select an device type for this device!"), cmbModule)
    RETURN
  END IF
  IF Len(cmbInterface.Text) < 2 THEN
    Balloon(("Please select an interface for this device!"), cmbInterface)
    RETURN
  END IF
  IF NOT DoesInterfaceDoDeviceType() THEN
    Balloon(("Selected interface does not support this devicetype!"), cmbDeviceType)
    RETURN
  END IF
  IF sCurrentDeviceName <> tbName.Text AND IF chkGraph.Value THEN
    RenameRRD(sCurrentDeviceName, tbName.Text)
  END IF

  ' check if one or more datasource names are specified if RRD is enabled
  IF chkRRD.Value THEN
    IF NOT tbValueDS.Text AND IF NOT tbValue2DS.Text AND IF NOT tbValue3DS.Text AND IF NOT tbValue4DS.Text THEN
      tabDevice.Index = 2
      Balloon(("Please define at least one Data Source name!"), Frame8)
      RETURN
    ENDIF
  ENDIF

  IF NOT bDeletedRRD THEN
    ' check for changed RRD datasource types
    IF (Len(sRRDValueType) AND sRRDValueType <> cmbValueType.Text) OR (Len(tbValueDS.Text) AND sValueDS <> tbValueDS.Text) THEN
      tabDevice.Index = 2
      SELECT Message.Question(("Because you change the Value1 RRD DS type or name,\nthe RRD database has to be deleted."), ("Delete"), ("Cancel"), ("Ignore"))
        CASE 1
          btnDeleteRRD_Click()
        CASE 2
          RETURN
        CASE 3
      END SELECT
    ENDIF
    IF (Len(sRRDValue2Type) AND sRRDValue2Type <> cmbValue2Type.Text) OR (Len(tbValue2DS.Text) AND sValue2DS <> tbValue2DS.Text) THEN
      tabDevice.Index = 2
      SELECT Message.Question(("Because you change the Value2 RRD DS type or name,\nthe RRD database has to be deleted."), ("Delete"), ("Cancel"), ("Ignore"))
        CASE 1
          btnDeleteRRD_Click()
        CASE 2
          RETURN
        CASE 3
      END SELECT
    ENDIF
    IF (Len(sRRDValue3Type) AND sRRDValue3Type <> cmbValue3Type.Text) OR (Len(tbValue3DS.Text) AND sValue3DS <> tbValue3DS.Text) THEN
      tabDevice.Index = 2
      SELECT Message.Question(("Because you change the Value3 RRD DS type or name,\nthe RRD database has to be deleted."), ("Delete"), ("Cancel"), ("Ignore"))
        CASE 1
          btnDeleteRRD_Click()
        CASE 2
          RETURN
        CASE 3
      END SELECT
    ENDIF
    IF (Len(sRRDValue4Type) AND sRRDValue4Type <> cmbValue4Type.Text) OR (Len(tbValue4DS.Text) AND sValue4DS <> tbValue4DS.Text) THEN
      tabDevice.Index = 2
      SELECT Message.Question(("Because you change the Value4 RRD DS type or name,\nthe RRD database has to be deleted."), ("Delete"), ("Cancel"), ("Ignore"))
        CASE 1
          btnDeleteRRD_Click()
        CASE 2
          RETURN
        CASE 3
      END SELECT
    ENDIF
  ENDIF
  ' check for valid RRD datasource names
  IF InStr(tbValueDS.Text, " ") OR IF InStr(tbValueDS.Text, "/") THEN
    tabDevice.Index = 2
    Balloon.Warning("No spaces or / allowed in DS name!", tbValueDS)
    RETURN
  ENDIF
  IF InStr(tbValue2DS.Text, " ") OR IF InStr(tbValueDS.Text, "/") THEN
    tabDevice.Index = 2
    Balloon.Warning("No spaces or / allowed in DS name!", tbValue2DS)
    RETURN
  ENDIF
  IF InStr(tbValue3DS.Text, " ") OR IF InStr(tbValueDS.Text, "/") THEN
    tabDevice.Index = 2
    Balloon.Warning("No spaces or / allowed in DS name!", tbValue3DS)
    RETURN
  ENDIF
  IF InStr(tbValue4DS.Text, " ") OR IF InStr(tbValueDS.Text, "/") THEN
    tabDevice.Index = 2
    Balloon.Warning("No spaces or / allowed in DS name!", tbValue4DS)
    RETURN
  ENDIF
  IF chkEnabled.Value = FALSE AND chkHide.Value = FALSE AND bAddDevice = TRUE THEN
    SELECT Message.Question(("You haven't enabled this device, shall I enabled it?"), ("Yes"), ("No"))
      CASE 1
        chkEnabled.Value = TRUE
      CASE 0
        ' you want it
    END SELECT
  END IF
  IF chkEnabled.Value = TRUE THEN
    IF DeviceAddressExist(GetAddress(), GetInterface(), rResult!id) THEN
      Balloon(("Please enter a unique address for this device!"), Frame2)
      RETURN
    ENDIF
  ENDIF
  iDeviceType = GetDeviceType()
  iInterface = GetInterface()
  sAddress = GetAddress()
  iLocation = GetLocation()
  sGroups = GetGroups()
  iFloorplan = GetFloorplan()
  sCorrection1 = tbCorrection1.Text
  sCorrection2 = tbCorrection2.Text
  sCorrection3 = tbCorrection3.Text
  sCorrection4 = tbCorrection4.Text

  ' save new device settings
  IF System.Version = "2" THEN
    ' save new device settings
    sSql = "UPDATE devices SET name = &1, module = &2, interface = &3, address = &4, location = &5,"
    sSql &= "label = &6, label2 = &7, label3 = &8, value = &9, officon = &10, onicon = &11,"
    sSql &= "batterystatus = &12, comments = &13, enabled = &14, groups = &15, value2 = &16, value3 = &17,"
    sSql &= "hide = &18, switchable = &19, dimable = &20, log = &21, graph = &22, valuerrddsname = &23,"
    sSql &= "value2rrddsname = &24, value3rrddsname = &25, valuerrdtype = &26, x = &27, y = &28, floorplan = &29,"
    sSql &= "value2rrdtype = &30, value3rrdtype = &31, value4 = &32, label4 = &33, value4rrddsname = &34,"
    sSql &= "value4rrdtype = &35, dimicon = &36, extcode = &37, correction = &38, correction2 = &39, correction3 = &40, correction4 = &41, logdisplay = &42,"
    sSql &= "logspeak = &43, rrd = &44, repeatstate = &45, repeatperiod = &46, reset = &47, resetperiod = &48, resetvalue = &49, poll = &50 WHERE id = &51"
  ELSE
    ' save new device settings
    sSql = "UPDATE devices SET name = &1, module = &2, interface = &3, address = &4, location = &5,"
    sSql &= "label = &6, label2 = &7, label3 = &8, value = &9, officon = &{10}, onicon = &{11},"
    sSql &= "batterystatus = &{12}, comments = &{13}, enabled = &{14}, groups = &{15}, value2 = &{16}, value3 = &{17},"
    sSql &= "hide = &{18}, switchable = &{19}, dimable = &{20}, log = &{21}, graph = &{22}, valuerrddsname = &{23},"
    sSql &= "value2rrddsname = &{24}, value3rrddsname = &{25}, valuerrdtype = &{26}, x = &{27}, y = &{28}, floorplan = &{29},"
    sSql &= "value2rrdtype = &{30}, value3rrdtype = &{31}, value4 = &{32}, label4 = &{33}, value4rrddsname = &{34},"
    sSql &= "value4rrdtype = &{35}, dimicon = &{36}, extcode = &{37}, correction = &{38}, correction2 = &{39}, correction3 = &{40}, correction4 = &{41}, logdisplay = &{42},"
    sSql &= "logspeak = &{43}, rrd = &{44}, repeatstate = &{45}, repeatperiod = &{46}, reset = &{47}, resetperiod = &{48}, resetvalue = &{49}, poll = &{50} WHERE id = &{51}"
  ENDIF

  rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, rResultType!id, iInterface, sAddress, iLocation, cmbLabel.Text, cmbLabel2.Text, cmbLabel3.Text, tbValue.Text, tbOffIcon.Text, tbOnIcon.Text, tbBatt.Text, tbComments.Text, chkEnabled.Value, sGroups, tbValue2.Text, tbValue3.Text, chkHide.Value, chkSwitchable.Value, chkDimable.Value, chkLog.Value, chkGraph.Value, LCase(tbValueDS.Text), LCase(tbValue2DS.Text), LCase(tbValue3DS.Text), cmbValueType.Text, tbX.Text, tbY.Text, iFloorplan, cmbValue2Type.Text, cmbValue3Type.Text, tbValue4.Text, cmbLabel4.Text, LCase(tbValue4DS.Text), cmbValue4Type.Text, tbDimIcon.Text, chkExtended.Value, sCorrection1, sCorrection2, sCorrection3, sCorrection4, chkLogDisplay.Value, chkLogSpeak.Value, chkRRD.Value, chkRepeat.Value, vbRepeatPeriod.Value, chkReset.Value, vbResetPeriod.Value, tbResetValue.Text, chkPoll.Value, rResult!id)

  FDevices.GetDeviceList()
  IF chkRRD.Value THEN
    IF Main.bServer THEN
      RRDTool.CreateRRDs(rResult!id)
    ELSE
      XMLClient.CreateRRDs(rResult!id)
    ENDIF
  ENDIF
  IF FControl.Visible THEN FControl.ReloadPage()
  bAddDevice = FALSE
  ME.Close

END

PUBLIC SUB tbValue2_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbValue3_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbValue4_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbBatt_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkEnabled_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkHide_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkLog_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbComments_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB spDeviceCode_Change()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkGraph_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbValueDS_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbValueType_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbValue2DS_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbValue2Type_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkLogSpeak_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkLogDisplay_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tbValue4DS_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbValue4Type_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB chkDimable_Click()

  chkSwitchable.Value = FALSE
  btnSave.Enabled = TRUE

END

PUBLIC SUB chkSwitchable_Click()

  chkDimable.Value = FALSE
  btnSave.Enabled = TRUE

END

PUBLIC SUB btnBattReplaced_Click()

  tbComments.Text &= ("Battery is replaced on ") & Format(Now(), "yyyy-mm-dd hh:nn:ss")
  tbBatt.Text = NULL
  btnSave.Enabled = TRUE

END

PUBLIC SUB btnIconOn_Click()

  tbOnIcon.Text = FSelectImage.Run(Main.sBaseDir &/ "icons" &/ tbOnIcon.Text, "icons")
  btnSave.Enabled = TRUE
  DisplayIcons()

END

PUBLIC SUB btnIconOff_Click()

  tbOffIcon.Text = FSelectImage.Run(Main.sBaseDir &/ "icons" &/ tbOffIcon.Text, "icons")
  btnSave.Enabled = TRUE
  DisplayIcons()

END

PUBLIC SUB btnIconDim_Click()

  tbDimIcon.Text = FSelectImage.Run(Main.sBaseDir &/ "icons" &/ tbDimIcon.Text, "icons")
  btnSave.Enabled = TRUE
  DisplayIcons()

END

PUBLIC SUB btnEditor_Click()

  ' only start editor if location/floorplan is chosen
  IF cmbFloorplan.Text AND cmbFloorplan.Text <> " " THEN
    FFloorplanEditor.pbIcon.Picture = Picture[Main.sBaseDir &/ "icons" &/ tbOnIcon.Text]
    FFloorplanEditor.txtX.Text = tbX.Text
    FFloorplanEditor.txtY.Text = tbY.Text
    FFloorplanEditor.Show()
  ELSE
    Message(("Select a floorplan first!"))
  END IF

END

PUBLIC SUB GetFloorplan() AS Integer

  rResultFloorplan = Main.hDB.Exec("SELECT floor FROM floors WHERE name = &1", cmbFloorplan.Text)
  TRY RETURN rResultFloorplan!floor

END

PUBLIC SUB DisplayIcons()

  IF tbOnIcon.Text THEN
    TRY mbIconOn.Path = Main.sBaseDir &/ "icons" &/ tbOnIcon.Text
    IF NOT ERROR THEN mbIconOn.Playing = TRUE
  ELSE
    mbIconOn.Path = ""
    mbIconOn.Playing = FALSE
    mbIconOn.Refresh
  END IF

  IF tbDimIcon.Text THEN
    TRY mbIconDim.Path = Main.sBaseDir &/ "icons" &/ tbDimIcon.Text
    IF NOT ERROR THEN mbIconDim.Playing = TRUE
  ELSE
    mbIconDim.Path = ""
    mbIconDim.Playing = FALSE
    mbIconDim.Refresh
  END IF

  IF tbOffIcon.Text THEN
    TRY mbIconOff.Path = Main.sBaseDir &/ "icons" &/ tbOffIcon.Text
    IF NOT ERROR THEN mbIconOff.Playing = TRUE
  ELSE
    mbIconOff.Path = ""
    mbIconOff.Playing = FALSE
    mbIconOff.Refresh
  END IF

END

PRIVATE SUB RenameRRD(sOld AS String, sNew AS String)

  DIM sRRDOld, sRRDNew, sRRDOldName, sRRDNewName AS String

  sRRDOldName = LCase(Replace$(sOld, " ", ""))
  sRRDOldName = Replace$(sRRDOldName, "/", "")
  sRRDOld = Main.sBaseDir &/ "rrd" &/ sRRDOldName & ".rrd"

  sRRDNewName = LCase(Replace$(sNew, " ", ""))
  sRRDNewName = Replace$(sRRDNewName, "/", "")
  sRRDNew = Main.sBaseDir &/ "rrd" &/ sRRDNewName & ".rrd"

  TRY MOVE sRRDOld TO sRRDNew
  IF ERROR THEN
    TRY COPY sRRDOld TO sRRDNew
    IF NOT ERROR THEN KILL sRRDOld
  ENDIF

END

PUBLIC SUB cmbFloorplan_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbLabel_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbLabel2_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbLabel3_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnDeleteRRD_Click()

  RRDTool.DeleteRRD(rResult!id)
  bDeletedRRD = TRUE

END

PUBLIC SUB chkExtended_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbLabel4_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB Corr_Change()

  FillCorrectionFields()

END

PUBLIC SUB chkRRD_Click()

  chkGraph.Enabled = chkRRD.Value

END

PUBLIC SUB btnDeleteLog_Click()

  SELECT Message.Question(("Are you sure that you want to delete all logged values for this device?"), ("Yes"), ("No"))
    CASE 1
      Devices.EraseLog(rResult!id)
      DataSourceLog.Refresh
      DataBrowserLog.Refresh
  END SELECT

END

PUBLIC SUB RefreshModuleList()

  DIM rResultDeviceTypes2 AS Result
  DIM sPattern AS String = cmbDeviceType.Text

  IF (Len(cmbDeviceType.Text) < 2) THEN sPattern = "%"
  ' fill module combo with modules/devicetypes of sType
  TRY rResultDeviceTypes2 = Main.hDB.Exec("SELECT name FROM devicetypes WHERE type LIKE &1 ORDER BY name", sPattern)
  IF NOT ERROR THEN
    IF rResultDeviceTypes2 THEN
      IF rResultDeviceTypes2.Count THEN
        cmbModule.Clear
        cmbModule.Refresh
        FOR EACH rResultDeviceTypes2
          cmbModule.Add(rResultDeviceTypes2!name)
        NEXT
      ENDIF
    ELSE
      Message(("No devicetypes database table found!"))
    ENDIF
  ENDIF
  TRY cmbModule.Text = rResultType!name
  LoadDeviceImage()
  IF bAddDevice THEN RefreshInterfaceList()
  RefreshDeviceType()

END

PUBLIC SUB RefreshInterfaceList()

  DIM rResultInterface2 AS Result
  DIM sPattern AS String = "%" & cmbDeviceType.Text & "%"

  IF (Len(cmbDeviceType.Text) < 2) THEN sPattern = "%"
  ' fill interfaces combo with interfaces which support sType
  rResultInterface2 = Main.hDB.Exec("SELECT name FROM interfaces WHERE type LIKE &1 ORDER BY name", sPattern)
  IF NOT ERROR THEN
    IF rResultInterface2 THEN
      IF rResultInterface2.Count THEN
        cmbInterface.Clear
        cmbInterface.Refresh
        FOR EACH rResultInterface2
          cmbInterface.Add(rResultInterface2!name)
        NEXT
      ENDIF
    ELSE
      Message(("No interfaces database table found!"))
    ENDIF
  ENDIF

END

PUBLIC SUB cmbDeviceType_Click()

  RefreshModuleList()
  btnSave.Enabled = TRUE

END

PUBLIC SUB chkReset_Click()

  tbResetValue.Enabled = chkReset.Value
  vbResetPeriod.Enabled = chkReset.Value
  btnSave.Enabled = TRUE

END

PUBLIC SUB chkRepeat_Click()

  vbRepeatPeriod.Enabled = chkRepeat.Value
  btnSave.Enabled = TRUE

END
