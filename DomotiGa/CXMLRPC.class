' Gambas class file

' Description:
' CXMLRPC.class
' Built-in XML-RPC server

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY HTTPPort AS Integer
PROPERTY MaxConn AS Integer
PROPERTY XMLRPCDebug AS Boolean

PRIVATE iHTTPPort AS Integer
PRIVATE iMaxConn AS Integer
PRIVATE bXMLRPCDebug AS Boolean

PUBLIC hXMLRPC AS RpcServer

PUBLIC FUNCTION Connect() AS Boolean

  DIM hRpcFunc AS RpcFunction

  hXMLRPC = NEW RpcServer AS "hXMLRPC"

  ' start method definitions
  hRpcFunc = NEW RpcFunction("system.program_version", NULL, XmlRpc.xString)
  hRpcFunc.Help = "returns the program version"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("system.pid", NULL, XmlRpc.xString)
  hRpcFunc.Help = "returns the process id"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("system.hostname", NULL, XmlRpc.xString)
  hRpcFunc.Help = "returns the hostname"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("data.newmessages", NULL, XmlRpc.xArray)
  hRpcFunc.Help = "returns new mails, calls and voicemails"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("data.sunmoon", NULL, XmlRpc.xArray)
  hRpcFunc.Help = "returns sun and moon data"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("mode.get_housemode", NULL, XmlRpc.xString)
  hRpcFunc.Help = "returns the house mode"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("mode.get_mutemode", NULL, XmlRpc.xBoolean)
  hRpcFunc.Help = "returns the mute mode"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("globalvar.list", NULL, XmlRpc.xArray)
  hRpcFunc.Help = "returns a list of global variables"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("device.list", NULL, XmlRpc.xStruct)
  hRpcFunc.Help = "returns a list of devices"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("device.listswitch", NULL, XmlRpc.xStruct)
  hRpcFunc.Help = "returns a list of devices which can be switched"
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = NEW RpcFunction("device.listdim", NULL, XmlRpc.xStruct)
  hRpcFunc.Help = "returns a list of devices which can be dimmed"
  hXMLRPC.Register(hRpcFunc)
  hXMLRPC.Listen(iHTTPPort, iMaxConn)

  IF NOT hXMLRPC.Listening THEN
    RETURN FALSE
  END IF
  RETURN TRUE

END

' shutdown our xmlrpc server
PUBLIC SUB Disconnect()

  hXMLRPC.Stop()

END

PRIVATE SUB ReturnDeviceListDimSwitch(sType AS String)

  DIM rResult AS Result
  DIM sString AS NEW Collection
  DIM sList AS NEW RpcStruct
  DIM sStatusIcon AS String
  DIM iCnt AS Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")

  IF NOT rResult.Available THEN
    Message.Info("Error: table 'devices' not found!")
    RETURN
  END IF

  FOR iCnt = 0 TO rResult.Count - 1

    IF sType = "switchable" AND rResult!switchable OR (sType = "dimable" AND rResult!dimable) THEN
      ' status icon
      IF rResult!onicon OR rResult!officon THEN
        IF UCase$(rResult!value) = "ON" OR UCase$(rResult!value) = "OPEN" OR UCase$(rResult!value) = "MOTION" THEN
          sStatusIcon = rResult!onicon
        ELSE
          sStatusIcon = rResult!officon
        END IF
      END IF
      sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & rResult!value
      sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
    END IF
    rResult.MoveNext
  NEXT

  hXMLRPC.SetReply(sList)

END

PRIVATE SUB ReturnDeviceList()

  DIM rResult, rResult3 AS Result
  DIM sString AS NEW Collection
  DIM sList AS NEW RpcStruct
  DIM iCnt AS Integer
  DIM sStatusIcon, sLastseen AS String

  rResult = Main.hDB.Exec("SELECT * FROM devices")

  IF NOT rResult.Available THEN
    Message.Info("Error: table 'devices' not found!")
    RETURN
  END IF

  FOR iCnt = 0 TO rResult.Count - 1
    ' status icon
    IF rResult!onicon OR rResult!officon THEN
      IF UCase$(rResult!value) = "ON" OR UCase$(rResult!value) = "OPEN" OR UCase$(rResult!value) = "MOTION" THEN
        sStatusIcon = rResult!onicon
      ELSE
        sStatusIcon = rResult!officon
      END IF
    END IF
    ' location
    TRY rResult3 = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResult!location)
    ' last seen
    IF rResult!lastseen THEN 
      sLastSeen = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    ELSE
      sLastSeen = "Never"
    END IF
    sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & rResult3!name & ";;" & rResult!value & ";;" & rResult!label & ";;" & rResult!value2 & ";;" & rResult!label2 & ";;" & rResult!value3 & ";;" & rResult!label3 & ";;" & rResult!value4 & ";;" & rResult!label4 & ";;" & sLastSeen
    sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
    rResult.MoveNext
  NEXT

  hXMLRPC.SetReply(sList)

END

PUBLIC SUB hXMLRPC_RemoteCall(Name AS String, Data AS Variant[])

  DIM vValue AS Variant
  DIM aArray AS NEW RpcArray

  SELECT CASE Name
    CASE "system.program_version"
      hXMLRPC.SetReply(Application.Version)
    CASE "system.pid"
      hXMLRPC.SetReply(Application.Id)
    CASE "system.hostname"
      hXMLRPC.SetReply(System.Host)
    CASE "mode.get_housemode"
      hXMLRPC.SetReply(Main.GlobalVar["House_Mode"])
    CASE "mode.get_mutemode"
      hXMLRPC.SetReply(Main.GlobalVar["Mute"])
    CASE "globalvar.list"
      FOR EACH vValue IN Main.GlobalVar
        aArray.Add(Main.GlobalVar.Key, XmlRpc.xString)
      NEXT
      hXMLRPC.SetReply(aArray)
    CASE "data.sunmoon"
      aArray.Add(Main.GlobalVar["Sunrise"], XmlRpc.xString)
      aArray.Add(Main.GlobalVar["Sunset"], XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    CASE "data.newmessages"
      aArray.Add(Main.iNewMails, XmlRpc.xString)
      aArray.Add(Main.iNewCalls, XmlRpc.xString)
      aArray.Add(Main.iNewVoicemails, XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    CASE "device.list"
      ReturnDeviceList()
    CASE "device.listswitch"
      ReturnDeviceListDimSwitch("switchable")
    CASE "device.listdim"
      ReturnDeviceListDimSwitch("dimable")
    DEFAULT
      RETURN
  END SELECT

END

PRIVATE FUNCTION HTTPPort_Read() AS Integer

  RETURN iHTTPPort

END

PRIVATE SUB HTTPPort_Write(Value AS Integer)

  iHTTPPort = Value

END

PRIVATE FUNCTION MaxConn_Read() AS Integer

  RETURN iMaxConn

END

PRIVATE SUB MaxConn_Write(Value AS Integer)

  iMaxConn = Value

END

PRIVATE FUNCTION XMLRPCDebug_Read() AS Boolean

  RETURN bXMLRPCDebug

END

PRIVATE SUB XMLRPCDebug_Write(Value AS Boolean)

  bXMLRPCDebug = Value

END
