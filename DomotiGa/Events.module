' Gambas module file

' Description:
' Events.module
' This module provides support for events, triggers, actions and conditions.

' Development Status:
' Works 99.99% ok now. Partly rewritten by Geert-Jan van den Hurk.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

' trigger database table
' description        | type | param1   | param2  | param3  | param4 | param5  | param6 | param7
' time now           |   1  | hour     | minute
' globalvar change   |   2  | variable | operand | value
' device change      |   3  | id       | fieldno | operand | value
' ir remote received |   4  | remote   | button  | repeat

' called every new minute from EventLoop.Run()
PUBLIC SUB CheckTimeNowEvents()

  DIM rResult AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 1 AND events.enabled AND triggers.param1 = &1 AND triggers.param2 = &2", Format(Main.GlobalVar["Hour"], "00"), Format(Main.GlobalVar["Minute"], "00"))
  IF rResult THEN
    DoEvent(rResult)
  ELSE
    Main.WriteDebugLog(("[Events] Error while running CheckTimeNowEvents query!"))
    RETURN
  ENDIF

END

' called when a value of a device is set, and is different from last one from EventLoop.DeviceChanged()
' iID = id of device, sField = the field that has changed, sValue = the new value it's set to
PUBLIC SUB CheckDeviceChangeEvents(iId AS Integer, sField AS String, sValue AS String)

  DIM rResult AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 3 AND events.enabled AND triggers.param1 = &1 AND triggers.param2 = &2", iId, sField)
  IF rResult THEN
    IF rResult.Count THEN DoEvent(rResult, sValue)
  ELSE
    Main.WriteDebugLog(("[Events] Error while running CheckDeviceChangeEvents query!"))
    RETURN
  ENDIF

END

' called when a IR signal is received from CLIRC.ParseLine(), CIRMan.ParseLine() or CIRTrans.ParseLine()
PUBLIC SUB CheckIRRemoteEvents(sRemote AS String, sButton AS String)

  DIM rResult AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 4 AND events.enabled AND triggers.param1 = &1 AND triggers.param2 = &2", sRemote, sButton)
  IF rResult THEN
    IF rResult.Count THEN DoEvent(rResult)
  ELSE
    Main.WriteDebugLog(("[Events] Error while running CheckIRRemoteEvents query!"))
    RETURN
  ENDIF

END

' called when a globalvar value has changed from Main.SetGlobalVar()
PUBLIC SUB CheckGlobalVarEvents(sVar AS String, vValue AS Variant)

  DIM rResult AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 2 AND events.enabled AND triggers.param1 = &1", sVar)
  IF rResult THEN
    IF rResult.Count THEN
      DoEvent(rResult, vValue)
    ENDIF
  ELSE
    Main.WriteDebugLog(("[Events] Error while running CheckGlobalVarEvents query!"))
    RETURN
  ENDIF

END

PRIVATE SUB DoEvent(rResult AS Result, OPTIONAL sValue AS Variant)

  IF rResult.Count THEN
    FOR EACH rResult
      ' check if event is allowed to get triggered again
      IF rResult!rerunenabled = TRUE AND IF IsDate(rResult!lastrun) THEN
        IF NOT CheckReRunCondition(rResult!lastrun, rResult!reruntype, rResult!rerunvalue) THEN
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Event '") & rResult!name & ("' already ran in the last ") & rResult!rerunvalue & " " & rResult!reruntype & (" so discarding"))
          CONTINUE
        ENDIF
      ENDIF
      ' check globalvar change trigger
      IF rResult["triggers.type"] = 2 THEN
        IF NOT CheckCondition(sValue, rResult["triggers.param2"], rResult["triggers.param3"]) THEN CONTINUE
        IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] GlobalVar Change trigger on '") & rResult["triggers.param1"] & "' " & sValue & " " & rResult["triggers.param2"] & " " & rResult["triggers.param3"])
      ENDIF
      ' check device change trigger
      IF rResult["triggers.type"] = 3 THEN
        IF NOT CheckCondition(sValue, rResult["triggers.param3"], rResult["triggers.param4"]) THEN CONTINUE
        IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Device Change trigger on '") & rResult["triggers.param2"] & "' " & sValue & " " & rResult["triggers.param3"] & " " & rResult["triggers.param4"])
      ENDIF
      ' check optional conditions
      IF CheckConditions(rResult!condition1, rResult!condition2, rResult!operand) = TRUE THEN
        ' run action(s)
        IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Event '") & rResult["events.name"] & ("' is triggered, running action(s)."))
        RunActions(rResult!id, rResult!action1, rResult!action2, rResult!action3)
      ENDIF
    NEXT
  ENDIF

END

PUBLIC SUB CheckCondition(sValue AS Variant, sOperand AS String, sCond AS Variant) AS Boolean

  DIM bReturn AS Boolean

  IF IsBoolean(sValue) THEN sValue = Main.DisplayBool(sValue)
  IF IsBoolean(sCond) THEN sCond = Main.DisplayBool(sCond)

  SELECT sOperand
    CASE "="
      IF Comp(sValue, sCond) = 0 THEN bReturn = TRUE
    CASE "<>"
      IF sValue <> sCond THEN bReturn = TRUE
    CASE ">"
      IF CFloat(Replace(sValue, ",", ".", gb.String)) > CFloat(Replace(sCond, ",", ".", gb.String)) THEN bReturn = TRUE
    CASE "<"
      IF CFloat(Replace(sValue, ",", ".", gb.String)) < CFloat(Replace(sCond, ",", ".", gb.String)) THEN bReturn = TRUE
    CASE ELSE
      IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Unsupported operand '" & sOperand & "' found!"))
  END SELECT
    IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Check condition ") & sValue & " " & sOperand & " " & sCond & " = " & Main.DisplayBool(bReturn))
  RETURN bReturn

CATCH
  IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Invalid comparison in CheckCondition() routine!"))
  RETURN FALSE

END

PRIVATE SUB CheckSingleCondition(iCondition AS Integer) AS Boolean

  DIM bResult AS Boolean
  DIM sValue AS String
  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT * FROM conditions WHERE id = " & iCondition)
  IF rResultCondition THEN
  bResult = TRUE

  SELECT rResultCondition!type
    CASE 1 ' time
      ' not supported as condition
    CASE 2 ' variable
      bResult = CheckCondition(Main.GlobalVar[rResultCondition!param1], rResultCondition!param2, rResultCondition!param3)
    CASE 3  ' device Status
      IF Comp(rResultCondition!param2, "Value") = 0 THEN
        sValue = Devices.GetCurrentValueForDevice(rResultCondition!param1)
      ELSE IF Comp(rResultCondition!param2, "Value2") = 0 THEN
        sValue = Devices.GetCurrentValue2ForDevice(rResultCondition!param1)
      ELSE IF Comp(rResultCondition!param2, "Value3") = 0 THEN
        sValue = Devices.GetCurrentValue3ForDevice(rResultCondition!param1)
      ELSE IF Comp(rResultCondition!param2, "Value4") = 0 THEN
        sValue = Devices.GetCurrentValue4ForDevice(rResultCondition!param1)
      ELSE
        sValue = Devices.GetCurrentValueForDevice(rResultCondition!param1)
      ENDIF
      bResult = CheckCondition(sValue, rResultCondition!param3, rResultCondition!param4)
    CASE ELSE
      IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Event unsupported condition type found!"))
  END SELECT
  ELSE
    bResult = FALSE
  ENDIF
  RETURN bResult

END

' check the optional conditions 1 and 2
PRIVATE SUB CheckConditions(iCondition1 AS Integer, iCondition2 AS Integer, sOperand AS String) AS Boolean

  DIM bCondition, bCondition1, bCondition2 AS Boolean
  'DIM rResultCondition AS Result

  ' assume that all conditions are met
  bCondition = TRUE

  IF iCondition1 THEN
    'rResultCondition = CheckSingleCondition(iCondition1)
      bCondition1 = CheckSingleCondition(iCondition1)
      IF iCondition2 THEN
        'rResultCondition = GetCondition(iCondition2)
        bCondition2 = CheckSingleCondition(iCondition2)
      ELSE
        bCondition2 = bCondition1
      ENDIF
      ' check the OR and AND clause
      IF bCondition1 = FALSE AND IF bCondition2 = FALSE THEN
        bCondition = FALSE
      ELSE IF sOperand == "AND" THEN
        IF bCondition1 = FALSE OR bCondition2 = FALSE THEN
          bCondition = FALSE
        ENDIF
      ENDIF
  ENDIF
  RETURN bCondition

END

' run all configured actions
PRIVATE SUB RunActions(iEventId AS Integer, iAction1 AS Integer, iAction2 AS Integer, iAction3 AS Integer)

  UpdateEvent(iEventId)
  IF iAction1 THEN RunAction(iAction1)
  IF iAction2 THEN RunAction(iAction2)
  IF iAction3 THEN RunAction(iAction3)

END

PRIVATE SUB CheckReRunCondition(dDate AS Date, sPeriod AS String, iValue AS Integer) AS Boolean

  IF DateDiff(dDate, Now(), Eval(sPeriod)) > iValue THEN
    RETURN TRUE
  ELSE
    IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Event Rerun condition ") & iValue & " " & sPeriod & (" is false."))
    RETURN FALSE
  ENDIF

END

' action database table
' description       | rResultAction!type | rResultAction!param1      | rResultAction!param2 | rResultAction!param3 | rResultAction!param4 | rResultAction!param5
' set device value  | 1                  | deviceid                  | value fieldname      | value
' set globalvar     | 2                  | globalvar name            | value
' send e-mail       | 3                  | to address                | subject              | subject
' speak text        | 4                  | voice or 'female', 'male' | text
' execute command   | 5                  | shell command to run
' send tweet        | 6                  | tweet message to send
' send SMS message  | 7                  | to SMS number             | message
' send IRTrans IR   | 8                  | command string

PRIVATE SUB RunAction(iAction AS Integer) AS Boolean

  DIM rResultAction AS Result
  DIM bOk AS Boolean

  rResultAction = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1 ", iAction)
  IF rResultAction.Available THEN
    SELECT rResultAction!type
      CASE 1 ' set device value
        ' only changing field Value will trigger interface code, and Value2-Value4 will only set field value
        IF rResultAction!param1 AND IF rResultAction!param2 AND IF rResultAction!param3 THEN
          IF Comp(rResultAction!param2, "Value") = 0 THEN
              Devices.SetDevice(Devices.FindNameForDevice(rResultAction!param1), rResultAction!param3)
            ELSE IF Comp(rResultAction!param2, "Value2") = 0 THEN
              Devices.ValueUpdate(rResultAction!param1, "", rResultAction!param3, "", "")
            ELSE IF Comp(rResultAction!param2, "Value3") = 0 THEN
              Devices.ValueUpdate(rResultAction!param1, "", "", rResultAction!param3, "")
            ELSE IF Comp(rResultAction!param2, "Value4") = 0 THEN
              Devices.ValueUpdate(rResultAction!param1, "", "", "", rResultAction!param3)
          ENDIF
          bOk = TRUE
        ENDIF
      CASE 2 ' set globalvar value
        ' if globalvar doesn't exist it will be created
        IF rResultAction!param1 AND IF rResultAction!param2 THEN
          TRY Main.GlobalVar[rResultAction!param1] = rResultAction!param2
          IF ERROR THEN
            bOk = FALSE
          ELSE
            bOk = TRUE
          ENDIF
        ENDIF
      CASE 3 ' send e-mail
        IF Main.bEmailEnabled THEN
          TRY Mail.SendMail(rResultAction!param2, rResultAction!param3, rResultAction!param1)
          IF ERROR THEN
            bOk = FALSE
          ELSE
            bOk = TRUE
          ENDIF
        ELSE
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] e-mail support is disabled!"))
        ENDIF
      CASE 4 ' speak text
        IF Main.bVoiceTextEnabled THEN
          TRY VoiceText.Speak(rResultAction!param2, rResultAction!param1)
          IF ERROR THEN
            bOk = FALSE
          ELSE
            bOk = TRUE
          ENDIF
        ELSE
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] VoiceText support is disabled!"))
        ENDIF
      CASE 5 ' execute command
        TRY SHELL rResultAction!param1
        IF ERROR THEN
          bOk = FALSE
        ELSE
          bOk = TRUE
        ENDIF
      CASE 6 ' send tweet
        IF Main.bTwitterEnabled THEN
          TRY Twitter.PostTweet(rResultAction!param1)
          IF ERROR THEN
            bOk = FALSE
          ELSE
            bOk = TRUE
          ENDIF
        ELSE
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Twitter support is disabled!"))
        ENDIF
      CASE 7 ' send SMS message
        IF Main.bSMSEnabled THEN
          TRY Main.hSMS.SendSMS(rResultAction!param2, rResultAction!param1)
          IF ERROR THEN
            bOk = FALSE
          ELSE
            bOk = TRUE
          ENDIF
        ELSE
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] SMS support is disabled!"))
        ENDIF
      CASE 8 ' send IRTrans IR
        IF Main.bIRTransEnabled THEN
          TRY Main.hIRTrans.SendIRCommand(rResultAction!param1)
          IF ERROR THEN
            bOk = FALSE
          ELSE
            bOk = TRUE
          ENDIF
        ELSE
          IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] IRTrans support is disabled!"))
        ENDIF
      CASE ELSE
        bOk = FALSE
    END SELECT
  ENDIF

  IF bOk THEN
    IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Action '") & rResultAction!name & ("' executed!"))
    RETURN TRUE
  ELSE
    IF Main.bEventsDebug THEN Main.WriteDebugLog(("[Events] Action '") & rResultAction!name & ("' failed to execute!"))
    RETURN FALSE
  ENDIF

END

' update event timestamps
PRIVATE SUB UpdateEvent(iId AS Integer)

  DIM rResult AS Result

  rResult = Main.hDB.Exec("SELECT * FROM events where id = &1", iId)
  IF rResult.Available THEN
    IF rResult.Count = 1 THEN
      IF rResult!firstrun = "00:00:00" OR rResult!firstrun = "" THEN
        rResult = Main.hDB.Exec("UPDATE events SET firstrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
      ENDIF
    ENDIF
    rResult = Main.hDB.Exec("UPDATE events SET lastrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  ENDIF

END
