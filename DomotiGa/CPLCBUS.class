' Gambas class file

' Description:
' CPLCBUS.class
' Support for PLCBUS interface

' Development Status:
' Just a framework, does nothing yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY Port AS String
PROPERTY Baud AS String
PROPERTY PollTime AS Integer
PROPERTY PLCBUSDebug AS Boolean
PROPERTY UserCode AS String

PRIVATE sPort AS String
PRIVATE sBaud AS String
PRIVATE sUserCode AS String
PRIVATE iPollTime AS Integer
PRIVATE bPLCBUSDebug AS Boolean

PUBLIC hPLCBUS AS NEW SerialPort
PUBLIC tPLCBUS AS Timer
PUBLIC tPLCBUSLed AS Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the port
  TRY hPLCBUS.Close

  ' get a new one
  hPLCBUS = NEW Serialport AS "PLCBUS"

  WITH hPLCBUS
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' start poll timer for X10 status LED
  tPLCBUSLed = NEW Timer AS "tPLCBUSLED"
  tPLCBUS.Delay = 150
  tPLCBUS.Stop

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("PLCBUS Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hPLCBUS.Close
  Main.WriteLog(("PLCBUS serial port close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("PLCBUS Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB Run()

  tPLCBUS = NEW Timer AS "tPLCBUS"
  tPLCBUS.Delay = iPollTime
  tPLCBUS.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' convert hex code to status
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB PLCBUStoStatus(bCode AS Byte) AS String

  SELECT bCode
    CASE &H01
      RETURN "ALL_LIGHTS_ON"
    CASE &H0D
      RETURN "ON"
    CASE &H0E
      RETURN "OFF"
    CASE &H06
      RETURN "ALL_LIGHTS_OFF"
    CASE &H1E
      RETURN "ALL_STATUS"
  END SELECT

  RETURN ""

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' convert command code to hex code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CommandtoPLCBUS(sCommand AS String) AS Byte

  SELECT sCommand
    CASE "ALL_UNITS_OFF"
      RETURN &H00
    CASE "ALL_LIGHTS_ON"
      RETURN &H01
    CASE "ON"
      RETURN &H02
    CASE "OFF"
      RETURN &H03
    CASE "DIM"
      RETURN &H04
    CASE "BRIGHT"
      RETURN &H05
    CASE "ALL_LIGHTS_OFF"
      RETURN &H06
    CASE "BLINK"
      RETURN &H0A
    CASE "FADE_STOP"
      RETURN &H0B
    CASE "PRESET_DIM"
      RETURN &H0C
    CASE "STATUS_REQUEST"
      RETURN &H0F
    CASE "ALL_STATUS"
      RETURN &H1D
  END SELECT

  RETURN ""

END

' implement properties
FUNCTION Port_Read() AS String

  RETURN sPort

END

SUB Port_Write(Value AS String)

  sPort = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION PLCBUSDebug_Read() AS Boolean

  RETURN bPLCBUSDebug

END

PRIVATE SUB PLCBUSDebug_Write(Value AS Boolean)

  bPLCBUSDebug = Value

END

PRIVATE FUNCTION PollTime_Read() AS Integer

  RETURN iPollTime

END

PRIVATE SUB PollTime_Write(Value AS Integer)

  iPollTime = Value

END

PRIVATE FUNCTION UserCode_Read() AS String

  RETURN sUserCode

END

PRIVATE SUB UserCode_Write(Value AS String)

  sUserCode = Value

END
