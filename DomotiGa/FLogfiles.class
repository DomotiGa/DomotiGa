' Gambas class file

' Description:
' FLogfiles.class
' Display the different types of logs.
' Logs are not stored in db or file at the moment.
' And windows are cleared after it reached max buffers size (see main settings)

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC bPaused AS Boolean
PUBLIC iActive AS Integer = 1
PRIVATE rResult AS Result
PRIVATE rResultDevice AS Result

PUBLIC SUB Form_Open()

  IF NOT Main.bServer THEN btnViewFile.Enabled = FALSE
  btnMain_Click()

END

PUBLIC SUB Form_Resize()

  txtMainLog.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  txtSpeakLog.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  txtDebugLog.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  lvDevices.Move(4, 30, 176, ME.ClientHeight - 31)
  gvDevices.Move(183, 30, ME.ClientWidth - 189, ME.ClientHeight - 31)
  HBox1.Width = ME.ClientWidth - 15

END

PRIVATE SUB FillDeviceList()

  DIM rResultDevices AS Result
  DIM pIcon AS Picture

  lvDevices.Clear

  rResultDevices = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE AND log is TRUE ORDER BY name")
  IF rResultDevices THEN
    IF rResultDevices.Count THEN
      FOR EACH rResultDevices
        IF rResultDevices!onicon OR rResultDevices!officon THEN
          IF UCase(rResultDevices!value) = "ON" OR UCase(rResultDevices!value) = "OPEN" OR UCase(rResultDevices!value) = "MOTION" OR UCase(rResultDevices!value) = "UP" OR UCase(rResultDevices!value) = "AWAKE" THEN
            TRY pIcon = Picture[Main.sBaseDir &/ "icons" &/ rResultDevices!onicon]
          ELSE IF InStr(UCase(rResultDevices!value), "DIM") THEN
            TRY pIcon = Picture[Main.sBaseDir &/ "icons" &/ rResultDevices!dimicon]
          ELSE
            TRY pIcon = Picture[Main.sBaseDir &/ "icons" &/ rResultDevices!officon]
          END IF
        END IF
        lvDevices.Add(rResultDevices!id, rResultDevices!name, pIcon)
      NEXT
    ENDIF
  ELSE
    Message.Info(("Error: couldn't find devices table!"))
    RETURN
  ENDIF

END

PUBLIC SUB btnMain_Click()

  txtDebugLog.Hide
  txtSpeakLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  txtMainLog.Show
  iActive = 1

END

PUBLIC SUB btnSpeak_Click()

  txtSpeakLog.Show
  txtMainLog.Hide
  txtDebugLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  iActive = 2

END

PUBLIC SUB btnDebug_Click()

  txtDebugLog.Show
  txtMainLog.Hide
  txtSpeakLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  iActive = 3

END

PUBLIC SUB btnDevices_Click()

  FillDeviceList()

  WITH gvDevices
    .Columns.Count = 5
    .Columns[0].Width = 180
    .Columns[1].Width = 80
    .Columns[2].Width = 80
    .Columns[3].Width = 80
    .Columns[4].Width = 80
  END WITH

  txtDebugLog.Hide
  txtMainLog.Hide
  txtSpeakLog.Hide
  lvDevices.Show
  gvDevices.Show
  iActive = 4

END

PUBLIC SUB tbtnPause_Click()

  bPaused = tbtnPause.Value

END

PUBLIC SUB btnViewFile_Click()

  SELECT iActive
    CASE 1
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sMainLogfile)
    CASE 2
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sSpeakLogfile)
    CASE 3
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sDebugLogfile)
  END SELECT

END

PUBLIC SUB lvDevices_Select()

  ShowDeviceLog(lvDevices.Item.Key)

END

PRIVATE SUB ShowDeviceLog(iId AS Integer)

  DIM sLabel, sLabel2, sLabel3, sLabel4 AS String = " "

  rResultDevice = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  IF NOT rResultDevice THEN RETURN

  rResult = Main.hDB.Exec("SELECT * FROM devices_log WHERE deviceid = &1 ORDER BY id DESC", iId)
  IF NOT rResult THEN
    Message.Info(("Error: table 'devices_log' not found!"))
    RETURN
  END IF

  IF rResultDevice!label THEN sLabel = rResultDevice!label
  IF rResultDevice!label2 THEN sLabel2 = rResultDevice!label2
  IF rResultDevice!label3 THEN sLabel3 = rResultDevice!label3
  IF rResultDevice!label4 THEN sLabel4 = rResultDevice!label4

  WITH gvDevices
    .Rows.Count = rResult.Count
    .Columns[0].Title = ("Changed")
    .Columns[1].Title = sLabel
    .Columns[2].Title = sLabel2
    .Columns[3].Title = sLabel3
    .Columns[4].Title = sLabel4
  END WITH

END

PUBLIC SUB gvDevices_Data(Row AS Integer, Column AS Integer)

  DIM sValue, sValue2, sValue3, sValue4 AS String

  IF Row MOD 2 THEN gvDevices.Data.BackColor = Color.Background

  TRY rResult.MoveTo(Row)
  IF NOT ERROR THEN
    SELECT CASE Column
      CASE 0
        gvDevices.Data.Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      CASE 1
        sValue = Devices.CorrectValue(rResult!value, rResultDevice!correction, rResult)
        IF sValue THEN
          gvDevices.Data.Text = sValue
        ELSE
          gvDevices.Data.Text = ""
        ENDIF
      CASE 2
        sValue2 = Devices.CorrectValue(rResult!value2, rResultDevice!correction2, rResult)
        IF sValue2 THEN
          gvDevices.Data.Text = sValue2
        ELSE
          gvDevices.Data.Text = ""
        ENDIF
      CASE 3
        sValue3 = Devices.CorrectValue(rResult!value3, rResultDevice!correction3, rResult)
        IF sValue3 THEN
          gvDevices.Data.Text = sValue3
        ELSE
          gvDevices.Data.Text = ""
        ENDIF
      CASE 4
        sValue4 = Devices.CorrectValue(rResult!value4, rResultDevice!correction4, rResult)
        IF sValue4 THEN
          gvDevices.Data.Text = sValue4
        ELSE
          gvDevices.Data.Text = ""
        ENDIF
    END SELECT
  ENDIF

END
