' Gambas class file

' Description:
' CSharpTV.class
' Support for Sharp TV control.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Daniel Keller in 2010.

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS Integer
PROPERTY SharpTVDebug AS Boolean
PROPERTY Interface AS String
PROPERTY SerPort AS String
PROPERTY Baud AS String

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS Integer
PRIVATE bSharpTVDebug AS Boolean
PRIVATE sInterface AS String
PRIVATE sSerPort AS String
PRIVATE sBaud AS String

PUBLIC hSharpTV AS NEW Socket
PUBLIC hSharpTVSer AS NEW SerialPort

PUBLIC sBuffer AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectTCP() AS Boolean

  ' try to close the connection
  TRY hSharpTV.Close

  ' get a new one
  hSharpTV = NEW Socket AS "SharpTV"
  hSharpTV.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("SharpTV receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectSerial() AS Boolean

  ' try to close the connection
  TRY hSharpTVSer.Close

  ' get a new one
  hSharpTVSer = NEW Serialport AS "SharpTVSer"
  WITH hSharpTVSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("SharpTV receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SharpTV_Ready()

  Main.WriteLog(("SharpTV receiver TCP socket connected."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SharpTV_Closed()

  Main.WriteLog(("SharpTV receiver TCP socket closed."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hSharpTV.Close
  TRY hSharpTVSer.Close

  IF InStr(sInterface, "tcp") THEN
    Main.WriteLog(("SharpTV receiver TCP socket close."))
  ELSE
    Main.WriteLog(("SharpTV receiver serial port close."))
  ENDIF
  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("SharpTV receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SharpTV_Error()

  ' handle error
  SELECT CASE hSharpTV.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("SharpTV: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("SharpTV: Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(("SharpTV: Unable to connect to receiver. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(("SharpTV: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("SharpTV: Error writing data."))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SendCmd(sCmd AS String) AS String

  SELECT CASE Len(sCmd)
    CASE 4
      sCmd = sCmd & "    "
    CASE 5
      sCmd = sCmd & "   "
    CASE 6
      sCmd = sCmd & "  "
    CASE 7
      sCmd = sCmd & " "
    CASE 8
      ' ok
    CASE ELSE
      Main.WriteLog("SharpTV Error in sending command, lenght of string is wrong " & sCmd)
  END SELECT

  IF Main.bSharpTVDebug THEN Main.WriteLog(("Sending ") & sCmd & (" to Receiver."))
  IF sInterface = "tcp" THEN
    TRY WRITE #hSharpTV, sCmd & Chr$(13), Len(sCmd) + 1
    IF ERROR THEN Main.WriteDebugLog(("[SharpTV] Error writing data to the TCP port! -> ") & Error.Text)
  ELSE
    TRY WRITE #hSharpTVSer, sCmd & Chr$(13), Len(sCmd) + 1
    IF ERROR THEN Main.WriteDebugLog(("[SharpTV] Error writing data to the serial port! -> ") & Error.Text)
  ENDIF

  ' needs a short break otherwise not all data are correct
  SLEEP 0.1
  RETURN ReceiveData()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get the response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB ReceiveData() AS String

  DIM iTries AS Integer = 30
  DIM sData AS String

  ' see if we got some data
  WHILE iTries > 0
    TRY LINE INPUT #hSharpTV, sData
    IF ERROR THEN
      ' not yet
      SLEEP 0.01
    ELSE
      ' got it
      BREAK
    ENDIF
    DEC iTries
  WEND
  IF bSharpTVDebug THEN Main.WriteDebugLog("[SharpTV] < " & sData)

  'PRINT "ReceiveData: " & Trim(sData)
  RETURN Trim(sData)

END

PRIVATE SUB SendCheckResponse(sCmd AS String) AS Integer

  ' send command like "POWR1   " and returns TRUE if "OK" or FALSE when something else
  ' just to see if sending command is correct

  IF InStr(SendCmd(sCmd), "OK") THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF

END

PRIVATE SUB Power(sState AS String) AS Variant
  ' ON/OFF (returns TRUE) or ? (returns the state)
  ' command = POWR
  ' argument 1 = On, 0 = Off, ? = actual state (send ????)

  DIM sReceive AS String
  DIM sItem AS String = "Power"

  SELECT CASE LCase(sState)
    CASE "on"
      IF SendCheckResponse("POWR1") THEN
        SharpTVSetValue(sItem, "On")
        RETURN "On"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Power ON to TV"))
      ENDIF
   CASE "off"
      IF SendCheckResponse("POWR0") THEN
        SharpTVSetValue(sItem, "Off")
        RETURN "Off"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Power Off to TV"))
      ENDIF
   CASE "?"
    sReceive = SendCmd("POWR????")
    IF sReceive = "1" THEN
      SharpTVSetValue(sItem, "On")
      RETURN "On"
    ELSE IF sReceive = "0" THEN
      SharpTVSetValue(sItem, "Off")
      RETURN "Off"
    ELSE
      IF Main.bSharpTVDebug THEN Main.WriteLog(("[SharpTV] Received wrong answer for command Power(?) (") & sReceive & ")")
    ENDIF
  END SELECT

END

PRIVATE SUB AVMode(sState AS String) AS Variant
  ' command: AVMD
  ' parameter: 0 = Toggle, 1 = Standard, 2 = Movie, 3 = Game, 4 = User, 5 = Dynamic konstant, 6 = Dynamic, 7 = PC, 100 = Auto, ? = actual state (send ????)

  DIM sReceive AS String
  DIM sItem AS String = "AVMode"

  SELECT CASE sState
    CASE "1" TO "7"
      IF SendCheckResponse("AVMD" & sState) THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending AVMD-Command (TV Mode) to TV!"))
      ENDIF
    CASE "100"
      IF SendCheckResponse("AVMD" & sState) THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending AVMD-Command (TV Mode) to TV!"))
      ENDIF
    CASE "?"
    sReceive = SendCmd("AVMD????")
    SharpTVSetValue(sItem, sReceive)
  END SELECT

END

PRIVATE SUB Wide(sState AS String) AS Variant
  ' command: WIDE
  ' parameter: 0 = Toggle (AV), 1 = Normal (AV), 2 = Zoom 14:9 (AV), 3 = Panorama (AV), 4 = Full (AV), 5 = Cinema 16:9 (AV)
  '            6 = Cinema 14:9 (AV), 7 = Normal (PC), 8 = Cinema (PC), 9 = Full (PC), 10 = Each Point (AV/PC)
  '            11 = underscan (AV), ? = actual state (send ????)

  DIM sReceive AS String
  DIM sItem AS String = "WideModus"

  SELECT CASE sState
    CASE "1" TO "11"
      IF SendCheckResponse("WIDE" & sState) THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending WIDE-Command to TV!"))
      ENDIF
    CASE "?"
      sReceive = SendCmd("WIDE????")
      SharpTVSetValue(sItem, sReceive)
  END SELECT

END

PRIVATE SUB Volume(sState AS String) AS Variant
  ' command: VOLM
  ' parameter: 0 - 60, ? = actual state (send ????)

  DIM sReceive AS String
  DIM sItem AS String = "Volume"

  SELECT CASE sState
    CASE "0" TO "60"
      IF SendCheckResponse("VOLM" & sState) THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending VOLM-Command to TV!"))
      ENDIF
    CASE "?"
      sReceive = SendCmd("VOLM????")
      SharpTVSetValue(sItem, sReceive)
  END SELECT

END

PRIVATE SUB TVChannel(sState AS String) AS Variant
  ' command: CHUP/CHDW, DCCH (1-99) for TV channel
  ' call with TVChannel Up/Down or 1-99

  DIM sReceive AS String
  DIM sItem AS String = "TV-Channel"

  SELECT CASE LCase(sState)
    CASE "1" TO "99"
      IF SendCheckResponse("DCCH" & sState) THEN
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending TV-Channel-Command to TV!"))
        RETURN FALSE
      ENDIF
    CASE "up"
      IF SendCheckResponse("CHUP") THEN
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending TV-Channel-UP-Command to TV!"))
        RETURN FALSE
      ENDIF
    CASE "down"
      IF SendCheckResponse("CHDW") THEN
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending TV-Channel-DOWN-Command to TV!"))
        RETURN FALSE
      ENDIF
  END SELECT

END

PRIVATE SUB DTVChannel(sState AS String) AS Variant
  ' command: CHUP/CHDW, DCCH (1-999 or 1-9999) for Digital TV channel
  ' call with TVChannel Up/Down or 1-999 or 1-9999

  DIM sReceive AS String
  DIM sItem AS String = "TV-Channel"

  SELECT CASE LCase(sState)
    CASE "1" TO "9999"
      IF SendCheckResponse("DTVD" & sState) THEN
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending DTV-Channel-Command to TV!"))
        RETURN FALSE
      ENDIF
    CASE "up"
      IF SendCheckResponse("DTUP") THEN
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending DTV-Channel-UP-Command to TV!"))
        RETURN FALSE
      ENDIF
   CASE "down"
      IF SendCheckResponse("DTDW") THEN
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending DTV-Channel-DOWN-Command to TV!"))
        RETURN FALSE
      ENDIF
  END SELECT

END

PRIVATE SUB Input(sState AS String) AS Variant
  ' command: see in code

  DIM sReceive AS String
  DIM sItem AS String = "Input"

  SELECT CASE LCase(sState)
    CASE "tv"
      ' switch to fixed TV Channel
      IF SendCheckResponse("ITVD") THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending ITVD-Command to TV!"))
      ENDIF
    CASE "dtv"
      ' switch to fixed Digital-TV Channel
      IF SendCheckResponse("IDTV") THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending IDTV-Command to TV!"))
      ENDIF
    CASE "1" TO "9"
      IF SendCheckResponse("IAVD" & sState) THEN
        SharpTVSetValue(sItem, sState)
        RETURN sState
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending IAVD-Command to TV!"))
      ENDIF
    CASE "?"
      sReceive = SendCmd("IAVD????")
      SharpTVSetValue(sItem, sReceive)
  END SELECT

END

PRIVATE SUB Mute(sState AS String) AS Variant
  ' ON/OFF (returns TRUE) or ? (returns the state)
  ' command = MUTE
  ' argument 1 = On, 2 = Off, ? = actual state (send ????), 0 = toggle (not implemented)

  DIM sReceive AS String
  DIM sItem AS String = "Mute"

  SELECT CASE LCase(sState)
    CASE "on"
      IF SendCheckResponse("MUTE1") THEN
        SharpTVSetValue(sItem, "On")
        RETURN "On"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Mute ON to TV!"))
      ENDIF
    CASE "off"
      IF SendCheckResponse("MUTE2") THEN
        SharpTVSetValue(sItem, "Off")
        RETURN "Off"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Mute OFF to TV!"))
      ENDIF
    CASE "?"
    sReceive = SendCmd("MUTE????")
    IF sReceive = "1" THEN
      SharpTVSetValue(sItem, "On")
      RETURN "On"
    ELSE IF sReceive = "2" THEN
      SharpTVSetValue(sItem, "Off")
      RETURN "Off"
    ELSE
      IF Main.bSharpTVDebug THEN Main.WriteLog(("[SharpTV] Received wrong answer for command Mute(?) (") & sReceive & ")")
    ENDIF
  END SELECT

END

PRIVATE SUB Surround(sState AS String) AS Variant
  ' ON/OFF (returns TRUE) or ? (returns the state ON or OFF)
  ' command = ACSU
  ' argument 1 = On, 2 = Off, ? = actual state (send ????), 0 = toggle (not implemented)

  DIM sReceive AS String
  DIM sItem AS String = "Surround"

  SELECT CASE LCase(sState)
    CASE "on"
      IF SendCheckResponse("ACSU1") THEN
        SharpTVSetValue(sItem, "On")
        RETURN "On"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Surround ON to TV!"))
      ENDIF
    CASE "off"
      IF SendCheckResponse("ACSU2") THEN
        SharpTVSetValue(sItem, "Off")
        RETURN "Off"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Surround OFF to TV!"))
      ENDIF
    CASE "?"
        sReceive = SendCmd("ACSU????")
      IF sReceive = "1" THEN
        SharpTVSetValue(sItem, "On")
        RETURN "On"
      ELSE IF sReceive = "2" THEN 
        SharpTVSetValue(sItem, "Off")
        RETURN "Off"
      ELSE
        IF Main.bSharpTVDebug THEN Main.WriteLog(("[SharpTV] Received wrong answer for command Surround(?) (") & sReceive & ")")
      ENDIF
  END SELECT

END

PRIVATE SUB Text(sState AS String) AS Variant
  ' command: TEXT for Teletext
  ' parameter: 1000 - 899 for page, 0 for off, 1 for on

  DIM sReceive AS String
  DIM sItem AS String = "Text"

  SELECT CASE LCase(sState)
    CASE "on"
      IF SendCheckResponse("TEXT1") THEN
        SharpTVSetValue(sItem, "On")
        RETURN "On"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Text ON to TV!"))
      ENDIF
    CASE "off"
      IF SendCheckResponse("TEXT0") THEN
        SharpTVSetValue(sItem, "Off")
        RETURN "Off"
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Text OFF to TV!"))
      ENDIF
    CASE "100" TO "899"
      IF SendCheckResponse("DCPG" & sState) THEN
        SharpTVSetValue(sItem, sState)
        RETURN TRUE
      ELSE
        IF bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Error sending Text-Command to TV!"))
        RETURN FALSE
      ENDIF
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' to control from xmlrpc or music page buttons
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SetCommand(sCmd AS String, sValue AS String, sAddress AS String)

  SELECT CASE LCase(sCmd)
    CASE "power"
      ' on,off
      Power(sValue)
    CASE "volume"
      ' 0-60
      Volume(sValue)
    CASE "mute"
      ' on,off
      Mute(sValue)
    CASE "avmode"
      ' 1-7,100
      AVMode(sValue)
    CASE "wide"
      ' 1-11
      Wide(sValue)
    CASE "input"
      ' tv,dtv,1-9
      Input(sValue)
    CASE "tvchannel"
      ' 1-99,up,down
      TVChannel(sValue)
    CASE "dtvchannel"
      ' 1-9999,up,down
      DTVChannel(sValue)
    CASE "surround"
      ' on,off
      Surround(sValue)
    CASE "text"
      ' on,off,100-899
      Text(sValue)
    CASE "cli"
      SendCmd(sValue)
    CASE ELSE
      IF Main.bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Unsupported command received: ") & sValue)
  END SELECT

END

PUBLIC SUB GetCommand(sCmd AS String, sAddress AS String) AS String

  ' ignore sAddress, only fixed unit
  SELECT CASE LCase(sCmd)
    CASE "power"
      RETURN Power("?")
    CASE "volume"
      RETURN Volume("?")
    CASE "mute"
      RETURN Mute("?")
    CASE "avmode"
      RETURN AVMode("?")
    CASE "wide"
      RETURN Wide("?")
    CASE "input"
      RETURN Input("?")
    CASE "surround"
      RETURN Surround("?")
    CASE ELSE
      IF Main.bSharpTVDebug THEN Main.WriteDebugLog(("[SharpTV] Unsupported get value received: ") & sCmd)
      RETURN ""
  END SELECT

END

PRIVATE SUB SharpTVSetValue(sItem AS String, vValue AS Variant)

  Main.SetGlobalVar("SharpTV_" & sItem, vValue)
  IF Main.bSharpTVDebug THEN Main.WriteLog(("[SharpTV] Received Item: ") & sItem & (" Value: ") & vValue)

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS Integer

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS Integer)

  iTCPPort = Value

END

PRIVATE FUNCTION SharpTVDebug_Read() AS Boolean

  RETURN bSharpTVDebug

END

PRIVATE SUB SharpTVDebug_Write(Value AS Boolean)

  bSharpTVDebug = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION SerPort_Read() AS String

  RETURN sSerPort

END

PRIVATE SUB SerPort_Write(Value AS String)

  sSerPort = Value

END

PRIVATE FUNCTION Interface_Read() AS String

  RETURN sInterface

END

PRIVATE SUB Interface_Write(Value AS String)

  sInterface = Value

END
