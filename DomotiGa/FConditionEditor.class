' Gambas class file

' Description:
' FConditionEditor.class
' Support for creating and edit event conditions.

' Development Status:
' Just started, not working 100% yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2010 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultDevices AS Result
PUBLIC bAddCondition AS Boolean
PRIVATE sVarCompare AS String
PRIVATE sDevCompare AS String
PUBLIC bConditionEdit AS Boolean

PUBLIC SUB Form_Open()

  DIM vValue AS Variant

  IF bAddCondition THEN ME.Text = ("Add Condition")
  ME.Move(FMain.X + 50, FMain.Y + 70)

  ' fill combo with available global vars
  cmbVariables.Add("")
  FOR EACH vValue IN Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  NEXT
  rbVarEqual_Click()
  ' fill combo with available devices
  cmbDevices.Add("")
  rResultDevices = Main.hDB.Exec("SELECT * FROM devices")
  IF rResultDevices THEN
    IF rResultDevices.Count THEN
      FOR EACH rResultDevices
        cmbDevices.Add(rResultDevices!name)
      NEXT
    END IF
  ELSE
    Message.Info(("Error: couldn't find devices details!"))
    RETURN
  END IF
  IF NOT bAddCondition THEN
    ' fetch condition details
    IF bConditionEdit THEN
      TRY rResult = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", FEvents.tbvEvents[FEvents.iCurRow, 0].Text)
    ELSE
      TRY rResult = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", FEventEditor.iCondition)
    ENDIF
    IF NOT rResult THEN
      Message.Info(("Error: couldn't find condition details!"))
      RETURN
    END IF
    IF rResult.Count = 1 THEN
      txtConditionName.Text = rResult!name
      txtDescription.Text = rResult!description
      ' preload controls to values from database
      SELECT rResult!type
        CASE 1 ' time now
          spbHours.Value = rResult!param1
          spbMinutes.Value = rResult!param2
        CASE 2 ' variable
          cmbVariables.Text = rResult!param1
          SelectVarCompare(rResult!param2)
          txtVariable.Text = rResult!param3
          cmbVariables_Click()
        CASE 3 ' device change
          TRY cmbDevices.Text = GetDeviceName(rResult!param1)
          TRY cmbValue.Text = rResult!param2
          SelectDevCompare(rResult!param3)
          TRY txtDevice.Text = rResult!param4
          cmbDevices_Click()
      END SELECT
      TRY tabConditionTypes.Index = rResult!type - 1
      tabConditionTypes.SetFocus()
    ELSE
      bAddCondition = TRUE
    END IF
  END IF
  IF txtConditionName.Text THEN EnableButtons()
END

PUBLIC SUB rbVarEqual_Click()

  sVarCompare = "="

END

PUBLIC SUB rbVarSmaller_Click()

  sVarCompare = "<"

END

PUBLIC SUB rbVarBigger_Click()

  sVarCompare = ">"

END

PUBLIC SUB rbVarUnEqual_Click()

  sVarCompare = "<>"

END

PUBLIC SUB rbVarMod_Click()

  sVarCompare = "MOD 0"

END

PUBLIC SUB txtTriggerName_Change()

  btnSave.Enabled = TRUE

END

PUBLIC SUB txtTriggerDescription_Change()

  btnSave.Enabled = TRUE

END

PUBLIC SUB tabTriggerTypes_Click()

  btnSave.Enabled = TRUE

END

PUBLIC SUB spbHours_Change()

  btnSave.Enabled = TRUE

END

PUBLIC SUB spbMinutes_Change()

  btnSave.Enabled = TRUE

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM iType AS Integer
  DIM sSql, sParam1, sParam2, sParam3, sParam4, sParam5 AS String

  IF NOT txtConditionName.Text THEN
    Balloon(("Please enter a name for this condition!"), txtConditionName)
    RETURN
  END IF

  IF NOT bAddCondition THEN
    ' name has changed
    IF rResult!name <> txtConditionName.Text THEN
      IF ConditionNameExist(txtConditionName.Text) THEN
        Balloon(("Please enter a unique name for this condition!"), txtConditionName)
        RETURN
      ENDIF
    ENDIF
  ENDIF

  iType = tabConditionTypes.Index + 1
  SELECT iType
    CASE 1
      sParam1 = Format(spbHours.Value, "0#")
      sParam2 = Format(spbMinutes.Value, "0#")
    CASE 2
      IF NOT cmbVariables.Text THEN
        Balloon(("Please select a variable!"), cmbVariables)
        RETURN
      END IF
      sParam1 = cmbVariables.Text
      sParam2 = sVarCompare
      IF NOT txtVariable.Text THEN
        Balloon(("Please enter a value to check!"), txtVariable)
        RETURN
      END IF
      sParam3 = txtVariable.Text
    CASE 3
      IF NOT cmbDevices.Text THEN
        Balloon(("Please select a device!"), cmbDevices)
        RETURN
      END IF
      sParam1 = GetDeviceId(cmbDevices.Text)
      IF NOT cmbValue.Text THEN
        Balloon(("Please select the field to check!"), txtDevice)
        RETURN
      END IF
      IF NOT cmbValue.Text THEN
        Balloon(("Please select a value to compare!"), cmbValue)
        RETURN
      END IF
      sParam2 = cmbValue.Text
      sParam3 = sDevCompare
      IF NOT txtDevice.Text THEN
        Balloon(("Please enter a value to check!"), txtDevice)
        RETURN
      END IF
      sParam4 = txtDevice.Text
  END SELECT

  IF bAddCondition THEN
    IF ConditionNameExist(txtConditionName.Text) THEN
      Balloon(("Please enter a unique name for this condition!"), txtConditionName)
      RETURN
    ENDIF
    Main.hDB.Begin()
    rResult = Main.hDB.Create("conditions")
    rResult!name = txtConditionName.Text
    rResult!description = txtDescription.Text
    rResult!type = iType
    rResult!param1 = sParam1
    rResult!param2 = sParam2
    rResult!param3 = sParam3
    rResult!param4 = sParam4
    rResult!param5 = sParam5
    rResult.Update()
    Main.hDB.Commit()
  ELSE
    ' save new trigger settings
    sSql = "UPDATE conditions SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7, description = &8 WHERE id = &9"
    TRY rResultUpdate = Main.hDB.Exec(sSql, txtConditionName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, txtDescription.Text, rResult!id)
  ENDIF

  IF FEventEditor.Id THEN
    IF FEventEditor.iEditingCondition = 1 THEN
      FEventEditor.GetConditions(FEventEditor.cmbCondition1)
      FEventEditor.cmbCondition1.Text = txtConditionName.Text
    ENDIF
    IF FEventEditor.iEditingCondition = 2 THEN
      FEventEditor.GetConditions(FEventEditor.cmbCondition2)
      FEventEditor.cmbCondition2.Text = txtConditionName.Text
    ENDIF
  ENDIF

  bAddCondition = FALSE
  ME.Close

END

PUBLIC SUB btnNewCondition_Click()

  bAddCondition = TRUE
  btnSave_Click()

END

PUBLIC SUB btnCancel_Click()

  ME.Close

END

PRIVATE SUB ConditionNameExist(sName AS String) AS Boolean

  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  IF rResultCondition THEN
    IF rResultCondition.Count THEN
      RETURN TRUE
    END IF
  END IF
  RETURN FALSE

END

PRIVATE SUB SelectVarCompare(sValue AS String)

  SELECT sValue
    CASE "="
      rbVarEqual.Value = TRUE
    CASE "<"
      rbVarSmaller.Value = TRUE
    CASE ">"
      rbVarBigger.Value = TRUE
    CASE "<>"
      rbVarUnEqual.Value = TRUE
    CASE "MOD 0"
      rbVarMod.Value = TRUE
  END SELECT

END

PUBLIC SUB cmbVariables_Click()

  IF cmbVariables.Text THEN
    IF IsBoolean(Main.GlobalVar[cmbVariables.Text]) THEN
      txtVariableValue.Text = Main.DisplayBool(Main.GlobalVar[cmbVariables.Text])
      rbVarSmaller.Enabled = FALSE
      rbVarBigger.Enabled = FALSE
      rbVarMod.Enabled = FALSE
    ELSE IF NOT IsNumber(Main.GlobalVar[cmbVariables.Text]) THEN
      rbVarSmaller.Enabled = FALSE
      rbVarBigger.Enabled = FALSE
      rbVarMod.Enabled = FALSE
      txtVariableValue.Text = Main.GlobalVar[cmbVariables.Text]
    ELSE IF NOT Main.IsTime(Main.GlobalVar[cmbVariables.Text]) THEN
      rbVarMod.Enabled = FALSE
      txtVariableValue.Text = Main.GlobalVar[cmbVariables.Text]
    ELSE
      txtVariableValue.Text = Main.GlobalVar[cmbVariables.Text]
    END IF
  END IF

END

PUBLIC SUB GetDeviceName(iId AS Integer) AS String

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!name
    END IF
  END IF
  RETURN ""

END

PUBLIC SUB GetDeviceId(sName AS String) AS Integer

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sName)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!id
    END IF
  END IF
  RETURN 0

END

PRIVATE SUB SelectDevCompare(sValue AS String)

  SELECT sValue
    CASE "="
      rbDevEqual.Value = TRUE
    CASE "<"
      rbDevSmaller.Value = TRUE
    CASE ">"
      rbDevBigger.Value = TRUE
    CASE "<>"
      rbDevUnEqual.Value = TRUE
  END SELECT

END

PUBLIC SUB rbDevEqual_Click()

  sDevCompare = "="

END

PUBLIC SUB rbDevSmaller_Click()

  sDevCompare = "<"

END

PUBLIC SUB rbDevBigger_Click()

  sDevCompare = ">"

END

PUBLIC SUB rbDevUnEqual_Click()

  sDevCompare = "<>"

END

PUBLIC SUB cmbDevices_Click()

  DIM iId AS Integer

  IF cmbValue.Text AND cmbDevices.Text THEN 
    iId = GetDeviceId(cmbDevices.Text)
    IF iId THEN
      SELECT cmbValue.Text
        CASE "Value"
          txtDeviceValue.Text = Devices.GetCurrentValueForDevice(iId)
        CASE "Value2"
          txtDeviceValue.Text = Devices.GetCurrentValue2ForDevice(iId)
        CASE "Value3"
          txtDeviceValue.Text = Devices.GetCurrentValue3ForDevice(iId)
        CASE "Value4"
          txtDeviceValue.Text = Devices.GetCurrentValue3ForDevice(iId)
      END SELECT
    END IF
    IF NOT IsNumber(txtDeviceValue.Text) THEN
      rbDevBigger.Enabled = FALSE
      rbDevSmaller.Enabled = FALSE
    ELSE
      rbDevBigger.Enabled = TRUE
      rbDevSmaller.Enabled = TRUE
    END IF
  END IF

END

PUBLIC SUB cmbValue_Click()

  cmbDevices_Click()

END

PRIVATE SUB EnableButtons()

  btnSave.Enabled = TRUE
  btnDeleteCondition.Enabled = TRUE
  btnNewCondition.Enabled = TRUE

END

PUBLIC SUB txtConditionName_Change()

  EnableButtons()

END

PUBLIC SUB btnDeleteCondition_Click()

  DIM iId AS Integer

  SELECT Message.Question(("Are you sure that you want to delete this condition?"), ("Yes"), ("No"))
    CASE 1
      iId = GetConditionId(txtConditionName.Text) 
      IF iId THEN
        Main.hDB.Exec("DELETE FROM conditions WHERE id = &1", iId)
      END IF
      IF FEventEditor.Id THEN
        IF FEventEditor.iEditingCondition = 1 THEN
          FEventEditor.GetConditions(FEventEditor.cmbCondition1)
        ENDIF
        IF FEventEditor.iEditingCondition = 2 THEN
          FEventEditor.GetConditions(FEventEditor.cmbCondition2)
        ENDIF
      ENDIF
      ME.Close
  END SELECT

END

PRIVATE SUB GetConditionId(sName AS String) AS Integer

  DIM rResultCond AS Result

  rResultCond = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  TRY RETURN rResultCond!id

END

PUBLIC SUB txtDescription_KeyPress()

  btnSave.Enabled = TRUE

END
