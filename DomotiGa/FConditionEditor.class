' Gambas class file

' Description:
' FConditionEditor.class
' Support for creating and edit event conditions.

' Development Status:
' Just started, not working 100% yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2010 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultDevices AS Result
PUBLIC bAddCondition AS Boolean
PRIVATE sVarCompare AS String
PRIVATE sDevCompare AS String
PUBLIC bConditionEdit AS Boolean
PUBLIC tMessage AS NEW Timer

PUBLIC SUB Form_Open()

  DIM vValue AS Variant

  LoadTreeView()

  IF bAddCondition THEN ME.Text = ("Create Condition")
  ME.Move(FMain.X + 50, FMain.Y + 70)

  IF NOT bAddCondition THEN
    ' fetch condition details
    IF bConditionEdit THEN
      TRY rResult = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", FEvents.txtCurEvent)
    ELSE
      TRY rResult = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", FEventEditor.iCondition)
    ENDIF
    IF NOT rResult THEN
      Message.Info(("Error: couldn't find condition details!"))
      RETURN
    ENDIF
    IF rResult.Count = 1 THEN
      txtConditionName.Text = rResult!name
      txtDescription.Text = rResult!description
      taFormula.Text = rResult!formula
    ELSE
      bAddCondition = TRUE
    ENDIF
  ENDIF
  IF txtConditionName.Text THEN EnableButtons()

  tMessage = NEW Timer AS "tMessage"
  tMessage.Delay = 3000 ' 3 seconds
  tMessage.Stop

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM sSql AS String

  IF NOT txtConditionName.Text THEN
    Balloon(("Please enter a name for this condition!"), txtConditionName)
    RETURN
  END IF

  IF NOT bAddCondition THEN
    ' name has changed
    IF rResult!name <> txtConditionName.Text THEN
      IF ConditionNameExist(txtConditionName.Text) THEN
        Balloon(("Please enter a unique name for this condition!"), txtConditionName)
        RETURN
      ENDIF
    ENDIF
  ENDIF

  ' here we check the formula value
  IF NOT (Main.IsBool(Events.EvalFormula(taFormula.Text))) THEN
    Balloon(("Please enter a boolean expression"), taFormula)
    RETURN
  ENDIF

  IF bAddCondition THEN
    IF ConditionNameExist(txtConditionName.Text) THEN
      Balloon(("Please enter a unique name for this condition!"), txtConditionName)
      RETURN
    ENDIF
    Main.hDB.Begin()
    rResult = Main.hDB.Create("conditions")
    rResult!name = txtConditionName.Text
    rResult!description = txtDescription.Text
    rResult!formula = taFormula.Text
    rResult.Update()
    Main.hDB.Commit()
  ELSE
    ' save new trigger settings
    sSql = "UPDATE conditions SET name = &1, formula = &2, description = &3 WHERE id = &4"
    TRY rResultUpdate = Main.hDB.Exec(sSql, txtConditionName.Text, taFormula.Text, txtDescription.Text, rResult!id)
  ENDIF

  IF FEventEditor.Id THEN
    IF FEventEditor.iEditingCondition = 1 THEN
      FEventEditor.GetConditions(FEventEditor.cmbCondition1)
      FEventEditor.cmbCondition1.Text = txtConditionName.Text
    ENDIF
    IF FEventEditor.iEditingCondition = 2 THEN
      FEventEditor.GetConditions(FEventEditor.cmbCondition2)
      FEventEditor.cmbCondition2.Text = txtConditionName.Text
    ENDIF
  ENDIF

  bAddCondition = FALSE
  ME.Close

END

PUBLIC SUB btnNewCondition_Click()

  bAddCondition = TRUE
  btnSave_Click()

END

PUBLIC SUB btnCancel_Click()

  ME.Close

END

PRIVATE SUB ConditionNameExist(sName AS String) AS Boolean

  DIM rResultCondition AS Result

  rResultCondition = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  IF rResultCondition THEN
    IF rResultCondition.Count THEN
      RETURN TRUE
    ENDIF
  ENDIF
  RETURN FALSE

END

PRIVATE SUB EnableButtons()

  btnSave.Enabled = TRUE
  btnDeleteCondition.Enabled = TRUE
  btnNewCondition.Enabled = TRUE

END

PUBLIC SUB txtConditionName_Change()

  EnableButtons()

END

PUBLIC SUB btnDeleteCondition_Click()

  DIM iId AS Integer

  SELECT Message.Question(("Are you sure that you want to delete this condition?"), ("Yes"), ("No"))
    CASE 1
      iId = GetConditionId(txtConditionName.Text)
      IF iId THEN
        Main.hDB.Exec("DELETE FROM conditions WHERE id = &1", iId)
      END IF
      IF FEventEditor.Id THEN
        IF FEventEditor.iEditingCondition = 1 THEN
          FEventEditor.GetConditions(FEventEditor.cmbCondition1)
        ENDIF
        IF FEventEditor.iEditingCondition = 2 THEN
          FEventEditor.GetConditions(FEventEditor.cmbCondition2)
        ENDIF
      ENDIF
      ME.Close
  END SELECT

END

PRIVATE SUB GetConditionId(sName AS String) AS Integer

  DIM rResultCond AS Result

  rResultCond = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  TRY RETURN rResultCond!id

END

PUBLIC SUB txtDescription_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB taFormula_Change()

  btnSave.Enabled = TRUE

END

PUBLIC SUB LoadVariables(sParent AS String)  

  DIM vValue AS Variant

  tvVariables.Add(Left(sParent, 3), sParent)
  FOR EACH vValue IN Main.GlobalVar
    LoadItem(Main.GlobalVar.Key, Main.GlobalVar.Key, Left(sParent, 3))
  NEXT

END

PUBLIC SUB LoadDevices(sParent AS String)

  DIM iCount AS Integer
  DIM rResult AS Result
  DIM sSql AS String

  tvVariables.Add(Left(sParent, 3), sParent)

  sSql = "SELECT * FROM devices WHERE enabled IS TRUE ORDER BY name"
  rResult = Main.hDB.Exec(sSql)
  IF NOT rResult THEN
    LoadItem("ERROR", "Error: table 'devices' not found!", Left(sParent, 3))
    RETURN
  END IF

  FOR iCount = 0 TO rResult.Max
    tvVariables.Add(Left(sParent, 3) & "_" & rResult!id, rResult!name & " (" & rResult!id & ")",, Left(sParent, 3))
    LoadItem("Value", "Value", Left(sParent, 3) & "_" & rResult!id)
    LoadItem("Value2", "Value2", Left(sParent, 3) & "_" & rResult!id)
    LoadItem("Value3", "Value3", Left(sParent, 3) & "_" & rResult!id)
    LoadItem("Value4", "Value4", Left(sParent, 3) & "_" & rResult!id)
    LoadItem("LastChanged", "LastChanged", Left(sParent, 3) & "_" & rResult!id)
    LoadItem("LastSeen", "LastSeen", Left(sParent, 3) & "_" & rResult!id)
    LoadItem("BatteryStatus", "BatteryStatus", Left(sParent, 3) & "_" & rResult!id)
    rResult.MoveNext
  NEXT

END

PUBLIC SUB LoadFunctions(sParent AS String)

  DIM sSubText, sSubKey AS String

  tvVariables.Add(Left(sParent, 3), sParent)

  LoadItem("if", "If(<Cond>, <TrueExpr>, <FalseExpr>)", Left(sParent, 3))

  sSubText = "Math"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("max", "Max(<Expr>, <Expr>)", sSubKey)
  LoadItem("min", "Min(<Expr>, <Expr>)", sSubKey)
  LoadItem("abs", "Abs(<Expr>)", sSubKey)
  LoadItem("frac", "Frac(<Expr>)", sSubKey)
  LoadItem("int", "Int(<Expr>)", sSubKey)
  LoadItem("sgn", "Sgn(<Expr>)", sSubKey)
  LoadItem("round", "Round(<Expr>)", sSubKey)
  LoadItem("rnd", "Rnd([<Min>], [<Max>])", sSubKey)

  sSubText = "Date"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("time", "Time(<Hours>, <Minutes>, <Seconds>)", sSubKey)
  LoadItem("date", "Date(<Year>, <Month>, <Day>)", sSubKey)
  LoadItem("now", "Now()", sSubKey)
  LoadItem("second", "Second(<Date>)", sSubKey)
  LoadItem("minute", "Minute(<Date>)", sSubKey)
  LoadItem("hour", "Hour(<Date>)", sSubKey)
  LoadItem("day", "Day(<Date>)", sSubKey)
  LoadItem("week", "Week(<Date>)", sSubKey)
  LoadItem("weekday", "WeekDay(<Date>)", sSubKey)
  LoadItem("month", "Month(<Date>)", sSubKey)
  LoadItem("quarter", "Quarter(<Date>)", sSubKey)
  LoadItem("year", "Year(<Date>)", sSubKey)
  LoadItem("datediff", "DateDiff(<Date1>, <Date2>, <Period>)", sSubKey)
  LoadItem("dateadd", "DateAdd(<Date>, <Period>, <Count>)", sSubKey)

  sSubText = "Period"
  tvVariables.Add(sSubKey & "_" & sSubText, sSubText,, sSubKey)
  sSubKey = sSubKey & "_" & sSubText
  LoadItem("gbsecond", "gb.Second", sSubKey)
  LoadItem("gbminute", "gb.Minute", sSubKey)
  LoadItem("gbhour", "gb.Hour", sSubKey)
  LoadItem("gbday", "gb.Day", sSubKey)
  LoadItem("gbweek", "gb.Week", sSubKey)
  LoadItem("gbweekday", "gb.WeekDay", sSubKey)
  LoadItem("gbmonth", "gb.Month", sSubKey)
  LoadItem("gbquarter", "gb.Quarter", sSubKey)
  LoadItem("gbyear", "gb.Year", sSubKey)

  sSubText = "String"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("left", "Left(<Expr>, <Length>)", sSubKey)
  LoadItem("right", "Right(<Expr>, <Length>)", sSubKey)
  LoadItem("mid", "Mid(<Expr>, <Start>, <Length>)", sSubKey)
  LoadItem("trim", "Trim(<Expr>)", sSubKey)
  LoadItem("replace", "Replace(<Expr>, <Pattern>, <ReplaceString>)", sSubKey)
  LoadItem("len", "Len(<Expr>)", sSubKey)
  LoadItem("format", "Format(<Expr>, [<Format>])", sSubKey)

  sSubText = "Conversion"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("cfloat2", "CFloat(Replace(<Expr>, \", \", \".\", gb.String))", sSubKey)
  LoadItem("cbool", "CBool(<Expr>)", sSubKey)
  LoadItem("cdate", "CDate(<Expr>)", sSubKey)
  LoadItem("cfloat", "CFloat(<Expr>)", sSubKey)
  LoadItem("cint", "CInt(<Expr>)", sSubKey)
  LoadItem("cstr", "CStr(<Expr>)", sSubKey)

END

PUBLIC SUB LoadOperators(sParent AS String)

  tvVariables.Add(Left(sParent, 3), sParent)
  LoadItem("=", "=", Left(sParent, 3))
  LoadItem("<=", "<=", Left(sParent, 3))
  LoadItem(">=", ">=", Left(sParent, 3))
  LoadItem("<>", "<>", Left(sParent, 3))
  LoadItem("==", "==", Left(sParent, 3))
  LoadItem("(", "(", Left(sParent, 3))
  LoadItem(")", ")", Left(sParent, 3))
  LoadItem("And", "And", Left(sParent, 3))
  LoadItem("Or", "Or", Left(sParent, 3))
  LoadItem("Not", "Not", Left(sParent, 3))

END

PUBLIC SUB LoadItem(sKey AS String, sText AS String, sParent AS String)

  tvVariables.Add(sParent & "_" & sKey, sText,, sParent)

END

PUBLIC SUB LoadActions(sParent AS String)

  DIM sSubText, sSubKey AS String

  tvVariables.Add(Left(sParent, 3), sParent)

  sSubText = "Devices"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("devices.valueupdate", "Devices.ValueUpdate(<Id>, <Value1>, <Value2>, <Value3>, <Value4>)", sSubKey)
  LoadItem("devices.setdevice", "Devices.SetDevice(<DeviceName>, <Value>)", sSubKey)

  sSubText = "Messaging"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("twitter.posttweet", "Twitter.PostTweet(<Msg>)", sSubKey)
  LoadItem("mail", "Mail.SendMail(<Subject>, <Body>, OPTIONAL <To>)", sSubKey)

  sSubText = "Status"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("devices.mailbatterystatus", "Devices.MailBatteryStatus([all|empty])", sSubKey)

END

PUBLIC SUB LoadTreeView()

  tvVariables.Clear
  LoadVariables("Variables")
  LoadDevices("Devices")
  LoadFunctions("Functions")
  LoadOperators("Operators")
  LoadActions("Actions")

END

PUBLIC SUB btnAdd_Click()

  tvVariables_DblClick

END

PUBLIC SUB tvVariables_Click()

  DIM vVal AS Variant
  DIM sVal AS String
  DIM aScan AS String[]

  IF tvVariables.Current.Children = 0 THEN
    IF Left(tvVariables.Current.Key, 3) = "Var" THEN
      ' here the variable value is fetched
      TRY vVal = Main.GlobalVar[Right(tvVariables.Current.Key, Len(tvVariables.Current.Key) - 4)]
      IF gb.Boolean = TypeOf(vVal) THEN
        sVal = Main.DisplayBool(vVal)
      ELSE
        sVal = vVal
      ENDIF
      txtCurrentValue.Text = sVal
    ELSE IF Left(tvVariables.Current.Key, 3) = "Dev" THEN
      ' here the device value is fetched
      aScan = Split(tvVariables.Current.Key, "_")
      IF aScan.Count = 3 THEN
        SELECT aScan[2]
          CASE "Value"
            TRY txtCurrentValue.Text = Devices.GetCurrentValueForDevice(aScan[1], 1)
          CASE "Value2"
            TRY txtCurrentValue.Text = Devices.GetCurrentValueForDevice(aScan[1], 2)
          CASE "Value3"
            TRY txtCurrentValue.Text = Devices.GetCurrentValueForDevice(aScan[1], 3)
          CASE "Value4"
            TRY txtCurrentValue.Text = Devices.GetCurrentValueForDevice(aScan[1], 4)
          CASE "LastChanged"
            TRY txtCurrentValue.Text = Devices.GetLastChangedForDevice(aScan[1])
          CASE "LastSeen"
            TRY txtCurrentValue.Text = Devices.GetLastSeenForDevice(aScan[1])
          CASE "BatteryStatus"
            TRY txtCurrentValue.Text = Devices.GetBatteryStatusForDevice(aScan[1])
        END SELECT
      ENDIF
    ENDIF
  ENDIF

END

PUBLIC SUB tvVariables_DblClick()

  DIM sVal AS String

  IF tvVariables.Current.Children = 0 THEN
    IF Left(tvVariables.Current.Key, 3) = "Var" THEN
      ' here a Variable is added to the formula
      sVal = tvVariables.Current.Key
    ELSE IF Left(tvVariables.Current.Key, 3) = "Dev" THEN
      ' here a Device value is added to the formula
      sVal = tvVariables.Current.Key
    ELSE
      sval = tvVariables.Current.Text
    ENDIF
    taFormula.Insert(sVal)
  ENDIF

END

PUBLIC SUB btnEval_Click()

  DIM sToEval AS String

  ' if a part of the formula is selected, we only elvaluate this part
  IF taFormula.Selection.Length = 0 THEN
    sToEval = taFormula.Text
  ELSE
    sToEval = taFormula.Selection.Text
  ENDIF

  txtEvalResult.Text = Events.EvalFormula(sToEval)
  tMessage.Start

END

PUBLIC SUB btnClear_Click()

  taFormula.Clear

END

PUBLIC SUB tMessage_Timer()

  txtEvalResult.Text = ""
  tMessage.Stop

END
