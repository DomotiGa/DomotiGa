' Gambas class file

' Description:
' FThermostatProfileEditor.class
' Thermostat profile editor.

' Development Status:
' Beta.

' Credits: This module is build by Francois.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PRIVATE Profiles AS NEW Collection
PRIVATE barWidth AS Integer
PRIVATE graphHeight AS Integer
PRIVATE graphWidth AS Integer
PRIVATE graphTop AS Integer
PRIVATE graphBottom AS Integer
PRIVATE graphLeft AS Integer
PRIVATE graphRight AS Integer
PRIVATE barVStepSize AS Integer
PRIVATE tempMax AS Integer
PRIVATE selectedProfile AS String
PRIVATE picGraph AS Picture

PRIVATE IconBarWidth AS Integer
PRIVATE IconGraphHeight AS Integer
PRIVATE IconGraphWidth AS Integer
PRIVATE IconGraphTop AS Integer
PRIVATE IconGraphBottom AS Integer
PRIVATE IconGraphLeft AS Integer
PRIVATE IconGraphRight AS Integer
PRIVATE IconBarVStepSize AS Integer

PUBLIC SUB _new(...)

  InitVar()
  InitProfile()

END

PUBLIC SUB InitVar()

  graphHeight = graph.Height - 50 - 24
  graphWidth = graph.Width - 50
  graphTop = 25
  graphLeft = 45
  graphBottom = graphTop + graphHeight
  graphRight = graphLeft + graphWidth
  barWidth = (graphWidth / 24)
  barVStepSize = graphHeight / 25
  tempMax = 25

  IconGraphHeight = 27 - 2
  IconGraphWidth = 50 - 2
  IconGraphTop = 1
  IconGraphLeft = 1
  IconGraphBottom = IconGraphTop + IconGraphHeight
  IconGraphRight = IconGraphLeft + IconGraphWidth
  IconBarWidth = (IconGraphWidth / 24)
  IconBarVStepSize = IconGraphHeight / 25

END

PUBLIC SUB Form_Open()

  ME.Move(FMain.X + 50, FMain.Y + 70)
  InitVar()
  InitProfile()
  InitAxis()
  FillProfileList()

END

PRIVATE SUB InitProfile()

  DIM rResult AS Result
  DIM aTemperatures AS String[24]
  DIM sVal AS String
  DIM iCnt AS Integer

  TRY rResult = Main.hDB.Exec("SELECT * FROM temperature_profile")
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        iCnt = 0
        Profiles[rResult!name] = NEW Integer[24]
        aTemperatures = Split(Trim(rResult!values), " ")
        FOR EACH sVal IN aTemperatures
          Profiles[rResult!name][iCnt] = CInt(sVal)
          INC iCnt
        NEXT
      NEXT
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Main] Temperature profile restored."))
    ENDIF
  ENDIF

END

PRIVATE SUB InitAxis()

  DIM iHour, iCnt AS Integer
  DIM s AS Separator
  DIM c AS CheckBox
  DIM l AS Label
  DIM iCheckBoxW AS Integer = 13

  Graph.Clear
  Draw.Begin(Graph)

  FOR iHour = 0 TO 23
    Draw.Text(iHour, iHour * (barWidth) + graphLeft, graphBottom)
  NEXT

  FOR iCnt = 0 TO tempMax - 1
    Draw.Text(tempMax - iCnt, 8, iCnt * barVStepSize + graphTop)
  NEXT

  Draw.Line(graphLeft, 15 * barVStepSize + graphTop, graphRight, 15 * barVStepSize + graphTop)
  Draw.Line(graphLeft, 5 * barVStepSize + graphTop, graphRight, 5 * barVStepSize + graphTop)
  Draw.End
  l = NEW Label(HBoxLocal)
  l.AutoResize = TRUE
  l.Text = "Local"
  HBoxLocal.X = graphLeft - (barWidth - iCheckBoxW) / 2 - l.Width
  HBoxLocal.Width = graph.Width - HBoxLocal.X - 1
  s = NEW Separator(HBoxLocal)
  s.Width = barWidth - iCheckBoxW
  s.Height = 21
  FOR iHour = 0 TO 23
    c = NEW CheckBox(HBoxLocal)
    c.Width = iCheckBoxW
    c.Action = CStr(iHour)
    s = NEW Separator(HBoxLocal)
    s.Width = barWidth - iCheckBoxW
    s.Height = 21
  NEXT

END

PRIVATE SUB FillProfileList()

  FOR EACH Profiles
    lvwProfile.Add(Profiles.key, Profiles.key, GetProfilePicture(Profiles.key))
  NEXT

  IF Profiles.Count THEN
    lvwProfile.MoveFirst()
    lvwProfile.Item.Selected = TRUE
    selectedProfile = lvwProfile.Item.key
    DrawProfile(selectedProfile)
  ENDIF

END

PRIVATE SUB DrawBar(iHour AS Integer, temperature AS Integer)

  DIM c AS CheckBox
  DIM s AS String
  DIM box AS Integer

  c = HBoxLocal.Children[iHour * 2 + 2]
  s = c.Action
  c.Action = NULL ' prevent action sending
  c.Value = If(temperature > 0, FALSE, TRUE)
  c.Action = s

  IF temperature > 0 THEN
    Draw.FillColor = Color.White
    Draw.Rect(iHour * (barWidth) + graphLeft, graphHeight + graphTop, barWidth - 1, - graphHeight)
    FOR box = 1 TO temperature
      Draw.FillColor = Color.RGB((box - 10) * 10 + 105, 0, box * 15 + 100)
      Draw.Rect(iHour * (barWidth) + graphLeft, (tempMax - box) * barVStepSize + graphTop, barWidth - 1, barVStepSize - 1)
    NEXT
  ELSE
    Draw.FillColor = Color.LightGray
    Draw.Rect(iHour * (barWidth) + graphLeft, graphHeight + graphTop, barWidth - 1, - graphHeight)
  ENDIF
  Draw.Line(graphLeft, 15 * barVStepSize + graphTop, graphRight, 15 * barVStepSize + graphTop)
  Draw.Line(graphLeft, 5 * barVStepSize + graphTop, graphRight, 5 * barVStepSize + graphTop)

END

PRIVATE SUB DrawProfile(profileName AS String)

  DIM iHour AS Integer

  Draw.Begin(graph)
  Draw.FillStyle = TRUE
  FOR iHour = 0 TO 23
    DrawBar(iHour, Profiles[profileName][iHour])
  NEXT
  Draw.End

END

PUBLIC SUB GetProfilePicture(profileName AS String) AS Picture

  DIM iHour AS Integer

  picGraph = NEW Picture(50, 27)
  picGraph.Fill(Color.white)
  IF Profiles.Exist(profileName)
    Draw.Begin(picGraph)
    Draw.FillStyle = TRUE
    FOR iHour = 0 TO 23
      DrawBarPicture(iHour, Profiles[profileName][iHour])
    NEXT
    Draw.End
  ENDIF
  RETURN picGraph

END

PRIVATE SUB DrawBarPicture(iHour AS Integer, iTemp AS Integer)

  IF iTemp > 0 THEN
    Draw.FillColor = Color.Red
    Draw.ForeColor = Color.Red
    Draw.Rect(iHour * IconBarWidth + IconGraphLeft, IconGraphHeight + IconGraphTop, IconBarWidth, (tempMax - iTemp) * IconBarVStepSize - IconGraphHeight)
  ELSE
    Draw.FillColor = Color.LightGray
    Draw.ForeColor = Color.LightGray
    Draw.Rect(iHour * IconBarWidth + IconGraphLeft, IconGraphHeight + IconGraphTop, IconBarWidth, - IconGraphHeight)
  ENDIF

END

PUBLIC SUB Graph_MouseMove()

  DIM iHour, iStartHour, iLastHour, iTemp AS Integer

  IF lvwProfile.Current THEN
    iHour = (Mouse.X - graphLeft) / (barWidth)
    iStartHour = (Mouse.StartX - graphLeft) / (barWidth)
    iTemp = tempMax - (Mouse.Y - graphTop) / (barVStepSize) + 1
    Draw.Begin(graph)
    Draw.FillStyle = TRUE
    IF iHour >= 0 AND iHour < 24 AND iTemp > 0 AND iTemp < 26 THEN
      DrawBar(iHour, iTemp)
      IF iTemp < 25 THEN Draw.Text(iTemp, iHour * (barWidth) + graphLeft + 2, (tempMax - iTemp) * barVStepSize + graphTop - 20)
      Profiles[selectedProfile][iHour] = iTemp
    ENDIF
    Draw.End
  ENDIF

END

PUBLIC SUB Graph_MouseUp()

  DIM iHour, iTemp AS Integer

  IF lvwProfile.Current THEN
    iHour = (Mouse.X - graphLeft) / (barWidth)
    iTemp = tempMax - (Mouse.Y - graphTop) / (barVStepSize) + 1
    Draw.Begin(graph)
    Draw.FillStyle = TRUE
    IF iHour >= 0 AND iHour < 24 AND iTemp > 0 AND iTemp < 26 THEN
      DrawBar(iHour, iTemp)
      Profiles[selectedProfile][iHour] = iTemp
      lvwProfile.Current.Picture = GetProfilePicture(selectedProfile)
    ENDIF
    Draw.End
  ENDIF

END

PUBLIC SUB btnAdd_Click()

  DIM sProfileName AS String
  DIM iCnt AS Integer

  DO
    sProfileName = "profile " & (lvwProfile.Count + iCnt)
    INC iCnt
    TRY lvwProfile.Add(sProfileName, sProfileName)
  LOOP UNTIL ERROR = FALSE

  lvwProfile.Item.Selected = TRUE
  selectedProfile = sProfileName
  IF NOT Profiles[selectedProfile] THEN Profiles[selectedProfile] = NEW Integer[24]
  Profiles[selectedProfile].Fill(1)
  DrawProfile(selectedProfile)
  lvwProfile.Current.Picture = GetProfilePicture(selectedProfile)

END

PUBLIC SUB lvwProfile_Click()

  selectedProfile = lvwProfile.Current.Key
  IF NOT Profiles[selectedProfile] THEN Profiles[selectedProfile] = NEW Integer[24]
  DrawProfile(selectedProfile)

END

PUBLIC SUB btnDelete_Click()

  IF lvwProfile.Current THEN
    Profiles.Remove(lvwProfile.Current.Key)
    lvwProfile.Current.Delete()
    IF lvwProfile.Current THEN
      selectedProfile = lvwProfile.Current.Key
      lvwProfile.Current.Selected = TRUE
      DrawProfile(selectedProfile)
    ELSE
      selectedProfile = ""
      Graph.Clear
      InitAxis()
    ENDIF
  ENDIF

END

PUBLIC SUB btnSave_Click()

  DIM sProfile AS String
  DIM iProfile AS Integer[]
  DIM rResult AS Result
  DIM iVal AS Integer
  DIM tableProfiles AS Table

  ' delete complete history
  TRY Main.hDB.Tables.Remove("temperature_profile")
  ' recreate empty one
  tableProfiles = Main.hDB.Tables.Add("temperature_profile")
  tableProfiles.Fields.Add("id", db.Serial)
  tableProfiles.Fields.Add("name", db.String, 64)
  tableProfiles.Fields.Add("values", db.String, 0)
  tableProfiles.PrimaryKey = ["id"]
  tableProfiles.Update()

  FOR EACH iProfile IN Profiles
    sProfile = ""
    Main.hDB.Begin()
    rResult = Main.hDB.Create("temperature_profile")
    rResult!name = lvwProfile[Profiles.Key].Text
    FOR EACH iVal IN iProfile
      IF iVal < 10 AND iVal > 0 THEN
        sProfile = sProfile & "0" & iVal & " "
      ELSE
        sProfile = sProfile & iVal & " "
      ENDIF
    NEXT
    rResult!values = Trim(sProfile)
    rResult.Update()
    Main.hDB.Commit()
  NEXT
  ME.Close()

END

PUBLIC SUB btnCancel_Click()

  ME.Close()

END

PUBLIC SUB Action_Activate(key AS String) AS Boolean

  IF Profiles[selectedProfile][CInt(key)] > 0 THEN
    Profiles[selectedProfile][CInt(key)] = -1
  ELSE
    Profiles[selectedProfile][CInt(key)] = 1
  ENDIF

  Draw.Begin(Graph)
  Draw.FillStyle = TRUE
  DrawBar(CInt(key), Profiles[selectedProfile][CInt(key)])
  Draw.End()
  lvwProfile.Current.Picture = GetProfilePicture(selectedProfile)

CATCH

END
