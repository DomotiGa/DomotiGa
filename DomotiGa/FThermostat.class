' Gambas class file

' Description:
' FThermostat.class
' Thermostat management functions.

' Development Status:
' Beta.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE tRefresh AS NEW Timer
PRIVATE bAutoRefresh AS Boolean
PRIVATE iTable AS Integer = 1
PUBLIC txtCurTherm AS String
PUBLIC txtCurThermAux AS String 

PRIVATE bCmbSCenarioLoading AS Boolean = FALSE 

PUBLIC SUB Form_Open()

  btnOverview.Enabled = FALSE
  GetThermList()

  ' create refresh timer
  tRefresh = NEW Timer AS "tRefresh"
  tRefresh.Delay = 3000 ' 3 seconds

END

PUBLIC SUB tbvTherm_ColumnClick(Column AS Integer)

  Main.SortTableView(FThermostat.tbvTherm, Column, TRUE)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRefresh_Timer()

  GetThermList()

END

PUBLIC SUB Form_Close()

  tRefresh.Stop

END

PUBLIC SUB Form_LostFocus()

  tRefresh.Stop

END

PUBLIC SUB Form_GotFocus()

  IF bAutoRefresh THEN tRefresh.Enabled = TRUE

END

PUBLIC SUB GetThermList()

  DIM iRows, iCount, i AS Integer
  DIM fTemp AS Float
  DIM rResult, rResultDetail AS Result
  DIM hObj, hSubObj AS Object

  INC Application.Busy

  Form_Resize()

  tbvTherm.Clear
  tbvTherm.Rows.Count = 0
  SELECT CASE iTable
    CASE 1 ' display overview
      GetScenarii()
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_schedule, thermostat_heating where heating=id and scenario=&1 ORDER BY name", FScheduleEditor.GetScenarioId(cmbScenario.text))
      IF rResult THEN
        FOR iCount = 0 TO vbxHeating.Children.Count - 1
          vbxHeating.Children[0].Delete
        NEXT
        iRows = rResult.Count
        FOR iCount = 0 TO iRows - 1
          hObj = NEW Frame(vbxHeating) AS "frmHeating"
          hObj.Text = rResult!name
          hObj.Resize(553, 110)

          hSubObj = NEW Label(hObj) AS "currentTemp"
          hSubObj.Text = "Current Temperature"
          hSubObj.Move(7, 21, 140, 21)

          hSubObj = NEW TextBox(hObj) AS "txtCurrTemp"
          hSubObj.Text = Devices.GetCurrentValueForDevice(rResult!sensor, 1)
          hSubObj.ReadOnly = TRUE
          hSubObj.Move(161, 21, 77, 21)

          hSubObj = NEW Button(hObj) AS "btnEditSchedule"
          hSubObj.Text = "Edit Schedule"
          hSubObj.Tag = rResult!scenario & " " & rResult!heating
          hSubObj.Move(252, 21, 98, 21)

          hSubObj = NEW Button(hObj) AS "btnEditHeating"
          hSubObj.Text = "Edit Heating"
          hSubObj.Tag = rResult!heating
          hSubObj.Move(366, 21, 98, 21)

          hSubObj = NEW Label(hObj) AS "reqTemp"
          hSubObj.Text = "Requested Temperature"
          hSubObj.Move(7, 49, 154, 21)

          hSubObj = NEW Label(hObj) AS "derog"
          hSubObj.Text = "(Derogated)"
          hSubObj.Move(364, 49, 154, 21)
          fTemp = Thermostat.GetDerogateHeating(rResult!id)
          IF fTemp = Thermostat.NO_TEMP THEN
            fTemp = Thermostat.GetRequestedTempForHeating(rResult!scenario, rResult!id)
            hSubObj.Text = "(Scheduled)"
          END IF

          hSubObj = NEW TextBox(hObj) AS "txtReqTemp"
          hSubObj.Text = fTemp
          hSubObj.ReadOnly = TRUE
          hSubObj.Move(161, 49, 77, 21)

          hSubObj = NEW Button(hObj) AS "btnMore"
          hSubObj.Text = "+"
          hSubObj.Tag = rResult!id & " " & fTemp
          hSubObj.Move(252, 49, 42, 21)

          hSubObj = NEW Button(hObj) AS "btnLess"
          hSubObj.Text = "-"
          hSubObj.Tag = rResult!id & " " & fTemp
          hSubObj.Move(308, 49, 42, 21)

          hSubObj = NEW Label(hObj) AS "sched"
          hSubObj.Text = "Daily Schedule"
          hSubObj.Move(7, 77, 154, 21)

          hSubObj = NEW TableView(hObj) AS "tvPlanning"
          hSubObj.ScrollBar = Scroll.None 
          hSubObj.Move(161, 77, 384, 21)

          WITH hSubObj
            .Font.Size = "9"
            .Columns.Count = FScheduleEditor.nbCol + 1
            FOR i = 0 TO FScheduleEditor.nbCol 
              .Columns[i].Title = " "
              .Columns[i].Width = .Width / FScheduleEditor.nbCol
            NEXT
            .Rows.Count = 1
            .Rows[0].Title = " "
          END WITH
          rResultDetail = Main.hDB.Exec("SELECT curtime() as curtime, e.* FROM thermostat_schedule_entry e WHERE scenario = &1 and heating=&2 and dayofweek(curdate()) = Day ORDER BY day, time", FScheduleEditor.GetScenarioId(cmbScenario.text), rResult!id)
          i = 0
          IF rResultDetail THEN
            IF rResultDetail.Count THEN
              FOR EACH rResultDetail
                hSubObj[0, i].Background = FScheduleEditor.GetConstantColor(rResultDetail!constant)
                IF rResultDetail!curtime >= rResultDetail!time THEN hSubObj[0, i].text = "I"
                INC i
              NEXT
            ENDIF
          ELSE
            Message.Info(("Error: couldn't find thermostat_schedule_entry table!"))
          END IF
          rResult.MoveNext
        NEXT
      END IF
      IF iRows > 0 THEN GetContants()
    CASE 2 ' display schedules
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_schedule ORDER BY scenario, heating")

      IF NOT rResult THEN
        Message.Info(("Error: table 'thermostat_schedule' not found!"))
        RETURN
      END IF
      iRows = rResult.Count

      WITH tbvTherm
        .Font.Size = "9"
        .Columns.Count = 3
        .Rows.Count = iRows
        .Columns[0].Title = ("Scenario")
        .Columns[0].Width = 200
        .Columns[1].Title = ("Heating")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
      END WITH

      FOR iCount = 0 TO iRows - 1
        tbvTherm[iCount, 0].Text = FScheduleEditor.GetScenarioName(rResult!scenario)
        tbvTherm[iCount, 1].Text = FScheduleEditor.GetHeatingName(rResult!heating)
        tbvTherm[iCount, 2].Text = rResult!description
        rResult.MoveNext
      NEXT
    CASE 3 ' display scenario
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_scenarii ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'thermostat_scenarii' not found!"))
        RETURN
      END IF
      iRows = rResult.Count

      WITH tbvTherm
        .Font.Size = "9"
        .Columns.Count = 4
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Enabled")
        .Columns[2].Width = 60
        .Columns[3].Title = ("Description")
        .Columns[3].Width = 250
      END WITH

      FOR iCount = 0 TO iRows - 1
        tbvTherm[iCount, 0].Text = rResult!id
        tbvTherm[iCount, 1].Text = rResult!name
        tbvTherm[iCount, 2].Text = Main.DisplayBool(rResult!name = Main.GlobalVar["Thermostat_Mode"])
        tbvTherm[iCount, 3].Text = rResult!description

        rResult.MoveNext
      NEXT
    CASE 4 ' display heatings
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_heating ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'thermostat_heating' not found!"))
        RETURN
      END IF
      iRows = rResult.Count

      WITH tbvTherm
        .Font.Size = "9"
        .Columns.Count = 5
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Sensor")
        .Columns[2].Width = 200
        .Columns[3].Title = ("Device")
        .Columns[3].Width = 200
        .Columns[4].Title = ("Description")
        .Columns[4].Width = 250
      END WITH

      FOR iCount = 0 TO iRows - 1
        tbvTherm[iCount, 0].Text = rResult!id
        tbvTherm[iCount, 1].Text = rResult!name
        tbvTherm[iCount, 2].Text = FHeatingEditor.GetDeviceName(rResult!sensor)
        tbvTherm[iCount, 3].Text = FHeatingEditor.GetDeviceName(rResult!device)
        tbvTherm[iCount, 4].Text = rResult!description

        rResult.MoveNext
      NEXT
    CASE 5 ' display constants
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_constant ORDER BY name")

      IF NOT rResult THEN
        Message.Info(("Error: table 'thermostat_constant' not found!"))
        RETURN
      END IF
      iRows = rResult.Count

      WITH tbvTherm
        .Font.Size = "9"
        .Columns.Count = 4
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Value")
        .Columns[2].Width = 60
        .Columns[3].Title = ("Description")
        .Columns[3].Width = 250
      END WITH

      FOR iCount = 0 TO iRows - 1
        tbvTherm[iCount, 0].Text = rResult!id
        tbvTherm[iCount, 1].Text = rResult!name
        tbvTherm[iCount, 2].Text = rResult!value
        tbvTherm[iCount, 3].Text = rResult!description
        rResult.MoveNext
      NEXT
  END SELECT

FINALLY
  DEC Application.Busy

END

PUBLIC SUB GetContants()

  DIM hObj, hObj2 AS Object
  DIM rConstant AS Result
  DIM icount AS Integer

  hObj2 = NEW Frame(vbxHeating) AS "frmTemperature"
  hObj2.Text = "Temperatures"
  hObj2.Resize(553, 60)
  hObj = NEW HBox(hObj2) AS "hboxTemperature"
  hObj.AutoResize = TRUE
  hObj.Move(4, 20, 500, 36)
  hObj.Spacing = 6

  TRY rConstant = Main.hDB.Exec("SELECT * FROM thermostat_constant order by value desc")
  IF NOT ERROR THEN
    FOR iCount = 0 TO rConstant.Count - 1
      hObj2 = NEW Button(hObj) AS "ConstantButton"
      WITH hObj2
        .Name = rConstant!id
        .Text = rConstant!value
        .ToolTip = rConstant!name
        .Background = rConstant!color
        .Height = 36
        .Width = 77
      END WITH
      rConstant.MoveNext
    NEXT
  ELSE
    Message(("Couldn't load constants!"))
    ME.Close
  END IF

END

PUBLIC SUB ConstantButton_DblClick() 

  txtCurTherm = LAST.Name
  FConstantEditor.Show()

END

PUBLIC SUB GetScenarii()

  DIM rResultScenarii AS Result

  ' fill combos with available triggers
  bCmbSCenarioLoading = TRUE
  TRY rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii")
  cmbScenario.Clear
  cmbScenario.Add("")
  cmbScenario.Text = ""
  btnEditScenario.Text = "Create"
  IF rResultScenarii THEN
    IF (rResultScenarii.Count >= 1) THEN
      FOR EACH rResultScenarii
        cmbScenario.Add(rResultScenarii!name)
        IF rResultScenarii!name = Main.GlobalVar["Thermostat_Mode"] THEN 
          cmbScenario.Text = rResultScenarii!name
          btnEditScenario.Text = "Edit"
        END IF
      NEXT
    ENDIF
  ELSE
    Message(("No thermostat_scenarii database table found!"))
  ENDIF
  bCmbSCenarioLoading = FALSE

END

PUBLIC SUB Form_Resize()

  IF iTable = 1 THEN
    frmOverview.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 35)
    ScrollView1.Move(4, 63, frmOverview.Width - 8, frmOverview.Height - 8)
    vbxHeating.Move(0, 0, frmOverview.Width - 4, vbxHeating.Height)
    tbvTherm.Visible = FALSE
    frmOverview.Visible = TRUE
  ELSE
    tbvTherm.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 35)
    tbvTherm.Visible = TRUE
    frmOverview.Visible = FALSE
  END IF

END

PUBLIC SUB tbtnRefresh_Click()

  IF tbtnRefresh.Value = TRUE THEN
    tRefresh.Start
    bAutoRefresh = TRUE
    btnRefresh.Enabled = FALSE
  ELSE
    tRefresh.Stop
    bAutoRefresh = FALSE
    btnRefresh.Enabled = TRUE
  END IF

END

PUBLIC SUB btnRefresh_Click()

  GetThermList()

END

PUBLIC SUB btnOverview_Click()

  iTable = 1
  btnOverview.enabled = FALSE 
  btnScenarii.Enabled = TRUE 
  btnConstants.Enabled = TRUE
  btnSchedules.Enabled = TRUE
  btnHeatings.Enabled = TRUE
  GetThermList()

END

PUBLIC SUB btnScenarii_Click()

  iTable = 3
  btnOverview.enabled = TRUE 
  btnScenarii.Enabled = FALSE
  btnConstants.Enabled = TRUE
  btnSchedules.Enabled = TRUE
  btnHeatings.Enabled = TRUE
  GetThermList()

END

PUBLIC SUB btnConstants_Click()

  iTable = 5
  btnOverview.enabled = TRUE 
  btnScenarii.Enabled = TRUE
  btnConstants.Enabled = FALSE
  btnSchedules.Enabled = TRUE
  btnHeatings.Enabled = TRUE
  GetThermList()

END

PUBLIC SUB btnSchedules_Click()

  iTable = 2
  btnOverview.enabled = TRUE 
  btnScenarii.Enabled = TRUE
  btnConstants.Enabled = TRUE
  btnSchedules.Enabled = FALSE
  btnHeatings.Enabled = TRUE
  GetThermList()

END

PUBLIC SUB tbvTherm_DblClick()

  ' open event editor window
  TRY txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
  IF NOT ERROR
    IF Main.bUserisAdmin OR NOT Main.bAuthEnabled THEN
      SELECT CASE iTable
        CASE 2
          txtCurTherm = FScheduleEditor.GetScenarioId(tbvTherm[tbvTherm.Row, 0].Text)
          txtCurThermAux = FScheduleEditor.GetHeatingId(tbvTherm[tbvTherm.Row, 1].Text)
          FScheduleEditor.Show()
        CASE 3
          txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
          FScenarioEditor.Show()
        CASE 4
          txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
          FHeatingEditor.Show()
        CASE 5
          'FConstantEditor.bConstantEdit = TRUE
          txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
          FConstantEditor.Show()
       END SELECT
    ELSE
      Message(("Sorry, editing thermostat is not enabled for users.\nLogin as an admin."))
    END IF
  END IF

END

PUBLIC SUB btnHeatings_Click()

  iTable = 4
  btnOverview.enabled = TRUE 
  btnScenarii.Enabled = TRUE
  btnConstants.Enabled = TRUE
  btnSchedules.Enabled = TRUE
  btnHeatings.Enabled = FALSE
  GetThermList()

END

PUBLIC SUB cmbScenario_Change()

  DIM sSql AS String
  DIM id AS Integer

  IF NOT bCmbSCenarioLoading THEN
    Main.GlobalVar["Thermostat_Mode"] = cmbScenario.Text
    Thermostat.DeleteAllDerogateHeating()
    GetThermList()
  END IF

END

PUBLIC SUB btnMore_Click()

  DIM fNewVal AS Float
  DIM scanned AS String[]

  scanned = Scan(LAST.Tag, "* *")
  IF scanned.count = 2 THEN
    IF Thermostat.GetDerogateHeating(scanned[0]) = Thermostat.NO_TEMP THEN
      fNewVal = Thermostat.GetNextRequestedTempForHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0])
      IF fNewVal <> Thermostat.NO_TEMP THEN
        IF fNewVal < CFloat(scanned[1]) THEN
          fNewVal = CFloat(scanned[1]) + 0.5
        END IF
      ELSE
        fNewVal = CFloat(scanned[1]) + 0.5
      END IF
    ELSE
      fNewVal = CFloat(scanned[1]) + 0.5
    END IF
    Thermostat.SetDerogateHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0], fNewVal)
    GetThermList()
  END IF

END

PUBLIC SUB btnLess_Click()

  DIM fNewVal AS Float
  DIM scanned AS String[]

  scanned = Scan(LAST.Tag, "* *")
  IF scanned.count = 2 THEN
    IF Thermostat.GetDerogateHeating(scanned[0]) = Thermostat.NO_TEMP THEN
      fNewVal = Thermostat.GetNextRequestedTempForHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0])
      IF fNewVal <> Thermostat.NO_TEMP THEN
        IF fNewVal > CFloat(scanned[1]) THEN
          fNewVal = CFloat(scanned[1]) - 0.5
        END IF
      ELSE
        fNewVal = CFloat(scanned[1]) - 0.5
      END IF
    ELSE
      fNewVal = CFloat(scanned[1]) - 0.5
    END IF
    Thermostat.SetDerogateHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0], fNewVal)
    GetThermList()
  END IF

END

PUBLIC SUB btnEditScenario_Click()

  IF btnEditScenario.Text = "Create" THEN
    FScenarioEditor.bAddScenario = TRUE
  ELSE
    txtCurTherm = FScheduleEditor.GetScenarioId(cmbScenario.Text)
  END IF
  FScenarioEditor.Show()

END

PUBLIC SUB btnEditSchedule_Click()

  DIM scanned AS String[]

  scanned = Scan(LAST.Tag, "* *")
  IF scanned.count = 2 THEN
    txtCurTherm = scanned[0]
    txtCurThermAux = scanned[1]
    FScheduleEditor.Show()
  END IF

END

PUBLIC SUB btnEditHeating_Click()

  txtCurTherm = LAST.Tag
  FHeatingEditor.Show()

END
