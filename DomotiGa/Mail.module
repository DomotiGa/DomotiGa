' Gambas module file

' Description:
' Mail.module
' Support for sending e-mails via SMTP and fetching Gmail RSS.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE iNewEMails AS Integer
PRIVATE sOutput AS String
PUBLIC tGmail AS Timer

PUBLIC FUNCTION GmailRun()

  ' start poll timer for Gmail
  tGmail = NEW Timer AS "tGmail"
  tGmail.Delay = Main.iGmailPolltime * 1000 ' multiply for seconds
  tGmail.Start

  Poll()

END

PUBLIC SUB Poll()

  ' fetch rss xml in background with help of wget
  ' as far as I can see gb.net.curl doesn't support google's authentication method.
  SHELL "wget -q -O - --user=" & Main.sGmailUser & " --password=" & Main.sGmailPassword & " https://mail.google.com/mail/feed/atom --no-check-certificate" FOR READ AS "GmailRSS"
  IF Main.bGmailDebug THEN Main.WriteDebugLog("[Gmail] fetching RSS feed.")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' poll for mail
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tGmail_Timer()

  Poll()

END

PUBLIC SUB GmailRSS_Read()

  DIM sXml AS String
  DIM iCurrentMails AS Integer

  READ #LAST, sXml, -256 'Lof(LAST)
  sOutput &= sXml

  IF InStr(sOutput, "</feed>") THEN
    IF Main.bGmailDebug THEN Main.WriteDebugLog("[Gmail] parsing RSS xml.")
    iCurrentMails = Main.iNewMails
    ParseFeed(sOutput)
    IF IsString(Main.GlobalVar["Minute"]) THEN Main.GlobalVar["Minute"] = Val(Main.GlobalVar["Minute"])
    IF Main.bGmailDebug THEN Main.WriteDebugLog("[Gmail] you have " & Main.iNewMails & " new e-mails.")
    IF (Main.iNewMails <> iCurrentMails) OR IF Main.GlobalVar["Minute"] MOD 30 = 0 THEN
      IF Main.iNewMails THEN Main.WriteLog("You have " & Main.iNewMails & " new " & If(Main.iNewMails <> 1, "e-mails", "e-mail") & " on Gmail.")
    END IF
    sOutput = NULL
  END IF

END

PUBLIC SUB ParseFeed(data AS String)

  DIM Xml AS NEW XmlReader

  ' debug stuff
  'File.Save(Main.sBaseDir & "/logs/" & Format(Now, "yyyy-mm-dd-hh-nn-ss") & ".xml", data)

  TRY Xml.FromString(data)
  IF ERROR THEN RETURN

  DO WHILE TRUE
    TRY Xml.Read()
    IF ERROR OR Xml.Eof THEN RETURN
    SELECT Xml.Node.Type
      CASE XmlReaderNodeType.Element
        ' The root element
        PharseNode(Xml)
    END SELECT
  LOOP
END

PUBLIC SUB PharseNode(Xml AS XmlReader)

  DIM sName AS String

  ' if it has no children, stop
  IF Xml.Node.IsEmptyElement THEN RETURN

  ' check all nodes of the element
  sName = Xml.Node.Name
  DO WHILE TRUE
    TRY Xml.Read()
    IF ERROR OR Xml.Eof THEN BREAK
    SELECT Xml.Node.Type
      CASE XmlReaderNodeType.EndElement
        IF Xml.Node.Name = sName THEN RETURN
      CASE XmlReaderNodeType.Element
        PharseNode(Xml)
      CASE XmlReaderNodeType.Text
        IF sName = "fullcount" THEN
          Main.iNewMails = Val(Xml.Node.Value)
          Main.UpdateCounters()
        END IF
    END SELECT
  LOOP

END

PUBLIC SUB SendMail(sSubject AS String, sBody AS String, OPTIONAL sTo AS String)

  DIM hMsg AS NEW SmtpClient

  IF NOT Main.bEmailEnabled THEN RETURN

  ' sent msg to alternate address instead of default one
  IF sTo THEN
    hMsg.To.Add(sTo)
  ELSE
    hMsg.To.Add(Main.sEmailToAddress)
  END IF

  IF Main.bEMailDebug THEN
    Main.WriteDebugLog("[e-mail] From address: " & Main.sEmailFromAddress)
    Main.WriteDebugLog("[e-mail] SMTP server: " & Main.sEmailSMTPServer)
    Main.WriteDebugLog("[e-mail] SMTP Port: " & Main.iEmailSMTPPort)
    IF sTo THEN Main.WriteDebugLog("[e-mail] To Address: " & sTo)
    Main.WriteDebugLog("[e-mail] Subject: " & sSubject)
    Main.WriteDebugLog("[e-mail] Body: " & sBody)
  END IF

  hMsg.Subject = sSubject
  hMsg.Add(sBody & "\n\n" & "-- \nPowered by " & Application.Name & " V" & Application.Version & "\n")
  hMsg.From = Main.sEmailFromAddress
  hMsg.Host = Main.sEmailSMTPServer
  hMsg.Port = Main.iEmailSMTPPort
  TRY hMsg.Send()
  IF NOT ERROR THEN Main.WriteLog("Just sent an e-mail message.")

CATCH
  Main.WriteLog("e-mail Error: Sending e-mail message failed!")

END

PUBLIC SUB SendCaptureByMail(sSubject AS String, sBody AS String, iCam AS Integer, OPTIONAL sTo AS String)

  DIM hMsg AS NEW SmtpClient
  DIM rResult AS Result
  DIM sTable AS String = "capture_camera"
  DIM sTempFile AS String = Temp() & ".jpg"
  DIM hFile AS File
  DIM sImage AS String
  IF NOT Main.bEmailEnabled THEN RETURN

  sTable = sTable & iCam
  ' get last image
  rResult = Main.hDB.Exec(Subst("SELECT * FROM &1 ORDER BY stamp DESC LIMIT 1", sTable))
  IF rResult.Available THEN
    IF rResult.Count = 1 THEN
      TRY File.Save(sTempFile, rResult!image.Data)
    END IF
  END IF
  IF Exist(sTempFile) THEN
    hMsg.Add(File.Load(sTempFile), "image/jpeg", "FrontDoor" & Format(Now(), "yyyy-mm-dd-hh-nn-ss") & ".jpg ")
    KILL sTempFile
  END IF
  ' sent msg to alternate address instead of default one
  IF (Len(sTo)) THEN
    hMsg.To.Add(sTo)
  ELSE
    hMsg.To.Add(Main.sEmailToAddress)
  END IF

  IF Main.bEMailDebug THEN
    Main.WriteDebugLog(Main.sEmailFromAddress)
    Main.WriteDebugLog(Main.sEmailSMTPServer)
    Main.WriteDebugLog(Main.iEmailSMTPPort)
  END IF

  hMsg.Subject = sSubject
  hMsg.Add(sBody & "\n\n" & "-- \nPowered by " & Application.Name & " V" & Application.Version & "\n")

  hMsg.From = Main.sEmailFromAddress
  hMsg.Host = Main.sEmailSMTPServer
  hMsg.Port = Main.iEmailSMTPPort
  TRY hMsg.Send()

  IF NOT ERROR THEN Main.WriteLog("Just sent an e-mail message.")

CATCH
  Main.WriteLog("e-mail Error: Sending e-mail message failed!")

END
