' Gambas class file

' Description:
' FActionEditor.class
' Support for creating and edit actions.

' Development Status:
' Just started, not working 100% yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultActionTypes AS Result
PRIVATE rResultDevices AS Result
PUBLIC bAddAction AS Boolean
PRIVATE sVarCompare AS String
PRIVATE sDevCompare AS String

PUBLIC SUB Form_Open()

  DIM vValue AS Variant

  IF bAddAction THEN ME.Text = ("Add Action")
  ME.Move(FMain.X + 50, FMain.Y + 70)

  ' fill combo with available global vars
  cmbVariables.Add("")
  FOR EACH vValue IN Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  NEXT
  ' fill combo with available devices
  cmbDevices.Add("")
  rResultDevices = Main.hDB.Exec("SELECT * FROM devices")
  IF rResultDevices THEN
    IF rResultDevices.Count THEN
      FOR EACH rResultDevices
        IF rResultDevices!enabled = TRUE THEN cmbDevices.Add(rResultDevices!name)
      NEXT
    END IF
  ELSE
    Message.Info(("Error: couldn't find trigger details!"))
    RETURN
  END IF
  IF NOT bAddAction THEN
    ' fetch action details
    rResult = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1", FEventEditor.iAction)
    IF NOT rResult THEN
      Message.Info(("Error: couldn't find trigger details!"))
      RETURN
    END IF
    IF rResult.Count = 1 THEN
      txtActionName.Text = rResult!name
      ' fetch actiontype values
      rResultActionTypes = Main.hDB.Exec("SELECT * FROM actiontypes WHERE id = &1", rResult!type)
      IF rResultActionTypes THEN
        IF rResultActionTypes.Count THEN
          ' select tab
          tabActionTypes.Index = rResultActionTypes!tab
          tabActionTypes.SetFocus()
        END IF
      END IF
      ' preload controls to values from database
      SELECT rResult!type
        CASE 1 ' device change
          IF rResult!param1 THEN cmbDevices.Text = GetDeviceName(rResult!param1)
          cmbValue.Text = rResult!param2
          txtDeviceValue.Text = rResult!param3
          tabActionTypes.Index = 0
        CASE 2 ' variable
          ' cmbVariables.Text = rResult!param1
          ' SelectVarCompare(rResult!param2)
          ' txtVariable.Text = rResult!param3
          ' cmbVariables_Click()
          tabActionTypes.Index = 1
        CASE 3 ' device change
          ' cmbDevices.Text = GetDeviceName(rResult!param1)
          ' cmbValue.Text = rResult!param2
          ' SelectDevCompare(rResult!param3)
          ' txtDevice.Text = rResult!param4
          ' cmbDevices_Click()
          tabActionTypes.Index = 2
        CASE 4 ' Speak text
          tabActionTypes.Index = 3
        CASE 5 ' Execute Command
          txtExecuteCmd.Text = rResult!param5
          tabActionTypes.Index = 4
      END SELECT
    ELSE
      bAddAction = TRUE
    END IF
  END IF
END

PUBLIC SUB txtActionName_Change()

  EnableButtons()

END

PUBLIC SUB tabActionTypes_Click()

  EnableButtons()

END

PRIVATE SUB EnableButtons()

  btnSave.Enabled = TRUE
  btnDeleteAction.Enabled = TRUE
  btnNewAction.Enabled = TRUE

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM iType AS Integer
  DIM sSql, sParam1, sParam2, sParam3, sParam4, sParam5 AS String

  IF bAddAction THEN
    btnNewAction_Click
    RETURN
  END IF

  IF NOT txtActionName.Text THEN
    Balloon(("Please enter a name for this action!"), txtActionName)
    RETURN
  END IF

  iType = tabActionTypes.Index + 1
  SELECT iType
    CASE 1
      IF NOT cmbDevices.Text THEN
        Balloon(("Please select a device!"), cmbDevices)
        RETURN
      END IF
      sParam1 = GetDeviceId(cmbDevices.Text)
      IF NOT cmbValue.Text THEN
        Balloon(("Please select a field to set!"), cmbValue)
        RETURN
      END IF
      sParam2 = cmbValue.Text
      IF NOT txtDeviceValue.Text THEN
        Balloon(("Please enter a value to set!"), txtDeviceValue)
        RETURN
      END IF
      sParam3 = txtDeviceValue.Text
    CASE 2
      IF NOT cmbVariables.Text THEN
        Balloon(("Please select a variable!"), cmbVariables)
        RETURN
      END IF
      sParam1 = cmbVariables.Text
      sParam2 = sVarCompare
      IF NOT txtVariable.Text THEN
        Balloon(("Please enter a value to check!"), txtVariable)
        RETURN
      END IF
      sParam3 = txtVariable.Text
    CASE 3
      ' IF NOT cmbValue.Text THEN
      '   Balloon("Please select the field to check!", txtDevice)
      '   RETURN
      ' END IF
      ' sParam2 = cmbValue.Text
      ' sParam3 = sDevCompare
      ' IF NOT txtDevice.Text THEN
      '   Balloon("Please enter a value to check!", txtDevice)
      '   RETURN
      ' END IF
      ' sParam4 = txtDevice.Text
    CASE 5
      IF NOT txtExecuteCmd.Text THEN
        Balloon(("Please enter a command to execute!"), txtExecuteCmd)
        RETURN
      END IF
      sParam5 = txtExecuteCmd.Text
  END SELECT

  ' save new trigger settings
  sSql = "UPDATE actions SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7 WHERE id = &8"
  rResultUpdate = Main.hDB.Exec(sSql, txtActionName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, rResult!id)
  bAddAction = FALSE
  ME.Close

END

PUBLIC SUB btnNewAction_Click()

  DIM rResultNew AS Result
  DIM iType AS Integer
  DIM sParam1, sParam2, sParam3, sParam4, sParam5 AS String

  iType = tabActionTypes.Index + 1
  SELECT iType
    CASE 1
      IF NOT cmbDevices.Text THEN
        Balloon(("Please select a device!"), cmbDevices)
        RETURN
      END IF
      sParam1 = GetDeviceId(cmbDevices.Text)
      IF NOT cmbValue.Text THEN
        Balloon(("Please select a value to switch!"), cmbValue)
        RETURN
      END IF
      sParam2 = cmbValue.Text
      IF NOT txtDeviceValue.Text THEN
        Balloon(("Please select a value to set!"), txtDeviceValue)
        RETURN
      END IF
      sParam3 = txtDeviceValue.Text
    CASE 2
      ' IF NOT cmbVariables.Text THEN
      '   Balloon("Please select a variable!", cmbVariables)
      '   RETURN
      ' END IF
      ' sParam1 = cmbVariables.Text
      ' sParam2 = sVarCompare
      ' IF NOT txtVariable.Text THEN
      '   Balloon("Please enter a value to check!", txtVariable)
      '   RETURN
      ' END IF
      ' sParam3 = txtVariable.Text
    CASE 5
      IF NOT txtExecuteCmd.Text THEN
        Balloon(("Please enter a command to execute!"), txtExecuteCmd)
        RETURN
      END IF
      sParam5 = txtExecuteCmd.Text
  END SELECT
  IF NOT txtActionName.Text THEN
    Balloon(("Please enter a name for this action!"), txtActionName)
    RETURN
  END IF
  IF ActionNameExist(txtActionName.Text) THEN
    Balloon(("Please enter a unique name for this action!"), txtActionName)
    RETURN
  END IF
  Main.hDB.Begin()
  rResultNew = Main.hDB.Create("actions")
  rResultNew!name = txtActionName.Text
  rResultNew!type = iType
  rResultNew!param1 = sParam1
  rResultNew!param2 = sParam2
  rResultNew!param3 = sParam3
  rResultNew!param4 = sParam4
  rResultNew!param5 = sParam5
  rResultNew.Update()
  Main.hDB.Commit()
  'FEvents.GetEventList()
  bAddAction = FALSE

  ME.Close

END

PUBLIC SUB btnCancel_Click()

  ME.Close

END

PRIVATE SUB ActionNameExist(sName AS String) AS Boolean

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  IF rResultAction THEN
    IF rResultAction.Count THEN
      RETURN TRUE
    END IF
  END IF
  RETURN FALSE

END

PRIVATE SUB SelectVarCompare(sValue AS String)

  SELECT sValue
    CASE "="
      rbVarEqual.Value = TRUE
    CASE "<"
      rbVarSmaller.Value = TRUE
    CASE ">"
      rbVarBigger.Value = TRUE
    CASE "<>"
      rbVarUnEqual.Value = TRUE
    CASE "MOD 0"
      rbVarMod.Value = TRUE
  END SELECT

END

PUBLIC SUB cmbVariables_Click()

  IF cmbVariables.Text THEN
    IF IsBoolean(Main.GlobalVar[cmbVariables.Text]) THEN
      txtVariableValue.Text = Main.DisplayBool(Main.GlobalVar[cmbVariables.Text])
      rbVarSmaller.Enabled = FALSE
      rbVarBigger.Enabled = FALSE
      rbVarMod.Enabled = FALSE
    ELSE IF NOT IsNumber(Main.GlobalVar[cmbVariables.Text]) THEN
      rbVarSmaller.Enabled = FALSE
      rbVarBigger.Enabled = FALSE
      rbVarMod.Enabled = FALSE
      txtVariableValue.Text = Main.GlobalVar[cmbVariables.Text]
    ELSE IF NOT Main.IsTime(Main.GlobalVar[cmbVariables.Text]) THEN
      rbVarMod.Enabled = FALSE
      txtVariableValue.Text = Main.GlobalVar[cmbVariables.Text]
    ELSE
      txtVariableValue.Text = Main.GlobalVar[cmbVariables.Text]
    END IF
  END IF

END

PUBLIC SUB GetDeviceName(iId AS Integer) AS String

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!name
    END IF
  END IF
  RETURN ""

END

PUBLIC SUB GetDeviceId(sName AS String) AS Integer

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sName)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!id
    END IF
  END IF
  RETURN 0

END

PRIVATE SUB SelectDevCompare(sValue AS String)

  ' SELECT sValue
  '   CASE "="
  '     rbDevEqual.Value = TRUE
  '   CASE "<"
  '     rbDevSmaller.Value = TRUE
  '   CASE ">"
  '     rbDevBigger.Value = TRUE
  '   CASE "<>"
  '     rbDevUnEqual.Value = TRUE
  ' END SELECT

END

PUBLIC SUB rbDevEqual_Click()

  sDevCompare = "="

END

PUBLIC SUB rbDevSmaller_Click()

  sDevCompare = "<"

END

PUBLIC SUB rbDevBigger_Click()

  sDevCompare = ">"

END

PUBLIC SUB rbDevUnEqual_Click()

  sDevCompare = "<>"

END

PUBLIC SUB cmbDevices_Click()

  DIM iId AS Integer

  ' IF cmbValue.Text AND cmbDevices.Text THEN 
  '   iId = GetDeviceId(cmbDevices.Text)
  '   IF iId THEN
  '     SELECT cmbValue.Text
  '       CASE "Value1"
  '         txtDeviceValue.Text = Devices.GetCurrentValueForDevice(iId)
  '       CASE "Value2"
  '         txtDeviceValue.Text = Devices.GetCurrentValue2ForDevice(iId)
  '       CASE "Value3"
  '         txtDeviceValue.Text = Devices.GetCurrentValue3ForDevice(iId)
  '     END SELECT
  '   END IF
  '   IF NOT IsNumber(txtDeviceValue.Text) THEN
  '     rbDevBigger.Enabled = FALSE
  '     rbDevSmaller.Enabled = FALSE
  '   ELSE
  '     rbDevBigger.Enabled = TRUE
  '     rbDevSmaller.Enabled = TRUE
  '   END IF
  ' END IF

END

PUBLIC SUB cmbValue_Click()

  cmbDevices_Click()

END

PUBLIC SUB btnDeleteAction_Click()

  DIM iId AS Integer

  SELECT Message.Question(("Are you sure that you want to delete this action?"), ("Yes"), ("No"))
    CASE 1
      iId = GetActionId(txtActionName.Text) 
      IF iId THEN
        Main.hDB.Exec("DELETE FROM actions WHERE id = &1", iId)
      END IF
      ME.Close
  END SELECT

END

PRIVATE SUB GetActionId(sName AS String) AS Integer

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  TRY RETURN rResultAction!id

END
