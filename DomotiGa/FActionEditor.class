' Gambas class file

' Description:
' FActionEditor.class
' Support for creating and edit actions.

' Development Status:
' Working ok.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultDevices AS Result
PUBLIC bAddAction AS Boolean
PRIVATE iSavedActionType AS Integer
PUBLIC bActionEdit AS Boolean

PUBLIC SUB Form_Open()

  DIM vValue AS Variant

  IF bAddAction THEN ME.Text = ("Create Action")
  ME.Move(FMain.X + 50, FMain.Y + 70)

  ' fill combo with available global vars
  cmbVariables.Add("")
  FOR EACH vValue IN Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  NEXT

  ' fill combo with available devices
  cmbDevices.Add("")
  rResultDevices = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE ORDER BY name")
  IF rResultDevices THEN
    IF rResultDevices.Count THEN
      FOR EACH rResultDevices
        cmbDevices.Add(rResultDevices!name)
      NEXT
    ENDIF
  ELSE
    Message.Info(("Error: couldn't find devices table!"))
    RETURN
  ENDIF

  IF NOT bAddAction THEN
    ' fetch action details
    IF bActionEdit THEN
      TRY rResult = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1", FEvents.txtCurEvent)
    ELSE
      TRY rResult = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1", FEventEditor.iAction)
    ENDIF
    IF NOT rResult THEN
      Message.Info(("Error: couldn't find trigger details!"))
      RETURN
    ENDIF
    IF rResult.Count = 1 THEN
      txtActionName.Text = rResult!name
      txtDescription.Text = rResult!description
      iSavedActionType = rResult!type
      ' preload controls to values from database
      SELECT rResult!type
        CASE 1 ' set device value
          IF rResult!param1 THEN cmbDevices.Text = GetDeviceName(rResult!param1)
          cmbValue.Index = rResult!param2
          txtDeviceValue.Text = rResult!param3
        CASE 2 ' set global var
          cmbVariables.Text = rResult!param1
          txtVariableValue.Text = rResult!param2
        CASE 3 ' sent e-mail
          txtToAddress.Text = rResult!param1
          txtSubject.Text = rResult!param2
          txtMessage.Text = rResult!param3
        CASE 4 ' speak text
          cmbSpeakVoice.Text = rResult!param1
          txtSpeakText.Text = rResult!param2
        CASE 5 ' execute command
          txtExecuteCmd.Text = rResult!param1
        CASE 6 ' send tweet
          txtSendTweet.Text = rResult!param1
        CASE 7 ' send SMS
          txtToSMS.Text = rResult!param1
          txtSMSMessage.Text = rResult!param2
        CASE 8 ' send IRTRans
          txtIRCommand.Text = rResult!param1
        CASE 9 ' play sound
          txtSound.Text = rResult!param1
          spVolume.Value = rResult!param2
        CASE 10 ' write log
          txtLog.Text = rResult!param1
        CASE 11 ' display text on led matrix
          txtLEDMessage.Text = rResult!param1
          vbID.Value = rResult!param2
          cmbColor.Text = rResult!param3
          cmbSpeed.Text = rResult!param4
        CASE 12 ' av control command
          cmbAVModel.Text = rResult!param1
          cmbAVCommand.Text = rResult!param2
          cmbAVValue.Text = rResult!param3
          txtAVAddress.Text = rResult!param4
        CASE 13 ' delay timer
          vbDelay.Value = rResult!param1
          IF rResult!param3 = "random" THEN
            chkRandom.Value = TRUE
            vbDelayMax.Value = rResult!param2
          ELSE
            chkRandom.Value = FALSE
          ENDIF
          chkRandom_Click()
        CASE 14 ' notify-send
          txtNotifyTitle.Text = rResult!param1
          txtNotifyText.Text = rResult!param2
        CASE 15 ' script
          txtScript.Text = rResult!param1
      END SELECT
      TRY tabActionTypes.Index = rResult!type - 1
      tabActionTypes.SetFocus()
      btnRun.Enabled = TRUE
    ELSE
      bAddAction = TRUE
    ENDIF
  ENDIF

END

PUBLIC SUB txtActionName_Change()

  EnableButtons()

END

PUBLIC SUB tabActionTypes_Click()

  EnableButtons()

END

PRIVATE SUB EnableButtons()

  btnSave.Enabled = TRUE
  btnDeleteAction.Enabled = TRUE
  btnNewAction.Enabled = TRUE
  btnRun.Enabled = FALSE 

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM iType AS Integer
  DIM sSql, sParam1, sParam2, sParam3, sParam4, sParam5 AS String

  IF NOT txtActionName.Text THEN
    Balloon(("Please enter a name for this action!"), txtActionName)
    RETURN
  ENDIF

  IF NOT bAddAction THEN
    ' name has changed
    IF rResult!name <> txtActionName.Text THEN
      IF ActionNameExist(txtActionName.Text) THEN
        Balloon(("Please enter a unique name for this action!"), txtActionName)
        RETURN
      ENDIF
    ENDIF
  ENDIF
  iType = tabActionTypes.Index + 1
  ' active tab is different then saved action type
  IF iType <> iSavedActionType THEN
    Message("You changed action type, sure to save current active tab?", "Ok")
  ENDIF

  SELECT iType
    CASE 1 ' set device
      IF NOT cmbDevices.Text THEN
        Balloon(("Please select a device!"), cmbDevices)
        RETURN
      END IF
      sParam1 = GetDeviceId(cmbDevices.Text)
      IF NOT cmbValue.Text THEN
        Balloon(("Please select a field to set!"), cmbValue)
        RETURN
      END IF
      sParam2 = cmbValue.Index
      IF NOT txtDeviceValue.Text THEN
        Balloon(("Please enter a value to set!"), txtDeviceValue)
        RETURN
      END IF
      sParam3 = txtDeviceValue.Text
    CASE 2 ' set globalvar
      IF NOT cmbVariables.Text THEN
        Balloon(("Please select or enter a new variable!"), cmbVariables)
        RETURN
      END IF
      sParam1 = cmbVariables.Text
      IF NOT txtVariableValue.Text THEN
        Balloon(("Please enter a value to set!"), txtVariableValue)
        RETURN
      END IF
      sParam2 = txtVariableValue.Text
    CASE 3 ' send e-mail message
      IF NOT txtToAddress.Text THEN
        Balloon(("Please enter a e-mail address!"), txtToAddress)
        RETURN
      END IF
       IF NOT txtSubject.Text THEN
        Balloon(("Please enter a subject!"), txtSubject)
        RETURN
      END IF
       IF NOT txtMessage.Text THEN
        Balloon(("Please enter a msg to send!"), txtMessage)
        RETURN
      END IF
      sParam1 = txtToAddress.Text
      sParam2 = txtSubject.Text
      sParam3 = txtMessage.Text
    CASE 4 ' speak text
      IF NOT cmbSpeakVoice.Text THEN
        Balloon(("Please enter a voicename or select type!"), cmbSpeakVoice)
        RETURN
      END IF
      IF NOT txtSpeakText.Text THEN
        Balloon(("Please enter a text to speak!"), txtSpeakText)
        RETURN
      END IF
      sParam1 = cmbSpeakVoice.Text
      sParam2 = txtSpeakText.Text
    CASE 5 ' run shell command
      IF NOT txtExecuteCmd.Text THEN
        Balloon(("Please enter a command to execute!"), txtExecuteCmd)
        RETURN
      END IF
      sParam1 = txtExecuteCmd.Text
    CASE 6 ' send tweet message
      IF NOT txtSendTweet.Text THEN
        Balloon(("Please enter a message to tweet!"), txtSendTweet)
        RETURN
      END IF
      sParam1 = txtSendTweet.Text
    CASE 7 ' send SMS message
      IF NOT txtToSMS.Text THEN
        Balloon(("Please enter a number to SMS to!"), txtToSMS)
        RETURN
      END IF
      IF NOT txtSMSMessage.Text THEN
        Balloon(("Please enter a message to send!"), txtSMSMessage)
        RETURN
      END IF
      sParam1 = txtToSMS.Text
      sParam2 = txtSMSMessage.Text
    CASE 8 ' send IRTrans command
      IF NOT txtIRCommand.Text THEN
        Balloon(("Please enter a command string!"), txtIRCommand)
        RETURN
      END IF
      sParam1 = txtIRCommand.Text
    CASE 9 ' play sound file
      IF NOT txtSound.Text THEN
        Balloon(("Please enter a sound to play!"), txtSound)
        RETURN
      END IF
      sParam1 = txtSound.Text
      sParam2 = spVolume.Value
    CASE 10 ' write log
      IF NOT txtLog.Text THEN
        Balloon(("Please enter a text to log!"), txtLog)
        RETURN
      END IF
      sParam1 = txtLog.Text
    CASE 11 ' display text on led matrix
      IF NOT txtLEDMessage.Text THEN
        Balloon(("Please enter a text to display!"), txtLEDMessage)
        RETURN
      END IF
      IF NOT vbID.Text THEN
        Balloon(("Please enter an display id!"), vbID)
        RETURN
      END IF
      sParam1 = txtLEDMessage.Text
      sParam2 = vbID.Value
    CASE 12 ' av control command
      IF NOT cmbAVModel.Text THEN
        Balloon(("Please select the equipment model!"), cmbAVModel)
        RETURN
      END IF
      IF NOT cmbAVCommand.Text THEN
        Balloon(("Please enter a command to send!"), cmbAVCommand)
        RETURN
      END IF
      sParam1 = cmbAVModel.Text
      sParam2 = cmbAVCommand.Text
      sParam3 = cmbAVValue.Text
      sParam4 = txtAVAddress.Text
    CASE 13 ' delay timer
      IF vbDelay.Text = 0 THEN
        Balloon(("Please enter a delay value!"), vbDelay)
        RETURN
      END IF
      IF chkRandom.Value THEN
        IF vbDelayMax.Text = 0 THEN
          Balloon(("Please enter a max delay value!"), vbDelayMax)
          RETURN
        END IF
        IF vbDelayMax.Value < vbDelay.Value THEN
          Balloon(("Please enter a value higher than min delay value!"), vbDelayMax)
          RETURN
        END IF
        sParam2 = vbDelayMax.Value
        sParam3 = "random"
      ELSE
        sParam2 = ""
        sParam3 = "fixed"
      ENDIF
      sParam1 = vbDelay.Value
    CASE 14 ' notify-send
      IF NOT txtNotifyTitle.Text THEN
        Balloon(("Please enter a title to display!"), txtNotifyTitle)
        RETURN
      END IF
      IF NOT txtNotifyText.Text THEN
        Balloon(("Please enter a text to display!"), txtNotifyText)
        RETURN
      END IF
      sParam1 = txtNotifyTitle.Text
      sParam2 = txtNotifyText.Text
    CASE 15 ' script
      IF NOT txtScript.Text THEN
        Balloon(("Please enter a script to run!"), txtScript)
        RETURN
      END IF
      sParam1 = txtScript.Text
  END SELECT

  IF bAddAction THEN
    IF ActionNameExist(txtActionName.Text) THEN
      Balloon(("Please enter a unique name for this action!"), txtActionName)
      RETURN
    END IF
    Main.hDB.Begin()
    rResult = Main.hDB.Create("actions")
    rResult!name = txtActionName.Text
    rResult!description = txtDescription.Text
    rResult!type = iType
    rResult!param1 = sParam1
    rResult!param2 = sParam2
    rResult!param3 = sParam3
    rResult!param4 = sParam4
    rResult!param5 = sParam5
    rResult.Update()
    Main.hDB.Commit()
  ELSE
    ' save new trigger settings
    sSql = "UPDATE actions SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7, description = &8 WHERE id = &9"
    TRY rResultUpdate = Main.hDB.Exec(sSql, txtActionName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, txtDescription.Text, rResult!id)
  ENDIF

  IF FEventEditor.Id THEN
    IF FEventEditor.iEditingAction = 1 THEN
      FEventEditor.GetActions()
      FEventEditor.cmbAction.Text = txtActionName.Text
    ENDIF
  ENDIF

  bAddAction = FALSE
  ME.Close

END

PUBLIC SUB btnNewAction_Click()

  bAddAction = TRUE
  btnSave_Click()

END

PUBLIC SUB btnCancel_Click()

  ME.Close

END

PRIVATE SUB ActionNameExist(sName AS String) AS Boolean

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  IF rResultAction THEN
    IF rResultAction.Count THEN
      RETURN TRUE
    END IF
  END IF
  RETURN FALSE

END

PUBLIC SUB GetDeviceName(iId AS Integer) AS String

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!name
    END IF
  END IF
  RETURN ""

END

PRIVATE SUB GetDeviceId(sName AS String) AS Integer

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sName)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!id
    END IF
  END IF
  RETURN 0

END

PUBLIC SUB btnDeleteAction_Click()

  DIM iId AS Integer

  SELECT Message.Question(("Are you sure that you want to delete this action?"), ("Yes"), ("No"))
    CASE 1
      iId = GetActionId(txtActionName.Text)
      IF iId THEN
        Main.hDB.Exec("DELETE FROM actions WHERE id = &1", iId)
        Main.hDB.Exec("DELETE FROM events_actions WHERE action = &1", iId)
      END IF
      IF FEventEditor.Id THEN
        IF FEventEditor.iEditingAction = 1 THEN
          FEventEditor.GetActions
        ENDIF
      ENDIF
      ME.Close
  END SELECT

END

PRIVATE SUB GetActionId(sName AS String) AS Integer

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  TRY RETURN rResultAction!id

END

PUBLIC SUB txtDescription_KeyPress()

  btnSave.Enabled = TRUE

END

PUBLIC SUB cmbAVModel_Click()

  FillAVFields(cmbAVModel.Text, cmbAVCommand.Text, cmbAVValue.Text)
  EnableButtons

END

PUBLIC SUB cmbAVCommand_Click()

  FillAVValue(cmbAVModel.Text, cmbAVCommand.Index)
  EnableButtons

END

PRIVATE SUB FillAVFields(sModel AS String, sCmd AS String, sValue AS String)

  DIM sTemp AS String
  DIM iCnt AS Integer

  cmbAVCommand.Clear
  cmbAVCommand.Add("")
  cmbAVValue.Clear
  cmbAVValue.Add("")
  SELECT CASE LCase(sModel)
    CASE "denon"
      IF AVControl.sDenonCmds THEN
        FOR EACH sTemp IN AVControl.sDenonCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
    CASE "onkyo"
      IF AVControl.sOnkyoCmds.Count THEN
        FOR EACH sTemp IN AVControl.sOnkyoCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
    CASE "iport"
      IF AVControl.sIPortCmds THEN
        FOR EACH sTemp IN AVControl.sIPortCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
    CASE "squeezeserver"
      IF AVControl.sSqueezeServerCmds THEN
        FOR EACH sTemp IN AVControl.sSqueezeServerCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
    CASE "sharptv"
      IF AVControl.sSharpTVCmds THEN
        FOR EACH sTemp IN AVControl.sSharpTVCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
    CASE "lgtv"
      IF AVControl.sLGTVCmds THEN
        FOR EACH sTemp IN AVControl.sLGTVCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
  END SELECT
  cmbAVCommand.Text = sCmd
  FillAVValue(sModel, cmbAVCommand.Index)

END

PRIVATE SUB FillAVValue(sModel AS String, iCmd AS Integer)

  DIM sTemp AS String
  DIM iCnt AS Integer
  DIM aScan AS String[]

  cmbAVValue.Clear
  cmbAVValue.Add("")
  SELECT CASE LCase(sModel)
    CASE "denon"
      TRY aScan = Split(AVControl.sDenonValues[iCmd - 1], ",")
      IF NOT ERROR THEN
        FOR EACH sTemp IN aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
      IF cmbAVCommand.Text THEN TRY txtAVHelp.Text = AVControl.sDenonInfo[cmbAVCommand.index - 1]
    CASE "onkyo"
      TRY aScan = Split(AVControl.sOnkyoValues[iCmd - 1], ",")
      IF NOT ERROR THEN
        FOR EACH sTemp IN aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
      IF cmbAVCommand.Text THEN TRY txtAVHelp.Text = AVControl.sOnkyoInfo[cmbAVCommand.index - 1]
    CASE "iport"
      TRY aScan = Split(AVControl.sIPortValues[iCmd - 1], ",")
      IF NOT ERROR THEN
        FOR EACH sTemp IN aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
      IF cmbAVCommand.Text THEN TRY txtAVHelp.Text = AVControl.sIPortInfo[cmbAVCommand.index - 1]
    CASE "squeezeserver"
      TRY aScan = Split(AVControl.sSqueezeServerValues[iCmd - 1], ",")
      IF NOT ERROR THEN
        FOR EACH sTemp IN aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
      IF cmbAVCommand.Text THEN TRY txtAVHelp.Text = AVControl.sSqueezeServerInfo[cmbAVCommand.index - 1]
    CASE "sharptv"
      TRY aScan = Split(AVControl.sSharpTVValues[iCmd - 1], ",")
      IF NOT ERROR THEN
        FOR EACH sTemp IN aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
      IF cmbAVCommand.Text THEN TRY txtAVHelp.Text = AVControl.sSharpTVInfo[cmbAVCommand.index - 1]
    CASE "lgtv"
      TRY aScan = Split(AVControl.sLGTVValues[iCmd - 1], ",")
      IF NOT ERROR THEN
        FOR EACH sTemp IN aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          INC iCnt
        NEXT
      ENDIF
      IF cmbAVCommand.Text THEN TRY txtAVHelp.Text = AVControl.sLGTVInfo[cmbAVCommand.index - 1]
  END SELECT

END

PUBLIC SUB btnAVTest_Click()

  AVControl.Set(cmbAVModel.Text, cmbAVCommand.Text, cmbAVValue.Text, txtAVAddress.Text)

END

PUBLIC SUB chkRandom_Click()

  IF chkRandom.Value THEN
    Label23.Text = "Min. Seconds"
    Label24.Enabled = TRUE
    vbDelayMax.Enabled = TRUE
  ELSE
    Label23.Text = "Seconds"
    Label24.Enabled = FALSE
    vbDelayMax.Enabled = FALSE
  ENDIF
  EnableButtons

END

PUBLIC SUB btnRun_Click()

  Events.RunAction(rResult!id, 0, 0)
  Balloon("Action executed", btnRun)

END

PUBLIC SUB txtNotifyTitle_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtNotifyText_KeyPress()

  EnableButtons()

END

PUBLIC SUB vbDelay_KeyPress()

  EnableButtons()

END

PUBLIC SUB vbDelayMax_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtAVAddress_KeyPress()

  EnableButtons()

END

PUBLIC SUB cmbAVValue_Click()

  EnableButtons()

END

PUBLIC SUB txtLEDMessage_KeyPress()

  EnableButtons()

END

PUBLIC SUB cmbColor_Click()

  EnableButtons()

END

PUBLIC SUB cmbSpeed_Click()

  EnableButtons()

END

PUBLIC SUB vbID_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtLog_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtSound_KeyPress()

  EnableButtons()

END

PUBLIC SUB spVolume_Change()

  EnableButtons()

END

PUBLIC SUB txtIRCommand_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtToSMS_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtSMSMessage_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtSendTweet_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtExecuteCmd_KeyPress()

  EnableButtons()

END

PUBLIC SUB cmbSpeakVoice_Click()

  EnableButtons()

END

PUBLIC SUB txtSpeakText_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtToAddress_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtSubject_KeyPress()

  EnableButtons()

END

PUBLIC SUB txtMessage_KeyPress()

  EnableButtons()

END

PUBLIC SUB cmbVariables_Click()

  EnableButtons()

END

PUBLIC SUB txtVariableValue_KeyPress()

  EnableButtons()

END

PUBLIC SUB cmbDevices_Click()

  EnableButtons()

END

PUBLIC SUB cmbValue_Click()

  EnableButtons()

END

PUBLIC SUB txtDeviceValue_KeyPress()

  EnableButtons()

END

PUBLIC SUB btnScriptEditor_Click()

  txtScript.Text = FActionScriptEditor.Run(txtScript.Text)

END
