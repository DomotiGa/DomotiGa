' Gambas class file

' Description:
' FActionEditor.class
' Support for creating and edit actions.

' Development Status:
' Just started, not working 100% yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE rResult AS Result
PRIVATE rResultActionTypes AS Result
PRIVATE rResultDevices AS Result
PUBLIC bAddAction AS Boolean
PRIVATE iSavedActionType AS Integer

PUBLIC SUB Form_Open()

  DIM vValue AS Variant

  IF bAddAction THEN ME.Text = ("Add Action")
  ME.Move(FMain.X + 50, FMain.Y + 70)

  ' fill combo with available global vars
  cmbVariables.Add("")
  FOR EACH vValue IN Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  NEXT

  ' fill combo with available devices
  cmbDevices.Add("")
  rResultDevices = Main.hDB.Exec("SELECT * FROM devices")
  IF rResultDevices THEN
    IF rResultDevices.Count THEN
      FOR EACH rResultDevices
        IF rResultDevices!enabled = TRUE THEN cmbDevices.Add(rResultDevices!name)
      NEXT
    ENDIF
  ELSE
    Message.Info(("Error: couldn't find trigger details!"))
    RETURN
  ENDIF

  IF NOT bAddAction THEN
    ' fetch action details
    rResult = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1", FEventEditor.iAction)
    IF NOT rResult THEN
      Message.Info(("Error: couldn't find trigger details!"))
      RETURN
    ENDIF
    IF rResult.Count = 1 THEN
      txtActionName.Text = rResult!name
      ' fetch actiontype values
      rResultActionTypes = Main.hDB.Exec("SELECT * FROM actiontypes WHERE id = &1", rResult!type)
      IF rResultActionTypes THEN
        IF rResultActionTypes.Count THEN
          ' select tab
          tabActionTypes.Index = rResultActionTypes!tab
          tabActionTypes.SetFocus()
        ENDIF
      ENDIF
      iSavedActionType = rResult!type
      ' preload controls to values from database
      SELECT rResult!type
        CASE 1 ' set device value
          IF rResult!param1 THEN cmbDevices.Text = GetDeviceName(rResult!param1)
          cmbValue.Text = rResult!param2
          txtDeviceValue.Text = rResult!param3
          tabActionTypes.Index = 0
        CASE 2 ' set global var
          cmbVariables.Text = rResult!param1
          txtVariableValue.Text = rResult!param2
          tabActionTypes.Index = 1
        CASE 3 ' sent e-mail
          txtToAddress.Text = rResult!param1
          txtSubject.Text = rResult!param2
          txtMessage.Text = rResult!param3
          tabActionTypes.Index = 2
        CASE 4 ' speak text
          cmbSpeakVoice.Text = rResult!param1
          txtSpeakText.Text = rResult!param2
          tabActionTypes.Index = 3
        CASE 5 ' execute command
          txtExecuteCmd.Text = rResult!param1
          tabActionTypes.Index = 4
        CASE 6 ' send tweet
          txtSendTweet.Text = rResult!param1
          tabActionTypes.Index = 5
        CASE 7 ' send SMS
          txtToSMS.Text = rResult!param1
          txtSMSMessage.Text = rResult!param2
          tabActionTypes.Index = 6
      END SELECT
    ELSE
      bAddAction = TRUE
    ENDIF
  ENDIF

END

PUBLIC SUB txtActionName_Change()

  EnableButtons()

END

PUBLIC SUB tabActionTypes_Click()

  EnableButtons()

END

PRIVATE SUB EnableButtons()

  btnSave.Enabled = TRUE
  btnDeleteAction.Enabled = TRUE
  btnNewAction.Enabled = TRUE

END

PUBLIC SUB btnSave_Click()

  DIM rResultUpdate AS Result
  DIM iType AS Integer
  DIM sSql, sParam1, sParam2, sParam3, sParam4, sParam5 AS String

  IF NOT txtActionName.Text THEN
    Balloon(("Please enter a name for this action!"), txtActionName)
    RETURN
  ENDIF

  iType = tabActionTypes.Index + 1

  ' active tab is different then saved action type
  IF iType <> iSavedActionType THEN
    Message("You changed action type, sure to save current active tab?", "Ok")
  ENDIF

  SELECT iType
    CASE 1 ' set device
      IF NOT cmbDevices.Text THEN
        Balloon(("Please select a device!"), cmbDevices)
        RETURN
      END IF
      sParam1 = GetDeviceId(cmbDevices.Text)
      IF NOT cmbValue.Text THEN
        Balloon(("Please select a field to set!"), cmbValue)
        RETURN
      END IF
      sParam2 = cmbValue.Text
      IF NOT txtDeviceValue.Text THEN
        Balloon(("Please enter a value to set!"), txtDeviceValue)
        RETURN
      END IF
      sParam3 = txtDeviceValue.Text
    CASE 2 ' set globalvar
      IF NOT cmbVariables.Text THEN
        Balloon(("Please select or enter a new variable!"), cmbVariables)
        RETURN
      END IF
      sParam1 = cmbVariables.Text
      IF NOT txtVariableValue.Text THEN
        Balloon(("Please enter a value to set!"), txtVariableValue)
        RETURN
      END IF
      sParam2 = txtVariableValue.Text
    CASE 3 ' send e-mail message
      IF NOT txtToAddress.Text THEN
        Balloon(("Please enter a e-mail address!"), txtToAddress)
        RETURN
      END IF
       IF NOT txtSubject.Text THEN
        Balloon(("Please enter a subject!"), txtSubject)
        RETURN
      END IF
       IF NOT txtMessage.Text THEN
        Balloon(("Please enter a msg to send!"), txtMessage)
        RETURN
      END IF
      sParam1 = txtToAddress.Text
      sParam2 = txtSubject.Text
      sParam3 = txtMessage.Text
    CASE 4
      IF NOT cmbSpeakVoice.Text THEN
        Balloon(("Please enter a voicename or select type!"), cmbSpeakVoice)
        RETURN
      END IF
      IF NOT txtSpeakText.Text THEN
        Balloon(("Please enter a text to speak!"), txtSpeakText)
        RETURN
      END IF
      sParam1 = cmbSpeakVoice.Text
      sParam2 = txtSpeakText.Text
    CASE 5 ' run shell command
      IF NOT txtExecuteCmd.Text THEN
        Balloon(("Please enter a command to execute!"), txtExecuteCmd)
        RETURN
      END IF
      sParam1 = txtExecuteCmd.Text
    CASE 6 ' send tweet message
      IF NOT txtSendTweet.Text THEN
        Balloon(("Please enter a message to tweet!"), txtSendTweet)
        RETURN
      END IF
      sParam1 = txtSendTweet.Text
    CASE 7
      IF NOT txtToSMS.Text THEN
        Balloon(("Please enter a number to SMS to!"), txtToSMS)
        RETURN
      END IF
      IF NOT txtSMSMessage.Text THEN
        Balloon(("Please enter a message to send!"), txtSMSMessage)
        RETURN
      END IF
      sParam1 = txtToSMS.Text
      sParam2 = txtSMSMessage.Text
  END SELECT

  IF bAddAction THEN
  IF ActionNameExist(txtActionName.Text) THEN
    Balloon(("Please enter a unique name for this action!"), txtActionName)
    RETURN
  END IF
    Main.hDB.Begin()
    rResult = Main.hDB.Create("actions")
    rResult!name = txtActionName.Text
    rResult!type = iType
    rResult!param1 = sParam1
    rResult!param2 = sParam2
    rResult!param3 = sParam3
    rResult!param4 = sParam4
    rResult!param5 = sParam5
    rResult.Update()
    Main.hDB.Commit()
  ELSE
    ' save new trigger settings
    sSql = "UPDATE actions SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7 WHERE id = &8"
    rResultUpdate = Main.hDB.Exec(sSql, txtActionName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, rResult!id)
  ENDIF

  IF FEventEditor.Id THEN
    IF FEventEditor.iEditingAction = 1 THEN
      FEventEditor.GetActions(FEventEditor.cmbAction1)
      FEventEditor.cmbAction1.Text = txtActionName.Text
    ENDIF
    IF FEventEditor.iEditingAction = 2 THEN
      FEventEditor.GetActions(FEventEditor.cmbAction2)
      FEventEditor.cmbAction2.Text = txtActionName.Text
    ENDIF
    IF FEventEditor.iEditingAction = 3 THEN
      FEventEditor.GetActions(FEventEditor.cmbAction3)
      FEventEditor.cmbAction3.Text = txtActionName.Text
    ENDIF
  ENDIF

  bAddAction = FALSE
  ME.Close

END

PUBLIC SUB btnNewAction_Click()

  bAddAction = TRUE
  btnSave_Click()

END

PUBLIC SUB btnCancel_Click()

  ME.Close

END

PRIVATE SUB ActionNameExist(sName AS String) AS Boolean

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  IF rResultAction THEN
    IF rResultAction.Count THEN
      RETURN TRUE
    END IF
  END IF
  RETURN FALSE

END

PUBLIC SUB GetDeviceName(iId AS Integer) AS String

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!name
    END IF
  END IF
  RETURN ""

END

PUBLIC SUB GetDeviceId(sName AS String) AS Integer

  DIM rResultDevName AS result

  rResultDevName = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sName)
  IF rResultDevName THEN
    IF rResultDevName.Count >= 1 THEN
      RETURN rResultDevName!id
    END IF
  END IF
  RETURN 0

END

PUBLIC SUB btnDeleteAction_Click()

  DIM iId AS Integer

  SELECT Message.Question(("Are you sure that you want to delete this action?"), ("Yes"), ("No"))
    CASE 1
      iId = GetActionId(txtActionName.Text) 
      IF iId THEN
        Main.hDB.Exec("DELETE FROM actions WHERE id = &1", iId)
      END IF
      IF FEventEditor.Id THEN
        IF FEventEditor.iEditingAction = 1 THEN
          FEventEditor.GetActions(FEventEditor.cmbAction1)
        ENDIF
        IF FEventEditor.iEditingAction = 2 THEN
          FEventEditor.GetActions(FEventEditor.cmbAction2)
        ENDIF
        IF FEventEditor.iEditingAction = 3 THEN
          FEventEditor.GetActions(FEventEditor.cmbAction3)
        ENDIF
      ENDIF
      ME.Close
  END SELECT

END

PRIVATE SUB GetActionId(sName AS String) AS Integer

  DIM rResultAction AS Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  TRY RETURN rResultAction!id

END
