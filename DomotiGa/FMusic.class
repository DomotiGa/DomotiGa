' Gambas class file

' Description:
' FMusic.class
' Room for audio player controls.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2012 Ron Klinkien

' Credits:
' Sebastiaan for SqueezePlayer code and Music GUI.

' Read file called COPYING for license details.

PUBLIC SUB Form_Open()

  IF Main.bOnkyoEnabled THEN
    pnlOnkyo.Enabled = TRUE
  ELSE
    pnlOnkyo.Enabled = FALSE
  ENDIF
  IF Main.bDenonEnabled THEN
    pnlDenon.Enabled = TRUE
  ELSE
    pnlDenon.Enabled = FALSE
  ENDIF
  IF Main.bSqueezeServerEnabled THEN
    pnlSqueeze.Enabled = TRUE
  ELSE
    pnlSqueeze.Enabled = FALSE
  ENDIF
  IF Main.bIPortEnabled THEN
    pnlIPort.Enabled = TRUE
  ELSE
    pnlIPort.Enabled = FALSE
  ENDIF
  pnlDenon.Hide
  pnlOnkyo.Hide
  pnlIPort.Hide
  pnlSqueeze.Hide

END

PUBLIC SUB Form_Resize()

  pnlSqueeze.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  pnlDenon.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  pnlOnkyo.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  pnlIPort.Move(4, 30, ME.ClientWidth - 10, ME.ClientHeight - 31)
  HBox1.Width = ME.ClientWidth - 15

END

PUBLIC SUB btnOnkyo_Click()

  btnOnkyo.Enabled = FALSE
  btnDenon.Enabled = TRUE
  btnIPort.Enabled = TRUE
  btnSqueeze.Enabled = TRUE
  btnSqueezeRefresh.Visible = FALSE
  pnlOnkyo.Show
  pnlDenon.Hide
  pnlIPort.Hide
  pnlSqueeze.Hide

END

PUBLIC SUB btnDenon_Click()

  btnDenon.Enabled = FALSE
  btnOnkyo.Enabled = TRUE
  btnIPort.Enabled = TRUE
  btnSqueeze.Enabled = TRUE
  btnSqueezeRefresh.Visible = FALSE
  pnlDenon.Show
  pnlOnkyo.Hide
  pnlIPort.Hide
  pnlSqueeze.Hide

END

PUBLIC SUB btnSqueeze_Click()

  IF Main.bSqueezeServerEnabled THEN
    btnSqueeze.Enabled = FALSE
    btnDenon.Enabled = TRUE
    btnOnkyo.Enabled = TRUE
    btnIPort.Enabled = TRUE
    btnSqueezeRefresh.Visible = TRUE
    SqueezeAddPlayers()
    SqueezeAddAlbums()
    pnlSqueeze.Show
    pnlDenon.Hide
    pnlOnkyo.Hide
    pnlIPort.Hide
    tmrCurrentSong.Enabled = TRUE
  ENDIF

END

PRIVATE SUB SqueezeAddPlayers()

  DIM s, sName, sSql AS String
  DIM iPosStart, iPosStop, iCount AS Integer
  DIM aPlayers AS NEW String[]
  DIM rResult AS Result
  DIM bConnected AS Boolean

  tbvSqueezePlayers.Clear()
  sSql = "SELECT devices.name,devices.address,interfaces.name AS 'interfacename' FROM devices LEFT JOIN interfaces ON interfaces.id = devices.interface"
  sSql &= " WHERE interfaces.name = 'SqueezeServer Interface' "

  rResult = Main.hDB.Exec(sSql)
  IF NOT rResult THEN
    Message.Info(("Error: table 'devices' not found!"))
    RETURN
  ENDIF
  WITH tbvSqueezePlayers
    .Font.Size = "9"
    .Rows.Count = rResult.Count
    .Columns.Count = 3
    .Columns[0].Width = 20
    .Columns[1].Width = 200
    .Columns[1].Title = ("Name")
    .Columns[2].Width = 100
    .Columns[2].Title = ("Status")
  END WITH
  FOR iCount = 0 TO rResult.Count - 1
    IF Main.bServer THEN
      bConnected = Main.hSqueezeServer.PlayerConnectedToServer(rResult!address)
    ELSE
      bConnected = XMLClient.SqueezeboxGetIsPlayerConnectedToServer(rResult!address)
    ENDIF
    IF bConnected THEN
      tbvSqueezePlayers[iCount, 0].Picture = Picture[Main.sBaseDir & "/icons/green-icon.png"]
      tbvSqueezePlayers[iCount, 2].Text = "Online"
    ELSE
      tbvSqueezePlayers[iCount, 0].Picture = Picture[Main.sBaseDir & "/icons/red-icon.png"]
      tbvSqueezePlayers[iCount, 2].Text = "Offline"
    ENDIF
    tbvSqueezePlayers[iCount, 1].Text = rResult!name
  NEXT

END

PRIVATE SUB SqueezeAddAlbums()

  DIM iPos, iCount AS Integer
  DIM s, sId, sName AS String
  DIM aAlbums AS NEW String[]

  IF Main.bServer THEN
    aAlbums = Main.hSqueezeServer.GetAlbums()
  ELSE
    aAlbums = XMLClient.SqueezeboxGetAlbums()
  ENDIF
  IF aAlbums.Count > 0 THEN
    WITH tbvSqueezeAlbums
      .Font.Size = "9"
      .Rows.Count = aAlbums.Count
      .Columns.Count = 2
      .Columns[0].Width = 30
      .Columns[0].Title = ("Id")
      .Columns[1].Width = 200
      .Columns[1].Title = ("Name")
    END WITH
    iCount = 0
    FOR EACH s IN aAlbums
      iPos = InStr(s, "^")
      sId = Mid(s, 1, iPos - 1)
      sName = Mid(s, iPos + 1)
      tbvSqueezeAlbums[iCount, 0].Text = sId
      tbvSqueezeAlbums[iCount, 1].Text = sName
      iCount = iCount + 1
    NEXT
  ENDIF

END

PUBLIC SUB btnIPort_Click()

  btnIPort.Enabled = FALSE
  btnSqueeze.Enabled = TRUE
  btnDenon.Enabled = TRUE
  btnOnkyo.Enabled = TRUE
  btnSqueezeRefresh.Visible = FALSE
  pnlIPort.Show
  pnlSqueeze.Hide
  pnlDenon.Hide
  pnlOnkyo.Hide

END

PUBLIC SUB slOnkyoVolume_Change()

  ControlOnkyo("volume", slOnkyoVolume.Value)
  lcdOnkyoVolume.Value = slOnkyoVolume.Value

END

PUBLIC SUB btnOnkyoMute_Click()

  IF btnOnkyoMute.Value = TRUE THEN
    ControlOnkyo("mute", "on")
  ELSE
    ControlOnkyo("mute", "off")
  ENDIF

END

PRIVATE SUB ControlOnkyo(sCmd AS String, sValue AS String)

  IF Main.bServer THEN
    Main.hOnkyo.SetCommand(sCmd, sValue, 1)
  ELSE
    XMLClient.AVSetControl("onkyo", sCmd, sValue, 1)
  ENDIF

END

PRIVATE SUB ControlDenon(sCmd AS String, sValue AS String)

  IF Main.bServer THEN
    Main.hDenon.SetCommand(sCmd, sValue, 1)
  ELSE
    XMLClient.AVSetControl("denon", sCmd, sValue, 1)
  ENDIF

END

PUBLIC SUB InputSelectOnkyo_Click()

  ControlOnkyo("input", LAST.Tag)

END

PUBLIC SUB tbtnOnkyoPower_Click()

  IF tbtnOnkyoPower.Value THEN
    tbtnOnkyoPower.Text = "On"
    ControlOnkyo("power", "on")
  ELSE
    tbtnOnkyoPower.Text = "Standby"
    ControlOnkyo("power", "off")
  ENDIF

END

PUBLIC SUB tbtnDenonPower_Click()

  IF tbtnDenonPower.Value THEN
    tbtnDenonPower.Text = "On"
    ControlDenon("power", "on")
  ELSE
    tbtnDenonPower.Text = "Standby"
    ControlDenon("power", "off")
  ENDIF

END

PUBLIC SUB slDenonVolume_Change()

  ControlDenon("volume", slDenonVolume.Value)
  lcdDenonVolume.Value = slDenonVolume.Value

END

PUBLIC SUB btnDenonMute_Click()

  IF btnDenonMute.Value = TRUE THEN
    ControlDenon("mute", "on")
  ELSE
    ControlDenon("mute", "off")
  ENDIF

END

PUBLIC SUB btnOnkyoVolUp_Click()

  ControlOnkyo("volume", "up1")

END

PUBLIC SUB btnOnkyoVolDown_Click()

  ControlOnkyo("volume", "down1")

END

PUBLIC SUB btnIPortPlayPause_Click()

  ControlIPort("playctrl", "play")

END

PRIVATE SUB ControlIPort(sCmd AS String, sValue AS String)

  IF Main.bServer THEN
    Main.hIPort.SetCommand(sCmd, sValue, 1)
  ELSE
    XMLClient.AVSetControl("iport", sCmd, sValue, 1)
  ENDIF

END

PUBLIC SUB btnIPortStop_Click()

  ControlIPort("playctrl", "stop")

END

PUBLIC SUB btnIPortPrev_Click()

  ControlIPort("playctrl", "prev")

END

PUBLIC SUB btnIPortNext_Click()

  ControlIPort("playctrl", "next")

END

PUBLIC SUB btnIPortRew_Click()

  ControlIPort("playctrl", "startrew")

END

PUBLIC SUB btnIPortFF_Click()

  ControlIPort("playctrl", "startff")

END

PUBLIC SUB btnIPortEndFFRew_Click()

  ControlIPort("playctrl", "endffrew")

END

PUBLIC SUB btnIPortLEDOff_Click()

  ControlIPort("ledctrl", "off")

END

PUBLIC SUB btnIPortLEDOn_Click()

  ControlIPort("ledctrl", "on")

END

PUBLIC SUB btnSqueezeStop_Click()

  IF Main.bServer THEN
    Main.hSqueezeServer.StopPlayer(txtSqueezePlayerName.Text, txtSqueezePlayerId.Text)
  ELSE
    XMLClient.SqueezeboxStopPlayer(txtSqueezePlayerName.Text, txtSqueezePlayerId.Text)
  ENDIF
  buttonStatusStop()

END

PUBLIC SUB btnSqueezePrev_Click()

  IF Main.bServer THEN
    Main.hSqueezeServer.PrevNumberPlayer(txtSqueezePlayerName.Text)
  ELSE
    XMLClient.SqueezeboxPrevNumberPlayer(txtSqueezePlayerName.Text)
  ENDIF

END

PUBLIC SUB btnSqueezeNext_Click()

  IF Main.bServer THEN
    Main.hSqueezeServer.NextNumberPlayer(txtSqueezePlayerName.Text)
  ELSE
    XMLClient.SqueezeboxNextNumberPlayer(txtSqueezePlayerName.Text)
  ENDIF

END

PUBLIC SUB btnSqueezePlay_Click()

  IF Main.bServer THEN
    Main.hSqueezeServer.PlayPlayer(txtSqueezePlayerName.Text, txtSqueezePlayerId.Text)
  ELSE
    XMLClient.SqueezeboxPlayPlayer(txtSqueezePlayerName.Text, txtSqueezePlayerId.Text)
  ENDIF
  buttonStatusPlay()

END

PRIVATE SUB buttonStatusStop()

  btnSqueezePlay.Enabled = TRUE
  btnSqueezeStop.Enabled = FALSE
  btnSqueezePause.Enabled = FALSE
  btnSqueezeNext.Enabled = FALSE
  btnSqueezePrev.Enabled = FALSE

END

PRIVATE SUB buttonStatusPlay()

  btnSqueezePlay.Enabled = FALSE
  btnSqueezeStop.Enabled = TRUE
  btnSqueezePause.Enabled = TRUE
  btnSqueezeNext.Enabled = TRUE
  btnSqueezePrev.Enabled = TRUE

END

PRIVATE SUB buttonStatusPause()

  btnSqueezePlay.Enabled = TRUE
  btnSqueezeStop.Enabled = TRUE
  btnSqueezePause.Enabled = FALSE
  btnSqueezeNext.Enabled = FALSE
  btnSqueezePrev.Enabled = FALSE

END

PUBLIC SUB slSqueezeVolume_Change()

  lcdSqueezeVolume.Value = slSqueezeVolume.Value
  IF Main.bServer THEN
    Main.hSqueezeServer.SetVolumePlayer(txtSqueezePlayerName.Text, slSqueezeVolume.Value)
  ELSE
    XMLClient.SqueezeboxSetVolumePlayer(txtSqueezePlayerName.Text, slSqueezeVolume.Value)
  ENDIF

END

PUBLIC SUB btnSqueezePlayAlbum_Click()

  DIM iRow AS Integer
  DIM sId, sName, sPlayerName, sPlayerId AS String

  iRow = tbvSqueezeAlbums.Row
  sId = tbvSqueezeAlbums[iRow, 0].Text
  sName = tbvSqueezeAlbums[iRow, 1].Text
  sPlayerName = txtSqueezePlayerName.Text
  sPlayerId = txtSqueezePlayerId.Text
  IF Main.bServer THEN
    Main.hSqueezeServer.ClearPlaylistPlayer(sPlayerName)
    Main.hSqueezeServer.AddAlbumToPlaylistPlayer(sPlayerName, sName)
    Main.hSqueezeServer.PlayPlayer(sPlayerName, sPlayerId)
  ELSE
    XMLClient.SqueezeboxClearPlaylistPlayer(sPlayerName)
    XMLClient.SqueezeboxAddAlbumToPlaylistPlayer(sPlayerName, sName)
    XMLClient.SqueezeboxPlayPlayer(sPlayerName, sPlayerId)
  ENDIF

END

PUBLIC SUB btnSqueezeAddToPlaylist_Click()

  DIM iRow AS Integer
  DIM sId, sName AS String

  iRow = tbvSqueezeAlbums.Row
  sId = tbvSqueezeAlbums[iRow, 0].Text
  sName = tbvSqueezeAlbums[iRow, 1].Text
  IF Main.bServer THEN
    Main.hSqueezeServer.AddAlbumToPlaylistPlayer(txtSqueezePlayerName.Text, sName)
  ELSE
    XMLClient.SqueezeboxAddAlbumToPlaylistPlayer(txtSqueezePlayerName.Text, sName)
  ENDIF

END

PUBLIC SUB tbvSqueezeAlbums_Click()

  DIM iRow AS Integer

  iRow = tbvSqueezeAlbums.Row
  lblSqueezeSelectedAlbum.Text = tbvSqueezeAlbums[iRow, 1].Text

END

PUBLIC SUB btnSqueezePause_Click()

  IF Main.bServer THEN
    Main.hSqueezeServer.PausePlayer(txtSqueezePlayerName.Text, txtSqueezePlayerId.Text)
  ELSE
    XMLClient.SqueezeboxPausePlayer(txtSqueezePlayerName.Text, txtSqueezePlayerId.Text)
  ENDIF
  buttonStatusPause()

END

PUBLIC SUB tmrCurrentSong_Timer()

  DIM sCurrentTitle, sCurrentArtist AS String

  IF txtSqueezePlayerId.Text <> "" THEN
    IF Main.bServer THEN
      sCurrentTitle = Main.hSqueezeServer.GetCurrentTitle(txtSqueezePlayerId.Text)
      sCurrentArtist = Main.hSqueezeServer.GetCurrentArtist(txtSqueezePlayerId.Text)
    ELSE
      sCurrentTitle = XMLClient.SqueezeboxGetCurrentTitlePlayer(txtSqueezePlayerId.Text) 
      sCurrentArtist = XMLClient.SqueezeboxGetCurrentArtistPlayer(txtSqueezePlayerId.Text) 
    ENDIF
    lblSqueezeCurrentTitle.Text = sCurrentTitle
    lblSqueezeCurrentArtist.Text = sCurrentArtist
  ENDIF

END

PUBLIC SUB tbvSqueezePlayers_Click()

  DIM iIndex AS Integer
  DIM sSql, sPlayerId, sPlayerName, sPlayerType, sVolume, sMode, sCurrentTitle, sCurrentArtist, sName, sStatus AS String
  DIM rResult AS Result

  iIndex = tbvSqueezePlayers.Row
  sName = tbvSqueezePlayers[iIndex, 1].Text
  sStatus = tbvSqueezePlayers[iIndex, 2].Text

  sSql = "SELECT address from devices WHERE name = '" & sName & "'"
  rResult = Main.hDB.Exec(sSql)
  IF NOT rResult THEN
    Message.Info(("Error: table 'devices' not found!"))
    RETURN
  ENDIF

  IF sStatus = "Online" THEN
    IF Main.bServer THEN
      sPlayerId = rResult!address 
      sPlayerName = Main.hSqueezeServer.GetPlayerName(sPlayerId)
      sPlayerType = Main.hSqueezeServer.GetIsPlayer(sPlayerId)
      sVolume = Main.hSqueezeServer.GetVolumePlayer(sPlayerId)
      sMode = Main.hSqueezeServer.GetModePlayer(sPlayerId)  
      sCurrentTitle = Main.hSqueezeServer.GetCurrentTitle(sPlayerId)
      sCurrentArtist = Main.hSqueezeServer.GetCurrentArtist(sPlayerId)
    ELSE
      sPlayerId = rResult!address 
      sPlayerName = XMLClient.SqueezeboxGetPlayerName(sPlayerId)
      sPlayerType = XMLClient.SqueezeboxGetIsPlayer(sPlayerId)
      sVolume = XMLClient.SqueezeboxGetVolumePlayer(sPlayerId)
      sMode = XMLClient.SqueezeboxGetModePlayer(sPlayerId)
      sCurrentTitle = XMLClient.SqueezeboxGetCurrentTitlePlayer(sPlayerId)
      sCurrentArtist = XMLClient.SqueezeboxGetCurrentArtistPlayer(sPlayerId)
    ENDIF

    SELECT CASE sMode
      CASE "stop"
        buttonStatusStop()
      CASE "play"
        buttonStatusPlay()
      CASE "pauze"
        buttonStatusPause()
    END SELECT

    IF Len(sVolume) THEN
      fraSqueeVolume.Visible = TRUE
      slSqueezeVolume.Value = Val(sVolume)
      lcdSqueezeVolume.Value = sVolume
    ELSE
      slSqueezeVolume.Value = 0
      lcdSqueezeVolume.Value = 0
      fraSqueeVolume.Visible = FALSE
    ENDIF
    txtSqueezePlayerId.Text = sPlayerId
    txtSqueezePlayerName.Text = sPlayerName
    txtSqueezePlayerType.Text = sPlayerType
    lblSqueezeCurrentTitle.Text = sCurrentTitle
    lblSqueezeCurrentArtist.Text = sCurrentArtist
    frmSqueezeControl.Visible = TRUE
    tbsSqueezeMusic.Visible = TRUE
  ENDIF

CATCH

END

PUBLIC SUB btnSqueezeRefresh_Click()

  SqueezeAddPlayers()

END