' Gambas module file

' Description:
' Devices.module
' Contains code which is device related

' Development Status:
' Working, needs more error checking.
' Things like boolean flags 'device enabled', 'log enabled' are not taken care of yet.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create devices table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB InitTable()

  DIM tableDevices AS Table

  Main.hDB.Tables.Remove("devices")
  tableDevices = Main.hDB.Tables.Add("devices")
  tableDevices.Fields.Add("id", db.Serial)
  tableDevices.Fields.Add("name", db.String, 32)
  tableDevices.Fields.Add("address", db.String, 64)
  tableDevices.Fields.Add("user", db.Integer)
  tableDevices.Fields.Add("module", db.Integer)
  tableDevices.Fields.Add("location", db.Integer)
  tableDevices.Fields.Add("value", db.String, 32)
  tableDevices.Fields.Add("value2", db.String, 32)
  tableDevices.Fields.Add("label", db.String, 32)
  tableDevices.Fields.Add("label2", db.String, 32)
  tableDevices.Fields.Add("onicon", db.String, 32)
  tableDevices.Fields.Add("officon", db.String, 32)
  tableDevices.Fields.Add("interface", db.Integer)
  tableDevices.Fields.Add("firstseen", db.Date)
  tableDevices.Fields.Add("lastseen", db.Date)
  tableDevices.Fields.Add("enabled", db.Boolean)
  tableDevices.Fields.Add("hide", db.Boolean)
  tableDevices.Fields.Add("log", db.Boolean)
  tableDevices.Fields.Add("groups", db.String, 128)
  tableDevices.Fields.Add("graph", db.Boolean)
  tableDevices.Fields.Add("batterystatus", db.String, 32)
  tableDevices.Fields.Add("tampered", db.Boolean)
  tableDevices.Fields.Add("comments", db.String, 0)
  tableDevices.Fields.Add("valuerrddsname", db.String, 32)
  tableDevices.Fields.Add("value2rrddsname", db.String, 32)
  tableDevices.Fields.Add("valuerrdtype", db.String, 32)
  tableDevices.Fields.Add("value2rrdtype", db.String, 32)
  tableDevices.Fields.Add("switchable", db.Boolean)
  tableDevices.Fields.Add("dimable", db.Boolean)
  tableDevices.Fields.Add("x", db.Integer)
  tableDevices.Fields.Add("y", db.Integer)
  tableDevices.Fields.Add("floorplan", db.Integer)
  tableDevices.Fields.Add("lastchanged", db.Date)
  tableDevices.PrimaryKey = ["id"]
  tableDevices.Update()

END

PUBLIC SUB SetDevice(sDeviceName AS String, sValue AS String)

  DIM iInterface AS Integer
  DIM sText, sAddress AS String

  iInterface = FindInterfaceForDevice(sDeviceName)
  sAddress = FindAddressForDevice(sDeviceName)

  SELECT CASE iInterface
    CASE 1 ' RFXCom
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] RFXCom")
    CASE 2 ' Xanura CTX35
      IF Main.bMainDebug THEN
        Main.WriteDebugLog("[Devices] Xanura CTX35")
        Main.WriteDebugLog("[Devices] " & sAddress & " " & sValue)
      END IF
      sText = "Switched " & sDeviceName & " " & sValue
      IF Main.hCTX35 THEN
        Main.hCTX35.sCommandToSend = sAddress & " " & sValue
        Devices.Update(Find(sAddress, iInterface), sValue)
      ELSE
        Main.WriteDebugLog("[Devices] Can't switch device " & sDeviceName & " because CTX35 is disabled!")
      END IF
    CASE 3 ' Midon TEMP08
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Midon TEMP08")
    CASE 8 ' Heyu X10
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Heyu X10")
      sText = "Switched " & sDeviceName & " " & sValue
      Heyu.SendCommand(sAddress, sValue)
    CASE 9 ' Weeder WTSSR
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Weeder WTSSR")
      IF InStr(FindTypeNameForDevice(Find(sAddress, iInterface)), "ITHO Fan on WTSSR") THEN 
        IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] ITHO Fan on WTSSR")
        IF Main.hWeeder THEN
          Main.hWeeder.ControlITHO(sAddress, sValue)
          Devices.Update(Find(sAddress, iInterface), sValue)
        ELSE
          Main.WriteDebugLog("[Devices] Can't switch device " & sDeviceName & " because Weeder is disabled!")
        END IF
      END IF
    CASE -1
      Main.WriteDebugLog("[Devices] Interface for device '" & sDeviceName & "' does not support Write!")
  CASE ELSE 
      Main.WriteDebugLog("[Devices] Unknown Interface type for device '" & sDeviceName & "'!")
  END SELECT

  ' todo check for devices with log switched off
  IF sText THEN VoiceText.Speak(sText)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface with name sInterfaceName, return it's id.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindInterface(sInterfaceName AS String) AS Integer

  DIM rInterface AS Result

  TRY rInterface = Main.hDB.Exec("SELECT * FROM interfaces WHERE name = &1", sInterfaceName)
  IF rInterface THEN
    IF rInterface.Count = 1 THEN 
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Interface with name '" & sInterfaceName & "' has id '" & rInterface!id & "'")
      RETURN rInterface!id
    ELSE
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Interface with name '" & sInterfaceName & "' not found!")
      RETURN 0
    END IF
  ELSE
    IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Cannot get Interface records!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return module/devicetype for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindModuleForDevice(iDeviceId AS Integer) AS Integer

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT module FROM devices WHERE id = &1", iDeviceId)
  RETURN rDevice!module

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindTypeForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result
  DIM iDeviceType AS Integer

  iDeviceType = FindModuleForDevice(iDeviceId)
  TRY rDevice = Main.hDB.Exec("SELECT type FROM devicetypes where id = &1", iDeviceType)
  RETURN rDevice!type

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return typename for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindTypeNameForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result
  DIM iDeviceType AS Integer

  iDeviceType = FindModuleForDevice(iDeviceId)
  TRY rDevice = Main.hDB.Exec("SELECT name FROM devicetypes where id = &1", iDeviceType)
  RETURN rDevice!name

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindNameForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT name FROM devices where id = &1", iDeviceId)
  RETURN rDevice!name

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return log boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindLogForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT log FROM devices where id = &1", iDeviceId)
  RETURN rDevice!log

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return hide boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindHideForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT hide FROM devices where id = &1", iDeviceId)
  RETURN rDevice!hide

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface for device with sdeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindInterfaceForDevice(sDeviceName AS String) AS Integer

  DIM rDevice AS Result
  DIM rResult AS Result

  TRY rDevice = Main.hDB.Exec("SELECT address,name,interface FROM devices WHERE name = &1", sDeviceName)
  ' found only one unique entry?
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same name:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ' ok this one seems useful
  ELSE IF rDevice.Count = 1 THEN
    TRY rResult = Main.hDB.Exec("SELECT mode FROM interfaces WHERE id = &1", rDevice!interface)
    IF InStr(rResult!mode, "Write") THEN
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Interface for device with name '" & sDeviceName & "' is '" & rDevice!interface & "'")
      RETURN rDevice!interface
    ELSE
      'Main.WriteLog("Interface for device with name " & sDeviceName & " is Read-Only!")
      RETURN -1
    END IF
  ' no interface found, something is wrong
  ELSE
    Main.WriteDebugLog("[Devices] Device with name '" & sDeviceName & "' not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find address for device with sDeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindAddressForDevice(sDeviceName AS String) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT address FROM devices WHERE name = &1", sDeviceName)
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same name:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ELSE IF rDevice.Count = 1 THEN
    IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Address for device with name '" & sDeviceName & "' is '" & rDevice!address & "'")
    RETURN rDevice!address
  ELSE
    Main.WriteDebugLog("[Devices] Device with name '" & sDeviceName & "' not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sName, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetValueForDevice(sDeviceName AS String) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value,address FROM devices WHERE name = &1", sDeviceName)
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same name:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ELSE IF rDevice.Count = 1 THEN
    IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Value of device with name '" & sDeviceName & "' is " & rDevice!value)
    RETURN rDevice!value
  ELSE
    Main.WriteDebugLog("[Devices] Device with name '" & sDeviceName & "' not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetCurrentValueForDevice(iId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    RETURN rDevice!value
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current value2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetCurrentValue2ForDevice(iId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value2 FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    RETURN rDevice!value2
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress, return id if found.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Find(sAddress AS String, iInterface AS Integer) AS Integer

  DIM rDevice AS Result
  DIM rResult AS Result

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE address = &1 AND interface = &2", sAddress, iInterface)
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same address:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ELSE IF rDevice.Count = 1 THEN
    IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    IF rDevice!firstseen = "00:00:00" OR rDevice!firstseen = "" THEN
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and '" & rDevice!name & "' is a new device")
      rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
    END IF
    ' if it's hidden we return 0, else we return it's id
    IF rDevice!hide THEN
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and name '" & rDevice!name & "' is set to hide")
      RETURN 0
    ELSE
      RETURN rDevice!id
    END IF
  ELSE
    IF NOT IsBlacklisted(sAddress) THEN Main.WriteDebugLog("[Devices] Device with address " & sAddress & " not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if address is blacklisted and return true
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB IsBlacklisted(sAddress AS String) AS Boolean

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT * FROM deviceblacklist WHERE address = &1", sAddress)
  IF rDevice.Count THEN
    IF Main.bMainDebug THEN Main.WriteDebugLog("[Devices] Address '" & sAddress & "' is blacklisted, so I will ignore it.")
    RETURN TRUE
  END IF

  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device with iId with vValue and vValue2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Update(iId AS Integer, vValue AS Variant, OPTIONAL vValue2 AS Variant) AS Boolean

  DIM rResult, rDevice AS Result
  DIM bUpdated AS Boolean
  DIM sLabel, sLabel2 AS String

  TRY rDevice = Main.hDB.Exec("SELECT label,label2 FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    sLabel = rDevice!label
    sLabel2 = rDevice!label2
  END IF
  IF vValue2 THEN
    IF Comp(vValue2, GetCurrentValue2ForDevice(iId)) <> 0 THEN
      EventLoop.DeviceChange(iId, vValue, sLabel, sLabel2, vValue2)
      bUpdated = TRUE
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value = &3, value2 = &4 WHERE id = &5", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue, vValue2, iId)
    END IF
  ELSE
    IF Comp(vValue, GetCurrentValueForDevice(iId)) <> 0 THEN
      EventLoop.DeviceChange(iId, vValue, sLabel, sLabel2)
      bUpdated = TRUE
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue, iId)
    END IF
  END IF

  IF NOT bUpdated THEN rResult = Main.hDB.Exec("UPDATE devices SET lastseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  IF rResult THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device with iId with vValue2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB UpdateExtra(iId AS Integer, vValue AS Variant) AS Boolean

  DIM rResult AS Result

  rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value2 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue, iId)

  IF rResult THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update battery status for device with iId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Battery(iId AS Integer, vValue AS Variant) AS Boolean

  DIM rResult AS Result

  rResult = Main.hDB.Exec("UPDATE devices SET batterystatus = &1 WHERE id = &2", vValue, iId)

  IF rResult.Count THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' mail battery status for device with low batts
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION MailBatteryStatus()

  DIM rDevice AS Result
  DIM sMessageBody AS String

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE batterystatus = 'low'")
  IF rDevice.Count THEN
    FOR EACH rDevice
      sMessageBody = sMessageBody & "\r" & rDevice!address & " - " & rDevice!name
    NEXT
    ' sent e-mail with lowbatt status
    Mail.SendMail(Application.Name & ": Battery Status", "The Batteries from these Devices have status 'low': \n" & sMessageBody, Main.sEmailToAddress)
  END IF

END
