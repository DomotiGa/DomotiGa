' Gambas module file

' Description:
' Devices.module
' Contains code which is device related.

' Development Status:
' Working, maybe needs more error checking.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create devices table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB InitTable()

  DIM tableDevices AS Table

  Main.hDB.Tables.Remove("devices")
  tableDevices = Main.hDB.Tables.Add("devices")
  tableDevices.Fields.Add("id", db.Serial)
  tableDevices.Fields.Add("name", db.String, 32)
  tableDevices.Fields.Add("address", db.String, 64)
  tableDevices.Fields.Add("user", db.Integer)
  tableDevices.Fields.Add("module", db.Integer)
  tableDevices.Fields.Add("location", db.Integer)
  tableDevices.Fields.Add("value", db.String, 32)
  tableDevices.Fields.Add("value2", db.String, 32)
  tableDevices.Fields.Add("value3", db.String, 32)
  tableDevices.Fields.Add("value4", db.String, 32)
  tableDevices.Fields.Add("label", db.String, 32)
  tableDevices.Fields.Add("label2", db.String, 32)
  tableDevices.Fields.Add("label3", db.String, 32)
  tableDevices.Fields.Add("label4", db.String, 32)
  tableDevices.Fields.Add("onicon", db.String, 32)
  tableDevices.Fields.Add("officon", db.String, 32)
  tableDevices.Fields.Add("dimicon", db.String, 32)
  tableDevices.Fields.Add("interface", db.Integer)
  tableDevices.Fields.Add("firstseen", db.Date)
  tableDevices.Fields.Add("lastseen", db.Date)
  tableDevices.Fields.Add("enabled", db.Boolean)
  tableDevices.Fields.Add("hide", db.Boolean)
  tableDevices.Fields.Add("log", db.Boolean)
  tableDevices.Fields.Add("groups", db.String, 128)
  tableDevices.Fields.Add("graph", db.Boolean)
  tableDevices.Fields.Add("batterystatus", db.String, 32)
  tableDevices.Fields.Add("tampered", db.Boolean)
  tableDevices.Fields.Add("comments", db.String, 0)
  tableDevices.Fields.Add("valuerrddsname", db.String, 32)
  tableDevices.Fields.Add("value2rrddsname", db.String, 32)
  tableDevices.Fields.Add("value3rrddsname", db.String, 32)
  tableDevices.Fields.Add("value4rrddsname", db.String, 32)
  tableDevices.Fields.Add("valuerrdtype", db.String, 32)
  tableDevices.Fields.Add("value2rrdtype", db.String, 32)
  tableDevices.Fields.Add("value3rrdtype", db.String, 32)
  tableDevices.Fields.Add("value4rrdtype", db.String, 32)
  tableDevices.Fields.Add("switchable", db.Boolean)
  tableDevices.Fields.Add("dimable", db.Boolean)
  tableDevices.Fields.Add("extcode", db.Boolean)
  tableDevices.Fields.Add("x", db.Integer)
  tableDevices.Fields.Add("y", db.Integer)
  tableDevices.Fields.Add("floorplan", db.Integer)
  tableDevices.Fields.Add("lastchanged", db.Date)
  tableDevices.PrimaryKey = ["id"]
  tableDevices.Update()

END

PUBLIC SUB SetDevice(sDeviceName AS String, sValue AS String)

  DIM iInterface, iId AS Integer
  DIM sText, sAddress AS String

  iInterface = FindInterfaceForDevice(sDeviceName)
  sAddress = FindAddressForDevice(sDeviceName)

  SELECT CASE iInterface
    CASE 0
      Main.WriteDebugLog("[Devices] Something is wrong, cannot query device correctly!")
    CASE 1 ' RFXCom Receiver
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] RFXCom Receiver can't control anything!")
    CASE 2 ' Xanura CTX35
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Xanura CTX35: " & sAddress & " " & sValue)
      IF Main.hCTX35 THEN
        IF Upper(sValue) <> "STOP" THEN
          Main.hCTX35.sCommandToSend = sAddress & " " & sValue
          Devices.ValueUpdate(Find(sAddress, iInterface), sValue, "", "", "")
          sText = "Switched " & sDeviceName & " " & sValue
        END IF
      ELSE
        Main.WriteDebugLog("[Devices] Can't control device " & sDeviceName & " because CTX35 is disabled!")
      END IF
    CASE 3, 4, 5, 6, 8
      Main.WriteDebugLog("[Devices] Error, read-only interface used for switching!")
    CASE 7 ' Heyu X10
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Heyu X10")
      IF Main.bHeyuEnabled THEN
        sText = "Switched " & sDeviceName & " " & sValue
        Heyu.SendCommand(sAddress, sValue)
        Devices.ValueUpdate(Find(sAddress, iInterface), sValue, "", "", "")
      ELSE
        Main.WriteDebugLog("[Devices] Can't control device " & sDeviceName & " because Heyu is disabled!")
      END IF
    CASE 9 ' Weeder WTSSR
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Weeder WTSSR: " & sAddress & " " & sValue)
      iId = Find(sAddress, iInterface)
      IF Main.hWeeder THEN
        IF iId THEN
          IF InStr(FindTypeNameForDevice(iId), "ITHO ECO Fan") THEN
            IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] ITHO ECO Fan")
            Main.hWeeder.ControlITHO(sAddress, sValue)
            Devices.ValueUpdate(Find(sAddress, iInterface), sValue, "", "", "")
          END IF
        ELSE
          Main.WriteDebugLog("[Devices] ITHO ECO Fan not enabled!")
        END IF
      ELSE
        Main.WriteDebugLog("[Devices] Can't control device " & sDeviceName & " because Weeder is disabled!")
      END IF
    CASE 10 ' Plugwise
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Plugwise Stick: " & sAddress & " " & sValue)
      IF Main.hPlugwise THEN
        Main.hPlugwise.SendCommand(sAddress, sValue)
        Devices.ValueUpdate(Find(sAddress, iInterface), sValue, "", "", "")
        sText = "Switched " & sDeviceName & " " & sValue
      ELSE
        Main.WriteDebugLog("[Devices] Can't control device " & sDeviceName & " because Plugwise is disabled!")
      END IF
    CASE 12 ' RFXCom Transmitter
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] RFXCom Transmitter: " & sAddress & " " & sValue)
      IF Main.hRFXComTX THEN
        IF sValue <> "STOP" THEN
          Main.hRFXComTX.SendCommand(sAddress, sValue)
          Devices.ValueUpdate(Find(sAddress, iInterface), sValue, "", "", "")
          sText = "Switched " & sDeviceName & " " & sValue
        END IF
      ELSE
        Main.WriteDebugLog("[Devices] Can't control device " & sDeviceName & " because RFXCom Transmitter is disabled!")
      END IF
    CASE 13 ' KNX/EIB Interface
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] KNX/EIB Interface: " & sAddress & " " & sValue)
      IF Main.hEIB THEN
        Main.hEIB.SendCommand(sAddress, sValue)
      ELSE
        Main.WriteDebugLog("[Devices] Can't control device " & sDeviceName & " because KNX/EIB is disabled!")
      END IF
    CASE -1
      Main.WriteDebugLog("[Devices] Interface for device '" & sDeviceName & "' does not support Write!")
  CASE ELSE
    Main.WriteDebugLog("[Devices] Unknown Interface type for device '" & sDeviceName & "'!")
  END SELECT

  ' todo check for devices with log switched off
  IF sText THEN VoiceText.Speak(sText)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface with name sInterfaceName, return it's id.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindInterface(sInterfaceName AS String) AS Integer

  DIM rInterface AS Result

  TRY rInterface = Main.hDB.Exec("SELECT * FROM interfaces WHERE name = &1", sInterfaceName)
  IF rInterface.Available THEN
    IF rInterface.Count = 1 THEN 
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Interface with name '" & sInterfaceName & "' has id '" & rInterface!id & "'")
      RETURN rInterface!id
    ELSE
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Interface with name '" & sInterfaceName & "' not found!")
      RETURN 0
    END IF
  ELSE
    IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Cannot get Interface records!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return module/devicetype for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindModuleForDevice(iDeviceId AS Integer) AS Integer

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT module FROM devices WHERE id = &1", iDeviceId)
  IF rDevice.Available THEN
    RETURN rDevice!module
  ELSE
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindTypeForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result
  DIM iDeviceType AS Integer

  iDeviceType = FindModuleForDevice(iDeviceId)
  TRY rDevice = Main.hDB.Exec("SELECT type FROM devicetypes WHERE id = &1", iDeviceType)
  RETURN rDevice!type

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return typename for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindTypeNameForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result
  DIM iDeviceType AS Integer

  iDeviceType = FindModuleForDevice(iDeviceId)
  TRY rDevice = Main.hDB.Exec("SELECT name FROM devicetypes WHERE id = &1", iDeviceType)
  RETURN rDevice!name

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindNameForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iDeviceId)
  RETURN rDevice!name

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for interface with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindNameForInterface(iInterfaceId AS Integer) AS String

  DIM rInterface AS Result

  TRY rInterface = Main.hDB.Exec("SELECT name FROM interfaces WHERE id = &1", iInterfaceId)
  RETURN rInterface!name

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return log boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindLogForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT log FROM devices WHERE id = &1", iDeviceId)

  RETURN rDevice!log

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return hide boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindHideForDevice(iDeviceId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT hide FROM devices WHERE id = &1", iDeviceId)
  RETURN rDevice!hide

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface for device with sdeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindInterfaceForDevice(sDeviceName AS String) AS Integer

  DIM rDevice AS Result
  DIM rResult AS Result

  TRY rDevice = Main.hDB.Exec("SELECT address,name,interface FROM devices WHERE name = &1", sDeviceName)
  ' found only one unique entry?
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same name:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ' ok this one seems useful
  ELSE IF rDevice.Count = 1 THEN
    TRY rResult = Main.hDB.Exec("SELECT mode FROM interfaces WHERE id = &1", rDevice!interface)
    IF InStr(rResult!mode, "Write") THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Interface for device with name '" & sDeviceName & "' is '" & rDevice!interface & "'")
      RETURN rDevice!interface
    ELSE
      ' read-only
      RETURN -1
    END IF
  ' no interface found, something is wrong
  ELSE
    Main.WriteDebugLog("[Devices] Device with name '" & sDeviceName & "' not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find address for device with sDeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindAddressForDevice(sDeviceName AS String) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT address FROM devices WHERE name = &1", sDeviceName)
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same name:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ELSE IF rDevice.Count = 1 THEN
    IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Address for device with name '" & sDeviceName & "' is '" & rDevice!address & "'")
    RETURN rDevice!address
  ELSE
    Main.WriteDebugLog("[Devices] Device with name '" & sDeviceName & "' not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sName, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetValueForDevice(sDeviceName AS String) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value,address FROM devices WHERE name = &1", sDeviceName)
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same name:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ELSE IF rDevice.Count = 1 THEN
    IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Value of device with name '" & sDeviceName & "' is " & rDevice!value)
    RETURN rDevice!value
  ELSE
    Main.WriteDebugLog("[Devices] Device with name '" & sDeviceName & "' not found!")
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetCurrentValueForDevice(iId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    RETURN rDevice!value
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current value2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetCurrentValue2ForDevice(iId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value2 FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    RETURN rDevice!value2
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current value3
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetCurrentValue3ForDevice(iId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value3 FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    RETURN rDevice!value3
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current value4
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetCurrentValue4ForDevice(iId AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT value4 FROM devices WHERE id = &1", iId)
  IF rDevice.Count THEN
    RETURN rDevice!value4
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress, return id if found.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Find(sAddress AS String, iInterface AS Integer, OPTIONAL sDevice AS String) AS Integer

  DIM rDevice, rResult AS Result

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE address LIKE &1 AND interface = &2 AND enabled is TRUE", sAddress, iInterface)
  IF rDevice.Count > 1 THEN
    Main.WriteDebugLog("[Devices] The following devices have same address:")
    FOR EACH rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    NEXT
    RETURN 0
  ELSE IF rDevice.Count = 1 THEN
    IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    IF rDevice!firstseen = "00:00:00" OR rDevice!firstseen = "" THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and '" & rDevice!name & "' is a new device")
      rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
    END IF
    ' if it's hidden we return 0, else we return it's id
    IF rDevice!hide THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and name '" & rDevice!name & "' is set to hide")
      RETURN 0
    ELSE
      RETURN rDevice!id
    END IF
  ELSE
    IF NOT IsBlacklisted(sAddress, iInterface) THEN
      IF sDevice THEN
        Main.WriteDebugLog("[Devices] Device " & sDevice & " with address " & sAddress & " and " & FindNameForInterface(iInterface) & " not found!")
      ELSE
        Main.WriteDebugLog("[Devices] Device with address " & sAddress & " and interface " & FindNameForInterface(iInterface) & " not found!")
      END IF
      RETURN 0
    ELSE
      IF Main.bDevicesDebug THEN
        IF sDevice THEN
          Main.WriteDebugLog("[Devices] Device " & sDevice & " with address " & sAddress & " and interface " & FindNameForInterface(iInterface) & " is blacklisted!")
        ELSE
          Main.WriteDebugLog("[Devices] Device with address " & sAddress & " and interface " & FindNameForInterface(iInterface) & " is blacklisted!")
        END IF
      END IF
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if address is blacklisted and return true
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB IsBlacklisted(sAddress AS String, iInterface AS Integer) AS Boolean

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT * FROM deviceblacklist WHERE address = &1", sAddress)
  IF rDevice.Count THEN
    IF rDevice!id THEN
      IF iInterface = rDevice!id THEN
        IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Address '" & sAddress & "' with Interface '" & FindNameForInterface(iInterface) & "' is blacklisted, so I ignore it.")
        RETURN TRUE
      ELSE
        RETURN FALSE
      END IF
    END IF
    IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Address '" & sAddress & "' is blacklisted, so I ignore it.")
    RETURN TRUE
  END IF
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device with iId with vValue and/or vValue2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ValueUpdate(iId AS Integer, vValue AS Variant, vValue2 AS Variant, vValue3 AS Variant, vValue4 AS Variant) AS Boolean

  DIM rResult, rDevice AS Result
  DIM bUpdated AS Boolean
  DIM sLabel, sLabel2, sLabel3, sLabel4, sValue, sValue2, sValue3, sValue4, sSql AS String

  rDevice = Main.hDB.Exec("SELECT label, label2, label3, label4, value, value2, value3, value4 FROM devices WHERE id = &1", iId)
  IF rDevice.Count = 1 THEN
    sLabel = rDevice!label
    sLabel2 = rDevice!label2
    sLabel3 = rDevice!label3
    sLabel4 = rDevice!label4
    sValue = rDevice!value
    sValue2 = rDevice!value2
    sValue3 = rDevice!value3
    sValue4 = rDevice!value4
  END IF

  IF vValue THEN
    IF Comp(vValue, sValue, gb.Text) <> 0 THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device change triggered for device with id " & iId & " and value1 " & vValue)
      EventLoop.DeviceChanged(iId, "Value", vValue, sLabel)
      bUpdated = TRUE
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue, iId)
    END IF
  END IF
  IF vValue2 THEN
    IF Comp(vValue2, sValue2, gb.Text) <> 0 THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device change triggered for device with id " & iId & " and value2 " & vValue2)
      EventLoop.DeviceChanged(iId, "Value2", vValue2, sLabel2)
      bUpdated = TRUE
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value2 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue2, iId)
    END IF
  END IF
  IF vValue3 THEN
    IF Comp(vValue3, sValue3, gb.Text) <> 0 THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device change triggered for device with id " & iId & " and value3 " & vValue3)
      EventLoop.DeviceChanged(iId, "Value3", vValue3, sLabel3)
      bUpdated = TRUE
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value3 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue3, iId)
    END IF
  END IF
  IF vValue4 THEN
    IF Comp(vValue4, sValue4, gb.Text) <> 0 THEN
      IF Main.bDevicesDebug THEN Main.WriteDebugLog("[Devices] Device change triggered for device with id " & iId & " and value4 " & vValue4)
      EventLoop.DeviceChanged(iId, "Value4", vValue4, sLabel4)
      bUpdated = TRUE
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value4 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue4, iId)
    END IF
  END IF
  IF NOT bUpdated THEN
    rResult = Main.hDB.Exec("UPDATE devices SET lastseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  END IF

  IF rResult THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return description for devicetype with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB FindDescriptionForID(iID AS Integer) AS String

  DIM rDevice AS Result

  TRY rDevice = Main.hDB.Exec("SELECT description FROM devicetypes WHERE id = &1", iID)
  IF rDevice.Available THEN
    RETURN rDevice!description
  ELSE
    RETURN 0
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update battery status for device with iId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Battery(iId AS Integer, vValue AS Variant) AS Boolean

  DIM rResult AS Result

  rResult = Main.hDB.Exec("UPDATE devices SET batterystatus = &1 WHERE id = &2", vValue, iId)

  IF rResult.Count THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' mail battery status for device with battery status set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION MailBatteryStatus()

  DIM rDevice AS Result
  DIM sMessageBody AS String
  DIM bFound AS Boolean

  TRY rDevice = Main.hDB.Exec("SELECT name, address, batterystatus FROM devices WHERE enabled is TRUE")
  IF rDevice.Available THEN
    IF rDevice.Count THEN
      FOR EACH rDevice
        IF rDevice!batterystatus THEN 
          sMessageBody = sMessageBody & "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus
          bFound = TRUE
        END IF
      NEXT
      ' sent e-mail with lowbatt status
      IF bFound THEN Mail.SendMail(Application.Name & ": Battery Status", "These Devices have their Battery status set: \n" & sMessageBody, Main.sEmailToAddress)
    END IF
  END IF

END
