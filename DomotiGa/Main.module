' Gambas module file

' Description:
' Main.module

' DomotiGa - an open source home automation program
' Copyright(C) 2008 Ron Klinkien

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the
' GNU General PUBLIC License for more details.

' You should have received a copy of the GNU General PUBLIC License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

' Main
PUBLIC sBaseDir AS String = User.Home &/ "domotiga"
PUBLIC sSettings AS String
PUBLIC bMainDebug AS Boolean
PUBLIC bExitProgram AS Boolean ' exit program flag
PUBLIC bProgramStartup AS Boolean ' program is started
PRIVATE iLoopTickCount AS Integer ' main loop counter
PUBLIC sStartpage AS String
PUBLIC sLanguage AS String

' Debug
PUBLIC bEventsDebug AS Boolean
PUBLIC bDevicesDebug AS Boolean
PUBLIC bEnergyDebug AS Boolean

' Login
PUBLIC bAuthEnabled AS Boolean
PUBLIC sActiveUser AS String
PUBLIC bUserisAdmin AS Boolean ' logged in user is administrator
PUBLIC bLogout AS Boolean

' Message counters
PUBLIC iNewMails AS Integer
PUBLIC iNewCalls AS Integer
PUBLIC iNewVoicemails AS Integer

' Logfiles
PUBLIC iLogBuffer AS Integer = 10000 ' default size of buffer after logwindows gets flushed
PUBLIC sMainLogFile AS String = "main-" & Format(Now, "yyyy-mm") & ".log"
PUBLIC sSpeakLogFile AS String = "speak-" & Format(Now, "yyyy-mm") & ".log"
PUBLIC sDebugLogFile AS String = "debug-" & Format(Now, "yyyy-mm") & ".log"
PUBLIC hMainLogFile AS File ' main log file
PUBLIC hSpeakLogFile AS File ' speak log file
PUBLIC hDebugLogFile AS File ' debug log file

' Collection with Global Variables (these survive a program restart)
PUBLIC GlobalVar AS NEW Collection

' Time and Date related
PUBLIC bNew_Second AS Boolean
PUBLIC bNew_Msecond_500 AS Boolean
PUBLIC bNew_Msecond_250 AS Boolean
PUBLIC bNew_Minute AS Boolean
PUBLIC bNew_Hour AS Boolean
PUBLIC bNew_Day AS Boolean
PUBLIC bNew_Week AS Boolean
PUBLIC bNew_Month AS Boolean
PUBLIC bNew_Year AS Boolean
PUBLIC dTime AS Date
PUBLIC dTime_Now AS Date
PUBLIC dPrev_Time AS Date
PUBLIC iPrev_Sec AS Integer
PUBLIC iPrev_Min AS Integer
PUBLIC iPrev_Hour AS Integer
PUBLIC iPrev_Mday AS Integer
PUBLIC iPrev_Month AS Integer
PUBLIC iPrev_Year AS Integer
PUBLIC iDelayOccured AS Integer

' Timers
PUBLIC tMainFlush AS Timer
PUBLIC iMainFlushTime AS Integer = 3000
PUBLIC tMainSleep AS Timer
PUBLIC iMainSleepTime AS Integer = 50

' MySQL
PUBLIC sSQLHost AS String
PUBLIC sSQLUser AS String
PUBLIC sSQLPass AS String
PUBLIC sSQLDatabase AS String
PUBLIC bSQLDebug AS Boolean
PUBLIC hDB AS NEW Connection

' Sound
PUBLIC bSoundEnabled AS Boolean ' enable sound support
PUBLIC bSoundDebug AS Boolean ' debug sound
PUBLIC iSoundVolume AS Integer ' default volume level

' VoiceText
PUBLIC bVoiceTextEnabled AS Boolean ' enable TTS support
PUBLIC sVoiceTextEngine AS String ' currently only 'cepstral' and 'espeak' are supported
PUBLIC sVoiceTextVoicesMale AS String ' list of voices, first is default
PUBLIC sVoiceTextVoicesFemale AS String ' list of voices, first is default
PUBLIC sVoiceTextPrefixCmd AS String ' prefix command like 'padsp'
PUBLIC bVoiceTextDebug AS Boolean ' debug TTS

' Astro
PUBLIC iAstroLatitude AS Float
PUBLIC iAstroLongitude AS Float
PUBLIC iAstroTimezone AS Float
PUBLIC sAstroSeasons AS String
PUBLIC sAstroSeasonStarts AS String
PUBLIC sAstroTwilight AS String
PUBLIC bAstroDebug AS Boolean
PUBLIC bAstroDST AS Boolean
PUBLIC sTemperature AS String
PUBLIC sCurrency AS String

' Astro MoonPhase
PUBLIC MoonPhase AS String
PUBLIC MoonZodiac AS String
PUBLIC MoonAge AS Integer
PUBLIC MoonDistance AS Float
PUBLIC MoonLatitude AS Float
PUBLIC MoonLongitude AS Float
PUBLIC MoonIsLeapYear AS Boolean

' Heyu
PUBLIC bHeyuEnabled AS Boolean
PUBLIC sHeyuCommand AS String
PUBLIC bHeyuDebug AS Boolean

' CTX35
PUBLIC bCTX35Enabled AS Boolean
PUBLIC sCTX35SerialPort AS String
PUBLIC sCTX35Baudrate AS String
PUBLIC iCTX35PollTime AS Integer
PUBLIC bCTX35Debug AS Boolean
PUBLIC hCTX35 AS CCTX35

' SMS Modem
PUBLIC bSMSEnabled AS Boolean
PUBLIC sSMSSerialPort AS String
PUBLIC sSMSBaudrate AS String
PUBLIC sSMSPIN AS String
PUBLIC sSMSServiceCentre AS String
PUBLIC sSMSContact AS String
PUBLIC iSMSPollTime AS Integer
PUBLIC bSMSDebug AS Boolean
PUBLIC hSMS AS CSMS

' RFXCom
PUBLIC bRFXComEnabled AS Boolean
PUBLIC sRFXComTCPHost AS String
PUBLIC iRFXComTCPPort AS Integer
PUBLIC sRFXComSerialPort AS String
PUBLIC sRFXComBaudrate AS String
PUBLIC sRFXComType AS String
PUBLIC bRFXComDebug AS Boolean
PUBLIC hRFXCom AS CRFXCom

' UPS
PUBLIC bUPSEnabled AS Boolean
PUBLIC sUPSTCPHost AS String
PUBLIC iUPSTCPPort AS Integer
PUBLIC iUPSPollTime AS Integer
PUBLIC bUPSDebug AS Boolean
PUBLIC hUPS AS CUPS

' E-mail
PUBLIC bEmailEnabled AS Boolean
PUBLIC sEmailSMTPServer AS String
PUBLIC iEmailSMTPPort AS Integer
PUBLIC sEmailFromAddress AS String
PUBLIC sEmailToAddress AS String
PUBLIC sEmailSubject AS String
PUBLIC bEmailDebug AS Boolean

' Gmail RSS
PUBLIC bGmailEnabled AS Boolean
PUBLIC sGmailUser AS String
PUBLIC sGmailPassword AS String
PUBLIC iGmailPolltime AS Integer
PUBLIC bGmailDebug AS Boolean

' Webserver
PUBLIC bWebserverEnabled AS Boolean
PUBLIC sWebserverDocRoot AS String
PUBLIC iWebserverHTTPPort AS Integer
PUBLIC bWebserverDebug AS Boolean
PUBLIC hWebserver AS CWebserver

' AIBO
PUBLIC bAIBOEnabled AS Boolean
PUBLIC iAIBOPollTime AS Integer
PUBLIC bAIBODebug AS Boolean

' GPS
PUBLIC bGPSEnabled AS Boolean
PUBLIC sGPSSerialPort AS String
PUBLIC sGPSBaudrate AS String
PUBLIC iGPSPollTime AS Integer
PUBLIC bGPSDebug AS Boolean
PUBLIC hGPS AS CGPS

' 1-Wire
PUBLIC bOneWireEnabled AS Boolean
PUBLIC sOneWireSerialPort AS String
PUBLIC sOneWireBaudrate AS String
PUBLIC bOneWireDebug AS Boolean
PUBLIC hOneWire AS COneWire

' VISCA
PUBLIC bVISCAEnabled AS Boolean
PUBLIC sVISCASerialPort AS String
PUBLIC sVISCABaudrate AS String
PUBLIC iVISCACameraAddress AS Integer
PUBLIC bVISCADebug AS Boolean
PUBLIC sVISCAVideoDevice AS String
PUBLIC hVISCA AS CVISCA

' VideoServer
PUBLIC bVideoServerEnabled AS Boolean
PUBLIC sVideoServerAddress AS String
PUBLIC iVideoServerPort AS Integer
PUBLIC sVideoServerUser AS String
PUBLIC sVideoServerPassword AS String
PUBLIC bVideoServerDebug AS Boolean
PUBLIC sVideoServerChannel1 AS String
PUBLIC sVideoServerChannel2 AS String
PUBLIC sVideoServerChannel3 AS String
PUBLIC sVideoServerChannel4 AS String

' HDDTemp
PUBLIC bHDDTempEnabled AS Boolean
PUBLIC sHDDTempTCPHost AS String
PUBLIC iHDDTempTCPPort AS Integer
PUBLIC iHDDTempPollTime AS Integer
PUBLIC iHDDTempThreshold AS Integer
PUBLIC bHDDTempDebug AS Boolean

' RRDTool
PUBLIC bRRDToolEnabled AS Boolean
PUBLIC iRRDToolPollTime AS Integer
PUBLIC bRRDToolDebug AS Boolean

' Asterisk *
PUBLIC bAsteriskEnabled AS Boolean
PUBLIC sAsteriskTCPHost AS String
PUBLIC iAsteriskTCPPort AS Integer
PUBLIC iAsteriskPollTime AS Integer
PUBLIC sAsteriskUser AS String
PUBLIC sAsteriskPassword AS String
PUBLIC bAsteriskDebug AS Boolean
PUBLIC hAsterisk AS CAsterisk

' Bluetooth
PUBLIC bBluetoothEnabled AS Boolean
PUBLIC sBluetoothDevice AS String
PUBLIC iBluetoothThreshold AS Integer
PUBLIC iBluetoothPollTime AS Integer
PUBLIC bBluetoothDebug AS Boolean

' Weeder I/O
PUBLIC bWeederEnabled AS Boolean
PUBLIC sWeederSerialPort AS String
PUBLIC bWeederDebug AS Boolean
PUBLIC hWeeder AS CWeeder

' TVGuide
PUBLIC bTVGuideEnabled AS Boolean
PUBLIC sTVGuideGrabCommand AS String
PUBLIC sTVGuideGrabConfig AS String
PUBLIC iTVGuideGrabDays AS Integer
PUBLIC bTVGuideUseCache AS Boolean
PUBLIC bTVGuideDebug AS Boolean

' Server Stats
PUBLIC bServerStatsEnabled AS Boolean
PUBLIC sServerStatsName AS String
PUBLIC bServerStatsDebug AS Boolean

' IRMan Infrared
PUBLIC bIRManEnabled AS Boolean
PUBLIC sIRManSerialPort AS String
PUBLIC bIRManDebug AS Boolean
PUBLIC hIRMan AS CIRMan

' WakeOnLan
PUBLIC hBroadcast AS UdpSocket

' Plugwise
PUBLIC bPlugwiseEnabled AS Boolean
PUBLIC sPlugwiseSerialPort AS String
PUBLIC iPlugwisePolltime AS Integer
PUBLIC bPlugwiseDebug AS Boolean
PUBLIC hPlugwise AS CPlugwise

' Fritz!Box
PUBLIC bFritzBoxEnabled AS Boolean
PUBLIC sFritzBoxTCPHost AS String
PUBLIC bFritzBoxDebug AS Boolean
PUBLIC hFritzBox AS CFritzBox

' Images
PUBLIC pLedOn AS Picture
PUBLIC pLedOff AS Picture

' set language and run application
PUBLIC FUNCTION Main() AS Boolean

  ' use development database settings if available
  IF Exist(sBaseDir &/ "domotiga-dev.conf") THEN
    sSettings = "domotiga-dev.conf"
  ELSE
    sSettings = "domotiga.conf"
  END IF

  ' load program settings
  Main.GetConfig()
  ' set language
  System.Language = Main.sLanguage
  ' open main form
  FMain.Show()

CATCH ' error trap
  Message.Error("Error: " & Error.Text & " " & Error.Code & " " & Error.Where & "\nProgram aborted.")
  Main.WriteLog("Error: " & Error.Text & " " & Error.Code & " " & Error.Where)
  Main.WriteLog("Program abort.")
  QUIT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the MySQL database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectDatabase() AS Boolean

  ' try to close the connection first
  TRY hDB.Close

  ' get a new one
  WITH hDB
    .Type = "mysql"
    .Host = sSQLHost
    .Login = sSQLUser
    .Password = sSQLPass
    .Name = sSQLDatabase
    .Open
  END WITH

  ' all ok
  RETURN TRUE

CATCH ' some errors
   Main.WriteLog("MySQL Error: " & ERROR.Text)
   RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display startup information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DisplayProgramInfo()

  DIM sUptime, sModified AS String

  WITH Stat(Application.Path)
    sModified = Format$(.LastModified, "yyyy-mm-dd at hh:nn:ss")
  END WITH

  EXEC ["uptime"] TO sUptime
  WriteLog("  ---- Program Restart ----")
  WriteLog("Starting " & Application.Name & " V" & Application.Version & " last updated on " & sModified)
  WriteLog("Running on " & System.Host & " (pid " & Application.Id & ") as user " & System.User.Name & " (id " & System.User.Id & ")" & " with language " & System.Language)
  WriteLog("Program directory is '" & sBaseDir & "'.")
  WriteLog("Database settings are stored in '" & sSettings & "'.")
  WriteLog("Active logfiles are '" & sMainLogFile & "', '" & sSpeakLogFile & "' and '" & sDebugLogFile & "'.")
  WriteLog("Running on Gambas version " & GetGambasVersion())
  WriteLog("Uptime is " & Left$(Replace$(sUptime, "  ", " "), -2))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create main directory structure
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB CreateDirectoryTree()

  IF NOT Exist(sBaseDir) THEN 
    WriteLog("Creating default directory structure.")
    TRY MKDIR (sBaseDir)
    TRY MKDIR (sBaseDir &/ "logs")
    TRY MKDIR (sBaseDir &/ "www")
    TRY MKDIR (sBaseDir &/ "icons")
    TRY MKDIR (sBaseDir &/ "images")
    TRY MKDIR (sBaseDir &/ "sounds")
    TRY MKDIR (sBaseDir &/ "rrd")
    TRY MKDIR (sBaseDir &/ "rrd/graphs")
    TRY MKDIR (sBaseDir &/ "tvguide")
    TRY MKDIR (sBaseDir &/ "tvguide/imdb")
    TRY MKDIR (sBaseDir &/ "tvguide/cache")
  END IF
END

PUBLIC SUB SetConfig()

  SetConfigValue("MySQL/Host", sSQLHost)
  SetConfigValue("MySQL/User", sSQLUser)
  SetConfigValue("MySQL/Password", sSQLPass)
  SetConfigValue("MySQL/Database", sSQLDatabase)
  SetConfigValue("MySQL/Debug", bSQLDebug)
  SetConfigValue("Program/Language", sLanguage)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' load config, create default config file if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB GetConfig()

  DIM hSettings AS Settings

  ' load sql db settings from file, if the settings file is not
  ' found then create one with default settings
  IF NOT Exist(sBaseDir &/ sSettings) THEN

    hSettings = NEW Settings(sBaseDir &/ sSettings)
    hSettings["MySQL/Host"] = "localhost"
    hSettings["MySQL/User"] = "domouser"
    hSettings["MySQL/Password"] = "kung-fu"
    hSettings["MySQL/Database"] = "domotiga"
    hSettings["MySQL/Debug"] = 0
    hSettings["Program/Language"] = "en_US.UTF-8"
    hSettings.Save

    ' re-load
    GetConfig()
  ELSE
    sSQLHost = GetConfigValue("MySQL/Host", "localhost")
    sSQLUser = GetConfigValue("MySQL/User", "domouser")
    sSQLPass = GetConfigValue("MySQL/Password", "kung-fu")
    sSQLDatabase = GetConfigValue("MySQL/Database", "domotiga")
    bSQLDebug = GetConfigValue("MySQL/Debug", 0)
    sLanguage = GetConfigValue("Program/Language", "en_US.UTF-8")
  END IF

END

PRIVATE SUB GetSettings()

  DIM rResult AS Result

  ' Main
  rResult = GetSettingTable("main")
  bMainDebug = rResult!debug
  bDevicesDebug = rResult!debugdevices
  bEventsDebug = rResult!debugevents
  bEnergyDebug = rResult!debugenergy
  iMainSleepTime = rResult!sleeptime
  iMainFlushTime = rResult!flushtime
  iLogBuffer = rResult!logbuffer
  bAuthEnabled = rResult!authentication
  sStartPage = rResult!startpage

  ' Sound
  rResult = GetSettingTable("sound")
  bSoundEnabled = rResult!enabled
  bSoundDebug = rResult!debug
  iSoundVolume = rResult!volume

  ' Voice Text
  rResult = GetSettingTable("voicetext")
  bVoiceTextEnabled = rResult!enabled
  sVoiceTextEngine = rResult!engine
  sVoiceTextPrefixCmd = rResult!prefixcmd
  sVoiceTextVoicesMale = rResult!voicesmale
  sVoiceTextVoicesFemale = rResult!voicesfemale
  bVoiceTextDebug = rResult!debug

  ' Astro and Location
  rResult = GetSettingTable("astro")
  iAstroLatitude = rResult!latitude
  iAstroLongitude = rResult!longitude
  iAstroTimezone = rResult!timezone
  sAstroTwilight = rResult!twilight
  sAstroSeasons = rResult!seasons
  sAstroSeasonStarts = rResult!seasonstarts
  bAstroDebug = rResult!debug
  sTemperature = rResult!temperature
  sCurrency = rResult!currency
  bAstroDST = rResult!dst

  ' Heyu
  rResult = GetSettingTable("heyu")  
  bHeyuEnabled = rResult!enabled
  sHeyuCommand = rResult!command
  bHeyuDebug = rResult!debug

  ' CTX35
  rResult = GetSettingTable("ctx35")
  bCTX35Enabled = rResult!enabled
  sCTX35SerialPort = rResult!serialport
  sCTX35Baudrate = rResult!baudrate
  iCTX35PollTime = rResult!polltime
  bCTX35Debug = rResult!debug

  ' SMS
  rResult = GetSettingTable("sms")
  bSMSEnabled = rResult!enabled
  sSMSSerialPort = rResult!serialport
  sSMSBaudrate = rResult!baudrate
  iSMSPollTime = rResult!polltime
  sSMSPIN = rResult!pin
  sSMSServiceCentre = rResult!servicecentre
  sSMSContact = rResult!contact
  bSMSDebug = rResult!debug

  ' RFXCom
  rResult = GetSettingTable("rfxcom")
  bRFXcomEnabled = rResult!enabled
  sRFXComTCPHost = rResult!tcphost
  iRFXComTCPPort = rResult!tcpport
  sRFXComType = rResult!type
  sRFXComSerialPort = rResult!serialport
  sRFXComBaudrate = rResult!baudrate
  bRFXcomDebug = rResult!debug

  ' E-Mail
  rResult = GetSettingTable("email")
  bEmailEnabled = rResult!enabled
  sEmailSMTPServer = rResult!smtpserver
  iEmailSMTPPort = rResult!smtpport
  sEmailFromAddress = rResult!fromaddress
  sEmailToAddress = rResult!toaddress
  bEmailDebug = rResult!debug

  ' Gmail RSS
  rResult = GetSettingTable("gmail")
  bGmailEnabled = rResult!enabled
  sGmailUser = rResult!user
  sGmailPassword = rResult!password
  iGmailPolltime = rResult!polltime
  bGmailDebug = rResult!debug

  ' UPS
  rResult = GetSettingTable("ups")
  bUPSEnabled = rResult!enabled
  sUPSTCPHost = rResult!tcphost
  iUPSTCPPort = rResult!tcpport
  iUPSPollTime = rResult!polltime
  bUPSDebug = rResult!debug

  ' Webserver
  rResult = GetSettingTable("webserver")
  bWebserverEnabled = rResult!enabled
  sWebserverDocRoot = rResult!docroot
  iWebserverHTTPPort = rResult!httpport
  bWebserverDebug = rResult!debug

  ' AIBO
  rResult = GetSettingTable("aibo")
  bAIBOEnabled = rResult!enabled
  iAIBOPollTime = rResult!polltime
  bAIBODebug = rResult!debug

  ' GPS
  rResult = GetSettingTable("gps")
  bGPSEnabled = rResult!enabled
  sGPSSerialPort = rResult!serialport
  sGPSBaudrate = rResult!baudrate
  iGPSPollTime = rResult!polltime
  bGPSDebug = rResult!debug

  ' OneWire
  rResult = GetSettingTable("onewire")
  bOneWireEnabled = rResult!enabled
  sOneWireSerialPort = rResult!serialport
  sOneWireBaudrate = rResult!baudrate
  bOneWireDebug = rResult!debug

  ' VISCA
  rResult = GetSettingTable("visca")
  bVISCAEnabled = rResult!enabled
  sVISCASerialPort = rResult!serialport
  sVISCABaudrate = rResult!baudrate
  iVISCACameraAddress = rResult!cameraaddress
  sVISCAVideoDevice = rResult!device
  bVISCADebug = rResult!debug

  ' HDDTemp
  rResult = GetSettingTable("hddtemp")
  bHDDTempEnabled = rResult!enabled
  sHDDTempTCPHost = rResult!tcphost
  iHDDTempTCPPort = rResult!tcpport
  iHDDTempPollTime = rResult!polltime
  iHDDTempThreshold = rResult!threshold
  bHDDTempDebug = rResult!debug

  ' VideoServer
  rResult = GetSettingTable("videoserver")
  bVideoServerEnabled = rResult!enabled
  sVideoServerAddress = rResult!tcphost
  iVideoServerPort = rResult!tcpport
  sVideoServerUser = rResult!user
  sVideoServerPassword = rResult!password
  bVideoServerDebug = rResult!debug
  sVideoServerChannel1 = rResult!channel1
  sVideoServerChannel2 = rResult!channel2
  sVideoServerChannel3 = rResult!channel3
  sVideoServerChannel4 = rResult!channel4

  ' RRDTool
  rResult = GetSettingTable("rrdtool")
  bRRDToolEnabled = rResult!enabled
  iRRDToolPollTime = rResult!polltime
  bRRDToolDebug = rResult!debug

  ' Asterisk *
  rResult = GetSettingTable("asterisk")
  bAsteriskEnabled = rResult!enabled
  sAsteriskTCPHost = rResult!tcphost
  iAsteriskTCPPort = rResult!tcpport
  iAsteriskPollTime = rResult!polltime
  sAsteriskUser = rResult!user
  sAsteriskPassword = rResult!password
  bAsteriskDebug = rResult!debug

  ' Bluetooth
  rResult = GetSettingTable("bluetooth")
  bBluetoothEnabled = rResult!enabled
  sBluetoothDevice = rResult!device
  iBluetoothThreshold = rResult!threshold
  iBluetoothPollTime = rResult!polltime
  bBluetoothDebug = rResult!debug

  ' Weeder I/O
  rResult = GetSettingTable("weeder")
  bWeederEnabled = rResult!enabled
  sWeederSerialPort = rResult!serialport
  bWeederDebug = rResult!debug

  ' XML TVGuide
  rResult = GetSettingTable("tvguide")
  bTVGuideEnabled = rResult!enabled
  sTVGuideGrabCommand = rResult!grabcmd
  sTVGuideGrabConfig = rResult!grabconf
  iTVGuideGrabDays = rResult!grabdays
  bTVGuideUseCache = rResult!usecache
  bTVGuideDebug = rResult!debug

  ' Server Stats
  rResult = GetSettingTable("serverstats")
  bServerStatsEnabled = rResult!enabled
  sServerStatsName = rResult!servername
  bServerStatsDebug = rResult!debug

  ' IRMan Infrared
  rResult = GetSettingTable("irman")
  bIRManEnabled = rResult!enabled
  sIRManSerialPort = rResult!serialport
  bIRManDebug = rResult!debug

  ' Plugwise
  rResult = GetSettingTable("plugwise")
  bPlugwiseEnabled = rResult!enabled
  iPlugwisePolltime = rResult!polltime
  sPlugwiseSerialPort = rResult!serialport
  bPlugwiseDebug = rResult!debug

  ' Fritz!Box
  rResult = GetSettingTable("fritzbox")
  bFritzBoxEnabled = rResult!enabled
  sFritzBoxTCPHost = rResult!tcphost
  bFritzBoxDebug = rResult!debug

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set a value in the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SetConfigValue(sKey AS String, vValue AS Variant)

   DIM hSettings AS Settings

   hSettings = NEW Settings(sBaseDir &/ sSettings)
   hSettings[sKey] = vValue
   hSettings.Save

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get a value from the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION GetConfigValue(sKey AS String, OPTIONAL vValue AS Variant) AS Variant

  DIM hSettings AS Settings

  hSettings = NEW Settings(sBaseDir &/ sSettings)

  IF NOT IsNull(vValue) THEN
     RETURN hSettings[sKey, vValue]
  ELSE
     RETURN hSettings[sKey]
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text in mainlog textarea
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION WriteLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText &= "\n"

  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & "  " & sText
  IF NOT FLogfiles.bPaused THEN
    FLogfiles.txtMainLog.Text &= sText
    FLogfiles.txtMainLog.Pos = Len(FLogfiles.txtMainLog.Text)
    IF Len(FLogfiles.txtMainLog.Text) > iLogBuffer THEN FLogfiles.txtMainLog.Clear
  END IF
  IF hMainLogFile THEN PRINT #hMainLogFile, sText;

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text in speaklog textarea
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION WriteSpeakLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText &= "\n"

  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & "  " & sText
  IF NOT FLogfiles.bPaused THEN
    FLogfiles.txtSpeakLog.Text &= sText
    FLogfiles.txtSpeakLog.Pos = Len(FLogfiles.txtSpeakLog.Text)
    IF Len(FLogfiles.txtSpeakLog.Text) > iLogBuffer THEN FLogfiles.txtSpeakLog.Clear
  END IF
  IF hSpeakLogFile THEN PRINT #hSpeakLogFile, sText;

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text in debuglog textarea
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION WriteDebugLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & "  " & sText
  IF NOT FLogfiles.bPaused THEN
    FLogfiles.txtDebugLog.Text &= sText
    FLogfiles.txtDebugLog.Pos = Len(FLogfiles.txtDebugLog.Text)
    IF Len(FLogfiles.txtDebugLog.Text) > iLogBuffer THEN FLogfiles.txtDebugLog.Clear
  END IF
  IF hDebugLogFile THEN PRINT #hDebugLogFile, sText;

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text in debuglog textarea without date/time (for RFXCom)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION WriteRFXDebugLog(sText AS String, OPTIONAL bStrip AS Boolean)

  IF NOT bStrip THEN sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & "  " & sText
  IF NOT FLogfiles.bPaused THEN
    FLogfiles.txtDebugLog.Text &= sText
    FLogfiles.txtDebugLog.Pos = Len(FLogfiles.txtDebugLog.Text)
    IF Len(FLogfiles.txtDebugLog.Text) > iLogBuffer THEN FLogfiles.txtDebugLog.Clear
  END IF
  IF hDebugLogFile THEN PRINT #hDebugLogFile, sText;

END
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return version of gambas we are running with
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION GetGambasVersion() AS String

  DIM sVer AS String

  SHELL "gbx" & System.Version & " -V " TO sVer
  RETURN Trim(Mid$(sVer, InStr(sVer, "-") + 1))

CATCH
  RETURN "?"

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get settings table from db, return defaults if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetSettingTable(sGroup AS String, OPTIONAL bDefault AS Boolean) AS Result

  DIM rResult AS Result

  IF bDefault THEN
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' load default settings
  ELSE
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 1") ' try to load active settings
    IF (rResult.Count < 1) THEN
      hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' fall back to defaults
    END IF
  END IF

  RETURN rResult

CATCH
  WriteLog("GetSettings : " & Error.Text & " for " & sGroup)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' function to close all what is open
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION CloseAll()

  ' stop all running timers
  StopTimers()
  ' save all globalvars in db
  SaveGlobalVars()
  ' ctx35 close
  IF hCTX35 THEN hCTX35.Disconnect
  ' rfxcom close
  IF hRFXCom THEN hRFXCom.Disconnect
  ' ups close
  IF hUPS THEN hUPS.Disconnect
  ' sms close
  IF hSMS THEN hSMS.Disconnect
  ' gps close
  IF hGPS THEN hGPS.Disconnect
  ' 1-wire close
  IF hOneWire THEN hOneWire.Disconnect
  ' visca close
  IF hVISCA THEN hVISCA.Disconnect
  ' db close
  IF hDB THEN hDB.Close
  ' webserver close
  IF hWebserver THEN hWebserver.Disconnect
  ' asterisk TCP socket close
  IF hAsterisk THEN hAsterisk.Disconnect
  ' weeder close
  IF hWeeder THEN hWeeder.Disconnect
  ' irman close
  IF hIRMan THEN hIRMan.Disconnect
  ' plugwise close
  IF hPlugwise THEN hPlugwise.Disconnect
  ' fritzbox close
  IF hFritzBox THEN hFritzBox.Disconnect

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup various stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Setup()

  WriteLog("Starting setup ...")

  ' setup modules
  GetSettings() ' read all settings from database
  RestoreGlobalVars() ' restore globalvars from database
  Setup_Astro() ' init time and location related stuff
  Setup_Webserver() ' built in HTTP server (very minimal)
  Setup_Email() ' e-mail SMTP client
  Setup_Sound() ' built in sound player
  Setup_VoiceText() ' text2speech support
  Setup_RRDTool() ' RRDTool graphing framework

  ' setup interfaces
  Setup_Heyu() ' Heyu X10 command interface
  Setup_RFXCom() ' RFXCom tcp client or serial interface
  Setup_CTX35() ' Xanura CTX35 X10 interface
  Setup_UPS() ' Nut SmartUPS monitoring client
  Setup_SMS() ' Falcom A2D SMS modem
  Setup_AIBO() ' Sony ERS-7 AIBO
  Setup_GPS() ' uBlox GPS receiver
  Setup_OneWire() ' Midon TEMP08 1-wire interface
  Setup_VISCA() ' Sony VISCA PTZ interface
  Setup_HDDTemp() ' read disk temperatures
  Setup_VideoServer() ' IP9100 videoserver
  Setup_Asterisk() ' Asterisk PABX support
  Setup_Bluetooth() ' Bluetooth Proximity support
  Setup_Weeder() ' Weeder I/O modules support
  Setup_Pictures() ' preload images in memory
  Setup_Gmail() ' fetch Gmail RSS feed
  Setup_TVGuide() ' XMLTV guide
  Setup_ServerStats() ' Server Statistics
  Setup_IRMan() ' IRMan Infrared
  Setup_Plugwise() ' Plugwise support
  Setup_FritzBox() ' FritzBox support

  WriteLog("Done with setup ...")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open logfiles
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Setup_Logfiles()

  ' open the file in append mode and write to it
  OPEN sBaseDir &/ "logs" &/ sMainLogFile FOR APPEND AS #hMainLogFile
  OPEN sBaseDir &/ "logs" &/ sSpeakLogFile FOR APPEND AS #hSpeakLogFile
  OPEN sBaseDir &/ "logs" &/ sDebugLogFile FOR APPEND AS #hDebugLogFile

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' location info, and calc. sunset/sunrise and moonphase
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Astro()

  WriteLog("Latitude: " & iAstroLatitude & " Longitude: " & iAstroLongitude & " Timezone: " & iAstroTimezone)
  ' the rest is done in Set_global_vars()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start webserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_Webserver()

  IF bWebserverEnabled THEN
    IF bWebserverDebug THEN WriteLog("Webserver enabled.")

    ' create a new WebServer class instance
    hWebserver = NEW CWebServer

    ' set the properties
    hWebserver.DocRoot = sWebserverDocRoot
    hWebserver.HTTPPort = iWebserverHTTPPort
    hWebserver.WebServerDebug = bWebserverDebug

    ' start webserver
    IF hWebserver.Connect() THEN
      WriteLog("Webserver active on Port " & iWebserverHTTPPort, bMainDebug)
    ELSE
      WriteLog("ERROR: Webserver FAILED to start on Port " & iWebserverHTTPPort & "", 1)
    END IF
  ELSE
    WriteLog("Webserver disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart webserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Webserver()

  IF hWebserver THEN
    hWebserver.Disconnect
    hWebserver = NULL
    Setup_Webserver()
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if e-mail client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Email()

  IF bEmailEnabled THEN
    WriteLog("e-mail client enabled.", bMainDebug)
  ELSE
    WriteLog("e-mail client disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart e-mail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Email()

  ' not much todo now
  Setup_Email()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Gmail Rss client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Gmail()

  IF bGmailEnabled THEN
    WriteLog("Gmail RSS feed enabled.", bMainDebug)
    Mail.GmailRun()
  ELSE
    WriteLog("Gmail RSS feed disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Gmail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Gmail()

  ' not much todo now
  Setup_Gmail()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup sound related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Sound()

  IF bSoundEnabled THEN
    WriteLog("Sound support enabled.")
    Sounds.LoadSounds()
  ELSE
    WriteLog("Sound support disabled.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sound after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Sound()

  ' not much todo now
  Setup_Sound()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup voicetext related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_VoiceText()

  IF bVoiceTextEnabled THEN
    WriteLog("VoiceText support enabled.")
  ELSE
    WriteLog("VoiceText support disabled.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart voicetext after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_VoiceText()

  ' not much todo now
  Setup_VoiceText()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize heyu if needed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_Heyu()

  DIM sTemp AS String

  IF bHeyuEnabled THEN
    WriteLog("Heyu X10 interface enabled.")
    IF ProgramExist(sHeyuCommand) THEN
      EXEC [sHeyuCommand, "version"] TO sTemp
      WriteLog("Found executable Heyu " & sTemp)
    ELSE
      WriteLog("ERROR: Heyu command '" & sHeyuCommand & "' not found, did you install it?")
      bHeyuEnabled = FALSE
      WriteLog("Heyu X10 interface disabled.")
    END IF
  ELSE
    WriteLog("Heyu X10 interface disabled.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart heyu after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Heyu()

  ' not much todo now
  Setup_Heyu()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create dummy class to send simulated packets to parser
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Setup_DummyRFXCom()

  hRFXCom = NEW CRFXCom
  ' set the properties
  WITH hRFXCom
    .TCPHost = sRFXComTCPHost
    .TCPPort = iRFXComTCPPort
    .Interface = sRFXComType
    .Baud = sRFXComBaudrate
    .SerPort = sRFXComSerialPort
    .RFXComDebug = bRFXComDebug
  END WITH

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom tcp host and port or serialport
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_RFXCom()

  IF bRFXComEnabled THEN
    WriteLog("RFXCom TCP/Serial interface enabled.")
    ' create a new RFXCom class instance
    hRFXCom = NEW CRFXCom
    ' set the properties
    WITH hRFXCom
      .TCPHost = sRFXComTCPHost
      .TCPPort = iRFXComTCPPort
      .Interface = sRFXComType
      .Baud = sRFXComBaudrate
      .SerPort = sRFXComSerialPort
      .RFXComDebug = bRFXComDebug
    END WITH
    IF InStr(sRFXComType, "tcp") THEN
      ' connect to the rfxcom host:port
      IF hRFXCom.ConnectTCP() THEN
        WriteLog("RFXCom TCP interface connecting to " & sRFXComTCPHost & ":" & iRFXComTCPPort)
      ELSE
        WriteLog("ERROR: RFXCom TCP interface FAILED to connect to " & sRFXComTCPHost & ":" & iRFXComTCPPort & "")
      END IF
    ELSE
      ' connect to the rfxcom serial interface
      IF hRFXCom.ConnectSerial() THEN
        WriteLog("RFXCom serial interface connected to Port " & sRFXComSerialPort)
      ELSE
        WriteLog("ERROR: RFXCom serial interface FAILED to connect to Port " & sRFXComSerialPort & "")
      END IF
    END IF
  ELSE
    WriteLog("RFXCom interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_RFXCom()

  IF hRFXCom THEN
    hRFXCom.Disconnect
    hRFXCom = NULL
  END IF
  Setup_RFXCom()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open ctx35 serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_CTX35()

  IF bCTX35Enabled THEN 
    WriteLog("Xanura CTX35 X10 interface enabled.")
    ' create a new CTX35 class instance
    hCTX35 = NEW CCTX35
    ' set the properties
    WITH hCTX35
      .Port = sCTX35SerialPort
      .Baud = sCTX35Baudrate
      .PollTime = iCTX35PollTime
      .CTX35Debug = bCTX35Debug
    END WITH
    ' connect to the serial port
    IF hCTX35.Connect() THEN
      WriteLog("Xanura CTX35 interface connected to Port " & sCTX35SerialPort)
      hCTX35.Run()
    ELSE
      WriteLog("ERROR: Xanura CTX35 interface FAILED to connected to Port " & sCTX35SerialPort & "")
    END IF
  ELSE
    WriteLog("Xanura CTX35 X10 interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ctx35 after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_CTX35()

  IF hCTX35 THEN
    TRY hCTX35.tCTX35.Stop
    hCTX35.Disconnect
    hCTX35 = NULL
  END IF
  Setup_CTX35()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with ups tcp host and port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_UPS()

  IF bUPSEnabled THEN
    WriteLog("UPS TCP interface enabled.")
    ' create a new UPS class instance
    hUPS = NEW CUPS
    ' set the properties
    WITH hUPS
      .Host = sUPSTCPHost
      .Port = iUPSTCPPort
      .PollTime = iUPSPollTime
      .UPSDebug = bUPSDebug
    END WITH
    ' connect to the ups host:port
    IF hUPS.Connect() THEN
      WriteLog("UPS TCP interface connecting to " & sUPSTCPHost & ":" & iUPSTCPPort)
    ELSE
      WriteLog("ERROR: UPS TCP interface FAILED to connect to " & sUPSTCPHost & ":" & iUPSTCPPort & "")
    END IF
  ELSE
    TRY hUPS.tUPS.Stop
    WriteLog("UPS TCP interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ups after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_UPS()

  IF hUPS THEN
    TRY hUPS.tUPS.Stop
    hUPS.Disconnect
    hUPS = NULL
  END IF
  Setup_UPS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize sms modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_SMS()

  IF bSMSEnabled THEN
    WriteLog("Falcom SMS interface enabled.")

    ' create a new SMS class instance
    hSMS = NEW CSMS

    ' set the properties
    WITH hSMS
      .Port = sSMSSerialPort
      .Baud = sSMSBaudrate
      .PIN = sSMSPIN
      .ServiceCentre = sSMSServiceCentre
      .Contact = sSMSContact
      .SMSDebug = bSMSDebug
    END WITH
    ' connect to the serial port
    IF hSMS.Connect() THEN
      WriteLog("Falcom SMS interface connected to Port " & sSMSSerialPort)
      IF hSMS.InitModem() THEN
        hSMS.SendSMS()
      ELSE
        WriteLog("ERROR: Falcom SMS interface FAILED to initialize.")
      END IF
    ELSE
      WriteLog("ERROR: Falcom SMS interface FAILED to connect to Port " & sSMSSerialPort & "")
    END IF
  ELSE
    WriteLog("Falcom SMS interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sms after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_SMS()

  IF hSMS THEN
    hSMS.Disconnect
    hSMS = NULL
  END IF
  Setup_SMS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if AIBO is awake
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_AIBO()

  IF bAIBOEnabled THEN
    WriteLog("AIBO support enabled.")
    ' start timer
    AIBO.Run()
  ELSE
    TRY AIBO.tAIBO.Stop
    WriteLog("AIBO support disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart aibo after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_AIBO()

  ' not much todo now
   Setup_AIBO()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if bluetooth devices are around
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_Bluetooth()

  IF bBluetoothEnabled THEN
    IF ProgramExist("hcitool") THEN
      WriteLog("Bluetooth Proximity support enabled.")
      ' start timer
      Bluetooth.Run()
    ELSE
      WriteLog("ERROR: Bluetooth command 'hcitool' not found, did you install it?")
      bBluetoothEnabled = FALSE
      WriteLog("Bluetooth Proximity support disabled.")
    END IF
  ELSE
    TRY Bluetooth.tBluetooth.Stop
    WriteLog("Bluetooth Proximity support disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart bluetooth after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Bluetooth()

  ' not much todo now
   Setup_Bluetooth()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize gps receiver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_GPS()

  IF bGPSEnabled THEN
    WriteLog("GPS receiver enabled.")
    ' create a new GPS class instance
    hGPS = NEW CGPS
    ' set the properties
    WITH hGPS
      .Port = sGPSSerialPort
      .Baud = sGPSBaudrate
      .GPSDebug = bGPSDebug
    END WITH

    ' connect to the serial port
    IF hGPS.Connect() THEN
      WriteLog("GPS receiver connected to Port " & sGPSSerialPort)
    ELSE
      WriteLog("ERROR: GPS receiver FAILED to connect to Port " & sGPSSerialPort & "")
    END IF
  ELSE
    WriteLog("GPS receiver disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart gps after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_GPS()

  IF hGPS THEN
    hGPS.Disconnect
    hGPS = NULL
  END IF
  Setup_GPS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize weeder i/o
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_Weeder()

  IF bWeederEnabled THEN
    WriteLog("Weeder Module support enabled.")
    ' create a new Weeder class instance
    hWeeder = NEW CWeeder
    ' set the properties
    WITH hWeeder
      .Port = sWeederSerialPort
      .WeederDebug = bWeederDebug
    END WITH

    ' connect to the serial port
    IF hWeeder.Connect() THEN
      WriteLog("Weeder Module(s) connected to Port " & sWeederSerialPort)
    ELSE
      WriteLog("ERROR: Weeder Module FAILED to connect to Port " & sWeederSerialPort & "")
    END IF
  ELSE
    WriteLog("Weeder Module support disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart weeder after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Weeder()

  IF hWeeder THEN
    hWeeder.Disconnect
    hWeeder = NULL
  END IF
  Setup_Weeder()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open 1-wire serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_OneWire()

  IF bOneWireEnabled THEN
    WriteLog("Midon 1-Wire interface enabled.")
    ' create a new OneWire class instance
    hOneWire = NEW COneWire
    ' set the properties
    WITH hOneWire
      .Port = sOneWireSerialPort
      .Baud = sOneWireBaudrate
      .OneWireDebug = bOneWireDebug
    END WITH
    ' connect to the serial port
    IF hOneWire.Connect() THEN
      WriteLog("Midon 1-Wire interface connected to Port " & sOneWireSerialPort)
    ELSE
      WriteLog("ERROR: Midon 1-Wire interface FAILED to connected to Port " & sOneWireSerialPort & "")
    END IF
  ELSE
    WriteLog("Midon 1-Wire interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart onewire after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_OneWire()

  IF hOneWire THEN
    hOneWire.Disconnect
    hOneWire = NULL
  END IF
  Setup_OneWire()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open visca ptz control serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_VISCA()

  IF bVISCAEnabled THEN
    WriteLog("Sony VISCA interface enabled.")
    ' create a new VISCA class instance
    hVISCA = NEW CVISCA
    ' set the properties
    hVISCA.Port = sVISCASerialPort
    hVISCA.VISCADebug = bVISCADebug
    ' connect to the serial port
    IF hVISCA.Connect() THEN
      WriteLog("Sony VISCA interface connected to Port " & sVISCASerialPort)
    ELSE
      WriteLog("ERROR: Sony VISCA interface FAILED to connected to Port " & sVISCASerialPort & "")
    END IF
  ELSE
    WriteLog("Sony VISCA interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart visca after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_VISCA()

  IF hVISCA THEN
    hVISCA.Disconnect
    hVISCA = NULL
  END IF
  Setup_VISCA()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if HDD temps are below threshold
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_HDDTemp()

  IF bHDDTempEnabled THEN
    WriteLog("HDDTemp support enabled.")
    ' start timer
    HDDTemp.Run()
  ELSE
    TRY HDDTemp.tHDDTemp.Stop
    WriteLog("HDDTemp support disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart hddtemp after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_HDDTemp()

  Setup_HDDTemp()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' capture video images from videoserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_VideoServer()

  IF bVideoServerEnabled THEN
    WriteLog("IP9100 VideoServer support enabled.")
  ELSE
    WriteLog("IP9100 VideoServer support disabled.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart videoserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_VideoServer()

  ' not much todo now
   Setup_VideoServer()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if rrdtool support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_RRDTool()

    IF bRRDToolEnabled THEN
      IF ProgramExist("rrdtool") THEN
        RRDTool.Run()
        WriteLog("RRDTool support enabled.")
      ELSE
        WriteLog("ERROR: RRDTool command 'rrdtool' not found, did you install it?")
        bRRDToolEnabled = FALSE
        WriteLog("RRDTool support disabled.")
      END IF
    ELSE
      TRY RRDTool.tRRDTool.Stop
      WriteLog("RRDTool support disabled.")
    ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rrdtool after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_RRDTool()

  ' not much todo now
  Setup_RRDTool()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if asterisk support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_Asterisk()

  IF bAsteriskEnabled THEN
    WriteLog("Asterisk API interface enabled.")

    ' create a new Asterisk class instance
    hAsterisk = NEW CAsterisk

    ' set the properties
    WITH hAsterisk
      .TCPHost = sAsteriskTCPHost
      .TCPPort = iAsteriskTCPPort
      .User = sAsteriskUser
      .Password = sAsteriskPassword
      .Polltime = iAsteriskPollTime
      .AsteriskDebug = bAsteriskDebug
    END WITH

    ' connect to the asterisk host:port
    IF hAsterisk.Connect() THEN
      WriteLog("Asterisk API interface connecting to " & sAsteriskTCPHost & ":" & iAsteriskTCPPort)
    ELSE
      WriteLog("ERROR: Asterisk API interface FAILED to connect to " & sAsteriskTCPHost & ":" & iAsteriskTCPPort & "")
    END IF
  ELSE
    WriteLog("Asterisk API interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart asterisk support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Asterisk()

  IF hAsterisk THEN
    hAsterisk.Disconnect
    hAsterisk = NULL
  END IF
  Setup_Asterisk()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if tvguide support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_TVGuide()

  DIM sTemp, sCmdDir AS String
  sCmdDir = sBaseDir &/ "tvguide"

  IF bTVGuideEnabled THEN
    IF ProgramExist(sCmdDir &/ sTVGuideGrabCommand) THEN
      WriteLog("TVGuide support enabled.")
      EXEC [sCmdDir &/ sTVGuideGrabCommand, "--description"] TO sTemp
      IF sTemp THEN WriteLog(Subst("Found XMLTV grabber '&1'", Replace$(sTemp, gb.NewLine, "")))
    ELSE
      WriteLog("ERROR: TVGuide grabber exec '" & sTVGuideGrabCommand & "' not found in '" & sCmdDir & "', did you install it?")
      bTVGuideEnabled = FALSE
      WriteLog("TVGuide support disabled.")
    END IF
  ELSE
    WriteLog("TVGuide support disabled.")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart tvguide after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_TVGuide()

  Setup_TVGuide()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if server statistics is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB Setup_ServerStats()

  IF bServerStatsEnabled THEN
    ServerStats.Run()
    WriteLog("Server Statistics enabled.")
  ELSE
    TRY ServerStats.tServerStats.Stop
    WriteLog("Server Statistics disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart server statistics after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_ServerStats()

  Setup_ServerStats()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open IRMan serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_IRMan()

  IF bIRManEnabled THEN
    WriteLog("IRMan IR interface enabled.")
    ' create a new IRMan class instance
    hIRMan = NEW CIRMan
    ' set the properties
    WITH hIRMan
      .Port = sIRManSerialPort
      .IRManDebug = bIRManDebug
    END WITH
    ' connect to the serial port
    IF hIRMan.Connect() THEN
      WriteLog("IRMan IR interface connected to Port " & sIRManSerialPort)
      ' wakeup device
      hIRMan.Run()
    ELSE
      WriteLog("ERROR: IRMan IR interface FAILED to connected to Port " & sIRManSerialPort & "")
    END IF
  ELSE
    WriteLog("IRMan IR interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart irman after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_IRMan()

  IF hIRMan THEN
    hIRMan.Disconnect
    hIRMan = NULL
  END IF
  Setup_IRMan()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open plugwise serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_Plugwise()

  IF bPlugwiseEnabled THEN
    WriteLog("Plugwise interface enabled.")
    ' create a new Plugwise class instance
    hPlugwise = NEW CPlugwise
    ' set the properties
    WITH hPlugwise
      .Port = sPlugwiseSerialPort
      .Polltime = iPlugwisePolltime
      .PlugwiseDebug = bPlugwiseDebug
    END WITH
    ' connect to the serial port
    IF hPlugwise.Connect() THEN
      WriteLog("Plugwise interface connected to Port " & sPlugwiseSerialPort)
      hPlugwise.Run()
    ELSE
      WriteLog("ERROR: Plugwise interface FAILED to connected to Port " & sPlugwiseSerialPort & "")
    END IF
  ELSE
    WriteLog("Plugwise interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart plugwise after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_Plugwise()

  IF hPlugwise THEN
    hPlugwise.tPlugwise.Stop
    hPlugwise.Disconnect
    hPlugwise = NULL
  END IF
  Setup_Plugwise()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if fritzbox support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION Setup_FritzBox()

  IF bFritzBoxEnabled THEN
    WriteLog("Fritz!Box API interface enabled.")

    ' create a new FritzBox class instance
    hFritzBox = NEW CFritzBox

    ' set the properties
    WITH hFritzBox
      .TCPHost = sFritzBoxTCPHost
      .FritzBoxDebug = bFritzBoxDebug
    END WITH

    ' connect to the fritzbox host:port
    IF hFritzBox.Connect() THEN
      WriteLog("Fritz!Box API interface connecting to " & sFritzBoxTCPHost & ":1012")
    ELSE
      WriteLog("ERROR: Fritz!Box API interface FAILED to connect to " & sFritzBoxTCPHost & ":1012")
    END IF
  ELSE
    WriteLog("Fritz!Box API interface disabled.")
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart fritzbox support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Restart_FritzBox()

  IF hFritzBox THEN
    hFritzBox.Disconnect
    hFritzBox = NULL
  END IF
  Setup_FritzBox()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' main loop checking for action and acted upon
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Check_for_Action()

  IF bExitProgram THEN
    WriteLog("Exiting loop!")
    RETURN
  END IF
  IF bProgramStartup THEN iLoopTickCount = 0

  Set_Global_Vars()
  bProgramStartup = FALSE
  EventLoop.Run()

END

PUBLIC SUB ChangeHouseMode(sMode AS String)

  Main.GlobalVar["House_Mode"] = sMode
  FHome.btnMode.Text = Main.Caps(sMode)
  FMain.txtMode.Text = sMode
  IF FMain.Visible THEN Balloon("Mode changed to " & sMode, FMain.txtMode)

END

PUBLIC SUB ChangeMuteMode(bMode AS Boolean)

  Main.GlobalVar["Mute"] = bMode

  IF bMode THEN
    FHome.btnMute.Text = "UnMute"
    IF FMain.Visible THEN Balloon("Audio is Disabled", FMain.pbMute)
    TRY FMain.pbMute.Picture = Picture["icons/mute.png"]
  ELSE
    FHome.btnMute.Text = "Mute"
    TRY FMain.pbMute.Picture = Picture["icons/sound.png"]
    IF FMain.Visible THEN Balloon("Audio is Enabled", FMain.pbMute)
  END IF

END

PUBLIC SUB UpdateCounters()

  FMain.txtEmailIn.Text = iNewMails & If(iNewMails <> 1, " e-mails", " e-mail")
  FMain.txtCallsIn.Text = iNewCalls & If(iNewCalls <> 1, " calls", " call")
  FMain.txtVoiceIn.Text = iNewVoicemails & If(iNewVoicemails <> 1, " voicemsgs", " voicemsg")

END

PUBLIC SUB Caps(sString AS String) AS String

  RETURN UCase(Mid(sString, 1, 1)) & Mid(sString, 2)

END

PUBLIC SUB SetupTimers()

  ' main loop sleep timer
  tMainSleep = NEW Timer AS "tSleep"
  tMainSleep.Delay = iMainSleepTime
  tMainSleep.Enabled = TRUE

  ' flush logfile buffers to disk
  tMainFlush = NEW Timer AS "tFlush"
  tMainFlush.Delay = iMainFlushTime
  tMainFlush.Enabled = TRUE

END

PUBLIC SUB StopTimers()

  WriteLog("Stopping running timers.")

  ' aibo timer
  TRY AIBO.tAIBO.Stop

  ' serverstats timer
  TRY ServerStats.tServerStats.Stop

  ' bluetooth timer
  TRY Bluetooth.tBluetooth.Stop

  ' HDDTemp timer
  TRY HDDTemp.tHDDTemp.Stop

  ' ctx35 timer
  TRY hCTX35.tCTX35.Stop
  TRY hCTX35.tX10.Stop

  ' ups timer
  TRY hUPS.tUPS.Stop

  ' rrdtool timer
  TRY RRDTool.tRRDTool.Stop

  ' gmail timer
  TRY Mail.tGmail.Stop

  ' plugwise timer
  TRY hPlugwise.tPlugwise.Stop

  ' flush output streams
  TRY tMainFlush.Stop

  ' main loop sleep timer
  TRY tMainSleep.Stop

END

PUBLIC SUB Setup_Pictures()

  pLedOn = Picture.Load("icons/led-on.png")
  pLedOff = Picture.Load("icons/led-off.png")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by flush timer, flushes buffered data to disk
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tFlush_Timer()

  FLUSH

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by sleep timer, triggers main loop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tSleep_Timer()

  Check_for_Action()

END

PRIVATE FUNCTION Time_Less_Than(sTime AS String) AS Boolean

  IF (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Minute) < 0) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

PRIVATE FUNCTION Time_Greater_Than(sTime AS String) AS Boolean

  IF (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Minute) > 0) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

PUBLIC FUNCTION Time_Now(sTime AS String) AS Boolean

  IF (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Second) = 0) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

' routine from misterhouse, maybe needs different approach (with timers)
PRIVATE SUB Set_Global_Vars()

  DIM sSeasons AS Array
  DIM sSeason_Starts AS Array
  DIM bSunRise AS Boolean = TRUE
  DIM bSunSet AS Boolean = FALSE
  DIM iTwilight AS Integer

  bNew_Second = 0
  bNew_Msecond_500 = 0
  bNew_Msecond_250 = 0
  bNew_Minute = 0
  bNew_Hour = 0
  bNew_Day = 0
  bNew_Week = 0
  bNew_Month = 0
  bNew_Year = 0
  iDelayOccured = 0
  dTime_Now = Now()

  IF bProgramStartup THEN
    dPrev_Time = -1
    iPrev_Min = -1
    iPrev_Hour = -1
    iPrev_Mday = -1
    iPrev_Month = -1
    iPrev_Year = -1
  END IF

  dTime = Now()

  ' prevent repeating time based events
  IF (dPrev_Time > dTime) THEN dTime = dPrev_Time

  IF (dPrev_Time <> dTime) THEN
    INC iLoopTickCount

    ' new Msecond_250
    bNew_Msecond_250 = 1

    ' new Msecond_500
    IF iLoopTickCount = 2 THEN
      iLoopTickCount = 0
      bNew_Msecond_500 = 1
    END IF

    dPrev_Time = dTime
    GlobalVar["Second"] = Second(dTime)
    GlobalVar["Minute"] = Minute(dTime)
    GlobalVar["Hour"] = Hour(dTime)
    GlobalVar["Day"] = Day(dTime)
    GlobalVar["Month"] = Month(dTime)
    GlobalVar["Weekday"] = WeekDay(dTime)

    ' new second
    IF (iPrev_Sec <> GlobalVar["Second"]) THEN bNew_Second = 1
    iPrev_Sec = GlobalVar["Second"]

    ' new minute
    IF (iPrev_Min <> GlobalVar["Minute"]) THEN
      bNew_Minute = 1
      iPrev_Min = GlobalVar["Minute"] 
      FMain.txtTime.Text = Format$(Now(), "hh:nn")

      ' check if it's dark or light
      IF (Time_Less_Than(GlobalVar["Sunrise"]) OR Time_Greater_Than(GlobalVar["Sunset"])) THEN
        GlobalVar["Dark"] = TRUE
      ELSE
        GlobalVar["Dark"] = FALSE
      END IF
      ' new hour
      IF (iPrev_Hour <> GlobalVar["Hour"]) THEN
        bNew_Hour = 1
        iPrev_Hour = GlobalVar["Hour"]
        IF (Time_Less_Than("5:00")) THEN
          Main.GlobalVar["Time_Of_Day"] = "night"
        ELSE IF (Time_Less_Than("11:59")) THEN
          Main.GlobalVar["Time_Of_Day"] = "morning"
        ELSE IF (Time_Less_Than("17:00")) THEN
          Main.GlobalVar["Time_Of_Day"] = "afternoon"
        ELSE IF (Time_Less_Than("23:59")) THEN
          Main.GlobalVar["Time_Of_Day"] = "evening"
        ELSE
          Main.GlobalVar["Time_Of_Day"] = "night"
        END IF
        WriteLog("The Time of Day is " & Main.GlobalVar["Time_Of_Day"] & ".")
        WriteLog("It's " & IIf(GlobalVar["Dark"], "dark", "light") & " outside.")
        ' new day
        IF (iPrev_Mday <> GlobalVar["Day"]) THEN
          bNew_Day = 1
          iPrev_Mday = GlobalVar["Day"]
          FMain.txtDate.Text = Format$(Now(), "d-mmm-yyyy")
          IF (GlobalVar["Weekday"] = 0 OR GlobalVar["Weekday"] = 6) THEN
            'GlobalVar["Weekday"] = FALSE
            GlobalVar["Weekend"] = TRUE
          ELSE
            'GlobalVar["Weekday"] = TRUE
            GlobalVar["Weekend"] = FALSE
          END IF
          IF (GlobalVar["Weekday"] = 0) THEN 
            bNew_Week = 1
          END IF
          GlobalVar["Year"] = Year(Now)
          ' calculate sun set/rise
          GlobalVar["Sunrise"] = Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunRise, 0)
          GlobalVar["Sunset"] = Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunSet, 0)
          WriteLog("Sunrise at " & GlobalVar["Sunrise"] & ", Sunset at " & GlobalVar["Sunset"])
          IF (sAstroTwilight = "civil") THEN iTwilight = 1
          IF (sAstroTwilight = "nautical") THEN iTwilight = 2
          IF (sAstroTwilight = "astronomical") THEN iTwilight = 3
          GlobalVar["Sunrise_Twilight"] = Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunRise, iTwilight)
          GlobalVar["Sunset_Twilight"] = Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunSet, iTwilight)
          WriteLog("Twilight Sunrise at " & GlobalVar["Sunrise_Twilight"] & ", Twilight Sunset at " & GlobalVar["Sunset_Twilight"] & " (" & sAstroTwilight & ")")

          ' calculate moon data
          Astro.CalcMoonPhase()

          WriteLog("Moon phase is " & MoonPhase & ".")
          WriteLog("Moon is in " & MoonZodiac & ".")
          WriteLog("Age from new " & MoonAge & " days.")
          WriteLog("Distance " & MoonDistance & " Earth radii.")
          WriteLog("Ecliptic latitude: " & MoonLatitude & " degrees.")
          WriteLog("Ecliptic longitude: " & MoonLongitude & " degrees.")
          IF MoonIsLeapYear THEN WriteLog("This is a leap year.")
          FMain.UpdateStatusPanel()
          ' calculate season
          sSeasons = Split(sAstroSeasons, ",")
          sSeason_Starts = Split(sAstroSeasonStarts, ",")
          IF (GlobalVar["Month"] < 3 OR (GlobalVar["Month"] = 3 AND GlobalVar["Day"] < Val(sSeason_Starts[0])) OR (GlobalVar["Month"] = 12 AND GlobalVar["Day"] > Val(sSeason_Starts[3]))) THEN
            GlobalVar["Season"] = sSeasons[0]
          ELSE IF (GlobalVar["Month"] < 6 OR (GlobalVar["Month"] = 6 AND GlobalVar["Day"] < Val(sSeason_Starts[1]))) THEN
            GlobalVar["Season"] = sSeasons[1]
          ELSE IF (GlobalVar["Month"] < 9 OR (GlobalVar["Month"] = 9 AND GlobalVar["Day"] < Val(sSeason_Starts[2]))) THEN
            GlobalVar["Season"] = sSeasons[2]
          ELSE
            GlobalVar["Season"] = sSeasons[3]
          END IF
          WriteLog("Season is " & GlobalVar["Season"] & ".")
          ' new month
          IF (iPrev_Month <> GlobalVar["Month"]) THEN
            bNew_Month = 1
            iPrev_Month = GlobalVar["Month"]
            ' new year
            IF (iPrev_Year <> GlobalVar["Year"]) THEN
              bNew_Year = 1
              iPrev_Year = GlobalVar["Year"]
            END IF ' new year
          END IF ' new month

          IF bProgramStartup THEN
            bNew_Second = 0
            bNew_Minute = 0
            bNew_Hour = 0
            bNew_Day = 0
            bNew_Week = 0
            bNew_Month = 0
            bNew_Year = 0
          END IF
        END IF ' new day loop
      END IF ' new hour loop
    END IF ' new minute loop
  END IF ' time changed loop

END

PUBLIC SUB Time_Cron(sTimeDate AS String) AS Boolean

  DIM aCron AS String[]
  DIM aCron_Now AS String[]
  DIM aMore AS String[]
  DIM LowHigh AS String[]
  DIM sField AS String
  DIM iField AS Integer
  DIM sTag AS Boolean

  ' * * * * *
  ' - - - - -
  ' | | | | |
  ' | | | | +----- day of week (0 - 6) (Sunday=0)
  ' | | | +------- month (1 - 12)
  ' | | +--------- day of month (1 - 31)
  ' | +----------- hour (0 - 23)
  ' +------------- min(0 - 59)

  ' only on minute boundarys
  IF NOT bNew_Minute THEN RETURN

  aCron = Split(sTimeDate, " ")

  IF aCron.Count <> 5 THEN
    WriteDebugLog("[Main] Bad Time_Cron() format (needs 5 fields): " & sTimeDate)
    RETURN FALSE
  END IF

  aCron_Now = [Format(Str(GlobalVar["Minute"]), "0#"), Format(Str(GlobalVar["Hour"]), "0#"), Str(GlobalVar["Day"]), Str(GlobalVar["Month"]), Str(GlobalVar["Weekday"])]

  FOR iField = 0 TO 4
    ' wildcard used
    IF aCron[iField] = "*" THEN CONTINUE
    ' normal value
    IF aCron[iField] = aCron_Now[iField] THEN CONTINUE
    ' more values given
    IF InStr(aCron[iField], ",") THEN
      aMore = Split(aCron[iField], ",")
      FOR EACH sField IN aMore
          IF sField = aCron_Now[iField] THEN
            sTag = TRUE
          END IF
      NEXT
    END IF
    IF sTag THEN CONTINUE
    ' range given
    IF InStr(aCron[iField], "-") THEN
      LowHigh = Scan(aCron[iField], "*-*")
      IF aCron_Now[iField] >= LowHigh[0] AND aCron_Now[iField] <= LowHigh[1] THEN CONTINUE 
    END IF

    RETURN FALSE ' not all of the entries qualified
  NEXT
  RETURN TRUE

END

PUBLIC SUB Random_Text(sTable AS String) AS String

  DIM rResult AS Result

  TRY rResult = Main.hDB.Exec("SELECT text FROM " & hDB.Quote(sTable) & " ORDER BY rand() LIMIT 1")
  IF rResult.Count THEN
    RETURN rResult!text
  ELSE
    RETURN "Error!"
  END IF

END

PUBLIC SUB SaveGlobalVars()

  DIM tableGlobalVars AS Table
  DIM vValue AS Variant
  DIM rResult AS Result

  ' delete complete history
  Main.hDB.Tables.Remove("globalvars")
  ' recreate empty one
  tableGlobalVars = Main.hDB.Tables.Add("globalvars")
  tableGlobalVars.Fields.Add("id", db.Serial)
  tableGlobalVars.Fields.Add("var", db.String, 64)
  tableGlobalVars.Fields.Add("value", db.String, 0)
  tableGlobalVars.PrimaryKey = ["id"]
  tableGlobalVars.Update()

  ' write vars to db table
  FOR EACH vValue IN Main.GlobalVar
    Main.hDB.Begin()
    rResult = Main.hDB.Create("globalvars")
    rResult!var = Main.GlobalVar.Key
    rResult!value = vValue
    rResult.Update()
    Main.hDB.Commit()
  NEXT
  IF Main.bMainDebug THEN Main.WriteDebugLog("[Main] Globalvars Saved.")

END

PUBLIC SUB RestoreGlobalVars()

  DIM rResult AS Result
  DIM bValue AS Boolean
  DIM sValue AS String

  TRY rResult = Main.hDB.Exec("SELECT * FROM globalvars")
  IF rResult THEN
    IF rResult.Count THEN
      FOR EACH rResult
        Main.GlobalVar[rResult!var] = rResult!value
      NEXT
      IF Main.bMainDebug THEN Main.WriteDebugLog("[Main] Globalvars Restored.")
    END IF
  END IF

END

PUBLIC SUB DisplayBoolean(bSwitch AS Boolean) AS String

  SELECT bSwitch
    CASE TRUE
      RETURN "true"
    CASE ELSE
      RETURN "false"
  END SELECT

END


PUBLIC FUNCTION Search(tv AS TableView, i AS Integer, col AS Integer, Mode AS Integer) AS Integer

  DIM k AS Integer
  DIM pos AS Integer
  DIM v1 AS Variant
  DIM v2 AS Variant

  pos = i

  FOR k = i TO tv.Rows.Count - 1
    IF IsNumber(Val(tv[k, col].Text)) THEN
      ' behaves like number
      v1 = Val(tv[k, col].Text)
      v2 = Val(tv[pos, col].Text)

      IF v1 = NULL THEN
        v1 = 0
      END IF

      IF v2 = NULL THEN
        v2 = 0
      END IF

      IF mode = 0 THEN ' min
        IF CFloat(v1) < CFloat(v2) THEN
          pos = k
        END IF
      ELSE ' max
        IF CFloat(v1) > CFloat(v2) THEN
          pos = k
        END IF
      END IF
    ELSE
      ' behaves like string
      v1 = tv[k, col].Text
      v2 = tv[pos, col].Text

      IF v1 = NULL THEN 
        v1 = " "
      END IF

      IF v2 = NULL THEN 
        v2 = " "
      END IF

      IF mode = 0 THEN ' min
        IF v1 < v2 THEN
          pos = k
        END IF
      ELSE ' max
        IF v1 > v2 THEN
          pos = k
        END IF
      END IF
    END IF
  NEXT

  RETURN pos

END

PUBLIC SUB Change(tv AS TableView, i AS Integer, pos AS Integer)

  DIM k AS Integer
  DIM row AS NEW String[]

  ' load first data into row
  FOR k = 0 TO tv.Columns.Count - 1
    row.Add(tv[i, k].Text)
  NEXT

  ' put second row into first
  FOR k = 0 TO tv.Columns.Count - 1
    tv[i, k].Text = tv[pos, k].Text
  NEXT

  ' finally, save temporary data
  FOR k = 0 TO tv.Columns.Count - 1
    tv[pos, k].Text = row[k]
  NEXT

END

PUBLIC SUB SortTableView(tv AS TableView, col AS Integer, A AS Boolean)

  DIM i AS Integer
  DIM MinRes AS Integer
  DIM MaxRes AS Integer
  DIM row AS String[]

  tv.Cancel()

  FOR i = 0 TO tv.Rows.Count - 1
    IF A THEN
      MinRes = Search(tv, i, col, 0)
      Change(tv, i, MinRes)
    ELSE
      MaxRes = Search(tv, i, col, 1)
      Change(tv, i, MaxRes)
    END IF
  NEXT

  tv.Refresh

END

PUBLIC FUNCTION OpenWebPage(sLink AS String) AS String

  DIM sExec AS String

  IF Application.Env["BROWSER"] THEN
    sExec = Application.Env["BROWSER"]
  ELSE IF Application.Env["KDE_FULL_SESSION"] THEN
    sExec = "konqueror"
  ELSE IF Application.Env["GNOME_SESSION_ID"] THEN
    sExec = "epiphany"
  ENDIF
  IF NOT sExec THEN sExec = "konqueror"
  IF NOT ProgramExist(sExec) THEN sExec = "firefox"
  IF NOT ProgramExist(sExec) THEN sExec = "mozilla-firefox"
  IF NOT ProgramExist(sExec) THEN sExec = "mozilla"
  IF NOT ProgramExist(sExec) THEN sExec = "opera"
  IF NOT ProgramExist(sExec) THEN RETURN

  IF String.Left(sLink) = "/" THEN sLink = "file://" & Replace$(sLink, "?", "%3F")

  SHELL sExec & " " & Chr$(34) & sLink & Chr$(34)

END

PUBLIC FUNCTION ProgramExist(sProg AS String) AS Boolean

  DIM sTemp AS String
  DIM iPos AS Integer

  iPos = String.InStr(sProg, " ")
  IF iPos THEN sProg = String.Left(sProg, iPos - 1)

  SHELL "which " & sProg TO sTemp

  IF NOT sTemp THEN RETURN FALSE
  RETURN NOT (Trim$(sTemp) LIKE "which: *")

END

PUBLIC SUB DisplayGraphs(iMode AS Integer, sGroup AS String, oPanel AS Object, OPTIONAL bAppend AS Boolean)

  DIM pGraph AS Picture
  DIM sGraphs AS String[]
  DIM sList, sGraph AS String
  DIM hPictureBox AS PictureBox
  DIM sType, sName AS String
  DIM oObject AS Object
  DIM rDevices AS Result
  DIM iHeight AS Integer

  IF Main.bRRDToolEnabled THEN RRDTool.CreateGraphs(sGroup)

  SELECT CASE iMode
    CASE 0
      sType = "1h"
      sName = ("Hour")
    CASE 1
      sType = "1d"
      sName = ("Day")
    CASE 2
      sType = "1w"
      sName = ("Week")
    CASE 3
      sType = "1m"
      sName = ("Month")
    CASE 4
      sType = "1y"
      sName = ("Year")
  END SELECT

  IF NOT bAppend THEN
    ' delete previous graphs first
    FOR EACH oObject IN oPanel.Children
        oObject.Delete()
    NEXT
  END IF

  IF iMode = 0 THEN
    DisplayHeader(sGroup & (" Sensors"), oPanel)
    DisplaySensors(sGroup, oPanel, sGroup)
  END IF

  DisplayHeader(sGroup & (" Statistics - Last") & " " & sName, oPanel)
  sList = RRDTool.Graphs(sGroup)
  sGraphs = Split(sList, "|")
  FOR EACH sGraph IN sGraphs
    IF sGraph THEN
      sGraph &= "-" & sType & ".png"
      TRY pGraph = Picture.Load(sGraph)
      IF pGraph THEN
        hPictureBox = NEW PictureBox(oPanel) AS "Graph"
        WITH hPictureBox
          .Picture = pGraph
          .Height = 200
          .Width = 528
          .Tag = sGraph
        END WITH
      END IF
    END IF
  NEXT
  iHeight = 0
  ' calculated needed scrollview height
  FOR EACH oObject IN oPanel.Children
      iHeight += oObject.Height
  NEXT
  oPanel.Height = iHeight

END

PUBLIC SUB DisplaySecurity(sGroup AS String, oPanel AS Object)

  DIM pGraph AS Picture
  DIM sGraphs AS String[]
  DIM sList, sGraph AS String
  DIM hPictureBox AS PictureBox
  DIM sType AS String
  DIM oObject AS Object
  DIM rDevices AS Result

  ' delete previous graphs first
  FOR EACH oObject IN oPanel.Children
    oObject.Delete()
  NEXT

  DisplaySensors(sGroup, oPanel, "Doors")
  DisplaySensors(sGroup, oPanel, "Windows")
  DisplaySensors(sGroup, oPanel, "Motion")

END

PUBLIC SUB DisplayHeader(sText AS String, oPanel AS Object)

  DIM hText AS TextBox

  hText = NEW TextBox(oPanel) AS "Header"
  WITH hText
    .Border = FALSE
    .Text = sText
    .Width = 350
    .Font = Font["Sans Serif, 12"]
    .Tag = sText
  END WITH

END

PUBLIC SUB DisplaySensors(sGroup AS String, oPanel AS Object, sGroup2 AS String)

  DIM hText AS TextLabel
  DIM rDevice, rType AS Result
  DIM hPanel AS Panel
  DIM sText, sValue AS String
  DIM bPrintHeader, bDisplayHeader AS Boolean
  DIM hMovieBox AS MovieBox

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF rDevice.Count THEN
    FOR EACH rDevice
      IF InStr(rDevice!groups, sGroup) THEN
        IF InStr(rDevice!groups, sGroup2) THEN
          IF NOT bDisplayHeader THEN
            SELECT sGroup2
              CASE "Doors"
                DisplayHeader(("Door Sensors"), oPanel)
              CASE "Windows"
                DisplayHeader(("Window Sensors"), oPanel)
              CASE "Motion"
                DisplayHeader(("Motion Sensors"), oPanel)
            END SELECT
            INC bDisplayHeader
          END IF
          ' create panel for sensor info
          IF NOT bPrintHeader THEN
            hPanel = NEW Panel(oPanel) AS "Panel"
            WITH hPanel
              .X = 10
              .Height = 20
              .Width = oPanel.Width - 10
            END WITH

            ' name
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .ForeColor = Color.Gray
              .Text = ("Name")
              .X = 30
              .Width = 150
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH

            ' value 1 name
            IF InStr(sGroup, "Climate") OR InStr(sGroup, "HVAC") THEN
              sText = ("Temp")
            ELSE IF InStr(sGroup, "Energy") THEN
              sText = ("Power")
            ELSE IF InStr(sGroup, "Security") THEN
              sText = ("Status")
            END IF
            ' value 1
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .ForeColor = Color.Gray
              .Text = sText
              .X = 185
              .Width = 50
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH
            sText = ""
            ' value2 if set
            IF InStr(sGroup, "Climate") THEN
              sText = ("Humid")
            ELSE IF InStr(sGroup, "Energy") THEN
              sText = ("Usage")
            ELSE IF InStr(sGroup, "Security") THEN
              sText = ("Tamper")
            END IF
            IF InStr(sGroup2, "Motion") THEN
              sText = ""
            END IF
            IF sText THEN
              ' value2
              hText = NEW TextLabel(hPanel) AS "Sensors"
              WITH hText
                .ForeColor = Color.Gray
                .Text = sText
                .X = 270
                .Width = 90
                .Font = Font["Sans Serif, 8, Normal"]
              END WITH
            END IF
            IF sGroup <> "Security" THEN
              sText = ""
              ' value3 if set
              IF InStr(sGroup, "Climate") THEN
                sText = ("Level")
              ELSE IF InStr(sGroup, "Energy") THEN
                sText = ("Usage/Hour")
              END IF
              IF sText THEN
                ' value3
                hText = NEW TextLabel(hPanel) AS "Sensors"
                WITH hText
                  .ForeColor = Color.Gray
                  .Text = sText
                  .X = 355
                  .Width = 90
                  .Font = Font["Sans Serif, 8, Normal"]
                END WITH
              END IF
              ' value4
              sText = ""
              IF InStr(sGroup, "Climate") THEN
                sText = ("Extra")
              END IF
              IF sText THEN
                hText = NEW TextLabel(hPanel) AS "Sensors"
                WITH hText
                  .ForeColor = Color.Gray
                  .Text = "Extra"
                  .X = 440
                  .Width = 90
                  .Font = Font["Sans Serif, 8, Normal"]
                END WITH
              END IF
            END IF
            ' last seen time
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .ForeColor = Color.Gray
              .Text = ("Last Seen")
              IF sGroup = "Security" THEN
                .X = 355
              ELSE
                .X = 525
              END IF
              .Width = 120
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH

            INC bPrintheader
          END IF

          ' fetch devicetype values
          TRY rType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rDevice!module)

          hPanel = NEW Panel(oPanel) AS "Panel"
          WITH hPanel
            .X = 10
            .Height = 20
            .Width = oPanel.Width - 10
          END WITH

          hMovieBox = NEW MovieBox(hPanel) AS "Icon"
          WITH hMovieBox
            IF rDevice!onicon OR rDevice!officon THEN
              IF UCase$(rDevice!value) = "ON" OR UCase$(rDevice!value) = "OPEN" OR UCase$(rDevice!value) = "MOTION" THEN
                .Path = Main.sBaseDir &/ "icons" &/ rDevice!onicon
              ELSE
                .Path = Main.sBaseDir &/ "icons" &/ rDevice!officon
              END IF
            END IF
            .Height = 20
            .Width = 20
            .X = 10
            .Playing = TRUE
          END WITH

          ' device name
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = rDevice!name
            .X = 30
            .Width = 150
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH
          ' RFXPwr or RFXPulse Module
          IF InStr(rType!name, "RFXPwr") OR InStr(rType!name, "RFXPulse") THEN
            sValue = rDevice!value / 100
          ELSE
            sValue = rDevice!value
          END IF
          ' value1
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sValue & " " & rDevice!label
            .X = 185
            .Width = 90
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH

          ' value2 if set
          IF rDevice!value2 THEN
            sText = rDevice!value2 & " " & rDevice!label2
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .Text = sText
              .X = 270
              .Width = 90
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH
          END IF
          IF sGroup <> "Security" THEN
            ' value3 if set
            IF rDevice!value3 THEN
              sText = rDevice!value3 & " " & rDevice!label3
              hText = NEW TextLabel(hPanel) AS "Sensors"
              WITH hText
                .Text = sText
                .X = 355
                .Width = 90
                .Font = Font["Sans Serif, 8, Normal"]
              END WITH
            END IF
            ' value4 if set
            IF rDevice!value4 THEN
              sText = rDevice!value4 & " " & rDevice!label4
              hText = NEW TextLabel(hPanel) AS "Sensors"
              WITH hText
                .Text = sText
                .X = 440
                .Width = 90
                .Font = Font["Sans Serif, 8, Normal"]
              END WITH
            END IF
          END IF
          ' last seen time
          IF rDevice!lastseen THEN
            sText = Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
          ELSE
            sText = ""
          END IF
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            IF sGroup = "Security" THEN
              .X = 355
            ELSE
              .X = 525
            END IF
            .Width = 180
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH
        END IF
      END IF
    NEXT
    ' blank space
    hPanel = NEW Panel(oPanel) AS "Panel"
    WITH hPanel
      .X = 35
      .Height = 20
      .Width = oPanel.Width - 10
    END WITH
  END IF
END

PUBLIC SUB DisplaySensorsforLocation(iLocationId AS Integer, oPanel AS Object)

  DIM hText AS TextLabel
  DIM rDevice, rType AS Result
  DIM hMovieBox AS MovieBox
  DIM hPanel AS Panel
  DIM sText, sValue AS String
  DIM bPrintHeader AS Boolean
  DIM iHeight AS Integer
  DIM oObject AS Object

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF rDevice.Count THEN
    FOR EACH rDevice
      IF rDevice!location = iLocationId THEN
        ' create panel for sensor info
        IF NOT bPrintHeader THEN
          hPanel = NEW Panel(oPanel) AS "Panel"
          WITH hPanel
            .X = 25
            .Height = 20
            .Width = oPanel.Width - 10
          END WITH

          ' name
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = ("Name")
            .X = 30
            .Width = 150
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH

          ' last change time
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = ("Last Seen")
            .X = 490
            .Width = 140
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH

          INC bPrintheader
        END IF

        ' fetch devicetype values
        TRY rType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rDevice!module)

        hPanel = NEW Panel(oPanel) AS "Panel"
        WITH hPanel
          .X = 35
          .Height = 20
          .Width = oPanel.Width - 10
        END WITH

        ' device icon
        hMovieBox = NEW MovieBox(hPanel) AS "Icon"
        WITH hMovieBox
          IF rDevice!onicon AND rDevice!officon THEN
            IF UCase$(rDevice!value) = "ON" OR UCase$(rDevice!value) = "OPEN" OR UCase$(rDevice!value) = "MOTION" THEN
              .Path = Main.sBaseDir &/ "icons" &/ rDevice!onicon
            ELSE
              .Path = Main.sBaseDir &/ "icons" &/ rDevice!officon
            END IF
          END IF
          .Height = 20
          .Width = 20
          .X = 10
          .Playing = TRUE
        END WITH

        ' device name
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = rDevice!name
          .X = 30
          .Width = 150
          .Font = Font["Sans Serif, 7, Normal"]
        END WITH
        ' RFXPwr or RFXPulse Module
        IF InStr(rType!name, "RFXPwr") OR InStr(rType!name, "RFXPulse") THEN
          sValue = rDevice!value / 100
        ELSE
          sValue = rDevice!value
        END IF

        ' value1
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = sValue & " " & rDevice!label
          .X = 180
          .Width = 90
          .Font = Font["Sans Serif, 7, Normal"]
        END WITH

        ' value2 if set
        IF rDevice!value2 THEN
          sText = rDevice!value2 & " " & rDevice!label2
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 260
            .Width = 90
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
        END IF

        ' value3 if set
        IF rDevice!value3 THEN
          sText = rDevice!value3 & " " & rDevice!label3
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 340
            .Width = 90
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
        END IF

        ' value4 if set
        IF rDevice!value4 THEN
          sText = rDevice!value4 & " " & rDevice!label4
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 424
            .Width = 90
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
        END IF

        ' last seen time
        IF rDevice!lastseen THEN 
          sText = Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        ELSE
          sText = "Never"
        END IF
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = sText
          .X = 490
          .Width = 120
          .Font = Font["Sans Serif, 7, Normal"]
        END WITH
      END IF
    NEXT
    ' blank space
    hPanel = NEW Panel(oPanel) AS "Panel"
      WITH hPanel
        .X = 35
        .Height = 20
        .Width = oPanel.Width - 10
      END WITH
  END IF
  iHeight = 0
  ' calculated needed scrollview height
  FOR EACH oObject IN oPanel.Children
    iHeight += oObject.Height
  NEXT
  oPanel.Height = iHeight

END

PUBLIC SUB SpaceAlignLeft(sString AS String, iLength AS Integer) AS String

  WHILE Len(sString) < iLength
    sString = sString & " "
  WEND
  RETURN sString

END

PUBLIC SUB SpaceAlign(sString AS String, iLength AS Integer) AS String

  WHILE Len(sString) < iLength
    sString = " " & sString
  WEND
  RETURN sString

END

PUBLIC SUB DisplayLocation(sLocation AS String, oPanel AS Object)

  DIM oObject AS Object
  DIM iLocationId AS Integer
  DIM rLocation AS Result

  ' delete previous graphs first
  FOR EACH oObject IN oPanel.Children
    oObject.Delete()
  NEXT

  ' fetch location name
  rLocation = Main.hDB.Exec("SELECT * FROM locations WHERE name LIKE &1", sLocation)
  IF (rLocation.Count >= 1) THEN
    iLocationId = rLocation!id
  ELSE
    Message("No locations found!")
    RETURN
  END IF

  DisplayHeader(sLocation, oPanel)
  DisplaySensorsforLocation(iLocationId, oPanel)

END

PUBLIC SUB DisplayNotImplemented(sText AS String, oPanel AS Object)

  DIM hFrame AS Frame
  DIM hTextLabel AS TextLabel

  sText = Subst("This form is a placeholder for things to come, read the comments in the source of form &1 for more details.", sText)

  hFrame = NEW Frame(oPanel) AS "FrameNI"
  WITH hFrame
    .X = 5
    .Y = 5
    .Height = 70
    .Width = 378
    .Text = "Information"
  END WITH

  hTextLabel = NEW TextLabel(hFrame) AS "TextLabelNI"
  WITH hTextLabel
    .X = 7
    .Y = 21
    .Text = sText
    .Width = 364
    .Height = 35
  END WITH

END

' wake up a computer by sending a WOL magic packet
PUBLIC SUB WakeOnLan(sMAC AS String) AS Boolean

  DIM aMAC, aIPs, athisIP AS String[]
  DIM sHWAddress, sMsg, sHost, sIP AS String
  DIM iCount AS Integer

  aMAC = Split(sMAC, ":")

  FOR iCount = 0 TO 5
    sHWAddress &= aMAC[icount]
  NEXT
  sMsg = Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255)
  FOR iCount = 1 TO 16
    sMsg &= sHWAddress
  NEXT

  ' sent it to all computers on this network
  hBroadcast = NEW UdpSocket AS "Broadcast"
  hBroadcast.Broadcast = TRUE
  hBroadcast.Bind(0)
  hBroadcast.TargetPort = 9

  EXEC ["hostname", "-i"] TO sHost
  aIPs = Split(Trim$(sHost), " ")
  FOR EACH sIP IN aIPs
    athisIP = Split(sIP, ".")
    IF CInt(athisIP[0]) = 127 THEN CONTINUE
    hBroadcast.TargetHost = athisIP[0] & "." & athisIP[1] & "." & athisIP[2] & "." & "255"
    WRITE #hBroadcast, sMsg, Len(sMsg)
  NEXT
  CLOSE hBroadcast

END

PUBLIC SUB Broadcast_Error()

  SELECT CASE hBroadcast.Status
    CASE Net.CannotBindSocket
      Main.WriteDebugLog("[WOL] Unable to Bind to that port")
    CASE Net.CannotCreateSocket
      Main.WriteDebugLog("[WOL] System does not allow to create a socket")
    CASE Net.CannotRead
      Main.WriteDebugLog("[WOL] Error Sending Data")
    CASE Net.CannotWrite
      Main.WriteDebugLog("[WOL] Error Receiving Data")
  END SELECT

END

PUBLIC SUB DisplayBool(bSwitch AS Boolean) AS String

  SELECT bSwitch
    CASE TRUE
        RETURN "True"
    CASE ELSE
        RETURN "False"
  END SELECT

END

PUBLIC SUB IsTime(sString AS String) AS Boolean

  IF Len(sString) > 3 AND InStr(sString, ":") THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END
