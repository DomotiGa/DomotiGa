' Gambas module file

' Description:
' Bluetooth.module
' Support for Bluetooth proximity, see if a user is around by checking his bluetooth device(s).

' Development Status:
' Just build, bugs around, maybe need to reorganize.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tBluetooth AS NEW Timer

PUBLIC FUNCTION Run()

  ' start poll timer for bluetooth
  tBluetooth = NEW Timer AS "tBluetooth"
  tBluetooth.Delay = Main.iBluetoothPollTime * 1000 ' multiply for seconds
  tBluetooth.Start

END

PUBLIC SUB CheckBluetooth()

  DIM rResult, rUser AS Result
  DIM sRSSI AS String
  DIM iRSSI AS Integer
  DIM sProx AS String

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF rResult THEN
    IF (rResult.Count >= 1) THEN
      FOR EACH rResult
        IF InStr(Devices.FindTypeForDevice(rResult!id), "Bluetooth")
          sRSSI = GetRSSI(rResult!address)
          IF Main.bBluetoothDebug THEN
            Main.WriteDebugLog("[Bluetooth] checking device named '" & rResult!name & "' with MAC address " & rResult!address)
            Main.WriteDebugLog("[Bluetooth] " & Replace(sRSSI, gb.NewLine, ""))
          END IF
          IF IsInteger(Val(sRSSI)) THEN
            iRSSI = IsInteger(Val(sRSSI))
            IF iRSSI > Main.iBluetoothThreshold THEN 
              sProx = "Near"
            ELSE
              sProx = "Far"
            END IF
            Devices.Update(rResult!id, Val(sRSSI), sProx)
            IF Main.bBluetoothDebug THEN Main.WriteDebugLog("[Bluetooth] got RSSI value " & iRSSI)
            IF iRSSI > Main.iBluetoothThreshold THEN
              IF rResult!user THEN
                rUser = Main.hDB.Exec("SELECT * FROM users WHERE id = &1", rResult!user)
                IF rUser THEN
                  Main.WriteLog("Bluetooth Proximity detected that '" & rUser!fullname & "' is home!")
                END IF
              END IF
            END IF
          ELSE
            Devices.Update(rResult!id, "-", "Away")
          END IF
        END IF
      NEXT
    ELSE
      Main.WriteLog("Bluetooth: no Bluetooth device(s) found in device table!")
    END IF
  END IF

END

PUBLIC FUNCTION ConnectBT(sAddress AS String)

  DIM sConnect AS String
  DIM iDeviceId AS Integer

  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("Bluetooth Dongle"))

  IF iDeviceId THEN
    SHELL "hcitool cc " & sAddress & " 2>&1" TO sConnect
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return field strenght
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetRSSI(sAddress AS String) AS String

  DIM sStrength AS String

  SHELL "hcitool rssi " & sAddress & " 2>&1" TO sStrength
  IF InStr(sStrength, "Not connected.") THEN
    RETURN sStrength
  ELSE IF InStr(sStrength, "Read RSSI failed:") THEN
    RETURN sStrength
  ELSE
    RETURN Replace$(sStrength, "RSSI return value: ", "")
  END IF

END

PUBLIC SUB tBluetooth_Timer()

  CheckBluetooth()

END
