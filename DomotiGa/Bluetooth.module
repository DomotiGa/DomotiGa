' Gambas module file

' Description:
' Bluetooth.module
' Support for Bluetooth proximity, see if a user is around by checking his bluetooth device(s).

' Development Status:
' Just build, bugs around, maybe need to reorganize.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC tBluetooth AS NEW Timer
PUBLIC sOutput AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer for polling
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Run()

  ' start poll timer for bluetooth
  tBluetooth = NEW Timer AS "tBluetooth"
  tBluetooth.Delay = Main.iBluetoothPollTime * 1000 ' multiply for seconds
  tBluetooth.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan for BT devices, don't calculate RSSI
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB ScanBluetooth()

  DIM rResult, rUser AS Result

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      FOR EACH rResult
        IF InStr(Devices.FindTypeForDevice(rResult!id), "Bluetooth")
          IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] checking device named '") & rResult!name & ("' with MAC address ") & rResult!address)
          IF BrowseBluetooth(rResult!address) THEN
            Devices.ValueUpdate(rResult!id, "Home", "", "", "")
            IF rResult!user THEN
              rUser = Main.hDB.Exec("SELECT * FROM users WHERE id = &1", rResult!user)
              IF rUser.Available THEN
                Main.WriteLog(("Bluetooth Proximity detected that '") & rUser!fullname & ("' is home!"))
              END IF
            END IF
          ELSE
            Devices.ValueUpdate(rResult!id, ("Away"), "", "", "")
          END IF
        END IF
      NEXT
    ELSE
      IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] No Bluetooth device(s) found in device table!"))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check all BT device in db, and check their RSSI
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB CheckBluetooth()

  DIM rResult, rUser AS Result
  DIM sRSSI, sProx AS String
  DIM iRSSI AS Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      FOR EACH rResult
        IF InStr(Devices.FindTypeForDevice(rResult!id), "Bluetooth")
          sRSSI = GetRSSI(rResult!address)
          IF Main.bBluetoothDebug THEN
            Main.WriteDebugLog(("[Bluetooth] checking device named '") & rResult!name & ("' with MAC address ") & rResult!address)
            Main.WriteDebugLog("[Bluetooth] " & Replace(sRSSI, gb.NewLine, ""))
          END IF
          IF IsInteger(Val(sRSSI)) THEN
            iRSSI = IsInteger(Val(sRSSI))
            IF iRSSI > Main.iBluetoothThreshold THEN
              sProx = ("Near")
            ELSE
              sProx = ("Far")
            END IF
            Devices.ValueUpdate(rResult!id, ("Home"), sProx, Val(sRSSI), "", "")
            IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] got RSSI value ") & iRSSI)
            IF iRSSI > Main.iBluetoothThreshold THEN
              IF rResult!user THEN
                rUser = Main.hDB.Exec("SELECT * FROM users WHERE id = &1", rResult!user)
                IF rUser.Available THEN
                  Main.WriteLog(("Bluetooth Proximity detected that '") & rUser!fullname & ("' is home!"))
                END IF
              END IF
            END IF
          ELSE
            Devices.ValueUpdate(rResult!id, ("Away"), "", "", "")
          END IF
        END IF
      NEXT
    ELSE
      IF Main.bBluetoothDebug THEN Main.WriteDebugLog(("[Bluetooth] No Bluetooth device(s) found in device table!"))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan for BT devices and check MAC address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION BrowseBluetooth(sAddress AS String) AS Boolean

  DIM sScan AS String

  SHELL "hcitool scan " & sAddress & " 2>&1" TO sScan
  IF InStr(sScan, sAddress) THEN
    RETURN TRUE
  ELSE
    RETURN FALSE
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return BT field strenght info
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION GetRSSI(sAddress AS String) AS String

  DIM sStrength AS String

  SHELL "hcitool rssi " & sAddress & " 2>&1" TO sStrength
  IF InStr(sStrength, "Not connected.") THEN
    RETURN sStrength
  ELSE IF InStr(sStrength, "Read RSSI failed:") THEN
    RETURN sStrength
  ELSE
    RETURN Replace$(sStrength, "RSSI return value: ", "")
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start one of two scan types depending on Threshold setting
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tBluetooth_Timer()

  IF Main.iBluetoothThreshold = 255 THEN
    ScanBluetooth()
  ELSE
    CheckBluetooth()
  END IF

END