' Gambas class file

' Description:
' FMain.class
' Main GUI window

' DomotiGa - an open source home automation program
' Copyright(C) 2008-2010 Ron Klinkien

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the
' GNU General PUBLIC License for more details.

' You should have received a copy of the GNU General PUBLIC License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

PUBLIC hToolButton AS ToolButton

PUBLIC SUB Form_Open()

  ' open splash/login screen
  FSplashScreen.ShowModal

  ME.Text = "DomotiGa " & IIf(Main.bServer, "Server ", "Client ") & Main.sProgramVersion & " - Open Source Home Automation" & " - (" & Main.sSQLHost & ":" & Main.sSQLDatabase & ")"
  IF Main.bMainDebug THEN Main.WriteLog(("Main Debug enabled."))
  ' Main.GlobalVar["Tagline"] = Main.Random_Text("remarks_tags")
  Main.SetGlobalVar("Tagline", Main.Random_Text("remarks_tags"))

  RefreshMenu()
  OpenMenu(Main.sStartpage)
  Sounds.PlaySnd("click.wav")

  ' display correct menu layout depending on program mode
  IF Main.bServer THEN
    MenuClient.Visible = FALSE
    MenuClientSettingsGUI.Visible = FALSE
    MenuClientSettingsMySQL.Visible = FALSE
    MenuSettingsMySQL.Visible = TRUE
    MenuSettingsGUI.Visible = TRUE
  ELSE
    MenuClient.Visible = TRUE
    MenuClientSettingsMySQL.Visible = TRUE
    MenuClientSettingsGUI.Visible = TRUE
    MenuSettingsMySQL.Visible = FALSE
    MenuSettingsGUI.Visible = FALSE
  END IF

END

PUBLIC SUB RefreshMenu()

  DIM rResult, rResultMenu AS Result
  DIM iCount, iPanel AS Integer

  VBoxMenu1.Height = 0
  VBoxMenu2.Height = 0
  VBoxMenu3.Height = 0
  VBoxMenu4.Height = 0

  ' fill toolpanel with enabled menu items
  rResultMenu = Main.hDB.Exec("SELECT * FROM menu_names")
  IF rResultMenu THEN
    IF (rResultMenu.Count >= 1) THEN
      FOR EACH rResultMenu
        rResult = Main.hDB.Exec("SELECT * FROM menu WHERE menu = &1 ORDER BY position", rResultMenu!id)
        IF NOT rResult THEN
          Message.Info(("Error: table 'menu' not found!"))
          RETURN
        END IF
        tpnMain[iPanel].Text = rResultMenu!name
        FOR iCount = 0 TO rResult.Max
          IF rResult!enabled = TRUE THEN
            IF rResult!menu = 1 THEN
              hToolButton = NEW ToolButton(VBoxMenu1) AS "MenuToolButton"
              VBoxMenu1.Height = VBoxMenu1.Height + 42
            ELSE IF rResult!menu = 2 THEN
              hToolButton = NEW ToolButton(VBoxMenu2) AS "MenuToolButton"
              VBoxMenu2.Height = VBoxMenu2.Height + 42
            ELSE IF rResult!menu = 3 THEN
              hToolButton = NEW ToolButton(VBoxMenu3) AS "MenuToolButton"
              VBoxMenu3.Height = VBoxMenu3.Height + 42
            ELSE
              hToolButton = NEW ToolButton(VBoxMenu4) AS "MenuToolButton"
              VBoxMenu4.Height = VBoxMenu4.Height + 42
            END IF
            WITH hToolButton
              .Name = rResult!id
              .Text = rResult!name
              .Background = Color.TextBackground
              .Font = Font["-1"]
              .Height = 42
              .Width = 111
              .Picture = Picture["images" &/ rResult!icon]
              .Tag = rResult!item
            END WITH
          END IF
          rResult.MoveNext
        NEXT
        INC iPanel
      NEXT
    ELSE
      Message(("No menu names found!"))
    END IF
  ELSE
    Message.Info(("Error: table 'menu_names' not found!"))
  END IF

END

PUBLIC SUB OpenMenu(sStart AS String)

  SELECT CASE sStart
    CASE "FHome"
      OpenPage(FHome)
    CASE "FControl"
      OpenPage(FControl)
    CASE "FFloorplans"
      OpenPage(FFloorplans)
    CASE "FLocations"
      OpenPage(FLocations)
    CASE "FDevices"
      OpenPage(FDevices)
    CASE "FSecurity"
      OpenPage(FSecurity)
    CASE "FClimate"
      OpenPage(FClimate)
    CASE "FHVAC"
      OpenPage(FHVAC)
    CASE "FEnergy"
      OpenPage(FEnergy)
    CASE "FEmail"
      OpenPage(FEmail)
    CASE "FEvents"
      OpenPage(FEvents)
    CASE "FPhone"
      OpenPage(FPhone)
    CASE "FCaptures"
      OpenPage(FCaptures)
    CASE "FBarcodes"
      OpenPage(Fbarcodes)
    CASE "FCamera"
      OpenPage(FCamera)
    CASE "FNews"
      OpenPage(Fnews)
    CASE "FTVGuide"
      OpenPage(FTVGuide)
    CASE "FWeather"
      OpenPage(FWeather)
    CASE "FLogfiles"
      OpenPage(FLogfiles)
    CASE "FDebug"
      OpenPage(FDebug)
    CASE "FServerStats"
      OpenPage(FServerStats)
    CASE "FDSC"
      OpenPage(FDSC)
    CASE "FMusic"
      OpenPage(FMusic)
    CASE ELSE
      OpenPage(FHome)
  END SELECT

END

PUBLIC SUB UpdateStatusPanel()

  ' display correct modes
  txtMode.Text = Main.GlobalVar["House_Mode"]
  txtSunRise.Text = Main.GlobalVar["Sunrise"]
  txtSunSet.Text = Main.GlobalVar["Sunset"]
  ' update e-mail/voice counters
  Main.UpdateCounters()
  ' hide leds of disabled interfaces
  IF Main.bOneWireEnabled THEN
    FMain.tbOneWire.Visible = TRUE
    FMain.pbOneWire.Visible = TRUE
  ELSE
    FMain.tbOneWire.Visible = FALSE
    FMain.pbOneWire.Visible = FALSE
  END IF
  IF Main.bDSCEnabled THEN
    FMain.tbDSC.Visible = TRUE
    FMain.pbDSC.Visible = TRUE
    FMain.MenuToolsDSCPanel.Enabled = TRUE
  ELSE
    FMain.tbDSC.Visible = FALSE
    FMain.pbDSC.Visible = FALSE
    FMain.MenuToolsDSCPanel.Enabled = FALSE
  END IF
  IF Main.bRFXComRXEnabled OR IF Main.bRFXComTXEnabled THEN
    FMain.tbRFXCom.Visible = TRUE
    FMain.pbRFXCom.Visible = TRUE
  ELSE
    FMain.tbRFXCom.Visible = FALSE
    FMain.pbRFXCom.Visible = FALSE
  END IF
  IF Main.bCTX35Enabled
    FMain.tbX10.Visible = TRUE
    FMain.pbX10.Visible = TRUE
    FMain.MenuToolsX10Cmdr.Enabled = TRUE
  ELSE
    FMain.tbX10.Visible = FALSE
    FMain.pbX10.Visible = FALSE
    FMain.MenuToolsX10Cmdr.Enabled = FALSE
  END IF
  IF Main.bRFXComTXEnabled THEN FMain.MenuToolsX10Cmdr.Enabled = TRUE
  IF Main.bEIBEnabled
    FMain.tbEIB.Visible = TRUE
    FMain.pbEIB.Visible = TRUE
  ELSE
    FMain.tbEIB.Visible = FALSE
    FMain.pbEIB.Visible = FALSE
  END IF
  IF Main.bPLCBUSEnabled
    FMain.tbPLCBUS.Visible = TRUE
    FMain.pbPLCBUS.Visible = TRUE
    FMain.MenuToolsPLCBUSCmdr.Enabled = TRUE
  ELSE
    FMain.tbPLCBUS.Visible = FALSE
    FMain.pbPLCBUS.Visible = FALSE
    FMain.MenuToolsPLCBUSCmdr.Enabled = FALSE
  END IF
  IF Main.bZWaveEnabled THEN
    FMain.tbZWave.Visible = TRUE
    FMain.pbZWave.Visible = TRUE
    FMain.MenuToolsZWaveCmdr.Enabled = TRUE
  ELSE
    FMain.tbZWave.Visible = FALSE
    FMain.pbZWave.Visible = FALSE
    FMain.MenuToolsZWaveCmdr.Enabled = FALSE
  END IF
  IF Main.bDomoticaEnabled THEN
    FMain.MenuToolsDomoCmdr.Enabled = TRUE
  ELSE
    FMain.MenuToolsDomoCmdr.Enabled = FALSE
  END IF
  ' todo
  IF NOT Main.bServer THEN
    FMain.MenuToolsX10Cmdr.Enabled = FALSE
    FMain.MenuToolsDSCPanel.Enabled = FALSE
    FMain.MenuToolsRFXComCmdr.Enabled = FALSE
  END IF

END

PUBLIC SUB Form_Resize()

  ' sidepanel
  IF spnMain.Hidden THEN
    spnMain.Move(1, 1, 8, ME.ClientHeight - 33)
  ELSE
    spnMain.Move(1, 1, 152, ME.ClientHeight - 33)
  END IF
  ' toolpanel
  tpnMain.Move(1, 1, 140, ME.ClientHeight - 35)
  ScrollViewMenu1.Move(0, 1, 136, ME.ClientHeight - 120)
  ScrollViewMenu2.Move(0, 1, 136, ME.ClientHeight - 120)
  ScrollViewMenu3.Move(0, 1, 136, ME.ClientHeight - 120)
  ScrollViewMenu4.Move(0, 1, 136, ME.ClientHeight - 120)
  ' status panel & bar
  pnlStatus.Move(2, ME.ClientHeight - 29, ME.ClientWidth - 4, 24)
  hbStatus.Move(4, 1, ME.ClientWidth - 12, 15)
  ' workspace
  wrkMain.Move(spnMain.Width + 2, 3, ME.ClientWidth - spnMain.Width - 4, ME.ClientHeight - 35)

END

PUBLIC SUB DisplayGraphs(sRange AS String, sGroup AS String, oPanel AS Object, OPTIONAL bAppend AS Boolean)

  DIM pGraph AS Picture
  DIM sGraphs AS String[]
  DIM sGraph AS String
  DIM hPictureBox AS PictureBox
  DIM oObject AS Object
  DIM rDevices AS Result
  DIM iHeight AS Integer

  IF NOT bAppend THEN
    ' delete previous graphs first
    FOR EACH oObject IN oPanel.Children
      oObject.Delete()
    NEXT
  END IF

  IF sRange = "1h" THEN
    DisplayHeader(sGroup & (" Sensors"), oPanel)
    DisplaySensors(sGroup, oPanel, sGroup)
  END IF

  IF Main.bRRDToolEnabled THEN
    sGraphs = Split(RRDTool.Graphs(sGroup), "|")
    IF sGraphs.Count THEN
      DisplayHeader(sGroup & (" Statistics - Last ") & sRange, oPanel)
      RRDTool.CreateGraphs(sGroup, sRange)
      RRDTool.CreateExtGraphs(sGroup, sRange)
      FOR EACH sGraph IN sGraphs
        IF sGraph THEN
          sGraph &= "-" & sRange & ".png"
          TRY pGraph = Picture.Load(sGraph)
          IF pGraph THEN
            hPictureBox = NEW PictureBox(oPanel) AS "Graph"
            WITH hPictureBox
              .Picture = pGraph
              .Height = pGraph.Height + 5
              .Width = pGraph.Width
              .Border = 0
              .Tag = sGraph
            END WITH
          ENDIF
        ENDIF
      NEXT
      iHeight = 0
      ' calculate needed scrollview and panel height
      FOR EACH oObject IN oPanel.Children
        iHeight += oObject.Height
      NEXT
      oPanel.Resize(oPanel.Width, iHeight)
    ENDIF
  ENDIF

END

PUBLIC SUB DisplaySecurity(sGroup AS String, oPanel AS Object)

  DIM oObject AS Object

  ' delete previous graphs first
  FOR EACH oObject IN oPanel.Children
    oObject.Delete()
  NEXT

  DisplaySensors(sGroup, oPanel, "Virtual")
  DisplaySensors(sGroup, oPanel, "Doors")
  DisplaySensors(sGroup, oPanel, "Windows")
  DisplaySensors(sGroup, oPanel, "Motion")

END

PUBLIC SUB DisplayHeader(sText AS String, oPanel AS Object)

  DIM hText AS TextBox

  hText = NEW TextBox(oPanel) AS "Header"
  WITH hText
    .Border = FALSE
    .Text = sText
    .Width = 350
    .Font = Font["Sans Serif, 12"]
    .Tag = sText
  END WITH

END

PUBLIC SUB DisplayMessage(sText AS String, oPanel AS Object)

  DIM hText AS TextBox

  hText = NEW TextBox(oPanel) AS "Message"
  WITH hText
    .Border = FALSE
    .Text = sText
    .Width = 350
    .Font = Font["Sans Serif, 8"]
    .Tag = sText
  END WITH

END

PUBLIC SUB DisplaySensors(sGroup AS String, oPanel AS Object, sGroup2 AS String)

  DIM hText AS TextLabel
  DIM rDevice, rType AS Result
  DIM hPanel AS Panel
  DIM sText, sValueIcon, sValue, sValue2, sValue3, sValue4 AS String
  DIM bPrintHeader, bDisplayHeader AS Boolean
  DIM hMovieBox AS MovieBox

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND groups LIKE &2 AND enabled is TRUE", "%" & sGroup & "%", "%" & sGroup2 & "%")
  IF rDevice THEN
    IF rDevice.Count THEN
      FOR EACH rDevice
        sValueIcon = UCase(rDevice!value)
        sValue = rDevice!value
        TRY sValue = (sValue / rDevice!divider) + rDevice!calibration
        sValue2 = rDevice!value2
        TRY sValue2 = (sValue2 / rDevice!divider2) + rDevice!calibration2
        sValue3 = rDevice!value3
        TRY sValue3 = (sValue3 / rDevice!divider3) + rDevice!calibration3
        sValue4 = rDevice!value4
        TRY sValue4 = (sValue4 / rDevice!divider4) + rDevice!calibration4
        IF NOT bDisplayHeader THEN
          SELECT sGroup2
            CASE "Virtual"
              DisplayHeader(sGroup & (" Sensors"), oPanel)
            CASE "Doors"
              DisplayHeader(("Door Sensors"), oPanel)
            CASE "Windows"
              DisplayHeader(("Window Sensors"), oPanel)
            CASE "Motion"
              DisplayHeader(("Motion Sensors"), oPanel)
          END SELECT
          bDisplayHeader = TRUE
        END IF
        ' create panel for sensor info
        IF NOT bPrintHeader THEN
          hPanel = NEW Panel(oPanel) AS "Panel"
          WITH hPanel
            .X = 10
            .Height = 20
            .Width = oPanel.Width - 10
          END WITH
          ' name
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = ("Name")
            .X = 30
            .Width = 150
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH
          ' value 1 name
          IF InStr(sGroup, "Climate") OR InStr(sGroup, "HVAC") THEN
            sText = ("Temp")
          ELSE IF InStr(sGroup, "Energy") THEN
            sText = ("Power")
          ELSE IF InStr(sGroup, "Security") THEN
            sText = ("Status")
          END IF
          ' value 1
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = sText
            .X = 185
            .Width = 50
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH
          sText = ""
          ' value2 if set
          IF InStr(sGroup, "Climate") THEN
            sText = ("Humid")
          ELSE IF InStr(sGroup, "Energy") THEN
            sText = ("Usage")
          ELSE IF InStr(sGroup, "Security") THEN
            sText = ("Tamper")
          END IF
          IF InStr(sGroup2, "Motion") THEN
            sText = ""
          END IF
          IF sText THEN
            ' value2
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .ForeColor = Color.Gray
              .Text = sText
              .X = 270
              .Width = 90
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH
          END IF
          IF sGroup <> "Security" THEN
            sText = ""
            ' value3 if set
            IF InStr(sGroup, "Climate") THEN
              sText = ("Level")
            ELSE IF InStr(sGroup, "Energy") THEN
              sText = ("Usage/Hour")
            END IF
            IF sText THEN
              ' value3
              hText = NEW TextLabel(hPanel) AS "Sensors"
              WITH hText
                .ForeColor = Color.Gray
                .Text = sText
                .X = 355
                .Width = 90
                .Font = Font["Sans Serif, 8, Normal"]
              END WITH
            END IF
            ' value4
            sText = ""
            IF InStr(sGroup, "Climate") THEN
              sText = ("Extra")
            END IF
            IF sText THEN
              hText = NEW TextLabel(hPanel) AS "Sensors"
              WITH hText
                .ForeColor = Color.Gray
                .Text = ("Extra")
                .X = 440
                .Width = 90
                .Font = Font["Sans Serif, 8, Normal"]
              END WITH
            END IF
          END IF
          ' last seen time
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = ("Last Seen")
            IF sGroup = "Security" THEN
              .X = 355
            ELSE
              .X = 525
            END IF
            .Width = 120
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH

          bPrintheader = TRUE
        END IF
        ' fetch devicetype values
        TRY rType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rDevice!module)

        hPanel = NEW Panel(oPanel) AS "Panel"
        WITH hPanel
          .X = 10
          .Height = 20
          .Width = oPanel.Width - 10
        END WITH
        hMovieBox = NEW MovieBox(hPanel) AS "Icon"
        WITH hMovieBox
          IF rDevice!onicon OR rDevice!officon THEN
            IF sValueIcon = "ON" OR sValueIcon = "OPEN" OR sValueIcon = "MOTION" OR sValueIcon = "UP" OR sValueIcon = "AWAKE" THEN
              TRY .Path = Main.sBaseDir &/ "icons" &/ rDevice!onicon
            ELSE IF InStr(sValueIcon, "DIM") THEN
              TRY .Path = Main.sBaseDir &/ "icons" &/ rDevice!dimicon
            ELSE
              TRY .Path = Main.sBaseDir &/ "icons" &/ rDevice!officon
            END IF
          END IF
          .Height = 20
          .Width = 20
          .X = 10
          .Playing = TRUE
        END WITH
        ' device name
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = rDevice!name
          .X = 30
          .Width = 150
          .Font = Font["Sans Serif, 8, Normal"]
        END WITH
        ' value1
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = sValue & " " & rDevice!label
          .X = 185
          .Width = 90
          .Font = Font["Sans Serif, 8, Normal"]
        END WITH
        ' value2 if set
        IF sValue2 THEN
          sText = sValue2 & " " & rDevice!label2
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 270
            .Width = 90
            .Font = Font["Sans Serif, 8, Normal"]
          END WITH
        END IF
        IF sGroup <> "Security" THEN
          ' value3 if set
          IF sValue3 THEN
            sText = sValue3 & " " & rDevice!label3
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .Text = sText
              .X = 355
              .Width = 90
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH
          END IF
          ' value4 if set
          IF sValue4 THEN
            sText = sValue4 & " " & rDevice!label4
            hText = NEW TextLabel(hPanel) AS "Sensors"
            WITH hText
              .Text = sText
              .X = 440
              .Width = 90
              .Font = Font["Sans Serif, 8, Normal"]
            END WITH
          END IF
        END IF
        ' last seen time
        IF rDevice!lastseen THEN
          sText = Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        ELSE
          sText = ""
        END IF
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = sText
          IF sGroup = "Security" THEN
            .X = 355
          ELSE
            .X = 525
          END IF
          .Width = 180
          .Font = Font["Sans Serif, 8, Normal"]
        END WITH
      NEXT
      ' blank space
      hPanel = NEW Panel(oPanel) AS "Panel"
      WITH hPanel
        .X = 35
        .Height = 20
        .Width = oPanel.Width - 10
      END WITH
    ELSE
      IF sGroup = "Security" THEN
        SELECT sGroup2
          CASE "Doors"
            DisplayHeader(("Door Sensors"), oPanel)
          CASE "Windows"
            DisplayHeader(("Window Sensors"), oPanel)
          CASE "Motion"
            DisplayHeader(("Motion Sensors"), oPanel)
        END SELECT
        DisplayMessage(("No devices found in groups ") & sGroup & (" and ") & sGroup2 & ".", oPanel)
      ELSE
        DisplayMessage(("No devices in group ") & sGroup & (" found."), oPanel)
      END IF
    END IF
  ENDIF

END

PUBLIC SUB DisplaySensorsforLocation(iLocationId AS Integer, oPanel AS Object)

  DIM hText AS TextLabel
  DIM rDevice, rType AS Result
  DIM hMovieBox AS MovieBox
  DIM hPanel AS Panel
  DIM sText, sValue, sValue2, sValue3, sValue4 AS String
  DIM bPrintHeader AS Boolean
  DIM iHeight AS Integer
  DIM oObject AS Object

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF rDevice.Count THEN
    FOR EACH rDevice
      IF rDevice!location = iLocationId THEN
        sValue = rDevice!value
        TRY sValue = (sValue / rDevice!divider) + rDevice!calibration
        sValue2 = rDevice!value2
        TRY sValue2 = (sValue2 / rDevice!divider2) + rDevice!calibration2
        sValue3 = rDevice!value3
        TRY sValue3 = (sValue3 / rDevice!divider3) + rDevice!calibration3
        sValue4 = rDevice!value4
        TRY sValue4 = (sValue4 / rDevice!divider4) + rDevice!calibration4
        ' create panel for sensor info
        IF NOT bPrintHeader THEN
          hPanel = NEW Panel(oPanel) AS "Panel"
          WITH hPanel
            .X = 25
            .Height = 20
            .Width = oPanel.Width - 10
          END WITH
          ' name
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = ("Name")
            .X = 30
            .Width = 150
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
          ' last change time
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .ForeColor = Color.Gray
            .Text = ("Last Seen")
            .X = 490
            .Width = 140
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
          bPrintheader = TRUE
        END IF
        ' fetch devicetype values
        TRY rType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rDevice!module)

        hPanel = NEW Panel(oPanel) AS "Panel"
        WITH hPanel
          .X = 35
          .Height = 20
          .Width = oPanel.Width - 10
        END WITH
        ' device icon
        hMovieBox = NEW MovieBox(hPanel) AS "Icon"
        WITH hMovieBox
          IF rDevice!onicon AND rDevice!officon THEN
            IF UCase$(rDevice!value) = "ON" OR UCase$(rDevice!value) = "OPEN" OR UCase$(rDevice!value) = "MOTION" THEN
              .Path = Main.sBaseDir &/ "icons" &/ rDevice!onicon
            ELSE
              .Path = Main.sBaseDir &/ "icons" &/ rDevice!officon
            END IF
          END IF
          .Height = 20
          .Width = 20
          .X = 10
          .Playing = TRUE
        END WITH
        ' device name
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = rDevice!name
          .X = 30
          .Width = 150
          .Font = Font["Sans Serif, 7, Normal"]
        END WITH
        ' value1
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = sValue & " " & rDevice!label
          .X = 180
          .Width = 90
          .Font = Font["Sans Serif, 7, Normal"]
        END WITH
        ' value2 if set
        IF sValue2 THEN
          sText = sValue2 & " " & rDevice!label2
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 260
            .Width = 90
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
        END IF
        ' value3 if set
        IF sValue3 THEN
          sText = sValue3 & " " & rDevice!label3
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 340
            .Width = 90
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
        END IF
        ' value4 if set
        IF sValue4 THEN
          sText = sValue4 & " " & rDevice!label4
          hText = NEW TextLabel(hPanel) AS "Sensors"
          WITH hText
            .Text = sText
            .X = 424
            .Width = 90
            .Font = Font["Sans Serif, 7, Normal"]
          END WITH
        END IF
        ' last seen time
        IF rDevice!lastseen THEN 
          sText = Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        ELSE
          sText = "Never"
        END IF
        hText = NEW TextLabel(hPanel) AS "Sensors"
        WITH hText
          .Text = sText
          .X = 490
          .Width = 120
          .Font = Font["Sans Serif, 7, Normal"]
        END WITH
      END IF
    NEXT
    ' blank space
    hPanel = NEW Panel(oPanel) AS "Panel"
    WITH hPanel
      .X = 35
      .Height = 20
      .Width = oPanel.Width - 10
    END WITH
  END IF
  iHeight = 0
  ' calculated needed scrollview height
  FOR EACH oObject IN oPanel.Children
    iHeight += oObject.Height
  NEXT
  oPanel.Height = iHeight

END

PUBLIC SUB DisplayLocation(sLocation AS String, oPanel AS Object)

  DIM oObject AS Object
  DIM iLocationId AS Integer
  DIM rLocation AS Result

  ' delete previous graphs first
  FOR EACH oObject IN oPanel.Children
    oObject.Delete()
  NEXT

  ' fetch location name
  rLocation = Main.hDB.Exec("SELECT * FROM locations WHERE name LIKE &1", sLocation)
  IF (rLocation.Count >= 1) THEN
    iLocationId = rLocation!id
  ELSE
    Message(("No locations found!"))
    RETURN
  END IF

  DisplayHeader(sLocation, oPanel)
  DisplaySensorsforLocation(iLocationId, oPanel)

END

PUBLIC SUB DisplayNotImplemented(sText AS String, oPanel AS Object)

  DIM hFrame AS Frame
  DIM hTextLabel AS TextLabel

  sText = Subst(("This form is a placeholder for things to come, read the comments in the source of form &1 for more details."), sText)

  hFrame = NEW Frame(oPanel) AS "FrameNI"
  WITH hFrame
    .X = 5
    .Y = 5
    .Height = 70
    .Width = 378
    .Text = ("Information")
  END WITH

  hTextLabel = NEW TextLabel(hFrame) AS "TextLabelNI"
  WITH hTextLabel
    .X = 7
    .Y = 21
    .Text = sText
    .Width = 364
    .Height = 35
  END WITH

END

PUBLIC SUB spnMain_Arrange()

  ' resize workspace
  wrkMain.Move(spnMain.Width + 2, 3, ME.ClientWidth - spnMain.Width - 4, ME.ClientHeight - 35)

END

PUBLIC SUB MenuToolbutton_Click()

  OpenMenu(LAST.tag)

END

' load a page onto the workspace, or give already loaded page focus.
PUBLIC SUB OpenPage(hForm AS Form)

  wrkMain.Add(hForm)
  wrkMain.ActiveWindow = hForm

END

PUBLIC SUB Form_Close()

  ' exit program
  Main.CloseAll()
  FMain.Close

END

PUBLIC SUB MenuLogout_Click()

  Main.bLogOut = TRUE
  ' show splash screen, load program
  FSplashScreen.ShowModal

END

PUBLIC SUB MenuQuit_Click()

  ' exit program
  Main.CloseAll()
  FMain.Close

END

' about menu entry
PUBLIC SUB MenuAbout_Click()

  FAbout.Show

END

PUBLIC SUB MenuSupport_Click()

  Desktop.Open("http://www.domotiga.nl")

END

PUBLIC SUB MenuDonate_Click()

  Desktop.Open("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=NT48KZRT7F3FA&lc=US&item_name=DomotiGa%20Open%20Source%20Project&item_number=domotiga&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted")

END

' device menu entries
PUBLIC SUB MenuDeviceModules_Click()

  FEditModulesGroups.Show

END

PUBLIC SUB MenuEditDevices_Click()

  FDeviceEditor.bAddDevice = TRUE
  FDeviceEditor.Show

END

PUBLIC SUB MenuDevicesList_Click()

  OpenPage(FDevices)

END

PUBLIC SUB MenuEditEvents_Click()

  FEventEditor.bAddEvent = TRUE
  FEventEditor.Show

END

PUBLIC SUB MenuEventsList_Click()

  OpenPage(FEvents)

END

PUBLIC SUB MenuEditTriggers_Click()

  FTriggerEditor.bAddTrigger = TRUE
  FTriggerEditor.Show()

END

PUBLIC SUB MenuEditConditions_Click()

  FConditionEditor.bAddCondition = TRUE
  FConditionEditor.Show()

END

PUBLIC SUB MenuEditActions_Click()

  FActionEditor.bAddAction = TRUE
  FActionEditor.Show()

END

' tools menu entries
PUBLIC SUB MenuToolsX10Cmdr_Click()

  FToolsX10Cmdr.Show

END

PUBLIC SUB MenuToolsSerialMonitor_Click()

  FToolsSerialMon.Show

END

PUBLIC SUB MenuToolsSerialPorts_Click()

  FToolsSerialPorts.Show

END

PUBLIC SUB MenuToolsRFXComCmdr_Click()

  FToolsRFXComCmdr.Show

END

PUBLIC SUB MenuToolsDatabaseAdmin_Click()

  FToolsDatabaseAdmin.Show

END

PUBLIC SUB MenuToolsBluetoothBrowser_Click()

  FToolsBluetoothBrowser.Show

END

PUBLIC SUB MenuToolsDSCPanel_Click()

  OpenPage(FDSC)

END

PUBLIC SUB MenuToolsDomoCmdr_Click()

  ' FToolsDomoCmdr.Show

END

PUBLIC SUB MenuToolsZWaveCmdr_Click()

  FToolsZWaveCmdr.Show

END

PUBLIC SUB MenuToolsPLCBUSCmdr_Click()

  FToolsPLCBUSCmdr.Show

END

' setup menu entries
PUBLIC SUB MenuSettingsMySQL_Click()

  FSettingsMySQL.Show

END

PUBLIC SUB MenuSettingsGUI_Click()

  FSettingsGUI.Show

END

PUBLIC SUB MenuSettingsMain_Click()

  FSettingsMain.Show

END

PUBLIC SUB MenuSettingsAstro_Click()

  FSettingsAstro.Show

END

PUBLIC SUB MenuSettingsEmail_Click()

  FSettingsEmail.Show

END

PUBLIC SUB MenuSettingsGMail_Click()

  FSettingsGMail.Show

END

PUBLIC SUB MenuSettingsGLatitude_Click()

  FSettingsGLatitude.Show

END

PUBLIC SUB MenuSettingsWebServer_Click()

  FSettingsWebServer.Show

END

PUBLIC SUB MenuSettingsTVGuide_Click()

  FSettingsTVGuide.Show

END

PUBLIC SUB MenuSettingsXMLRPC_Click()

  FSettingsXMLRPC.Show

END

PUBLIC SUB MenuSettingsSound_Click()

  FSettingsSound.Show

END

PUBLIC SUB MenuSettingsVoiceText_Click()

  FSettingsVoiceText.Show

END

PUBLIC SUB MenuSettingsPing_Click()

  FSettingsPing.Show

END

PUBLIC SUB MenuSettingsCTX35_Click()

  FSettingsCTX35.Show

END

PUBLIC SUB MenuSettingsOneWire_Click()

  FSettingsOneWire.Show

END

PUBLIC SUB MenuSettingsSMS_Click()

  FSettingsSMS.Show

END

PUBLIC SUB MenuSettingsDSC_Click()

  FSettingsDSC.Show

END

PUBLIC SUB MenuSettingsGPS_Click()

  FSettingsGPS.Show

END

PUBLIC SUB MenuSettingsHeyu_Click()

  FSettingsHeyu.Show

END

PUBLIC SUB MenuSettingsRFXComRX_Click()

  FSettingsRFXComRX.Show

END

PUBLIC SUB MenuSettingsRFXComTX_Click()

  FSettingsRFXComTX.Show

END

PUBLIC SUB MenuSettingsUPS_Click()

  FSettingsUPS.Show

END

PUBLIC SUB MenuSettingsHDDTemp_Click()

  FSettingsHDDTemp.Show

END

PUBLIC SUB MenuSettingsCamVisca_Click()

  FSettingsCamVisca.Show

END

PUBLIC SUB MenuSettingsVideoServer_Click()

  FSettingsVideoServer.Show

END

PUBLIC SUB MenuSettingsBwiredMap_Click()

  FSettingsBwiredMap.Show

END

PUBLIC SUB MenuSettingsRRDTool_Click()

  FSettingsRRDTool.Show

END

PUBLIC SUB MenuSettingsAsterisk_Click()

  FSettingsAsterisk.Show

END

PUBLIC SUB MenuSettingsBluetooth_Click()

  FSettingsBluetooth.Show

END

PUBLIC SUB MenuSettingsWeeder_Click()

  FSettingsWeeder.Show

END

PUBLIC SUB MenuSettingsZWave_Click()

  FSettingsZWave.Show

END

PUBLIC SUB MenuSettingsEZcontrol_Click()

  FSettingsEZcontrol.Show

END

PUBLIC SUB MenuSettingsServerStats_Click()

  FSettingsServerStats.Show

END

PUBLIC SUB MenuSettingsEIB_Click()

  FSettingsEIB.Show

END

PUBLIC SUB MenuSettingsIRMan_Click()

  FSettingsIRMan.Show

END

PUBLIC SUB MenuSettingsDenon_Click()

  FSettingsDenon.Show

END

PUBLIC SUB MenuSettingsIRTrans_Click()

  FSettingsIRTrans.Show

END

PUBLIC SUB MenuSettingsIViewer_Click()

  FSettingsIViewer.Show

END


PUBLIC SUB MenuSettingsPwrCtrl_Click()

  FSettingsPwrCtrl.Show

END

PUBLIC SUB MenuSettingsOnkyo_Click()

  FSettingsOnkyo.Show

END

PUBLIC SUB MenuSettingsSharpTV_Click()

  FSettingsSharpTV.Show

END

PUBLIC SUB MenuSettingsCurrentCost_Click()

  FSettingsCurrentCost.Show

END

PUBLIC SUB MenuSettingsPlugwise_Click()

  FSettingsPlugwise.Show

END

PUBLIC SUB MenuSettingsFritzBox_Click()

  FSettingsFritzBox.Show()

END

PUBLIC SUB MenuSettingsDomotica_Click()

  FSettingsDomotica.Show()

END

PUBLIC SUB MenuSettingsDigitemp_Click()

  FSettingsDigitemp.Show()

END

PUBLIC SUB MenuSettingsTwitter_Click()

  FSettingsTwitter.Show

END

' edit menu entries
PUBLIC SUB MenuEditUsers_Click()

  FEditUsers.Show

END

PUBLIC SUB MenuEditContacts_Click()

  FEditContacts.Show

END

PUBLIC SUB MenuEditNewsWeather_Click()

  FEditNewsWeather.Show

END

PUBLIC SUB MenuEditNotify_Click()

  FEditNotify.Show

END

PUBLIC SUB MenuEditMenus_Click()

  FEditMenus.Show

END

PUBLIC SUB MenuClientSettingsMySQL_Click()

  FSettingsMySQL.Show

END

PUBLIC SUB MenuClientSettingsGUI_Click()

  FSettingsGUI.Show

END

PUBLIC SUB MenuSettingsCameras_Click()

  FSettingsCameras.Show

END

PUBLIC SUB MinValue(oObject AS Object, iMinValue AS Integer) AS Boolean

  IF oObject.Value < iMinValue THEN
    Balloon(("Minimal value is ") & iMinValue, oObject)
    RETURN FALSE
  ELSE
    RETURN TRUE
  END IF

END

PUBLIC SUB MenuSettingsOww_Click()

  FSettingsOww.Show

END

PUBLIC SUB MenuSettingsLIRC_Click()

  FSettingsLIRC.Show

END

PUBLIC SUB MenuSettingsPachube_Click()

  FSettingsPachube.Show

END

PUBLIC SUB MenuSettingsJeeLabs_Click()

  FSettingsJeeLabs.Show

END

PUBLIC SUB MenuSettingsPLCBUS_Click()

  FSettingsPLCBUS.Show

END

PUBLIC SUB MenuSettingsCallerID_Click()

  FSettingsCallerID.Show

END

PUBLIC SUB MenuSettingsTemperaturNu_Click()

  FSettingsTemperaturNu.Show

END

PUBLIC SUB MenuSettingsLEDMatrix_Click()

  FSettingsLEDMatrix.Show

END

PUBLIC SUB MenuSettingsSqueezeServer_Click()

  FSettingsSqueezeServer.Show

END

PUBLIC SUB MenuSettingsTVGuideChannels_Click()

  FEditTVChannels.Show

END

PUBLIC SUB MenuSettingsTVGuideCategories_Click()

  FEditTVProgramCategories.Show

END

PUBLIC SUB MenuSettingsWeatherBug_Click()

  FSettingsWeatherBug.Show

END

PUBLIC SUB MenuSettingsDictionary_Click()

  FEditDictionary.Show

END

PUBLIC SUB MenuEditGraphs_Click()

  FEditGraphs.Show

END

PUBLIC SUB MenuSettingsIPort_Click()

  FSettingsIPort.Show

END

PUBLIC SUB MenuSettingsLGTV_Click()

  FSettingsLGTV.Show

END

PUBLIC SUB MenuEditMarkers_Click()

  FEditMarkers.Show

END

PUBLIC SUB MenuSettingsOWFS_Click()

  FSettingsOWFS.Show

END

PUBLIC SUB MenuSettingsK8055_Click()

  FSettingsK8055.Show

END
