' Gambas class file

' Description:
' CPioneer.class
' Support for Pioneer Audio/Video receiver control.

' Development Status: Work in progress

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS Integer
PROPERTY PioneerDebug AS Boolean
PROPERTY Interface AS String
PROPERTY SerPort AS String
PROPERTY Baud AS String

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS Integer
PRIVATE bPioneerDebug AS Boolean
PRIVATE sInterface AS String
PRIVATE sSerPort AS String
PRIVATE sBaud AS String

PUBLIC hPioneer AS NEW Socket
PUBLIC hPioneerSer AS NEW SerialPort

PUBLIC sBuffer AS String

PUBLIC bPower AS Boolean
PUBLIC bPower_2 AS Boolean
PUBLIC bMute AS Boolean
PUBLIC bMute_2 AS Boolean
PUBLIC iVolume AS Integer
PUBLIC iVolume_2 AS Integer
PUBLIC sInput AS String
PUBLIC sInput_2 AS String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectTCP() AS Boolean

  ' try to close the connection
  TRY hPioneer.Close

  ' get a new one
  hPioneer = NEW Socket AS "Pioneer"
  hPioneer.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Pioneer receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectSerial() AS Boolean

  ' try to close the connection
  TRY hPioneerSer.Close

  ' get a new one
  hPioneerSer = NEW Serialport AS "PioneerSer"
  WITH hPioneerSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' all ok

  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Pioneer receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Pioneer_Ready()

  Main.WriteLog(("Pioneer TCP socket connected."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Pioneer_Closed()

  Main.WriteLog(("Pioneer TCP socket closed."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hPioneer.Close
  TRY hPioneerSer.Close
  IF InStr(sInterface, "tcp") THEN
    Main.WriteLog(("Pioneer receiver TCP socket close."))
  ELSE
    Main.WriteLog(("Pioneer receiver TCP serial port close."))
  END IF
  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Pioneer receiver Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Pioneer_Error()

  ' handle error
  SELECT CASE hPioneer.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("Pioneer: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("Pioneer: Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(("Pioneer: Unable to connect to receiver. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(("Pioneer: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("Pioneer: Error writing data."))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SendCmd(sCmd AS String)

  IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Sending '") & sCmd & ("' to Receiver."))
  IF sInterface = "tcp" THEN
    TRY WRITE #hPioneer, sCmd & Chr$(13), Len(sCmd) + 1
    IF ERROR THEN Main.WriteDebugLog(("[Pioneer] Error writing data to the TCP port! -> ") & Error.Text)
  ELSE
    IF UCase(sCmd) = "PO" OR (UCase(sCmd) = "APO" AND NOT (bPower)) THEN  'Send extra <CR> if device needs to be turned on so CPU can wake up from standby and is able to accept commands
      TRY WRITE #hPioneerSer, Chr$(13), 1
      SLEEP 0.1
    END IF
    TRY WRITE #hPioneerSer, sCmd & Chr$(13), Len(sCmd) + 1
    IF ERROR THEN Main.WriteDebugLog(("[Pioneer] Error writing data to the serial port! -> ") & Error.Text)
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCommand(sAddress AS String, sValue AS String)

  SELECT CASE sAddress
    CASE "1"    ' Main
      SELECT CASE LCase(sValue)
        CASE "on"
          SendCmd("PO")
        CASE "off"
          SendCmd("PF")
        CASE ELSE
          IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sValue)
      END SELECT
    CASE "2"    ' Zone 2
      SELECT CASE LCase(sValue)
        CASE "on"
          SendCmd("APO")
        CASE "off"
          SendCmd("APF")
        CASE ELSE
          IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sValue)
      END SELECT
  END SELECT

END

PUBLIC SUB SetCommand(sCmd AS Variant, sValue AS Variant, sAddress AS String)

  DIM iValue AS Integer
  ' ignore sAddress, only fixed unit 1
  SELECT CASE LCase(sCmd)
    CASE "power"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "PO", "PF"))
    CASE "power_2"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "APO", "APF"))
    CASE "volume"
      SELECT CASE LCase(sValue)
        CASE "up"
          SendCmd("VU")
        CASE "down"
          SendCmd("VD")
        CASE ELSE
          ' Volume: 0 (mute), 1 (-80(db)) .... 185 (+ 12(db))
          TRY iValue = CInt(sValue) * 1.85
          IF iValue >= 0 AND iValue <= 185 THEN
            SendCmd(CString(iValue) & "VL")
          ELSE
            IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sCmd & " " & sValue)
          ENDIF
      END SELECT
    CASE "volume_2"
      SELECT CASE LCase(sValue)
        CASE "up"
          SendCmd("ZU")
        CASE "down"
          SendCmd("ZD")
        CASE ELSE
          ' Volume: 0 (mute), 1 (-80(db)) .... 81 (+ 0.0(db))
          TRY sValue = Val(sValue)
          IF IsInteger(sValue) THEN
            IF sValue >= 0 AND sValue <= 81 THEN SendCmd(sValue & "ZV")
          ELSE
            IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sCmd & " " & sValue)
          ENDIF
      END SELECT
    CASE "mute"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "MO", "MF"))
    CASE "mute_2"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "Z2MO", "Z2MF"))
    CASE "input"
      IF sValue <> "" THEN
        SendCmd(sValue & "FN")
      ELSE
        IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sCmd & sValue)
      ENDIF
    CASE "input_2"
      IF sValue <> "" THEN
        SendCmd(sValue & "ZS")
      ELSE
           IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sCmd & " " & sValue)
      ENDIF
    CASE "cli"
      ' send any correct command to receiver
      SendCmd(UCase(sValue))
    CASE ELSE
      IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported command received: ") & sCmd & " " & sValue)
  END SELECT

END

PUBLIC SUB GetCommand(sCmd AS String, sAddress AS String)

  ' ignore sAddress, only fixed unit 1
  SELECT CASE LCase(sCmd)
    CASE "volume"
      SendCmd("?V")
    CASE "volume_2"
      SendCmd("?ZV")
    CASE "input"
      SendCmd("?F")
    CASE "input_2"
      SendCmd("?ZS")
    CASE "mute"
      SendCmd("?M")
    CASE "mute_2"
      SendCmd("?Z2M")
    CASE "power_2"
      SendCmd("?AP")
    CASE ELSE ' send some commands to get the states of the device and write them back in global variables.
      SendCmd("?P")
      SLEEP 0.5
      SendCmd("?V")
      SLEEP 0.5
      SendCmd("?M")
      SLEEP 0.5
      SendCmd("?FN")
      IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unsupported 'GetCommand' received: ") & sCmd)
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Pioneer_Read()

  DIM sData AS String

  TRY READ #hPioneer, sData, 1
  IF ERROR THEN Main.WriteDebugLog(("[Pioneer] Error reading data from the TCP port! -> ") & Error.Text)
  IF sData = Chr$(13) THEN ' buffer until linefeed then parse
    IF Len(sBuffer) > 1 THEN ParseLine(sBuffer)
    sBuffer = NULL
  ELSE
    sBuffer &= sData
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB PioneerSer_Read()

  DIM sData AS String

  TRY READ #hPioneerSer, sData, 1
  IF ERROR THEN Main.WriteDebugLog(("[Pioneer] Error reading data from the serial port! -> ") & Error.Text)
  IF sData = Chr$(13) THEN ' buffer until linefeed then parse
    IF Len(sBuffer) > 1 THEN ParseLine(sBuffer)
    sBuffer = NULL
  ELSE
    sBuffer &= sData
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB ParseLine(sStr AS String)

  DIM sItem, sValue, sTemp AS String

  IF Left(sStr, 1) = Chr(10) THEN sStr = Mid(sStr, 2)
  IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Received: ") & sStr)

  SELECT CASE sStr
    CASE "PWR0"
      bPower = TRUE
      PioneerSetValue("Power", "On")
      UpdateDeviceValue(1, "POWER", "On")
    CASE "PWR1"
      bPower = FALSE
      PioneerSetValue("Power", "Off")
      UpdateDeviceValue(1, "POWER", "Off")
    CASE "APR0"
      bPower_2 = TRUE
      PioneerSetValue("Power_2", "On")
      UpdateDeviceValue(2, "POWER", "On")
    CASE "APR1"
      bPower_2 = FALSE
      PioneerSetValue("Power_2", "Off")
      UpdateDeviceValue(2, "POWER", "Off")
    CASE "MUT0"
      bMute = TRUE
      PioneerSetValue("Mute", "On")
      UpdateDeviceValue(1, "VOLUME", "Mute")
    CASE "MUT1"
      bMute = FALSE
      PioneerSetValue("Mute", "Off")
      UpdateDeviceValue(1, "VOLUME", iVolume)
    CASE "Z2MUT0"
      bMute_2 = TRUE
      PioneerSetValue("Mute_2", "On")
      UpdateDeviceValue(2, "VOLUME", "Mute")
    CASE "Z2MUT1"
      bMute_2 = FALSE
      PioneerSetValue("Mute_2", "Off")
      UpdateDeviceValue(2, "VOLUME", iVolume_2)
    CASE "E04"
      Main.WriteDebugLog(("[Pioneer] ERROR: Detect inappropriate Command line"))
    CASE "E06"
      Main.WriteDebugLog(("[Pioneer] ERROR: Detect inappropriate Parameter"))
    CASE "B00"
      Main.WriteDebugLog(("[Pioneer] ERROR: AV Receiver is busy, Please wait few seconds"))
    CASE ELSE
      SELECT CASE Left(sStr, 3)
        CASE "VOL"                  ' master volume
          sTemp = Mid(sStr, 4)
          iVolume = Round((Val(sTemp) / 1.85), 0)
          PioneerSetValue("Volume", iVolume)
          UpdateDeviceValue(1, "VOLUME", iVolume)
        CASE "Z2F"
          sInput_2 = TranslateInputSelecton(Mid(sStr, 4))
          IF sInput_2 = "" THEN
            IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unknown input selection response"))
          ELSE
            PioneerSetValue("Input_2", sInput_2)
            UpdateDeviceValue(2, "INPUT", sInput_2)
          ENDIF
        CASE ELSE
          SELECT CASE UCase(Left(sStr, 2))
            CASE "FN" 'Input source
              sInput = TranslateInputSelecton(Mid(sStr, 3))
              IF sInput = "" THEN
                IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Unknown input selection response"))
              ELSE
                PioneerSetValue("Input", sInput)
                UpdateDeviceValue(1, "INPUT", sInput)
              ENDIF
            CASE "ZV" 'Volume level zone 2
              sTemp = Mid(sStr, 3)
              iVolume_2 = Round((Val(sTemp) / 0.81), 0)
              PioneerSetValue("Volume_2", iVolume_2)
              UpdateDeviceValue(2, "VOLUME", iVolume_2)
            CASE "PR" 'Tuner preset
            CASE "FR" 'Tuner frequency
            CASE "SR" 'Listening mode
            CASE "LM" 'Playing listening mode
            CASE ELSE
              IF Main.bPioneerDebug THEN Main.WriteDebugLog(("[Pioneer] Not implemented yet!"))
          END SELECT
      END SELECT
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return input selection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE FUNCTION TranslateInputSelecton(InputID AS String) AS String

  SELECT CASE InputID
    CASE "00"
      RETURN "PHONO"
    CASE "01"
      RETURN "CD"
    CASE "02"
      RETURN "TUNER"
    CASE "03"
      RETURN "CD-R/TAPE"
    CASE "04"
      RETURN "DVD"
    CASE "05"
      RETURN "TV/SAT"
    CASE "10"
      RETURN "VIDEO1"
    CASE "14"
      RETURN "VIDEO2"
    CASE "15"
      RETURN "DVR/BDR"
    CASE "17"
      RETURN "IPOD/USB"
    CASE "18"
      RETURN "XMRadio"
    CASE "19"
      RETURN "HDMI1"
    CASE "20"
      RETURN "HDMI2"
    CASE "21"
      RETURN "HDMI3"
    CASE "22"
      RETURN "HDMI4"
    CASE "23"
      RETURN "HDMI5"
    CASE "25"
      RETURN "BD"
    CASE "26"
      RETURN "HomeMedia"
    CASE "27"
      RETURN "SIRIUS"
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB PioneerSetValue(sItem AS String, vValue AS Variant)

  Main.SetGlobalVar("Pioneer_" & sItem, vValue)
  IF Main.bPioneerDebug THEN Main.WriteDebugLog("[Pioneer] Saved global variable; Item:Pioneer_" & sItem & ", Value:" & vValue)

END

PRIVATE SUB UpdateDeviceValue(iAddress AS Integer, sValueType AS String, vValue AS Variant)

  DIM iDeviceId AS Integer

  ' try to find device with address, and correct interface type.
  iDeviceId = Devices.Find(iAddress, Devices.FindInterface("Pioneer Interface"), "Pioneer")
  ' if found then update it's value
  IF iDeviceId THEN
    SELECT CASE UCase(sValueType)
      CASE "POWER"
        Devices.ValueUpdate(iDeviceId, vValue, "", "", "")
      CASE "VOLUME"
        Devices.ValueUpdate(iDeviceId, "", vValue, "", "")
      CASE "INPUT"
        Devices.ValueUpdate(iDeviceId, "", "", vValue, "")
    END SELECT
  ENDIF

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String
  RETURN sTCPHost
END

PRIVATE SUB TCPHost_Write(Value AS String)
  sTCPHost = Value
END

PRIVATE FUNCTION TCPPort_Read() AS Integer
  RETURN iTCPPort
END

PRIVATE SUB TCPPort_Write(Value AS Integer)
  iTCPPort = Value
END

PRIVATE FUNCTION PioneerDebug_Read() AS Boolean
  RETURN bPioneerDebug
END

PRIVATE SUB PioneerDebug_Write(Value AS Boolean)
  bPioneerDebug = Value
END

PRIVATE FUNCTION Baud_Read() AS String
  RETURN sBaud
END

PRIVATE SUB Baud_Write(Value AS String)
  sBaud = Value
END

PRIVATE FUNCTION SerPort_Read() AS String
  RETURN sSerPort
END

PRIVATE SUB SerPort_Write(Value AS String)
  sSerPort = Value
END

PRIVATE FUNCTION Interface_Read() AS String
  RETURN sInterface
END

PRIVATE SUB Interface_Write(Value AS String)
  sInterface = Value
END
