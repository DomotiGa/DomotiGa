' Gambas class file

' Description:
' FHome.class
' Display all startpage related items.

' Development Status:
' Working, but now hardcoded and simple, needs to be configurable.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE tRefresh AS NEW Timer
PRIVATE iOutsideTemp AS Variant
PRIVATE iOutsideHumid AS Variant

PUBLIC SUB Form_Open()

  DisplayPage()
  DisplayTagline()
  DisplayWeatherComment()

  ' create refresh timer
  tRefresh = NEW Timer AS "tRefresh"
  tRefresh.Delay = 10000 ' 10 seconds
  tRefresh.Start

END

PUBLIC SUB DisplayPage()

  btnMode.Text = Main.Caps(Main.GlobalVar["House_Mode"])
  DisplayOutsideTempHumid()
  DisplayUsageDial()

END

PUBLIC SUB DisplayWeatherComment()

  DIM iTemp, iHumid AS Integer

  iTemp = Val(iOutsideTemp)
  iHumid = Val(iOutsideHumid)

  txtWeatherTemp.Hide
  txtWeatherHumid.Hide
  IF iTemp < 5 AND IF iTemp > 0 THEN
    txtWeatherTemp.Text = Main.Random_Text("remarks_tempbelow5") & " "
    txtWeatherTemp.Show
  END IF
  IF iTemp < -5 THEN 
    txtWeatherTemp.Text = Main.Random_Text("remarks_tempbelowmin5") & " "
    txtWeatherTemp.Show
  END IF
  IF iHumid > 90 THEN
    txtWeatherHumid.Text = Main.Random_Text("remarks_humid")
    txtWeatherHumid.Show
  END IF
END

PUBLIC SUB DisplayTagline()

  txtTagline.Text = Main.Random_Text("remarks_tags")

END

PUBLIC SUB btnMode_Click()

  DIM sNewMode AS String

  SELECT CASE Main.GlobalVar["House_Mode"]
    CASE "normal"
      sNewMode = "work"
    CASE "work"
      sNewMode = "away"
    CASE "away"
      sNewMode = "vacation"
    CASE ELSE
      sNewMode = "normal"
  END SELECT
  Main.ChangeHouseMode(sNewMode)

END

PUBLIC SUB btnMute_Click()

  DIM bNewMute AS String

  SELECT CASE Main.GlobalVar["Mute"]
    CASE TRUE
      bNewMute = FALSE
    CASE ELSE
      bNewMute = TRUE
  END SELECT
  Main.ChangeMuteMode(bNewMute)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get values from device where group contains Outside, Temperature and Humidity
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DisplayOutsideTempHumid()

  DIM rDevice AS Result
  DIM hDownloadImage AS HttpClient
  DIM sTempFile AS String = Temp() & ".jpg"
  DIM sDownload, sUrl AS String

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices")
  IF (rDevice.Count > 0) THEN
    FOR EACH rDevice
      IF InStr(rDevice!groups, "Outside") AND IF InStr(rDevice!groups, "Humidity") AND IF InStr(rDevice!groups, "Temperature") THEN
        IF Main.bMainDebug THEN Main.WriteDebugLog("[FHome] Device with address " & rDevice!address & " name " & rDevice!name & " looks like an outside temp/hygro sensor.")
        iOutsideTemp = rDevice!value
        iOutsideHumid = rDevice!value2
        txtTemperature.Text = iOutsideTemp & Main.sTemperature
        txtHumid.Text = iOutsideHumid & ("% Humidity")

        sUrl = Subst("http://chart.apis.google.com/chart?chs=200x100&cht=gom&chco=0000ff99,ffffff99,ff000099&chd=t:&1&chl=&2", rDevice!value * 3, rDevice!value & rDevice!label)
        hDownloadImage = NEW HttpClient AS "Download"
        hDownloadImage.URL = sUrl
        hDownloadImage.Async = FALSE
        hDownloadImage.TimeOut = 5
        hDownloadImage.Get()

        IF hDownloadImage.Status < 0 THEN
          IF Main.bMainDebug THEN Main.WriteDebugLog("[Climate] Error downloading image " & sUrl)
        ELSE
          ' success - read the data
          IF Lof(hDownloadImage) THEN READ #hDownloadImage, sDownload, Lof(hDownloadImage)
          File.Save(sTempFile, sDownload)
          TRY pbOutsideTemp.Picture = Picture.Load(sTempFile)
          IF Exist(sTempFile) THEN KILL sTempFile
        END IF
        BREAK
      END IF
    NEXT
  END IF
END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRefresh_Timer()

  DisplayPage()

END

PRIVATE SUB DisplayUsageDial()

  DIM sDownload, sUrl AS String
  DIM hDownloadImage AS HttpClient
  DIM sTempFile AS String = Temp() & ".jpg"
  DIM rResult AS Result

  ' first find devicetype id for RFXMeter
  rResult = Main.hDB.Exec("SELECT id FROM devicetypes WHERE name = 'RFXPwr Module'")

  IF NOT rResult THEN
    Main.WriteDebugLog("[Energy] No Devicetype called 'RFXPwr Module' found!")
    RETURN
  END IF

  ' then find device with this devicetype
  rResult = Main.hDB.Exec("SELECT value2,label2 FROM devices WHERE module = &1", rResult!id)


  sUrl = Subst("http://chart.apis.google.com/chart?chs=200x100&cht=gom&chco=00ff0099,ffff0099,ff000099&chd=t:&1&chl=&2", rResult!value2 / 10, rResult!value2 & rResult!label2)
  hDownloadImage = NEW HttpClient AS "Download"
  hDownloadImage.URL = sUrl
  hDownloadImage.Async = FALSE
  hDownloadImage.TimeOut = 5
  hDownloadImage.Get()

  IF hDownloadImage.Status < 0 THEN
    IF Main.bMainDebug THEN Main.WriteDebugLog("[Energy] Error downloading image " & sUrl)
  ELSE
    ' success - read the data
    IF Lof(hDownloadImage) THEN READ #hDownloadImage, sDownload, Lof(hDownloadImage)
    File.Save(sTempFile, sDownload)
    TRY pbPowerUsage.Picture = Picture.Load(sTempFile)
    IF Exist(sTempFile) THEN KILL sTempFile
  END IF

END
