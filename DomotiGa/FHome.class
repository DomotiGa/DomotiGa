' Gambas class file

' Description:
' FHome.class
' Display all startpage related items.

' Development Status:
' Working, but now hardcoded and simple, needs to be configurable.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

PRIVATE tRefresh AS NEW Timer
PUBLIC iOutsideTemp AS Variant
PUBLIC iOutsideHumid AS Variant
PRIVATE bPowerSensor AS Boolean
PRIVATE bWeatherSensor AS Boolean
PUBLIC hDownloadOutsideImage AS HttpClient
PUBLIC hDownloadUsageImage AS HttpClient

PUBLIC SUB Form_Open()

  DisplayPage()
  DisplayTagline()
  DisplayWeatherComment()

  ' create refresh timer
  tRefresh = NEW Timer AS "tRefresh"
  tRefresh.Delay = 30000 ' 30 seconds
  tRefresh.Start

END

PUBLIC SUB DisplayPage()

  btnMode.Text = Main.Caps(Main.GlobalVar["House_Mode"])
  DisplayOutsideTempHumid()
  DisplayUsageDial()

END

PUBLIC SUB DisplayWeatherComment()

  DIM iTemp, iHumid AS Integer

  IF NOT bWeatherSensor THEN
    frameWeather.Hide
    RETURN
  ENDIF

  TRY iTemp = iOutsideTemp
  IF NOT ERROR THEN
    IF iTemp < 5 AND IF iTemp > 0 THEN
      txtWeatherTemp.Text = Main.Random_Text("remarks_tempbelow5") & " "
    ENDIF
    IF iTemp < -5 THEN
      txtWeatherTemp.Text = Main.Random_Text("remarks_tempbelowmin5") & " "
    ENDIF
  ENDIF
  TRY iHumid = iOutsideHumid
  IF NOT ERROR THEN
    IF iHumid > 90 THEN
      txtWeatherHumid.Text = Main.Random_Text("remarks_humid")
    ENDIF
  ENDIF
  IF NOT txtWeatherTemp.Text AND NOT txtWeatherHumid.Text THEN frameWeather.Delete

END

PUBLIC SUB DisplayTagline()

  txtTagline.Text = Main.GlobalVar["Tagline"]

END

PUBLIC SUB btnMode_Click()

  DIM sNewMode AS String

  SELECT CASE Main.GlobalVar["House_Mode"]
    CASE "normal"
      sNewMode = "work"
    CASE "work"
      sNewMode = "away"
    CASE "away"
      sNewMode = "vacation"
    CASE ELSE
      sNewMode = "normal"
  END SELECT
  Main.ChangeHouseMode(sNewMode)
  IF NOT Main.bServer THEN XMLClient.SetHouseMode(sNewMode)

END

PUBLIC SUB btnMute_Click()

  DIM bNewMute AS String

  SELECT CASE Main.GlobalVar["Mute"]
    CASE TRUE
      bNewMute = FALSE
    CASE ELSE
      bNewMute = TRUE
  END SELECT
  Main.ChangeMuteMode(bNewMute)
  IF NOT Main.bServer THEN XMLClient.SetMuteMode(bNewMute)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get values from device where group contains Outside, Temperature and Humidity
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DisplayOutsideTempHumid()

  DIM rDevice AS Result
  DIM sUrl AS String

  bWeatherSensor = FALSE
  frameOutside.Hide

  TRY rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF NOT ERROR THEN
    IF rDevice.Available THEN
      FOR EACH rDevice
        IF InStr(rDevice!groups, "Outside") AND IF InStr(rDevice!groups, "Humidity") AND IF InStr(rDevice!groups, "Temperature") THEN
          bWeatherSensor = TRUE
          frameOutside.Show
          IF Main.bMainDebug THEN Main.WriteDebugLog(("[FHome] Device with address ") & rDevice!address & (" name ") & rDevice!name & (" looks like an outside temp/hygro sensor."))
          iOutsideTemp = rDevice!value
          iOutsideHumid = rDevice!value2
          txtTemperature.Text = iOutsideTemp & Main.sTemperature
          IF iOutsideHumid THEN txtHumid.Text = iOutsideHumid & ("% Humidity")
          sUrl = Subst("http://chart.apis.google.com/chart?chs=200x100&cht=gom&chco=0000ff99,ffffff99,ff000099&chd=t:&1&chl=&2", CFloat(Replace(rDevice!value, ",", ".", gb.String)) * 3, Str(rDevice!value) & rDevice!label)
          hDownloadOutsideImage = NEW HttpClient AS "hDownloadOutsideImage"
          hDownloadOutsideImage.URL = sUrl
          hDownloadOutsideImage.Async = TRUE
          hDownloadOutsideImage.TimeOut = 5
          hDownloadOutsideImage.Get()
          RETURN
        ENDIF
      NEXT
    ENDIF
  ENDIF

CATCH
  Main.WriteDebugLog(("ERROR: Parsing Outside Temp and Humid: ") & Error.Text & " at " & Error.Where)

END

PUBLIC SUB hDownloadOutsideImage_Finished()

  DIM sDownload AS String
  DIM sTempFile AS String = Temp() & ".jpg"

  SELECT hDownloadOutsideImage.Code
    CASE 200
      ' read the data
      IF Lof(hDownloadOutsideImage) THEN READ #hDownloadOutsideImage, sDownload, Lof(hDownloadOutsideImage)
      File.Save(sTempFile, sDownload)
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Climate] Downloaded outside graph image ") & hDownloadOutsideImage.URL)
      TRY pbOutsideTemp.Picture = Picture.Load(sTempFile)
      IF Exist(sTempFile) THEN KILL sTempFile
    CASE ELSE
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Climate] Error downloading outside graph image ") & hDownloadOutsideImage.URL)
  END SELECT
  TRY hDownloadOutsideImage.Close

END

PUBLIC SUB hDownloadOutsideImage_Error()

  IF Main.bMainDebug THEN Main.WriteDebugLog(("[Climate] Error downloading outside graph image ") & hDownloadOutsideImage.URL)
  TRY hDownloadOutsideImage.Close

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRefresh_Timer()

  DisplayPage()

END

PRIVATE SUB DisplayUsageDial()

  DIM sUrl AS String
  DIM rResult AS Result

  TRY rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  IF NOT ERROR THEN
    IF rResult.Available THEN
      FOR EACH rResult
        IF InStr(rResult!groups, "Energy") AND IF InStr(rResult!groups, "Power") THEN
          IF Len(rResult!value2) THEN
            bPowerSensor = TRUE
            framePowerUsage.Show
            sUrl = Subst("http://chart.apis.google.com/chart?chs=200x100&cht=gom&chco=00ff0099,ffff0099,ff000099&chd=t:&1&chl=&2", CFloat(Replace(rResult!value2, ",", ".", gb.String)) / 10, Val(rResult!value2) & rResult!label2)
            hDownloadUsageImage = NEW HttpClient AS "DownloadUsageImage"
            hDownloadUsageImage.URL = sUrl
            hDownloadUsageImage.Async = TRUE
            hDownloadUsageImage.TimeOut = 5
            hDownloadUsageImage.Get()
            RETURN
          ENDIF
        ENDIF
      NEXT
    ENDIF
  ENDIF
  bPowerSensor = FALSE
  framePowerUsage.Hide

CATCH
  Main.WriteDebugLog(("ERROR: Parsing Energy Usage: ") & Error.Text & " at " & Error.Where)

END

PUBLIC SUB DownloadUsageImage_Finished()

  DIM sDownload AS String
  DIM sTempFile AS String = Temp() & ".jpg"

  SELECT hDownloadUsageImage.Code
    CASE 200
      ' read the data
      IF Lof(hDownloadUsageImage) THEN READ #hDownloadUsageImage, sDownload, Lof(hDownloadUsageImage)
      File.Save(sTempFile, sDownload)
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Climate] Downloaded usage graph image ") & hDownloadUsageImage.URL)
      TRY pbPowerUsage.Picture = Picture.Load(sTempFile)
      IF Exist(sTempFile) THEN KILL sTempFile
    CASE ELSE
      IF Main.bMainDebug THEN Main.WriteDebugLog(("[Climate] Error downloading usage graph image ") & hDownloadUsageImage.URL)
  END SELECT
  TRY hDownloadUsageImage.Close

END

PUBLIC SUB hDownloadUsageImage_Error()

  IF Main.bMainDebug THEN Main.WriteDebugLog(("[Climate] Error downloading usage graph image ") & hDownloadUsageImage.URL)
  TRY hDownloadUsageImage.Close

END

PUBLIC SUB frameOutside_MouseUp()

  FMain.OpenPage(FClimate)

END

PUBLIC SUB pbPowerUsage_MouseUp()

  FMain.OpenPage(FEnergy)

END

PUBLIC SUB pbOutsideTemp_MouseUp()

  FMain.OpenPage(FClimate)

END

PUBLIC SUB txtHumid_MouseUp()

  FMain.OpenPage(FClimate)

END

PUBLIC SUB txtTemperature_MouseUp()

  FMain.OpenPage(FClimate)

END

PUBLIC SUB framePowerUsage_MouseUp()

  FMain.OpenPage(FEnergy)

END