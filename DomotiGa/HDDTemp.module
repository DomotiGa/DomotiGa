' Gambas module file

' Description:
' HDDTemp.module
' Support for HDDTemp harddisk temperature monitoring.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called LICENSE for license details.

PUBLIC tHDDTemp AS NEW Timer

PUBLIC FUNCTION Run()

  ' start poll timer for HDDTemp
  tHDDTemp = NEW Timer AS "tHDDTemp"
  tHDDTemp.Delay = Main.iHDDTempPollTime * 1000 ' multiply for seconds
  tHDDTemp.Start

  Poll()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open socket and read values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Poll() AS Boolean

  DIM hHDDTemp AS NEW Socket
  DIM sBuffer AS String
  DIM sDisks, sFields AS String[]
  DIM sDisk, sField AS String
  DIM iCount AS Integer
  DIM iDeviceId AS Integer
  DIM sTemp AS String
  DIM sDevice AS String

  hHDDTemp = NEW Socket
  hHDDTemp.Connect(Main.sHDDTempTCPHost, Main.iHDDTempTCPPort)

  DO WHILE (hHDDTemp.Status <> 7) AND (hHDDTemp.Status > 0)
    WAIT 0.1
  LOOP

  IF hHDDTemp.Status <> 7 THEN
    TRY HDDTemp.tHDDTemp.Stop
    Main.bHDDTempEnabled = FALSE
    Main.WriteLog("ERROR: HDDTemp couldn't open socket.")
    Main.WriteLog("HDDTemp support disabled.")
  END IF

  TRY READ #hHDDTemp, sBuffer, Lof(hHDDTemp)
  TRY CLOSE #hHDDTemp

  IF Main.bHDDTempDebug THEN Main.WriteDebugLog("[HDDTemp] Got string: " & sBuffer)
  ' first change string so disks can be separated
  sBuffer = "|" & sBuffer & "|"
  sBuffer = Replace$(sBuffer, "||", "!")
  sDisks = Split(sBuffer, "!")

  FOR EACH sDisk IN sDisks
    sFields = Split(sDisk, "|")
    iCount = 0
    FOR EACH sField IN sFields
      IF iCount = 0 THEN sDevice = sField
      IF iCount = 2 THEN
        sTemp = sField
        IF Main.bHDDTempDebug THEN Main.WriteDebugLog("[HDDTemp] Device " & sDevice & " has temp " & sTemp & "°C")
        iDeviceId = Devices.Find(sDevice, Devices.FindInterface("HDDTemp Socket"))
        IF iDeviceId THEN
          Devices.Update(iDeviceId, sTemp)
          IF Main.bHDDTempDebug THEN Main.WriteDebugLog("[HDDTemp] Device " & sDevice & " has id " & iDeviceId)
        ELSE
          IF Main.bHDDTempDebug THEN Main.WriteDebugLog("[HDDTemp] Device " & sDevice & " not found!")
        END IF
        ' send warning per e-mail if threshold is reached
        IF CInt(sTemp) > Main.iHDDTempThreshold THEN
          MailWarning("The temperature of disk " & sDevice & " is " & sTemp & "°C, so it's above the threshold of " & Main.iHDDTempThreshold & "°C!")
        END IF
      END IF
      iCount = iCount + 1
    NEXT
  NEXT

CATCH ' some errors
  Main.WriteLog("HDDTemp Error: " & ERROR.Text & "")
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' generate e-mail when temp is above threshold
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION MailWarning(sMessage AS String) AS Boolean

  Mail.SendMail("Message from " & Application.Name & ": HDDTemp", sMessage, Main.sEmailToAddress)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' poll for temperatures
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tHDDTemp_Timer()

  Poll()

END
