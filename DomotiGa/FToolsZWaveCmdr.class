' Gambas class file

' Description:
' FToolsZWaveCmdr.class
' Test some basic Z-Wave functionality.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC iSelectedNode AS Integer
PUBLIC tControllerCancel AS Timer

PUBLIC SUB Form_Open()
  DIM jCount AS Integer

  ME.Move(FMain.X + 50, FMain.Y + 70)
  WITH tbvNodes
    .Columns.Count = 12
    .Columns[0].Title = ("Node")
    .Columns[1].Title = ("Basic Type")
    .Columns[2].Title = ("Generic Type")
    .Columns[3].Title = ("Value")
    .Columns[4].Title = ("Value2")
    .Columns[5].Title = ("Value3")
    .Columns[6].Title = ("Value4")
    .Columns[7].Title = ("Status")
    .Columns[8].Title = ("Manufacturer")
    .Columns[9].Title = ("Product")
    .Columns[10].Title = ("Neighbors")
    .Columns[11].Title = ("Supported Classes")
    FOR jCount = 0 TO 11
      .Columns[jCount].Width = tbvNodes.Font.Width(tbvNodes.Columns[jCount].Title) + .Font.Size
    NEXT
  END WITH

  IF NOT Main.bServer THEN
    Message.Info(("Z-Wave Commander will only work in Server-Mode"))
    ME.Close
    RETURN
  ENDIF

  IF NOT Main.bZWaveEnabled OR IF NOT Main.hZWave THEN
    Message.Info(("Z-Wave interface is not enabled\nor couldn't open port!"))
    ME.Close
    RETURN
  ENDIF

  IF NOT Main.hZWave.bOZWInitialized THEN
    Message.Info(("The Open Z-Wave library isn't fully initialized\nSome information and functions are not available (yet)\nIt can take up to 1 minute per 10 devices to initialize"))
  ENDIF

  FillScreenInfo()
  FillNodeTable()

END

PUBLIC SUB FillScreenInfo()

  ' Set On/Off/Slide off as default
  tbvNodes.Enabled = FALSE
  btnNodeOn.Enabled = FALSE
  btnNodeOff.Enabled = FALSE
  slDim.Enabled = FALSE

  ' Disable all nodes, because we don't know the node YET
  btnRequestBasicReport.Enabled = FALSE
  btnRequestDynamicReport.Enabled = FALSE
  btnRequestNodeNeighborUpdate.Enabled = FALSE
  btnRefreshNodeInfo.Enabled = FALSE
  btnRequestVersionReport.Visible = FALSE
  btnRequestMeterReport.Visible = FALSE
  spInstance.Enabled = FALSE
  btnRequestAllConfigParams.Enabled = FALSE
  btnRequestConfigParam.Enabled = FALSE
  btnSetConfigParam.Enabled = FALSE
  btnAddAssociation.Enabled = FALSE
  btnRemoveAssociation.Enabled = FALSE

  ' Disallow the controller commands if we don't have a homeid
  IF Main.hZWave.iHomeID = 0 THEN
    txtHomeID.Text = "Unknown"
    btnAddDevice.Enabled = FALSE
    btnRemoveDevice.Enabled = FALSE
    btnAddController.Enabled = FALSE
    btnRemoveController.Enabled = FALSE
    btnCancelControllerCommand.Enabled = FALSE
    btnSoftResetController.Enabled = FALSE
    btnHardResetController.Enabled = FALSE
    btnRequestBasicReportAll.Enabled = FALSE
    btnRequestDynamicReportAll.Enabled = FALSE
  ELSE
    txtHomeID.Text = Main.hZWave.iHomeID
    btnAddDevice.Enabled = TRUE
    btnRemoveDevice.Enabled = TRUE
    btnAddController.Enabled = TRUE
    btnRemoveController.Enabled = TRUE
    btnCancelControllerCommand.Enabled = TRUE
    btnSoftResetController.Enabled = TRUE
    btnHardResetController.Enabled = TRUE
    btnRequestBasicReportAll.Enabled = TRUE
    btnRequestDynamicReportAll.Enabled = TRUE
  ENDIF

  txtControllerID.Text = Main.hZWave.iControllerID
  txtZWaveAPIVersion.Text = Main.hZWave.sZWaveAPIVersion
  txtZWaveZDKVersion.Text = Main.hZWave.sZWaveZDKVersion
  txtControllerType.text = Main.hZWave.sControllerType

END

PUBLIC SUB FillNodeTable()

  DIM rResult AS Result
  DIM iRows, iCount, jCount AS Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices_zwave ORDER BY length(substring_index(nodeid,\":\",1)),substring_index(nodeid,\":\",1), nodeid")
  IF NOT rResult THEN
    Message.Info(("Error: table 'devices_zwave' not found!"))
    RETURN
  END IF
  iRows = rResult.Count
  IF iRows > 0 THEN
    tbvNodes.Enabled = TRUE
    tbvNodes.Rows.Count = iRows
    FOR iCount = 0 TO rResult.Max
      tbvNodes[iCount, 0].Text = rResult!nodeid
      tbvNodes[iCount, 1].Text = Main.hZWave.BasicTypeName(rResult!typebasic)
      tbvNodes[iCount, 2].Text = Main.hZWave.GenericTypeName(rResult!typegeneric)
      tbvNodes[iCount, 3].Text = rResult!value
      tbvNodes[iCount, 4].Text = rResult!value2
      tbvNodes[iCount, 5].Text = rResult!value3
      tbvNodes[iCount, 6].Text = rResult!value4
      tbvNodes[iCount, 7].Text = IIf(rResult!sleeping, "Sleeping", "Listening")
      tbvNodes[iCount, 8].Text = Main.hZWave.GetNodeManufacturerName(rResult!nodeid)
      tbvNodes[iCount, 9].Text = Main.hZWave.GetNodeProductName(rResult!nodeid)
      tbvNodes[iCount, 10].Text = Main.hZWave.GetNodeNeighborsList(rResult!nodeid)
      tbvNodes[iCount, 11].Text = Main.hZWave.GetNodeCommandClassList(rResult!nodeid)

      ' Make column widther if needed
      FOR jCount = 0 TO 11

        IF (tbvNodes.Font.Width(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size) > tbvNodes.Columns[jCount].Width THEN
          tbvNodes.Columns[jCount].Width = tbvNodes.Font.Width(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size
        END IF

      NEXT
 
      rResult.MoveNext
    NEXT
  END IF

END

PUBLIC SUB tbvNodes_Click()

  EnableControls(tbvNodes.Row)

END

PUBLIC SUB tbvNodes_Change()

  EnableControls(tbvNodes.Row)

END

PUBLIC SUB EnableControls(iRow AS Integer)

  iSelectedNode = tbvNodes[iRow, 0].Text

  ' Don't allow anything if the homeid is empty
  IF Main.hZWave.iHomeID = 0 THEN
    RETURN
  ENDIF

  SELECT tbvNodes[iRow, 2].Text
    CASE "Generic Controller", "Static Controller"
      btnNodeOn.Enabled = FALSE
      btnNodeOff.Enabled = FALSE
      slDim.Value = 0
      slDim.Enabled = FALSE
      btnRequestBasicReport.Enabled = FALSE
      btnRequestDynamicReport.Enabled = FALSE
      btnRequestNodeNeighborUpdate.Enabled = FALSE
      btnRefreshNodeInfo.Enabled = TRUE
      spInstance.Enabled = FALSE
      btnRequestAllConfigParams.Enabled = FALSE
      btnRequestConfigParam.Enabled = FALSE
      btnSetConfigParam.Enabled = FALSE
      btnAddAssociation.Enabled = FALSE
      btnRemoveAssociation.Enabled = FALSE

    CASE "Multilevel Switch"
      btnNodeOn.Enabled = TRUE
      btnNodeOff.Enabled = TRUE
      TRY slDim.Value = Main.hZWave.GetCurrentValueNode(iSelectedNode)
      slDim.Enabled = TRUE
      btnRequestBasicReport.Enabled = TRUE
      btnRequestDynamicReport.Enabled = TRUE
      btnRequestNodeNeighborUpdate.Enabled = TRUE
      btnRefreshNodeInfo.Enabled = TRUE
      spInstance.Enabled = TRUE
      btnRequestAllConfigParams.Enabled = TRUE
      btnRequestConfigParam.Enabled = TRUE
      btnSetConfigParam.Enabled = TRUE
      btnAddAssociation.Enabled = TRUE
      btnRemoveAssociation.Enabled = TRUE

    CASE "Binary Switch"
      btnNodeOff.Enabled = TRUE
      btnNodeOn.Enabled = TRUE
      slDim.Value = 0
      slDim.Enabled = FALSE
      btnRequestBasicReport.Enabled = TRUE
      btnRequestDynamicReport.Enabled = TRUE
      btnRequestNodeNeighborUpdate.Enabled = TRUE
      btnRefreshNodeInfo.Enabled = TRUE
      spInstance.Enabled = TRUE
      btnRequestAllConfigParams.Enabled = TRUE
      btnRequestConfigParam.Enabled = TRUE
      btnSetConfigParam.Enabled = TRUE
      btnAddAssociation.Enabled = TRUE
      btnRemoveAssociation.Enabled = TRUE

    CASE "Semi Interoperable", "Non Interoperable"
      btnNodeOn.Enabled = FALSE
      btnNodeOff.Enabled = FALSE
      slDim.Value = 0
      slDim.Enabled = FALSE
      btnRequestBasicReport.Enabled = FALSE
      btnRequestDynamicReport.Enabled = FALSE
      btnRequestNodeNeighborUpdate.Enabled = FALSE
      btnRefreshNodeInfo.Enabled = FALSE
      spInstance.Enabled = FALSE
      btnRequestAllConfigParams.Enabled = FALSE
      btnRequestConfigParam.Enabled = FALSE
      btnSetConfigParam.Enabled = FALSE
      btnAddAssociation.Enabled = FALSE
      btnRemoveAssociation.Enabled = FALSE

    DEFAULT
      btnNodeOn.Enabled = FALSE
      btnNodeOff.Enabled = FALSE
      slDim.Value = 0
      slDim.Enabled = FALSE
      btnRequestBasicReport.Enabled = TRUE
      btnRequestDynamicReport.Enabled = TRUE
      btnRequestNodeNeighborUpdate.Enabled = TRUE
      btnRefreshNodeInfo.Enabled = TRUE
      spInstance.Enabled = FALSE
      btnRequestAllConfigParams.Enabled = TRUE
      btnRequestConfigParam.Enabled = TRUE
      btnSetConfigParam.Enabled = TRUE
      btnAddAssociation.Enabled = TRUE
      btnRemoveAssociation.Enabled = TRUE

  END SELECT

END

PUBLIC SUB btnClose_Click()

  ME.Close

END

PUBLIC SUB btnNodeOn_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "On command send to node " & iSelectedNode & ", instance " & spInstance.Value
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, &HFF)
  ENDIF

END

PUBLIC SUB btnNodeOff_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Off command send to node " & iSelectedNode & ", instance " & spInstance.Value
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, &H0)
  ENDIF

END

PUBLIC SUB slDim_MouseUp()

  IF slDim.Enabled AND iSelectedNode >= 1 THEN 
    txtMessage.Text = "Dim=" & slDim.Value & " request send to node " & iSelectedNode
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, slDim.Value)
  ENDIF 
  
END

PUBLIC SUB btnRequestBasicReport_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Requested basic report for node " & iSelectedNode
    Main.hZWave.RequestBasicReport(iSelectedNode)
  ENDIF

END

PUBLIC SUB btnRequestCapabilities_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Requested capabilities for node " & iSelectedNode
    Main.hZWave.RequestNodeCapabilities(iSelectedNode)
  ENDIF

END

PUBLIC SUB btnRefresh_Click()

  FillScreenInfo()
  FillNodeTable()

END

PUBLIC SUB btnCancelControllerCommand_Click()

  IF Main.hZWave.CancelControllerCommand() THEN
    txtMessage.Text = "Cancelled controller command"

    ' Try to stop the timer, if configured
    TRY tControllerCancel.Stop

  ELSE
    txtMessage.Text = "Controller was already in normal operation mode"
  ENDIF

END

PUBLIC SUB btnAddDevice_Click()

  IF Main.hZWave.AddDevice() THEN
    txtMessage.Text = "Press button on device to add!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCancel = NEW Timer AS "tControllerCancel"
    tControllerCancel.Delay = 30000
    tControllerCancel.Start

  ELSE
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  ENDIF

END

PUBLIC SUB btnRemoveDevice_Click()

  IF Main.hZWave.RemoveDevice() THEN
    txtMessage.Text = "Press button on device to remove!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCancel = NEW Timer AS "tControllerCancel"
    tControllerCancel.Delay = 30000
    tControllerCancel.Start

  ELSE
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  ENDIF

END

PUBLIC SUB btnAddController_Click()

  IF Main.hZWave.AddController() THEN
    txtMessage.Text = "Press button on other controller to add!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCancel = NEW Timer AS "tControllerCancel"
    tControllerCancel.Delay = 30000
    tControllerCancel.Start

  ELSE
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  ENDIF

END

PUBLIC SUB btnRemoveController_Click()

  IF Main.hZWave.RemoveController() THEN
    txtMessage.Text = "Press button on other controller to remove!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCancel = NEW Timer AS "tControllerCancel"
    tControllerCancel.Delay = 30000
    tControllerCancel.Start

  ELSE
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  ENDIF

END

PUBLIC SUB btnRequestNodeNeighborUpdate_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Requesting neighborhood update for node " & iSelectedNode
    Main.hZWave.RequestNodeNeighborUpdate(iSelectedNode)
  ENDIF

END

PUBLIC SUB btnSetConfigParam_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Setting config parm " & vbConfigParam.Value & " for node " & iSelectedNode & " to " & vbConfigParam.Value
    Main.hZWave.SetConfigParam(iSelectedNode, vbConfigParam.Value, vbConfigValue.Value)
  ENDIF

END

PUBLIC SUB btnRequestAllConfigParams_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Requested all config parms for node " & iSelectedNode
    Main.hZWave.RequestAllConfigParams(iSelectedNode)
  ENDIF

END

PUBLIC SUB btnAddAssociation_Click()

  IF iSelectedNode >= 1 THEN
    IF vbAssociationGroup.Value >= 1 AND vbAssociationGroup.Value <= 9 THEN

      IF vbAssociationNode.Value >= 1 AND vbAssociationNode.Value <= 254 THEN
      txtMessage.Text = "Adding association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
      Main.hZWave.AddAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      ELSE
        txtMessage.Text = "ERROR: Requested to associate node is not between 1-254"
      ENDIF

    ELSE
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    ENDIF
  ENDIF

END

PUBLIC SUB btnRemoveAssociation_Click()

  IF iSelectedNode >= 1 THEN
    IF vbAssociationNode.Value >= 1 AND vbAssociationNode.Value <= 9 THEN

      IF vbAssociationNode.Value >= 1 AND vbAssociationNode.Value <= 254 THEN
        txtMessage.Text = "Removing association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
        Main.hZWave.RemoveAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      ELSE
        txtMessage.Text = "ERROR: Requested to be removed associate node is not between 1-254"
      ENDIF

    ELSE
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    ENDIF
  ENDIF

END

PUBLIC SUB btnRequestConfigParam_Click()

  IF iSelectedNode >= 1 THEN
    IF vbConfigParam.Value >= 1 AND vbConfigParam.Value <= 99 THEN
      txtMessage.Text = "Requesting config parm " & vbConfigParam.Value & " for node " & iSelectedNode
      Main.hZWave.RequestConfigParam(iSelectedNode, vbConfigParam.Value)
    ELSE
      txtMessage.Text = "ERROR: Requested config is not between 1-99"
    ENDIF
  ENDIF

END

PUBLIC SUB btnRequestDynamicReport_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Requesting dynamic update for node " & iSelectedNode
    Main.hZWave.RequestNodeDynamicReport(iSelectedNode)
  ENDIF  

END

PUBLIC SUB btnRefreshNodeInfo_Click()

  IF iSelectedNode >= 1 THEN
    txtMessage.Text = "Requesting RefreshInfo for node " & iSelectedNode
    Main.hZWave.RefreshNodeInfo(iSelectedNode)
  ENDIF    

END

PUBLIC SUB btnSoftResetController_Click()

  IF Message.Question("Are you sure that you want to SOFT Reset the Z-Wave controller?", (" Yes "), (" No ")) = 1 THEN
    txtMessage.Text = "Controller is beeing Soft Reset (Reboot)"
    Main.hZWave.ControllerSoftReset()
  ENDIF

END

PUBLIC SUB btnHardResetController_Click()

  IF Message.Question("Are you sure that you want to HARD Reset the Z-Wave controller?\n*** *ALL* the data will be erased from the controller ***", ("Yes"), ("No")) = 1 THEN
    txtMessage.Text = "Controller is beeing HARD Reset (*ALL* data erased)"
    Main.hZWave.ControllerHardReset()
  ENDIF

END

PUBLIC SUB btnRequestBasicReportAll_Click()

  txtMessage.Text = "Requested basic report for all nodes"
  Main.hZWave.RequestBasicReport(0)

END

PUBLIC SUB btnRequestDynamicReportAll_Click()

  txtMessage.Text = "Requested dynamic report for all nodes"
  Main.hZWave.RequestNodeDynamicReport(0)

END

PUBLIC SUB tControllerCancel_Timer()

  txtMessage.Text = "30 seconds have expired, cancelling controller command"
  Main.hZWave.CancelControllerCommand()

END
