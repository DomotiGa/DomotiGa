' Gambas module file

' Description:
' Util.module
' This module provides generic routines available in all other modules and classes, and not putting it in the Main.module anymore

' Development Status:
' Just started

' Credits:
' Alexander Kuiper

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

' Following collection stores already downloaded files, normally no need to re-download
Private $cDownloadedFiles As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Convert Unix Epoch to readable format 
' UTC=True - then timezone info will be added
' Hex=True - we expect a length of 8 and in hex format
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub TimeSinceEpoch(sTime As String, Optional bUTC As Boolean = False, Optional bHex As Boolean = False) As String

  Dim gTime As Date

  If bHex Then
    If Len(sTime) <> 8 Then Return ""
  Endif

  ' calculate time since epoch
  If bHex Then
    gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val("&H" & sTime & "&"))
  Else
    gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val(sTime))
  Endif

  If bUTC Then
    gTime = DateAdd(gTime, gb.Second, CInt(Main.fAstroAutoTimezone * 3600))
  Endif

  Return Format$(gTime, "yyyy/mm/dd hh:nn:ss")

Catch ' some errors
  Main.WriteDebugLog("[Util] ERROR: TimeSinceEpoch Failed (" & sTime & "), '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve a file from the internet, from the give URL.
' The file will be download in the TmpFile location and
' the temporary filename will be returned
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DownloadFile(SUrl As String, Optional bReDownload As Boolean = False) As String

  Dim hHttpC As HttpClient
  Dim sBuffer As String
  Dim SFile As String

  ' If we already downloaded the file, don't download it again
  If Not bReDownload Then
    If $cDownloadedFiles.Exist(sUrl) Then
      Return $cDownloadedFiles[sUrl]
    Endif
  Endif

  hHttpC = New HttpClient
  hHttpC.URL = sUrl
  hHttpC.Async = False
  hHttpC.Timeout = 5
  hHttpC.Get()

  '--- check if succesfull ---
  If hHttpC.Status < 0 Then
    '--- something went wrong ---
    Main.WriteDebugLog("[Util] ERROR: Unable to download URL '" & sUrl & "' Code=" & CStr(hHttpC.Status))
    Return ""
  Else
    '--- success - read the data ---
    If Lof(hHttpC) Then sBuffer = Read #hHttpC, Lof(hHttpC)
  Endif

  '--- do a final check on access right ---
  If Trim(UCase(sBuffer)) = "ACCESS DENIED" Then
    Main.WriteDebugLog("[Util] ERROR: Access denied to URL '" & sUrl & "'")
    Return ""
  Else
    sFile = Temp() & "." & File.Ext(sUrl)
    File.Save(sFile, sBuffer)
    $cDownloadedFiles[sUrl] = sFile
    Return sFile
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Use the Google Geocode API to search for location/cities and their latitude and longtitude
' Returned is collection:
' info - returned if a none-fatal error happens
' error - fatal error
' city - list of cities, if search is successfull
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GoogleGeoCodeSearch(sLocation As String) As Collection

  Dim hGoogleGeocode As HttpClient
  Dim sUrl As String
  Dim sBuffer As String
  Dim cResult As New Collection
  Dim vResponse As Variant
  Dim cItem As Collection
  Dim cCity As New Collection[]

  sUrl = "https://maps.googleapis.com/maps/api/geocode/json?address="

  If Not sLocation Then
    cResult["info"] = "NOLOCATION"
    Return cResult
  Endif

  ' Create URL
  sUrl = "http://maps.googleapis.com/maps/api/geocode/json?address=" & URL.Encode(sLocation) & "&" & "sensor=false"

  ' Create HttpClient and configure  
  hGoogleGeocode = New HttpClient
  hGoogleGeocode.URL = sUrl
  hGoogleGeocode.TimeOut = 5
  hGoogleGeocode.Async = False
  hGoogleGeocode.Post("", "")

  If hGoogleGeocode.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    cResult["error"] = "Unable to connect Google Geocode\nCode=" & hGoogleGeocode.Status & ", HTTP=" & hGoogleGeocode.Code
    Return cResult
  Else
    ' success or error - read the data
    If Lof(hGoogleGeocode) Then sBuffer = Read #hGoogleGeocode, Lof(hGoogleGeocode)

    ' Decode the retrieved JSON data
    Try vResponse = JSON.Decode(sBuffer)
    If Error Then
      cResult["error"] = "Failed decoding Google Geocode data. ERROR=" & Error.Text
      Return cResult
    Endif

    If Not vResponse.Exist("status") Then
      cResult["error"] = "Invalid response from Google Geocode"
      Return cResult
    Endif

    If vResponse["status"] <> "OK" And vResponse["status"] <> "ZERO_RESULTS" Then
      cResult["error"] = "Google Geocode denied the request or it was invalid\nResponse=" & vResponse["status"]
      Return cResult
    Endif

    If vResponse["status"] = "ZERO_RESULTS" Then
      cResult["info"] = "NOTFOUND"
      Return cResult
    Endif

    For Each cItem In vResponse["results"]
      cCity.Add(["city": cItem["formatted_address"], "latitude": cItem["geometry"]["location"]["lat"], "longitude": cItem["geometry"]["location"]["lng"]])
    Next

    cResult["city"] = cCity
    Return cResult

  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the Beaufort value, when the Mph is supplied
' Used by multiple weather plugins
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WindBeaufort(WindSpeed As Float) As Integer

  Dim iBeaufort As Integer

  If WindSpeed < 1 Then
    iBeaufort = 0
  Else If WindSpeed >= 1 And WindSpeed <= 3 Then
    iBeaufort = 1
  Else If WindSpeed > 3 And WindSpeed <= 7 Then
    iBeaufort = 2
  Else If WindSpeed > 7 And WindSpeed <= 12 Then
    iBeaufort = 3
  Else If WindSpeed > 12 And WindSpeed <= 17 Then
    iBeaufort = 4
  Else If WindSpeed > 17 And WindSpeed <= 24 Then
    iBeaufort = 5
  Else If WindSpeed > 24 And WindSpeed <= 30 Then
    iBeaufort = 6
  Else If WindSpeed > 30 And WindSpeed <= 38 Then
    iBeaufort = 7
  Else If WindSpeed > 38 And WindSpeed <= 46 Then
    iBeaufort = 8
  Else If WindSpeed > 46 And WindSpeed <= 54 Then
    iBeaufort = 9
  Else If WindSpeed > 54 And WindSpeed <= 63 Then
    iBeaufort = 10
  Else If WindSpeed > 63 And WindSpeed <= 72 Then
    iBeaufort = 11
  Else If WindSpeed > 72 Then
    iBeaufort = 12
  Endif

  Return iBeaufort

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return a collection with keys being the serial ports and
' the values being the serial/by-id name if present
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ScanSerialPorts(sPath As String, sFilter As String) As Collection

  Dim sName, sRealName, sById As String
  Dim aPortsById As String[]
  Dim aSerialPorts As String[]
  Dim cSerPort2ById As New Collection
  Dim cResult As New Collection
  Dim sByIdPath As String = "/dev/serial/by-id/"

  ' get the serial devices with id's
  cSerPort2ById.Clear()
  Try aPortsById = Dir(sByIdPath)
  If aPortsById Then
    For Each sById In aPortsById
      Exec ["readlink", "-f", sByIdPath &/ sById] To sRealName
      sRealName = Trim(sRealName)
      If Not sRealName Then sRealName = sName
      cSerPort2ById.Add(sById, sRealName)
    Next
  Endif

  ' fill array with available ports according to filter
  Try aSerialPorts = Dir(sPath, sFilter)
  ' only if devices found
  If aSerialPorts Then
    aSerialPorts.Sort
    cResult.Clear
    For Each sRealName In aSerialPorts
      sRealName = sPath &/ sRealName
      If cSerPort2ById.Exist(sRealName) Then
        sById = cSerPort2ById[sRealName]
        cSerPort2ById.Remove(sRealName)
      Else
        sById = "-"
      Endif
      cResult.Add(sById, sRealName)
    Next
  Endif

  ' If there are any devices with id's left, add them still
  For Each cSerPort2ById
    sRealName = cSerPort2ById.Key
    sById = cSerPort2ById[sRealName]
    cResult.Add(sById, sRealName)
  Next

  Return cResult

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get ip address of this machine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Detect_IPAddr() As String[]

  Dim sHost As String
  Dim aIPs As String[]
  Dim aResult As New String[]

  ' inet 192.168.178.24/24 brd 192.168.178.255 scope global eth0
  Shell "ip addr | grep brd | grep inet | awk -F ' ' '{print $2}' | awk -F '/' '{print $1}'" To sHost

  aIPs = Split(Trim$(sHost), "\n")
  For Each sHost In aIPs
    If InStr(sHost, " ") Then sHost = Mid(sHost, 1, InStr(sHost, " "))
    aResult.Add(sHost)
  Next

  Return aResult

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' determine broadcast address(es) of this machine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Detect_BroadcastAddr() As String[]

  Dim sHost As String
  Dim aIPs As String[]
  Dim aResult As New String[]

  Shell "ip addr | grep brd | grep inet | awk -F ' ' '{print $4}' | grep -v '^127\\.'" To sHost

  aIPs = Split(Trim$(sHost), "\n")
  For Each sHost In aIPs
    If InStr(sHost, " ") Then sHost = Mid(sHost, 1, InStr(sHost, " "))
    aResult.Add(sHost)
  Next

  Return aResult

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if command can be found on system
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ProgramExist(sProg As String) As Boolean

  Dim sTemp As String
  Dim iPos As Integer

  iPos = String.InStr(sProg, " ")
  If iPos Then sProg = String.Left(sProg, iPos - 1)

  Shell "which " & sProg To sTemp

  If Not sTemp Then Return False
  Return Not (Trim$(sTemp) Like "which: *")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Returns True of False in string format for display
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DisplayBool(bSwitch As Variant) As String

  If TypeOf(bSwitch) = gb.Boolean Then
    Select bSwitch
      Case True
          Return "True"
      Case Else
          Return "False"
    End Select
  Else
    If bSwitch Then
      Return "True"
    Else
      Return "False"
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Convert XML Data to a JSON Collection/Array
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub XMLToJSON(sData As String) As JSONCollection

  Dim XmlR As New XmlReader
  Dim cData As New JSONCollection
  Dim cElement As JSONCollection
  Dim oTmp As Object
  Dim iDepth As Integer = -1
  Dim aLabel As New String[]
  Dim iCnt As Integer
  Dim sKey As String

  ' Create new Reader and import the string into the Reader
  XmlR = New XmlReader
  Try XmlR.FromString(sData)

  ' If we hit an error, return Null instead of a valid Collection
  If Error Then Return Null

  ' Loop through XML structure
  While Not XmlR.Eof

    Select Case XmlR.Node.Type
      Case XmlReaderNodeType.None ' Do nothing - normally "<?xml ... >"
      Case XmlReaderNodeType.Element

        sKey = XmlR.Node.Name

        If iDepth <> XmlR.Node.Depth Then
          ' Resize label array if too small
          If (XmlR.Node.Depth + 1) > aLabel.Count Then
            aLabel.Resize(XmlR.Node.Depth + 1)
          Endif

          ' Add/modify the label
          aLabel[XmlR.Node.Depth] = sKey

          cElement = cData
          For iCnt = 0 To XmlR.Node.Depth - 1
            If cElement[aLabel[iCnt]] = Null Then
              cElement[aLabel[iCnt]] = New JSONCollection
            Endif

            If TypeOf(cElement[aLabel[iCnt]]) = gb.Object And If Object.Type(cElement[aLabel[iCnt]]) = "JSONCollection[]" Then
              cElement = cElement[aLabel[iCnt]][cElement[aLabel[iCnt]].Count - 1]
            Else
              cElement = cElement[aLabel[iCnt]]
            Endif
          Next

          iDepth = XmlR.Node.Depth
        Endif

        If XmlR.Node.Attributes.Count Then
          If Not cElement.Exist(sKey) Then
            cElement[XmlR.Node.Name] = New JSONCollection
            For Each XmlR.Node.Attributes
              cElement[sKey].Add(XmlR.Node.Value, XmlR.Node.Name)
            Next
          Else
            ' We need to convert the JSONCollection to JSONCollection[]
            If TypeOf(cElement[sKey]) = gb.Object And If Object.Type(cElement[sKey]) = "JSONCollection" Then
              oTmp = cElement[sKey]
              cElement[sKey] = New JSONCollection[]
              cElement[sKey].Add(oTmp)

              ' Now add the new information to the array
              oTmp = New JSONCollection
              For Each XmlR.Node.Attributes
                oTmp.Add(XmlR.Node.Value, XmlR.Node.Name)
              Next
              cElement[sKey].Add(oTmp)
            Endif

          Endif
        Else
          cElement.Add(Null, XmlR.Node.Name)
        Endif

      Case XmlReaderNodeType.Text ' #text#
        If cElement.Exist(sKey) Then
          ' Check if we got a null value, then just assign a value
          If TypeOf(cElement[sKey]) = gb.Null Then
            cElement[sKey] = XmlR.Node.Value
          Else
            ' Check if we got a JSONCollection[], then do some magic on it
            If TypeOf(cElement[sKey]) = gb.Object And If Object.Type(cElement[sKey]) = "JSONCollection[]" Then
              ' We just add it to the LAST entry in the Collection[]?
              cElement[sKey][cElement[sKey].Count - 1].Add(XmlR.Node.Value, "#text")
            Else
              ' A normal JSONCollection, add the text
              cElement[sKey].Add(XmlR.Node.Value, "#text")
            Endif
          Endif

          If cElement.Count = 1 Then

          Endif
        Else
          cElement[sKey] = XmlR.Node.Value
        Endif
      Case XmlReaderNodeType.EndElement
        iDepth = XmlR.Node.Depth

    End Select

    ' Read next XML node
    XmlR.Read()
  Wend

  ' Return created JSON Collection
  Return cData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Pad a string from the left side
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LeftPad(vVar As Variant, iLength As Integer, Optional sPad As String) As String

  vVar = CStr(vVar)

  While (Len(vVar) < iLength)
    vVar = sPad & vVar
  Wend

  Return vVar

End
