' Gambas module file

' Description:
' Mail.module
' Support for sending e-mails via SMTP.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Mail"
Public PluginFriendlyName As String = "Mail"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Mail] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send e-mail via configured smtp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendMail(sSubject As String, sBody As String, Optional sTo As String) As Boolean

  Dim hMsg As New SmtpClient
  Dim sMimeType As String

  ' if mail is disabled, return
  If Not Main.bEmailEnabled Then
    Main.WriteDebugLog(LogLabel & "Email is disabled.")
    Return False
  Endif

  ' sent msg to alternate address instead of default one
  If sTo Then
    hMsg.To.Add(sTo)
  Else
    hMsg.To.Add(Main.sEmailToAddress)
  Endif

  If Main.bEMailDebug Then
    Main.WriteDebugLog("[Mail] From address: " & Main.sEmailFromAddress)
    Main.WriteDebugLog("[Mail] SMTP server: " & Main.sEmailSMTPServer)
    Main.WriteDebugLog("[Mail] SMTP Port: " & Main.iEmailSMTPPort)
    Main.WriteDebugLog("[Mail] TLS/SSL: " & Main.DisplayBool(Main.bEmailSSL))
    If sTo Then Main.WriteDebugLog("[Mail] To Address: " & sTo)
    Main.WriteDebugLog("[Mail] Subject: " & sSubject)
    Main.WriteDebugLog("[Mail] Body: " & sBody)
  Endif

  hMsg.Subject = sSubject
  hMsg.From = Main.sEmailFromAddress
  hMsg.Host = Main.sEmailSMTPServer
  hMsg.Port = Main.iEmailSMTPPort

  ' Set MIME type to HTML if there is something like <tag ... </tag in the message
  If Regexp.Match(sBody, "<(\\w+).*</\\1", RegExp.DotAll) Then
    sMimeType = "text/html"
  Else
    sMimeType = "text/plain"
  Endif
  hMsg.Add(sBody & "\n\n" & ("-- \nPowered by ") & Application.Name & " V" & Main.sProgramVersion & "\n", sMimeType)

  ' both username and password need to be available
  If Len(Main.sEmailUserName) And If Not Len(Main.sEmailPassword) Then
    Main.WriteDebugLog(LogLabel & "Password missing for authentication.")
    Return False
  Else If Not Len(Main.sEmailUserName) And If Len(Main.sEmailPassword) Then
    Main.WriteDebugLog(LogLabel & "Username missing for authentication.")
    Return False
  Else If Len(Main.sEmailUserName) And If Len(Main.sEmailPassword) Then
    hMsg.User = Main.sEmailUserName
    hMsg.Password = Main.sEmailPassword
    If Main.bEMailDebug Then
      Main.WriteDebugLog("[Mail] Authentication with Username: " & Main.sEmailUserName)
      Main.WriteDebugLog("[Mail] Password is not logged.")
    Endif
  Else
    Main.WriteDebugLog(LogLabel & "No authentication used.")
  Endif

  If Main.bEmailSSL Then
    hMsg.Encrypt = Net.SSL
  Endif

  Try hMsg.Send()
  If Not Error Then
    Main.WriteLog("[Mail] Just sent an e-mail message with subject '" & sSubject & "' to '" & sTo & "'.")
  Else
    Main.WriteLog("[Mail] Error '" & Error.Text & "' occured when sending e-mail with subject '" & sSubject & "' to recipient '" & sTo & "'.")
    Return False
  Endif

  Return True

Catch
  Main.WriteLog("[Mail] Error '" & Error.Text & "' occured when sending e-mail message with subject '" & sSubject & "' to recipient '" & sTo & "'.")
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send e-mail with captured image via configured smtp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCaptureByMail(sSubject As String, sBody As String, iCam As Integer, Optional sTo As String)

  Dim hMsg As New SmtpClient
  Dim rResult As Result
  Dim sTable As String = "capture_camera"
  Dim sTempFile As String = Temp() & ".jpg"

  ' if mail is disabled, return
  If Not Main.bEmailEnabled Then Return

  sTable = sTable & iCam
  ' get last image
  rResult = Main.hDB.Exec(Subst("SELECT * FROM &1 ORDER BY stamp DESC LIMIT 1", sTable))
  If rResult.Available Then
    If rResult.Count = 1 Then
      ' save blob to temp file
      Try File.Save(sTempFile, rResult!image.Data)
    Endif
  Endif
  ' if temp file exists, add to e-mail and delete it
  If Exist(sTempFile) Then
    hMsg.Add(File.Load(sTempFile), "image/jpeg", "FrontDoor" & Format(Now(), "yyyy-mm-dd-hh-nn-ss") & ".jpg ")
    Kill sTempFile
  Endif
  ' sent msg to alternate address instead of default one
  If (Len(sTo)) Then
    hMsg.To.Add(sTo)
  Else
    hMsg.To.Add(Main.sEmailToAddress)
  Endif

  If Main.bEMailDebug Then
    Main.WriteDebugLog("[Mail] " & Main.sEmailFromAddress)
    Main.WriteDebugLog("[Mail] " & Main.sEmailSMTPServer)
    Main.WriteDebugLog("[Mail] " & Main.iEmailSMTPPort)
  Endif

  hMsg.Subject = sSubject
  hMsg.Add(sBody & "\n\n" & ("-- \nPowered by ") & Application.Name & " V" & Main.sProgramVersion & "\n")
  hMsg.From = Main.sEmailFromAddress
  hMsg.Host = Main.sEmailSMTPServer
  hMsg.Port = Main.iEmailSMTPPort
  Try hMsg.Send()
  If Not Error Then Main.WriteLog("[Mail] Just sent an e-mail message.")

Catch
  Main.WriteLog("[Mail] Error: Sending e-mail message failed!")

End
