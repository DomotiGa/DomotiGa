' Gambas module file

' Description:
' Calendar.module
' Support for calendar related functions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public dPlanning As Date[]

Public Sub Init()

  Dim rResult As Result

  dPlanning = New Date[]

  If Main.bServer Then
    ' load calendar from database
    rResult = Main.hDB.Exec("SELECT * FROM calendar")
    If Not rResult Then
      Main.WriteLog("[Calendar] ERROR: table 'calendar' not found!")
      Return
    Else
      For Each rResult
        dPlanning.Add(rResult!date)
        rResult.MoveNext
      Next
    Endif
  Else
    ' retrieve calendar from server
    ' TODO: fix for server code
    ' Client.GetPlanning()
  Endif

End

' read a planning received from client and store it in database
Public Sub SetPlanning(sParams As Variant[]) As Boolean

  Dim i As Integer
  Dim rResult As Result
  Dim tableCalendar As Table
  Dim d As Date
  Dim bBool As Boolean

  If sParams.Count = 1 Then
    dPlanning.Clear()
    For i = 0 To (sParams[0].Count - 1)
      dPlanning.Add(sParams[0].Pop())
    Next
    Run()
    bBool = True
  Else
    bBool = False
  Endif

  ' delete complete history
  Try Main.hDB.Tables.Remove("calendar")
  ' recreate empty one
  tableCalendar = Main.hDB.Tables.Add("calendar")
  tableCalendar.Fields.Add("id", db.Serial)
  tableCalendar.Fields.Add("date", db.Date, 64)
  tableCalendar.PrimaryKey = ["id"]
  tableCalendar.Update()

  For Each d In Calendar.dPlanning
    Main.hDB.Begin()
    rResult = Main.hDB.Create("calendar")
    rResult!date = d
    rResult.Update()
    Main.hDB.Commit()
  Next

  Return bBool

End

' send a planning to client
Public Sub GetPlanning() As RpcArray

  Dim d As Date
  Dim aArray As New RpcArray

  For Each d In Calendar.dPlanning
    aArray.Add(d, XmlRpc.xDate)
  Next

  Return aArray

End

' compute the next marked day in the planning
Public Sub Run()

  Dim d, NextPlanning As Date
  Dim offset, smallestOffset As Integer

  smallestOffset = 10000

  For Each d In dPlanning
    offset = DateDiff(Now(), d, gb.Day)
    If offset > 0 Then
      If offset < smallestOffset Then
        smallestOffset = offset
        NextPlanning = d
      Endif
    Endif
  Next

  ' gambas3 doesn't display zero date as "00:00:00", but as blank. Following is to be backwards compatible:
  If NextPlanning = Null Then
    Main.SetGlobalVar("NextPlanning", "00:00:00", True)
  Else
    Main.SetGlobalVar("NextPlanning", NextPlanning, True)
  Endif

End
