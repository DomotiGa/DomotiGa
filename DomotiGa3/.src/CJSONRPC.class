' Gambas class file

' Description:
' CJSONRPC.class
' Built-in JSON-RPC server.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "JSONRPC"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "JSON-RPC"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[JSONRPC] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' JSON-RPC API Version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private APIVersion As String = "0.01"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iHTTPPort As Integer
Private $iMaxConn As Integer
Private $iTypeConn As Integer
Private $iAuth As Integer
Private $bDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Other Variable definitions like sockets, timers, etc
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public hJSONRPC As JsonRpcServer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Const Type_Auth_None As Integer = 0 ' No authentication done
Private Const Type_Auth_Basic As Integer = 1 ' Basic HTTP authentication done - against the user list
Private Const Type_Auth_Session As Integer = 2 ' Session based authentication?

Private Const Type_Conn_HTTP As Integer = 0 ' Only HTTP connections
Private Const Type_Conn_Socket As Integer = 1 ' Only real sockets

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iMaxConn = cPl.Settings["maxconn"]
  $iHTTPPort = cPl.Settings["httpport"]
  $iTypeConn = cPl.Settings["type"]
  $iAuth = cPl.Settings["auth"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Initialize the JSON-RPC server and register all methods
' It is possible to also register the help, but we don't use it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  Dim hRpcFunc As JsonRpcFunction

  hJSONRPC = New JsonRpcServer As "hJSONRPC"

  ' ------------------------
  ' start method definitions
  ' ------------------------

  ' ### System methods ###
  hRpcFunc = New JsonRpcFunction("system.hostname")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("system.ipaddress")
  hJSONRPC.Register(hRpcFunc)

  ' ### Global methods ###
  hRpcFunc = New JsonRpcFunction("domotiga.pid")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.uptime")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.version")
  hJSONRPC.Register(hRpcFunc)

  ' ### API methods ###
  hRpcFunc = New JsonRpcFunction("api.version")
  hJSONRPC.Register(hRpcFunc)

  ' ### GlobalVar methods ###
  hRpcFunc = New JsonRpcFunction("globalvar.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("globalvar.get")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("globalvar.set")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("globalvar.del")
  hJSONRPC.Register(hRpcFunc)

  ' ### Device methods ###
  hRpcFunc = New JsonRpcFunction("device.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("device.set")
  hJSONRPC.Register(hRpcFunc)
  
  ' ---------------------------------------------------------
  ' All have been setup, now try to start the JSOC-RPC server
  ' ---------------------------------------------------------
  Try hJSONRPC.Listen($iHTTPPort, $iMaxConn)
  If hJSONRPC.Listening Then
    ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " Server listening on Port " & $iHTTPPort)
    IsRunning = True
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
    Print Error.Text
    IsRunning = False
    ErrorText = "Net Not Active"
    Return False
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Shutdown our JSON-RPC server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Disconnect()

  hJSONRPC.Stop()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle the JSON-RPC Remote Calls
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hJSONRPC_RemoteCall(sName As String, cData As Collection)

  Dim vValue As Variant
  Dim cValue As New Collection
  Dim aValue As New String[]
  Dim sParam As String
  Dim iParam As Integer
  
  If $bDebug Then
    Main.WriteDebugLog(LogLabel & "Got a RemoteCall for method '" & sName & "'")
    'For Each sParam In sData
    '  Main.WriteDebugLog(LogLabel & "Param[" & iParam & "] = '" & Main.HtmlDecode(sParam) & "'")
    '  Inc iParam
    'Next
  Endif

  ' -32602 = Invalid parameters
  ' -32601 = Invalid method

  Select sName
    ' ### System methods ###
    Case "system.hostname"
      Call_System_Hostname()
    Case "system.ipaddress"
      ' TODO
    ' ### API methods ###
    Case "api.version"
      Call_API_Version()
    ' ### Generic methods ###
    Case "domotiga.pid"
      Call_DomotiGa_PID()
    Case "domotiga.uptime"
      Call_DomotiGa_Uptime()
    Case "domotiga.version"
      Call_DomotiGa_Version()
    ' ### GlobalVar methods ###
    Case "globalvar.list"
      Call_GlobalVar_List()
    Case "globalvar.get"
      Call_GlobalVar_Get(cData)
    Case "globalvar.set"
      Call_GlobalVar_Set(cData)
    Case "globalvar.del"
      Call_GlobalVar_Del(cData)
    ' ### Device methods ###
    Case "device.list"
      Call_Device_List(cData)
    Case "device.set"
      Call_Device_Set(cData)
    Default
      hJSONRPC.SetReply(-32601, Null)
      Return
  End Select

Catch
  ' Handle errors
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at " & Error.Where)
  hJSONRPC.SetReply(-32603, Null)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if Variable if it is number. JSON decode doesn't
' always give it back as gb.Integer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Check_Number(vValue As Variant) As Boolean

  If TypeOf(vValue) = gb.Float Then Return True
  If TypeOf(vValue) = gb.Long Then Return True
  If TypeOf(vValue) = gb.Integer Then Return True
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts empty string to Chr(1), because Gambas doesn't
' support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Private Sub ToEmptyString(sValue As String) As String

  If sValue Then
    Return sValue
  Else
    Return Chr(1)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=system.hostname
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_System_Hostname()

  hJSONRPC.SetReply(0, System.Host)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=api.version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_API_Version()

  hJSONRPC.SetReply(0, APIVersion)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=domotiga.pid
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DomotiGa_PID()

  hJSONRPC.SetReply(0, Application.Id)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=domotiga.uptime
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DomotiGa_Uptime()

  hJSONRPC.SetReply(0, Main.GetGlobalVar("Program_Uptime"))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=domotiga.version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DomotiGa_Version()

  hJSONRPC.SetReply(0, Main.sProgramVersion)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_List()

  Dim vValue As Variant
  Dim cValue As New Collection

  For Each vValue In Main.GlobalVar
    cValue[Main.GlobalVar.Key] = vValue
  Next

  hJSONRPC.SetReply(0, cValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_Get(cData As Collection)

  Dim vValue As Variant

  If TypeOf(cData["name"]) = gb.String Then
    If Main.GlobalVar.Exist(cData["name"]) Then
      vValue = Main.GlobalVar[cData["name"]]
      hJSONRPC.SetReply(0, vValue)
    Else
      hJSONRPC.SetReply(-1, Null)
    Endif
  Else
    If $bDebug Then
      ' TODO
      Main.WriteDebugLog(LogLabel & "ERROR: globalvar.get param 'name' missing or not string")
    Endif

    hJSONRPC.SetReply(-32602, Null)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_Set(cData As Collection)

  Dim vValue As Variant

  If TypeOf(cData["name"]) = gb.String And If cData["value"] Then
    If Main.GlobalVar.Exist(cData["name"]) Then
      vValue = Main.SetGlobalVar(cData["name"], cData["value"])
      hJSONRPC.SetReply(0, True)
    Else
      hJSONRPC.SetReply(-1, Null)
    Endif
  Else
    If $bDebug Then
      ' TODO
    Endif

    hJSONRPC.SetReply(-32602, Null)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.del
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_Del(cData As Collection)

  Dim vValue As Variant

  If TypeOf(cData["name"]) = gb.String Then
    Try Main.DelGlobalVar(cData["name"])
    hJSONRPC.SetReply(0, True)
  Else
    If $bDebug Then
      ' TODO
    Endif

    hJSONRPC.SetReply(-32602, Null)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=device.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Device_Set(cData As Collection)

  ' The deviceid has to be an integer and value a string
  If Check_Number(cData["deviceid"]) And If TypeOf(cData["value"]) = gb.String Then

    If Devices.SetDevice(cData["deviceid"], cData["value"]) Then
      hJSONRPC.SetReply(0, True)
    Else
      hJSONRPC.SetReply(0, False)
    Endif

  Else
    If $bDebug Then
      ' TODO
    Endif

    hJSONRPC.SetReply(-32602, Null)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=device.list
' Returns: X, Y, Z
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Device_List(cData As Collection)

  Dim cValue As New Collection
  Dim aValue As New Collection[]
  Dim rResult, rResultLocation As Result
  Dim iCnt As Integer
  Dim sStatusIcon, sLastseen, sValue1, sValue2, sValue3, sValue4 As String

  rResult = Devices.GetDeviceList("")

  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No devices found in table 'devices'!")
    Return
  Endif

  For iCnt = 0 To rResult.Max

    ' status icon
    If Not IsNull(rResult!onicon) Or Not IsNull(rResult!officon) Then
      If UCase$(rResult!value) = "ON" Or UCase$(rResult!value) = "OPEN" Or UCase$(rResult!value) = "MOTION" Then
        sStatusIcon = rResult!onicon
      Else
        sStatusIcon = rResult!officon
      Endif
    Else
      sStatusIcon = ""
    Endif

    ' last seen
    Try sLastseen = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    If Error Then
      sLastSeen = "Never"
    Endif

    Try sValue1 = Devices.CorrectValue(rResult!value, rResult!correction, rResult)
    Try sValue2 = Devices.CorrectValue(rResult!value2, rResult!correction2, rResult)
    Try sValue3 = Devices.CorrectValue(rResult!value3, rResult!correction3, rResult)
    Try sValue4 = Devices.CorrectValue(rResult!value4, rResult!correction4, rResult)

    cValue = New Collection
    cValue["deviceid"] = rResult!id 
    cValue["name"] = ToEmptyString(rResult!name)
    cValue["location"] = ToEmptyString(rResult!location_name)
    cValue["icon"] = ToEmptyString(sStatusIcon) 
    cValue["value1"] = ToEmptyString(sValue1)
    cValue["label1"] = ToEmptyString(rResult!label)
    cValue["value2"] = ToEmptyString(sValue2)
    cValue["label2"] = ToEmptyString(rResult!label2)
    cValue["value3"] = ToEmptyString(sValue3)
    cValue["label3"] = ToEmptyString(rResult!label3)
    cValue["value4"] = ToEmptyString(sValue4)
    cValue["label4"] = ToEmptyString(rResult!label4)
    cValue["lastseen"] = ToEmptyString(sLastSeen)
    cValue["dimable"] = rResult!dimable
    cValue["switchable"] = rResult!switchable
    cValue["batterystatus"] = ToEmptyString(rResult!batterystatus)

    aValue.Add(cValue)

    rResult.MoveNext
  Next

  hJSONRPC.SetReply(0, aValue)

End
