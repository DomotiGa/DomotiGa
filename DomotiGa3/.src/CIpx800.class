' Gambas class file

' Description:
' CIPX800.class
' Provide access to IPX800 devices.

' Development Status:
' Unstable.

' Links:
' http://gce-electronics.com/fr/

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Ipx800"
Public PluginFriendlyName As String = "IPX800"
Public PluginVersion As String = "2.00"
Public PluginAuthor As String = "ErrNo"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 9

Public KeyName As String
Public LogLabel As String = "[Ipx800] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sUsername As String
Private $sPassword As String
Private $iPoll As Integer
Private $bDebug As Boolean

' Interface objects
Public hMySocket As CSocket

Private $sMsgData As String

Public tPoll As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cmd queue stuff, only needed if you need to send data back to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private cQueue As New Collection    ' command buffer
Private bInterfaceBusy As Boolean   ' waiting for delay timer to finish
Public tIpx800Busy As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sUsername = cPl.Settings["username"]
  $sPassword = cPl.Settings["password"]
  $iPoll = cPl.Settings["poll"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Ipx800 Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPoll_Timer()

  Dim iCnt As Integer

  QueueCommand("GetOutputs")
  QueueCommand("GetInputs")

  For iCnt = 1 To 4
    QueueCommand("GetAn" & iCnt)
  Next

  For iCnt = 1 To 3
    QueueCommand("GetCount" & iCnt)
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = gb.String
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host/close serial port, close plugin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hMySocket.Close

  ' try stop running timers
  StopTimers()

  WriteLog(PluginFriendlyName & " connection closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

  Try tIpx800Busy.Stop
  Try tPoll.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run after succesfull connect
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' Empty internal buffer
  $sMsgData = ""

  ' define timer for interface busy
  tIpx800Busy = New Timer As "tIpx800Busy"
  tIpx800Busy.Stop

  ' start poll timer for read status
  If $iPoll > 0 Then
    tPoll = New Timer As "tPoll"
    tPoll.Delay = $iPoll * 1000 ' multiply for seconds
    tPoll.Start
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port. vVar is gb.String
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  $sMsgData &= vVar

  ' Check for linefeed and process data
  While InStr($sMsgData, gb.Lf)
    ProcessReceivedPacket(Mid($sMsgData, 1, InStr($sMsgData, gb.Lf)))
    $sMsgData = Mid($sMsgData, InStr($sMsgData, gb.Lf) + 1)
  Wend

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sData As String)

  Dim aData As String[]
  Dim aMessage, aAddress As String[]
  Dim sLine As String
  Dim iAddress, iValue As Integer
  Dim sValue As String
  Dim rResult As Result

  ' parse incoming data here, extract values, identification/addresses
  ' you can ofcourse also feed bytes from _Read to ProcessData(bByte as byte)
  ' it depends on type of data received
  aData = Split(sData, "\r\n")
  For Each sLine In aData
    If sLine <> "" Then
      If $bDebug Then WriteDebugLog("Received [" & sLine & "]")
      'manage GetOutputs return
      aMessage = Scan(sLine, "GetOutputs=*")
      If aMessage.Count = 1 Then
        rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
        If rResult And If rResult.Available Then
          For Each rResult
            If Devices.FindInstanceForDevice(rResult!id) = Instance Then
              aAddress = Scan(rResult!address, "Output|*")
              If aAddress.Count = 1 Then
                iAddress = aAddress[0]
                iValue = Mid(aMessage[0], iAddress, 1)
                If iValue = 1 Then
                  sValue = "On"
                Else
                  sValue = "Off"
                Endif
                Devices.ValueUpdate(rResult!id, 1, sValue)
              Endif
            Endif
          Next
        Endif
      Endif

      ' manage GetInputs return
      aMessage = Scan(sLine, "GetInputs=*")
      If aMessage.Count = 1 Then
        rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
        If rResult And If rResult.Available Then
          For Each rResult
            If Devices.FindInstanceForDevice(rResult!id) = Instance Then
              aAddress = Scan(rResult!address, "Input|*")
              If aAddress.Count = 1 Then
                iAddress = aAddress[0]
                iValue = Mid(aMessage[0], iAddress, 1)
                If iValue = 1 Then
                  sValue = "On"
                Else
                  sValue = "Off"
                Endif
                Devices.ValueUpdate(rResult!id, 1, sValue)
              Endif
            Endif
          Next
        Endif
      Endif

      ' manage GetCount return
      aMessage = Scan(sLine, "GetCount*=*")
      If aMessage.Count = 2 Then
        rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
        If rResult And If rResult.Available Then
          For Each rResult
            If Devices.FindInstanceForDevice(rResult!id) = Instance Then
              aAddress = Scan(rResult!address, "Count|*")
              If aAddress.Count = 1 Then
                iAddress = aAddress[0]
                If iAddress = aMessage[0] Then
                  iValue = aMessage[1]
                  Devices.ValueUpdate(rResult!id, 1, iValue)
                Endif
              Endif
            Endif
          Next
        Endif
      Endif

      ' manage GetAn return
      aMessage = Scan(sLine, "GetAn*=*")
      If aMessage.Count = 2 Then
        rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
        If rResult And If rResult.Available Then
          For Each rResult
            If Devices.FindInstanceForDevice(rResult!id) = Instance Then
              aAddress = Scan(rResult!address, "Analogic|*")
              If aAddress.Count = 1 Then
                iAddress = aAddress[0]
                If iAddress = aMessage[0] Then
                  iValue = aMessage[1]
                  Devices.ValueUpdate(rResult!id, 1, iValue)
                Endif
              Endif
            Endif
          Next
        Endif
      Endif
    Endif
  Next

Catch ' some errors
  WriteDebugLog("ERROR: while parsing data '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' domotiga want to control a device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sBuffer As String
  Dim bOK As Boolean = False
  Dim aScan As String[]

  ' create data packet to send, use supplied address and cmd
  sBuffer = "Set"

  aScan = Scan(sAddress, "*|*")
  If aScan.count = 2 Then
    If aScan[0] = "Output" Then
      If Len(aScan[1]) = 2 Then
        sBuffer = sBuffer & aScan[1]
        Select Case sCmd
          Case "On"
            sBuffer = sBuffer & "1"
            bOK = True
          Case "Off"
            sBuffer = sBuffer & "0"
            bOK = True
          Case Else
            WriteDebugLog("ERROR: Only switch options exists for Ipx800 outputs!")
        End Select
      Else
        WriteDebugLog("ERROR: Not an Ipx800 valid address: 2 digits needed!")
      Endif
    Else
      WriteDebugLog("ERROR: Not an Ipx800 output!")
    Endif
  Endif

  ' and send it to cmdbuffer
  If bOK Then
    QueueCommand(sBuffer)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sCommand As String)

  ' add command to queue
  cQueue.Add(sCommand, Rnd)

  ' if controller is not busy process it
  If Not bInterfaceBusy Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DoQueue()

  Dim sPacket As String

  For Each sPacket In cQueue
    WriteCommand(sPacket, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' interface busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tIpx800Busy_Timer()

  bInterfaceBusy = False
  tIpx800Busy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then WriteDebugLog("Sending command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send commands to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteCommand(sData As String, sKey As String)

  If $bDebug Then WriteDebugLog("> " & sData)

  ' send the message to the tcp stream
  hMySocket.Write(sData)

  ' remove sent command from queue
  cQueue.Remove(sKey)

  tIpx800Busy.Delay = 50 ' 50mS (initial test value)
  tIpx800Busy.Start
  bInterfaceBusy = True

End

