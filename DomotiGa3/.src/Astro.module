' Gambas module file

' Description:
' Astro.module
' Calculate Sun and Moon related things.

' Development Status:
' Ported by Dali from link below.

' Links:
' http://williams.best.vwh.net/sunrise_sunset_algorithm.htm
' http://www.timeanddate.com/worldclock/astronomy.html?n=1382

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public Function CalcSunTimes(lon As Float, lat As Float, timezone As Float, isRise As Boolean, twilight As Integer) As String

  Dim n, lnghour, m, l, ra, lquadrant, raquadrant, sindec, cosdec, coshour, zenith, h, t, ut, ihour, imin, gTime As Float
  Dim localt As Integer

  ' twilight setting
  If (twilight = 0) Then zenith = 90 + (50 / 60) ' effective sunrise/sunset
  If (twilight = 1) Then zenith = 96 ' civil twilight (brightest)
  If (twilight = 2) Then zenith = 102 ' nautical twilight
  If (twilight = 3) Then zenith = 108 ' astronomical twilight (darkest)

  ' first calculate the day of the year
  n = DateDiff("01/01/" & Year(Now()), Now(), gb.day)

  ' convert the longitude to hour value and calculate an approximate time
  lnghour = lon / 15
  If (isRise) Then
    t = n + ((6 - lnghour) / 24) ' looking for sunrise
  Else
    t = n + ((18 - lnghour) / 24) ' looking for sunset
  Endif

  ' calculate the Sun's mean anomaly
  m = (0.9856 * t) - 3.289

  ' calculate the Sun's true longitude
  l = m + (1.916 * Sin(Rad(m))) + (0.020 * Sin(Rad(2 * m))) + 282.634
  ' L potentially needs to be adjusted into the range [0,360] by adding/subtracting 360
  If (l < 0) Then
    l += 360
  Else If (l > 360) Then
    l -= 360
  Endif

  ' calculate the Sun's right ascension
  ra = Deg(ATan(0.91764 * Tan(Rad(l))))
  ' RA potentially needs to be adjusted into the range [0,360] by adding/subtracting 360
  If (ra < 0) Then
    ra += 360
  Else If (ra > 360) Then
    ra -= 360
  Endif

  ' right ascension value needs to be in the same quadrant as L
  lquadrant = Fix(l / 90) * 90
  raquadrant = Fix(ra / 90) * 90
  ra = ra + (lquadrant - raquadrant)

  ' right ascension value needs to be converted into hours
  ra = ra / 15

  ' calculate the Sun's declination
  sindec = 0.39782 * Sin(Rad(l))
  cosdec = Cos(Rad(Deg(ASin(sindec))))

  ' calculate the Sun's local hour angle
  coshour = (Cos(Rad(zenith)) - (sindec * Sin(Rad(lat)))) / (cosdec * Cos(Rad(lat)))

  ' this is not working properly, trying to figure out why...
  If isRise And If (coshour > 1) Then Print "Midnight sun"
  If Not isRise And If (coshour < -1) Then Print "Polar night"

  ' finish calculating H and convert into hours
  If (isRise) Then
    h = 360 - Deg(ACos(coshour)) ' looking for sunrise
  Else
    h = Deg(ACos(coshour)) ' looking for sunset
  Endif
  h = h / 15

  ' calculate local mean time of rising/setting
  t = h + ra - (0.06571 * t) - 6.622

  ' adjust back to UTC
  ut = t - lnghour
  ' UT potentially needs to be adjusted into the range [0,24] by adding/subtracting 24
  If (ut < 0) Then
    ut += 24
  Else If (ut > 24) Then
    ut -= 24
  Endif

  ' convert UT value to local Time zone of latitude / longitude
  ' convert hours to seconds
  ' add seconds from Jan 1st, 1970 until todays date to convert value to unix time (gambas doesnt calculate time in the unix way)
  localt = Int((CFloat(Date(Year(Now()), Month(Now()), Day(Now))) - CFloat(Date(1970, 1, 1))) * 86400) + (ut + timezone) * 60 * 60

  ' add unix time to Jan 1st, 1970 to get gambas time
  gTime = DateAdd(Date(1970, 1, 1), gb.Second, localt)

  ' get hour and minute for sunset/sunrise
  ihour = Hour(gTime)
  imin = Minute(gTime)

  Return Format(ihour, "0#") & ":" & Format(imin, "0#")

End

Public Sub CalcMoonPhase()

  Dim yy, mm, k1, k2, k3, jd, y, d, m As Integer
  Dim ip, dp, np, rp As Float
  Dim ag As Float ' moon's age
  Dim di As Float ' moon's distance in earth radii
  Dim la As Float ' moon's ecliptic latitude
  Dim lo As Float ' moon's ecliptic longitude
  Dim phase, zodiac As String

  y = Year(Now)
  m = Month(Now)
  d = Day(Now)

  ' calculate the Julian Date at 12h UT
  YY = Y - Int((12 - M) / 10)
  MM = M + 9
  If (MM >= 12) Then MM = MM - 12

  K1 = Int(365.25 * (YY + 4712))
  K2 = Int(30.6 * MM + 0.5)
  K3 = Int(Int((YY / 100) + 49) * 0.75) - 38

  JD = K1 + K2 + D + 59 ' for dates in Julian calendar
  If (JD > 2299160) Then JD = JD - K3 ' for Gregorian calendar

  ' calculate moon's age in days
  IP = normalize((JD - 2451550.1) / 29.530588853)
  AG = IP * 29.53

  If (AG < 1.84566) Then
    Phase = ("New")
  Else If (AG < 5.53699) Then
    Phase = ("Evening crescent")
  Else If (AG < 9.22831) Then
    Phase = ("First quarter")
  Else If (AG < 12.91963) Then
    Phase = ("Waxing gibbous")
  Else If (AG < 16.61096) Then
    Phase = ("Full")
  Else If (AG < 20.30228) Then
    Phase = ("Waning gibbous")
  Else If (AG < 23.99361) Then
    Phase = ("Last quarter")
  Else If (AG < 27.68493) Then
    Phase = ("Morning crescent")
  Else
    Phase = ("New")
  Endif

  IP = IP * 2 * Pi ' convert phase to radians

  ' calculate moon's distance
  DP = 2 * Pi * normalize((JD - 2451562.2) / 27.55454988)
  DI = 60.4 - 3.3 * Cos(DP) - 0.6 * Cos(2 * IP - DP) - 0.5 * Cos(2 * IP)

  ' calculate moon's ecliptic latitude
  NP = 2 * Pi * normalize((JD - 2451565.2) / 27.212220817)
  LA = 5.1 * Sin(NP)

  ' calculate moon's ecliptic longitude
  RP = normalize((JD - 2451555.8) / 27.321582241)
  LO = 360 * RP + 6.3 * Sin(DP) + 1.3 * Sin(2 * IP - DP) + 0.7 * Sin(2 * IP)

  If (LO < 33.18) Then
    Zodiac = ("Pisces")
  Else If (LO < 51.16) Then
    Zodiac = ("Aries")
  Else If (LO < 93.44) Then
    Zodiac = ("Taurus")
  Else If (LO < 119.48) Then
    Zodiac = ("Gemini")
  Else If (LO < 135.30) Then
    Zodiac = ("Cancer")
  Else If (LO < 173.34) Then
    Zodiac = ("Leo")
  Else If (LO < 224.17) Then
    Zodiac = ("Virgo")
  Else If (LO < 242.57) Then
    Zodiac = ("Libra")
  Else If (LO < 271.26) Then
    Zodiac = ("Scorpio")
  Else If (LO < 302.49) Then
    Zodiac = ("Sagittarius")
  Else If (LO < 311.72) Then
    Zodiac = ("Capricorn")
  Else If (LO < 348.58) Then
    Zodiac = ("Aquarius")
  Else
    Zodiac = ("Pisces")
  End If

  ' so longitude is not greater than 360!
  If (LO > 360) Then LO = LO - 360

  Main.MoonPhase = Phase
  Main.MoonZodiac = Zodiac
  Main.MoonAge = Round(ag, -2)
  Main.MoonDistance = Round(di, -2)
  Main.MoonLatitude = Round(la, -2)
  Main.MoonLongitude = Round(lo, -2)
  Main.MoonIsLeapYear = isleapyear(y)

End

Private Function normalize(v As Float) As Float

  v = v - Int(v)
  If (v < 0) Then v = v + 1
  Return v

End

Private Function isleapyear(y As Integer) As Boolean

  Dim x, w, z As Integer

  x = Int(y - 4 * Int(y / 4))
  w = Int(y - 100 * Int(y / 100))
  z = Int(y - 400 * Int(y / 400))

  If (x = 0) Then ' possible leap Year
    If ((w = 0) & (Not z = 0))
      Return False ' not a leap Year
    Else
      Return True ' is leap Year
    End If
  End If
  Return False

End
