' Gambas module file

' Description:
' RRDTool.module
' Support for RRDTool graphing.

' Development Status:
' Working, make hardcoded heartbeat and step values configurable, need better error checking.
' Maybe create separate graphs table in db.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "RDDTool"
Public PluginFriendlyName As String = "RDDTool"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[RDDTool] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iPollTime As Integer
Private $sRRA As String
Private $bRRDToolDebug As Boolean

Public tRRDTool As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance 

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iPollTime = cPl.Settings["polltime"]
  $sRRA = cPl.Settings["rra"]
  $bRRDToolDebug = cPl.Settings["debug"]

  ' Initialize 
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tRRDTool.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check for/create missing rrd files and start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for RRDTool
  tRRDTool = New Timer As "tRRDTool"
  tRRDTool.Delay = Main.iRRDToolPollTime * 1000 ' multiply for seconds
  tRRDTool.Start

  ' create missing db's
  CreateRRDs()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRRDTool_Timer()

  UpdateRRDs() ' update rrd values every Polltime seconds

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete rrd file belonging to device or all rdd files
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteRRD(iId As Integer)

  Dim sCmd As String

  If iId >= 0 Then
    sCmd = "rm -f " & GetRRDPath(iId)
    If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Deleting RRD database with '" & sCmd & "'")
    Exec ["rm", "-f", GetRRDPath(iId)]
  Else
    If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Delete rrd databases with '" & "rm -f " & Main.sBaseDir &/ "rrd/*.rrd'")
    Exec ["rm", "-f", Main.sBaseDir &/ "rrd/*.rrd"]
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return rrd database pathname
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetRRDPath(iId As Integer) As String

  Return Main.sBaseDir &/ "rrd" &/ iId & ".rrd"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return rrd database pathname
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetOldRRDPath(sDeviceName As String) As String

  Return Main.sBaseDir &/ "rrd" &/ GetRRDName(sDeviceName) & ".rrd"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return rrd database name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetRRDName(sDeviceName As String) As String

  Dim sRRDName As String

  sRRDName = LCase(Replace$(sDeviceName, " ", ""))
  sRRDName = Replace$(sRRDName, "/", "")
  sRRDName = Replace$(sRRDName, "#", "")
  sRRDName = Replace$(sRRDName, ".", "")
  Return sRRDName

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' rename rrd
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RenameRRD(sOld As String, sNew As String) As String

  Exec ["mv", sOld, sNew]

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete all graphic images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteAllGraphs()

  If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Delete rrd graphs with '" & "rm -f " & Main.sBaseDir &/ "rrd/graphs/*.png'")
  Exec ["rm", "-f", Main.sBaseDir &/ "rrd/graphs/*.png"]

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices with rrd boolean enabled and
' check for existance of rrd file, create one if missing
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateRRDs(Optional iId As Integer)

  Dim rDevice As Result
  Dim cDeviceIds As Integer[] = New Integer[]

  If Not Main.bRRDToolEnabled Then Return

  If iId Then
    CreateRRD(iId)
    Return
  Endif

  Try rDevice = Devices.GetDevicesAndValues(["enabled": True, "rrd": True])
  If rDevice Then
    If Not Error Then
      If rDevice.Count Then
        For Each rDevice
          If Not cDeviceIds.Exist(rDevice!device_id) Then
            cDeviceIds.Add(rDevice!device_id)
            CreateRRD(rDevice!device_id)
          Endif
        Next
      Else
        If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No device(s) with RRD enabled found!")
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices with rrd boolean enabled and
' check for existance of rrd file, create one if missing
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateRRD(iId As Integer)

  Dim rDevice As Result
  Dim sRRD, sRRDOld, sRRDCmd As String

  If Not Main.bRRDToolEnabled Then Return

  Try rDevice = Devices.GetDevicesAndValues(["device_id": iId, "rrd": True])

  If Not Error Then
    If rDevice.Count >= 1 Then
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Device with address '" & rDevice!device_address & "' named '" & rDevice!device_name & "' and id '" & rDevice!device_id & "' has RRD enabled.")
      sRRD = GetRRDPath(rDevice!device_id)
      If Not Exist(sRRD) Then
        sRRDOld = GetOldRRDPath(rDevice!device_name)
        If Exist(sRRDOld) Then
          RenameRRD(sRRDOld, sRRD)
          If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Old RRD naming found '" & sRRDOld & "', renamed to device id format '" & sRRD & "'.")
        Else
          If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Creating new RRD file '" & sRRD & "'.")
          sRRDCmd = "rrdtool create " & sRRD & " -s " & Main.iRRDToolPollTime & " "
          For Each rDevice
            If rDevice!device_value_valuerrddsname Then sRRDCmd = sRRDCmd & "DS:" & rDevice!device_value_valuerrddsname & ":" & rDevice!device_value_valuerrdtype & ":600:U:U "
          Next
          sRRDCmd &= Main.sRRDToolRRA
          If Main.bRRDToolDebug Then
            Main.WriteDebugLog(LogLabel & "" & sRRDCmd)
          Else
            sRRDCmd &= " 2>&1 >/dev/null"
          Endif
          Shell sRRDCmd Wait
        Endif
      Endif
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No device(s) with RRD enabled found!")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph boolean enabled and create graphs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateGraphs(sGroup As String, sTime As String)

  Dim rDevice As Result
  Dim cDeviceIds As Integer[] = New Integer[]

  If Not Main.bRRDToolEnabled Then Return

  Try rDevice = Devices.GetDevicesAndValues(["enabled": True, "rrd": True, "graph": True, "groups": ["%" & sGroup & "%"]])

  If Not Error Then
    If rDevice.Count Then
      For Each rDevice
        If Not cDeviceIds.Exist(rDevice!device_id) Then
          cDeviceIds.Add(rDevice!device_id)
          CreateGraph(rDevice!device_id, sTime)
        Endif
      Next
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No device(s) with simple graphing enabled found!")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update graphs for device with iId and timeframe sTime
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateGraph(iId As Integer, sTime As String)

  Dim rDevice As Result
  Dim sRRD, sRRDCmd, sGraphImage, sRRDName As String

  If Not Main.bRRDToolEnabled Then Return

  Try rDevice = Devices.GetDevicesAndValues(["enabled": True, "rrd": True, "graph": True, "device_id": iId])

  If Not Error Then
    If rDevice.Count >= 1 Then
      sRRDName = rDevice!device_id
      sRRD = Main.sBaseDir &/ "rrd" &/ sRRDName & ".rrd"
      For Each rDevice
        If rDevice!device_value_valuerrddsname Then
          If Main.bRRDToolDebug Then
            Main.WriteDebugLog(LogLabel & "Device with address '" & rDevice!device_address & "' named '" & rDevice!device_name & "' has graphing enabled for " & rDevice!device_value_valuerrddsname & ".")
          Endif
          sGraphImage = Main.sBaseDir &/ "rrd/graphs/" &/ sRRDName & "-" & rDevice!device_value_valuerrddsname & "-" & sTime & ".png"
          sRRDCmd = "rrdtool graph " & sGraphImage & " -w " & Main.iRRDToolWidth & " -h " & Main.iRRDToolHeight & " --lazy --start -" & sTime & " -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t '" & rDevice!device_name & " " & Main.Caps(rDevice!device_value_valuerrddsname) & "' -v '" & rDevice!device_value_units & "' DEF:" & rDevice!device_value_valuerrddsname & "=" & sRRD & ":" & rDevice!device_value_valuerrddsname & ":AVERAGE LINE1:" & rDevice!device_value_valuerrddsname & "#00FF00:'" & Main.Caps(rDevice!device_value_valuerrddsname) & "'"
          sRRDCmd &= " GPRINT:" & rDevice!device_value_valuerrddsname & ":MIN:'Min\\:%1.1lf' GPRINT:" & rDevice!device_value_valuerrddsname & ":MAX:'Max\\:%1.1lf' GPRINT:" & rDevice!device_value_valuerrddsname & ":AVERAGE:'Avg\\:%1.1lf' GPRINT:" & rDevice!device_value_valuerrddsname & ":LAST:'Last\\:%1.1lf'"
          If Main.bRRDToolDebug Then
            Main.WriteDebugLog(LogLabel & "" & sRRDCmd)
          Else
            sRRDCmd &= " 2>&1 >/dev/null"
          Endif
          Shell sRRDCmd Wait
        Endif
      Next
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "Device with id " & iId & " not found!")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create extended graphs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateExtGraphs(sGroup As String, sTime As String)

  Dim rGraph As Result

  Try rGraph = Main.hDB.Exec("SELECT id FROM graphs WHERE groups LIKE &1 AND enabled is TRUE", "%" & sGroup & "%")

  If Not Error Then
    If rGraph.Count Then
      For Each rGraph
        GenerateGraph(rGraph!id, sTime) ' Can we ignore the output?
      Next
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No enabled extended graphs found in group '" & sGroup & "'!")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph boolean enabled, return the names of their graphic images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Graphs(sGroup As String) As String
  
  Dim rDevice, rGraph As Result
  Dim sGraphs, sRRDName As String
  Dim cDeviceIds As Integer[] = New Integer[]

  Try rDevice = Devices.GetDevicesAndValues(["enabled": True, "rrd": True, "graph": True, "groups": ["%" & sGroup & "%"]])

  If Not Error Then
    If rDevice.Count Then
      For Each rDevice
        If Not cDeviceIds.Exist(rDevice!device_id) Then
          cDeviceIds.Add(rDevice!device_id)
          sGraphs &= Graph(rDevice!device_id)
        Endif
      Next
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No device(s) with simple graphing enabled found in group '" & sGroup & "'!")
    Endif
  Endif

  Try rGraph = Main.hDB.Exec("SELECT * FROM graphs WHERE groups LIKE &1 AND enabled is TRUE", "%" & sGroup & "%")
  If Not Error Then
    If rGraph.Count Then
      For Each rGraph
        sRRDName = GetRRDName(rGraph!name)
        sGraphs &= sRRDName & "|"
        If Not Main.bRRDToolDebug Or If Not Main.bServer Then Continue
        Main.WriteDebugLog(LogLabel & "Extended Graph with name '" & rGraph!name & "' is in group named '" & sGroup & "'.")
        Main.WriteDebugLog(LogLabel & "Graph: " & Main.sBaseDir &/ "rrd/graphs/" &/ sRRDName & ".png")
      Next
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No enabled extended graphs found in group '" & sGroup & "'!")
    Endif
  Endif
  ' return string with all graph image names in this group
  Return sGraphs

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device by id, return the names of their graphic images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Graph(iId As Integer) As String

  Dim rDevice As Result
  Dim sGraphs, sRRDName As String

  Try rDevice = Devices.GetDevicesAndValues(["enabled": True, "rrd": True, "device_id": iId])

  If Not Error Then
    If rDevice.Count >= 1 Then
      sRRDName = rDevice!device_id
      For Each rDevice
        If rDevice!device_value_valuerrddsname Then
          sGraphs &= sRRDName & "-" & rDevice!device_value_valuerrddsname & "|"
          If Not Main.bRRDToolDebug Or If Not Main.bServer Then Continue
          Main.WriteDebugLog(LogLabel & "Device with address '" & rDevice!device_address & "' named '" & rDevice!device_name & " has graphing enabled for '" & rDevice!device_value_valuerrddsname & "'.")
          Main.WriteDebugLog(LogLabel & "Graph: " & Main.sBaseDir &/ "rrd/graphs/" &/ sRRDName & "-" & rDevice!device_value_valuerrddsname & ".png")
        Endif
      Next
    Else
      If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No device(s) with simple graphing enabled found for device with id '" & iId & "'!")
    Endif
  Endif

  Return sGraphs

End

Public Sub CreateUpdateValue(sValue As String, sCorrection As String, iDeviceId As Integer, sValueRRDsType As String) As String

  If CheckNumber(sValue) = False Then
    Select UCase(sValue)
      Case "ON", "MOTION", "OPEN"
        Return 1
      Case "OFF", "NO MOTION", "CLOSED"
        Return 0
      Case Else
        Return "U"
    End Select
  Else
    If sValueRRDsType = "COUNTER" Then
      Return Format(Devices.CorrectValue(sValue, sCorrection, iDeviceId), "#")
    Else
      Return CFloat(Devices.CorrectValue(Replace(sValue, ",", ".", gb.String), sCorrection, iDeviceId))
    Endif
  Endif

End

Public Sub CheckNumber(sValue As String) As Boolean

  Try Return TypeOf(CFloat(Replace(sValue, ",", "."))) <= gb.Float 
  If Error Then Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph enabled, and update rrd files with device values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateRRDs()

  Dim rDevice As Result
  Dim sSQL As String

  sSQL = "SELECT DISTINCT devices.id AS device_id FROM devices INNER JOIN device_values ON devices.id = device_values.device_id"
  sSQL &= " WHERE enabled Is TRUE And rrd Is TRUE"
  Try rDevice = Main.hDB.Exec(sSQL)
  If rDevice And If rDevice.Count Then
    For Each rDevice
      UpdateRRD(rDevice!device_id)
    Next
  Else
    If $bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No devices found that have rrd enable and are enabled")
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices with graph enabled, and update rrd files with device values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateRRD(iId As Integer)

  Dim rDevice As Result
  Dim sRRDCmd, sRRDName As String

  Try rDevice = Devices.GetDevicesAndValues(["device_id": iId, "rdd": True])
  If rDevice.Count >= 1 Then
    sRRDName = GetRRDPath(rDevice!device_id)
    sRRDCmd = "N"
    For Each rDevice
      If rDevice!device_value_valuerrddsname Then sRRDCmd &= ":" & CreateUpdateValue(rDevice!device_value_value, rDevice!device_value_correction, rDevice!device_id, rDevice!device_value_valuerrdtype)
    Next
    If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "rrdtool update " & sRRDName & " " & sRRDCmd)
    Exec ["rrdtool", "update", sRRDName, sRRDCmd]
  Else
    If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No device(s) with RRD enabled found!")
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

' Generate an extended graph returning the .png name or "" when a problem occured
Public Sub GenerateGraph(iGraph_id As Integer, sRange As String) As String

  Dim rGraph_head, rGraph_data, rGraph_print As Result
  Dim sRRDCmd, sRRD_graph, sRRDCmd_Main, sRRDCmd_DEF, sRRDCmd_SHIFT, sRRDCmd_CDEF, sRRDCmd_VDEF, sRRDCmd_GPRINT, sRRDCmd_GPRINT_Title, sRRRCmd_TIMESTAMP As String
  Dim sRRDCmd_Graph, sGraph_trend, sGraph_shift, sRRDName, sPNG, sResult As String
  Dim Graph_Height, Graph_Width, Graph_Color_Background As Integer

  Try rGraph_print = Main.hDB.Exec("SELECT * FROM graphs WHERE id = &1", iGraph_id)
  If Error Or (rGraph_print.Count = 0) Then
    If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No graph with id = " & Str(iGraph_id))
    Return ""
  Endif

  sRRDName = GetRRDName(rGraph_print!name)
  sPNG = sRRDName & "-" & sRange & ".png"
  sRRDCmd_Main = "rrdtool graph " & Main.sBaseDir &/ "rrd/graphs/" &/ sPNG
  sRRDCmd_Main &= " --lazy --start end-" & sRange & " -a PNG --slope-mode --font DEFAULT:7: --watermark 'Domotiga v" & Main.sProgramVersion & "'"

  sRRDCmd_Main &= " --width " & rGraph_print!graph_width
  sRRDCmd_Main &= " --height " & rGraph_print!graph_height
  sRRDCmd_Main &= " -c BACK#" & Hex$(rGraph_print!color_background, 6)
  sRRDCmd_Main &= " -c CANVAS#" & Hex$(rGraph_print!color_canvas, 6)
  sRRDCmd_Main &= " -c SHADEA#" & Hex$(rGraph_print!color_shadea, 6)
  sRRDCmd_Main &= " -c SHADEB#" & Hex$(rGraph_print!color_shadeb, 6)
  sRRDCmd_Main &= " -c GRID#" & Hex$(rGraph_print!color_grid, 6)
  sRRDCmd_Main &= " -c MGRID#" & Hex$(rGraph_print!color_majorgrid, 6)
  sRRDCmd_Main &= " -c FONT#" & Hex$(rGraph_print!color_font, 6)
  sRRDCmd_Main &= " -c AXIS#" & Hex$(rGraph_print!color_axis, 6)
  sRRDCmd_Main &= " -c FRAME#" & Hex$(rGraph_print!color_frame, 6)
  sRRDCmd_Main &= " -c ARROW#" & Hex$(rGraph_print!color_arrow, 6)
  sRRDCmd_Main &= " --title='" & rGraph_print!graph_title & "'"
  sRRDCmd_Main &= " --vertical-label '" & rGraph_print!unit & "'"
  ' RRDTool 2.4 sRRDCmd &= " " & grid_type(rGraph_print.gridtype)

  Graph_Height = rGraph_print!graph_height + 95
  Graph_Width = rGraph_print!graph_width + 95
  Graph_Color_Background = rGraph_print!color_background

  If rGraph_print!logarithmic_scale = True Then
    sRRDCmd_Main &= " --logarithmic --units=si"
  Endif
  ' sRRDCmd_Main &= " --right-axis " &  1000:0

  Try rGraph_head = Main.hDB.Exec("SELECT max(graph_max) as head_max, max(graph_min) as head_min, max(graph_avg) as head_avg, max(graph_last) as head_last FROM graph_data WHERE graph_id = &1;", iGraph_id)
  If Not Error Then
    sRRDCmd_GPRINT_Title = " COMMENT:'\\s' COMMENT:'" & Space(22)
    If rGraph_head!head_min = True Then
      sRRDCmd_GPRINT_Title &= "' COMMENT:'Min" & Space(2)
    Endif
    If rGraph_head!head_max = True Then
      sRRDCmd_GPRINT_Title &= "' COMMENT:'Max" & Space(2)
    Endif
    If rGraph_head!head_avg = True Then
      sRRDCmd_GPRINT_Title &= "' COMMENT:'Avg" & Space(2)
    Endif
    If rGraph_head!head_last = True Then
      sRRDCmd_GPRINT_Title &= "' COMMENT:'Last"
    Endif
    sRRDCmd_GPRINT_Title &= "' COMMENT:'\\l' "
  Endif

  Try rGraph_data = Main.hDB.Exec("SELECT * FROM graph_data WHERE graph_id = &1", iGraph_id)
  If Not Error Then
    If rGraph_head.Count Then
      For Each rGraph_data
        sGraph_trend = ""
        sGraph_shift = ""

        sRRD_graph = Main.sBaseDir &/ "rrd" &/ GetRRDId(rGraph_data!graph_devicename) & ".rrd"
        If rGraph_data!graph_trend = True Then
          sGraph_trend = "trend_"
        Endif
        If rGraph_data!graph_timeshift = True Then
          sGraph_shift = "shift_"
        Endif

        '# timeshift :
        '# DEF:timeshift_name=rrd:name:AVERAGE:start={int}:end={int}
        '# SHIFT:trend_name:{int}
        '
        '# trend :
        '# DEF:trend_name=rrd:name:AVERAGE
        '# CDEF:t_rrd_name=trend_name,{int},TREND
        '
        '# trend & timeshift : 
        '# DEF:trend_timeshift_name=rrd:name:AVERAGE:start={int}:end={int}
        '# SHIFT:trend_timeshift_name:{int}
        '# CDEF:st_trend_timeshift_name=trend_timeshift_name,{int},TREND
        '
        '# Operation
        '# DEF:operation_name=rrd:name:AVERAGE
        '# CDEF:cdef_operation_name=operation_name,{int},operator

        sRRDCmd_DEF = Function_DEF(iGraph_id, sRange)
        sRRDCmd_SHIFT = Function_SHIFT(iGraph_id)
        sRRDName = GetRRDName(rGraph_data!graph_devicename)

        If rGraph_data!graph_timeshift = True And rGraph_data!graph_trend = False Then
          sRRDCmd_GPRINT &= rGraph_data!graph_line_type & ":" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & "#" & Hex$(rGraph_data!graph_color, 6) & ":'" & rGraph_data!graph_name & Space(20 - Len(rGraph_data!graph_name)) & "'"
        Else If rGraph_data!graph_trend = True And rGraph_data!graph_timeshift = False Then
          sRRDCmd_CDEF &= " CDEF:" & Left(sGraph_shift, 1) & Left(sGraph_trend, 1) & "_" & sRRDName & "_" & rGraph_data!graph_rrddsname & "=" & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & "," & rGraph_data!graph_trend_value & ",TREND"
          sRRDCmd_GPRINT &= rGraph_data!graph_line_type & ":" & Left(sGraph_shift, 1) & Left(sGraph_trend, 1) & "_" & sRRDName & "_" & rGraph_data!graph_rrddsname & "#" & Hex$(rGraph_data!graph_color, 6) & ":'" & rGraph_data!graph_name & Space(20 - Len(rGraph_data!graph_name)) & "'"
        Else If rGraph_data!graph_trend = True And rGraph_data!graph_timeshift = True Then
          sRRDCmd_CDEF &= " CDEF:" & Left(sGraph_shift, 1) & Left(sGraph_trend, 1) & "_" & sRRDName & "_" & rGraph_data!graph_rrddsname & "=" & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & "," & rGraph_data!graph_trend_value & ",TREND"
          sRRDCmd_GPRINT &= rGraph_data!graph_line_type & ":" & Left(sGraph_shift, 1) & Left(sGraph_trend, 1) & "_" & sRRDName & "_" & rGraph_data!graph_rrddsname & "#" & Hex$(rGraph_data!graph_color, 6) & ":'" & rGraph_data!graph_name & Space(20 - Len(rGraph_data!graph_name)) & "'"
          ' ELSE IF
          ' sRRDCmd_CDEF &= " CDEF:ratio_" & rGraph_data!graph_devicename & "_" & rGraph_data!graph_rrddsname
          ' CDEF:mydatabits=mydata,8,*
        Else
          sRRDCmd_GPRINT &= rGraph_data!graph_line_type & ":" & sRRDName & "_" & rGraph_data!graph_rrddsname & "#" & Hex$(rGraph_data!graph_color, 6) & ":'" & rGraph_data!graph_name & Space(20 - Len(rGraph_data!graph_name)) & "'"
        Endif
        If rGraph_data!graph_min = True Then
          sRRDCmd_GPRINT &= " GPRINT:" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ":MIN:" & "'%4.1lf '"
        Else If rGraph_head!head_min = True Then
          sRRDCmd_GPRINT &= " COMMENT:'" & Space(5) & "'"
        Endif
        If rGraph_data!graph_max = True Then
          sRRDCmd_GPRINT &= " GPRINT:" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ":MAX:" & "'%4.1lf '"
        Else If rGraph_head!head_max = True Then
          sRRDCmd_GPRINT &= " COMMENT:'" & Space(5) & "'"
        Endif
        If rGraph_data!graph_avg = True Then
          sRRDCmd_GPRINT &= " GPRINT:" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ":AVERAGE:" & "'%4.1lf '"
        Else If rGraph_head!head_avg = True Then
          sRRDCmd_GPRINT &= " COMMENT:'" & Space(5) & "'"
        Endif
        If rGraph_data!graph_last = True Then
          sRRDCmd_GPRINT &= " GPRINT:" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ":LAST:" & "'%4.1lf ' "
        Else If rGraph_head!head_last = True Then
          sRRDCmd_GPRINT &= " COMMENT:'" & Space(5) & "'"
        Endif
        If rGraph_data!graph_value_max = True Then
          sRRDCmd_VDEF &= " VDEF:" & sGraph_trend & sGraph_shift & sRRDName & "_max=" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ",MAXIMUM"
          sRRDCmd_Graph &= " HRULE:" & sGraph_trend & sGraph_shift & sRRDName & "_max#" & Hex$(rGraph_data!graph_value_max_color, 6)
        Endif
        If rGraph_data!graph_value_avg = True Then
          sRRDCmd_VDEF &= " VDEF:" & sGraph_trend & sGraph_shift & sRRDName & "_avg=" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ",AVERAGE"
          sRRDCmd_Graph &= " HRULE:" & sGraph_trend & sGraph_shift & sRRDName & "_avg#" & Hex$(rGraph_data!graph_value_avg_color, 6)
        Endif
        If rGraph_data!graph_value_min = True Then
          sRRDCmd_VDEF &= " VDEF:" & sGraph_trend & sGraph_shift & sRRDName & "_min=" & sGraph_trend & sGraph_shift & sRRDName & "_" & rGraph_data!graph_rrddsname & ",MINIMUM"
          sRRDCmd_Graph &= " HRULE:" & sGraph_trend & sGraph_shift & sRRDName & "_min#" & Hex$(rGraph_data!graph_value_min_color, 6)
        Endif
        sRRDCmd_GPRINT &= " COMMENT:'\\s'" & " COMMENT:'\\s' "
      Next
    Endif

    If rGraph_print!date = True Then
      sRRRCmd_TIMESTAMP &= " COMMENT:'Date \\: " & Year(Now) & "-" & Month(Now) & "-" & Day(Now) & " " & Hour(Now) & "\\:" & Minute(Now) & "\\:" & Second(Now) & "\\r'"
    Endif

    sRRDCmd &= sRRDCmd_Main & sRRDCmd_DEF & sRRDCmd_SHIFT & sRRDCmd_CDEF & sRRDCmd_VDEF & sRRDCmd_GPRINT_Title & sRRDCmd_GPRINT & sRRDCmd_Graph & sRRRCmd_TIMESTAMP
  Endif

  If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & sRRDCmd)
  Shell sRRDCmd & " 2>&1" To sResult
  If sResult Like "*ERROR*" Then
    If Main.bRRDToolDebug Then Main.WriteDebugLog(LogLabel & "No graph produced: " & sResult)
    Return ""
  Else
    Return sPNG
  Endif

End

Public Sub Function_DEF(graph_id As Integer, sRange As String) As String

  Dim DEF As String
  Dim rGraph_DEF As Result

  Try rGraph_DEF = Main.hDB.Exec("SELECT distinct `graph_devicename`, `graph_rrddsname`, `graph_timeshift`, `graph_timeshift_value` FROM graph_data WHERE graph_id = &1", graph_id)
  If Not Error Then
    If rGraph_DEF.Count Then
      For Each rGraph_DEF
        If rGraph_DEF!graph_timeshift = True Then
          DEF &= " DEF:" & "shift_" & GetRRDName(rGraph_DEF!graph_devicename) & "_" & rGraph_DEF!graph_rrddsname & "=" & Main.sBaseDir &/ "rrd" &/ GetRRDId(rGraph_DEF!graph_devicename) & ".rrd" & ":" & rGraph_DEF!graph_rrddsname & ":" & "AVERAGE" & ":start='-" & rGraph_DEF!graph_timeshift_value & "-" & sRange & "':end='-" & sRange & "'"
        Else
          DEF &= " DEF:" & GetRRDName(rGraph_DEF!graph_devicename) & "_" & rGraph_DEF!graph_rrddsname & "=" & Main.sBaseDir &/ "rrd" &/ GetRRDId(rGraph_DEF!graph_devicename) & ".rrd" & ":" & rGraph_DEF!graph_rrddsname & ":" & "AVERAGE"
        Endif
      Next
      Return DEF
    Endif
  Endif

End

Public Sub Function_SHIFT(graph_id As Integer) As String

  Dim SHIFT As String
  Dim rGraph_SHIFT As Result

  Try rGraph_SHIFT = Main.hDB.Exec("SELECT `graph_devicename`, `graph_rrddsname`, `graph_timeshift`, `graph_timeshift_value` FROM graph_data WHERE graph_id = &1 and `graph_timeshift` = TRUE", graph_id)
  If Not Error Then
    If rGraph_SHIFT.Count Then
      For Each rGraph_SHIFT
        SHIFT &= " SHIFT:" & "shift_" & rGraph_SHIFT!graph_devicename & "_" & rGraph_SHIFT!graph_rrddsname & ":" & rGraph_SHIFT!graph_timeshift_value
      Next
      Return SHIFT
    Endif
  Endif

End

Private Sub GetRRDId(sName As String) As Integer

  Return Devices.FindIdForDevice(sName)

End
