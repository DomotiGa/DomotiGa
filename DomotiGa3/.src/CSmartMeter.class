' Gambas class file

' Description:
' SmartMeter.class
' Provide support for parsing the output of a NTA8130 compatible smart meter.

' Development Status:
' DSMR 2.X unstable / not tested
' DSMR 2.2+ stable
' DSMR 3.0 stable
' DSMR 4.0 stable

' Links:
' http://www.domoticaforum.eu/viewtopic.php?f=16&t=6104

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "SmartMeter"
Public PluginFriendlyName As String = "SmartMeter"
Public PluginVersion As String = "1.02"
Public PluginAuthor As String = "Ron Klinkien, Jesse Kerkhoven"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[SmartMeter] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String
Private $iDatabits As Integer
Private $iStopbits As Integer
Private $iParity As Integer
Private $bDebug As Boolean

Public hSmartMeter As New Socket
Public hSmartMeterSer As New SerialPort
Private sBuffer As String

Public tReConnect As Timer
Private iReConnectRetry As Integer = 0 ' retries
Private aReConnectDelay As Integer[] = [5000, 10000, 30000, 60000, 300000, 900000, 1800000, 3600000, 7200000, 14400000] ' 5sec, 10sec, 30sec, 1min, 5min, 15min, 1/2hour, 1hour, 2hours, 4hours

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $iDatabits = cPl.Settings["databits"]
  $iStopbits = cPl.Settings["stopbits"]
  $iParity = cPl.Settings["parity"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("SmartMeter Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Define timer for reconnect
  tReConnect = New Timer As "tReConnect"
  tReConnect.Delay = iReConnectRetry
  tReConnect.Stop


  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

  ' load test data if found
  If $bDebug Then
    Try ProcessData(File.Load(Main.sBaseDir & "/debug/smartmeter.log"))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hSmartMeter.Close

  ' get a new one
  hSmartMeter = New Socket As "SmartMeter"
  hSmartMeter.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  ' try to close the connection
  Try hSmartMeterSer.Close

  ' get a new one
  hSmartMeterSer = New Serialport As "SmartMeterSer"
  With hSmartMeterSer
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = $iParity
    .DataBits = $iDatabits
    .StopBits = $iStopbits
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' connected so reset retry counter
  tReConnect.Stop
  iReConnectRetry = 0

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

Public Sub SmartMeter_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SmartMeter_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg
  ReConnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SmartMeter_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

  ' connected so reset retry counter
  tReConnect.Stop
  iReConnectRetry = 0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hSmartMeter.Close
  Try hSmartMeterSer.Close
  Try tReConnect.Stop
  
  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tReConnect_Timer()

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End


Public Sub ReConnect()

  If iReConnectRetry < aReConnectDelay.Max + 1 Then
    Main.WriteLog(LogLabel & "Retry to connect in " & IIf(aReConnectDelay[iReConnectRetry] > 60000, CStr(aReConnectDelay[iReConnectRetry] / 60000) & " minutes.", CStr(aReConnectDelay[iReConnectRetry] / 1000) & " seconds."))
    tReConnect.Delay = aReConnectDelay[iReConnectRetry]
    tReConnect.Start
  Else
    tReConnect.Stop
    Main.WriteLog(LogLabel & "Too many reconnect failures, stopped trying.")
  Endif
  Inc iReConnectRetry

End

' got data on serial port
Public Sub SmartMeterSer_Read()

  Dim sData As String

  Try sData = Read #hSmartMeterSer, 1
  If Error Then
    Main.WriteDebugLog(LogLabel & "Error reading data from serial port! -> " & Error.Text)
    sBuffer = Null
    IsRunning = False
    ReConnect()
    Return
  Endif

  If sData = "!" Then ' buffer until end of record
    sBuffer &= sData
    ProcessData(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

' got data on tcp port
Public Sub SmartMeter_Read()

  Dim sData As String

  Try sData = Read #hSmartMeter, 1
  If Error Then 
    Main.WriteDebugLog(LogLabel & "Error reading data from tcp port! -> " & Error.Text)
    sBuffer = Null
    IsRunning = False
    ReConnect()
    Return
  Endif
  
  If sData = "!" Then ' buffer until end of record
    sBuffer &= sData
    ProcessData(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

' parse P1 telegram
Private Sub ProcessData(sTelegram As String)

  Dim aTelegram, aRecord, aReading, aGasRecord As String[]
  Dim aMBusId, aMBusType, aMBusReading, aMBusUnit, aMBusValve, aMBusTime As New String[4]
  Dim sLine, sSupplier, sEquipmentIdPower, sReadingPowerNormalUnit, sReadingPowerLowUnit, sReadingPowerGenNormalUnit, sReadingPowerGenLowUnit, sCurrentPowerUsageUnit, sCurrentPowerGenUnit, sPowerThresholdUnit As String
  Dim sMsgCode, sMsgText, sCurrentTariff, sValve As String
  Dim fReadingPowerNormal, fReadingPowerLow, fReadingPowerGenNormal, fReadingPowerGenLow, fCurrentPowerUsage, fCurrentPowerGen, fPowerThreshold As Float
  Dim iCurrentTariff, iSwitchPos, iChannel, iType, iDeviceId As Integer

  aTelegram = Split(sTelegram, "\r\n")
  For Each sLine In aTelegram
    If sLine = "" Then Continue
    If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sLine)
    Select Case Left(sLine, 1)
      Case "/" ' header
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received start of P1 data telegram.")
        ' decode meter supplier
        Select Case Mid(sLine, 2, 3)
          Case "KMP"
            sSupplier = "Kamstrup"
          Case "ISk"
            sSupplier = "IskraEmeco"
          Case "XMX"
            sSupplier = "Landis+Gyr"
          Case "KFM"
            sSupplier = "Kaifa"
          Case Else
            sSupplier = "Unknown (" & Mid(sLine, 2, 3) & ")"
        End Select
        If $bDebug Then
          Main.WriteDebugLog(LogLabel & "Meter supplier is '" & sSupplier & "'")
          Main.WriteDebugLog(LogLabel & "Meter information '" & sLine & "'")
        Endif
      Case "!" ' end of datagram
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received end of P1 data telegram.")
      Case Else ' data
        aRecord = Scan(sLine, "*:*(*)*")
        If aRecord.Count = 4 Then
          Select Case aRecord[1]
            Case "96.1.1" ' identifier
              sEquipmentIdPower = DecodeSerial(aRecord[2])
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Equipment identifier (Power) is '" & sEquipmentIdPower & "'")
            Case "1.8.2" ' meter reading normal tariff
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fReadingPowerNormal = CFloat(aReading[0])
                sReadingPowerNormalUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter reading power usage (T2/Normal tariff) is " & fReadingPowerNormal & " " & sReadingPowerNormalUnit)
            Case "1.8.1" ' meter reading low tariff
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fReadingPowerLow = CFloat(aReading[0])
                sReadingPowerLowUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter reading power usage (T1/Low tariff) is " & fReadingPowerLow & " " & sReadingPowerLowUnit)
            Case "2.8.2" ' meter reading delivered to net normal tariff
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fReadingPowerGenNormal = CFloat(aReading[0])
                sReadingPowerGenNormalUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter reading power generated (T2/Normal tariff) is " & fReadingPowerGenNormal & " " & sReadingPowerGenNormalUnit)
            Case "2.8.1" ' meter reading delivered to net low tariff
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fReadingPowerGenLow = CFloat(aReading[0])
                sReadingPowerGenLowUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter reading power generated (T1/Low tariff) is " & fReadingPowerGenLow & " " & sReadingPowerGenLowUnit)
            Case "96.14.0"
              iCurrentTariff = CInt(aRecord[2])
              sCurrentTariff = IIf(iCurrentTariff = 1, "Low", "Normal")
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Current tariff is T" & iCurrentTariff & " " & sCurrentTariff)
            Case "1.7.0" ' current power usage
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fCurrentPowerUsage = CFloat(aReading[0])
                sCurrentPowerUsageUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Current power usage (+P) is " & fCurrentPowerUsage & " " & sCurrentPowerUsageUnit)
            Case "2.7.0" ' current power generated
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fCurrentPowerGen = CFloat(aReading[0])
                sCurrentPowerGenUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Current power generated (-P) is " & fCurrentPowerGen & " " & sCurrentPowerGenUnit)
            Case "17.0.0" ' power threshold
              aReading = ParseReading(aRecord[2])
              If aReading.Count = 2 Then
                fPowerThreshold = CFloat(aReading[0])
                sPowerThresholdUnit = aReading[1]
              Endif
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Electricity threshold is " & fPowerThreshold & " " & sPowerThresholdUnit)
            Case "96.3.10" ' in/out/enabled
              iSwitchPos = CInt(aRecord[2])
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Electricity switch position is " & iSwitchPos)
            Case "96.13.1" ' message
              sMsgCode = aRecord[2]
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Message Code is '" & sMsgCode & "'")
            Case "96.13.0" ' message text
              sMsgText = aRecord[2]
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Message Text is '" & sMsgText & "'")
            ' optional MBus connected meters (channel 1-4)
            Case "96.1.0" ' channel identifiers
              If aRecord[0] <> "0-0" Then
                iChannel = CInt(Right(aRecord[0]))
                aMBusId[iChannel - 1] = DecodeSerial(aRecord[2])
              Endif
            Case "24.1.0" ' device type
              iChannel = CInt(Right(aRecord[0]))
              iType = CInt(aRecord[2])
              Select Case iType
                Case 3
                  aMBusType[iChannel - 1] = "Gas"
                Case 5
                  aMBusType[iChannel - 1] = "Heat"
                Case 6
                  aMBusType[iChannel - 1] = "Cooling"
                Case 8
                  aMBusType[iChannel - 1] = "Cold Water"
                Case 9
                  aMBusType[iChannel - 1] = "Warm Water"
              End Select
            Case "24.2.1" ' gas for dsmr 4
              iChannel = CInt(Right(aRecord[0]))
              aMBusTime[iChannel - 1] = "20" & Left(aRecord[2], 2) & "-" & Mid(aRecord[2], 3, 2) & "-" & Mid(aRecord[2], 5, 2) & " " & Mid(aRecord[2], 7, 2) & ":" & Mid(aRecord[2], 9, 2) & ":" & Mid(aRecord[2], 11, 2)
              aRecord[3] = Scan(aRecord[3], "*(*)*")[1] ' remove () from data
              aGasRecord = ParseReading(aRecord[3])
              If aGasRecord.Count = 2 Then
                aMBusReading[iChannel - 1] = CFloat(aGasRecord[0])
                aMBusUnit[iChannel - 1] = aGasRecord[1]
                If $bDebug Then
                  Main.WriteDebugLog(LogLabel & "Companion 4 record layout found.")
                  Main.WriteDebugLog(LogLabel & "MBus Meter on Channel #" & iChannel & ":")
                  Main.WriteDebugLog(LogLabel & "Reading : " & aMBusReading[iChannel - 1] & " " & aMBusUnit[iChannel - 1])
                  Main.WriteDebugLog(LogLabel & "Timestamp : " & aMBusTime[iChannel - 1])
                Endif
              Endif
            Case "24.3.0" ' gas for dsmr 2.2+ and 3 
              iChannel = CInt(Right(aRecord[0]))
              aMBusTime[iChannel - 1] = "20" & Left(aRecord[2], 2) & "-" & Mid(aRecord[2], 3, 2) & "-" & Mid(aRecord[2], 5, 2) & " " & Mid(aRecord[2], 7, 2) & ":" & Mid(aRecord[2], 9, 2) & ":" & Mid(aRecord[2], 11, 2)
              aGasRecord = Scan(aRecord[3], "(*)(*)(*)(*)(*)(*)")
              If aGasRecord.Count = 6 Then ' Companion layout
                aMBusReading[iChannel - 1] = CFloat(aGasRecord[5])
                aMBusUnit[iChannel - 1] = aGasRecord[4]
                If $bDebug Then
                  Main.WriteDebugLog(LogLabel & "Companion 2.2+ or 3 record layout found.")
                  Main.WriteDebugLog(LogLabel & "MBus Meter on Channel #" & iChannel & ":")
                  Main.WriteDebugLog(LogLabel & "Reading : " & aMBusReading[iChannel - 1] & " " & aMBusUnit[iChannel - 1])
                  Main.WriteDebugLog(LogLabel & "Timestamp : " & aMBusTime[iChannel - 1])
                Endif
              Else ' Kamstrup/Iskraemeco layout
                aGasRecord = Scan(aRecord[3], "*(*)(*)(*)(*)(*)")
                If aGasRecord.Count = 6 Then ' Kamstrup layout
                  aMBusUnit[iChannel - 1] = aGasRecord[5]
                Endif
                If $bDebug Then
                  Main.WriteDebugLog(LogLabel & "Kamstrup/Iskraemeco 2.2+ or 3 record layout found.")
                  Main.WriteDebugLog(LogLabel & "MBus Meter on Channel #" & iChannel & ":")
                  Main.WriteDebugLog(LogLabel & "Reading available on separate line.")
                  Main.WriteDebugLog(LogLabel & "Timestamp : " & aMBusTime[iChannel - 1])
                Endif
                ' data is on next line parse it later
              Endif
            Case "24.4.0" ' valve position
              iChannel = CInt(Right(aRecord[0]))
              Select Case CInt(aRecord[2])
                Case 1
                  sValve = "Open"
                Case 2
                  sValve = "Closed"
                Case 3
                  sValve = "Released"
                Case Else
                  sValve = "Unknown"
              End Select
              aMBusValve[iChannel - 1] = sValve
            Case Else
              If $bDebug Then Main.WriteDebugLog(LogLabel & "to decode : " & aRecord[1])
          End Select
        Endif
        aRecord = Scan(sLine, "(*)") ' possible mbus meter value on seperate line
        If aRecord.Count = 1 Then
          aMBusReading[iChannel - 1] = CFloat(aRecord[0])
        Endif
    End Select
  Next
  ' walk through mbus channelsIF $bDebug THEN
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Listing MBus Meters found:")
  For iChannel = 1 To 4
    If Len(aMBusReading[iChannel - 1]) Then
      If $bDebug Then
        Main.WriteDebugLog(LogLabel & "MBus Meter on Channel #" & iChannel & ":")
        Main.WriteDebugLog(LogLabel & "Id : " & aMBusId[iChannel - 1])
        Main.WriteDebugLog(LogLabel & "Type : " & aMBusType[iChannel - 1])
        Main.WriteDebugLog(LogLabel & "Reading : " & aMBusReading[iChannel - 1] & " " & aMBusUnit[iChannel - 1])
        Main.WriteDebugLog(LogLabel & "Timestamp : " & aMBusTime[iChannel - 1])
        Main.WriteDebugLog(LogLabel & "Valve Pos. : " & aMBusValve[iChannel - 1])
      Endif
      ' optional mbus meters
      iDeviceId = Devices.Find(Instance, "P1-MBus" & iChannel, InterfaceId, "P1-GASUSAGE")
      ' update value
      If iDeviceId Then 
        Devices.ValueUpdate(iDeviceId, 1, aMBusReading[iChannel - 1])
        Devices.ValueUpdate(iDeviceId, 2, aMBusValve[iChannel - 1])
        Devices.ValueUpdate(iDeviceId, 3, aMBusType[iChannel - 1])
        Devices.ValueUpdate(iDeviceId, 4, aMBusTime[iChannel - 1])
      Endif
    Endif
  Next
  ' power usage
  iDeviceId = Devices.Find(Instance, "P1-PowerUsed", InterfaceId, "P1-POWERUSAGE")
  If iDeviceId Then
    Devices.ValueUpdate(iDeviceId, 1, CStr(fCurrentPowerUsage))
    Devices.ValueUpdate(iDeviceId, 2, CStr(fReadingPowerLow))
    Devices.ValueUpdate(iDeviceId, 3, CStr(fReadingPowerNormal))
    Devices.ValueUpdate(iDeviceId, 4, sCurrentTariff)
  Endif
  ' power generated
  iDeviceId = Devices.Find(Instance, "P1-PowerDelivered", InterfaceId, "P1-POWERDELIVER")
  If iDeviceId Then
    Devices.ValueUpdate(iDeviceId, 1, CStr(fCurrentPowerGen))
    Devices.ValueUpdate(iDeviceId, 2, CStr(fReadingPowerGenLow))
    Devices.ValueUpdate(iDeviceId, 3, CStr(fReadingPowerGenNormal))
    Devices.ValueUpdate(iDeviceId, 4, sCurrentTariff)
  Endif

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: while parsing telegram " & ERROR.Text & " at " & ERROR.Where)
  Main.WriteDebugLog(LogLabel & "Current line was '" & sLine & "'")

End

Private Sub ParseReading(sReading As String) As String[]

  Return Split(sReading, "*")

End

Private Sub DecodeSerial(sData As String) As String

  Dim iCnt As Integer
  Dim sSerial As String

  For iCnt = 1 To Len(sData) Step 2
    sSerial &= Chr(Val("&H" & Mid(sData, iCnt, 2)))
  Next
  Return sSerial

End

