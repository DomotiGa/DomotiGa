' Gambas class file

' Description:
' FDeviceValues.class
' Display all device  values.

' Development Status:
' Finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bAutoRefresh As Boolean
Private bExpand As Boolean
Private mDeviceValue As Menu
Private iSortColumn As Integer = 0
Private bSortColumn As Boolean = True

Public Sub Form_Open()

  CreateDeviceMenu()
  GetDeviceValueList()

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then GetDeviceValueList()

End

Public Sub GetDeviceValueList()

  Dim iCount As Integer
  Dim rResult As Result

  Application.Busy = True

  rResult = Devices.GetDevicesAndValues(["enabled": Not chkDisabled.Value, "hide": chkHidden.Value, "sortOrder": "name, valuenum"])

  If Not rResult Then
    Message.Info(("Error: table 'device values' not found!"))
    Return
  Endif

  With tbvDeviceValues
    .Font.Size = "9"
    .Columns.Count = IIf(bExpand, 10, 6)
    .Rows.Count = rResult.Count
    .Columns[0].Title = ("Device Id")
    If bExpand Then
      .Columns[0].Width = 65
      .Columns[0].Resizable = True
    Else
      .Columns[0].Width = 0
      .Columns[0].Resizable = False
    Endif
    .Columns[1].Title = ("Device Name")
    .Columns[1].Width = 150
    .Columns[2].Title = ("Device Value Number")
    .Columns[2].Width = 0
    .Columns[2].Resizable = False
    .Columns[3].Title = ("Value")
    .Columns[3].Width = 120
    .Columns[4].Title = ("Last Changed")
    .Columns[4].Width = 150
    .Columns[5].Title = ("Last Seen")
    .Columns[5].Width = 150
    If bExpand Then
      .Columns[6].Title = ("Log")
      .Columns[6].Width = 50
      .Columns[7].Title = ("Log display")
      .Columns[7].Width = 50
      .Columns[8].Title = ("Log speak")
      .Columns[8].Width = 50
      .Columns[9].Title = ("Datasource")
      .Columns[9].Width = 100
    Endif
  End With

  For iCount = 0 To rResult.Max
    tbvDeviceValues[iCount, 0].Text = rResult!device_id
    tbvDeviceValues[iCount, 1].Text = rResult!device_name & ", " & rResult!device_value_valuenum
    tbvDeviceValues[iCount, 2].Text = rResult!device_value_valuenum
    tbvDeviceValues[iCount, 3].Text = Devices.CorrectValue(rResult!device_value_value, rResult!device_value_correction, rResult!device_id) & IIf(rResult!device_value_units, " " & rResult!device_value_units, "")
    If rResult!device_value_lastchanged Then
      tbvDeviceValues[iCount, 4].Text = Replace$(Str$(Format(rResult!device_value_lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    Else
      tbvDeviceValues[iCount, 4].Text = ""
    Endif
    If rResult!device_value_lastseen Then
      tbvDeviceValues[iCount, 5].Text = Replace$(Str$(Format(rResult!device_value_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    Else
      tbvDeviceValues[iCount, 5].Text = ""
    Endif

    If bExpand Then
      tbvDeviceValues[iCount, 6].Text = Main.DisplayBool(rResult!device_value_log)
      tbvDeviceValues[iCount, 7].Text = Main.DisplayBool(rResult!device_value_logdisplay)
      tbvDeviceValues[iCount, 8].Text = Main.DisplayBool(rResult!device_value_logspeak)
      If rResult!device_value_valuerrddsname Then
        tbvDeviceValues[iCount, 9].Text = rResult!device_value_valuerrddsname
      Else
        tbvDeviceValues[iCount, 9].Text = ""
      Endif
    Endif

    ' Expand column size
    If tbvDeviceValues.Font.TextWidth(tbvDeviceValues[iCount, 1].Text) > tbvDeviceValues.Columns[1].Width Then
      tbvDeviceValues.Columns[1].Width = tbvDeviceValues.Font.TextWidth(tbvDeviceValues[iCount, 1].Text)
    Endif

    rResult.MoveNext
  Next

  ' If the sort order isn't name, resort now 
  If iSortColumn <> 0 Or If Not bSortColumn Then
    FMain.SortTableView(tbvDeviceValues, iSortColumn, bSortColumn)
  Endif

Finally
  Application.Busy = False

End

Public Sub tbvDeviceValues_ColumnClick(Column As Integer)

  If iSortColumn = Column Then
    bSortColumn = Not bSortColumn
  Else
    bSortColumn = True
  Endif

  iSortColumn = Column

  FMain.SortTableView(tbvDeviceValues, Column, bSortColumn)

End

Public Sub Form_Resize()

  tbvDeviceValues.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Public Sub tbvDeviceValues_DblClick()

  If tbvDeviceValues.Row = -1 Then Return

  ' open value editor window
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceValueEditor.Edit(tbvDeviceValues[tbvDeviceValues.Row, 0].Text, tbvDeviceValues[tbvDeviceValues.Row, 2].Text)
  Else
    Message(("Sorry, editing device values is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnRefresh_Click()

  GetDeviceValueList()

End

Public Sub tbtnExpand_Click()

  If tbtnExpand.Value = True Then
    bExpand = True
    tbtnExpand.Text = ("Shrink")
  Else
    bExpand = False
    tbtnExpand.Text = ("Expand")
  Endif
  GetDeviceValueList()

End

Public Sub chkDisabled_Click()

  GetDeviceValueList()

End

Public Sub chkHidden_Click()

  GetDeviceValueList()

End

Public Sub CreateDeviceMenu()

  Dim mDelete, mEdit As Menu

  mDeviceValue = New Menu(FDeviceValues)

  mEdit = New Menu(mDeviceValue)
  mEdit.Text = "Edit"
  mEdit.Action = "edit"

  mDelete = New Menu(mDeviceValue)
  mDelete.Text = "Delete"
  mDelete.Action = "delete"

  mDeviceValue.Hide

End

Public Sub tbvDeviceValues_Menu()

  If tbvDeviceValues.Row = -1 Then Return
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then mDeviceValue.Popup()

End

Public Sub Action_Activate(sKey As String) As Boolean

  Dim iCurRow As Integer = tbvDeviceValues.Row

  If tbvDeviceValues.Row = -1 Then Return

  If Devices.CheckIfDeviceExists(CInt(tbvDeviceValues[iCurRow, 0].Text)) Then
    Select Case sKey
      Case "edit"
        FDeviceValueEditor.Edit(tbvDeviceValues[tbvDeviceValues.Row, 0].Text, tbvDeviceValues[tbvDeviceValues.Row, 2].Text)
      Case "delete"
        Select Message.Question(("Are you sure that you want to delete 'value") & tbvDeviceValues[iCurRow, 2].Text & ("' from this device?"), ("Yes"), ("No"))
          Case "1"
            Devices.DeleteDeviceValue(tbvDeviceValues[iCurRow, 0].Text, tbvDeviceValues[iCurRow, 2].Text)
            GetDeviceValueList()
        End Select
    End Select
  Endif
End

Public Sub tbvDeviceValues_MouseDown()

  tbvDeviceValues.Row = tbvDeviceValues.RowAt(Mouse.y)

End
