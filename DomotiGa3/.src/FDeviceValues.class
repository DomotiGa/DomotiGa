' Gambas class file

' Description:
' FDeviceValues.class
' Display all device  values.

' Development Status:
' Finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public iCurRow As Integer
Public bAutoRefresh As Boolean
Private bExpand As Boolean
Private mDeviceValue As Menu

Public Sub Form_Open()

  CreateDeviceMenu()
  GetDeviceValueList()

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then GetDeviceValueList()

End

Public Sub GetDeviceValueList()

  Dim iCount As Integer
  Dim rResult As Result

  Application.Busy = True

  rResult = Devices.GetDevicesAndValues(["enabled": Not chkDisabled.Value, "hide": chkHidden.Value, "sortOrder": "name"])
  
  If Not rResult Then
    Message.Info(("Error: table 'device values' not found!"))
    Return
  Endif

  With tbvDeviceValues
    .Font.Size = "9"
    .Columns.Count = IIf(bExpand, 6, 5)
    .Rows.Count = rResult.Count
    .Columns[0].Title = ("Device Id")
    .Columns[0].Width = 70
    .Columns[1].Title = ("Device Value Number")
    .Columns[1].Width = 90
    .Columns[2].Title = ("Value")
    .Columns[2].Width = 120
    .Columns[3].Title = ("Last Changed")
    .Columns[3].Width = 150
    .Columns[4].Title = ("Last Seen")
    .Columns[4].Width = 150
    If bExpand Then
      
    Endif
  End With

  For iCount = 0 To rResult.Max
    tbvDeviceValues[iCount, 0].Text = rResult!device_id
    tbvDeviceValues[iCount, 1].Text = rResult!device_value_valuenum
    tbvDeviceValues[iCount, 2].Text = Devices.CorrectValue(rResult!device_value_value, rResult!device_value_correction, rResult!device_id)
    If rResult!device_value_lastchanged Then tbvDeviceValues[iCount, 3].Text = Replace$(Str$(Format(rResult!device_value_lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    If rResult!device_value_lastseen Then tbvDeviceValues[iCount, 4].Text = Replace$(Str$(Format(rResult!device_value_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    If bExpand Then
      tbvDeviceValues[iCount, 5].Text = ""
    Endif
    rResult.MoveNext
  Next

Finally
  Application.Busy = False

End

Public Sub tbvDeviceValues_ColumnClick(Column As Integer)

  FMain.SortTableView(FDevices.tbvDeviceValues, Column, True)

End

Public Sub Form_Resize()

  tbvDeviceValues.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Public Sub tbvDeviceValues_DblClick()

  ' only continue if Row <> -1, which normally happens when DblClick on column and gambas3
  ' with gambas2 the first DblClick is unpredictable 
  If tbvDeviceValues.Row = -1 Then Return

  ' open device editor window
  iCurRow = tbvDeviceValues.Row
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceValueEditor.Show()
  Else
    Message(("Sorry, editing device values is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnRefresh_Click()

  GetDeviceValueList()

End

Public Sub tbtnExpand_Click()

  If tbtnExpand.Value = True Then
    bExpand = True
    tbtnExpand.Text = ("Shrink")
  Else
    bExpand = False
    tbtnExpand.Text = ("Expand")
  Endif
  GetDeviceValueList()

End

Public Sub chkDisabled_Click()

  GetDeviceValueList()

End

Public Sub chkHidden_Click()

  GetDeviceValueList()

End

Public Sub CreateDeviceMenu()

  Dim mDelete, mEdit As Menu

  mDeviceValue = New Menu(FDeviceValues)

  mEdit = New Menu(mDeviceValue)
  mEdit.Text = "Edit"
  mEdit.Action = "edit"

  mDelete = New Menu(mDeviceValue)
  mDelete.Text = "Delete"
  mDelete.Action = "delete"

  mDeviceValue.Hide

End

Public Sub tbvDeviceValues_Menu()

  Dim rResult As Result
  Dim iId As Integer 
  
  If tbvDeviceValues.Row = -1 Then Return
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then mDeviceValue.Popup()

End

Public Sub Action_Activate(key As String) As Boolean

  Dim iId As Integer
  Dim sToggle As String

  If tbvDeviceValues.Row = -1 Then Return
  iCurRow = tbvDeviceValues.Row

  iId = Devices.CheckIfDeviceExists(tbvDeviceValues[iCurRow, 0].Text)
  If iId Then
    Select Case key
      Case "edit"
        FDeviceValueEditor.Show()
      Case "delete"
        Select Message.Question(("Are you sure that you want to delete device value '" & tbvDeviceValues[iCurRow, 2].Text & "'?"), ("Yes"), ("No"))
          Case "1"
            ' TODO: remove 
            GetDeviceValueList()
        End Select
    End Select
  Endif
End

Public Sub tbvDeviceValues_MouseDown()

  tbvDeviceValues.Row = tbvDeviceValues.RowAt(Mouse.y)
  
End
