' Gambas class file

' Description:
' IRTrans.class
' Provide support for IRTrans.

' Development Status:
' Just started developing this one.

' Links:
' http://www.irtrans.de

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Daniel Keller in 2010.

' Read file called COPYING for license details.

Property TCPHost As String
Property TCPPort As String
Property IRTransDebug As Boolean

Private sTCPHost As String
Private iTCPPort As String
Private bIRTransDebug As Boolean

Public hIRTrans As New Socket
Public sBuffer As String
Public tIRTransConnect As Timer
Private iConnectRetry As Integer = 0 ' retries
Private iConnectDelay As Integer = 60000 ' 1 minute

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hIRTrans.Close

  ' get a new one
  hIRTrans = New Socket As "IRTrans"
  hIRTrans.Connect(sTCPHost, iTCPPort)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("IRTrans Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IRTrans_Ready()

  Main.WriteLog(("IRTrans TCP socket connected."))

  ' initialise the ASCII communication
  Try Write #hIRTrans, "ASCI", 4

  ' define timer for IRTrans reconnect
  tIRTransConnect = New Timer As "IRTransConnect"
  tIRTransConnect.Delay = iConnectRetry
  tIRTransConnect.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IRTrans_Closed()

  Main.WriteLog(("IRTrans Error: TCP socket closed."))
  If iConnectRetry < 6 Then
    Main.WriteDebugLog(("[IRTrans] Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", ".")))
    tIRTransConnect.Start
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tIRTransConnect_Timer()

  If Not Connect() Then
    Inc iConnectRetry
    iConnectDelay *= iConnectRetry
    tIRTransConnect.Delay = iConnectDelay
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try tIRTransConnect.Stop
  Try hIRTrans.Close
  Main.WriteLog(("IRTrans TCP socket close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("IRTrans Error: ") & ERROR.Text)
  Return False

End

Public Sub IRTrans_Found()

  Main.WriteLog(("IRTrans IP address resolved."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IRTrans_Error()

  ' handle error
  Select Case hIRTrans.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(("IRTrans: The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(("IRTrans: Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(("IRTrans: Unable to connect to interface. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(("IRTrans: Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(("IRTrans: Error writing data."))
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send generic command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sCmd As String)

  If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Send command: ") & sCmd)
  Try Write #hIRTrans, sCmd & Chr$(10), Len(sCmd) + 1
  If Error Then Main.WriteDebugLog(("[IRTrans] Error writing data to the TCP port! -> ") & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send IR command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendIRCommand(sCmd As String)

  If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Send IR command: ") & sCmd)
  sCmd = "Asnd " & sCmd
  Try Write #hIRTrans, sCmd & Chr$(10), Len(sCmd) + 1
  If Error Then Main.WriteDebugLog(("[IRTrans] Error writing data to the TCP port! -> ") & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IRTrans_Read()

  Dim sData As String

  Try sData = Read #hIRTrans, 1
  If Error Then Main.WriteDebugLog(("[IRTrans] Error reading data from the TCP port! -> ") & Error.Text)
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sStr As String)

  Dim sScan As String[]
  Dim sRemote, sButton As String

  If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Received string: ") & sStr)

  If InStr(sStr, "RCV_COM") Then
    ' received IR command
    ' format: **00037 RCV_COM mediacenter,play,0,0 (remote, button, bus, device)
    sStr = Right(sStr, Len(sStr) - 16)
    sScan = Split(sStr, ",")
    If sScan.Count = 4 Then
      ' do something with the received commands
      sRemote = sScan[0]
      sButton = sScan[1]
      Events.CheckIRRemoteEvents(sRemote, sButton)
      If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Remote: ") & sRemote & (" Button: ") & sButton & (" Bus: ") & sScan[2] & (" Device: ") & sScan[3])
    Endif
    Return
  Endif

  If InStr(sStr, "RESULT OK") Then
    If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Command successfully received by interface."))
    Return
  Endif

  If InStr(sStr, "RESULT ERROR") Then
    If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Error received from interface.") & sStr)
    Return
  Endif

  ' unsupported result
  If Main.bIRTransDebug Then Main.WriteDebugLog(("[IRTrans] Unsupported response received: ") & sStr)

End

' implement properties
Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function TCPPort_Read() As String

  Return iTCPPort

End

Private Sub TCPPort_Write(Value As String)

  iTCPPort = Value

End

Private Function IRTransDebug_Read() As Boolean

  Return bIRTransDebug

End

Private Sub IRTransDebug_Write(Value As Boolean)

  bIRTransDebug = Value

End
