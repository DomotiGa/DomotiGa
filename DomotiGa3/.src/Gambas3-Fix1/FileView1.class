' Gambas class file

Export
Inherits UserControl

Class DesktopMime

Public Const _Properties As String = "*,Border=True,Mode{Select.*}=Single,Dir,ShowDetailed,ShowHidden,ShowDirectory,ShowPreview"
Public Const _DefaultEvent As String = "Click"
Public Const _Group As String = "View"

Event {Select}
Event Click
Event Activate
Event Menu
Event Icon(Path As String)

Property {Dir} As String
Property ShowHidden As Boolean
Property ShowDirectory As Boolean
Property Current As String
Property Mode As Integer
Property ShowDetailed As Boolean
Property ShowPreview As Boolean
Property Read Selection As String[]
Property Filter As String[]
Property Icon As Picture
Property IconSize As Integer
Property Border As Boolean
Property Settings As Variant[]
Property Read Count As Integer
Property Background As Integer
Property Foreground As Integer

'Static Private $aImgExt As String[] = ["png", "jpeg", "jpg", "gif", "xpm"]
Static Private $cExt As New Collection(gb.IgnoreCase)

Private $sDir As String
Private $bShowHidden As Boolean
Private $bShowDir As Boolean
Private $bShowPreview As Boolean
Private $hIconView As IconView
Private $hColumnView As ColumnView
Private $iSort As Integer
Private $bAsc As Boolean = True
Private $aFilter As String[]
Private $hPict As Picture
Private $hRefresh As Timer
Private $bRefreshTriggered As Boolean
Private $iIconSize As Integer = 32
Private $bDesktopIsLoaded As Boolean

Private $hPreview As CTaskPreview1
'Private $cPreview As New Collection

Static Public Sub _init()
  
  $cExt["html"] = "html"
  $cExt["htm"] = "html"
  $cExt["css"] = "html"
  $cExt["tar"] = "archive"
  $cExt["gz"] = "archive"
  $cExt["tgz"] = "archive"
  $cExt["bz2"] = "archive"
  $cExt["z"] = "archive"
  $cExt["zip"] = "archive"
  $cExt["txt"] = "text"
  $cExt["mp3"] = "audio"
  $cExt["ogg"] = "audio"
  $cExt["wav"] = "audio"
  $cExt["mpg"] = "video"
  $cExt["mpeg"] = "video"
  $cExt["avi"] = "video"
  $cExt["wmv"] = "video"
  $cExt["mov"] = "video"
  $cExt["gambas"] = "gambas"
  $cExt["c"] = "text"
  $cExt["cpp"] = "text"
  $cExt["h"] = "text"
  $cExt["deb"] = "package"
  $cExt["rpm"] = "package"
  $cExt["iso"] = "cdrom"
  $cExt["jpg"] = "image"
  $cExt["jpeg"] = "image"
  $cExt["png"] = "image"
  $cExt["gif"] = "image"
  $cExt["xpm"] = "image"
  $cExt["bmp"] = "image"
  $cExt["ico"] = "image"
  $cExt["xcf"] = "image"
  $cExt["svg"] = "image"

End

Public Sub _new()
  
  With $hIconView = New IconView(Me) As "View"
    .Sorted = True
  End With
  
  With $hColumnView = New ColumnView(Me) As "View"
    .Columns.Count = 3
    .Columns[0].Text = ("Name")
    .Columns[0].Expand = False
    .Columns[1].Text = ("Size")
    .Columns[1].Alignment = Align.Right
    .Columns[2].Text = ("Last modified")
    '.Columns[2].Alignment = Align.Right
    '.Columns[0].Width = 64
    '.Columns[1].Width = 64
    '.Columns[2].Width = 96
    .Visible = False
    .Sorted = True
    .Resizable = True
  End With
  
  Me.Proxy = GetView()
  
  $hRefresh = New Timer As "Refresh"
  
  RefreshViewLater
  
End

Private Function CheckFilter(sFile As String) As Boolean
  
  Dim sFilter As String
  
  For Each sFilter In $aFilter
    If sFile Like sFilter Then Return
  Next
  
  Return True
  
End

Private Sub GetMimeIcon(sPath As String, iSize As Integer) As Picture
  
  Try Return DesktopMime.FromFile(sPath).GetIcon(iSize).Picture

End

Private Sub GetIcon(sPath As String, iSize As Integer) As Picture
  
  Dim sIcon As String
  Dim hPict As Picture
  
  $hPict = Null
  Try Raise Icon(sPath)
  If $hPict Then Return $hPict
  
  If IsDir(sPath) Then Return
  
  'If $bShowPreview And If $cPreview.Exist(sPath) Then Return $cPreview[sPath].Picture
  
  ' If $bShowPreview And If $aImgExt.Exist(File.Ext(sPath), gb.IgnoreCase) < 0 Then
  '   If Stat(sPath).Size <= 65536 Then 
  '   
  '     Try hImage = Image.Load(sPath)
  '     If Not Error Then
  '       If Not (hImage.Width = iSize And hImage.Height = iSize) Then 
  '         If hImage.Width > hImage.Height Then 
  '           hImage = hImage.Stretch(iSize, (iSize * hImage.Height) \ hImage.Width)
  '         Else
  '           hImage = hImage.Stretch((iSize * hImage.Width) \ hImage.Height, iSize)
  '         Endif
  '       Endif
  '       
  '       hIcon = New Image(hImage.W + 4, hImage.H + 4, Color.Transparent)
  '       Paint.Begin(hIcon)
  '       Paint.AntiAlias = False
  '       Paint.LineWidth = 2
  '       Paint.Rectangle(0, 0, hIcon.W, hIcon.H)
  '       Paint.Background = Color.Merge(GetView().Background, Color.Gray)
  '       Paint.Stroke
  '       Paint.End
  '       hIcon.DrawImage(hImage, 2, 2)
  '       
  '       Return hIcon.Picture
  '     Else
  '       Return Picture["icon:/" & iSize & "/image"]  
  '     Endif
  '   
  '   Endif
  '   
  ' Endif

  If $bDesktopIsLoaded Then
    
    hPict = GetMimeIcon(sPath, iSize)
    If hPict Then Return hPict
    
  Endif
    
  Try sIcon = $cExt[File.Ext(sPath)]
  If sIcon Then Return Picture["icon:/" & CStr(iSize) &/ sIcon]
    
  With Stat(sPath)
    
    If InStr(.Perm[System.User.Name], "x") Then Return Picture["icon:/" & CStr(iSize) &/ "exec"]
    
  End With
  
Catch
  
  Error "gb.form: unable to get icon for file: "; File.Name(sPath)
  
End

Private Sub GetSelection() As String[]
  
  Dim hView As Object
  Dim aSel As New String[]
  
  If $hIconView.Visible Then
    hView = $hIconView
  Else
    hView = $hColumnView
  Endif
  
  hView.MoveFirst
  While hView.Available
    If hView.Item.Selected Then
      aSel.Add(hView.Item.Key)
    Endif
    hView.MoveNext
  Wend
  
  Return aSel
  
End

Private Sub GetIconSize() As Integer

  If $hColumnView.Visible Then
    Return 16
  Else
    Return $iIconSize
  Endif

End

Private Sub RefreshView()
  
  Dim sFile As String
  Dim sDir As String
  Dim hPictFile As Picture
  Dim hPictFolder As Picture
  Dim hPict As Picture
  Dim sPrefix As String
  Dim iSize As Integer
  Dim aSel As String[]
  Dim aDir As New String[]
  Dim I As Integer
  Dim sText As String
  Dim bRichText As Boolean

  Inc Application.Busy
  
  $bDesktopIsLoaded = Component.IsLoaded("gb.desktop")
  
  aSel = GetSelection()
  
  If $hColumnView.Visible Then
    $hColumnView.Clear
    hPictFile = Picture["icon:/small/file"]
    hPictFolder = Picture["icon:/small/directory"]
  Else
    $hIconView.Clear
    $hIconView._Begin
    hPictFile = Picture["icon:/" & $iIconSize & "/file"]
    hPictFolder = Picture["icon:/" & $iIconSize & "/directory"]
  Endif
  
  iSize = GetIconSize()
  
  sDir = $sDir
  If Not sDir Then sDir = User.Home
  
  Try aDir = Dir(sDir, "*").Sort()
  For Each sFile In aDir
    If Not $bShowHidden And If Left(sFile) = "." Or Right(sFile) = "~" Then Continue
    With Stat(sDir &/ sFile)
      If .Type = gb.Directory Then
        If Not $bShowDir Then Continue
        sPrefix = "0"
      Else
        If $aFilter And If CheckFilter(sFile) Then Continue
        sPrefix = "1"
      Endif
      hPict = GetIcon(sDir &/ sFile, iSize)
      If Not hPict Then 
        If .Type = gb.Directory Then 
          hPict = hPictFolder
        Else 
          hPict = hPictFile
        Endif
      Endif
      
      bRichText = False
      
      sText = sFile
      If .Link Then
        sText = "<i>" & sText & "</i>"
        bRichText = True
      Endif
      If .Hidden Then
        sText = "<font color=\"#" & Hex$(Color.LightForeground, 6) & "\">" & sText & "</font>"
        bRichText = True
      Endif

      If $hColumnView.Visible Then
        $hColumnView.Add(sPrefix & sFile, sFile, hPict).Editable = Access(sDir, gb.Write)
        $hColumnView[sPrefix & sFile][1] = "  " & .GetFileSize(.Size)
        $hColumnView[sPrefix & sFile][2] = "  " & Str(.Time)
        If bRichText Then $hColumnView[sPrefix & sFile].RichText = sText
      Else
        $hIconView.Add(sPrefix & sFile, sFile, hPict).Editable = Access(sDir, gb.Write)
        If bRichText Then $hIconView[sPrefix & sFile].RichText = sText
      Endif
    End With
  Next
  
  If $hColumnView.Visible Then
    For I = 1 To $hColumnView.Columns.Max
      $hColumnView.Columns[I].W = -1
    Next
  Endif
  
  For Each sFile In aSel
    Try GetView()[sFile].Selected = True
  Next
  
  If $bShowPreview Then RunPreview
  
Finally
  
  If Not $hColumnView.Visible Then $hIconView._End
  Dec Application.Busy
  
Catch 
  
  Error "gb.form: "; Error.Where; ": "; Error.Text 
  
End

Private Sub RunPreview()

  If $hPreview Then $hPreview.Stop
  
  $hPreview = New CTaskPreview1($sDir, GetIconSize()) As "TaskPreview"

End

Public Sub TaskPreview_Read(Data As String)
  
  Dim iPos As Integer
  Dim sPath As String
  Dim sPreview As String
  Dim sLine As String

  If Not $bShowPreview Then Return

  For Each sLine In Split(Data, "\n", "", True)
    sLine = Replace(sLine, "\r", "")
    If sLine = "." Then
      Try $hPreview.Stop
      Return
    Endif
    iPos = InStr(sLine, "\t")
    sPath = Left(sLine, iPos - 1)
    sPreview = Mid$(sLine, iPos + 1)
    'Print "'" & sPath & "=" & sPreview & "'"

    Try GetView()["1" & sPath].Picture = Image.Load(sPreview).Picture
  Next
  
End

Public Sub TaskPreview_Kill()
  
  If $hPreview = Last Then $hPreview = Null
  
End


Private Sub RefreshViewLater()
  
  If $bRefreshTriggered Then Return
  
  $bRefreshTriggered = True
  $hRefresh.Trigger
  
End

Public Sub Refresh_Timer()
  
  $bRefreshTriggered = False
  RefreshView
  
End

Public Sub Reload()
  
  RefreshViewLater
  
End

Private Function Dir_Read() As String
  
  Return $sDir
  
End

Private Sub Dir_Write(sDir As String)
  
  $sDir = sDir
  RefreshViewLater
  
End

Private Function ShowHidden_Read() As Boolean
  
  Return $bShowHidden
  
End

Private Sub ShowHidden_Write(bShowHidden As Boolean)
  
  If bShowHidden = $bShowHidden Then Return 
  $bShowHidden = bShowHidden
  RefreshViewLater
  
End

Private Function ShowDirectory_Read() As Boolean
  
  Return $bShowDir
  
End

Private Sub ShowDirectory_Write(bShow As Boolean)
  
  If $bShowDir = bShow Then Return
  $bShowDir = bShow
  RefreshViewLater
  
End

Private Function GetView() As Object
  
  If $hIconView.Visible Then
    Return $hIconView
  Else
    Return $hColumnView
  Endif
  
End

Private Function Current_Read() As String
  
  If GetView().Current.Selected Then Return Mid$(GetView().Current.Key, 2)
  
Catch
  
End

Private Sub Current_Write(sFile As String)
  
  Dim sKey As String
  
  'Debug sFile
  
  GetView().UnselectAll
  sKey = "0" & sFile
  If Not GetView().Exist(sKey) Then sKey = "1" & sFile
  If Not GetView().Exist(sKey) Then Return
  
  GetView()[sKey].Selected = True
  GetView()[sKey].EnsureVisible
  
End

' Private Function Font_Read() As Font
' 
'   Return Super.Font
' 
' End
' 
' Private Sub Font_Write(hFont As Font)
' 
'   Super.Font = hFont
'   RefreshGrid
' 
' End

Private Function ShowDetailed_Read() As Boolean
  
  Return $hColumnView.Visible
  
End

Private Sub ShowDetailed_Write(bDetailed As Boolean)
  
  Dim hOld As Control
  
  If bDetailed = ShowDetailed_Read() Then Return
  
  If bDetailed Then
    
    hOld = $hIconView
    $hColumnView.Show
    
  Else
    
    hOld = $hColumnView
    $hIconView.Show
    
  Endif
  
  hOld.Hide
  Me.Proxy = GetView()
  Me.Background = hOld.Background
  Me.Foreground = hOld.Foreground
  RefreshView
  TakeSelection
  
End

Public Sub View_Select()
  
  Raise {Select}
  
End

Public Sub View_Click()
  
  Raise Click
  
End

Public Sub View_Activate()
  
  Raise Activate
  
End

Public Sub View_Menu()
  
  Raise Menu
  
End

Public Sub View_Compare(Key As String, OtherKey As String)
  
  Dim hStat As Stat
  Dim hStat2 As Stat
  Dim sDir As String
  Dim iComp As Integer
  
  sDir = $sDir
  If Not sDir Then sDir = User.Home
  
  If $hColumnView.Visible Then
    $iSort = $hColumnView.Columns.Sort
    $bAsc = $hColumnView.Columns.Ascending
  Else 
    $hIconView.Ascending = $bAsc
  Endif
  
  iComp = Comp(Asc(Key), Asc(OtherKey))
  
  If iComp = 0 Then
    
    If $iSort Then
      hStat = Stat(sDir &/ Mid$(Key, 2))
      hStat2 = Stat(sDir &/ Mid$(OtherKey, 2))
    Endif
    
    Select $iSort
        
      Case 1
        iComp = Sgn(hStat.Size - hStat2.Size)
        
      Case 2
        iComp = Sgn(hStat.Time - hStat2.Time)
        
    End Select
    
    If iComp = 0 Then iComp = Comp(Key, OtherKey, gb.IgnoreCase + gb.Natural)
    
    'IF NOT $bAsc THEN iComp = (- iComp)
    
  Endif
  
  Last.Compare = iComp
  
Catch
  
End

Private Sub Mode_Write(iMode As Integer)
  
  $hIconView.Mode = iMode
  $hColumnView.Mode = iMode
  
End

Private Function Mode_Read() As Integer
  
  Return $hIconView.Mode
  
End

Private Function Selection_Read() As String[]
  
  Dim hView As Object
  Dim aSel As New String[]
  
  If $hIconView.Visible Then
    hView = $hIconView
  Else
    hView = $hColumnView
  Endif
  
  hView.MoveFirst
  While hView.Available
    If hView.Item.Selected Then
      aSel.Add(hView.Item.Text)
    Endif
    hView.MoveNext
  Wend
  
  Return aSel
  
End

Private Sub TakeSelection()
  
  Dim hSrc As Object
  Dim hDst As Object
  
  If $hIconView.Mode = Select.None Then Return
  
  hSrc = $hIconView
  hDst = $hColumnView
  If $hIconView.Visible Then Swap hSrc, hDst
  
  If $hIconView.Mode = Select.Single Then
    If hSrc.Current And If hSrc.Current.Selected Then
      Object.Lock(hDst)
      hDst[hSrc.Key].Selected = True
      hDst[hSrc.Key].EnsureVisible
      Object.Unlock(hDst)
    Endif
    Return
  Endif
  
  hDst.UnselectAll
  hSrc.MoveFirst
  While hSrc.Available
    If hSrc.Item.Selected Then
      Object.Lock(hDst)
      hDst[hSrc.Item.Key].Selected = True
      Object.Unlock(hDst)
    Endif
    hSrc.MoveNext
  Wend
  
End

Private Function Filter_Read() As String[]
  
  Return $aFilter
  
End

Private Sub Filter_Write(aFilter As String[])
  
  $aFilter = aFilter.Copy()
  RefreshViewLater
  
End

Private Function Icon_Read() As Picture
  
  Return $hPict  
  
End

Private Sub Icon_Write(Value As Picture)
  
  $hPict = Value
  
End

Private Function Border_Read() As Boolean
  
  Return $hColumnView.Border
  
End

Private Sub Border_Write(Value As Boolean)
  
  $hColumnView.Border = Value
  $hIconView.Border = Value
  
End

Private Function Settings_Read() As Variant[]
  
  Return [1, CVariant(ShowDetailed_Read()), ShowHidden_Read(), $hColumnView.Settings, $iIconSize, ShowPreview_Read()]
  
  'Return IIf(ShowDetailed_Read(), "1", "0") & "," & IIf(ShowHidden_Read(), "1", "0") & "," & $hColumnView.Settings
  
End

Private Sub Settings_Write(Value As Variant[])
  
  If TypeOf(Value[0]) = gb.Integer Then
    ShowDetailed_Write(Value[1])
    ShowHidden_Write(Value[2])
    $hColumnView.Settings = Value[3]
    IconSize_Write(Value[4])
    If Value.Count >= 6 Then ShowPreview_Write(Value[5])
  Else
    ShowDetailed_Write(Value[0])
    ShowHidden_Write(Value[1])
    $hColumnView.Settings = Value[2]
  Endif
  
Catch
  
  Error "gb.form :"; Error.Where; ": "; Error.Text
  
End

Private Function Count_Read() As Integer
  
  If $hIconView.Visible Then 
    Return $hIconView.Count
  Else 
    Return $hColumnView.Count
  Endif    
  
End

' PUBLIC SUB View_MouseMove()
'   
'   IF $hIconView.Visible THEN RETURN 
'   
'   IF $hColumnView.Find(Mouse.X, Mouse.Y) THEN RETURN 
'   DEBUG $hColumnView.Item.Text
'   
' END

Private Function IconSize_Read() As Integer
  
  Return $iIconSize
  
End

Private Sub IconSize_Write(Value As Integer)
  
  $iIconSize = Value
  RefreshViewLater
  $hIconView.GridSize = Min(40, (Value + 8) \ 3)
  
End

Public Sub SelectAll()
  
  If $hIconView.Mode <> Select.Multiple Then Return
  GetView().SelectAll()
  
End

Public Sub UnselectAll()
  
  If $hIconView.Mode <> Select.Multiple Then Return
  GetView().UnselectAll()
  
End

Private Function Background_Read() As Integer
  
  Return $hColumnView.Background
  
End

Private Sub Background_Write(Value As Integer)
  
  $hIconView.Background = Value
  $hColumnView.Background = Value
  
End

Private Function Foreground_Read() As Integer
  
  Return $hColumnView.Foreground
  
End

Private Sub Foreground_Write(Value As Integer)
  
  $hIconView.Foreground = Value
  $hColumnView.Foreground = Value

End

Private Function ShowPreview_Read() As Boolean

  Return $bShowPreview

End

Private Sub ShowPreview_Write(Value As Boolean)

  If $bShowPreview = Value Then Return
  $bShowPreview = Value
  RefreshViewLater
  
End

Public Sub Rename()
  
  Dim hView As Object = GetView()
  Dim sPath As String
  
  Try sPath = hView.Current.Key
  If sPath Then
    hView[sPath].Rename
  Endif
  
End

Public Sub View_Rename()
  
  Dim hView As Object = GetView()
  Dim sKey As String = hView.Item.Key
  Dim sOldPath As String = $sDir &/ Mid$(sKey, 2)
  Dim sNewName As String = hView.Item.Text
  
  If sNewName = File.Name(sOldPath) Then Return 
  
  Move sOldPath To File.SetName(sOldPath, sNewName)
  
  'sParent = File.Dir(sKey)
  
  ' TODO: Optimization
  
  Object.Lock(hView)
  hView.Remove(sKey)
  Mid$(sKey, 2) = sNewName
  'AddDir(File.Dir(sKey), File.Name(sKey))
  RefreshView
  Object.Unlock(hView)
  
  Try hView.Key = sKey
  
Catch 
  
  hView[sKey].Text = File.Name(sOldPath)
  Message.Error(("Cannot rename file.") & "\n\n" & Error.Text)
  
End
