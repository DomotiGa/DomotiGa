' Gambas module file

' Description:
' ScreenFunc.module
' Provides various screen related functions.

' Development Status:
' Imported from Kris's own project, needs testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Kris Wauters on February, 7th - 2010
' For more info or help, mailto: kris@digitalplayground.be

' Read file called COPYING for license details.

Public IntPassedKey As Integer

'--- initialises a filterscreen dynamically ---
Public Sub InitFilterscreen(Frm As Form)

  '--- declare variables ---
  Dim IntI, IntNumCols As Integer
  Dim oObj1, oObj2, oObj3, oObj4, oObj5 As Object
  Dim ColVw As ColumnView
  Dim CmbObj As ComboBox

  '--- first, get number of columns equally to filter ---
  IntI = 0
  For Each oObj1 In Frm.Children
    If UCase(Main.ParseTag(Object.GetProperty(oObj1, "Tag"), 2, "|")) = "FILTER" Then
      '--- houston, we found our filterframe, so search for the filterbutton ---
      For Each oObj2 In oObj1.Children
        If UCase(Main.ParseTag(Object.GetProperty(oObj2, "Tag"), 3, "|")) = "FILTER" Then
          IntNumCols = Val(Main.ParseTag(Object.GetProperty(oObj2, "Tag"), 2, "|"))
          oObj5 = Frm.Children[IntI]
          Break
        Endif
      Next
    Endif
    Inc IntI
  Next

  '--- next, get grid ---
  For Each oObj2 In Frm.Children
    If UCase(Main.ParseTag(Object.GetProperty(oObj2, "Tag"), 2, "|")) = "RESULTS" Then
      '--- houston, we found the results frame ---
      For Each oObj3 In oObj2.Children
        If UCase(Object.Type(oObj3)) = "COLUMNVIEW" Then
          '--- we have the gridview, now do some magic ---
          ColVw = oObj3
          ColVw.Columns.Count = IntNumCols
          For IntI = 0 To IntNumCols - 1
            '--- lookup label, for columnheader text ---
            For Each oObj4 In oObj5.Children
              If Val(Main.ParseTag(Object.GetProperty(oObj4, "Tag"), 2, "|")) = IntI Then
                If UCase(Object.Type(oObj4)) = "LABEL" Then
                  ColVw.Columns[IntI].Text = Object.GetProperty(oObj4, "Text")
                Else
                  ColVw.Columns[IntI].Width = Object.GetProperty(oObj4, "Width")
                Endif
                '--- do something special with combo boxes (fill them up) :-) ---
                If UCase(Object.Type(oObj4)) = "COMBOBOX" Then
                  CmbObj = oObj4
                  FillCombo(CmbObj)
                Endif
              Endif
            Next
          Next
          Break
        Endif
      Next
    Endif
  Next
  ' --- Set security settings for current user, and put it in the tag of this form ---
  If Main.bUserisAdmin Then
    ' BtnAdd BtnView BtnModify BtnCopy rRes!BtnDelete rRes!BtnPrint rRes!PrinterName rRes!Orientation rRes!Color rRes!Copies
    Frm.Tag = "1|1|1|1|1|0|Default Printer|0|0|1"
  Else
    Frm.Tag = "0|1|0|0|0|0|Default Printer|0|0|1"
  Endif

End

'--- fill up a combobox, accordingly the defined tag ---
Public Sub FillCombo(Cmb As Object)

  '--- declare variables ---
  Dim rRes As Result

  Cmb.Clear
  Cmb.Add("")
  rRes = Main.hDB.Exec("SELECT " & Main.ParseTag(Cmb.tag, 4, "|") & " FROM " & Main.ParseTag(Cmb.tag, 3, "|") & " ORDER BY " & Main.ParseTag(Cmb.tag, 4, "|"))
  If rRes Then
    If rRes.Count > 0 Then
      For Each rRes
        Cmb.Add(rRes[rRes.Fields[0].Name])
      Next
    Endif
  Endif
  rRes = Null

End

'--- fillup columnview on filterscreen, accordingly given filter-data ---
Public Sub FilterData(FrmFilter As Frame, ColVw As ColumnView, FrmBtns As Frame, BtnFilter As Button, FrmResult As Frame)

  '--- declare variables ---
  Dim rRes As Result
  Dim IntCols, IntI, IntAnswer As Integer
  Dim StrQuery, StrValue, StrFile As String
  Dim StrType As New String[20]
  Dim Obj As Object

  '--- init some variables ---
  ColVw.Clear
  IntCols = Val(Main.ParseTag(BtnFilter.Tag, 2, "|"))
  StrQuery = Main.ParseTag(BtnFilter.Tag, 4, "|")
  FrmResult.text = ("Resultset") & " [0]"

  '--- build-up query with all filterdata ---
  For IntI = 0 To IntCols
    For Each Obj In FrmFilter.Children
      If Val(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = IntI Then
        Select Case UCase(Object.Type(Obj))
          Case "TEXTBOX"
            ColVw.Columns[IntI].width = Object.GetProperty(Obj, "Width")
            StrValue = Object.GetProperty(Obj, "Text")
            StrType[IntI + 1] = UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 3, "|"))
            Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 3, "|"))
              Case "NUMERIC", "BOOLEAN"
                If Trim(StrValue) = "" Then StrValue = "0"
                If Val(StrValue) > 0 Then
                  StrQuery = StrQuery & " AND " & Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3) & " = " & Str(Val(StrValue))
                Endif
              Case "TEXT", "DATE", "TIME", "DATETIME"
                If Len(Trim(StrValue)) > 0 Then
                  StrQuery = StrQuery & " AND " & Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3) & " like '%" & StrValue & "%'"
                Endif
              End Select
          Case "COMBOBOX"
            StrType[IntI + 1] = "TEXT"
            ColVw.Columns[IntI].width = Object.GetProperty(Obj, "Width")
            StrValue = Object.GetProperty(Obj, "Text")
            If Len(Trim(StrValue)) > 0 Then
              StrQuery = StrQuery & " AND " & Main.ParseTag(Object.GetProperty(Obj, "Tag"), 4, "|") & " like '%" & StrValue & "%'"
            Endif
        End Select
      Endif
    Next
  Next

  '--- we have a (valid) query, so execute it ! ---
  rRes = Main.hDB.Exec(StrQuery)
  If rRes Then
    If rRes.Count > 0 Then
      IntAnswer = 1
      If rRes.Count > 1000 Then
        IntAnswer = Message.Question(("Your query results in more then 1000 items, continue ?"), ("Yes"), ("No"))
      Endif
      If IntAnswer = 1 Then
        FrmResult.text = ("Resultset") & " [" & CStr(rRes.count) & "]"
        For Each rRes
          If rRes.Fields.Count > IntCols + 1 Then
            '--- if we have more fields, then we assume that the last 2 fields are for an icon ;-) ---
            StrFile = Main.BlobFromDB("SELECT * FROM " & Main.ParseTag(rRes.Fields[0].name, 1, ".") & " WHERE " & Main.ParseTag(rRes.Fields[0].Name, 2, ".") & " = " & rRes[rRes.Fields[0].Name], rRes.Fields[IntCols + 1].Name, rRes.Fields[IntCols + 2].Name)
            Try ColVw.Add("K" & rRes[rRes.Fields[0].Name], "", Picture.Load(StrFile))
            If Error Then
              ColVw.Add("K" & rRes[rRes.Fields[0].Name], "")
            Endif
            Try Kill StrFile
          Else
            ColVw.Add("K" & rRes[rRes.Fields[0].Name], "")
          Endif
          If IntCols > 2 Then
            ColVw.MoveTo("K" & rRes[rRes.Fields[0].Name])
            For IntI = 1 To IntCols
              StrValue = rRes[rRes.Fields[IntI].Name]
              Select Case StrType[IntI]
                Case "DATETIME"
                  StrValue = Main.DateTimeFromSqlToApp(StrValue)
                Case "DATE"
                  StrValue = Main.DateFromSQLToApp(StrValue)
                Case "TIME"
                  StrValue = Main.TimeFromSQLToApp(StrValue)
                Case "BOOLEAN"
                  If StrValue = "1" Then
                    StrValue = "X"
                  Else
                    StrValue = ""
                  Endif
              End Select
              ColVw.Item[IntI - 1] = StrValue
            Next
          Endif
        Next
      Endif
    Endif
  Endif
  rRes = Null

End

'--- set buttons, accordingly security settings and selection in colvw ---
Public Sub SetButtons(StrTag As String, ColVw As ColumnView, FrmBtns As Frame)

  '--- declare variables ---
  Dim BoolSet As Boolean
  Dim IntI As Integer
  Dim Obj As Object

  BoolSet = False
  '--- find if an item is selected or not ---
  If ColVw.Current <> Null Then
    If ColVw.Current.Selected = True Then
      BoolSet = True
    Else
      BoolSet = False
    Endif
  Else
    BoolSet = False
  Endif

  '--- set command-buttons accordingly earlier retrieved security-settings ---
  For IntI = 1 To 7
    For Each Obj In FrmBtns.Children
      If Val(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 3, "|")) = IntI Then
        Select Case IntI
          '--- the add button ---
          Case 1
            Object.SetProperty(Obj, "Enabled", CBool(Val(Main.ParseTag(StrTag, IntI, "|"))))
          '--- the "other" buttons ---
          Case 2, 3, 4, 5
            If CBool(Val(Main.ParseTag(StrTag, IntI, "|"))) = False Then
              Object.SetProperty(Obj, "Enabled", False)
            Else
              Object.SetProperty(Obj, "Enabled", BoolSet)
            Endif
          '--- the print button ---
          Case 6
            If ColVw.Count > 0 Then
              Object.SetProperty(Obj, "Enabled", CBool(Val(Main.ParseTag(StrTag, IntI, "|"))))
            Else
              Object.SetProperty(Obj, "Enabled", False)
            Endif
          '--- the select button, no security settings ! ---
          Case 7
            Object.SetProperty(Obj, "Enabled", BoolSet)
        End Select
      Endif
    Next
  Next

End

'--- show detailscreen from a given filter ---
Public Sub DoDetailScreen(StrAction As String, ColVw As ColumnView, FrmDetail As Form, StrTitle As String)

  '--- declare variables ---
  Dim IntRecID As Integer
  Dim rRes As Result

  '--- do some initial settings ---
  IntRecID = 0
  FrmDetail.tag = Main.ParseTag(FrmDetail.tag, 1, "|") & "|" & Main.ParseTag(FrmDetail.tag, 2, "|") & "|" & StrAction
  FrmDetail.Title = StrTitle & " [" & (StrAction) & "]"

  '--- first, get RecID of selected item ---
  If ColVw.Current <> Null Then
    IntRecID = Val(Right(ColVw.Current.Key, Len(ColVw.Current.Key) - 1))
  Endif

  '--- depending on "action", select data and put it on screen ---
  Select Case UCase(StrAction)
    Case "VIEW", "COPY", "MODIFY", "DELETE"
      rRes = Main.hDB.Exec(Main.ParseTag(FrmDetail.tag, 1, "|") & CStr(IntRecID))
      PutOnScreen(rRes, FrmDetail, StrAction)
    Case "ADD"
      SetScreenForAdd(FrmDetail, StrAction)
  End Select
  FrmDetail.ShowModal

End

'--- we have a recordset an a detailscreen, now put the data on the screen, loop trough all controls recursively ! (part of DoDetailScreen) ---
Private Sub PutOnScreen(rRes As Result, FrmDetail As Object, StrAction As String)

  '--- declare variables ---
  Dim Obj As Object
  Dim StrTmpFile As String
  Dim rResTmp As Result

  For Each Obj In FrmDetail.Children
    Select Case UCase(Object.Type(Obj))
      Case "CHECKBOX"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "BOOLEAN"
            If CInt(rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)]) = 1 Then
              Object.SetProperty(Obj, "Value", True)
            Else
              Object.SetProperty(Obj, "Value", False)
            Endif
            SetEnabled(Obj, StrAction)
        End Select
      Case "TEXTBOX", "TEXTAREA"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "COLOR"
            If Len(Trim(rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)])) > 0 Then
              Object.SetProperty(Obj, "BackColor", Val(rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)]))
            Endif
            SetEnabled(Obj, StrAction)
          Case "TEXT", "NUMERIC"
            Object.SetProperty(Obj, "Text", rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)])
            SetEnabled(Obj, StrAction)
          Case "QUERY"
            rResTmp = Main.hDB.Exec(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|") & rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)])
            Object.SetProperty(Obj, "Text", rResTmp[rResTmp.Fields[1].Name])
            Object.SetProperty(Obj, "Tag", Object.GetProperty(Obj, "Tag") & "|" & CStr(rResTmp[rResTmp.Fields[0].Name]))
            rResTmp = Null
          Case "FULLNAME"
            Object.SetProperty(Obj, "Text", rRes!FullName)
          Case "RECID"
            Object.SetProperty(Obj, "Text", rRes!RecID)
          Case "CREATIONDATE"
            Object.SetProperty(Obj, "Text", Main.DateTimeFromSqlToApp(rRes!CreationDate))
          Case "MODIFICATIONDATE"
            Object.SetProperty(Obj, "Text", Main.DateTimeFromSqlToApp(rRes!ModificationDate))
          Case "DATE"
            Object.SetProperty(Obj, "Text", Main.DateFromSQLToApp(rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)]))
            SetEnabled(Obj, StrAction)
          Case "TIME"
            Object.SetProperty(Obj, "Text", Main.TimeFromSQLToApp(rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)]))
            SetEnabled(Obj, StrAction)
          Case "DATETIME"
            Object.SetProperty(Obj, "Text", Main.DateTimeFromSQLToApp(rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)]))
            SetEnabled(Obj, StrAction)
        End Select
      Case "COMBOBOX"
        '--- write code to first fillup the combobox, and next set it to the correct item ---
        If UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "TRUE"
          Object.SetProperty(Obj, "Tag", Object.GetProperty(Obj, "Tag") & "|" & rRes[Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3)])
          FillComboAndSet(Obj)
        Endif
      Case "PICTUREBOX"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "BLOB"
            Try StrTmpFile = Main.BlobFromDBWithResult(rRes, Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(Obj, "Name")) - 3), Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|"))
            Try Object.SetProperty(Obj, "Picture", Picture.Load(StrTmpFile))
            Try Kill StrTmpFile
        End Select
      Case "BUTTON"
        If UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "OK" Or UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "BROWSE" Or UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "CLEAR" Then
          Select Case UCase(StrAction)
            Case "ADD", "MODIFY", "COPY", "DELETE"
              Object.SetProperty(Obj, "Enabled", True)
            Case "VIEW"
              Object.SetProperty(Obj, "Enabled", False)
          End Select
        Endif
    End Select
    PutOnScreen(rRes, Obj, StrAction)
  Next
  Finally

End

'--- we need to return the RecID of the selected item in the combobox ---
Private Function GetComboID(Cmb As Object) As Integer

  '--- declare variables ---
  Dim rRes As Result
  Dim StrTxt As String

  StrTxt = Cmb.text
  rRes = Main.hDB.Exec("SELECT " & Main.ParseTag(Cmb.tag, 4, "|") & " FROM " & Main.ParseTag(Cmb.tag, 3, "|") & " ORDER BY " & Main.ParseTag(Cmb.tag, 4, "|"))
  If rRes Then
    If rRes.Count > 0 Then
      For Each rRes
        If rRes[rRes.Fields[0].Name] = StrTxt Then
          Return CInt(rRes[rRes.Fields[1].Name])
        Endif
      Next
    Endif
  Endif
  rRes = Null

End

'--- fill up a combobox, accordingly the defined TAG ---
Private Sub FillComboAndSet(Cmb As Object)

  '--- declare variables ---
  Dim rRes As Result
  Dim IntRecID As Integer
  Dim StrFind As String

  IntRecID = Main.ParseTag(Cmb.tag, 5, "|")
  Cmb.Clear
  Cmb.Add("")
  rRes = Main.hDB.Exec("SELECT " & Main.ParseTag(Cmb.tag, 4, "|") & " FROM " & Main.ParseTag(Cmb.tag, 3, "|") & " ORDER BY " & Main.ParseTag(Cmb.tag, 4, "|"))
  If rRes Then
    If rRes.Count > 0 Then
      For Each rRes
        Cmb.Add(rRes[rRes.Fields[0].Name])
        If CInt(rRes[rRes.Fields[1].Name]) = IntRecID Then
          StrFind = rRes[rRes.Fields[0].Name]
        Endif
      Next
      Cmb.Index = Cmb.Find(Strfind)
    Endif
  Endif
  rRes = Null

End

'--- special version for "add" action on detailscreen, loop trough all controls recursively ! (part of DoDetailScreen) ---
Private Sub SetScreenForAdd(FrmDetail As Object, StrAction As String)

  '--- declare variables ---
  Dim Obj As Object

  For Each Obj In FrmDetail.Children
    Select Case UCase(Object.Type(Obj))
      Case "CHECKBOX"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "BOOLEAN"
            Object.SetProperty(Obj, "Value", False)
            SetEnabled(Obj, StrAction)
        End Select
      Case "TEXTBOX", "TEXTAREA"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "COLOR"
            SetEnabled(Obj, StrAction)
          Case "TEXT", "NUMERIC"
            Object.SetProperty(Obj, "Text", "")
            SetEnabled(Obj, StrAction)
          Case "FULLNAME"
            Object.SetProperty(Obj, "Text", "")
          Case "RECID"
            Object.SetProperty(Obj, "Text", 0)
          Case "CREATIONDATE"
            Object.SetProperty(Obj, "Text", Main.DateTimeFromSqlToApp("000000000000"))
          Case "MODIFICATIONDATE"
            Object.SetProperty(Obj, "Text", Main.DateTimeFromSqlToApp("000000000000"))
          Case "DATE"
            Object.SetProperty(Obj, "Text", Main.DateFromSQLToApp("00000000"))
            SetEnabled(Obj, StrAction)
          Case "TIME"
            Object.SetProperty(Obj, "Text", Main.TimeFromSQLToApp("0000"))
            SetEnabled(Obj, StrAction)
          Case "DATETIME"
            Object.SetProperty(Obj, "Text", Main.DateTimeFromSQLToApp("000000000000"))
            SetEnabled(Obj, StrAction)
        End Select
      Case "COMBOBOX"
        '--- write code to first fillup the combobox, and next set it to the correct item ---
        If UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "TRUE"
          FillCombo(Obj)
        Endif
      Case "BUTTON"
        If UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "OK" Or UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "BROWSE" Or UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "CLEAR" Then
          Select Case UCase(StrAction)
            Case "ADD", "MODIFY", "COPY", "DELETE"
              Object.SetProperty(Obj, "Enabled", True)
            Case "VIEW"
              Object.SetProperty(Obj, "Enabled", False)
          End Select
        Endif
    End Select
    SetScreenForAdd(Obj, StrAction)
  Next
  Finally

End

'--- set a control enabled or disabled, accordingly the given action for the detailscreen (part of DoDetailScreen and sub functions) ---
Private Sub SetEnabled(Obj As Object, StrAction As String)

  Select Case UCase(StrAction)
    Case "MODIFY", "COPY", "ADD"
      Object.SetProperty(Obj, "Enabled", True)
    Case "DELETE", "VIEW"
      Object.SetProperty(Obj, "Enabled", False)
  End Select

End

'--- Do the action of the detailscreen, accordingly given action ---
Public Function ActionOnDetailScreen(Frm As Form) As Integer

  '--- declare variables ---
  Dim StrNameArray As New String[0]
  Dim StrValueArray As New String[0]
  Dim StrQuery As String
  Dim IntI, IntRecID As Integer
  Dim rRes As Result

  '--- build array with all controls on the form, and the value they have ---
  BuildArrays(StrNameArray, StrValueArray, Frm)
  IntRecID = 0
  '--- next, build query, accordingly the given action for the detailscreen ---
  Select Case UCase(Main.ParseTag(Frm.Tag, 3, "|"))
    Case "ADD", "COPY"
      StrQuery = "INSERT INTO " & Main.ParseTag(Frm.Tag, 2, "|") & " ("
      For IntI = 0 To StrNameArray.Count - 1
        If StrNameArray[IntI] <> "CreationDate" And StrNameArray[IntI] <> "ModificationDate" And StrNameArray[IntI] <> "RecID" Then
          StrQuery = StrQuery & StrNameArray[IntI] & ","
        Endif
      Next
      StrQuery &= "CreationDate,ModificationDate,FK_Users) VALUES("
      For IntI = 0 To StrNameArray.Count - 1
        If StrNameArray[IntI] <> "CreationDate" And StrNameArray[IntI] <> "ModificationDate" And StrNameArray[IntI] <> "RecID" Then
          StrQuery = StrQuery & StrValueArray[IntI] & ","
        Endif
      Next
      StrQuery &= "'" & Format(Now, "yyyymmddhhnn") & "','" & Format(Now, "yyyymmddhhnn") & "'," & Main.sActiveUserID & ")"
    Case "DELETE"
      StrQuery = "DELETE FROM " & Main.ParseTag(Frm.Tag, 2, "|") & " WHERE RecID = "
      For IntI = 0 To StrNameArray.Count - 1
        If StrNameArray[IntI] = "RecID" Then
          StrQuery = StrQuery & StrValueArray[IntI]
          IntRecID = 0
          Break
        Endif
      Next
    Case "MODIFY"
      StrQuery = "UPDATE " & Main.ParseTag(Frm.Tag, 2, "|") & " SET "
      For IntI = 0 To StrNameArray.Count - 1
        If StrNameArray[IntI] <> "ModificationDate" And StrNameArray[IntI] <> "RecID" Then
          ' FIXME: Out of bounds
          Try StrQuery &= StrNameArray[IntI] & "=" & StrValueArray[IntI] & ","
        Endif
      Next
      StrQuery &= "ModificationDate='" & Format(Now, "yyyymmddhhnn") & "',FK_Users=" & Main.sActiveUserID & " WHERE RecID = "
      For IntI = 0 To StrNameArray.Count - 1
        If StrNameArray[IntI] = "RecID" Then
          StrQuery = StrQuery & StrValueArray[IntI]
          IntRecID = Val(StrValueArray[IntI])
          Break
        Endif
      Next
  End Select

  '--- finally, execute the query, and close the form ---
  Main.hDB.Exec(StrQuery)
  '--- when ADD or COPY, lookup new RecID ---
  If (Main.ParseTag(Frm.Tag, 3, "|")) = "ADD" Or (Main.ParseTag(Frm.Tag, 3, "|")) = "COPY" Then
    rRes = Main.hDB.Exec("SELECT LAST_INSERT_ID()")
    If rRes Then
      If rRes.Count > 0 Then
        IntRecID = CInt(rRes[rRes.Fields[0].Name])
      Endif
    Endif
  Endif
  rRes = Null
  '--- return RecID ---
  Return IntRecID

End

'--- loop trough all controls on the given form, and create and array with names & values (part of ActionOnDetailScreen) ---
Private Sub BuildArrays(StrNameArray As String[], StrValueArray As String[], Frm As Object)

  '--- declare variables ---
  Dim Obj As Object

  '--- loop trough all children, and put data in array ---
  For Each Obj In Frm.Children
    Select Case UCase(Object.Type(Obj))
      Case "CHECKBOX"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "BOOLEAN"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            If Object.GetProperty(Obj, "Value") = True Then
              StrValueArray.Add("1")
            Else
              StrValueArray.Add("0")
            Endif
        End Select
      Case "TEXTBOX", "TEXTAREA"
        Select Case UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 1, "|"))
          Case "COLOR"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add("'" & Object.GetProperty(Obj, "BackColor") & "'")
          Case "TEXT"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add("'" & Object.GetProperty(Obj, "Text") & "'")
          Case "QUERY"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 3, "|"))
          Case "NUMERIC"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add(Object.GetProperty(Obj, "Text"))
          Case "RECID"
            StrNameArray.add("RecID")
            StrValueArray.Add(Object.GetProperty(Obj, "Text"))
          Case "CREATIONDATE"
            StrNameArray.add("CreationDate")
            StrValueArray.Add("'" & Main.DateTimeFromAppToSQL(Object.GetProperty(Obj, "Text")) & "'")
          Case "DATE"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add("'" & Main.DateFromAppToSQL(Object.GetProperty(Obj, "Text")) & "'")
          Case "TIME"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add("'" & Main.TimeFromAppToSql(Object.GetProperty(Obj, "Text")) & "'")
          Case "DATETIME"
            StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
            StrValueArray.Add("'" & Main.DateTimeFromAppToSQL(Object.GetProperty(Obj, "Text")) & "'")
        End Select
      Case "COMBOBOX"
        '--- write code to retrieve ID from selected combobox item ---
        If UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "TRUE" Then
          StrNameArray.add(Right(Object.GetProperty(Obj, "Name"), Len(Object.GetProperty(obj, "Name")) - 3))
          StrValueArray.Add(GetComboID(Obj))
        Endif
    End Select
    BuildArrays(StrNameArray, StrValueArray, Obj)
  Next
  Finally

End

'--- do printfunction for filterdata ---
Public Sub PrintFilter(FrameFilter As Frame, ColVw As ColumnView, StrTitle As String, StrTag As String)

  '--- declare variables ---
  Dim StrFile As String

  '--- creating html file ---
  StrFile = CreateHTMLFile(FrameFilter, ColVw, StrTitle)
  '--- first, convert to PDF (htmldoc needs to be installed !), next print trough lpr ---
  '--- printing keeps in mind: color/gray - landscape/portrait - printername - number of copies (all this can be different for every screen and every user) ---
  PrintHTMLFile(StrFile, Main.ParseTag(StrTag, 7, "|"), Val(Main.ParseTag(StrTag, 8, "|")), Val(Main.ParseTag(StrTag, 9, "|")), Val(Main.ParseTag(StrTag, 10, "|")))

End

'--- create a HTML file, based on the filterdata (part of PrintFilter) ---
Private Function CreateHTMLFile(FrameFilter As Frame, ColVw As ColumnView, StrTitle As String) As String

  '--- declare variables ---
  Dim StrHTML, StrFile, StrImgFile, StrExtra As String
  Dim IntI As Integer
  Dim Obj As Object

  '--- header ---
  StrHTML = "<html><head></head>" & gb.NewLine
  StrHTML = StrHTML & "<!--" & gb.NewLine
  StrHTML = StrHTML & "<style type='text/css'> .inhoud {font-family: Tahoma, Geneva, sans-serif;font-size: 9px;}" & gb.NewLine
  StrHTML = StrHTML & ".header2 {font-family: Tahoma, Geneva, sans-serif;font-size: 14px;}</style>" & gb.NewLine
  StrHTML = StrHTML & "-->" & gb.NewLine
  StrHTML = StrHTML & "<body><table width='100%' border='0' cellspacing='0' cellpadding='5'><tr><td align=left class='inhoud'>"
  StrHTML = StrHTML & "<font color='FF0000'>[" & Main.sActiveUserID & "] " & StrTitle & "</font></td><td align=right class='inhoud'><i>" & ("Printed by") & " " & Main.sActiveUser & "</i></td></tr></table>" & gb.NewLine
  StrHTML = StrHTML & "<table width='100%' border='01' cellspacing='0' cellpadding='5'><tr><td colspan=" & CStr(ColVw.Columns.Count) & " align=center class='header2'><b><H3><font color='0000FF'>" & ("Filter Criteria") & "</font></H3></b></td></tr><tr>" & gb.NewLine
  '--- filter header ---
  For IntI = 0 To ColVw.Columns.Count - 1
    StrHTML = StrHTML & "<td class='inhoud'><H5><font color='0000FF'>" & ColVw.Columns[IntI].text & "</font></H5></td>" & gb.NewLine
  Next
  '--- add layout item for new tablerow ---
  StrHTML = StrHTML & "</tr><tr>" & gb.NewLine
  '--- filter data ---
  For IntI = 0 To ColVw.Columns.Count - 1
    For Each Obj In FrameFilter.Children
      If Val(Main.ParseTag(Object.GetProperty(obj, "Tag"), 2, "|")) = IntI And Object.Type(Obj) <> "Label" Then
        If Len(Trim(Object.GetProperty(Obj, "Text"))) > 0 Then
          StrHTML = StrHTML & "<td class='inhoud'><H6>" & Trim(Object.GetProperty(Obj, "Text")) & "</H6></td>" & gb.NewLine
        Else
          StrHTML = StrHTML & "<td class='inhoud'><H6><br></H6></td>" & gb.NewLine
        Endif
      Endif
    Next
  Next
  '--- count lines in result ColumnView ---
  IntI = 0
  ColVw.MoveFirst
  While ColVw.Item <> Null
    IntI = IntI + 1
    ColVw.MoveBelow
  Wend
  '--- fixed layout part ---
  StrHTML = StrHTML & "</tr><tr><td colspan=" & CStr(ColVw.Columns.Count) & " align=center class='header2'><b><H3><font color='0000FF'>" & CStr(IntI) & " " & ("Results") & "</font></H3></b></td></tr><tr>" & gb.NewLine
  '--- result header ---
  For IntI = 0 To ColVw.Columns.Count - 1
    StrHTML = StrHTML & "<td class='inhoud'><b><H5><font color='0000FF'>" & ColVw.Columns[IntI].text & "</font></H5></b></td>" & gb.NewLine
  Next
  '--- add layout item for new tablerow ---
  StrHTML = StrHTML & "</tr>" & gb.NewLine
  '--- add result data ---
  ColVw.MoveFirst
  While ColVw.Item <> Null
    StrHTML = StrHTML & "<tr>" & gb.NewLine
    For IntI = 0 To ColVw.Columns.Count - 1
      StrExtra = ""
      If IntI = 0 Then
        If ColVw.Item.Picture <> Null Then
          StrImgFile = Temp() & ".png"
          ColVw.Item.Picture.Image.Save(StrImgFile)
          StrExtra = "<img src='" & StrImgFile & "'>"
        Endif
      Endif
      If Len(Trim(ColVw.Item[IntI])) > 0 Then
        StrHTML = StrHTML & "<td class='inhoud'><H6>" & StrExtra & Trim(ColVw.Item[IntI]) & "</H6></td>"
      Else
        StrHTML = StrHTML & "<td class='inhoud'><H6>" & StrExtra & "<br></H6></td>"
      Endif
    Next
    ColVw.MoveBelow
    StrHTML = StrHTML & "</tr>" & gb.NewLine
  Wend
  '--- footer ---
  StrHTML = StrHTML & "</table></body></html>"
  '--- write StrHtml to tempfile ---
  StrFile = Temp() & ".html"
  File.Save(StrFile, StrHtml)
  Return StrFile

End

'--- convert the created HTML file to PDF, and then print the PDF (part of PrintFilter) ---
Private Sub PrintHTMLFile(StrHTMLFile As String, StrPrinterName As String, IntOrientation As Integer, IntColor As Integer, IntCopies As Integer)

  '--- declare variables ---
  Dim StrPDFFile, StrExtraPDF As String

  '--- set some variables ---
  StrPDFFile = Temp() & ".pdf"
  If IntOrientation = 0 Then
    StrExtraPDF = "--portrait"
  Else
    StrExtraPDF = "--landscape"
  Endif
  If IntColor = 0 Then
    StrExtraPDF = StrExtraPDF & " --gray"
  Else
    StrExtraPDF = StrExtraPDF & " --color"
  Endif
  '--- convert to PDF ---
  Shell "htmldoc " & StrExtraPDF & " -t pdf14 --continuous --no-jpeg --no-compression --footer " & Chr(34) & "D /" & Chr$(34) & " --outfile " & StrPDFFile & " --webpage " & StrHTMLFile Wait
  '--- print the PDF ---
  Shell "lpr -P " & StrPrinterName & " -# " & CStr(IntCopies) & " " & StrPDFFile Wait
  '--- delete the HTML & PDF file ---
  Kill StrHTMLFile
  Kill StrPDFFile

End

'--- put a picture into SQL DB, based on detailscreen ---
Public Sub BlobOnDetailScreen(IntRecID As Integer, StrFrmTag As String, PicBLOBicon As PictureBox)

  '--- declare variables ---
  Dim StrTmpFile As String

  StrTmpFile = Temp() & ".PNG"
  Try PicBLOBicon.Picture.Save(StrTmpFile)
  If Error Then
    '--- there is no picture ---
    Wait 0.01
  Else
    Main.BlobToDB(Main.ParseTag(StrFrmTag, 2, "|"), "RecID=&1", IntRecID, Right(PicBLOBicon.Name, Len(PicBLOBicon.Name) - 3), Main.ParseTag(PicBLOBicon.Tag, 2, "|"), StrTmpFile)
    Kill StrTmpFile
  Endif

End

'--- show a filter, make a selection, and process it ! ---
Public Sub DoQuery(TxtField As TextBox, FrmDetail As Form)

  '--- declare variables ---
  Dim rRes As Result

  IntPassedKey = 0
  VisibilitySelectBtn(FrmDetail, True)
  FrmDetail.ShowModal
  VisibilitySelectBtn(FrmDetail, False)
  If IntPassedKey > 0 Then
    '--- change text and tag of TxtField ---
    TxtField.tag = Main.ParseTag(TxtField.Tag, 1, "|") & "|" & Main.ParseTag(TxtField.Tag, 2, "|") & "|" & CStr(IntPassedKey)
    rRes = Main.hDB.Exec(Main.ParseTag(TxtField.tag, 2, "|") & CStr(IntPassedKey))
    TxtField.Text = rRes[rRes.Fields[1].Name]
    rRes = Null
  Endif

End

'--- search for the select button on a filterscreen, and make it visible or invisible ---
Private Sub VisibilitySelectBtn(ObjDetail As Object, BoolVisible As Boolean)

  '--- declare variables ---
  Dim Obj As Object

  For Each Obj In ObjDetail.Children
    If UCase(Object.Type(Obj)) = "BUTTON" Then
      If UCase(Main.ParseTag(Object.GetProperty(Obj, "Tag"), 2, "|")) = "SELECT" Then
        Object.SetProperty(Obj, "Visible", BoolVisible)
      Endif
    Endif
    VisibilitySelectBtn(Obj, BoolVisible)
  Next
  Finally

End

'--- set the IntPassedKey to the selected value of a columnview of a filterscreen ---
Public Sub SetKey(ColVw As ColumnView, Frm As Form)

  IntPassedKey = Val(Right(ColVw.Current.Key, Len(ColVw.Current.Key) - 1))
  Frm.Close

End
