' Gambas module file

' Description:
' Weather.module
' Provides various weather related functions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Marco Frijmann, The Netherlands
' Updated to work with new api by Ron Klinkien.

' Read file called COPYING for license details.

Public hJSONweather As HttpClient
Public tWeatherUG As New Timer
Public sBuffer As String
Public cCityList As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  JSONWeather()
  Try tWeatherUG.Stop

  ' create refresh timer
  tWeatherUG = New Timer As "tWeatherUG"
  tWeatherUG.Delay = Main.iWeatherUGRefresh * 1000
  tWeatherUG.Start
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(("[WeatherUG] Started refresh timer."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tWeatherUG_Timer()

  JSONWeather()
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(("[WeatherUG] Updating data."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a GET call to Wunderground and returns a JSON collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WeatherUGGetCity(sApiKey As String, sCity As String) As String

  Dim hJSONweatherGetCity As HttpClient
  Dim sURL As String
  Dim sResult As String
  Dim sBufferGetCity As String
  Dim cResponse As New Collection
  Dim iCnt As Integer

   cCityList.Clear

  ' If no city is supplied, try the auto ip detection of WeatherUnderground
  If sCity = "" Then
    sCity = "autoip"
  Endif
  
  sURL = "http://api.wunderground.com/api/" & sApiKey & "/geolookup/q/" & sCity & ".json"
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(("[WeatherUG] Fetching data for Country/City '" & IIf(sCity = "autoip", "Auto-Detection", sCity) & "' with request '") & sURL & "'")

  hJSONweatherGetCity = New HttpClient As "JSONweatherGetCity"
  hJSONweatherGetCity.URL = sURL
  hJSONweatherGetCity.Async = False
  hJSONweatherGetCity.TimeOut = 5
  hJSONweatherGetCity.Get
 
  If hJSONweatherGetCity.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bPushoverDebug Then Main.WriteDebugLog("[WeatherUG] Error searching for Country/City '" & IIf(sCity = "autoip", "Auto-Detection", sCity) & "', Code=" & hJSONweatherGetCity.Status & " HTTP=" & hJSONweatherGetCity.Code)

    sResult = "Failed, Code=" & hJSONweatherGetCity.Status & ", HTTP=" & hJSONweatherGetCity.Code
    Return sResult
  Else
    ' success or error - read the data
    If Lof(hJSONweatherGetCity) Then sBufferGetCity = Read #hJSONweatherGetCity, Lof(hJSONweatherGetCity)
    cResponse = JSON.Decode(sBufferGetCity)

    ' Check if get a valid response
    If cResponse.Exist("response") Then

      If Not cResponse["response"].Exist("error") Then

        ' We can 2 type of response: 1 entry of more then 1
          ' Multiple responses
        If cResponse["response"].Exist("results") Then

          For iCnt = 0 To cResponse["response"]["results"].Count - 1
            Try cCityList.Add(cResponse["response"]["results"][iCnt]["country_name"] & "/" & cResponse["response"]["results"][iCnt]["city"], iCnt)
          Next

          Return ""
        Else
          ' Only 1 entry - easy
          If cResponse.Exist("location") Then
             cCityList.Add(cResponse["location"]["country_name"] & "/" & cResponse["location"]["city"], 0)

            Return ""
          Else
            ' Error
            Return "Message=Unknown JSON response"
          Endif

        Endif

      Else
        ' Error
        Try sResult = "Message=" & cResponse["response"]["error"]["description"]
        Return sResult
      End If
    Else
      Return "Message=Unknown JSON response"
    End If

  End If

  Return ""
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a GET call to Wunderground and returns a JSON collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONWeather(Optional sCity As String)

  Dim sURL As String
  
  If sCity = "" Then sCity = Main.sWeatherUGCity

  sURL = "http://api.wunderground.com/api/" & Main.sWeatherUGApiKey & "/astronomy/conditions/forecast/q/" & sCity & ".json"
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(("[WeatherUG] Fetching data for Country/City '" & sCity & "' with request '") & sURL & "'")

  hJSONweather = New HttpClient As "JSONweather"
  hJSONweather.URL = sURL
  hJSONweather.Async = True
  hJSONweather.TimeOut = 5
  hJSONweather.Get
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONweather_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONweather_Finished()

  Select Last.Code
    Case 200
      If Main.bWeatherUGDebug Then Main.WriteDebugLog(("[WeatherUG] Received '") & sBuffer & "'")
      WeatherToDatabase(JSON.Decode(Replace(sBuffer, "&deg;", "deg")))
    Case Else
      If Main.bWeatherUGDebug Then Main.WriteLog(("[WeatherUG] Unknown error occured while trying to fetch weather data!"))
  End Select
  Last.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Saves the JSON weahter data to weather table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WeatherToDatabase(cJSON As Collection)

  Dim sEpoch, sTimeUpdate, sTOD, sTemp As String
  Dim arWindArray, arWindGustArray As New Collection
  Dim arForecast As New String[]
  Dim iCnt As Integer

  Try sEpoch = cJSON["current_observation"]["observation_epoch"]
  If Error Then
    If Main.bWeatherUGDebug Then Main.WriteDebugLog("ERROR: " & cJSON["response"]["error"]["type"] & " " & cJSON["response"]["error"]["description"])
  Else
    ' to fix:
    ' arWindArray = WindString(CFloat(cJSON["current_observation"]["wind_mph"]))  
    ' arWindGustArray = WindString(CFloat(cJSON["current_observation"]["wind_gust_mph"]))

    If Main.GlobalVar["Time_Of_Day"] = "evening" Then
      sTOD = "nt_"
    Else
      sTOD = ""
    End If

    Shell "gawk 'BEGIN{print strftime(\"%d-%m-%Y %H:%M\"," & cJSON["current_observation"]["observation_epoch"] & ")}'" To sTimeUpdate
 
    If Main.bWeatherUGDebug Then
      Main.WriteDebugLog(("[WeatherUG] Current Weather: '"))
      Main.WriteDebugLog(("[WeatherUG] observation_epoch = '") & cJSON["current_observation"]["observation_epoch"] & "'")
      Main.WriteDebugLog(("[WeatherUG] wind_dir = '") & cJSON["current_observation"]["wind_dir"] & "'")
      Main.WriteDebugLog(("[WeatherUG] temp_c = '") & cJSON["current_observation"]["temp_c"] & "'")
      Main.WriteDebugLog(("[WeatherUG] icon = '") & sTOD & " " & cJSON["current_observation"]["icon"] & "'")
      Main.WriteDebugLog(("[WeatherUG] relative_humidity = '") & cJSON["current_observation"]["relative_humidity"] & "'")
      Main.WriteDebugLog(("[WeatherUG] pressure_mb = '") & cJSON["current_observation"]["pressure_mb"] & "'")
      Main.WriteDebugLog(("[WeatherUG] heat_index_c = '") & cJSON["current_observation"]["heat_index_c"] & "'")
      Main.WriteDebugLog(("[WeatherUG] windchill_c = '") & cJSON["current_observation"]["windchill_c"] & "'")
      Main.WriteDebugLog(("[WeatherUG] dewpoint_c = '") & cJSON["current_observation"]["dewpoint_c"] & "'")
      Main.WriteDebugLog(("[WeatherUG] wind_degrees = '") & cJSON["current_observation"]["wind_degrees "] & "'")
      Main.WriteDebugLog(("[WeatherUG] wind_gust = '") & arWindArray[0] & "'")
      Main.WriteDebugLog(("[WeatherUG] visibility_km = '") & cJSON["current_observation"]["visibility_km"] & "'")
      Main.WriteDebugLog(("[WeatherUG] precip_1hr_metric = '") & cJSON["current_observation"]["precip_1hr_metric"] & "'")
      Main.WriteDebugLog(("[WeatherUG] precip_today_metric = '") & cJSON["current_observation"]["precip_today_metric"] & "'")
      Main.WriteDebugLog(("[WeatherUG] percentilluminated = '") & cJSON["moon_phase"]["percentIlluminated"] & "'")
      Main.WriteDebugLog(("[WeatherUG] ageofmoon = '") & cJSON["moon_phase"]["ageOfMoon"] & "'")
      Main.WriteDebugLog(("[WeatherUG] weather = '") & cJSON["current_observation"]["weather"] & "'")
      Main.WriteDebugLog(("[WeatherUG] wind = '") & cJSON["current_observation"]["wind_string"] & "'")
      Main.WriteDebugLog(("[WeatherUG] time = '") & sTimeUpdate & "'")
      Main.WriteDebugLog(("[WeatherUG] city= '") & cJSON["current_observation"]["city"] & "'")
      Main.WriteDebugLog(("[WeatherUG] country = '") & cJSON["current_observation"]["country"] & "'")
      Endif

      ' insert database or globalvar save code here

      'If cJSON["current_observation"]["observation_epoch"] <> "" Then Shell "gawk 'BEGIN{print strftime(\"%d-%m-%Y %H:%M\"," & cJSON["current_observation"]["observation_epoch"] & ")}'" To sTimeUpdate
      ' Main.hDB.Exec("INSERT INTO domotiga.weather (observation_epoch, wind_dir, temp_c, icon, relative_humidity, pressure_mb, heat_index_c, windchill_c, dewpoint_c, wind_degrees, wind_gust, visibility_km, precip_1hr_metric, precip_today_metric, percentilluminated, ageofmoon, weather_text, wind, time, city, country)VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21});", cJSON["current_observation"]["observation_epoch"], cJSON["current_observation"]["wind_dir"], cJSON["current_observation"]["temp_c"], sTOD & " " & cJSON["current_observation"]["icon"], cJSON["current_observation"]["relative_humidity"], cJSON["current_observation"]["pressure_mb"], cJSON["current_observation"]["heat_index_c"], cJSON["current_observation"]["windchill_c"], cJSON["current_observation"]["dewpoint_c"], cJSON["current_observation"]["wind_degrees"], arWindArray[0] & ";" & arWindArray[1] & ";" & arWindArray[2], cJSON["current_observation"]["visibility_km"], cJSON["curr
      ' Try Me.PicWindDir.Picture = Picture.Load(XMLParser.ReturnWindDirectionPic(cJSON["current_observation"]["wind_dir"]))
       For iCnt = 0 To cJSON["forecast"]["simpleforecast"]["forecastday"].Count - 1
        sTemp = CStr(cJSON["forecast"]["txt_forecast"]["forecastday"][iCnt]["fcttext_metric"])
        sTemp = CStr(Replace(sTemp, ".", "::"))
        arForecast = Split(sTemp, "::")
        If Main.bWeatherUGDebug Then
           Main.WriteDebugLog(("[WeatherUG] Weather forecast for ") & cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["date"]["weekday"] & ":")
           Main.WriteDebugLog(("[WeatherUG] text = '") & arForecast[0] & "'")
           Main.WriteDebugLog(("[WeatherUG] high temp = '") & cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["high"]["celsius"] & "'")
           Main.WriteDebugLog(("[WeatherUG] low temp = '") & cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["low"]["celsius"] & "'")
        Endif
        ' Main.hDB.Exec("INSERT INTO domotiga.weather_forecast (text,hTemp, lTemp,day)VALUES (&1, &2, &3, &4);", Main.TranslateViaInternet(arForecast[0], Main.sAppLanguage), , , )
      Next

  Endif

Catch
   If Main.bWeatherUGDebug Then Main.WriteDebugLog("[WeatherUG] ERROR: " & Error.text & " at " & Error.where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a readable winddirection string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WeatherStrip(sWeatherString As String) As String

  Dim sWeatherArray As Array
  Dim IntI As Integer

  sWeatherString = Replace(sWeatherString, "-", " ")
  sWeatherArray = Split(sWeatherString, " ")

  If sWeatherArray.Count > 1
    sWeatherString = ""
    For IntI = 0 To sWeatherArray.Count - 3
      If IntI > 0 Then
        sWeatherString = sWeatherString & " " & sWeatherArray[IntI]
      Else
        sWeatherString = sWeatherArray[IntI]
      End If
    Next
  End If
  Return sWeatherString

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts MPH to metric seconds and beaufort
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WindString(WindSpeed As Float) As Array

  Dim arReturn As New Array
  Dim iBeaufort As Integer
  Dim WindSpeedKMH, WindSpeedMS As Float

  If WindSpeed < 1 Then
    iBeaufort = 0
    Else If WindSpeed >= 1 And WindSpeed <= 3 Then
    iBeaufort = 1
    Else If WindSpeed > 3 And WindSpeed <= 7 Then
    iBeaufort = 2
    Else If WindSpeed > 7 And WindSpeed <= 12 Then
    iBeaufort = 3
    Else If WindSpeed > 12 And WindSpeed <= 17 Then
    iBeaufort = 4
    Else If WindSpeed > 17 And WindSpeed <= 24 Then
    iBeaufort = 5
    Else If WindSpeed > 24 And WindSpeed <= 30 Then
    iBeaufort = 6
    Else If WindSpeed > 30 And WindSpeed <= 38 Then
    iBeaufort = 7
    Else If WindSpeed > 38 And WindSpeed <= 46 Then
    iBeaufort = 8
    Else If WindSpeed > 46 And WindSpeed <= 54 Then
    iBeaufort = 9
    Else If WindSpeed > 54 And WindSpeed <= 63 Then
    iBeaufort = 10
    Else If WindSpeed > 63 And WindSpeed <= 72 Then
    iBeaufort = 11
    Else If WindSpeed > 72 Then
    iBeaufort = 12
  End If
  arReturn[0] = Round(WindSpeed * 1.609344, -1) ' km/h
  arReturn[1] = Round(arReturn[0] / 3.6, -2) ' m/s
  arReturn[2] = iBeaufort ' beaufort
  Return arReturn

End
