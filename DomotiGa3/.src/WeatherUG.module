' Gambas module file

' Description:
' Weather.module
' Provides various weather related functions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Marco Frijmann, The Netherlands
' Updated to work with new api by Ron Klinkien.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "WeatherUG"
Public PluginType As Integer = Plugin.Type_Module
Public PluginFriendlyName As String = "WeatherUG"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[WeatherUG] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sApiKey As String
Private $sCity As String
Private $iRefresh As Integer
Private $bWeatherUGDebug As Boolean

Public hJSONweather As HttpClient
Public tWeatherUG As New Timer
Public sBuffer As String
Public cCityList As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance 
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sApiKey = cPl.Settings["apikey"]
  $sCity = cPl.Settings["city"]
  $iRefresh = cPl.Settings["polltime"]
  $bWeatherUGDebug = cPl.Settings["debug"]

  ' Initialize 
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tWeatherUG.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  JSONWeather()
  Try tWeatherUG.Stop

  ' create refresh timer
  tWeatherUG = New Timer As "tWeatherUG"
  tWeatherUG.Delay = Main.iWeatherUGRefresh * 1000
  tWeatherUG.Start
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Started refresh timer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tWeatherUG_Timer()

  JSONWeather()
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Updating data.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a GET call to Wunderground and returns a JSON collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WeatherUGGetCity(sApiKey As String, sCity As String) As String

  Dim hJSONweatherGetCity As HttpClient
  Dim sURL, sResult, sBufferGetCity As String
  Dim cResponse As New Collection
  Dim iCnt As Integer

  cCityList.Clear

  ' If no city is supplied, try the auto ip detection of WeatherUnderground
  If sCity = "" Then
    sCity = "autoip"
  Endif

  sURL = "http://api.wunderground.com/api/" & sApiKey & "/geolookup/q/" & sCity & ".json"
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Fetching data for Country/City '" & IIf(sCity = "autoip", "Auto-Detection", sCity) & "' with request '" & sURL & "'")

  hJSONweatherGetCity = New HttpClient As "JSONweatherGetCity"
  hJSONweatherGetCity.URL = sURL
  hJSONweatherGetCity.Async = False
  hJSONweatherGetCity.TimeOut = 5
  hJSONweatherGetCity.Get
 
  If hJSONweatherGetCity.Status < 0 Then
    ' Failure fetching data or apikey is invalid
    If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Error searching for Country/City '" & IIf(sCity = "autoip", "Auto-Detection", sCity) & "', Code=" & hJSONweatherGetCity.Status & " HTTP=" & hJSONweatherGetCity.Code)

    sResult = "Failed, Code=" & hJSONweatherGetCity.Status & ", HTTP=" & hJSONweatherGetCity.Code
    Return sResult
  Else
    ' success or error - read the data
    If Lof(hJSONweatherGetCity) Then sBufferGetCity = Read #hJSONweatherGetCity, Lof(hJSONweatherGetCity)
    cResponse = JSON.Decode(sBufferGetCity)

    ' Check if get a valid response
    If cResponse.Exist("response") Then
      If Not cResponse["response"].Exist("error") Then
        ' We can 2 types of response: 1 entry of more then 1
        ' Multiple responses
        If cResponse["response"].Exist("results") Then
          For iCnt = 0 To cResponse["response"]["results"].Count - 1
            Try cCityList.Add(cResponse["response"]["results"][iCnt]["country_name"] & "/" & cResponse["response"]["results"][iCnt]["city"], iCnt)
          Next
          Return ""
        Else
          ' Only 1 entry - easy
          If cResponse.Exist("location") Then
             cCityList.Add(cResponse["location"]["country_name"] & "/" & cResponse["location"]["city"], 0)
            Return ""
          Else
            ' Error
            Return "Message=Unknown JSON response"
          Endif
        Endif
      Else
        ' Error
        Try sResult = "Message=" & cResponse["response"]["error"]["description"]
        Return sResult
      Endif
    Else
      Return "Message=Unknown JSON response"
    Endif
  Endif
  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a GET call to Wunderground and returns a JSON collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONWeather(Optional sCity As String)

  Dim sURL As String

  If sCity = "" Then sCity = Main.sWeatherUGCity

  sURL = "http://api.wunderground.com/api/" & Main.sWeatherUGApiKey & "/astronomy/conditions/forecast/q/" & sCity & ".json"
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Fetching data for Country/City '" & sCity & "' with request '" & sURL & "'")

  hJSONweather = New HttpClient As "JSONweather"
  hJSONweather.URL = sURL
  hJSONweather.Async = True
  hJSONweather.TimeOut = 5
  hJSONweather.Get

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONweather_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONweather_Finished()

  Select Last.Code
    Case 200
      If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Received '" & sBuffer & "'")
      WeatherToDatabase(JSON.Decode(Replace(sBuffer, "&deg;", "deg")))
    Case Else
      If Main.bWeatherUGDebug Then Main.WriteLog(LogLabel & "Unknown error occured while trying to fetch weather data!")
  End Select
  Last.Close

End

Private Sub TimeSinceEpoch(sTime As String) As String

  Dim gTime As Date

  ' calculate time since epoch
  gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val(sTime))

  Return Format$(gTime, "yyyy/mm/dd hh:nn:ss")

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Saves the JSON weahter data to weather table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WeatherToDatabase(cJSON As Collection)

  Dim sEpoch, sTimeUpdate, sTOD, sTemp, sHeatIndex, sWindChill, sDewPoint, sWindGust, sVisibility, sPrecip1hr, sPrecipToday, sPressure, sLowTemp, sHighTemp As String
  Dim aWind, aWindGust, aForecast As New String[]
  Dim iCnt As Integer

  Try sEpoch = cJSON["current_observation"]["observation_epoch"]
  If Error Then
    If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "ERROR: " & cJSON["response"]["error"]["type"] & " " & cJSON["response"]["error"]["description"])
  Else
    'calculcat and concat all different units
    aWind = WindString(CFloat(cJSON["current_observation"]["wind_mph"]))
    aWindGust = WindString(CFloat(cJSON["current_observation"]["wind_gust_mph"]))

    ' create correct icon name
    sTOD = IIf(Main.GetGlobalVar("Time_Of_Day") = "evening", "nt_", "")
    sTimeUpdate = TimeSinceEpoch(cJSON["current_observation"]["observation_epoch"])

    If Main.sTemperature = "Â°C" Then
      sTemp = cJSON["current_observation"]["temp_c"]
      sHeatIndex = cJSON["current_observation"]["heat_index_c"]
      sWindChill = cJSON["current_observation"]["windchill_c"]
      sDewPoint = cJSON["current_observation"]["dewpoint_c"]
      sWindGust = aWind[0]
      sVisibility = cJSON["current_observation"]["visibility_km"]
      sPrecip1hr = cJSON["current_observation"]["precip_1hr_metric"]
      sPrecipToday = cJSON["current_observation"]["precip_today_metric"]
      sPressure = cJSON["current_observation"]["pressure_mb"]
    Else
      sTemp = cJSON["current_observation"]["temp_f"]
      sHeatIndex = cJSON["current_observation"]["heat_index_f"]
      sWindChill = cJSON["current_observation"]["windchill_f"]
      sDewPoint = cJSON["current_observation"]["dewpoint_f"]
      sWindGust = aWind[3]
      sVisibility = cJSON["current_observation"]["visibility_mi"]
      sPrecip1hr = cJSON["current_observation"]["precip_1hr_in"]
      sPrecipToday = cJSON["current_observation"]["precip_today_in"]
      sPressure = cJSON["current_observation"]["pressure_in"]
    Endif

    ' live data
    If Main.bWeatherUGDebug Then
      Main.WriteDebugLog(LogLabel & "Current Weather: '")
      Main.WriteDebugLog(LogLabel & "observation_epoch = '" & cJSON["current_observation"]["observation_epoch"] & "'")
      Main.WriteDebugLog(LogLabel & "time = '" & sTimeUpdate & "'")
      Main.WriteDebugLog(LogLabel & "temp = '" & sTemp & "'")
      Main.WriteDebugLog(LogLabel & "icon = '" & sTOD & cJSON["current_observation"]["icon"] & "'")
      Main.WriteDebugLog(LogLabel & "relative_humidity = '" & cJSON["current_observation"]["relative_humidity"] & "'")
      Main.WriteDebugLog(LogLabel & "pressure = '" & sPressure & "'")
      Main.WriteDebugLog(LogLabel & "heat_index = '" & sHeatIndex & "'")
      Main.WriteDebugLog(LogLabel & "windchill = '" & sWindChill & "'")
      Main.WriteDebugLog(LogLabel & "dewpoint = '" & sDewPoint & "'")
      Main.WriteDebugLog(LogLabel & "wind_dir = '" & cJSON["current_observation"]["wind_dir"] & "'")
      Main.WriteDebugLog(LogLabel & "wind_degrees = '" & cJSON["current_observation"]["wind_degrees "] & "'")
      Main.WriteDebugLog(LogLabel & "wind = '" & cJSON["current_observation"]["wind_string"] & "'")
      Main.WriteDebugLog(LogLabel & "wind_gust = '" & sWindGust & "'")
      Main.WriteDebugLog(LogLabel & "visibility = '" & sVisibility & "'")
      Main.WriteDebugLog(LogLabel & "precip_1hr = '" & sPrecip1hr & "'")
      Main.WriteDebugLog(LogLabel & "precip_today = '" & sPrecipToday & "'")
      Main.WriteDebugLog(LogLabel & "percentilluminated = '" & cJSON["moon_phase"]["percentIlluminated"] & "'")
      Main.WriteDebugLog(LogLabel & "ageofmoon = '" & cJSON["moon_phase"]["ageOfMoon"] & "'")
      Main.WriteDebugLog(LogLabel & "weather = '" & cJSON["current_observation"]["weather"] & "'")
      Main.WriteDebugLog(LogLabel & "uv index = '" & cJSON["current_observation"]["UV"] & "'")
      Main.WriteDebugLog(LogLabel & "city= '" & cJSON["current_observation"]["display_location"]["city"] & "'")
      Main.WriteDebugLog(LogLabel & "country = '" & cJSON["current_observation"]["display_location"]["state_name"] & "'")
    Endif

    ' update database weather table
    Main.hDB.Exec("UPDATE weather SET observation_epoch=&1,wind_dir=&2,temp=&3,icon=&4,relative_humidity=&5,pressure=&6,heat_index=&7,windchill=&8,dewpoint=&9,wind_degrees=&{10},wind_gust=&{11},visibility=&{12},precip_1hr=&{13},precip_today=&{14},percentilluminated=&{15},ageofmoon=&{16},weather=&{17},wind=&{18},time=&{19},city=&{20},country=&{21},uv=&{22} WHERE id = 1",
    cJSON["current_observation"]["observation_epoch"], cJSON["current_observation"]["wind_dir"], sTemp, sTOD & cJSON["current_observation"]["icon"], cJSON["current_observation"]["relative_humidity"], sPressure, sHeatIndex, sWindChill, sDewPoint, cJSON["current_observation"]["wind_degrees"], aWind[0] & ";" & aWind[1] & ";" & aWind[2] & ";" & aWind[3], sVisibility, sPrecip1hr, sPrecipToday, cJSON["moon_phase"]["percentIlluminated"], cJSON["moon_phase"]["ageOfMoon"], WeatherUG.WeatherStrip(Main.TranslateViaInternet(cJSON["current_observation"]["weather"] & "+weather+context", Main.sAppLanguage)), aWindGust[0] & ";" & aWindGust[1] & ";" & aWindGust[2] & ";" & aWindGust[3], sTimeUpdate, cJSON["current_observation"]["display_location"]["city"], cJSON["current_observation"]["display_location"]["state_name"], cJSON["current_observation"]["UV"])

    ' update globalvars
    Main.SetGlobalVar("Weather_Temp", sTemp, True)
    Main.SetGlobalVar("Weather_Humidity", cJSON["current_observation"]["relative_humidity"], True)
    Main.SetGlobalVar("Weather_Pressure", sPressure, True)
    Main.SetGlobalVar("Weather_HeatIndex", sHeatIndex, True)
    Main.SetGlobalVar("Weather_WindChill", sWindChill, True)
    Main.SetGlobalVar("Weather_Dewpoint", sDewPoint, True)
    Main.SetGlobalVar("Weather_WindDir", cJSON["current_observation"]["wind_dir"], True)
    Main.SetGlobalVar("Weather_Wind", cJSON["current_observation"]["wind_string"], True)
    Main.SetGlobalVar("Weather_WindGust", sWindGust, True)
    Main.SetGlobalVar("Weather_Weather", cJSON["current_observation"]["weather"], True)
    Main.SetGlobalVar("Weather_UVIndex", cJSON["current_observation"]["UV"], True)
    Main.SetGlobalVar("Weather_LastSeen", Now(), True)

    ' ' forecast data
    ' For iCnt = 0 To cJSON["forecast"]["simpleforecast"]["forecastday"].Count - 1
    '   sTemp = CStr(cJSON["forecast"]["txt_forecast"]["forecastday"][iCnt]["fcttext_metric"])
    '   sTemp = CStr(Replace(sTemp, ".", "::"))
    '   aForecast = Split(sTemp, "::")
    '   If Main.sTemperature = "Â°C" Then
    '     sLowTemp = cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["low"]["celsius"]
    '     sHighTemp = cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["high"]["celsius"]
    '   Else
    '     sLowTemp = cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["low"]["fahrenheit"]
    '     sHighTemp = cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["high"]["fahrenheit"]
    '   Endif
    '   If Main.bWeatherUGDebug Then
    '     Main.WriteDebugLog(LogLabel & "Weather forecast for " & cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["date"]["weekday"] & ":")
    '     Main.WriteDebugLog(LogLabel & "text = '") & aForecast[0] & "'")
    '     Main.WriteDebugLog(LogLabel & "high temp = '") & sHighTemp & "'")
    '     Main.WriteDebugLog(LogLabel & "low temp = '") & sLowTemp & "'")
    '   Endif
    '   ' update records
    '   ' Main.hDB.Exec("UPDATE weather_forecast SET text = &1, htemp = &2, ltemp = &3, day = &4 WHERE id = &5", Main.TranslateViaInternet(aForecast[0], Main.sAppLanguage), sHighTemp, sLowTemp, cJSON["forecast"]["simpleforecast"]["forecastday"][iCnt]["date"]["weekday"], iCnt)
    ' Next
  Endif

Catch
   If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "ERROR: " & Error.text & " at " & Error.where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a readable weather string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WeatherStrip(sWeatherString As String) As String

  Dim aWeather As New String[]
  Dim iCnt As Integer

  sWeatherString = Replace(sWeatherString, "-", " ")
  aWeather = Split(sWeatherString, " ")

  If aWeather.Count > 1
    sWeatherString = ""
    For iCnt = 0 To aWeather.Count - 3
      If iCnt > 0 Then
        sWeatherString &= " " & aWeather[iCnt]
      Else
        sWeatherString = aWeather[iCnt]
      Endif
    Next
  Endif
  Return sWeatherString

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts MPH to metric seconds and beaufort
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WindString(WindSpeed As Float) As String[]

  Dim aReturn As New String[]
  Dim iBeaufort As Integer

  If WindSpeed < 1 Then
    iBeaufort = 0
  Else If WindSpeed >= 1 And WindSpeed <= 3 Then
    iBeaufort = 1
  Else If WindSpeed > 3 And WindSpeed <= 7 Then
    iBeaufort = 2
  Else If WindSpeed > 7 And WindSpeed <= 12 Then
    iBeaufort = 3
  Else If WindSpeed > 12 And WindSpeed <= 17 Then
    iBeaufort = 4
  Else If WindSpeed > 17 And WindSpeed <= 24 Then
    iBeaufort = 5
  Else If WindSpeed > 24 And WindSpeed <= 30 Then
    iBeaufort = 6
  Else If WindSpeed > 30 And WindSpeed <= 38 Then
    iBeaufort = 7
  Else If WindSpeed > 38 And WindSpeed <= 46 Then
    iBeaufort = 8
  Else If WindSpeed > 46 And WindSpeed <= 54 Then
    iBeaufort = 9
  Else If WindSpeed > 54 And WindSpeed <= 63 Then
    iBeaufort = 10
  Else If WindSpeed > 63 And WindSpeed <= 72 Then
    iBeaufort = 11
  Else If WindSpeed > 72 Then
    iBeaufort = 12
  Endif
  aReturn.Add(Round(WindSpeed * 1.609344, -1)) ' km/h
  aReturn.Add(Round(aReturn[0] / 3.6, -2)) ' m/s
  aReturn.Add(iBeaufort) ' beaufort
  aReturn.Add(WindSpeed) ' mph
  Return aReturn

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a readable winddirection string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WindDirString(sWinDir As String) As String

  Dim iWinDirLen, IntI As Integer
  Dim sChar, sDirection, TxtWindDir, sBackUpDirection, cSep As String

  If sWinDir <> "North" And sWinDir <> "East" And sWinDir <> "South" And sWinDir <> "West" Then
    iWinDirLen = Len(sWinDir)
     For IntI = 1 To iWinDirLen
      sChar = Mid(sWinDir, IntI, 1)
        Select Case sChar
          Case "N"
            sDirection = ("North")
          Case "E"
            sDirection = ("East")
          Case "S"
           sDirection = ("South")
          Case "W"
            sDirection = ("West")
        End Select
        If iWinDirLen > 2 Then
          If IntI = 1
            TxtWindDir = sDirection
          Else
            If sDirection = sBackUpDirection Then
              cSep = ","
            Else
              If IntI = 2
                cSep = ","
              Else
                cSep = "/"
              Endif
            Endif
            TxtWindDir = TxtWindDir & cSep & sDirection
          Endif
        Else
          If IntI > 1
          cSep = "/"
          Endif
          TxtWindDir = TxtWindDir & cSep & sDirection
          Endif
        sBackUpDirection = sDirection
      Next
    Else
    TxtWindDir = WeatherStrip(Main.TranslateViaInternet(sWinDir & "+weather+context", Main.sAppLanguage))
  Endif
  Return TxtWindDir

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Fetches Wunderground forecast data and returns a JSON collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSONWeatherForecast(Optional sCity As String) As Collection

  Dim sURL, sBuffer As String
  Dim cJSON As Collection
  Dim hJSONweatherForecast As HttpClient

  If sCity = "" Then sCity = Main.sWeatherUGCity

  sURL = "http://api.wunderground.com/api/" & Main.sWeatherUGApiKey & "/astronomy/conditions/forecast/q/" & sCity & ".json"
  If Main.bWeatherUGDebug Then Main.WriteDebugLog(LogLabel & "Fetching data for Country/City '" & sCity & "' with request '" & sURL & "'")

  hJSONweatherForecast = New HttpClient As "JSONweatherForecast"
  hJSONweatherForecast.URL = sURL
  hJSONweatherForecast.Async = False
  hJSONweatherForecast.TimeOut = 3
  hJSONweatherForecast.Get

  ' success - read the data
  If Lof(hJSONweatherForecast) Then Read #hJSONweatherForecast, sBuffer, Lof(hJSONweatherForecast)

  ' return the JSON collection
  Return JSON.Decode(Replace(sBuffer, "&deg;", "deg"))

End
