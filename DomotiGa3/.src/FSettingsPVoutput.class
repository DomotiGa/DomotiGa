' Gambas class file

' Description:
' FSettingsPVoutput.class
' Settings form for PVoutput upload.

' Development Status:
' Development just started.

' Links:
' http://www.pvoutput.org

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Pieter Blom in 2013.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize buttons and fill in current values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)

  chkEnabled.Value = Main.bPVoutputEnabled
  txtApi.Text = Main.sPVoutputApi
  txtId.Text = Main.sPVoutputId
  chkDebug.Value = Main.bPVoutputDebug
  txtPushTime.Text = Main.iPVoutputPushTime

  txtApi.Enabled = Main.bPVoutputEnabled
  txtId.Enabled = Main.bPVoutputEnabled
  chkDebug.Enabled = Main.bPVoutputEnabled
  btnUpload.Enabled = Main.bPVoutputEnabled
  txtPushTime.Enabled = Main.bPVoutputEnabled
  cmbSensor.Enabled = Main.bPVoutputEnabled
  cmbValue.Enabled = Main.bPVoutputEnabled
  cmbUsageSensor.Enabled = Main.bPVoutputEnabled
  cmbUsageValue.Enabled = Main.bPVoutputEnabled
  cmbTempSensor.Enabled = Main.bPVoutputEnabled
  cmbTempValue.Enabled = Main.bPVoutputEnabled

  FillDevices()
  FillValue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' fill comboboxes with available devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FillDevices()

  Dim rResult, rDevice As Result
  Dim iCount, iDevice As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is true ORDER BY name")
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  End If

  cmbValue.Add("", 0)
  cmbValue.Add("Value", 1)
  cmbValue.Add("Value2", 2)
  cmbValue.Add("Value3", 3)
  cmbValue.Add("Value4", 4)

  cmbUsageValue.Add("", 0)
  cmbUsageValue.Add("Value", 1)
  cmbUsageValue.Add("Value2", 2)
  cmbUsageValue.Add("Value3", 3)
  cmbUsageValue.Add("Value4", 4)

  cmbTempValue.Add("", 0)
  cmbTempValue.Add("Value", 1)
  cmbTempValue.Add("Value2", 2)
  cmbTempValue.Add("Value3", 3)
  cmbTempValue.Add("Value4", 4)

  For iCount = 0 To rResult.Max
    cmbSensor.Add(rResult!name)
    cmbUsageSensor.Add(rResult!name)
    cmbTempSensor.Add(rResult!name)
    rResult.MoveNext
  Next

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", Main.iPVoutputDeviceId)
  cmbSensor.Add("", 0)
  If rDevice.Count Then
    cmbSensor.Text = Devices.FindNameForDevice(Main.iPVoutputDeviceId)
    cmbValue.Index = Main.sPVoutputDeviceValue
  Endif

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", Main.iPVoutputUsageDeviceId)
  cmbUsageSensor.Add("", 0)
  If rDevice.Count Then
    cmbUsageSensor.Text = Devices.FindNameForDevice(Main.iPVoutputUsageDeviceId)
    cmbUsageValue.Index = Main.sPVoutputUsageDeviceValue
  Endif

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", Main.iPVoutputTempDeviceId)
  cmbTempSensor.Add("", 0)
  If rDevice.Count Then
    cmbTempSensor.Text = Devices.FindNameForDevice(Main.iPVoutputTempDeviceId)
    cmbTempValue.Index = Main.sPVoutputTempDeviceValue
  Endif

End

Public Sub FillValue()

  If cmbSensor.Text Then txtValue.Text = Devices.GetCurrentValueForDevice(Devices.FindIdForDevice(cmbSensor.Text), cmbValue.Index)
  If cmbUsageSensor.Text Then txtUsageValue.Text = Devices.GetCurrentValueForDevice(Devices.FindIdForDevice(cmbUsageSensor.Text), cmbUsageValue.Index)
  If cmbTempSensor.Text Then txtTempValue.Text = Devices.GetCurrentValueForDevice(Devices.FindIdForDevice(cmbTempSensor.Text), cmbTempValue.Index)

End

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub chkEnabled_Click()

  txtApi.Enabled = chkEnabled.Value
  txtId.Enabled = chkEnabled.Value
  chkDebug.Enabled = chkEnabled.Value
  btnUpload.Enabled = chkEnabled.Value
  txtPushTime.Enabled = chkEnabled.Value
  cmbSensor.Enabled = chkEnabled.Value
  cmbValue.Enabled = chkEnabled.Value
  txtValue.Enabled = chkEnabled.Value
  cmbUsageSensor.Enabled = chkEnabled.Value
  cmbUsageValue.Enabled = chkEnabled.Value
  cmbTempSensor.Enabled = chkEnabled.Value
  cmbTempValue.Enabled = chkEnabled.Value
  btnSave.Enabled = True

End

Public Sub cmbValue_Click()

  btnSave.Enabled = True
  FillValue()

End

Public Sub cmbUsageValue_Click()

  btnSave.Enabled = True
  FillValue()

End

Public Sub cmbTempValue_Click()

  btnSave.Enabled = True
  FillValue()

End

Public Sub btnWeb_Click()

  Desktop.Open("http://www.pvoutput.org/list.jsp?sid=" & Main.sPVoutputId)

End

Public Sub btnUpload_Click()

  PVoutput.UploadPVoutputData()

End

Private Sub ValidInput() As Boolean

  If Not txtApi.Text Then
    Balloon(("Please enter your Api Key!"), txtApi)
    Return False
  End If
  If Not txtId.Text Then
    Balloon(("Please enter your SytemID!"), txtId)
    Return False
  End If
  If Not cmbSensor.Text And If Not cmbUsageSensor.Text And If Not cmbTempSensor.Text Then
    Balloon(("Please define at least one device!"), cmbSensor)
    Return False
  End If
  If Not cmbValue.Text And If Not cmbUsageValue.Text And If Not cmbTempValue.Text Then
    Balloon(("Please select a value field for device(s) selected!"), cmbValue)
    Return False
  End If
  Return True

End

Public Sub btnSave_Click()

  Dim rResult As Result
  Dim iTempDeviceId, iUsageDeviceId As Integer

  If Not ValidInput() Then Return

  ' check if optional sensor data is used
  If cmbTempSensor.Text Then iTempDeviceId = Devices.FindIdForDevice(cmbTempSensor.Text)
  If cmbUsageSensor.Text Then iUsageDeviceId = Devices.FindIdForDevice(cmbUsageSensor.Text)

  ' save new PVoutput settings
  rResult = Main.hDB.Exec("UPDATE settings_pvoutput SET debug = &1, pvoutputid = &2, pushtime = &3, enabled = &4, api = &5, deviceid = &6, devicevalue = &7, usagedeviceid = &8, usagedevicevalue = &9, tempdeviceid = &{10}, tempdevicevalue = &{11} WHERE id = 1", chkDebug.Value, txtId.Text, txtPushTime.Text, chkEnabled.Value, txtApi.Text, Devices.FindIdForDevice(cmbSensor.Text), cmbValue.Index, iUsageDeviceId, cmbUsageValue.Index, iTempDeviceId, cmbTempValue.Index)
  rResult = Main.GetSettingTable("pvoutput") ' reload settings
  If rResult.Count Then
    Main.bPVoutputEnabled = rResult!enabled
    Main.sPVoutputId = rResult!pvoutputid
    Main.sPVoutputApi = rResult!api
    Main.bPVoutputDebug = rResult!debug
    Main.iPVoutputPushTime = rResult!pushtime
    Main.iPVoutputDeviceId = rResult!deviceid
    Main.sPVoutputDeviceValue = rResult!devicevalue
    Main.iPVoutputUsageDeviceId = rResult!usagedeviceid
    Main.sPVoutputUsageDeviceValue = rResult!usagedevicevalue
    Main.iPVoutputTempDeviceId = rResult!tempdeviceid
    Main.sPVoutputTempDeviceValue = rResult!tempdevicevalue
  End If
  If Main.bServer Then
    Main.Restart_PVoutput()
  Else
    XMLClient.ModuleRestart("PVoutput")
  End If
  Me.Close

End
