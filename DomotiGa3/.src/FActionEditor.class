' Gambas class file

' Description:
' FActionEditor.class
' Support for creating and edit actions.

' Development Status:
' Working ok.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bAddAction As Boolean
Public bActionEdit As Boolean
Private rResult As Result
Private iActionTab As Integer
Private cActionTypeNames As New Collection
Private $cDevices As New Collection
Private vResponse As Variant

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Code which will be executed when the form opens
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  Dim rDevices As Result
  Dim cGV As CGlobalVarEntry
  Dim iCount As Integer
  Dim hProwl As New CProwl
  Dim hNMA As New CNMA
  Dim hPushover As New CPushover
  Dim cCol As Collection
  Dim cValue As Integer[]

  cmbProwlPriority.List = hProwl.Priority_List
  cmbNMAPriority.List = hNMA.Priority_List
  cmbPushoverPriority.List = hPushover.Priority_List
  cmbPushoverSound.List = hPushover.Sound_List

  If bAddAction Then
    Me.Text = ("Create Action")
    btnDeleteAction.Visible = False
    btnNewAction.Visible = False
  Endif

  ' FIXME: make this function client/server aware
  If Not Main.bServer Then
    btnPushbulletFetchDevices.Enabled = False
  Endif

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' Fill combo with all action types & and keep track of the order
  cActionTypeNames.Clear()
  For iCount = 1 To tabPanelActionTypes.Count
    cmbActionTypes.Add(tabPanelActionTypes[iCount - 1].Text)
    cActionTypeNames.Add(iCount, tabPanelActionTypes[iCount - 1].Text)
  Next

  ' fill combo with available global vars
  cmbVariables.Add("")
  For Each cGV In Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  Next

  ' fill combo with available devices
  cmbDevices.Add("")
  cmbDevicesJson.Add("")
  cmbSoftDimmingDevice.Add("")

  rDevices = Devices.GetDevicesAndValues(["sortOrder": "name", "enabled": True, "inc_device_values": True])
  If rDevices Then
    If rDevices.Count Then
      For Each rDevices
        If rDevices!device_name Then
          If $cDevices.Exist(rDevices!device_name) Then
            cCol = $cDevices[rDevices!device_name]
          Else
            ' Store a new device and its id
            cCol = New Collection
            cValue = New Integer[]
            cCol["device_id"] = rDevices!device_id
            cCol["valuenum"] = cValue
            $cDevices[rDevices!device_name] = cCol
          Endif

          ' Store all valuenum of this device. We only show used valuenum (dynamic)
          If Not cCol["valuenum"].Exist(rDevices!device_value_valuenum) Then
            cCol["valuenum"].Add(rDevices!device_value_valuenum)
            cCol["valuenum"].Sort()
          Endif
        Endif
      Next
    Endif
  Else
    Message.Info(("ERROR: table 'devices' not found!"))
    Return
  Endif

  For Each $cDevices
    cmbDevices.Add($cDevices.Key)
    cmbDevicesJson.Add($cDevices.Key)
    cmbSoftDimmingDevice.Add($cDevices.key)
  Next

   ' fill combo with json post or get
  cmbJsonMethod.Add("")
  cmbJsonMethod.Add("Post")
  cmbJsonMethod.Add("Get")

  If bAddAction Then
    If Not Main.bServer Then
      ' Only saved actions can be executed from the Client
      btnRun.Enabled = False
    Endif
  Else
    ' Existing action - fetch action details
    If bActionEdit Then
      Try rResult = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1", FEvents.txtCurEvent)
    Else
      Try rResult = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1", FEventEditor.iAction)
    Endif
    If Not rResult Then
      Message.Info(("Error: couldn't find trigger details!"))
      Return
    Endif

    If rResult.Count = 1 Then
      txtActionName.Text = rResult!name
      txtActionId.Text = rResult!id
      txtDescription.Text = rResult!description
      iActionTab = rResult!type

      ' preload controls to values from database
      Select rResult!type
        Case 1 ' set device value
          If rResult!param1 Then cmbDevices.Text = Devices.FindNameForDevice(rResult!param1)
          cmbValue.Text = "value" & rResult!param2
          txtDeviceValue.Text = rResult!param3
        Case 2 ' set global var
          cmbVariables.Text = rResult!param1
          txtVariableValue.Text = rResult!param2
        Case 3 ' sent e-mail
          txtToAddress.Text = rResult!param1
          txtSubject.Text = rResult!param2
          txtMessage.Text = rResult!param3
        Case 4 ' speak text
          cmbSpeakVoice.Text = rResult!param1
          txtSpeakText.Text = rResult!param2
        Case 5 ' execute command
          txtExecuteCmd.Text = rResult!param1
        Case 6 ' send tweet
          txtSendTweet.Text = rResult!param1
        Case 7 ' send SMS
          txtToSMS.Text = rResult!param1
          txtSMSMessage.Text = rResult!param2
        Case 8 ' send IRTRans
          txtIRCommand.Text = rResult!param1
        Case 9 ' play sound
          txtSound.Text = rResult!param1
          sbVolume.Value = rResult!param2
        Case 10 ' write log
          txtLog.Text = rResult!param1
        Case 11 ' display text on led matrix
          txtLEDMessage.Text = rResult!param1
          sbID.Value = rResult!param2
          cmbColor.Text = rResult!param3
          cmbSpeed.Text = rResult!param4
        Case 12 ' av control command
          cmbAVModel.Text = rResult!param1
          cmbAVCommand.Text = rResult!param2
          cmbAVValue.Text = rResult!param3
          txtAVAddress.Text = rResult!param4
        Case 13 ' delay timer
          sbDelay.Value = rResult!param1
          If rResult!param3 = "random" Then
            chkRandom.Value = True
            sbDelayMax.Value = rResult!param2
          Else
            chkRandom.Value = False
          Endif
          chkRandom_Click()
        Case 14 ' notify-send
          txtNotifyTitle.Text = rResult!param1
          txtNotifyText.Text = rResult!param2
        Case 15 ' script
          txtScript.Text = rResult!param1
        Case 16 ' json
           If rResult!param1 Then cmbDevicesJson.Text = Devices.FindNameForDevice(rResult!param1)
           If rResult!param2 Then cmbJsonMethod.Text = rResult!param2
           If rResult!param3 Then txtJsonUrl.Text = rResult!param3
        Case 17 ' send prowl
          txtSendProwl.Text = rResult!param1

          ' Select priorities
          Select rResult!param2
            Case "-2" ' very low/lowest
              cmbProwlPriority.index = 1
            Case "-1" ' low
              cmbProwlPriority.index = 2
            Case "1" ' high
              cmbProwlPriority.index = 3
            Case "2" ' Emergency
              cmbProwlPriority.index = 4
            Case Else
              cmbProwlPriority.index = 0
          End Select

        Case 18 ' send notify my android
          txtSendNMA.Text = rResult!param1

          ' Select priorities
          Select rResult!param2
            Case "-2" ' very low/lowest
              cmbNMAPriority.index = 1
            Case "-1" ' low
              cmbNMAPriority.index = 2
            Case "1" ' high
              cmbNMAPriority.index = 3
            Case "2" ' Emergency
              cmbNMAPriority.index = 4
            Default
              cmbNMAPriority.index = 0
          End Select

        Case 19 ' send pushover
          txtSendPushover.Text = rResult!param1

          ' Select priorities
          Select rResult!param2
            Case "-2" ' lowest
              cmbPushoverPriority.index = 1
            Case "-1" ' low
              cmbPushoverPriority.index = 2
            Case "1" ' high
              cmbPushoverPriority.index = 3
            Case "2" ' Emergency
              cmbPushoverPriority.index = 4
            Default
              cmbPushoverPriority.index = 0
          End Select

          If rResult!param3 = "" Then
            cmbPushoverSound.Index = 0
          Else
            cmbPushoverSound.Text = rResult!param3
          Endif
          ' Destination Devices
          txtPushoverDevices.Text = rResult!param4
        Case 20 ' send pushbullet
          txtPushbulletMsg.Text = rResult!param1
          txtPushbulletTitle.Text = rResult!param2
          txtPushbulletDeviceId.Text = rResult!param3
        Case 21 ' soft dimming
          If rResult!param1 Then cmbSoftDimmingDevice.Text = Devices.FindNameForDevice(rResult!param1)
          If rResult!param2 Then sbSoftDimmingSeconds.Value = rResult!param2
          If rResult!param3 Then sbSoftDimmingResultValue.Value = rResult!param3
        Case 22 ' send udp message
          If rResult!param1 Then txtSendUDPAddress.Text = rResult!param1
          If rResult!param2 Then sbSendUDPPort.Value = rResult!param2
          If rResult!param3 Then txtSendUDPMessage.Text = rResult!param3
        Case 23 ' publish mqtt message
          If rResult!param1 Then txtPublishMQTTTopic.Text = rResult!param1
          If rResult!param2 Then txtPublishMQTTMessage.Text = rResult!param2
          If rResult!param3 Then chkPublishMQTTRawTopic.Value = rResult!param3
      End Select

      Try tabPanelActionTypes.Index = rResult!type - 1
      tabPanelActionTypes.SetFocus()

    Else
      bAddAction = True
    Endif
  Endif

  ' If the number is out-of-range, set it to first one
  If iActionTab < 1 Or iActionTab > tabPanelActionTypes.Count Then
    iActionTab = 1
  Endif

  ' Set current action type
  cmbActionTypes.Index = cActionTypeNames[tabPanelActionTypes[iActionTab - 1].Text] - 1

End

Public Sub txtActionName_Change()

  EnableButtons()

End

Public Sub tabPanelActionTypes_Click()

  Dim iType As Integer

  cmbActionTypes.Index = tabPanelActionTypes.Index
  iType = cActionTypeNames[cmbActionTypes.Text]
  Select iType
    Case 13 ' delay timer
      btnRun.Enabled = False
      chkRandom_Click()
    Case Else
  End Select

  EnableButtons()

End

Private Sub EnableButtons()

  btnSave.Enabled = True
  btnDeleteAction.Enabled = True
  btnNewAction.Enabled = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if all mandatory fields are filled in, before we Save or Execute
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckTypeValues() As JSONCollection

  Dim iType As Integer
  Dim sParam1, sParam2, sParam3, sParam4, sParam5 As String
  Dim cData As New JSONCollection

  iType = cActionTypeNames[cmbActionTypes.Text]

  Select iType
    Case 1 ' set device
      If Not cmbDevices.Text Then
        Balloon(("Please select a device!"), cmbDevices)
        Return Null
      Endif
      sParam1 = Devices.FindIdForDevice(cmbDevices.Text)
      If Not cmbValue.Text Then
        Balloon(("Please select a field to set!"), cmbValue)
        Return Null
      Endif

      sParam2 = Replace$(cmbValue.Text, "value", "")
      If Not txtDeviceValue.Text Then
        Balloon(("Please enter a value to set!"), txtDeviceValue)
        Return Null
      Endif
      sParam3 = txtDeviceValue.Text
    Case 2 ' set globalvar
      If Not cmbVariables.Text Then
        Balloon(("Please select or enter a new variable!"), cmbVariables)
        Return Null
      Endif
      sParam1 = cmbVariables.Text
      If Not txtVariableValue.Text Then
        Balloon(("Please enter a value to set!"), txtVariableValue)
        Return Null
      Endif
      sParam2 = txtVariableValue.Text
    Case 3 ' send e-mail message
      If Not txtToAddress.Text Then
        Balloon(("Please enter a e-mail address!"), txtToAddress)
        Return Null
      Endif
       If Not txtSubject.Text Then
        Balloon(("Please enter a subject!"), txtSubject)
        Return Null
      Endif
       If Not txtMessage.Text Then
        Balloon(("Please enter a msg to send!"), txtMessage)
        Return Null
      Endif
      sParam1 = txtToAddress.Text
      sParam2 = txtSubject.Text
      sParam3 = txtMessage.Text
    Case 4 ' speak text
      If Not cmbSpeakVoice.Text Then
        Balloon(("Please enter a voicename or select type!"), cmbSpeakVoice)
        Return Null
      Endif
      If Not txtSpeakText.Text Then
        Balloon(("Please enter a text to speak!"), txtSpeakText)
        Return Null
      Endif
      sParam1 = cmbSpeakVoice.Text
      sParam2 = txtSpeakText.Text
    Case 5 ' run shell command
      If Not txtExecuteCmd.Text Then
        Balloon(("Please enter a command to execute!"), txtExecuteCmd)
        Return Null
      Endif
      sParam1 = txtExecuteCmd.Text
    Case 6 ' send tweet message
      If Not txtSendTweet.Text Then
        Balloon(("Please enter a message to tweet!"), txtSendTweet)
        Return Null
      Else If Len(txtSendTweet.Text) > 140
        Balloon(("Entered message is too long! (max. 140 chars)"), txtSendTweet)
        Return Null
      Endif
      sParam1 = txtSendTweet.Text
    Case 7 ' send SMS message
      If Not txtToSMS.Text Then
        Balloon(("Please enter a number to SMS to!"), txtToSMS)
        Return Null
      Endif
      If Not txtSMSMessage.Text Then
        Balloon(("Please enter a message to send!"), txtSMSMessage)
        Return Null
      Endif
      sParam1 = txtToSMS.Text
      sParam2 = txtSMSMessage.Text
    Case 8 ' send IRTrans command
      If Not txtIRCommand.Text Then
        Balloon(("Please enter a command string!"), txtIRCommand)
        Return Null
      Endif
      sParam1 = txtIRCommand.Text
    Case 9 ' play sound file
      If Not txtSound.Text Then
        Balloon(("Please enter a sound to play!"), txtSound)
        Return Null
      Endif
      sParam1 = txtSound.Text
      sParam2 = sbVolume.Value
    Case 10 ' write log
      If Not txtLog.Text Then
        Balloon(("Please enter a text to log!"), txtLog)
        Return Null
      Endif
      sParam1 = txtLog.Text
    Case 11 ' display text on led matrix
      If Not txtLEDMessage.Text Then
        Balloon(("Please enter a text to display!"), txtLEDMessage)
        Return Null
      Endif
      If Not sbID.Text Then
        Balloon(("Please enter an display id!"), sbID)
        Return Null
      Endif
      sParam1 = txtLEDMessage.Text
      sParam2 = sbID.Value
    Case 12 ' av control command
      If Not cmbAVModel.Text Then
        Balloon(("Please select the equipment model!"), cmbAVModel)
        Return Null
      Endif
      If Not cmbAVCommand.Text Then
        Balloon(("Please enter a command to send!"), cmbAVCommand)
        Return Null
      Endif
      sParam1 = cmbAVModel.Text
      sParam2 = cmbAVCommand.Text
      sParam3 = cmbAVValue.Text
      sParam4 = txtAVAddress.Text
    Case 13 ' delay timer
      If sbDelay.Text = 0 Then
        Balloon(("Please enter a delay value!"), sbDelay)
        Return Null
      Endif
      If chkRandom.Value Then
        If sbDelayMax.Text = 0 Then
          Balloon(("Please enter a max delay value!"), sbDelayMax)
          Return Null
        Endif
        If sbDelayMax.Value < sbDelay.Value Then
          Balloon(("Please enter a value higher than min delay value!"), sbDelayMax)
          Return Null
        Endif
        sParam2 = sbDelayMax.Value
        sParam3 = "random"
      Else
        sParam2 = ""
        sParam3 = "fixed"
      Endif
      sParam1 = sbDelay.Value
    Case 14 ' notify-send
      If Not txtNotifyTitle.Text Then
        Balloon(("Please enter a title to display!"), txtNotifyTitle)
        Return Null
      Endif
      If Not txtNotifyText.Text Then
        Balloon(("Please enter a text to display!"), txtNotifyText)
        Return Null
      Endif
      sParam1 = txtNotifyTitle.Text
      sParam2 = txtNotifyText.Text
    Case 15 ' script
      If Not txtScript.Text Then
        Balloon(("Please enter a script to run!"), txtScript)
        Return Null
      Endif
      sParam1 = txtScript.Text
    Case 16 ' JSON
      If Not cmbDevicesJson.Text Then
        Balloon(("Please select a device!"), cmbDevicesJson)
        Return Null
      Endif
      sParam1 = Devices.FindIdForDevice(cmbDevicesJson.Text)
      If Not cmbJsonMethod.Text Then
        Balloon(("Please select a method!"), cmbJsonMethod)
        Return Null
      Endif
      sParam2 = cmbJsonMethod.Text
      If Not txtJsonUrl.Text Then
        Balloon(("Please enter a url!"), txtJsonUrl)
        Return Null
      Endif
      sParam3 = txtJsonUrl.Text
    Case 17 ' send prowl message
      If Not txtSendProwl.Text Then
        Balloon(("Please enter a Prowl message!"), txtSendProwl)
        Return Null
      Endif
      sParam1 = txtSendProwl.Text

      ' Select priorities
      Select cmbProwlPriority.Index
        Case 1 ' very low/lowest
          sParam2 = "-2"
        Case 2 ' low
          sParam2 = "-1"
        Case 3 ' high
          sParam2 = "1"
        Case 4 ' emergency
          sParam2 = "2"
        Default ' normal
          sParam2 = ""
      End Select

    Case 18 ' send notify my android message
      Balloon(("Notify My Android is deprecated"), txtSendNMA)

    Case 19 ' send pushover message
      If Not txtSendPushover.Text Then
        Balloon(("Please enter a Pushover message!"), txtSendPushover)
        Return Null
      Endif
      sParam1 = txtSendPushover.Text

      ' Select priorities
      Select cmbPushoverPriority.Index
        Case 1 ' lowest
          sParam2 = "-2"
        Case 2 ' low
          sParam2 = "-1"
        Case 3 ' high
          sParam2 = "1"
        Case 4 ' emergency
          sParam2 = "2"
        Default ' normal
          sParam2 = ""
      End Select

      ' Select sounds
      sParam3 = cmbPushoverSound[cmbPushoverSound.Index].Text
      If sParam3 = "pushover (default)" Then sParam3 = ""

      ' Select destination devices
      sParam4 = txtPushoverDevices.Text

    Case 20 ' send pushbullet message
      If Not txtPushbulletMsg.Text Then
        Balloon(("Please enter a Pushbullet message!"), txtPushbulletMsg)
        Return Null
      Endif
      sParam1 = txtPushbulletMsg.Text
      sParam2 = txtPushbulletTitle.Text
      sParam3 = txtPushbulletDeviceId.Text
    Case 21 ' soft dimming
      If Not cmbSoftDimmingDevice.Text Then
        Balloon(("Please select a device!"), cmbSoftDimmingDevice)
        Return Null
      Endif
      sParam1 = Devices.FindIdForDevice(cmbSoftDimmingDevice.Text)
      If sbSoftDimmingSeconds.Text = 0 Then
        Balloon("Please enter amount of seconds!", sbSoftDimmingSeconds)
        Return Null
      Endif
      sParam2 = sbSoftDimmingSeconds.Text
      sParam3 = sbSoftDimmingResultValue.Text
    Case 22 ' send udp message
      If Not txtSendUDPAddress.Text Then
        Balloon(("Please enter a address to send to!"), txtSendUDPAddress)
        Return Null
      Endif
      If Not txtSendUDPMessage.Text Then
        Balloon(("Please enter a message to send!"), txtSendUDPMessage)
        Return Null
      Endif
      sParam1 = txtSendUDPAddress.Text
      sParam2 = sbSendUDPPort.Value
      sParam3 = txtSendUDPMessage.Text
    Case 23 ' publish mqtt message
      If Not txtPublishMQTTTopic.Text Then
        Balloon(("Please enter a topic to publish to!"), txtPublishMQTTTopic)
        Return Null
      Endif
      If Not txtPublishMQTTMessage.Text Then
        Balloon(("Please enter a message to publish!"), txtPublishMQTTMessage)
        Return Null
      Endif
      sParam1 = txtPublishMQTTTopic.Text
      sParam2 = txtPublishMQTTMessage.Text
      sParam3 = chkPublishMQTTRawTopic.Value
  End Select

  ' Passed all check, return the values
  cData.Add(iType, "type")
  cData.Add(sParam1, "param1")
  cData.Add(sParam2, "param2")
  cData.Add(sParam3, "param3")
  cData.Add(sParam4, "param4")
  cData.Add(sParam5, "param5")
  Return cData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Save or update the Action
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim iType As Integer
  Dim sSql, sParam1, sParam2, sParam3, sParam4, sParam5 As String
  Dim cData As Collection

  If Not txtActionName.Text Then
    Balloon(("Please enter a name for this action!"), txtActionName)
    Return
  Endif

  If bAddAction Then
    If ActionNameExist(txtActionName.Text) Then
      Balloon(("Please enter a unique name for this action!"), txtActionName)
      Return
    Endif
  Else
    ' name has changed
    If rResult!name <> txtActionName.Text Then
      If ActionNameExist(txtActionName.Text) Then
        Balloon(("Please enter a unique name for this action!"), txtActionName)
        Return
      Endif
    Endif
  Endif

  ' Validate the type and values
  cData = CheckTypeValues()
  If Not cData Then Return

  ' Validated succesfully, we can continue
  iType = cData["type"]
  sParam1 = cData["param1"]
  sParam2 = cData["param2"]
  sParam3 = cData["param3"]
  sParam4 = cData["param4"]
  sParam5 = cData["param5"]

  If bAddAction Then
    Main.hDB.Begin()
    rResult = Main.hDB.Create("actions")
    rResult!name = txtActionName.Text
    rResult!description = txtDescription.Text
    rResult!type = iType
    rResult!param1 = sParam1
    rResult!param2 = sParam2
    rResult!param3 = sParam3
    rResult!param4 = sParam4
    rResult!param5 = sParam5
    rResult.Update()
    Main.hDB.Commit()
  Else
    ' save new trigger settings
    sSql = "UPDATE actions SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7, description = &8 WHERE id = &9"
    Try rResultUpdate = Main.hDB.Exec(sSql, txtActionName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, txtDescription.Text, rResult!id)
  Endif

  If FEventEditor.Id Then
    If FEventEditor.iEditingAction = 1 Then
      FEventEditor.GetActions()
      FEventEditor.cmbAction.Text = txtActionName.Text
    Endif
  Endif

  bAddAction = False
  Me.Close

  FEvents.GetEventList()

End

Public Sub btnNewAction_Click()

  bAddAction = True
  btnSave_Click()

End

Public Sub btnCancel_Click()

  Me.Close

End

Private Sub ActionNameExist(sName As String) As Boolean

  Dim rResultAction As Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  If rResultAction Then
    If rResultAction.Count Then
      Return True
    Endif
  Endif
  Return False

End

Public Sub btnDeleteAction_Click()

  Dim iActionId As Integer
  Dim rEvents As Result
  Dim sEventList As String

  ' check if action is used in events
  iActionId = GetActionId(txtActionName.Text)
  If iActionId Then
    rEvents = Main.hDB.Exec("SELECT name FROM events_actions LEFT JOIN events ON id = event WHERE action = &1 ", iActionId)
    If rEvents
      If rEvents.Available
        sEventList = "This action is in use by " & IIf(rEvents.Count > 1, "these events", "this event") & ":\n"
        For Each rEvents
          sEventList &= "'" & rEvents!name & "'\n"
        Next
      Else
        sEventList = ("This action is not used in any event.") & "\n"
      Endif
    Endif
  Endif

  Select Message.Question(sEventList & "\n" & ("Are you sure that you want to delete this action?"), ("Yes"), ("No"))
    Case 1
      If iActionId Then
        Main.hDB.Exec("DELETE FROM actions WHERE id = &1", iActionId)
        Main.hDB.Exec("DELETE FROM events_actions WHERE action = &1", iActionId)
      Endif
      If FEventEditor.Id Then
        If FEventEditor.iEditingAction = 1 Then
          FEventEditor.GetActions()
        Endif
      Endif
      Me.Close
      FEvents.GetEventList()
  End Select

End

Private Sub GetActionId(sName As String) As Integer

  Dim rResultAction As Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  Try Return rResultAction!id

End

Public Sub txtDescription_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbAVModel_Click()

  FillAVFields(cmbAVModel.Text, cmbAVCommand.Text, cmbAVValue.Text)
  EnableButtons

End

Public Sub cmbAVCommand_Click()

  FillAVValue(cmbAVModel.Text, cmbAVCommand.Index)
  EnableButtons

End

Private Sub FillAVFields(sModel As String, sCmd As String, sValue As String)

  Dim sTemp As String
  Dim iCnt As Integer

  cmbAVCommand.Clear
  cmbAVCommand.Add("")
  cmbAVValue.Clear
  cmbAVValue.Add("")
  Select Case LCase(sModel)
    Case "denon"
      If AVControl.sDenonCmds Then
        For Each sTemp In AVControl.sDenonCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
    Case "onkyo"
      If AVControl.sOnkyoCmds.Count Then
        For Each sTemp In AVControl.sOnkyoCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
    Case "iport"
      If AVControl.sIPortCmds Then
        For Each sTemp In AVControl.sIPortCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
    Case "squeezeserver"
      If AVControl.sSqueezeServerCmds Then
        For Each sTemp In AVControl.sSqueezeServerCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
    Case "sharptv"
      If AVControl.sSharpTVCmds Then
        For Each sTemp In AVControl.sSharpTVCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
    Case "lgtv"
      If AVControl.sLGTVCmds Then
        For Each sTemp In AVControl.sLGTVCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
    Case "pioneer"
      If AVControl.sPioneerCmds Then
        For Each sTemp In AVControl.sPioneerCmds
          cmbAVCommand.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
  End Select
  cmbAVCommand.Text = sCmd
  FillAVValue(sModel, cmbAVCommand.Index)

End

Private Sub FillAVValue(sModel As String, iCmd As Integer)

  Dim sTemp As String
  Dim iCnt As Integer
  Dim aScan As String[]

  cmbAVValue.Clear
  cmbAVValue.Add("")
  Select Case LCase(sModel)
    Case "denon"
      Try aScan = Split(AVControl.sDenonValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sDenonInfo[cmbAVCommand.index - 1]
    Case "onkyo"
      Try aScan = Split(AVControl.sOnkyoValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sOnkyoInfo[cmbAVCommand.index - 1]
    Case "iport"
      Try aScan = Split(AVControl.sIPortValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sIPortInfo[cmbAVCommand.index - 1]
    Case "squeezeserver"
      Try aScan = Split(AVControl.sSqueezeServerValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sSqueezeServerInfo[cmbAVCommand.index - 1]
    Case "sharptv"
      Try aScan = Split(AVControl.sSharpTVValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sSharpTVInfo[cmbAVCommand.index - 1]
    Case "lgtv"
      Try aScan = Split(AVControl.sLGTVValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sLGTVInfo[cmbAVCommand.index - 1]
    Case "pioneer"
      Try aScan = Split(AVControl.sPioneerValues[iCmd - 1], ",")
      If Not Error Then
        For Each sTemp In aScan
          cmbAVValue.Add(sTemp, iCnt + 1)
          Inc iCnt
        Next
      Endif
      If cmbAVCommand.Text Then Try txtAVHelp.Text = AVControl.sPioneerInfo[cmbAVCommand.index - 1]
    End Select

End

Public Sub btnAVTest_Click()

  AVControl.Set(cmbAVModel.Text, cmbAVCommand.Text, cmbAVValue.Text, txtAVAddress.Text)

End

Public Sub chkRandom_Click()

  If chkRandom.Value Then
    Label23.Text = "Min. Seconds"
    Label24.Enabled = True
    sbDelayMax.Enabled = True
  Else
    Label23.Text = "Seconds"
    Label24.Enabled = False
    sbDelayMax.Enabled = False
  Endif
  EnableButtons

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run this action, it doesn't have to be save in the DB
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnRun_Click()

  Dim cData As New JSONCollection
  Dim sMessage As String

  If Main.bServer Then
    cData = CheckTypeValues()
    If Not cData Then Return
    Try Events.RunAction(0, 0, 0, cData)
    If Error Then
      sMessage = "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running action!"
    Else
      sMessage = "Action executed"
    Endif
  Else
    cData = CheckTypeValues()
    If Not cData Then Return
    Try Client.RunAction(cData)
    If Error Then
      sMessage = "Failed to execute action on the server"
    Else
      sMessage = "Action executed on the server"
    Endif
  Endif

  Balloon(sMessage, btnRun)

End

Public Sub txtNotifyTitle_KeyPress()

  EnableButtons()

End

Public Sub txtNotifyText_KeyPress()

  EnableButtons()

End

Public Sub sbDelay_KeyPress()

  EnableButtons()

End

Public Sub sbDelayMax_KeyPress()

  EnableButtons()

End

Public Sub txtAVAddress_KeyPress()

  EnableButtons()

End

Public Sub cmbAVValue_Click()

  EnableButtons()

End

Public Sub txtLEDMessage_KeyPress()

  EnableButtons()

End

Public Sub cmbColor_Click()

  EnableButtons()

End

Public Sub cmbSpeed_Click()

  EnableButtons()

End

Public Sub sbID_KeyPress()

  EnableButtons()

End

Public Sub txtLog_KeyPress()

  EnableButtons()

End

Public Sub txtSound_KeyPress()

  EnableButtons()

End

Public Sub sbVolume_Change()

  EnableButtons()

End

Public Sub txtIRCommand_KeyPress()

  EnableButtons()

End

Public Sub txtToSMS_KeyPress()

  EnableButtons()

End

Public Sub txtSMSMessage_KeyPress()

  EnableButtons()

End

Public Sub txtSendTweet_KeyPress()

  EnableButtons()

End

Public Sub txtExecuteCmd_KeyPress()

  EnableButtons()

End

Public Sub cmbSpeakVoice_Click()

  EnableButtons()

End

Public Sub txtSpeakText_KeyPress()

  EnableButtons()

End

Public Sub txtToAddress_KeyPress()

  EnableButtons()

End

Public Sub txtSubject_KeyPress()

  EnableButtons()

End

Public Sub txtMessage_KeyPress()

  EnableButtons()

End

Public Sub cmbVariables_Click()

  EnableButtons()

End

Public Sub txtVariableValue_KeyPress()

  EnableButtons()

End

Public Sub cmbDevices_Click()

  Dim iValueNum As Integer

  EnableButtons()

  cmbValue.Clear()
  If cmbDevices.Text Then
    If $cDevices.Exist(cmbDevices.Text) Then
      For Each iValueNum In $cDevices[cmbDevices.Text]["valuenum"]
        cmbValue.Add("value" & iValueNum)
      Next
    Endif
  Endif

End

Public Sub cmbValue_Click()

  EnableButtons()

End

Public Sub txtDeviceValue_KeyPress()

  EnableButtons()

End

Public Sub btnScriptEditor_Click()

  txtScript.Text = FActionScriptEditor.Run(txtScript.Text)

End

Public Sub cmbDevicesJson_Click()

  EnableButtons()

End

Public Sub txtJsonUrl_KeyPress()

  EnableButtons()

End

Public Sub cmbJsonMethod_Click()

  EnableButtons()

End

Public Sub cmbActionTypes_Click()

  ' Find the right tab, if our List is sorted
  iActionTab = cActionTypeNames[cmbActionTypes.Text]

  ' If the number is out-of-range, set it to default
  If iActionTab < 1 Or iActionTab > tabPanelActionTypes.Count Then
    iActionTab = 1
  Endif

  tabPanelActionTypes.Index = cmbActionTypes.Index

End

Public Sub btnPushbulletFetchDevices_Click()

  Dim vDevices As Variant

  If Not Plugin.IsPluginEnabled("Pushbullet", 0) Then 
    Message.Error("Pushbullet Plugin is not enabled!")
    Return
  Endif

  vResponse = Plugin.GetPluginObject("Pushbullet", 1).Interface.GetDevices("", False)
  If TypeOf(vResponse) = gb.String Then
    Message.Error("Error:\n" & vResponse)
  Else
    If vResponse.Count Then
      cmbPushbulletDevice.Clear
      cmbPushbulletDevice.Add("")
      cmbPushbulletDevice.Add("All")
      For Each vDevices In vResponse
        If vDevices["extras"]["nickname"] Then
          cmbPushbulletDevice.Add(vDevices["extras"]["nickname"])
        Else
          cmbPushbulletDevice.Add(vDevices["extras"]["manufacturer"] & " " & vDevices["extras"]["model"])
        Endif
      Next
    Endif
  Endif

End

Public Sub cmbPushbulletDevice_Change()

  btnSave.Enabled = True

  If cmbPushbulletDevice.Index = 1 Then
    txtPushbulletDeviceId.Text = "All"
  Else If cmbPushbulletDevice.Index > 1 Then ' skip empty first line
    Try txtPushbulletDeviceId.Text = vResponse[cmbPushbulletDevice.Index - 2]["iden"]
  Else
    txtPushbulletDeviceId.Text = ""
  Endif

End

Public Sub txtPushoverDevices_Change()

  EnableButtons()

End

Public Sub cmbSoftDimmingDevice_Click()

   EnableButtons()

End

Public Sub sbSoftDimmingSeconds_Change()

   EnableButtons()

End

Public Sub sbSoftDimmingResultValue_Change()

   EnableButtons()

End

Public Sub btnSelectSound_Click()

  Dim sFile As String = FSelectFile.Run(txtSound.Text, ["*.wav;*.sox;*.snd;*.mp3;", "Sound files"], Main.sBaseDir &/ "sounds", True, "Select a sound file")

  If Len(sFile) Then txtSound.Text = sFile

End
