' Gambas class file

' Description:
' CBroadcastUDP.class
' This plugin will broadcast the logfile and other usefull information to other DomotiGa clients

' Development Status:
' Working

' Links:

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "BroadcastUDP"
Public PluginFriendlyName As String = "Broadcast UDP"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1
Public PluginAutoStart As Boolean = False

Public KeyName As String
Public LogLabel As String = "[BroadcastUDP] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iUDPPort As Integer
Private $sTargetIP As String
Private $bDebug As Boolean
Private $sDataReceived As String

Public hBroadcastUDP As UdpSocket

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iUDPPort = cPl.Settings["udpport"]
  $sTargetIP = cPl.Settings["targetip"]
  $bDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start the UDP Server (bServer=True) or Client (bServer=False)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Connect()

  ' try to close the connection
  Try hBroadcastUDP.Close

  ' get a new one
  hBroadcastUDP = New UdpSocket As "BroadcastUDP"

  ' Check if we in Server or Client mode
  If Main.bServer Then
    hBroadcastUDP.Port = 0
    hBroadcastUDP.TargetPort = $iUDPPort

    ' Now try to bind to the port
    hBroadcastUDP.Bind()

    Main.WriteLog(LogLabel & PluginFriendlyName & " Server ready, broadcasting to " & IIf($sTargetIP, "IP " & $sTargetIP & ":" & $iUDPPort, "Port " & $iUDPPort))
  Else
    hBroadcastUDP.Port = $iUDPPort

    ' Now try to bind to the port
    hBroadcastUDP.Bind()

    Main.WriteLog(LogLabel & PluginFriendlyName & " Client listening on port " & $iUDPPort)
  Endif

  ' Set IsRunning now, no error happened
  IsRunning = True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " UDP " & IIf(Main.bServer, "Server", "Client") & " interface FAILED to start" & IIf(Main.bServer, "", " on Port " & $iUDPPort))
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Error while reading / writing to the UDP socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BroadcastUDP_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $iUDPPort)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the udp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BroadcastUDP_Read()

  Dim sStr As String

  Try sStr = Read #hBroadcastUDP, Lof(hBroadcastUDP)
  ProcessData(sStr)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessData(sData As String)

  Dim iPos As Integer
  Dim sKey As String

  ' Check for bracket
  iPos = InStr(sData, "]")

  ' Only continue if bracket exists
  If iPos Then
    ' If previous data is the same as this one, just drop it ... Most likely a double/triple broadcast
    If sData = $sDataReceived Then Return

    ' Store new data for duplicate check
    $sDataReceived = sData

    sKey = Left(sData, iPos)
    sData = LTrim(Mid(sData, iPos + 1))

    ' Call the Main code, which is the only one who is GUI/CLI aware
    Try Main.BroadcastReceived(sKey, sData)
  Else
    ' Maybe report the invalid broadcast message? Can flood the client
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send broadcast data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Send(sMsg As String)

  Dim sIP As String

  ' Only support sending in server mode
  If Main.bServer And If hBroadcastUDP Then
    If hBroadcastUDP.Status = Net.Active Then
      If $sTargetIP Then
        hBroadcastUDP.TargetHost = $sTargetIP
        hBroadcastUDP.Broadcast = False
        Try Write #hBroadcastUDP, sMsg, Len(sMsg)
      Else
        hBroadcastUDP.Broadcast = True
        For Each sIP In Main.aBroadcastAddr
          hBroadcastUDP.TargetHost = sIP
          Try Write #hBroadcastUDP, sMsg, Len(sMsg)
        Next
      Endif
    Else
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Close the UDP port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  Try hBroadcastUDP.Close

End

