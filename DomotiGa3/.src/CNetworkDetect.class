' Gambas class file

' Description:
' CNetworkDetect.class
' Support for Network related devices.

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "NetworkDetect"
Public PluginFriendlyName As String = "NetworkDetect"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[NetworkDetect] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iPollTime As Integer
Private $bEnablePing As Boolean
Private $bEnableArpScan As Boolean
Private $iTimeOut As Integer
Private $sInterfaceName As String
Private $bDebug As Boolean

Public tPoll As Timer
Private hPing As Process
Private hArpScan As Process
Private cOutput As New Collection
Private sArpScanOutput As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iPollTime = cPl.Settings["polltime"]
  $bEnablePing = cPl.Settings["enable_ping"]
  $bEnableArpScan = cPl.Settings["enable_arpscan"]
  $iTimeOut = cPl.Settings["timeout"]
  $sInterfaceName = cPl.Settings["interface"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Network Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  If Util.ProgramExist("arp-scan") Then
    Main.WriteLog(LogLabel & "Found arp-scan executable.")
  Else
    Main.WriteLog(LogLabel & "ERROR: command 'arp-scan' not found, did you install it? Disabled arp-scan plugin.")
    $bEnableArpScan = False
  Endif

  ' Initialize
  Run()

  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tPoll.Stop
  Try hPing = Null
  Try hArpScan = Null
  IsRunning = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' start poll timer for Network Detect
  tPoll = New Timer As "tPoll"
  tPoll.Delay = $iPollTime * 1000 ' multiply for seconds
  tPoll.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPoll_Timer()

  If $bEnablePing Then CheckPing()
  If $bEnableArpScan Then NetworkArpScan()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get arp-scan list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub NetworkArpScan()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Checking network with 'arp-scan -g -l -t " & $iTimeOut & " -I " & $sInterfaceName & "'.")
  hArpScan = Exec ["arp-scan", "-g", "-l", "-t", $iTimeOut, "-I", $sInterfaceName] For Read As "ArpScan"

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Trying to run 'arp-scan':" & Error.Text & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read arp-scan output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ArpScan_Read()

  Dim sBuffer As String

  sBuffer = Read #Last, -256
  sArpScanOutput &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse arp-scan output, return value 0 means ok, anything else is not run
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ArpScan_Kill()

  Dim rResult As Result
  Dim iDeviceType As Integer
  Dim iFound As Boolean
  Dim sStatus, sAddress As String
  Dim aAddress As String[]

  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sArpScanOutput)

  ' get all devices of devicetype arp-scan
  rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
  If rResult And If rResult.Available Then
    For Each rResult
      iDeviceType = Devices.FindDeviceTypeForDevice(rResult!id)
      If iDeviceType < 666 Then Continue ' skip ping devices
      aAddress = Split(rResult!address, "|")
      If aAddress.Count Then
        For Each sAddress In aAddress
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Checking '" & rResult!name & "' with address '" & sAddress & "'.")
          ' see if it is found in arp-scan output
          iFound = IIf(InStr(sArpScanOutput, sAddress & Chr$(9)), True, False)
          Select iDeviceType
            Case 666
              If iFound Then
                ' arp-scan successful
                sStatus = ("On")
              Else
                ' not reachable
                sStatus = ("Off")
              Endif
            Case 667
              If iFound Then
                ' arp-scan successful
                sStatus = ("Up")
              Else
                ' not reachable
                sStatus = ("Down")
              Endif
            Case 668
              If iFound Then
                ' arp-scan successful
                sStatus = ("Home")
              Else
                ' not reachable
                sStatus = ("Away")
              Endif
          End Select
          ' debug output
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Device '" & rResult!name & "' is '" & sStatus & "'.")
          ' find and update device
          Devices.CheckFirstSeen(rResult!id)
          Devices.ValueUpdate(rResult!id, 1, sStatus)
        Next
      Endif
    Next
  Else
    Main.WriteLog(LogLabel & "No Arp-Scan devices found in device table!")
  Endif
  sArpScanOutput = ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices of type Ping and see if we can ping it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckPing()

  Dim rResult As Result
  Dim iDeviceType As Integer

  ' get all devices of devicetype ping
  rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
  If rResult And If rResult.Available Then
    For Each rResult
      iDeviceType = Devices.FindDeviceTypeForDevice(rResult!id)
      If iDeviceType > 73 Then Continue ' skip arp-scan devices
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Checking '" & rResult!name & "' with address '" & rResult!address & "'.")
      ' see if we can ping it
      NetworkPing(rResult!id, rResult!address)
    Next
  Else
    Main.WriteLog(LogLabel & "No Ping devices found in device table!")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' try to ping the Device to detect if it's up or down
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub NetworkPing(iId As Integer, sAddress As String)

  hPing = Exec ["ping", "-c2", sAddress] For Read As "Ping"
  hPing.Tag = iId
  cOutput.Add("", iId)

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Trying to run 'ping':" & Error.Text & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read ping output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Ping_Read()

  Dim sBuffer As String
  Dim iId As Integer

  sBuffer = Read #Last, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and return value, 0 means ok, anything else is not reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Ping_Kill()

  Dim iDeviceId As Integer = Last.Tag
  Dim iRc As Integer = Last.Value
  Dim sStatus, sOutput, sRTT As String

  If iDeviceId Then
    ' save ping output
    sOutput = cOutput[iDeviceId]
    cOutput.Remove(iDeviceId)

    Select Devices.FindDeviceTypeForDevice(iDeviceId)
      Case 13
        If iRc = 0 Then
          ' ping succesful
          sStatus = ("Awake")
        Else
          ' not reachable, unknown host etc.
          sStatus = ("Sleeping")
        Endif
      Case 72
        If iRc = 0 Then
          ' ping succesful
          sStatus = ("On")
        Else
          ' not reachable, unknown host etc.
          sStatus = ("Off")
        Endif
      Case 73
        If iRc = 0 Then
          ' ping succesful
          sStatus = ("Up")
          sRTT = GetRTT(sOutput)
        Else
          ' not reachable, unknown host etc.
          sStatus = ("Down")
          sRTT = " "
        Endif
        Devices.ValueUpdate(iDeviceId, 2, sRTT)
    End Select

    ' debug output
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Device with id '" & iDeviceId & "' is '" & sStatus & "'.")
    ' find and update device
    Devices.CheckFirstSeen(iDeviceId)
    Devices.ValueUpdate(iDeviceId, 1, sStatus)
  Else
    Main.WriteDebugLog(LogLabel & "Returned invalid device id!")
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Parsing Ping Result: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' extract round trip time from ping output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetRTT(sOutput As String) As String

  Dim sLine As String
  Dim aRTT As String[]

  For Each sLine In Split(sOutput, "\n")
    ' rtt min/avg/max/mdev = 31.733/31.733/31.733/0.000 ms
    If InStr(sLine, "rtt min/avg/max/mdev") Then
      aRTT = Scan(sLine, "rtt min/avg/max/mdev */*/*/*")
      If aRTT.Count = 4 Then Return aRTT[1]
    Endif
  Next

End
