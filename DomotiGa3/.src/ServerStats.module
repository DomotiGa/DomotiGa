' Gambas module file

' Description:
' ServerStats.module
' Support for server statistics monitoring.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "ServerStats"
Public PluginFriendlyName As String = "ServerStats"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[ServerStats] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sName As String
Private $bServerStatsDebug As Boolean

Public tServerStats As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sName = cPl.Settings["servername"]
  $bServerStatsDebug = cPl.Settings["debug"]

  ' Initialize
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tServerStats.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' if not enabled, return
  If Not Main.bRRDToolEnabled Then Return

  ' check for missing rrd databases
  CreateRRDs()

  ' start poll timer for ServerStats
  tServerStats = New Timer As "tServerStats"
  tServerStats.Delay = 60 * 1000 ' every minute
  tServerStats.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tServerStats_Timer()

  UpdateRRDs() ' update rrd values every polltime seconds

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create missing rrd databases for serverstats
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateRRDs()

  Dim sRRDCmd, sRRD As String

  sRRD = Main.sBaseDir &/ "rrd/serverload.rrd"
  If Not Exist(sRRD) Then
    sRRDCmd = "rrdtool create " & sRRD & " -s 60 "
    sRRDCmd &= "DS:load1:GAUGE:300:0:U "
    sRRDCmd &= "DS:load5:GAUGE:300:0:U "
    sRRDCmd &= "DS:load15:GAUGE:300:0:U "
    sRRDCmd &= "RRA:AVERAGE:0.5:1:600 RRA:AVERAGE:0.5:2:600 RRA:AVERAGE:0.5:7:600 RRA:AVERAGE:0.5:30:600 RRA:AVERAGE:0.5:365:600"
    sRRDCmd &= " 2>&1 >/dev/null"
    If Main.bServerStatsDebug Then Main.WriteDebugLog(LogLabel & "Create rrdtool database for server load with '" & sRRDCmd & "'.")
    Shell sRRDCmd Wait
  Endif

  sRRD = Main.sBaseDir &/ "rrd/servermemory.rrd"
  If Not Exist(sRRD) Then
    sRRDCmd = "rrdtool create " & sRRD & " -s 60 "
    sRRDCmd &= "DS:used:GAUGE:300:U:U "
    sRRDCmd &= "DS:free:GAUGE:300:U:U "
    sRRDCmd &= "DS:buffers:GAUGE:300:U:U "
    sRRDCmd &= "DS:cached:GAUGE:300:U:U "
    sRRDCmd &= "RRA:AVERAGE:0.5:1:600 RRA:AVERAGE:0.5:2:600 RRA:AVERAGE:0.5:7:600 RRA:AVERAGE:0.5:30:600 RRA:AVERAGE:0.5:365:600"
    sRRDCmd &= " 2>&1 >/dev/null"
    If Main.bServerStatsDebug Then Main.WriteDebugLog(LogLabel & "Create rrdtool database for memory usage with '" & sRRDCmd & "'.")
    Shell sRRDCmd Wait
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get cpuload and memory values and update rrd files
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub UpdateRRDs()

  Dim sLoad, sMemory, sRRDCmd, sVal As String
  Dim aLoad, aMemory As String[]
  Dim cVal As New Collection

  ' run tool to fetch system load and update database
  Exec ["cat", "/proc/loadavg"] To sLoad
  aLoad = Scan(sLoad, "* * * * *")
  sRRDCmd = "N:" & aLoad[0] & ":" & aLoad[1] & ":" & aLoad[2]
  If Main.bServerStatsDebug Then
    Main.WriteDebugLog(LogLabel & "Load: " & sLoad, True)
    Main.WriteDebugLog(LogLabel & "rrdtool update " & Main.sBaseDir &/ "rrd/serverload.rrd " & sRRDCmd)
  Endif
  Exec ["rrdtool", "update", Main.sBaseDir &/ "rrd/serverload.rrd", sRRDCmd]

  ' get memory stats and update database
  Exec ["cat", "/proc/meminfo"] To sMemory
  For Each sVal In Split(sMemory, "\n", "", True)
    aMemory = Split(sVal, " ", "", True)
    cVal[Left$(aMemory[0], -1)] = Val(aMemory[1])
  Next
  sRRDCmd = "N:" & Str(cVal!MemTotal / 1024) & ":" & Str(cVal!MemFree / 1024) & ":" & Str(cVal!Buffers / 1024) & ":" & Str(cVal!Cached / 1024)
  ' some languages use comma as separator, rrdtool uses only a dot (US style)
  sRRDCmd = Replace$(sRRDCmd, ",", ".")
  If Main.bServerStatsDebug Then
    Main.WriteDebugLog(LogLabel & "MemTotal: " & cVal!MemTotal & " MemFree:" & cVal!MemFree & " Buffers: " & cVal!Buffers & " Cached: " & cVal!Cached)
    Main.WriteDebugLog(LogLabel & "rrdtool update " & Main.sBaseDir &/ "rrd/servermemory.rrd " & sRRDCmd)
  Endif
  Exec ["rrdtool", "update", Main.sBaseDir &/ "rrd/servermemory.rrd", sRRDCmd]

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create graphs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateGraphs(sTime As String)

  Dim sRRD, sRRDCmd, sGraphImage As String

  If Not Main.bRRDToolEnabled Then Return

  sRRD = Main.sBaseDir &/ "rrd/serverload.rrd"
  sGraphImage = Main.sBaseDir &/ "rrd/graphs/server-load" & "-" & sTime & ".png"
  sRRDCmd = "rrdtool graph " & sGraphImage & " --slope-mode --font DEFAULT:7: --lazy --units-exponent=0 --width " & Main.iRRDToolWidth & " --height " & Main.iRRDToolHeight & " --start -" & sTime & " -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t '" & Main.sServerStatsName & " " & ("System Load") & "' -v Load DEF:load1=" & sRRD & ":load1:AVERAGE LINE1:load1#8080ff:'1 Minute load average' DEF:load5=" & sRRD & ":load5:AVERAGE LINE1:load5#ff8080:'5 Minute load average' DEF:load15=" & sRRD & ":load15:AVERAGE LINE1:load15#000000:'15 Minutes load average'"
  sRRDCmd &= " 2>&1 >/dev/null"
  If Main.bServerStatsDebug Then Main.WriteDebugLog(LogLabel & sRRDCmd)
  Shell sRRDCmd Wait

  sRRD = Main.sBaseDir &/ "rrd/servermemory.rrd"
  sGraphImage = Main.sBaseDir &/ "rrd/graphs/server-memory" & "-" & sTime & ".png"
  sRRDCmd = "rrdtool graph " & sGraphImage & " --slope-mode --font DEFAULT:7: --width " & Main.iRRDToolWidth & " --height " & Main.iRRDToolHeight & " --lazy --base=1024 --alt-autoscale-max --lower-limit=0 --start -" & sTime & " -c SHADEA#FFFFFF -c SHADEB#FFFFFF -c BACK#FFFFFF -t '" & Main.sServerStatsName & " " & ("Memory Usage") & "' -v MBytes DEF:a=" & sRRD & ":used:AVERAGE AREA:a#6666FF:'Used' DEF:b=" & sRRD & ":free:AVERAGE STACK:b#99FF66:'Free' DEF:c=" & sRRD & ":buffers:AVERAGE LINE2:c#FFFF00:'Buffers' DEF:d=" & sRRD & ":cached:AVERAGE LINE2:d#663300:'Cached'"
  sRRDCmd &= " 2>&1 >/dev/null"
  If Main.bServerStatsDebug Then Main.WriteDebugLog(LogLabel & sRRDCmd)
  Shell sRRDCmd Wait

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return names of graph images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Graphs() As String

  ' return string with all graph image names in this group
  Return "|" & "server-load" & "|" & "server-memory" & "|"

End
