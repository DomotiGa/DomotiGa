' Gambas class file

' Description:
' CDSC.class
' Support for DSC Security Panels.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Credits:
' Tradiuz for IT100 code.

' This module is written by Timo Sariwating in 2009-2010.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "DSC"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "DSC Security"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[DSC] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property Port As String
Property Baud As String
Property Type As Integer      ' 0 = PC5401, 1 = IT100
Property MasterCode As String ' must be a 4 or 6 digit code
Property Partition As String  ' 1 - 8
Property DSCDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $iType As Integer
Private $sMasterCode As String ' master code is required for a few functions, user codes could be used instead for most.
Private $sPartitionID As String = 1 ' since a lot of the codes can be applied to any one of the 8 (!) partitions
Private $bDSCDebug As Boolean

Public Const dscPC5401 As Integer = 0
Public Const dscIT100 As Integer = 1

Public hDSC As New SerialPort
Public tDSC As New Timer

Public sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $iType = cPl.Settings["type"]
  $sMasterCode = cPl.Settings["mastercode"]
  $bDSCDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hDSC.Close

  ' get a new one
  hDSC = New Serialport As "DSC"

  With hDSC
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .EndOfLine = 1
    .Open()
  End With

  DSC_Descriptive_Arming()
  DSC_System_Time()
  DSC_LCDText()
  TX("001")

   ' start poll timer for DSC status LED
  tDSC = New Timer As "tDSCLED"
  tDSC.Delay = 250
  tDSC.Stop

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " interface connected to Port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " interface FAILED to connect to Port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Enable Descriptive Arming
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DSC_Descriptive_Arming()

  If $iType = dscIT100 Then Return ' the IT-100 does not support this
  TX("0501")
  If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Descriptive Arming Enabled")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send System Time to DSC Panel
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DSC_System_Time()

  Dim sTime_Now As String

  sTime_Now = "010" & Format$(Now, "hhnnmmddyy")
  TX(sTime_Now)
  If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "System time set to " & Now & " on alarm system")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read Serial Port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DSC_Read()

  Dim sData As String

  sData = Read #hDSC, 1
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then RX(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' RX - Process the Received Data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RX(sStr As String)

  Dim sCommand, sData, sChecksum, sCheckSumCalculating, sCheckSumCalculated As String
  Dim iCheckSumFloat, iInd, iDeviceId, iVirtDeviceId, iPartDeviceId As Integer

  ' read rs-232 datastream
  sCommand = Left$(sStr, 3)
  sData = Left$(Mid$(sStr, 4, Len(sStr)), -3)
  sChecksum = Right$(sStr, 3)

  ' calculate checksum
  For iInd = 1 To Len(sCommand)
    sCheckSumCalculating = Asc(Mid$(sCommand, iInd, 1))
    iCheckSumFloat = iCheckSumFloat + sCheckSumCalculating
  Next
    For iInd = 1 To Len(sData)
    sCheckSumCalculating = Asc(Mid$(sData, iInd, 1))
    iCheckSumFloat = iCheckSumFloat + sCheckSumCalculating
  Next
  sCheckSumCalculated = Right$(Hex$(iCheckSumFloat), 2)

  ' process if checksum is ok
  If Val(sChecksum) = Val(sCheckSumCalculated)

    iVirtDeviceId = Devices.FindVirtualDeviceID("securitysystem")

    Select Case sCommand
      Case 500
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Command Acknowledge " & sData)
      Case 501
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Bad Checksum [501]")
      Case 502
        Error_Code(sData)
      Case 550
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "System Time " & sData)
      Case 560
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Ring Detected")                    'IT-100
      Case 561
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Indoor Temperature " & sData)      'Requires a Escort 5580TC and one Enerstat thermostat
      Case 562
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Outdoor Temperature " & sData)     'Requires a Escort 5580TC and one Enerstat thermostat
      Case 563
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Thermostat Set Point " & sData)    'IT-100 - requires a Escort 5580TC and one Enerstat thermostat
      Case 570
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Broadcast Labels " & sData)        'IT-100 - FIXME - This had a LOT of data for use in autogenerating devices
      Case 580
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Baud Rate Set " & sData)           'IT-100 -  0 - 9600, 1 - 19200, 2 - 38400, 3 - 57600, 4 - 115200
      Case 601
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData, 1) & " Zone " & Right$(sData, -1) & " !ALARM!")
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC Interface"), "DSC DWS")
        iPartDeviceId = Devices.Find(Left$(sData), Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then
          Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System in Alarm <>", Devices.FindNameForDevice(iDeviceId))
          If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "!ALARM!", "", Devices.FindNameForDevice(iDeviceId), "")
          If iPartDeviceId Then Devices.ValueUpdate(iPartDeviceId, "!ALARM!", "", Devices.FindNameForDevice(iDeviceId), "")
          If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is in Alarm! Zone: " & Devices.FindNameForDevice(iDeviceId)), Main.sSMSContact)
        Else
          Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System in Alarm <>", ("Zone " & Right$(sData, -1)))
          If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "!ALARM!", "", "Zone " & Right$(sData, -1), "")
          If iPartDeviceId Then Devices.ValueUpdate(iPartDeviceId, "!ALARM!", "", "Zone " & Right$(sData, -1), "")
          If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is in Alarm! Zone: " & Right$(sData, -1)), Main.sSMSContact)
        Endif
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 602
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData, 1) & " Zone " & Right$(sData, -1) & " Alarm Restored")
      Case 603
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC Interface"), "DSC CONTACT")
        If iDeviceId Then
          If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData, 1) & " Zone " & Right$(sData, -1) & " " & Devices.FindNameForDevice(iDeviceId) & " Tamper")
          Devices.ValueUpdate(iDeviceId, "", "Tamper", "", "")
        Endif
      Case 604
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC Interface"), "DSC CONTACT")
        If iDeviceId Then
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Partition " & Left$(sData, 1) & " Zone " & Right$(sData, -1) & " " & Devices.FindNameForDevice(iDeviceId) & " Tamper Restored")
          Devices.ValueUpdate(iDeviceId, "", "Secure", "", "")
        Endif
      Case 605
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Zone " & sData & " Fault")
      Case 606
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Zone " & sData & " Fault Restored")
      Case 609
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC PIR")
        If $bDSCDebug And iDeviceId Then
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Zone " & sData & " " & Devices.FindNameForDevice(iDeviceId) & " Open")
        Endif
        If iDeviceId Then
          Select Case Devices.FindModuleForDevice(iDeviceId)
          Case 40
            Devices.ValueUpdate(iDeviceId, "Motion", "", "", "")
          Case 41
            Devices.ValueUpdate(iDeviceId, "Open", "", "", "")
          Default
            Devices.ValueUpdate(iDeviceId, "Open", "", "", "")
          End Select
        Endif
      Case 610
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC PIR")
        If $bDSCDebug And iDeviceId Then
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Zone " & sData & " " & Devices.FindNameForDevice(iDeviceId) & " Restored")
        Endif
        If iDeviceId Then
          Select Case Devices.FindModuleForDevice(iDeviceId)
          Case 40
            Devices.ValueUpdate(iDeviceId, "No Motion", "", "", "")
          Case 41
            Devices.ValueUpdate(iDeviceId, "Closed", "", "", "")
          Default
            Devices.ValueUpdate(iDeviceId, "Closed", "", "", "")
          End Select
        Endif
      Case 620
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Duress Alarm " & sData)
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "DURESS ALARM", "", "")
        If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is Alarm! DURESS"), Main.sSMSContact)
      Case 621
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Fire Alarm Key Activated")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "FIRE ALARM", "", "")
        If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is Alarm! FIRE"), Main.sSMSContact)
      Case 622
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Fire Alarm Key Restored")

      Case 623
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Key Alarm Key Activated")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "ALARM", "", "")
        If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is Alarm!"), Main.sSMSContact)
      Case 624
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Key Alarm Restored")

      Case 625
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Panic Key Alarm Activated")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "PANIC ALARM", "", "")
        If Main.bSMSEnabled Then Main.SendSMS(("DomotiGa: Security System is Alarm! PANIC"), Main.sSMSContact)
      Case 626
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Panel Key Alarm Restored")
      Case 631
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "2-Wire Smoke Alarm Activated")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC SMOKE")
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, "Alarm", "", "", "")
        Endif
      Case 632
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "2-Wire Smoke Alarm Restored")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC SMOKE")
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, "Normal", "", "", "")
        Endif
      Case 650
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Partition " & sData & " Ready")
        Try Main.hDB.Exec("UPDATE security SET ready = TRUE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "Ready", "", "")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "", "Ready", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 651
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Partition " & sData & " Not Ready")
        Try Main.hDB.Exec("UPDATE security SET ready = FALSE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "Not Ready", "", "")
        iDeviceId = Devices.Find(Right$(sData, -1), Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "", "Not Ready", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 652
        Try Main.hDB.Exec("UPDATE security SET ready = FALSE, armed = TRUE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", " ", "", "")
        iDeviceId = Devices.Find(Left$(sData), Devices.FindInterface("DSC Interface"), "DSC Partition")
        Select Case Right$(sData)
          Case 0
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData) & " Armed Away")
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Away Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Away", "", "", "")
            If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Armed Away", "Ready", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
          Case 1
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData) & " Armed Stay")
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Stay Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Stay", "", "", "")
            If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Armed Stay", "Ready", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
          Case 2
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData) & " Armed Zero Entry Away")
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Zero Entry Away Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Zero Entry Away", "", "", "")
            If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Armed Zero Entry Away", "Ready", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
          Case 3
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData) & " Armed Zero Entry Stay")
            Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "System Armed", "in Zero Entry Stay Mode <>")
            If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Armed Zero Entry Stay", "", "", "")
            If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Armed Zero Entry Stay", "Ready", "", "")
            Main.BroadcastEvent("[SecurityUpdate]")
        End Select
      Case 654
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & sData & " !ALARM!")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "!ALARM!", "Partition " & sData, "", "")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "!ALARM!", "", "", "")
      Case 655
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & sData & " Disarmed")
        Try Main.hDB.Exec("UPDATE security SET ready = TRUE, armed = FALSE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Disarmed", "Ready", "", "")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Disarmed", "Ready", "", "")
        DSC_LCDText()
      Case 656
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Exit Delay Partition " & sData)
        Try Main.hDB.Exec("UPDATE security SET armed = TRUE, lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "Exit Delay in", "Progress")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Exit Delay", "Arming", "", "")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Exit Delay", "Arming", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 657
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Entry Delay Partition " & sData)
        Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "Entry Active", "Enter Your Code")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Entry Delay", "", "", "")
        iDeviceId = Devices.Find(sData, Devices.FindInterface("DSC Interface"), "DSC Partition")
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Entry Delay", "Pre-Alarm", "", "")
        Main.BroadcastEvent("[SecurityUpdate] Entry")
      Case 658
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Keypad Lock-out Partition " & sData)
      Case 670
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Invalid Acces Code Partition " & sData)
        Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "Invalid Access Code", "")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "Invalid Access Code", "", "", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 671
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Function Not Available Partition " & sData)
      Case 672
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Failure to Arm - Partition " & sData)
      Case 673
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Busy - Partition " & sData)
      Case 700
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData, 1) & " armed by user " & Right$(sData, -1))
      Case 701
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Special Closing Partition " & sData)
      Case 702
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partial Closing Partition " & sData)
      Case 750
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Partition " & Left$(sData, 1) & " disarmed by user " & Right$(sData, -1))
      Case 751
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Special Opening Partition " & sData)
      Case 800
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Panel Battery Trouble")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Battery Trouble", "")
      Case 801
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Panel Battery Trouble Restore")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 802
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Panel AC Trouble")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "AC Trouble", "")
      Case 803
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Panel AC Trouble Restore")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 806
        If $bDSCDebug Then Main.WriteLog(LogLabel & "System Bell Trouble")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Bell Trouble", "")
      Case 807
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "System Bell Trouble Restored")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 810
        Main.WriteLog(LogLabel & "TLM Trouble")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "TLM Trouble", "")
      Case 811
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "TLM Trouble Restored")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 812
        If $bDSCDebug Then Main.WriteLog(LogLabel & "TLM Line 2 Trouble")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "TLM Line 2 Trouble", "")
      Case 813
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "TLM Line 2 Trouble Restored")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 814
        If $bDSCDebug Then Main.WriteLog(LogLabel & "FTC Trouble")
      Case 816
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Event Buffer Near Full")
      Case 821
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Wireless Low Battery Zone " & sData)
      Case 822
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Wireless Low Battery Restore Zone " & sData)
      Case 825
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Wireless Low Battery Key " & sData)
      Case 826
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Wireless Low Battery Restore Key " & sData)
      Case 827
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Wireless Low Battery Handheld " & sData)
      Case 828
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Wireless Low Battery Restore Handheld " & sData)
      Case 829
        If $bDSCDebug Then Main.WriteLog(LogLabel & "General System Tamper")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "System Tamper", "")
      Case 830
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "General System Tamper Restored")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 831
        If $bDSCDebug Then Main.WriteLog(LogLabel & "ESCORT 5580TC Trouble")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "ESCORT 5580TC Trouble", "")
      Case 832
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "ESCORT 5580TC Trouble Restored")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 840
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Trouble Status Partition " & sData)
        Try Main.hDB.Exec("UPDATE security SET trouble = TRUE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Trouble " & sData, "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 841
       If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Trouble Status Partition " & sData & " Restored")
        Try Main.hDB.Exec("UPDATE security SET trouble = FALSE WHERE id = 0")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
        Main.BroadcastEvent("[SecurityUpdate]")
      Case 842
        If $bDSCDebug Then Main.WriteLog(LogLabel & "Fire Trouble Alarm")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", "Fire Trouble", "")
      Case 843
        If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Fire Trouble Restored")
        If iVirtDeviceId Then Devices.ValueUpdate(iVirtDeviceId, "", "", " ", "")
      Case 900
        Select Case Len($sMasterCode)
          Case 4
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Sending Master Code")
            TX("200" & $sPartitionID & $sMasterCode)
          Case 6
            TX("200" & $sPartitionID & $sMasterCode)
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Sending Master Code")
          Default
            If $bDSCDebug Then Main.WriteLog(LogLabel & "Code Required")
          End Select
        Main.BroadcastEvent("[SecurityUpdate] Entry")
    End Select
    ' checksum failed
  Else
    If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Bad CheckSum")
  Endif

  Main.ControlLed("DSC", "On")
  tDSC.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process Error Codes
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Error_Code(sStr As String)

  Select Case Val(sStr)
    Case 000
      Main.WriteLog(LogLabel & "System Error - No Error")
    Case 001
      Main.WriteLog(LogLabel & "System Error - RS-232 Receive Buffer Overrun")
    Case 002
      Main.WriteLog(LogLabel & "System Error - RS-232 Receive Buffer Overfow")
    Case 003
      Main.WriteLog(LogLabel & "System Error - Keybus Transmit Buffer Overrun")
    Case 010
      Main.WriteLog(LogLabel & "System Error - Keybus Transmit Buffer Overrun")
    Case 011
      Main.WriteLog(LogLabel & "System Error - Keybus Transmit Time Timeout")
    Case 012
      Main.WriteLog(LogLabel & "System Error - Keybus Transmit Mode Timeout")
    Case 013
      Main.WriteLog(LogLabel & "System Error - Keybus Transmit Keystring Timeout")
    Case 014
      Main.WriteLog(LogLabel & "System Error - Keybus Not Functioning")
    Case 015
      Main.WriteLog(LogLabel & "System Error - Keybus Busy (Attempting to Arm / Disarm)")
    Case 016
      Main.WriteLog(LogLabel & "System Error - Keybus Busy (Lockout)")
    Case 017
      Main.WriteLog(LogLabel & "System Error - Keybus Busy (Installers Mode)")
    Case 020
      Main.WriteLog(LogLabel & "System Error - API Command Syntax Error")
    Case 021
      Main.WriteLog(LogLabel & "System Error - API Command Partition Error")
    Case 022
      Main.WriteLog(LogLabel & "System Error - API Command Not Supported")
    Case 023
      Main.WriteLog(LogLabel & "System Error - API System Not Armed")
    Case 024
      Main.WriteLog(LogLabel & "System Error - API System Not Ready to Arm")
      Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1 WHERE id = 0", "System not Ready to Arm")
      Main.BroadcastEvent("[SecurityUpdate]")
    Case 025
      Main.WriteLog(LogLabel & "System Error - API Command Invalid Length")
    Case 026
      Main.WriteLog(LogLabel & "System Error - API User Code Not Required")
    Case 027
      Main.WriteLog(LogLabel & "System Error - API Invalid Characters in Command")
    Case Else
      Main.WriteLog(LogLabel & "System Error - " & sStr)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from device.setdevice
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String, iDeviceId As Integer)

  Dim sDeviceType, sCode, sPartition As String

  If CInteger(sAddress) < 1 Or CInteger(sAddress) > 8 Then
    Main.WriteDebugLog(LogLabel & "Partition out of range! (" & sPartition & ")")
    Return
  Else
    sPartition = sAddress
  Endif
  If Len($sMasterCode) = 4 Then sCode = $sMasterCode & "00"

  sDeviceType = Devices.FindTypeNameForDevice(iDeviceId)
  Select Case sDeviceType
    Case "DSC Partition"
      Select Case UCase(sCmd)
        Case "ARM STAY", "ARMSTAY", "ARMED STAY", "STAY", "AS"
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Arming Stay - Partition " & sPartition)
          TX("031" & sPartition)
        Case "ARM AWAY", "ARMAWAY", "ARMED AWAY", "AWAY", "AA"
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Arming Away - Partition " & sPartition)
          TX("030" & sPartition)
        Case "ARM ZERO DELAY", "ARMZERODELAY", "ARM ZERO", "A0"
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Arming Zero Entry Delay - Partition " & sPartition)
          TX("032" & sPartition)
        Case "ARM", "ON" 
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Arming - Partition " & sPartition)
          TX("033" & sPartition & sCode)
        Case "DISARM", "DIS ARM", "DISARMED", "DA", "OFF" 
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Disarming - Partition " & sPartition)
          TX("040" & sPartition & sCode)
        Case "PANIC", "PAN"
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "[P]ANIC")
          TX("060P")
        Case "FIRE"
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "[F]IRE")
          TX("060F")
        Case "AMBULANCE", "AMB"
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "[A]MBULANCE")
          TX("060A")
        Default
          TX("500")
          If $bDSCDebug Then Main.WriteDebugLog(LogLabel & "Command '" & sCmd & "' not found!")
      End Select
    Case "DSC PIR", "DSC Contact", "DSC Smoke"
      If $bDSCDebug Then Main.WriteDebugLog("LogLabel &  '" & sDeviceType & "' is a read-only device!")
    Case Else
      If $bDSCDebug Then Main.WriteDebugLog("LogLabel &  Unknown DSC device type!")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' TX - Calculate the CheckSum and Transmit the data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub TX(sStr As String)

  Dim sCheckSumCalculating, sCheckSumCalculated As String
  Dim iCheckSumFloat, iInd As Integer

  ' calculate checksum
  For iInd = 1 To Len(sStr)
    sCheckSumCalculating = Asc(Mid$(sStr, iInd, 1))
    iCheckSumFloat = iCheckSumFloat + sCheckSumCalculating
  Next
  sCheckSumCalculated = Right(Hex$(iCheckSumFloat), 2)

  Print #hDSC, sStr & sCheckSumCalculated

End

Public Sub tDSCLED_Timer()

  Main.ControlLed("DSC", "Off")
  tDSC.Stop

End

Public Sub DSC_LCDText()

  Dim sLCDTime As String = Format$(Now(), "dd/mmmm/yyyy hh:nn")

  Try Main.hDB.Exec("UPDATE security SET lcd_line1 = &1, lcd_line2 = &2 WHERE id = 0", "DSC Security", sLCDTime)
  Main.BroadcastEvent("[SecurityUpdate]")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hDSC.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' implement properties
Private Function Port_Read() As String

  Return $sSerPort

End

Sub Port_Write(Value As String)

  $sSerPort = Value

End

Private Function Baud_Read() As String

  Return $sBaud

End

Private Sub Baud_Write(Value As String)

  $sBaud = Value

End

Private Function DSCDebug_Read() As Boolean

  Return $bDSCDebug

End

Private Sub DSCDebug_Write(Value As Boolean)

  $bDSCDebug = Value

End

Private Function Type_Read() As Integer

  Return $iType

End

Private Sub Type_Write(Value As Integer)

  $iType = Value

End

Private Function MasterCode_Read() As String

  Return $sMasterCode

End

Private Sub MasterCode_Write(Value As String)

  If Len(Value) <> 4 Or Len(Value) <> 6 Then
    $sMasterCode = Value
  Else
    Error "Master Code must be either 4 or 6 characters long!"
  Endif

End

Private Sub Partition_Read() As String

  Return $sPartitionID

End

Private Sub Partition_Write(Value As String)

  If CInteger(Value) >= 1 And CInteger(Value) <= 8 Then
    $sPartitionID = Value
  Else
    Error "Partition must be between 1-8. Invalid partition specified!."
  Endif

End
