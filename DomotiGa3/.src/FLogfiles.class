' Gambas class file

' Description:
' FLogfiles.class
' Display the different types of logs.
' Windows are cleared after it reached max buffers size (see main settings)

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bPaused As Boolean
Public iActive As Integer = 1
Private rResult As Result

Public Sub Form_Open()

  If Not Main.bServer Then btnViewFile.Enabled = False
  btnMain_Click()

End

Public Sub Form_Resize()

  txtMainLog.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  txtSpeakLog.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  txtDebugLog.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  lvDevices.Move(4, 30, 176, Me.ClientHeight - 31)
  gvDevices.Move(183, 30, Me.ClientWidth - 189, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Private Sub FillDeviceList()

  Dim rResultDevices As Result
  Dim pIcon As Picture

  lvDevices.Clear

  rResultDevices = Devices.GetDevicesAndValues(["sortOrder": "name", "enabled": True, "log": True])
  If rResultDevices Then
    If rResultDevices.Count Then
      For Each rResultDevices
        Try pIcon = Picture[Main.sBaseDir &/ "icons" &/ Devices.GetStatusIcon(rResultDevices!device_value_value, rResultDevices!device_onicon, rResultDevices!device_officon, rResultDevices!device_dimicon)]
        Try lvDevices.Add(rResultDevices!device_id, rResultDevices!device_name, pIcon)
      Next
    Endif
  Else
    Message.Info(("Error: couldn't find devices table!"))
    Return
  Endif

End

Public Sub btnMain_Click()

  txtDebugLog.Hide
  txtSpeakLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  txtMainLog.Show
  iActive = 1

End

Public Sub btnSpeak_Click()

  txtSpeakLog.Show
  txtMainLog.Hide
  txtDebugLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  iActive = 2

End

Public Sub btnDebug_Click()

  txtDebugLog.Show
  txtMainLog.Hide
  txtSpeakLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  iActive = 3

End

Public Sub btnDevices_Click()

  FillDeviceList()

  With gvDevices
    .Columns.Count = 4
    .Columns[0].Width = 180
    .Columns[1].Width = 80
    .Columns[2].Width = 80
    .Columns[3].Width = 80
  End With

  txtDebugLog.Hide
  txtMainLog.Hide
  txtSpeakLog.Hide
  lvDevices.Show
  gvDevices.Show
  iActive = 5

End

Public Sub tbtnPause_Click()

  bPaused = tbtnPause.Value

End

Public Sub btnViewFile_Click()

  Select iActive
    Case 1
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sMainLogfile)
    Case 2
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sSpeakLogfile)
    Case 3
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sDebugLogfile)
  End Select

End

Public Sub lvDevices_Select()

  ShowDeviceLog(lvDevices.Item.Key)

End

Private Sub ShowDeviceLog(iId As Integer)

  If Not Devices.CheckIfDeviceExists(iId) Then Return

  rResult = Main.hDB.Exec("SELECT device_values_log.*, device_values.units, device_values.correction FROM device_values_log JOIN device_values ON device_values_log.device_id = device_values.device_id AND device_values_log.valuenum = device_values.valuenum WHERE device_values_log.device_id = &1 ORDER BY id DESC", iId)
  If Not rResult Then
    Message.Info(("Error: table 'device_values_log' not found!"))
    Return
  Endif

  With gvDevices
    .Rows.Count = rResult.Count
    .Columns[0].Title = ("Changed")
    .Columns[1].Title = ("Value")
    .Columns[2].Title = ("Unit")
    .Columns[3].Title = ("Value number")
  End With

End

Public Sub gvDevices_Data(Row As Integer, Column As Integer)

  Dim sValue, sUnits As String

  If Row Mod 2 Then gvDevices.Data.Background = Color.Background

  Try rResult.MoveTo(Row)
  If Not Error Then
    Select Case Column
      Case 0
        gvDevices.Data.Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Case 1
        sValue = Devices.CorrectValue(rResult!value, rResult!correction, rResult!id)
        If sValue Then
          gvDevices.Data.Text = sValue
        Else
          gvDevices.Data.Text = ""
        Endif
      Case 2
        sUnits = rResult!units
        If sUnits Then
          gvDevices.Data.Text = sUnits
        Else
          gvDevices.Data.Text = ""
        Endif
      Case 3
        gvDevices.Data.Text = rResult!valuenum
    End Select
  Endif

End

Public Sub lvDevices_DblClick()

  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceEditor.Run(lvDevices.Key)
  Else
    Message(("Sorry, editing devices is not enabled for users.\nLogin as an admin."))
  Endif

End
