' Gambas class file

' Description:
' FLogfiles.class
' Display the different types of logs.
' Logs are not stored in db or file at the moment.
' And windows are cleared after it reached max buffers size (see main settings)

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bPaused As Boolean
Public iActive As Integer = 1
Private rResult As Result
Private rResultDevice As Result

Public Sub Form_Open()

  If Not Main.bServer Then btnViewFile.Enabled = False
  btnMain_Click()

End

Public Sub Form_Resize()

  txtMainLog.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  txtSpeakLog.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  txtDebugLog.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  lvDevices.Move(4, 30, 176, Me.ClientHeight - 31)
  gvDevices.Move(183, 30, Me.ClientWidth - 189, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Private Sub FillDeviceList()

  Dim rResultDevices As Result
  Dim pIcon As Picture

  lvDevices.Clear

  rResultDevices = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE AND log is TRUE ORDER BY name")
  If rResultDevices Then
    If rResultDevices.Count Then
      For Each rResultDevices
        If Not IsNull(rResultDevices!onicon) Or Not IsNull(rResultDevices!officon) Then
          If UCase(rResultDevices!value) = "ON" Or UCase(rResultDevices!value) = "OPEN" Or UCase(rResultDevices!value) = "MOTION" Or UCase(rResultDevices!value) = "UP" Or UCase(rResultDevices!value) = "AWAKE" Then
            Try pIcon = Picture[Main.sBaseDir &/ "icons" &/ rResultDevices!onicon]
          Else If InStr(UCase(rResultDevices!value), "DIM") Then
            Try pIcon = Picture[Main.sBaseDir &/ "icons" &/ rResultDevices!dimicon]
          Else
            Try pIcon = Picture[Main.sBaseDir &/ "icons" &/ rResultDevices!officon]
          End If
        End If
        lvDevices.Add(rResultDevices!id, rResultDevices!name, pIcon)
      Next
    Endif
  Else
    Message.Info(("Error: couldn't find devices table!"))
    Return
  Endif

End

Public Sub btnMain_Click()

  txtDebugLog.Hide
  txtSpeakLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  txtMainLog.Show
  iActive = 1

End

Public Sub btnSpeak_Click()

  txtSpeakLog.Show
  txtMainLog.Hide
  txtDebugLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  iActive = 2

End

Public Sub btnDebug_Click()

  txtDebugLog.Show
  txtMainLog.Hide
  txtSpeakLog.Hide
  lvDevices.Hide
  gvDevices.Hide
  iActive = 3

End

Public Sub btnDevices_Click()

  FillDeviceList()

  With gvDevices
    .Columns.Count = 5
    .Columns[0].Width = 180
    .Columns[1].Width = 80
    .Columns[2].Width = 80
    .Columns[3].Width = 80
    .Columns[4].Width = 80
  End With

  txtDebugLog.Hide
  txtMainLog.Hide
  txtSpeakLog.Hide
  lvDevices.Show
  gvDevices.Show
  iActive = 4

End

Public Sub tbtnPause_Click()

  bPaused = tbtnPause.Value

End

Public Sub btnViewFile_Click()

  Select iActive
    Case 1
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sMainLogfile)
    Case 2
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sSpeakLogfile)
    Case 3
      Main.OpenTextViewer(Main.sBaseDir &/ "logs" &/ Main.sDebugLogfile)
  End Select

End

Public Sub lvDevices_Select()

  ShowDeviceLog(lvDevices.Item.Key)

End

Private Sub ShowDeviceLog(iId As Integer)

  Dim sLabel, sLabel2, sLabel3, sLabel4 As String = " "

  rResultDevice = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  If Not rResultDevice Then Return

  rResult = Main.hDB.Exec("SELECT * FROM devices_log WHERE deviceid = &1 ORDER BY id DESC", iId)
  If Not rResult Then
    Message.Info(("Error: table 'devices_log' not found!"))
    Return
  End If

  If rResultDevice!label Then sLabel = rResultDevice!label
  If rResultDevice!label2 Then sLabel2 = rResultDevice!label2
  If rResultDevice!label3 Then sLabel3 = rResultDevice!label3
  If rResultDevice!label4 Then sLabel4 = rResultDevice!label4

  With gvDevices
    .Rows.Count = rResult.Count
    .Columns[0].Title = ("Changed")
    .Columns[1].Title = sLabel
    .Columns[2].Title = sLabel2
    .Columns[3].Title = sLabel3
    .Columns[4].Title = sLabel4
  End With

End

Public Sub gvDevices_Data(Row As Integer, Column As Integer)

  Dim sValue, sValue2, sValue3, sValue4 As String

  If Row Mod 2 Then gvDevices.Data.Background = Color.Background

  Try rResult.MoveTo(Row)
  If Not Error Then
    Select Case Column
      Case 0
        gvDevices.Data.Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Case 1
        sValue = Devices.CorrectValue(rResult!value, rResultDevice!correction, rResult)
        If sValue Then
          gvDevices.Data.Text = sValue
        Else
          gvDevices.Data.Text = ""
        Endif
      Case 2
        sValue2 = Devices.CorrectValue(rResult!value2, rResultDevice!correction2, rResult)
        If sValue2 Then
          gvDevices.Data.Text = sValue2
        Else
          gvDevices.Data.Text = ""
        Endif
      Case 3
        sValue3 = Devices.CorrectValue(rResult!value3, rResultDevice!correction3, rResult)
        If sValue3 Then
          gvDevices.Data.Text = sValue3
        Else
          gvDevices.Data.Text = ""
        Endif
      Case 4
        sValue4 = Devices.CorrectValue(rResult!value4, rResultDevice!correction4, rResult)
        If sValue4 Then
          gvDevices.Data.Text = sValue4
        Else
          gvDevices.Data.Text = ""
        Endif
    End Select
  Endif

End
