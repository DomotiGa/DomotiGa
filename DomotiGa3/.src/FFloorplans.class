' Gambas class file

' Description:
' FFloorplans.class
' Display devices on a floorplan.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private $iFloor As Integer = 2
Private tRefresh As Timer
Private bAutoRefresh As Boolean

Public Sub Form_Open()

  PopulateButtons()
  ' open first floor
  RefreshPage()
  ' create refresh timer
  tRefresh = New Timer As "tRefresh"
  tRefresh.Delay = 30000 ' 30 seconds

End

Public Sub Form_Resize()

  tbFloors.Width = Me.Width
  hbFloors.Width = Me.Width
  svFloorplan.Move(15, 45, Me.ClientWidth - 15, Me.ClientHeight - 47)

End

Public Sub PopulateButtons()

  Dim rFloor As Result
  Dim hButton As Button

  ' populate floors toolbutton
  Try rFloor = Main.hDB.Exec("SELECT * FROM floors")
  If rFloor.Count Then
    For Each rFloor
    If Not rFloor!name Then Continue
    hButton = New Button(hbFloors) As "FloorButton"
     With hButton
      If rFloor!floor = 2 Then .Enabled = False
      .Text = rFloor!name
      .Height = 28
      .Width = 84
      .Tag = rFloor!floor
    End With
    Next
  Endif

End

Public Sub FloorButton_Click()

  $iFloor = Last.Tag
  RefreshPage()

End

Public Sub DisplayFloorplan(iFloor As Integer, oParent As Object, idNotShow As String)

  Dim hPictureBox As PictureBox
  Dim rFloor, rDevice As Result
  Dim imgFloorplan As Image
  Dim sIcon, sValue As String
  Dim x, y, iFloorDev As Integer
  Dim oObject As Object
  Dim hText As TextLabel
  Dim hMovieBox As MovieBox

  ' delete previous floorplan first
  For Each oObject In oParent.Children
    oObject.Delete()
  Next

  ' try loading floorplan image if available
  Try rFloor = Main.hDB.Exec("SELECT * FROM floors WHERE floor = &1", iFloor)
  If rFloor And If rFloor.Available Then
    If rFloor!image Then
      Try imgFloorplan = Image.Load(Main.sBaseDir &/ "floorplans" &/ rFloor!image)
      If imgFloorplan Then
        ' floorplan image
        hPictureBox = New PictureBox(oParent) As "Floorplan"
        With hPictureBox
          .Picture = imgFloorplan.Picture
          .Height = imgFloorplan.Height
          .Width = imgFloorplan.Width
          .X = 0
          .Y = 0
        End With
      Else
        Message.Info(("Couldn't open floorplan image"))
      Endif
    Endif
  Endif

  ' search for devices with floorplan filled and valid x and y values
  Try rDevice = Devices.GetDevicesAndValues(["not_device_id": idNotShow, "valuenum": [1]])
  If rDevice.Count Then
    For Each rDevice
        sValue = UCase(rDevice!device_value_value)
        Try x = rDevice!device_x
        Try y = rDevice!device_y
        Try iFloordev = rDevice!device_floorplan
        If rDevice!device_floorplan_id = iFloor Then
          If x And y Then
          ' draw icon on x/y location
          If Not IsNull(rDevice!device_onicon) Or Not IsNull(rDevice!device_officon) Then
            If sValue = "ON" Or sValue = "OPEN" Or sValue = "MOTION" Or sValue = "UP" Or sValue = "AWAKE" Or sValue = "ONLINE" Or sValue = "LIGHT" Or sValue = "ALARM" Then
              sIcon = Main.sBaseDir &/ "icons" &/ rDevice!device_onicon
              If rDevice!device_switchable Then
                hMovieBox = New MovieBox(oParent) As "DeviceIconSwitch_Off"
              Else
                hMovieBox = New MovieBox(oParent) As "DeviceIcon"
              Endif
            Else If InStr(sValue, "DIM") Then
              sIcon = Main.sBaseDir &/ "icons" &/ rDevice!device_dimicon
              hMovieBox = New MovieBox(oParent) As "DeviceIconDim"
            Else
              sIcon = Main.sBaseDir &/ "icons" &/ rDevice!device_officon
              If rDevice!device_switchable Then
                hMovieBox = New MovieBox(oParent) As "DeviceIconSwitch_On"
              Else
                hMovieBox = New MovieBox(oParent) As "DeviceIcon"
              Endif
            Endif

            With hMovieBox
              Try .Path = sIcon
              .Height = 20
              .Width = 20
              .X = X
              .Y = Y
              .ToolTip = rDevice!device_name & "\r\n" & Devices.GetCurrentValueForDevice(rDevice!device_id, 1) & rDevice!device_value_units
              .Tag = rDevice!device_id
              .Playing = True
            End With
          Endif
          If Len(RTrim$(rDevice!device_value_value)) Then
            hText = New TextLabel(oParent) As "DeviceText"
            With hText
              .Font = Font["Sans Serif, 6, Normal"]
              .X = X
              .Y = Y + 20
              .Width = Len(RTrim$(rDevice!device_value_value) & RTrim$(rDevice!device_value_units)) * 6
              .Text = RTrim$(Devices.GetCurrentValueForDevice(rDevice!device_id, 1)) & RTrim$(rDevice!device_value_units)
              '.Transparent = TRUE
            End With
          Endif
        Endif
      Endif
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRefresh_Timer()

  RefreshPage()

End

Public Sub Form_Close()

  tRefresh.Stop

End

Public Sub btnRefresh_Click()

  RefreshPage()

End

Public Sub DeviceIconSwitch_Off_MouseDown()

  If Main.bServer Then
    Devices.SetDevice(Last.Tag, "Off")
  Else
    Client.DeviceSetDevice(Last.Tag, "Off")
  Endif
  RefreshPage()

End

Public Sub DeviceIconSwitch_On_MouseDown()

  If Main.bServer Then
    Devices.SetDevice(Last.Tag, "On")
  Else
    Client.DeviceSetDevice(Last.Tag, "On")
  Endif
  RefreshPage()

End

Public Sub RefreshPage()

  Dim oObject As Object

  ' enable all buttons first, then disable selected one
  For Each oObject In hbFloors.Children
    oObject.Enabled = True
    If oObject.Tag = $iFloor Then oObject.Enabled = False
  Next

  DisplayFloorplan($iFloor, svFloorplan, "0")

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    tRefresh.Start
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    tRefresh.Stop
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End
