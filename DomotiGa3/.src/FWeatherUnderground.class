' Gambas class file

' Description:
' FWeatherUnderground.class
' Form for showing weather underground info.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public SupportWeatherCitySearch As Boolean = False

Private tWeatherRefresh As New Timer
Private $Error As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Code to execute when WeatherUnderground form open
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  ' Check if we can/should show this form
  If Not Plugin.IsPluginEnabled("WeatherUnderground", 0) Then
    Message.Info(("WeatherUnderground is not enabled!"))
    Try Me.Close
    Return
  Endif

  PopulateButtons()
  GetWeatherUndergroundInfo()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Always stop timer if we close the form
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Close()

  Try tWeatherRefresh.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Resize the tabpanel when the form is resized
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Resize()

  TabPanelWeatherUnderground.Move(3, 1, Me.ClientWidth - 5, Me.ClientHeight)

End

Public Sub PopulateButtons()

  Dim rFeed As Result
  Dim hButton As Button

  ' populate feeds toolbutton
  Try rFeed = Main.hDB.Exec("SELECT * FROM weatherfeeds WHERE enabled is TRUE")
  If rFeed.count Then
    For Each rFeed
    If Not rFeed!name Or rFeed!enabled = False Then Continue
    hButton = New Button(vbFeeds) As "FeedButton"
     With hButton
      .Text = rFeed!name
      .Height = 28
      .Width = 84
      .Tag = rFeed!id
    End With
    Next
  Endif

End

Public Sub FeedButton_Click()

  Dim iFeed As Integer = Last.tag
  Dim oObject As Object

  ' enable all buttons, then disable selected one
  For Each oObject In vbFeeds.Children
    oObject.Enabled = True
    If oObject.Tag = iFeed Then oObject.Enabled = False
  Next
  DisplayFeed(iFeed)

End

Public Sub DisplayFeed(iFeed As Integer)

  Dim rFeed As Result

  Try rFeed = Main.hDB.Exec("SELECT * FROM weatherfeeds where id=" & iFeed)
  If rFeed Then
    InitSatelliteImage(rFeed!url)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' when an URL is given, try to fetch the animated satellite image
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub InitSatelliteImage(sUrl As String)

  Dim sFile As String
  Dim picTemp As Picture

  sFile = Util.DownloadFile(sUrl, True)
  If Len(sFile) > 0 Then
    picTemp = Picture.Load(sFile)
    MvSatImage.Path = sFile
    MvSatImage.Playing = True
    MvSatImage.Resize(picTemp.Width, picTemp.Height)
    MvSatImage.Refresh
    MvSatImage.Show
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieves the WeatherUnderground information from the plugin and process it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetWeatherUndergroundInfo()

  Dim hWeatherUnderground As Object
  Dim cWeatherData As New Collection
  Dim iCnt As Integer

  ' Reset to blank, we use this variable to detect if an internal error happened
  $Error = ""

  If Main.bServer Then

    ' Check if the plugin is really enabled
    If Not Plugin.IsPluginEnabled("WeatherUnderground", 1) Then
      Error.Raise("WeatherUnderground is not enabled")
    Endif

    hWeatherUnderground = Plugin.GetPluginObject("WeatherUnderground", 1).Interface
    cWeatherData = hWeatherUnderground.JsonRpc_WeatherUnderground_Get(Null)
  Else
    ' Not yet supported
    Message.Info(("WeatherUnderground does not work yet in client/server mode!"))
    Try Me.Close
    Return
    ' FIXME: Not yet supported
    'cWeatherData = Client.WeatherGet(["weather": "weatherunderground", "instance_id": 1])
  Endif

  If cWeatherData = Null Then
    Error.Raise("The WeatherUnderground Plugin didn't return data")
  Else
    If cWeatherData["error"] Then
      Error.Raise("The WeatherUnderground Plugin error response: \n" & cWeatherData["error"])
    Else
      If cWeatherData.Count = 0 Then
        Error.Raise("The WeatherUnderground Plugin didn't return data")
      Endif
    Endif
  Endif

  tWeatherRefresh = New Timer As "tWeatherRefresh"
  Try tWeatherRefresh.Delay = Plugin.GetPluginObject("WeatherUnderground", 1).Settings["polltime"] * 1000
  If Error Then tWeatherRefresh.Delay = 300 * 1000
  tWeatherRefresh.Start

  ' No Error up to here? Enable the WeatherUnderground Tab strip
  TabPanelWeatherUnderground.Visible = True
  TextAreaMsg.Visible = False

  TxtTemp.Text = cWeatherData["current"]["temperature"] & " " & Main.sTemperature
  TxtRelativeHumidity.Text = cWeatherData["current"]["humidity"] & " %"
  TxtPressureMb.Text = cWeatherData["current"]["pressure"] & IIf(Main.sTemperature = "°C", " mb", " in")
  TxtHeatIndex.Text = cWeatherData["current"]["heat_index"] & IIf(cWeatherData["current"]["heat_index"] <> "NA", " " & Main.sTemperature, "")
  TxtWindchill.Text = cWeatherData["current"]["windchill"] & IIf(cWeatherData["current"]["windchill"] <> "NA", " " & Main.sTemperature, "")
  TxtDewpoint.Text = cWeatherData["current"]["dewpoint"] & Main.sTemperature
  TxtWindDegrees.Text = cWeatherData["current"]["wind_degrees"]
  TxtStationLocation.Text = cWeatherData["current"]["weatherstation"]
  TxtTimeUpdate.Text = cWeatherData["current"]["lastupdate"]

  TxtWindDir.Text = cWeatherData["current"]["wind_dir_text"]
  TxtWind.Text = cWeatherData["current"]["wind"] & IIf(Main.sTemperature = "°C", " km/h", " mph")
  TxtWindMs.Text = cWeatherData["current"]["wind_ms"] & " m/sec"
  TxtWindBeaufort.Text = cWeatherData["current"]["wind_beaufort"] & " Bft"
  TxtWindGust.Text = cWeatherData["current"]["wind_gust"] & IIf(Main.sTemperature = "°C", " km/h", " mph")
  TxtWindGustMs.Text = cWeatherData["current"]["wind_gust_ms"] & " m/sec"
  TxtWindGustBeaufort.Text = cWeatherData["current"]["wind_gust_beaufort"] & " Bft"

  TxtVisibilityKm.Text = cWeatherData["current"]["visibility"] & IIf(Main.sTemperature = "°C", " km", " mi")
  TxtPrecip1hr.Text = cWeatherData["current"]["precip_1h"] & IIf(Main.sTemperature = "°C", " mm", " in")
  TxtPrecipToday.Text = cWeatherData["current"]["precip_today"] & IIf(Main.sTemperature = "°C", " mm", " in")
  TxtWeather.Text = cWeatherData["current"]["weatherdesc"]

  TxtPercentIlluminated.Text = cWeatherData["current"]["illuminated"] & " %"
  TxtAgeOfMoon.Text = cWeatherData["current"]["ageofmoon"] & (" days")

  Try PicCurrentWeather.Picture = Picture.Load(Util.DownloadFile(cWeatherData["current"]["icon_url"]))
  Try PicWindDir.Picture = Picture.Load(XMLParser.ReturnWindDirectionPic(cWeatherData["current"]["wind_dir"]))

  ' 2 day forecast detailed
  If cWeatherData["forecast_detail"].Count >= 6
    For iCnt = 0 To 5
      Select Case iCnt
        Case 0
          PicFor0.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_detail"][iCnt]["icon_url"]))
        Case 1
          PicFor1.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_detail"][iCnt]["icon_url"]))
        Case 2
          PicFor2.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_detail"][iCnt]["icon_url"]))
        Case 3
          PicFor3.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_detail"][iCnt]["icon_url"]))
        Case 4
          PicFor4.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_detail"][iCnt]["icon_url"]))
      End Select

      Main.SetTextProperty("TextArea" & CStr(iCnt), cWeatherData["forecast_detail"][iCnt]["text"], Me.Frame3)
    Next
  Endif

  ' 3 day forecast
  If cWeatherData["forecast_simple"].Count = 4
    For iCnt = 0 To 3
      Main.SetTextProperty("TextDay" & CStr(iCnt), cWeatherData["forecast_simple"][iCnt]["weekday"], Me.Frame5)
      Main.SetTextProperty("LblCondition" & CStr(iCnt), cWeatherData["forecast_simple"][iCnt]["condition"], Me.Frame5)
      Select Case iCnt
        Case 0
          PicFC0.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_simple"][iCnt]["icon_url"]))
        Case 1
          PicFC1.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_simple"][iCnt]["icon_url"]))
        Case 2
          PicFC2.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_simple"][iCnt]["icon_url"]))
        Case 3
          PicFC3.Picture = Picture.Load(Util.DownloadFile(cWeatherData["forecast_simple"][iCnt]["icon_url"]))
      End Select

      Main.SetTextProperty("LblTempHigh" & CStr(iCnt), ("High:") & " " & cWeatherData["forecast_simple"][iCnt]["temperature_high"] & " " & Main.sTemperature, Me.Frame5)
      Main.SetTextProperty("LblTempLow" & CStr(iCnt), ("Low:") & " " & cWeatherData["forecast_simple"][iCnt]["temperature_low"] & " " & Main.sTemperature, Me.Frame5)
    Next
  Endif

Catch
  TabPanelWeatherUnderground.Visible = False
  TextAreaMsg.Visible = True
  TextAreaMsg.Text = "ERROR: " & Error.Text
  Main.WriteLog("[WeatherUG] ERROR: " & Error.Text & " at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Refresh Timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tWeatherRefresh_Timer()

  GetWeatherUndergroundInfo()

End
