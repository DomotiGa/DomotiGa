' Gambas class file

' Description:
' CCUPS.class
' Connect to UPS via upsd's tcp socket and monitor status.

' Development Status:
' Working, maybe later add more variables to monitor.
' Only tested with my APC SmartUPS 1000, only one UPS at a time supported.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "UPS"
Public PluginFriendlyName As String = "UPS"
Public PluginVersion As String = "2.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[UPS] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $iPollTime As Integer
Private $bDebug As Boolean

' Interface objects
Public hMySocket As CSocket

Public tUPS As New Timer As "tUPS"
Public tUPSKeepAlive As New Timer As "tUPSKeepAlive"

Private $sMsgData As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("UPS Socket")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = &HFF + gb.Byte
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hMySocket.Close

  ' try stop running timers
  StopTimers()

  WriteLog(PluginFriendlyName & " TCP connection closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

  ' try to stop the timers
  Try tUPS.Stop
  Try tUPSKeepAlive.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run after succesfull connect
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' Empty internal buffer
  $sMsgData = ""

  If Not tUPS.Enabled Then
    tUPS.Delay = $iPollTime * 1000 ' multiply for seconds
    tUPS.Start
  Endif

  ' Start the keepalive timer, normally upsd seem to drop connection after 60 seconds
  If Not tUPSKeepAlive.Enabled Then 
    tUPSKeepAlive.Delay = 30000
    tUPSKeepAlive.Start
  Endif

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port. vVar is gb.String
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process each character received
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedChar(bTemp As Byte)

  If bTemp = 10 Then ' Buffer until newline then parse
    If Len($sMsgData) > 1 Then ProcessReceivedPacket($sMsgData)
    $sMsgData = ""
  Else
    $sMsgData &= Chr(bTemp)
  Endif


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle possible upsd messages
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sBuf As String)

  Dim sValue, sAddress As String
  Dim iDeviceId As Integer

  If $bDebug Then WriteDebugLog("< " & sBuf)

  ' try to find address and deviceid
  If InStr(sBuf, "ERR") = 0 Then
    sAddress = Replace(sBuf, "VAR ", "")
    sAddress = Mid(sAddress, 1, InStr(sAddress, " ", 1) - 1)
    iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "UPS")
  Endif

  ' VAR smartups1000 input.voltage "223.6"
  ' VAR smartups1000 ups.status "OL"
  ' VAR smartups1000 ups.temperature "030.1"
  ' VAR smartups1000 ups.load "41"

  If iDeviceId Then
    If InStr(sBuf, "ups.status") Then
      If InStr(sBuf, "OL") Then
        sValue = "Online"
      Else If InStr(sBuf, "OB") Then
        sValue = "On Battery"
      Else If InStr(sBuf, "LB") Then
        sValue = "Low Battery"
      Endif
      Devices.ValueUpdate(iDeviceId, 1, sValue)
    Else If InStr(sBuf, "input.voltage") Then
      sValue = Mid$(sBuf, Len(sBuf) - 5, -1)
      Devices.ValueUpdate(iDeviceId, 2, sValue)
    Else If InStr(sBuf, "battery.charge") Then
      sValue = Mid$(sBuf, Len(sBuf) - 3, -1)
      Devices.ValueUpdate(iDeviceId, 2, sValue)
    Else If InStr(sBuf, "ups.temperature") Then
      sValue = Mid$(sBuf, Len(sBuf) - 4, -1)
      Devices.ValueUpdate(iDeviceId, 3, sValue)
    Else If InStr(sBuf, "ups.load") Then
      sValue = Mid$(sBuf, Len(sBuf) - 1, -1)
      Devices.ValueUpdate(iDeviceId, 3, sValue)
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tUPS_Timer()

  CheckUPS()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' The keepalive timer expired, send something
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tUPSKeepAlive_Timer()

  ' Only do a keepalive if we got a connection
  If hMySocket.Status = Net.Connected Then
    SendCommand("")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckUPS()

  Dim rResult As Result

  If hMySocket.Status = Net.Connected Then
    rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
    If rResult And If rResult.Available Then
      For Each rResult
        If $bDebug Then WriteDebugLog("Checking UPS named '" & rResult!name & "' with address '" & rResult!address & "'")
        Check(rResult!address, rResult!id)
      Next
    Else
      WriteLog("ERROR: No UPS(s) found in device table!")
    Endif
  Else
    WriteLog("ERROR: TCP Socket not connected (" & hMySocket.Status & ").")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send get requests to the UPS
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Check(sAddress As String, iDeviceId As Integer)

  Dim sCmd As String 

  sCmd = "GET VAR " & sAddress & " ups.status"
  If $bDebug Then WriteDebugLog("> " & sCmd)

  Try hMySocket.Write(sCmd, gb.String)
  If Error Then WriteDebugLog("Error writing data to network socket! -> " & Error.Text)

  sCmd = "GET VAR " & sAddress & " ups.load"
  SendCommand(sCmd)

  Select Case Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId)
    Case "BackUPS" ' APC BackUPS
      sCmd = "GET VAR " & sAddress & " ups.load"
    Case "MGE" ' MGE PC 675
      sCmd = "GET VAR " & sAddress & " battery.charge"
    Case Else ' APC SmartUPS
      sCmd = "GET VAR " & sAddress & " ups.temperature"
  End Select

  SendCommand(sCmd)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendCommand(sData As String)

  If $bDebug Then
    If sData Then
      WriteDebugLog("> " & sData)
    Else
      WriteDebugLog("> Keepalive Send")
    Endif
  Endif

  Try hMySocket.Write(sData & gb.Lf, gb.String)
  If Error Then WriteDebugLog("Error writing data to network socket! -> " & Error.Text)

End

