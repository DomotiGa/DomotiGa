' Gambas module file

' Description:
' Prowl.module
' Contains code for sending Prowl messages

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public hProwlMessage As HttpClient
Public cProwlData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse Prowl XML Response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseProwlXML(sXML As String) As String[]

  Dim XmlR As New XmlReader
  Dim bProwl As Boolean
  Dim sOk As String
  Dim sCode As String
  Dim sRemaining As String
  Dim sResetDate As String
  Dim sErrorMessage As String
  Dim sPrevTag As String
  Dim aResponse As New String[5]

  ' aResponse[0] = success, error or unknown
  ' aResponse[1] = code
  ' aResponse[2] = remaining
  ' aResponse[3] = resetdate
  ' aResponse[4] = errormessage
  
  XmlR = New XmlReader
  Try XmlR.FromString(sXML)
  If Error Then
    aResponse[0] = "error"
    aResponse[4] = "Cannot parsing XML"
    Return aResponse
  Else
    ' First Node.Name = prowl
    ' Second Node.Name = success or error

    Do While Not XmlR.Eof

      XmlR.Read()
      If XmlR.Node.Name = "prowl" Then bProwl = True
      If bProwl Then
        If XmlR.Node.Name = "success" Or XmlR.Node.Name = "error" Then sOk = XmlR.Node.Name
      End If

      If sPrevTag = "error" And XmlR.Node.Name = "#text" Then sErrorMessage = XmlR.Node.Value
      sPrevTag = XmlR.Node.Name

      If XmlR.Node.Type = XmlReaderNodeType.Element Then
        If sOk Then
          If XmlR.Node.Attributes.count > 0 Then
            For Each XmlR.Node.Attributes
              If XmlR.Node.Name = "code" Then sCode = XmlR.Node.Value
              If XmlR.Node.Name = "remaining" Then sRemaining = XmlR.Node.Value
              If XmlR.Node.Name = "resetdate" Then sResetDate = XmlR.Node.Value
            Next
          End If
        End If
      End If
    Loop
  End If

  If sOk Then
    aResponse[0] = sOk
  Else
    aResponse[0] = "unknown"
  End If
  aResponse[1] = sCode
  aResponse[2] = sRemaining
  aResponse[3] = sResetDate
  aResponse[4] = sErrorMessage
  Return aResponse

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Validate Prowl ApiKey
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValidateProwlApiKey(sApiKey As String) As String

  Dim hProwlValidate As HttpClient
  Dim sUrl As String = "https://api.prowlapp.com/publicapi/verify?"
  Dim sBuffer As String
  Dim aResponse As String[]

  If sApiKey = "" Then sApiKey = Main.sProwlApiKey
  sUrl &= "apikey=" & URL.Encode(sApiKey)

  hProwlValidate = New HttpClient As "hProwlValidate"
  hProwlValidate.URL = sUrl
  hProwlValidate.TimeOut = 8
  hProwlValidate.Async = False
  hProwlValidate.Get

  If hProwlValidate.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Error validating API key=" & sApiKey & ", Code=" & hProwlValidate.Status & " HTTP=" & hProwlValidate.Code)
    Return "Failed, Code=" & hProwlValidate.Status & ", HTTP=" & hProwlValidate.Code
  Else
    ' success or error - read the data
    If Lof(hProwlValidate) Then sBuffer = Read #hProwlValidate, Lof(hProwlValidate)

    aResponse = ParseProwlXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Successfully validated API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hProwlValidate.Code
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Failed to validated API key=" & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
        Return False
      Default
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Unknown error validating API key=" & sApiKey & ", HttpCode=" & hProwlValidate.Status & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hProwlValidate.Code
    End Select

  End If

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Prowl Test message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostProwlTest(sApiKey As String, sApplication As String, sEvent As String, sDescription As String) As String

  Dim hProwlMessageTest As HttpClient
  Dim sUrl As String = "https://api.prowlapp.com/publicapi/add?"
  Dim sBuffer As String
  Dim aResponse As String[]
  Dim Bucle As Byte

  If sApiKey = "" Then
    Return "ERROR: No Prowl API Key supplied"
  End If
  If sApplication = "" Then
    Return "ERROR: No Prowl application name supplied"
  End If
  If sEvent = "" Then
    Return "ERROR: No Prowl event name supplied"
  End If

  sUrl &= "apikey=" & URL.Encode(sApiKey) & "&" & "application=" & URL.Encode(sApplication) & "&" & "event=" & URL.Encode(sEvent) & "&" & "description=" & URL.Encode(sDescription)

  hProwlMessageTest = New HttpClient As "hProwlMessageTest"
  hProwlMessageTest.URL = sUrl
  hProwlMessageTest.TimeOut = 8
  hProwlMessageTest.Async = False
  hProwlMessageTest.Post("", "")

  If hProwlMessageTest.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Error sending Prowl message. API key=" & sApiKey & ", Code=" & hProwlMessageTest.Status & ", HTTP=" & hProwlMessageTest.Code)
    Return "Failed, Code=" & hProwlMessageTest.Status & ", HTTP=" & hProwlMessageTest.Code
  Else
    ' success or error - read the data
    If Lof(hProwlMessageTest) Then sBuffer = Read #hProwlMessageTest, Lof(hProwlMessageTest)

    aResponse = ParseProwlXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Successfully send message. API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hProwlMessageTest.Code
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Failed to send message. API key=" & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
      Default
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Unknown error sending message. API key=" & sApiKey & ", HttpCode=" & hProwlMessageTest.Code & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hProwlMessageTest.Code
    End Select

  End If

  Return ""
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Prowl message
' The Application/Event can be left blank, then it takes the default
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostProwl(sApplication As String, sEvent As String, sDescription As String)

  Dim sUrl As String = "https://api.prowlapp.com/publicapi/add?"
  Dim sBuffer As String
  Dim aResponse As String[]
  Dim Bucle As Byte

  ' Only continue if the module is enabled - PostProwlTest is there for testing
  If Not Main.bProwlEnabled Then Return

  ' Find free tag, between 1 and 99. Normally we should never go over 1 thread
  For Bucle = 1 To 100
    If Bucle = 100 Then Break

    If Not cProwlData.Exist(Bucle) Then Break
  Next

  If Bucle = 100 Then
    Main.WriteLog("ERROR: Prowl Message Queue full")
    Return
  End If

  If sApplication = "" Then sApplication = Main.sProwlApplication
  If sEvent = "" Then sEvent = Main.sProwlEvent
  sUrl &= "apikey=" & URL.Encode(Main.sProwlApiKey) & "&" & "application=" & URL.Encode(sApplication) & "&" & "event=" & URL.Encode(sEvent) & "&" & "description=" & URL.Encode(sDescription)

  hProwlMessage = New HttpClient As "hProwlMessage"
  hProwlMessage.URL = sUrl
  hProwlMessage.TimeOut = 8
  hProwlMessage.Async = True
  hProwlMessage.Tag = Bucle
  hProwlMessage.Post("", "")

  If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Posting Prowl message (#" & Bucle & ") " & sUrl)
  cProwlData.Add("", Bucle)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read the data send by Prowl, this can be called multiple times
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hProwlMessage_Read()

  Dim sData, sBuffer As String

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cProwlData[Last.Tag] Then
    sData = cProwlData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif

  cProwlData[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' End of the Prowl response found, parse it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hProwlMessage_Finished()

  Dim aResponse As New String[5]

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Last.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Error sending Prowl message (#" & Last.Tag & "). API key=" & Main.sProwlApiKey & ", Code=" & Last.Status & ", HTTP=" & Last.Code)
  Else
    ' success or error - read the data
    aResponse = ParseProwlXML(cProwlData[Last.Tag])
    Select Case aResponse[0]
      Case "success"
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Successfully send message (#" & Last.Tag & "). API key=" & Main.sProwlApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = Last.Code
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Failed to send message (#" & Last.Tag & "). API key=" & Main.sProwlApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
      Default
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Unknown error sending message (#" & Last.Tag & "). API key=" & Main.sProwlApiKey & ", HttpCode=" & Last.Code & ", XML=" & cProwlData[Last.Tag])
    End Select

  End If

Finally

  cProwlData.Remove(Last.Tag)
  Last.Close

Catch
  Main.WriteLog("ERROR: " & Error.Text & " when sending Prowl message")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Error Raised for the Prowl message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hProwlMessage_Error()

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Error sending Prowl message: " & Last.Status)

  Try cProwlData.Remove(Last.Tag)
  Try Last.Close

End
