' Gambas module file

' Description:
' Prowl.module
' Contains code for sending Prowl messages

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse Prowl XML Response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseProwlXML(sXML As String) As String[]

  Dim XmlR As New XmlReader
  Dim bProwl As Boolean
  Dim sOk As String
  Dim sCode As String
  Dim sRemaining As String
  Dim sResetDate As String
  Dim sErrorMessage As String
  Dim sPrevTag As String
  Dim aResponse As New String[5]

  ' aResponse[0] = success, error or unknown
  ' aResponse[1] = code
  ' aResponse[2] = remaining
  ' aResponse[3] = resetdate
  ' aResponse[4] = errormessage
  
  XmlR = New XmlReader
  Try XmlR.FromString(sXML)
  If Error Then
    aResponse[0] = "error"
    aResponse[4] = "Cannot parsing XML"
    Return aResponse
  Else
    ' First Node.Name = prowl
    ' Second Node.Name = success or error

    Do While Not XmlR.Eof

      XmlR.Read()
      If XmlR.Node.Name = "prowl" Then bProwl = True
      If bProwl Then
        If XmlR.Node.Name = "success" Or XmlR.Node.Name = "error" Then sOk = XmlR.Node.Name
      End If

      If sPrevTag = "error" And XmlR.Node.Name = "#text" Then sErrorMessage = XmlR.Node.Value
      sPrevTag = XmlR.Node.Name

      If XmlR.Node.Type = XmlReaderNodeType.Element Then
        If sOk Then
          If XmlR.Node.Attributes.count > 0 Then
            For Each XmlR.Node.Attributes
              If XmlR.Node.Name = "code" Then sCode = XmlR.Node.Value
              If XmlR.Node.Name = "remaining" Then sRemaining = XmlR.Node.Value
              If XmlR.Node.Name = "resetdate" Then sResetDate = XmlR.Node.Value
            Next
          End If
        End If
      End If
    Loop
  End If

  If sOk Then
    aResponse[0] = sOk
  Else
    aResponse[0] = "unknown"
  End If
  aResponse[1] = sCode
  aResponse[2] = sRemaining
  aResponse[3] = sResetDate
  aResponse[4] = sErrorMessage
  Return aResponse

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Validate Prowl ApiKey
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValidateProwlApiKey(sApiKey As String) As String

  Dim hProwlValidate As HttpClient
  Dim sUrl As String = "https://api.prowlapp.com/publicapi/verify?"
  Dim sBuffer As String
  Dim aResponse As String[]

  If sApiKey = "" Then sApiKey = Main.sProwlApiKey
  sUrl &= "apikey=" & sApiKey

  hProwlValidate = New HttpClient As "hProwlValidate"
  hProwlValidate.URL = sUrl
  hProwlValidate.TimeOut = 3
  hProwlValidate.Async = False
  hProwlValidate.Get

  If hProwlValidate.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Error validating API key=" & sApiKey & ", Code=" & hProwlValidate.Status & " HTTP=" & hProwlValidate.Code)
    Return "Failed, Code=" & hProwlValidate.Status & ", HTTP=" & hProwlValidate.Code
  Else
    ' success or error - read the data
    If Lof(hProwlValidate) Then sBuffer = Read #hProwlValidate, Lof(hProwlValidate)

    aResponse = ParseProwlXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Successfully validated API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hProwlValidate.Code
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Failed to validated API key= " & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
        Return False
      Default
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Unknown error validating API key=" & sApiKey & ", HttpCode=" & hProwlValidate.Status & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hProwlValidate.Code
    End Select

  End If

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Prowl message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostProwl(sApiKey As String, sApplication As String, sEvent As String, sDescription As String) As String

  Dim hProwlMessage As HttpClient
  Dim sUrl As String = "https://api.prowlapp.com/publicapi/add?"
  Dim sBuffer As String
  Dim aResponse As String[]

  If sApiKey = "" Then sApiKey = Main.sProwlApiKey
  If sApplication = "" Then sApplication = Main.sProwlApplication
  If sEvent = "" Then sEvent = Main.sProwlEvent
  sUrl &= "apikey=" & sApiKey & "&" & "application=" & URL.Encode(sApplication) & "&" & "event=" & URL.Encode(sEvent) & "&" & "description=" & URL.Encode(sDescription)

  hProwlMessage = New HttpClient As "hProwlMessage"
  hProwlMessage.URL = sUrl
  hProwlMessage.TimeOut = 3
  hProwlMessage.Async = False
  hProwlMessage.Post("", "")

  If hProwlMessage.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Error sending Prowl message. API key=" & sApiKey & ", Code=" & hProwlMessage.Status & ", HTTP=" & hProwlMessage.Code)
    Return "Failed, Code=" & hProwlMessage.Status & ", HTTP=" & hProwlMessage.Code
  Else
    ' success or error - read the data
    If Lof(hProwlMessage) Then sBuffer = Read #hProwlMessage, Lof(hProwlMessage)

    aResponse = ParseProwlXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Successfully send message. API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hProwlMessage.Code
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Failed to send message. API key= " & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
      Default
        If Main.bProwlDebug Then Main.WriteDebugLog("[Prowl] Unknown error sending message. API key=" & sApiKey & ", HttpCode=" & hProwlMessage.Code & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hProwlMessage.Code
    End Select

  End If

  Return ""
  
End
