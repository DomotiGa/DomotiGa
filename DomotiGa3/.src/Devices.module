' Gambas module file

' Description:
' Devices.module
' Contains code which is device related.

' Development Status:
' Working, maybe needs more error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ValueType Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const ValueType_Undefined As Integer = 0
Public Const ValueType_Switch As Integer = 1
Public Const ValueType_Temperature As Integer = 2
Public Const ValueType_Humidity As Integer = 3
Public Const ValueType_Luminance As Integer = 4
Public Const ValueType_WindSpeed As Integer = 5
Public Const ValueType_WindDirection As Integer = 6
Public Const ValueType_WindDescription As Integer = 7
Public Const ValueType_WindAvgSpeed As Integer = 8
Public Const ValueType_Weight As Integer = 9
Public Const ValueType_UV As Integer = 10
Public Const ValueType_RainRate As Integer = 11
Public Const ValueType_RainTotal As Integer = 12
Public Const ValueType_Remote As Integer = 13
Public Const ValueType_Security As Integer = 14
Public Const ValueType_Tamper As Integer = 15
Public Const ValueType_Blinds As Integer = 16
Public Const ValueType_Energy_kWh As Integer = 17
Public Const ValueType_Power_Watt As Integer = 18
Public Const ValueType_Chime As Integer = 19

'Public Const ValueType_ As Integer = X
' barometric, datetime, current, gas, water, volt, camera

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control device via linked plugin interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetDevice(iDeviceId As Integer, sValue As String) As Boolean

  Dim iInstance As Integer
  Dim sPluginName, sPluginType, sAddress, sSpeakText, sDeviceName As String
  Dim rPlugin As Result

  If Not CheckIfDeviceExists(iDeviceId) Then Return False

  ' find plugin info for device
  rPlugin = FindPluginInfoForDevice(iDeviceId)
  If Not rPlugin Then Return False
  sPluginName = rPlugin!name
  sPluginType = rPlugin!type

  ' find device name
  sDeviceName = FindNameForDevice(iDeviceId)
  If Not sDeviceName Then Return False

  ' find address of device
  sAddress = FindAddressForDevice(iDeviceId)
  If Not sAddress Then Return False

  ' find instance of device
  iInstance = FindInstanceForDevice(iDeviceId)
  If Not iInstance Then Return False

  ' toggle if needed
  If LCase(sValue) = "toggle" Then sValue = Toggle(GetCurrentValueForDevice(iDeviceId, 1))

  ' convert "Dim 100" to "On" and "Dim 0" to "Off - some devices don't support "Dim 100"
  If LCase(sValue) = "dim 100" Then sValue = "On"
  If LCase(sValue) = "dim 0" Then sValue = "Off"

  ' if virtual device
  If sPluginType == "virtual" Then
    Devices.ValueUpdate(iDeviceId, 1, sValue)
  ' don't support instances (yet)
  Else If sPluginType == "module" Then
    ' TODO: check/fix these
    ' RFXComxPL hRFXComxPL.SendCommand(sAddress, sValue)
    ' XBMCxPL hXBMCxPL.SendCommand(sAddress, sValue)
  Else
    ' call plugin's sendcommand routine (if any)
    If Plugin.SendCommand(sPluginName, iInstance, sAddress, sValue) Then
      ' TODO: add feedback parameter to device value
      ' until then this workaround is needed for some plugins
      Select sPluginName
        Case "GenericIO"
          ' don't do valueupdate, these come back from devices
        Case Else
          Devices.ValueUpdate(iDeviceId, 1, sValue)
      End Select
      sSpeakText = ("Set ") & sDeviceName & (" to ") & sValue
    Else
      Return False
    Endif
  Endif
  If Len(sSpeakText) And If FindLogSpeakForDevice(iDeviceId, 1) Then VoiceText.Speak(sSpeakText)
  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' used in events
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetDeviceIfDifferent(iDeviceId As Integer, sValue As String) As Boolean

  If sValue == GetCurrentValueForDevice(iDeviceId, 1) Then
    Return False
  Else
    SetDevice(iDeviceId, sValue)
  Endif

End

Private Sub AddDeviceToContext(cContext As Collection, iDeviceId As Integer)

  Dim rResultDev As Result

  Try rResultDev = Main.hDB.Exec("SELECT device_id, value, valuenum FROM device_values LEFT JOIN devices ON devices.id = device_values.device_id WHERE devices.enabled IS TRUE ORDER BY name")
  If Not Error Then
    For Each rResultDev
      If rResultDev!device_id == iDeviceId Then cContext["Value" & rResultDev!valuenum] = rResultDev!value
      cContext["Dev_" & rResultDev!device_id & "_Value" & rResultDev!valuenum] = rResultDev!value
    Next
  Endif

End

Public Function CorrectValue(sValue As String, sFormula As String, iDeviceId As Integer) As String

  Dim sResult As String
  Dim cContext As New Collection

  ' calibration needed
  If Len(sFormula) > 0
    ' insert devices values
    AddDeviceToContext(cContext, iDeviceId)
    ' evaluate the formula
    Try sResult = Eval(Replace(sFormula, "\n", " "), cContext)
    If Error Then
      sResult = "ERROR: " & Error.Text
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] CorrectValue failed. sValue=" & sValue & ", sFormula=" & sFormula & ". Message=" & sResult)
    Endif
    Return sResult
  Else
    ' nothing to calibrate
    Return sValue
  Endif

Catch
  Return Error.Text

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' toggle a value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Toggle(sValue As String) As String

  If Lower(sValue) = "on" Or If InStr(Lower(sValue), "dim") Then
    Return "Off"
  Else
    Return "On"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface with name sInterfaceName, return it's id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInterface(sInterfaceName As String) As Integer

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT * FROM plugins WHERE interface = &1", sInterfaceName)
  If Not Error Then
    If rInterface.Available Then
      If rInterface.Count = 1 Then
        If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Interface with name '" & sInterfaceName & "' has id '" & rInterface!id & "'")
        Return rInterface!id
      Else
        Main.WriteDebugLog("[Devices] More then one interface with name '" & sInterfaceName & "' found!")
        Return 0
      Endif
    Else
      Main.WriteDebugLog("[Devices] Interface with name '" & sInterfaceName & "' not found!")
      Return 0
    Endif
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devicetype with type, return it's id, 0 if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceType(sDeviceType As String) As Integer

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE type LIKE &1", sDeviceType)
  If Not Error Then
    If rDeviceType.Available Then
      If rDeviceType.Count = 1 Then
        If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] DeviceType with type '" & sDeviceType & "' has id '" & rDeviceType!id & "'")
        Return rDeviceType!id
      Else
        If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] DeviceType with type '" & sDeviceType & "' not found!")
        Return 0
      Endif
    Else
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Cannot get DeviceType records!")
      Return 0
    Endif
  Else
    If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Cannot get DeviceType records!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' returndevicetype for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceTypeForDevice(iDeviceId As Integer) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT devicetype_id FROM devices WHERE id = &1", iDeviceId)
  If Not Error Then
    If rDevice.Available Then
      Return rDevice!devicetype_id
    Else
      Return 0
    Endif
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindTypeForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result
  Dim iDeviceType As Integer

  iDeviceType = FindDeviceTypeForDevice(iDeviceId)
  Try rDevice = Main.hDB.Exec("SELECT type FROM devicetypes WHERE id = &1", iDeviceType)
  Return rDevice!type

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return typename for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindTypeNameForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result
  Dim iDeviceType As Integer

  iDeviceType = FindDeviceTypeForDevice(iDeviceId)
  Try rDevice = Main.hDB.Exec("SELECT name FROM devicetypes WHERE id = &1", iDeviceType)
  Return rDevice!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return description for devicetype with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDescrForDeviceType(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT description FROM devicetypes WHERE id = &1", iDeviceId)
  If rDevice.Available Then
    Return rDevice!description
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then
    Return rDevice!name
  Else
    Main.WriteDebugLog("[Devices] Cannot find name for device with id " & iDeviceId)
    Return ""
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return true if device with id exists
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckIfDeviceExists(iDeviceId As Integer) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT id FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then
    Return True
  Else
    Main.WriteDebugLog("[Devices] Cannot find device with id " & iDeviceId)
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return device id for virtual device with address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindVirtualDeviceID(sAddress As String) As Integer

  Dim iDeviceId As Integer

  iDeviceId = Find(sAddress, FindInterface("Virtual Interface"), "Virtual Device")
  Return iDeviceId

Catch
  Main.WriteDebugLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return 0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for interface with iInterfaceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForInterface(iInterfaceId As Integer) As String

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT interface FROM plugins WHERE id = &1", iInterfaceId)
  If Not Error And If rInterface.Available Then Return rInterface!interface

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for devicetype with iDeviceTypeId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForDeviceType(iDeviceTypeId As Integer) As String

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT name FROM devicetypes WHERE id = &1", iDeviceTypeId)
  If Not Error And If rDeviceType.Available Then Return rDeviceType!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return log boolean for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT log FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!log

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return address string for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAddressForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT address FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!address

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return speak boolean for device with iDeviceId and iValueNum
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogSpeakForDevice(iDeviceId As Integer, iValueNum As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT logspeak FROM device_values WHERE device_id = &1", iDeviceId, iValueNum)
  If Not Error And If rDevice.Available Then Return rDevice!logspeak

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return hide boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindHideForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT hide FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!hide

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all enabled devices, return all fields from database
' sorted by sOrder if specified
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAllEnabledDevices(Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If sSortOrder Then
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled IS TRUE ORDER BY &1", sSortOrder)
  Else
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled IS TRUE")
  Endif
  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with interface iInterface, return complete device details
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDevicesForInterface(iInterface As Integer, Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If iInterface Then
    If sSortOrder Then
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE ORDER BY &2", iInterface, sSortOrder)
    Else
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", iInterface)
    Endif
    Return rDevice
  Else
    Main.WriteDebugLog("[Devices] FindDeviceForInterface: No interface Id given!")
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with group sGroup, return complete device details
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDevicesForGroup(sGroup As String, Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If sGroup Then
    If sSortOrder Then
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND enabled is TRUE ORDER BY &2", sGroup, sSortOrder)
    Else
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND enabled is TRUE", sGroup)
    Endif
    Return rDevice
  Else
    Main.WriteDebugLog("[Devices] FindDeviceForGroup: No group specified!")
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find plugin info for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindPluginInfoForDevice(iDeviceId As Integer) As Result

  Dim rDevice, rPlugin As Result

  Try rDevice = Main.hDB.Exec("SELECT interface FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Available Then
    Try rPlugin = Main.hDB.Exec("SELECT name, type FROM plugins WHERE id = &1", rDevice!interface)
    If rPlugin.Available Then
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Plugin name for device with id '" & iDeviceId & "' is '" & rPlugin!name & "'")
      Return rPlugin
    Else
      ' plugin not found
      Return Null
    Endif
  Else
    ' device not found
    Main.WriteDebugLog("[Devices] Cannot find device with id " & iDeviceId)
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find plugins in database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindPlugins() As Result

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT * FROM plugins")
  If rInterface.Available Then
    Return rInterface
  Else
    ' plugins not found
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInterfaceForDevice(iDeviceId As Integer) As Integer

  Dim rDevice, rResult As Result

  Try rDevice = Main.hDB.Exec("SELECT interface FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Available Then
    Return rDevice!interface
  ' no interface found, something is wrong
  Else
    Main.WriteDebugLog(("[Devices] Device with id '") & iDeviceId & ("' not found!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find instance for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInstanceForDevice(iDeviceId As Integer) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT instance FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!instance

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetValueForDevice(iDeviceId As Integer, Optional sValue As String) As String

  Dim iValueNum As Integer = 1

  If Not CheckIfDeviceExists(iDeviceId) Then Return 0
  sValue = LCase(Trim(sValue))

  If Len(sValue) > 0 Then
    Try iValueNum = CInt(Replace(sValue, "value", ""))
    If Error Then
      Select Case sValue
        Case "lastchanged"
          Return GetLastChangedForDevice(iDeviceId)
        Case "lastseen"
          Return GetLastSeenForDevice(iDeviceId)
        Case "batterystatus"
          Return GetBatteryStatusForDevice(iDeviceId)
        Case Else
          iValueNum = 1
      End Select
    Endif
  Endif
  Return GetCurrentValueForDevice(iDeviceId, iValueNum)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's lastchanged value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLastChangedForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT lastchanged FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Count Then
    Return rDevice!lastchanged
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's lastseen value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLastSeenForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT lastseen FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Count Then
    Return rDevice!lastseen
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's batterystatus value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetBatteryStatusForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT batterystatus FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Count Then
    Return rDevice!batterystatus
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current calibrated iValue value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentValueForDevice(iDeviceId As Integer, iValue As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  If rDevice.Count Then
    Return Devices.CorrectValue(rDevice!value, rDevice!correction, iDeviceId)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current uncorrected iValue value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentUnCorrectedValueForDevice(iDeviceId As Integer, iValue As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  If rDevice.Count Then
    Return rDevice!value
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current units field
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentUnitsForDevice(iDeviceId As Integer, iValue As Integer) As String
  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT units FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  If rDevice.Count Then
    Return rDevice!units
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress and iInterface, return id if found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Find(iInstance As Integer, sAddress As String, iInterface As Integer, Optional sDevice As String, sPrefName As String) As Integer

  Dim rDeviceFind As Result

  If iInterface Then
    Try rDeviceFind = Main.hDB.Exec("SELECT * FROM devices WHERE address LIKE &1 AND interface = &2 AND enabled is TRUE", sAddress, iInterface)
    If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, sDevice, sPrefName)
  Else
    Main.WriteDebugLog("[Devices] Interface for device '" & sDevice & "' with address '" & sAddress & "' not found!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress in it's address and iInterface, return id if found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindRegExp(sAddress As String, iInterface As Integer, Optional sDevice As String, sRegex1 As String = "[[:<:]]", sRegex2 As String = "[[:>:]]") As Integer

  Dim rDeviceFind As Result

  If iInterface Then
    Try rDeviceFind = Main.hDB.Exec("SELECT * FROM devices WHERE address REGEXP '" & sRegex1 & sAddress & sRegex2 & "' AND interface = &1 AND enabled is TRUE", iInterface)
    If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, sDevice)
  Else
    Main.WriteDebugLog("[Devices] Interface for device '" & sDevice & "' with address '" & sAddress & "' not found!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress for all plugins, return id if found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAll(sAddress As String, iInterface As Integer, Optional sDevice As String) As Integer

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT devices.* FROM devices, plugins WHERE devices.interface = plugins.id AND plugins.protocols REGEXP '[[:<:]]" & sDevice & "[[:>:]]' AND devices.address LIKE &1 AND devices.enabled is TRUE LIMIT 1", sAddress)
  If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, sDevice)

End

Public Sub FindDevice(rDevice As Result, sAddress As String, iInterface As Integer, Optional sDeviceType As String, sPrefName As String) As Integer

  Dim rResult As Result

  If Not sDeviceType Then sDeviceType = "Unknown"

  If rDevice.Count > 1 Then
    Main.WriteDebugLog("[Devices] The following devices have the same address:")
    For Each rDevice
      Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    Next
    Return 0
  Else If rDevice.Count = 1 Then
    If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    If rDevice!firstseen = "00:00:00" Or If rDevice!firstseen = "" Then
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and '" & rDevice!name & "' is a new device")
      rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
    Endif
    Return rDevice!id
  Else
    If Not IsBlacklisted(sAddress, iInterface) Then
      If sDeviceType Then
        Main.WriteDebugLog("[Devices] Device of type '" & sDeviceType & "' with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' not found!")
      Else
        Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' not found!")
      Endif
      If Main.bAutoDeviceCreate Then
        Return AutoCreateDevice(sAddress, iInterface, sDeviceType, sPrefName)
      Else
        Return 0
      Endif
    Else
      If Main.bDevicesDebug Then
        If sDeviceType Then
          Main.WriteDebugLog("[Devices] Device " & IIf(Len(sDeviceType), "of type '" & sDeviceType & "' ", "") & "with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' is blacklisted!")
        Else
          Main.WriteDebugLog("[Devices] Device with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' is blacklisted!")
        Endif
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if device with iDeviceId has firstseen filled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckFirstSeen(iDeviceId As Integer)

  Dim rResult, rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Available Then
    If rDevice.Count Then
      If rDevice!firstseen = "00:00:00" Or If rDevice!firstseen = "" Then
        If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Device with address '" & rDevice!address & "' and '" & rDevice!name & "' is a new device!")
        rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if address is blacklisted and return true
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsBlacklisted(sAddress As String, iInterface As Integer) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM deviceblacklist WHERE address = &1", sAddress)
  If rDevice.Count Then
    If rDevice!id Then
      If iInterface = rDevice!id Then
        If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Address '" & sAddress & "' with Interface '" & FindNameForInterface(iInterface) & "' is blacklisted, so I ignore it.")
        Return True
      Else
        Return False
      Endif
    Endif
    If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Address '" & sAddress & "' is blacklisted, so I ignore it.")
    Return True
  Endif
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device with iDeviceId at iValuenum with vValue, optional with valuetype
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValueUpdate(iDeviceId As Integer, iValueNum As Integer, vValue As Variant, Optional iValueType As Integer = ValueType_Undefined) As Boolean

  Dim rResult, rDevice, rDeviceLog As Result
  Dim bUpdated As Boolean
  Dim sLabel, sValue, sName, sType, vValueName As String
  Dim iInstance As Integer
  Dim sTimeNow As String = Format(Now(), "yyyy-mm-dd hh:nn:ss")

  ' First check if device exists
  If Not CheckIfDeviceExists(iDeviceId) Then
    If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] ValueUpdate called for device with id '" & iDeviceId & "' that doesn't exists")
    Return False
  Endif

  sName = FindNameForDevice(iDeviceId)
  vValueName = "value" & iValueNum

  If vValue = "Dim 100" Then vValue = "On"
  If vValue = "Dim 99" Then vValue = "On"
  If vValue = "Dim 0" Then vValue = "Off"

  rDevice = Main.hDB.Exec("SELECT device_values.units, device_values.value, device_values.log, device_values.logdisplay, devices.dimable, devices.switchable FROM device_values JOIN devices ON device_values.device_id = devices.id WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValueNum)
  If rDevice.Count = 0 Then
    ' New devicevalue, we need an insert instead of an update!
    ' We leave sValue empty so update code will be executed
    rResult = Main.hDB.Exec("INSERT INTO device_values (device_id, value, valuenum, lastchanged) values (&1, &2, &3, &4)", iDeviceId, vValue, iValueNum, sTimeNow)
    rDevice = Main.hDB.Exec("SELECT device_values.units, device_values.value, device_values.log, device_values.logdisplay, devices.dimable, devices.switchable FROM device_values JOIN devices ON device_values.device_id = devices.id WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValueNum)
  Else
    sValue = rDevice!value
  Endif

  If rDevice!switchable Then
    sType = "switch"
  Else If rDevice!dimable Then
    sType = "dimmer"
  Endif

  ' Now hardcoded, should come from the devices table
  iInstance = 1

  If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] ValueUpdate called for device with id '" & iDeviceId & "' valuenum '" & iValueNum & "' and value '" & vValue & "'")
  If vValue <> Null Then
    If Comp(vValue, sValue, gb.IgnoreCase) <> 0 Then
      rResult = Main.hDB.Exec("UPDATE devices SET lastseen = &1, lastchanged = &1 WHERE id = &2", sTimeNow, iDeviceId)
      rResult = Main.hDB.Exec("UPDATE device_values SET lastseen = &1, lastchanged = &1, value = &2 WHERE device_id = &3 AND valuenum = &4", sTimeNow, vValue, iDeviceId, iValueNum)
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device change triggered for device with id '") & iDeviceId & ("' and ") & vValueName & " '" & vValue & "'")
      If rDevice!dimable = True Or If rDevice!switchable = True Then Main.RefreshControlPage()
      If rDevice!logdisplay Then Main.WriteLog(sName & " status changed to " & vValue & IIf(sLabel, " " & sLabel, "") & ".")

      Events.CheckDeviceChangeEvents(iDeviceId, iValueNum, vValue)
      bUpdated = True

      If Plugin.IsPluginEnabled("IViewer", 0) Then
        Try Plugin.GetPluginObject("IViewer", iInstance).Interface.SendUpdateForDevice(iDeviceId, vValue, vValueName, IIf(sType, sType, vValueName))
      Endif

      If Plugin.IsPluginEnabled("MQTT", 0) Then
        Try Plugin.GetPluginObject("MQTT", iInstance).Interface.PublishMsg(sName & "/" & vValueName, vValue)
      Endif

      If Plugin.IsPluginEnabled("SmartVisuServer", 0) Then
        Try Plugin.GetPluginObject("SmartVisuServer", iInstance).Interface.SendUpdateDevice(sName, vValue, IIf(sType, sType, vValueName))
      Endif
    Endif
  Endif

  If Not bUpdated Then
    Try rResult = Main.hDB.Exec("UPDATE devices SET lastseen = &1 WHERE id = &2", sTimeNow, iDeviceId)
    If Error Then rResult = Main.hDB.Exec("UPDATE devices SET lastseen = &1 WHERE id = &2", sTimeNow, iDeviceId)
    Try rResult = Main.hDB.Exec("UPDATE device_values SET lastseen = &1 WHERE device_id = &2 AND valuenum = &3", sTimeNow, iDeviceId, iValueNum)
    If Error Then rResult = Main.hDB.Exec("UPDATE device_values SET lastseen = &1 WHERE device_id = &2 AND valuenum = &3", sTimeNow, iDeviceId, iValueNum)
  Else
    If rDevice!log Then
      Main.hDB.Begin()
      rDeviceLog = Main.hDB.Create("device_values_log")
      rDeviceLog!device_id = iDeviceId
      rDeviceLog!value = CStr(vValue)
      rDeviceLog!valuenum = iValueNum
      rDeviceLog!lastchanged = Now()

      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Creating log record for device with id '" & iDeviceId & "' and valuenum '" & iValueNum & "' = '" & vValue & "'")
      rDeviceLog.Update()
      Main.hDB.Commit()
    Endif
  Endif

  Events.CheckDeviceLastseenChangeEvents(iDeviceId, sTimeNow)
  Main.RefreshDeviceList()

  If rResult Then
    Return True
  Else
    Return False
  Endif

Catch
  Main.WriteLog("[Devices] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update battery status for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Battery(iDeviceId As Integer, vValue As Variant) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("UPDATE devices SET batterystatus = &1, lastseen = &2 WHERE id = &3", vValue, Format(Now(), "yyyy-mm-dd hh:nn:ss"), iDeviceId)

  If rResult.Count Then
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' mail battery status for device with battery status set (sType can be '', all or empty)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function MailBatteryStatus(Optional sType As String) As Boolean

  Dim rDevice As Result
  Dim sMessageBody As String
  Dim bFound As Boolean = False

  Try rDevice = Main.hDB.Exec("SELECT name, address, batterystatus, lastseen FROM devices WHERE enabled is TRUE")
  If rDevice.Available Then
    If rDevice.Count Then
      For Each rDevice
        If LCase(sType) = "empty" Then
          If LCase(rDevice!batterystatus) = "empty" Then
            sMessageBody &= "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus & "  " & Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
            bFound = True
          Endif
        Else
          If rDevice!batterystatus Then
            sMessageBody &= "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus & "  " & Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
            bFound = True
          Endif
        Endif
      Next
      ' sent e-mail with status
      If bFound Then
        Mail.SendMail(Application.Name & (": Battery Status"), ("These Devices have their Battery status match selection '") & sType & "':\n" & sMessageBody, Main.sEmailToAddress)
      Endif
    Endif
  Endif
  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' erase all logged data for device with iDeviceId, or just one value if iValue is specified
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EraseLog(iDeviceId As Integer, Optional iValue As Integer)

  If iValue Then
    Try Main.hDB.Exec("DELETE FROM device_values_log WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  Else
    Try Main.hDB.Exec("DELETE FROM device_values_log WHERE device_id = &1", iDeviceId)
  Endif

End

Private Sub FindUniqueName(sName As String) As String

  Dim rResult As Result
  Dim iNo As Integer

  For iNo = 1 To 50
    Try rResult = Main.hDB.Exec("SELECT * FROM devices WHERE name = &1", sName & iNo)
    If rResult.Count Then
      Continue
    Else
      Return sName & iNo
    Endif
  Next

End

Public Sub AutoCreateDevice(sAddress As String, iInterface As Integer, sType As String, Optional sPrefName As String) As Integer

  Dim rResult As Result
  Dim sName As String
  Dim iType As Integer

  If sPrefName Then
    sName = FindUniqueName(Trim(sPrefName) & " #")
  Else
    sName = FindUniqueName(sType & " device #")
  Endif

  ' try to select correct device type
  Select UCase(sType)
    Case "DS18S20"
      iType = 15
    Case "DS2423"
      iType = 58
    Case "DS2438"
      iType = 65
    Case "DS18B20"
      iType = 213
    Case "X10"
      iType = 36
    Case "X10SECURITY", "POWERCODEDW", "POWERCODEMOTION", "POWERCODEAUX", "CODESECURE"
      iType = 1
    Case "AC"
      iType = 60
    Case "FS20"
      iType = 210
    Case "FHTTFK"
      iType = 156
    Case "FHT80"
      iType = 157
    Case "EM1000", "EM1000-S", "EM1000-EM"
      iType = 166
    Case "EM1000-GZ"
      iType = 167
    Case "HDDTEMP"
      iType = 11
    Case "DSC DWS"
      iType = 41
    Case "DSC PIR"
      iType = 40
    Case "DSC SMOKE"
      iType = 42
    Case "PLCBUS"
      iType = 117
    Case "JEELABS NODE"
      iType = 142
    Case "PWRCTRL"
      iType = 135
    Case "RFXSENSOR TEMP"
      iType = 100
    Case "RFXSENSOR BARO"
      iType = 139
    Case "RFXSENSOR SUPPLY"
      iType = 102
    Case "ARC"
      iType = 59
    Case "ATI REMOTE WONDER", "ATI"
      iType = 113
    Case "ATI WONDER PLUS", "ATI2"
      iType = 114
    Case "HE", "HEUK"
      iType = 43
    Case "HEEU"
      iType = 154
    Case "RFXMETER"
      iType = 9
    Case "TEMP1"
      iType = 214
    Case "TEMP2"
      iType = 81
    Case "TEMP3"
      iType = 84
    Case "TEMP4"
      iType = 85
    Case "TEMP5"
      iType = 223
    Case "HUM1"
      iType = 223
    Case "TH1"
      iType = 7
    Case "TH2"
      iType = 26
    Case "TH3"
      iType = 39
    Case "TH4"
      iType = 215
    Case "TH5"
      iType = 74
    Case "TH6"
      iType = 93
    Case "TH7"
      iType = 226
    Case "TH8"
      iType = 235
    Case "THB1"
      iType = 32
    Case "THB2"
      iType = 33
    Case "RAIN1"
      iType = 95
    Case "RAIN2"
      iType = 38
    Case "RAIN3"
      iType = 231
    Case "WIND1"
      iType = 74
    Case "WIND2"
      iType = 97
    Case "WIND3"
      iType = 37
    Case "WIND4"
      iType = 233
    Case "UV1"
      iType = 8
    Case "UV2"
      iType = 99
    Case "UV3"
      iType = 232
    Case "DT1"
      iType = 39
    Case "WEIGHT1"
      iType = 22
    Case "WEIGHT2"
      iType = 23
    Case "KD101"
      iType = 17
    Case "ELEC1", "ELEC1_1", "ELEC1_2", "ELEC1_3"
      iType = 66
    Case "ELEC2"
      iType = 78
    Case "X10SECDWS", "X10SECDW"
      iType = 1
    Case "X10SECMOTION"
      iType = 69
    Case "X10SECREMOTE"
      iType = 71
    Case "ANSLUT"
      iType = 228
    Case "DM10"
      iType = 179
    Case "DIGIMAX"
      iType = 180
    Case "NINJA"
      iType = 194
    Case "SMOKE"
      iType = 174
    Case "IO0", "IO1", "IO2", "IO3", "IO4", "IO5", "IO6", "IO7"
      iType = 192
    Case "UPS"
      iType = 14
    Case "BLUETOOTH"
      iType = 18
    Case "S300TH"
      iType = 173
    Case "SQUEEZEPLAYER"
      iType = 112
    Case "HM_CC_TC"
      iType = 234
    Case "P1-POWERUSAGE"
      iType = 246
    Case "P1-POWERDELIVER"
      iType = 255
    Case "P1-GASUSAGE"
      iType = 256
    Case "CCOST"
      iType = 131
    Case "TEMP6"
      iType = 248
    Case "TEMP7"
      iType = 251
    Case "TEMP8"
      iType = 247
    Case "TEMP9"
      iType = 252
    Case "TEMP10"
      iType = 380
    Case "TEMP11"
      iType = 387
    Case "HUM2"
      iType = 247
    Case "TH9"
      iType = 250
    Case "RAIN4"
      iType = 253
    Case "RAIN5"
      iType = 247
    Case "WIND5"
      iType = 254
    Case "WIND6"
      iType = 247
    Case "PIONEER"
      iType = 258
    Case "MEDIA.BASIC"
      iType = 259
    Case "MEDIA.MPTRNSPT"
      iType = 260
    Case "MEDIA.MPMEDIA"
      iType = 261
    Case "OSD.BASIC"
      iType = 262
    Case "T"
      iType = 263
    Case "TH"
      iType = 264
    Case "THB"
      iType = 265
    Case "WIND"
      iType = 266
    Case "RAIN"
      iType = 267
    Case "SOL"
      iType = 268
    Case "UV"
      iType = 269
    Case "ELVCUBE"
      iType = 270
    Case "ELVDOOR"
      iType = 271
    Case "ELVWALLTHERMO"
      iType = 272
    Case "ELVRADTHERMO"
      iType = 273
    Case "ELEC3"
      iType = 274
    Case "YOULESS"
      iType = 281
    Case "OPENTHERM THERMOSTAT"
      iType = 237
    Case "OPENTHERM BURNER"
      iType = 238
    Case "OPENTHERM BOILER"
      iType = 239
    Case "OPENTHERM CENTRAL HEATING"
      iType = 240
    Case "OPENTHERM OUTSIDE SENSOR"
      iType = 241
    Case "THERMOSTAT"
      iType = 243
    Case "LIGHTWAVERF"
      iType = 230
    Case "BLYSS" ' switch
      iType = 282
    Case "MEIANTECH"
      iType = 285
    Case "PLUGWISE SWITCH"
      iType = 297
    Case "KMTRONIC INPUT"
      iType = 298
    Case "KMTRONIC OUTPUT"
      iType = 299
    Case "GENERICIO"
      iType = 301
    Case "BINARY POWER SWITCH"
      iType = 61
    Case "ROUTING MULTILEVEL SWITCH", "MULTILEVEL SWITCH"
      iType = 62
    Case "ROUTING BINARY SENSOR", "BINARY SENSOR"
      iType = 63
    Case "ROUTING ALARM SENSOR"
      iType = 313
    Case "DOOR LOCK", "Z-WAVE DOOR LOCK"
      iType = 333
    Case "VMB4RY CHANNEL 1", "VMB4RY CHANNEL 2", "VMB4RY CHANNEL 3", "VMB4RY CHANNEL 4"
      iType = 334
    Case "VMB4DC CHANNEL 1", "VMB4DC CHANNEL 2", "VMB4DC CHANNEL 3", "VMB4DC CHANNEL 4"
      iType = 335
    Case "VMB7IN CHANNEL 1", "VMB7IN CHANNEL 2", "VMB7IN CHANNEL 3", "VMB7IN CHANNEL 4", "VMB7IN CHANNEL 5", "VMB7IN CHANNEL 6", "VMB7IN CHANNEL 7"
      iType = 336
    Case "VMBGPO"
      iType = 337
    Case "VMBDME"
      iType = 338
    Case "VIERA"
      iType = 339
    Case "SA30"
      iType = 340
    Case "BYRONSX"
      iType = 341
    Case "TH10"
      iType = 353
    Case "TH11"
      iType = 354
    Case "TH12"
      iType = 381

    ' ~~~~ Eneco Toon ~~~
    Case "TOON THERMOSTAT"
      iType = 356
    Case "TOON POWER USAGE"
      iType = 357
    Case "TOON POWER PRODUCED"
      iType = 358
    Case "TOON GAS USAGE"
      iType = 359
    Case "TOON SCHEDULE"
      iType = 360
    Case "TOON STEKKER"
      iType = 384
    Case "TOON ALL ON/OFF"
      iType = 385

    Case "JEROME IO INPUT"
      iType = 361
    Case "JEROME IO OUTPUT"
      iType = 362
    Case "JEROME PULSE COUNTER"
      iType = 363
    Case "ZGW05"
      iType = 368
    Case "ZGW06"
      iType = 369
    Case "ZGW07"
      iType = 370
    Case "ZGW08"
      iType = 371
    Case "ZGW09"
      iType = 372

    ' ~~~~ Z-Wave, OpenZWave and RaZberry ~~~
    Case "Z-WAVE THERMOSTAT"
      iType = 243
    Case "Z-WAVE SWITCH"
      iType = 61
    Case "Z-WAVE MOTOR CONTROL", "MULTIPOSITION MOTOR SWITCH"
      iType = 305
    Case "Z-WAVE DIMMER"
      iType = 62
    Case "Z-WAVE SENSOR"
      iType = 64
    Case "Z-WAVE DOOR LOCK"
      iType = 242
    Case "Z-WAVE ENTRY CONTROL"
      iType = 309
    Case "Z-WAVE CONTROLLER"
      iType = 63
    Case "Z-WAVE", "Z-WAVE GENERIC"
      iType = 304
    Case "Z-WAVE REMOTE SWITCH"
      iType = 306
    Case "SECURE KEYPAD"
      iType = 242

    ' ~~~~ Visonic PowerMax/Master ~~~
    Case "VISONIC PIR"
      iType = 289
    Case "VISONIC DOOR/WINDOW CONTACT"
      iType = 291
    Case "VISONIC GAS DETECTOR"
      iType = 294
    Case "VISONIC SMOKE DETECTOR"
      iType = 293
    'Case "VISONIC WIRED"
    'Case "VISONIC CAMERA"
    'Case "VISONIC UNKNOWN"

    ' ~~~ Virtual Devices ~~~~
    Case "WEATHER"
      iType = 141

    ' ~~~ Unknown type ~~~
    Case Else
      Main.WriteDebugLog("[Devices] Auto create device '" & sName & "' failed, because of unknown devicetype!")
      Main.WriteDebugLog("[Devices] Please report device type '" & sType & "' with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' (" & iInterface & ") to support@domotiga.nl")
      Main.WriteDebugLog("[Devices] Please note that you can still use this device by manually adding it, and selecting a devicetype similar to the one missing.")
      Return
  End Select

  Main.WriteDebugLog("[Devices] Auto created device '" & sName & "' with address '" & sAddress & "' of type '" & FindNameForDeviceType(iType) & "' with interface '" & FindNameForInterface(iInterface) & "'")

  ' create device
  Main.hDB.Begin()
  rResult = Main.hDB.Create("devices")
  rResult!name = sName
  rResult!devicetype_id = iType
  rResult!interface = iInterface
  rResult!address = sAddress
  rResult!enabled = True
  rResult!onicon = "new.png"
  rResult!dimicon = "new.png"
  rResult!officon = "new.png"
  rResult!hide = False
  rResult!dimable = False
  rResult!switchable = False
  rResult!firstseen = Now()
  rResult!lastseen = Now()
  rResult!location = 1
  rResult.Update()
  Main.hDB.Commit()

  ' try to get id of created device
  Try rResult = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM devices")
  If Not Error Then
    Return rResult!lastid
  Else
    Return 0
  Endif

End

Public Sub CheckRepeatDevice()

  Dim rResult As Result
  Dim dLastSeen As Date
  Dim period As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE repeatstate IS TRUE AND enabled is TRUE")
  For Each rResult
    period = rResult!repeatperiod
    dLastSeen = rResult!lastseen
    If (Now() > DateAdd(dLastSeen, gb.Minute, period)) Then
      Devices.SetDevice(rResult!id, GetCurrentUnCorrectedValueForDevice(rResult!id, 1))
    Endif
  Next

End

Public Sub CheckResetDevice()

  Dim rResult As Result
  Dim dLastSeen As Date
  Dim period As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE reset IS TRUE AND enabled is TRUE")
  For Each rResult
    period = rResult!resetperiod
    dLastSeen = rResult!lastseen
    If (GetCurrentUnCorrectedValueForDevice(rResult!id, 1) <> rResult!resetvalue) And (Now() > DateAdd(dLastSeen, gb.Minute, period)) Then
      If rResult!switchable Then
        Devices.SetDevice(rResult!id, rResult!resetvalue)
      Else
        Devices.ValueUpdate(rResult!id, 1, rResult!resetvalue)
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type of control for device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckControlDevice(sAddress As String, iInterface As Integer) As String

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT switchable, dimable FROM devices WHERE address LIKE &1 AND interface = &2 AND enabled is TRUE", sAddress, iInterface)
  If rDeviceFind.Available Then
    If rDeviceFind!switchable Then
      Return "Switch"
    Else If rDeviceFind!dimable Then
      Return "Dimmer"
    Else
      Return "Other"
    Endif
  Else
    Return "Switch"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get the id of the device with sDeviceName
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindIdForDevice(sDeviceName As String) As Integer
  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sDeviceName)
  ' found only one unique entry?
  If rDevice.Count > 1 Then
    Main.WriteDebugLog(("[Devices] The following devices have same name:"))
    For Each rDevice
      Main.WriteDebugLog(("[Devices] Device with address '") & rDevice!address & "' is '" & rDevice!name & "'")
    Next
    Return 0
  ' ok this one seems useful
  Else If rDevice.Count = 1 Then
      Return rDevice!id
  ' no device found, something is wrong
  Else
    Main.WriteDebugLog(("[Devices] Device with name '") & sDeviceName & ("' not found!"))
    Return 0
  Endif

Catch
  Main.WriteDebugLog("[Devices] Error while trying to find id: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return on/off/dim icon name related to value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetStatusIcon(sValue As String, sOnIcon As String, sOffIcon As String, sDimIcon As String) As String

  Dim aValue As String[]

  ' split command
  aValue = Split(UCase(sValue), " ")

  If Not IsNull(sOnIcon) Or Not IsNull(sOffIcon) Then
    If aValue.Count = 1 Then
      Select Case UCase(aValue[0])
        Case "ON", "OPEN", "MOTION", "AWAKE", "ONLINE", "LIGHT", "UP", "ALARM"
          Return sOnIcon
        Case Else
          Return sOffIcon
      End Select
    Else If aValue.Count > 1 Then
      If aValue[0] = "DIM" Then
        If Len(sDimIcon) Then Return sDimIcon
      Else
        If Len(sOffIcon) Then Return sOffIcon
      Endif
    Endif
  Else
    Return ""
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteDevice(iDeviceId As Integer) As Boolean

  ' TODO: handle in database
  Main.hDB.Exec("DELETE FROM devices WHERE id = &1", iDeviceId)
  Main.hDB.Exec("DELETE FROM device_values WHERE device_id = &1", iDeviceId)
  Devices.EraseLog(iDeviceId)
  Main.hDB.Exec("DELETE FROM devices_pachube WHERE deviceid = &1", iDeviceId)
  Main.hDB.Exec("DELETE FROM devices_bwired WHERE deviceid = &1", iDeviceId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete device value with device iDeviceId and valuenum
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteDeviceValue(iDeviceId As Integer, iValueNum As Integer) As Boolean

  ' TODO: handle in database
  Main.hDB.Exec("DELETE FROM device_values_log WHERE device_id = &1 AND valuenum  = &2", iDeviceId, iValueNum)
  Main.hDB.Exec("DELETE FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValueNum)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' make device with iDeviceId hidden
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HideDevice(iDeviceId As Integer) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("UPDATE devices SET hide = TRUE WHERE id = &1", iDeviceId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' toggle device state of device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ToggleDeviceValue(iDeviceId As Integer) As String

  If CheckIfDeviceExists(iDeviceId)
    Return Toggle(GetCurrentValueForDevice(iDeviceId, 1))
  Else
    Return ""
  Endif

Catch
  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices and return fields from the database, depending which devices are required
' optionally the output van be sorted, by specifying the sOrder
' sWhich can have (or a combination, delimited by a +):
' all, enabled, disabled, visible, hidden, switch, dim, sensor, ext (default is: enabled+visible)
' ext - all device information, gathered from multiple tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetDeviceList(Optional sWhich As String, Optional sSortOrder As String) As Result

  Dim rDevice As Result
  Dim sWhere, sAppend, sSQL As String

  sWhich = LCase(sWhich)

  ' If nobody specifies anything, we just return it all
  If sWhich = "" Then
    sWhich = "all+ext"
  Endif

  If Not InStr(sWhich, "all") Then

    If Not sWhich Then
      sWhich = "enabled+visible"
    Endif

    sAppend = ""
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "enabled"), "enabled IS TRUE", ""), sAppend)
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "disabled"), "enabled IS FALSE", ""), sAppend)

    If sAppend Then
      If sWhere Then
        sWhere &= " AND (" & sAppend & ")"
      Else
        sWhere &= "WHERE (" & sAppend & ")"
      Endif
    Endif

    sAppend = ""
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "visible"), "hide IS FALSE", ""), sAppend)
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "hidden"), "hide IS TRUE", ""), sAppend)

    If sAppend Then
      If sWhere Then
        sWhere &= " AND (" & sAppend & ")"
      Else
        sWhere &= "WHERE (" & sAppend & ")"
      Endif
    Endif

    If InStr(sWhich, "switch") Or InStr(sWhich, "dim") Or InStr(sWhich, "sensor") Then

      sAppend = ""
      sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "switch"), "switchable IS TRUE", ""), sAppend)
      sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "dim"), "dimable IS TRUE", ""), sAppend)
      sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "sensor"), "(switchable IS FALSE AND dimable IS FALSE)", ""), sAppend)

      If sAppend Then
        If sWhere Then
          sWhere &= " AND (" & sAppend & ")"
        Else
          sWhere &= "WHERE (" & sAppend & ")"
        Endif
      Endif
    Endif
  Endif

  If InStr(sWhich, "ext") Then
    sSQL = "SELECT devices.*, locations.name as 'locationname', floors.name as 'floorplanname', floors.image as `floorplanimage`, devicetypes.name as 'devicetypename', plugins.interface as `interfacename` FROM devices LEFT OUTER JOIN locations ON devices.location = locations.id LEFT OUTER JOIN floors ON devices.floorplan = floors.floor LEFT JOIN devicetypes ON devices.devicetype_id = devicetypes.id LEFT JOIN plugins ON devices.interface = plugins.id " & sWhere
  Else
    sSQL = "SELECT devices.*, locations.name as 'locationname' FROM devices LEFT OUTER JOIN locations on devices.location = locations.id " & sWhere
  Endif

  If sSortOrder Then
    sSQL &= " ORDER BY " & sSortOrder
  Endif

  Try rDevice = Main.hDB.Exec(sSQL)
  If Error Then
    Main.WriteDebugLog("[Devices] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif
  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices and return fields from the database joined with device values, depending which devices are required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetValues(Optional cOptions As Collection) As Result

  Dim rDevice As Result
  Dim sSQL, sWhere As String = ""
  Dim bFirst As Boolean
  Dim iElement As Integer

  If Not cOptions Then cOptions = New Collection

  If cOptions.Exist("device_id") Then
    sWhere = " WHERE device_id = " & cOptions["device_id"]
  Endif

  If cOptions.Exist("not_device_id") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    sWhere &= "id <> " & cOptions["not_device_id"]
  Endif

  If cOptions.Exist("log") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["log"] Then
      sWhere &= "log is TRUE"
    Else
      sWhere &= "log is FALSE"
    Endif
  Endif

  If cOptions.Exist("valuenum") Then
    If Not sWhere Then
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    bFirst = True
    For Each iElement In cOptions["valuenum"]
      If Not bFirst Then sWhere &= " OR " Else bFirst = False
      sWhere &= " valuenum = " & iElement
    Next
    sWhere &= ")"
  Endif

  sSQL &= "SELECT device_values.* From device_values " & sWhere

  If cOptions.Exist("sortOrder") Then
    sSQL &= " ORDER BY " & cOptions["sortOrder"]
  Endif

  Try rDevice = Main.hDB.Exec(sSQL)
  If Error Then
    Main.WriteDebugLog("[Devices] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif

  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices and return fields from the database joined with device values, depending which devices are required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetDevicesAndValues(Optional cOptions As Collection) As Result

  Dim rDevice As Result
  Dim sSQL, sWhere, sElement As String = ""
  Dim bFirst As Boolean
  Dim iElement As Integer

  If Not cOptions Then cOptions = New Collection

  If cOptions.Exist("device_id") Then
    sWhere = " WHERE devices.id = " & cOptions["device_id"]
  Else If cOptions.Exist("not_device_id") Then
    sWhere = " WHERE devices.id <> " & cOptions["not_device_id"]
  Endif

  If cOptions.Exist("value_valuenum") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    sWhere &= "device_values.valuenum = " & cOptions["value_valuenum"]
  Endif

  If cOptions.Exist("enabled") Then
    If Not sWhere Then 
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["enabled"] Then
      sWhere &= "enabled is TRUE"
    Else
      sWhere &= "enabled is FALSE"
    Endif
  Endif

  If cOptions.Exist("hide") Then
    If Not sWhere Then 
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["hide"] Then
      sWhere &= "hide is TRUE"
    Else
      sWhere &= "hide is FALSE"
    Endif
  Endif

  If cOptions.Exist("log") Then
    If Not sWhere Then 
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["log"] Then
      sWhere &= "device_values.log is TRUE"
    Else
      sWhere &= "device_values.log is FALSE"
    Endif
  Endif

  If cOptions.Exist("rrd") Then
    If Not sWhere Then 
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["rrd"] Then
      sWhere &= "rrd is TRUE"
    Else
      sWhere &= "rrd is FALSE"
    Endif
  Endif

  If cOptions.Exist("graph") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["graph"] Then
      sWhere &= "graph is TRUE"
    Else
      sWhere &= "graph is FALSE"
    Endif
  Endif

  If cOptions.Exist("location_id") Then
    If Not sWhere Then 
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    sWhere &= "location = " & cOptions["location_id"]
  Endif

  If cOptions.Exist("switchable") Or cOptions.Exist("dimable") Then
    If Not sWhere Then 
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    If cOptions.Exist("switchable") Then
      If cOptions["switchable"] Then
        sWhere &= "switchable is TRUE"
      Else
        sWhere &= "switchable is FALSE"
      Endif
    Endif

    If cOptions.Exist("switchable") And cOptions.Exist("dimable") Then
      If cOptions.Exist("able") Then
        sWhere &= " " & cOptions["able"] & " "
      Else
        sWhere &= " OR "
      Endif
    Else
      sWhere &= " "
    Endif

    If cOptions.Exist("dimable") Then
      If cOptions["dimable"] Then
        sWhere &= "dimable is TRUE"
      Else
        sWhere &= "dimable is FALSE"
      Endif
    Endif

    sWhere &= " )"
  Endif

  If cOptions.Exist("valuenum") Then
    If Not sWhere Then 
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    bFirst = True
    For Each iElement In cOptions["valuenum"]
      If Not bFirst Then sWhere &= " OR " Else bFirst = False
      sWhere &= " device_values.valuenum = " & iElement
    Next
    sWhere &= ")"
  Endif

  If cOptions.Exist("groups") Then
    If Not sWhere Then 
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    bFirst = True
    For Each sElement In cOptions["groups"]
      If Not bFirst Then sWhere &= " AND " Else bFirst = False
      sWhere &= " groups LIKE '" & sElement & "'"
    Next
    sWhere &= ")"
  Endif

  sSQL = "SELECT devices.id AS device_id, devices.name AS device_name, devices.devicetype_id AS device_devicetype_id, devices.enabled AS device_enabled, " &
    "devices.location AS device_location_id, devices.hide AS device_hide, devices.interface AS device_interface_id, devices.address AS device_address,  " &
    "devices.dimable AS device_dimable, devices.switchable AS device_switchable, devices.extcode AS device_extcode, devices.onicon AS device_onicon, " &
    "devices.repeatstate AS device_repeatstate, devices.repeatperiod AS device_repeatperiod, devices.reset AS device_reset, " &
    "devices.resetperiod AS device_resetperiod, devices.resetvalue AS device_resetvalue, devices.comments AS device_comments, devices.batterystatus AS device_batterystatus, " & ""
    "devices.officon AS device_officon, devices.dimicon AS device_dimicon, devices.lastchanged AS device_lastchanged, devices.groups AS device_groups, " &
    "devices.floorplan AS device_floorplan, devices.x AS device_x, devices.y AS device_y, " &
    "devices.lastseen AS device_lastseen, devices.firstseen AS device_firstseen, devices.batterystatus AS device_batterystatus, devices.poll AS device_poll "

  If Not cOptions.Exist("inc_device_values") Then
    cOptions["inc_device_values"] = True
  Endif
  If cOptions["inc_device_values"] Then
    sSQL &= ", device_values.id AS device_value_id, device_values.valuenum AS device_value_valuenum, " &
      "device_values.value AS device_value_value, device_values.correction AS device_value_correction, device_values.units AS device_value_units, " &
      "device_values.lastseen AS device_value_lastseen, device_values.lastchanged AS device_value_lastchanged, " &
      "device_values.log AS device_value_log, device_values.logdisplay AS device_value_logdisplay, device_values.logspeak AS device_value_logspeak, " &
      "device_values.rrd AS device_value_rrd, device_values.graph AS device_value_graph, device_values.valuerrddsname AS device_value_valuerrddsname,  " &
      "device_values.valuerrdtype AS device_values_valuerrdtype, device_values.valuerrdtype AS device_value_valuerrdtype, device_values.valuerrddsname AS device_value_valuerrddsname "
  Endif

  If cOptions["inc_device_values"] Then
    sSQL &= "From devices INNER JOIN device_values On devices.id = device_values.device_id "
  Else
    sSQL &= "From devices "
  Endif

  sSQL &= sWhere

  If cOptions.Exist("sortOrder") Then
    sSQL &= " ORDER BY " & cOptions["sortOrder"]
  Endif

  Try rDevice = Main.hDB.Exec(sSQL)
  If Error Then
    Main.WriteDebugLog("[Devices] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif
  Return rDevice

End

Private Sub GetDeviceList_BuildSQL(sTemp As String, sAppend As String) As String

  If sTemp Then
    If sAppend Then
      Return sAppend & " OR " & sTemp
    Else
      Return sAppend & sTemp
    Endif
  Else
    Return sAppend 
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' retrieve all locations possible for the devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLocationList() As Result

  Dim rLocation As Result

  Try rLocation = Main.hDB.Exec("SELECT * FROM locations")
  If Error Then
    Main.WriteDebugLog("[Devices] ERROR: '" & Error.Text & "' at'" & Error.Where & "'")
  Endif
  Return rLocation

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return disable openzwavepoll boolean for device with address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindOpenZWavePollForDevice(iInstance As Integer, sAddress As String) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT poll FROM devices WHERE address = &1 AND interface = 15", sAddress)
  If Not Error And If rDevice.Available Then
    If rDevice.Count = 1 Then
      Return rDevice!poll
    Else
      Return False
    Endif
  Else
    Return False
  Endif

End
