' Gambas module file

' Description:
' Devices.module
' Contains code which is device related.

' Development Status:
' Working, maybe needs more error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ValueType Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const ValueType_Undefined As Integer = 0
Public Const ValueType_Switch As Integer = 1
Public Const ValueType_Temperature As Integer = 2
Public Const ValueType_Humidity As Integer = 3
Public Const ValueType_Luminance As Integer = 4
Public Const ValueType_WindSpeed As Integer = 5
Public Const ValueType_WindDirection As Integer = 6
Public Const ValueType_WindDescription As Integer = 7
Public Const ValueType_WindAvgSpeed As Integer = 8
Public Const ValueType_Weight As Integer = 9
Public Const ValueType_UV As Integer = 10
Public Const ValueType_RainRate As Integer = 11
Public Const ValueType_RainTotal As Integer = 12
Public Const ValueType_Remote As Integer = 13
Public Const ValueType_Security As Integer = 14
Public Const ValueType_Tamper As Integer = 15
Public Const ValueType_Blinds As Integer = 16
Public Const ValueType_Energy_kWh As Integer = 17
Public Const ValueType_Power_Watt As Integer = 18 ' Power in Watt
Public Const ValueType_Chime As Integer = 19
Public Const ValueType_Barometric As Integer = 20
Public Const ValueType_Energy_Watt As Integer = 21
Public Const ValueType_Voltage As Integer = 22
Public Const ValueType_Current As Integer = 23
Public Const ValueType_Water As Integer = 24
Public Const ValueType_Ppm As Integer = 25 ' parts-per-million
Public Const ValueType_Power_kW As Integer = 26 ' Power in KiloWatt

'Public Const ValueType_ As Integer = X
' datetime, gas, camera

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Private aMQTTLastSeen As New String[]

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog("[Devices] " & sLog)
  If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] " & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] " & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control device via linked plugin interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetDevice(iDeviceId As Integer, sValue As String, Optional iValueNum As Integer = 1) As Boolean

  Dim iInstance As Integer
  Dim sPluginName, sPluginType, sAddress, sSpeakText, sDeviceName As String
  Dim rDevice, rPlugin As Result

  If Not CheckIfDeviceExists(iDeviceId) Then Return False

  ' find plugin info for device
  rPlugin = FindPluginInfoForDevice(iDeviceId)
  If Not rPlugin Then Return False
  sPluginName = rPlugin!name
  sPluginType = rPlugin!type

  ' find device name
  sDeviceName = FindNameForDevice(iDeviceId)
  If Not sDeviceName Then Return False

  ' find address of device
  sAddress = FindAddressForDevice(iDeviceId)
  If Not sAddress Then Return False

  ' find instance of device
  iInstance = FindInstanceForDevice(iDeviceId)
  If Not iInstance Then Return False

  ' We can and should optimize it, but we get deviceinfo record now
  rDevice = FindDeviceInfoForDevice(iDeviceId)

  ' toggle if needed
  If LCase(sValue) = "toggle" Then sValue = Toggle(GetCurrentValueForDevice(iDeviceId, 1))

  ' convert "Dim 100" to "On" and "Dim 0" to "Off - some devices don't support "Dim 100"
  If LCase(sValue) = "dim 100" Then sValue = "On"
  If LCase(sValue) = "dim 0" Then sValue = "Off"

  ' if virtual device
  If sPluginType == "virtual" Then
    Devices.ValueUpdate(iDeviceId, iValueNum, sValue)
  ' don't support instances (yet)
  Else If sPluginType == "module" Then
    ' TODO: check/fix these
    Select sPluginName
      Case "RFXComxPL"
        Main.hRFXComxPL.SendCommand(sAddress, sValue)
      Case "XBMCxPL"
        Main.hXBMCxPL.SendCommand(sAddress, sValue)
    End Select
  Else
    ' Only do the SendCommand if it valueid and the device is switchable/dimmable
    If iValueNum = 1 And (rDevice!switchable Or rDevice!dimable) Then
      If Main.bDevicesDebug Then WriteDebugLog("Device '" & sDeviceName & "' is set as switchable or dimable, so call SendCommand() of plugin.")
      ' call plugin's sendcommand routine (if any)
      If Plugin.SendCommand(sPluginName, iInstance, sAddress, sValue, sDeviceName) Then
        ' TODO: remove if value control/feedback params are implemented
        ' until then this workaround is needed for some plugins
        Select sPluginName
          Case "GenericIO", "OpenZWave"
            ' don't do valueupdate, these come back from devices
          Case "RFXComTRX"
            ' TODO: remove this if value control/feedback/valuenum params are implemented
            ' don't do valueupdate if commands belong to RGB dimmer, done in plugin
            ' store color values
            Select UCase(Left(sValue, 6))
              Case "COLOR+", "COLOR-"
                Devices.ValueUpdate(iDeviceId, 3, sValue)
              Case "COLOR "
                Devices.ValueUpdate(iDeviceId, 2, sValue)
              Case Else
                Devices.ValueUpdate(iDeviceId, 1, sValue)
            End Select
          Case Else
            Devices.ValueUpdate(iDeviceId, iValueNum, sValue)
        End Select
        sSpeakText = ("Set ") & sDeviceName & (" to ") & sValue
      Else
        Return False
      Endif
    Else
      If Main.bDevicesDebug Then WriteDebugLog("Device '" & sDeviceName & "' is not set as switchable or dimable, so only do a value update.")
      Devices.ValueUpdate(iDeviceId, iValueNum, sValue)
    Endif
  Endif
  If Len(sSpeakText) And If FindLogSpeakForDevice(iDeviceId, 1) Then VoiceText.Speak(sSpeakText)
  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' used in events
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetDeviceIfDifferent(iDeviceId As Integer, sValue As String) As Boolean

  If sValue == GetCurrentValueForDevice(iDeviceId, 1) Then
    Return False
  Else
    SetDevice(iDeviceId, sValue)
  Endif

End

Private Sub AddDeviceToContext(cContext As Collection, iDeviceId As Integer)

  Dim rResultDev As Result

  Try rResultDev = Main.hDB.Exec("SELECT device_id, value, valuenum FROM device_values LEFT JOIN devices ON devices.id = device_values.device_id WHERE devices.enabled IS TRUE ORDER BY name")
  If Not Error Then
    For Each rResultDev
      If rResultDev!device_id == iDeviceId Then cContext["Value" & rResultDev!valuenum] = rResultDev!value
      cContext["Dev_" & rResultDev!device_id & "_Value" & rResultDev!valuenum] = rResultDev!value
    Next
  Endif

End

Public Sub CreateValue(iDeviceId As Integer, sValueNum As String, sUnits As String) As Boolean

  Dim rValue, rResult As Result

  ' check for valid valuenum
  rValue = Devices.GetDevicesAndValues(["device_id": iDeviceId, "value_valuenum": sValueNum])
  If rValue.Count >= 1 Then
    Return False
  Endif

  ' create new device value
  Main.hDB.Begin()
  rResult = Main.hDB.Create("device_values")
  rResult!device_id = iDeviceId
  rResult!valuenum = sValueNum
  rResult!value = ""
  If Len(sUnits) Then rResult!units = sUnits
  rResult.Update()
  Main.hDB.Commit()
  Return True

End

Public Function CorrectValue(sValue As String, sFormula As String, iDeviceId As Integer) As String

  Dim sResult As String
  Dim cContext As New Collection

  ' calibration needed
  If Len(sFormula) > 0
    ' insert devices values
    AddDeviceToContext(cContext, iDeviceId)
    ' evaluate the formula
    Try sResult = Eval(Replace(sFormula, "\n", " "), cContext)
    If Error Then
      sResult = "ERROR: " & Error.Text
      If Main.bDevicesDebug Then WriteDebugLog("CorrectValue failed. sValue=" & sValue & ", sFormula=" & sFormula & ". Message=" & sResult)
    Endif
    Return sResult
  Else
    ' nothing to calibrate
    Return sValue
  Endif

Catch
  Return Error.Text

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' toggle a value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Toggle(sValue As String) As String

  If Lower(sValue) = "on" Or If InStr(Lower(sValue), "dim") Then
    Return "Off"
  Else
    Return "On"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface with name sInterfaceName and return it's id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInterface(sInterfaceName As String) As Integer

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT id FROM plugins WHERE interface = &1", sInterfaceName)
  If Not Error Then
    If rInterface.Available Then
      If rInterface.Count = 1 Then
        If Main.bDevicesDebug Then WriteDebugLog("Interface with name '" & sInterfaceName & "' has id '" & rInterface!id & "'")
        Return rInterface!id
      Else
        WriteLog("ERROR: More then one interface with name '" & sInterfaceName & "' found!")
        Return 0
      Endif
    Else
      WriteLog("ERROR: Interface with name '" & sInterfaceName & "' not found!")
      Return 0
    Endif
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devicetype with protocol, return it's id, 0 if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceType(sDeviceType As String) As Integer

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE protocol LIKE &1", sDeviceType)
  If Not Error Then
    If rDeviceType.Available Then
      If rDeviceType.Count = 1 Then
        If Main.bDevicesDebug Then WriteDebugLog("DeviceType with protocol '" & sDeviceType & "' has id '" & rDeviceType!id & "'")
        Return rDeviceType!id
      Else
        If Main.bDevicesDebug Then WriteDebugLog("DeviceType with protocol '" & sDeviceType & "' not found!")
        Return 0
      Endif
    Else
      If Main.bDevicesDebug Then WriteDebugLog("Cannot get DeviceType records!")
      Return 0
    Endif
  Else
    If Main.bDevicesDebug Then WriteDebugLog("Cannot get DeviceType records!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' returndevicetype for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceTypeForDevice(iDeviceId As Integer) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT devicetype_id FROM devices WHERE id = &1", iDeviceId)
  If Not Error Then
    If rDevice.Available Then
      Return rDevice!devicetype_id
    Else
      Return 0
    Endif
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return protocol for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindTypeForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result
  Dim iDeviceType As Integer

  iDeviceType = FindDeviceTypeForDevice(iDeviceId)
  Try rDevice = Main.hDB.Exec("SELECT protocol FROM devicetypes WHERE id = &1", iDeviceType)
  Return rDevice!protocol

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return typename for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceTypeNameForDeviceId(iDeviceId As Integer) As String

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT devicetypes.name FROM devicetypes, devices WHERE devicetypes.id = devices.devicetype_id AND devices.id = &1", iDeviceId)
  If rDeviceType.Available Then
    Return rDeviceType!name
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return devicetype description of device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceTypeDescriptionForDeviceId(iDeviceId As Integer) As String

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT description FROM devicetypes, devices WHERE devicetypes.id = devices.devicetype_id AND devices.id = &1", iDeviceId)
  If rDeviceType.Available Then
    Return rDeviceType!description
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return DeviceInfo for device as result
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceInfoForDevice(iDeviceId As Integer) As Result

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then
    Return rDevice
  Else
    If Main.bDevicesDebug Then WriteDebugLog("Cannot find deviceinfo for device with id " & iDeviceId)
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then
    Return rDevice!name
  Else
    If Main.bDevicesDebug Then WriteDebugLog("Cannot find name for device with id " & iDeviceId)
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return true if device with id exists
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckIfDeviceExists(iDeviceId As Integer) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT id FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then
    Return True
  Else
    If Main.bDevicesDebug Then WriteDebugLog("Cannot find device with id " & iDeviceId)
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return device id for virtual device with address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindVirtualDeviceID(sAddress As String) As Integer

  Dim iDeviceId As Integer

  iDeviceId = Find(sAddress, FindInterface("Virtual Interface"), "Virtual Device")
  Return iDeviceId

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return 0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for interface with iInterfaceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForInterface(iInterfaceId As Integer) As String

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT interface FROM plugins WHERE id = &1", iInterfaceId)
  If Not Error And If rInterface.Available Then Return rInterface!interface

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for devicetype with iDeviceTypeId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForDeviceType(iDeviceTypeId As Integer) As String

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT name FROM devicetypes WHERE id = &1", iDeviceTypeId)
  If Not Error And If rDeviceType.Available Then Return rDeviceType!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return log boolean for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT log FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!log

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return address string for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAddressForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT address FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!address

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return speak boolean for device with iDeviceId and iValueNum
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogSpeakForDevice(iDeviceId As Integer, iValueNum As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT logspeak FROM device_values WHERE device_id = &1", iDeviceId, iValueNum)
  If Not Error And If rDevice.Available Then Return rDevice!logspeak

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return hide boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindHideForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT hide FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!hide

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all enabled devices, return all fields from database
' sorted by sOrder if specified
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAllEnabledDevices(Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If sSortOrder Then
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled IS TRUE ORDER BY &1", sSortOrder)
  Else
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled IS TRUE")
  Endif

  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with interface iInterface, return complete device details
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDevicesForInterface(iInterface As Integer, iInstance As Integer, Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If sSortOrder Then
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE interface_id = &1 AND instance_id = &2 AND enabled is TRUE ORDER BY &3", iInterface, iInstance, sSortOrder)
  Else
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE interface_id = &1 AND instance_id = &2 AND enabled is TRUE", iInterface, iInstance)
  Endif

  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with group sGroup, return complete device details
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDevicesForGroup(sGroup As String, Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If sGroup Then
    If sSortOrder Then
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND enabled is TRUE ORDER BY &2", sGroup, sSortOrder)
    Else
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND enabled is TRUE", sGroup)
    Endif
    Return rDevice
  Else
    If Main.bDevicesDebug Then WriteDebugLog("FindDeviceForGroup: No group specified!")
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find plugin info for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindPluginInfoForDevice(iDeviceId As Integer) As Result

  Dim rDevice, rPlugin As Result

  Try rDevice = Main.hDB.Exec("SELECT interface_id FROM devices WHERE id = &1", iDeviceId)
  If rDevice Then
    If rDevice.Available Then
      Try rPlugin = Main.hDB.Exec("SELECT name, type, protocols FROM plugins WHERE id = &1", rDevice!interface_id)
      If rPlugin.Available Then
        If Main.bDevicesDebug Then WriteDebugLog("Plugin name for device with id '" & iDeviceId & "' is '" & rPlugin!name & "'")
        Return rPlugin
      Else
        ' plugin not found
        Return Null
      Endif
    Else
      ' device not found
      WriteDebugLog("Cannot find device with id " & iDeviceId)
      Return Null
    Endif
  Else
    ' device not found
    WriteDebugLog("Cannot find device with id " & iDeviceId)
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find plugins in database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindPlugins() As Result

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT * FROM plugins ORDER BY name")
  If rInterface.Available Then
    Return rInterface
  Else
    ' plugins not found
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInterfaceForDevice(iDeviceId As Integer) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT interface_id FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Available Then
    Return rDevice!interface_id
  ' no interface found, something is wrong
  Else
    WriteDebugLog("Device with id '" & iDeviceId & "' not found!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find instance for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInstanceForDevice(iDeviceId As Integer) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT instance_id FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!instance_id

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetValueForDevice(iDeviceId As Integer, Optional sValue As String) As String

  Dim iValueNum As Integer = 1

  If Not CheckIfDeviceExists(iDeviceId) Then Return 0
  sValue = LCase(Trim(sValue))

  If Len(sValue) > 0 Then
    Try iValueNum = CInt(Replace(sValue, "value", ""))
    If Error Then
      Select Case sValue
        Case "lastchanged"
          Return GetLastChangedForDevice(iDeviceId)
        Case "lastseen"
          Return GetLastSeenForDevice(iDeviceId)
        Case "batterystatus"
          Return GetBatteryStatusForDevice(iDeviceId)
        Case Else
          iValueNum = 1
      End Select
    Endif
  Endif
  Return GetCurrentValueForDevice(iDeviceId, iValueNum)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's lastchanged value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLastChangedForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT lastchanged FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Count Then
    Return Format(rDevice!lastchanged, "yyyy-mm-dd hh:nn:ss")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's lastseen value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLastSeenForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT lastseen FROM devices WHERE id = &1", iDeviceId)
  If rDevice And If rDevice.Count Then
    Return Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Update device lastseen
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateLastSeenForDevice(iDeviceId As Integer)

  Try Main.hDB.Exec("UPDATE devices SET lastseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iDeviceId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's batterystatus value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetBatteryStatusForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT batterystatus FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Count Then
    Return rDevice!batterystatus
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current calibrated iValue value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentValueForDevice(iDeviceId As Integer, iValue As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT value, correction FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  If rDevice.Count Then
    Return Devices.CorrectValue(rDevice!value, rDevice!correction, iDeviceId)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current uncorrected iValue value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentUnCorrectedValueForDevice(iDeviceId As Integer, iValue As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT value FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  If rDevice.Count Then
    Return rDevice!value
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iDeviceId, return it's current units field
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentUnitsForDevice(iDeviceId As Integer, iValue As Integer) As String
  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT units FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  If rDevice.Count Then
    Return rDevice!units
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iInstance, sAddress and iInterface, return it's id if found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Find(iInstance As Integer, sAddress As String, iInterface As Integer, Optional sDevice As String, sPrefName As String) As Integer

  Dim rDeviceFind As Result

  If iInterface Then
    Try rDeviceFind = Main.hDB.Exec("SELECT * FROM devices WHERE address LIKE &1 AND interface_id = &2 AND instance_id = &3", sAddress, iInterface, iInstance)
    If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, iInstance, sDevice, sPrefName)
  Else
    WriteDebugLog("Interface for device '" & sDevice & "' with address '" & sAddress & "' and instance '" & iInstance & "' not found!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress in it's address and iInterface, return id if found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindRegExp(sAddress As String, iInterface As Integer, iInstance As Integer, Optional sDevice As String, sRegex1 As String = "[[:<:]]", sRegex2 As String = "[[:>:]]") As Integer

  Dim rDeviceFind As Result

  If iInterface Then
    Try rDeviceFind = Main.hDB.Exec("SELECT * FROM devices WHERE address REGEXP '" & sRegex1 & sAddress & sRegex2 & "' AND interface_id = &1 AND instance_id = &2", iInterface, iInstance)
    If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, iInstance, sDevice)
  Else
    WriteDebugLog("Interface for device '" & sDevice & "' with address '" & sAddress & "' not found!")
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress for all plugins, return id if found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAll(iInstance As Integer, sAddress As String, iInterface As Integer, Optional sDevice As String) As Integer

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT devices.* FROM devices, plugins WHERE devices.interface_id = plugins.id AND plugins.protocols REGEXP '[[:<:]]" & sDevice & "[[:>:]]' AND devices.address LIKE &1 AND devices.enabled is TRUE LIMIT 1", sAddress)
  If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, iInstance, sDevice)

End

Public Sub FindDevice(rDevice As Result, sAddress As String, iInterface As Integer, iInstance As Integer, Optional sDeviceType As String, sPrefName As String) As Integer

  Dim rResult As Result

  If Not sDeviceType Then sDeviceType = "Unknown"

  If rDevice.Count > 1 Then
    WriteDebugLog("The following devices have the same address:")
    For Each rDevice
      WriteDebugLog("Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    Next
    Return 0
  Else If rDevice.Count = 1 Then
    If Main.bDevicesDebug Then WriteDebugLog("Device with address '" & sAddress & "' is '" & rDevice!name & "'")
    If rDevice!enabled = True Then
      If rDevice!firstseen = "00:00:00" Or If rDevice!firstseen = "" Then
        If Main.bDevicesDebug Then WriteDebugLog("Device with address '" & sAddress & "' and '" & rDevice!name & "' is a new device")
        rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
      Endif
      Return rDevice!id
    Else
      If Main.bDevicesDebug Then WriteDebugLog("Device with type '" & sDeviceType & "', address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' is disabled!")
      Return 0
    Endif
  Else
    ' If we force disable autocreating, we don't want to get any other 'debug' noise
    If sDeviceType = "DISABLEAUTOCREATE" Then Return 0

    If Not IsBlacklisted(sAddress, iInterface) Then
      If sDeviceType Then
        WriteDebugLog("Device with type '" & sDeviceType & "', address '" & sAddress & "', instance '" & iInstance & "' and interface '" & FindNameForInterface(iInterface) & "' not found!" & IIf(Main.bAutoDeviceCreate, " (Auto-Create enabled)", " (Auto-Create disabled)"))

        If Main.bAutoDeviceCreate Then
          Return AutoCreateDevice(sAddress, iInterface, iInstance, sDeviceType, sPrefName)
        Else
          Return 0
        Endif
      Else
        WriteDebugLog("Device with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' not found!")
        Return 0
      Endif

    Else
      If Main.bDevicesDebug Then
        If sDeviceType Then
          WriteDebugLog("Device " & IIf(Len(sDeviceType), " with type '" & sDeviceType & "' ", "") & ", address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' is blacklisted!")
        Else
          WriteDebugLog("Device with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' is blacklisted!")
        Endif
      Endif

      Return 0
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if device with iDeviceId has firstseen filled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckFirstSeen(iDeviceId As Integer)

  Dim rResult, rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT firstseen, address, name FROM devices WHERE id = &1", iDeviceId)
  If rDevice.Available Then
    If rDevice.Count Then
      If rDevice!firstseen = "00:00:00" Or If rDevice!firstseen = "" Then
        If Main.bDevicesDebug Then WriteDebugLog("Device with address '" & rDevice!address & "' and '" & rDevice!name & "' is a new device!")
        rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iDeviceId)
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if address is blacklisted and return true
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsBlacklisted(sAddress As String, iInterface As Integer) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM deviceblacklist WHERE address = &1", sAddress)
  If rDevice.Count Then
    If rDevice!id Then
      If iInterface = rDevice!id Then
        If Main.bDevicesDebug Then WriteDebugLog("Address '" & sAddress & "' with Interface '" & FindNameForInterface(iInterface) & "' is blacklisted, so I ignore it.")
        Return True
      Else
        Return False
      Endif
    Endif
    If Main.bDevicesDebug Then WriteDebugLog("Address '" & sAddress & "' is blacklisted, so I ignore it.")
    Return True
  Endif
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device with iDeviceId at iValuenum with vValue, optional with valuetype
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValueUpdate(iDeviceId As Integer, iValueNum As Integer, vValue As Variant, Optional iValueType As Integer = ValueType_Undefined) As Boolean

  Dim rResult, rResultInsert, rResultUpdate, rDevice, rDeviceLog As Result
  Dim bUpdated, bHidden As Boolean
  Dim sLabel, sValue, sName, sType, sCorrection, sUnits, sLastSeen As String
  Dim sTimeNow As String = Format(Now(), "yyyy-mm-dd hh:nn:ss")

  If vValue = "Dim 100" Then vValue = "On"
  If vValue = "Dim 99" Then vValue = "On"
  If vValue = "Dim 0" Then vValue = "Off"

  Try rDevice = Main.hDB.Exec("SELECT device_values.value, device_values.log, device_values.correction, device_values.logdisplay, devices.name, devices.dimable, devices.switchable, devices.instance_id, devices.hide FROM device_values JOIN devices ON device_values.device_id = devices.id WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValueNum)
  ' data for device cannot be retrieved the device probably doesn't exist
  If Not rDevice Then
    If Main.bDevicesDebug Then WriteDebugLog("ValueUpdate called for device with id '" & iDeviceId & "' that doesn't exists")
    Return False
  Endif
  ' devicevalue doesn't exist we need to do an insert instead of an update
  If rDevice.Count = 0 Then

    Select iValueType
      Case ValueType_Switch
      Case ValueType_Temperature
        sUnits = IIf(Main.sTemperature = "°C", "°C", "°F")
      Case ValueType_Humidity
        sUnits = "%"
      Case ValueType_Luminance
      Case ValueType_WindSpeed
      Case ValueType_WindDirection
      Case ValueType_WindDescription
      Case ValueType_WindAvgSpeed
      Case ValueType_Weight
      Case ValueType_UV
      Case ValueType_RainRate
      Case ValueType_RainTotal
      Case ValueType_Remote
      Case ValueType_Security
      Case ValueType_Tamper
      Case ValueType_Blinds
      Case ValueType_Energy_kWh
      Case ValueType_Power_Watt
      Case ValueType_Chime
      Case ValueType_Barometric
      Case ValueType_Energy_Watt
      Case ValueType_Voltage
      Case ValueType_Current
      Case ValueType_Water
      Default ' Do nothing, we can't assign a proper unit
        sUnits = ""
    End Select

    rResultInsert = Main.hDB.Exec("INSERT INTO device_values (device_id, value, valuenum, lastchanged, units) values (&1, &2, &3, &4, &5)", iDeviceId, vValue, iValueNum, sTimeNow, sUnits)
    rDevice = Main.hDB.Exec("SELECT device_values.value, device_values.log, device_values.correction, device_values.logdisplay, devices.name, devices.dimable, devices.switchable, devices.instance_id, devices.hide FROM device_values JOIN devices ON device_values.device_id = devices.id WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValueNum)
  Else
    sValue = rDevice!value
  Endif

  ' store device name
  sName = rDevice!name
  bHidden = rDevice!hide
  sCorrection = rDevice!correction

  If rDevice!switchable Then
    sType = "switch"
  Else If rDevice!dimable Then
    sType = "dimmer"
  Endif

  If Main.bDevicesDebug Then WriteDebugLog("ValueUpdate called for device with id '" & iDeviceId & "' valuenum '" & iValueNum & "' and value '" & vValue & "'")

  If vValue <> Null Then
    If Comp(vValue, sValue, gb.IgnoreCase) <> 0 Then

      rResult = Main.hDB.Exec("UPDATE devices, device_values SET devices.lastseen = &1, device_values.lastseen = &1, devices.lastchanged = &1, device_values.lastchanged = &1, device_values.value = &4 WHERE devices.id = &2 AND device_values.device_id = &2 AND device_values.valuenum = &3", sTimeNow, iDeviceId, iValueNum, vValue)
      If Main.bDevicesDebug Then WriteDebugLog(("Device change triggered for device '") & sName & ("' with 'value") & iValueNum & "' = '" & vValue & "'")
      If rDevice!dimable = True Or If rDevice!switchable = True Then Main.RefreshControlPage()
      If rDevice!logdisplay Then WriteLog(sName & " status changed to " & vValue & IIf(sLabel, " " & sLabel, "") & ".")

      Events.CheckDeviceChangeEvents(iDeviceId, iValueNum, vValue)
      bUpdated = True

      If Not bHidden Then
        ' FIXME: instance of these plugins do not map to device instances, now set to 1 by default, maybe we should call/loop through all enabled instances?
        If Plugin.IsPluginEnabled("IViewer", 0) Then
          Try Plugin.GetPluginObject("IViewer", 1).Interface.SendUpdateForDevice(iDeviceId, CorrectValue(vValue, sCorrection, iDeviceId), "value" & iValueNum, IIf(sType, sType, "value" & iValueNum))
        Endif

        If Plugin.IsPluginEnabled("MQTT", 0) Then
          ' Don't re-publish received MQTT values towards the MQTT broker. Exclude MQTT protocol
          If FindTypeForDevice(iDeviceId) <> "MQTT" Then
            Try Plugin.GetPluginObject("MQTT", 1).Interface.PublishMsg(sName & "/" & "value" & iValueNum, CorrectValue(vValue, sCorrection, iDeviceId))
            ' Also publish LastSeen

            sLastSeen = GetLastSeenForDevice(iDeviceId)

            ' Check if we didn't publish this very recently, preventing duplicate MQTT messages
            If Not aMQTTLastSeen.Exist(sName & "/" & "lastseen " & sLastSeen) Then
              Try Plugin.GetPluginObject("MQTT", 1).Interface.PublishMsg(sName & "/" & "lastseen", sLastSeen)
              aMQTTLastSeen.Push(sName & "/" & "lastseen " & sLastSeen)
            Endif

            ' Remove the first entry from the cache
            If aMQTTLastSeen.Count > 10 Then
              aMQTTLastSeen.Delete(0, 1)
            Endif

          Endif
        Endif

        If Plugin.IsPluginEnabled("SmartVisuServer", 0) Then
          Try Plugin.GetPluginObject("SmartVisuServer", 1).Interface.SendUpdateForDevice(sName, CorrectValue(vValue, sCorrection, iDeviceId), IIf(sType, sType, "value" & iValueNum))
        Endif
      Endif
    Endif
  Endif

  ' Only update lastseen
  If Not bUpdated Then
    rResultUpdate = Main.hDB.Exec("UPDATE devices, device_values SET devices.lastseen = &1, device_values.lastseen = &1 WHERE devices.id = &2 AND device_values.device_id = &2 AND device_values.valuenum = &3", sTimeNow, iDeviceId, iValueNum)

    ' Publish LastSeen
    If Not bHidden Then
      If Plugin.IsPluginEnabled("MQTT", 0) Then
        ' Don't re-publish received MQTT values towards the MQTT broker. Exclude MQTT protocol
        If FindTypeForDevice(iDeviceId) <> "MQTT" Then

          sLastSeen = GetLastSeenForDevice(iDeviceId)

          ' Check if we didn't publish this very recently, preventing duplicate MQTT messages
          If Not aMQTTLastSeen.Exist(sName & "/" & "lastseen " & sLastSeen) Then
            Try Plugin.GetPluginObject("MQTT", 1).Interface.PublishMsg(sName & "/" & "lastseen", sLastSeen)
            aMQTTLastSeen.Push(sName & "/" & "lastseen " & sLastSeen)
          Endif

          ' Remove the first entry from the cache
          If aMQTTLastSeen.Count > 10 Then
            aMQTTLastSeen.Delete(0, 1)
          Endif

        Endif
      Endif
    Endif
  Endif

  If bUpdated Or If Main.bLogAllValueUpdates Then
    If rDevice!log Then
      Main.hDB.Begin()
      rDeviceLog = Main.hDB.Create("device_values_log")
      rDeviceLog!device_id = iDeviceId
      rDeviceLog!value = CStr(vValue)
      rDeviceLog!valuenum = iValueNum
      rDeviceLog!lastchanged = Now()

      If Main.bDevicesDebug Then WriteDebugLog("Creating log record for device with id '" & iDeviceId & "' and valuenum '" & iValueNum & "' = '" & vValue & "'")
      rDeviceLog.Update()
      Main.hDB.Commit()
    Endif
  Endif

  Events.CheckDeviceLastseenChangeEvents(iDeviceId, sTimeNow)
  Main.RefreshDeviceList()

  If rResult Then
    Return True
  Else
    Return False
  Endif

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  WriteLog("ERROR: DeviceId = '" & iDeviceId & "' ValueNum =  '" & iValueNum & "'")
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update battery status for device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Battery(iDeviceId As Integer, vValue As Variant) As Boolean

  Dim rDevice, rResult As Result
  Dim sName, sBatteryStatus As String
  Dim bHidden As Boolean

  Try rDevice = Main.hDB.Exec("SELECT name, batterystatus, hide FROM devices WHERE id = &1", iDeviceId)
  ' data for device cannot be retrieved the device probably doesn't exist
  If Not rDevice Then
    If Main.bDevicesDebug Then WriteDebugLog("Battery Update called for device with id '" & iDeviceId & "' that doesn't exists")
    Return False
  Endif

  ' store device name and current battery level
  sName = rDevice!name
  sBatteryStatus = rDevice!batterystatus
  bHidden = rDevice!hide

  ' update value
  rResult = Main.hDB.Exec("UPDATE devices SET batterystatus = &1, lastseen = &2 WHERE id = &3", vValue, Format(Now(), "yyyy-mm-dd hh:nn:ss"), iDeviceId)
  If rResult Then
    If sBatteryStatus <> vValue Then

      ' notify plugins
      ' FIXME: instance of these plugins do not map to device instances, now set to 1 by default, maybe we should call/loop through all enabled instances?
      If Not bHidden Then
        If Plugin.IsPluginEnabled("IViewer", 0) Then
          Try Plugin.GetPluginObject("IViewer", 1).Interface.SendUpdateForDevice(iDeviceId, vValue, "battery", "battery")
        Endif

        If Plugin.IsPluginEnabled("MQTT", 0) Then
          ' Send battery level
          Try Plugin.GetPluginObject("MQTT", 1).Interface.PublishMsg(sName & "/" & "battery", vValue)
          ' Also publish LastSeen
          Try Plugin.GetPluginObject("MQTT", 1).Interface.PublishMsg(sName & "/" & "lastseen",GetLastSeenForDevice(iDeviceId))
        Endif

        If Plugin.IsPluginEnabled("SmartVisuServer", 0) Then
          Try Plugin.GetPluginObject("SmartVisuServer", 1).Interface.SendUpdateForDevice(sName, vValue, "battery")
        Endif
      Endif
    Endif
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' mail battery status for device with battery status set (sType can be '', all or empty)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function MailBatteryStatus(Optional sType As String) As Boolean

  Dim rDevice As Result
  Dim sMessageBody As String
  Dim bFound As Boolean = False

  Try rDevice = Main.hDB.Exec("SELECT name, address, batterystatus, lastseen FROM devices WHERE enabled is TRUE")
  If rDevice.Available Then
    If rDevice.Count Then
      For Each rDevice
        If LCase(sType) = "empty" Then
          If LCase(rDevice!batterystatus) = "empty" Then
            sMessageBody &= "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus & "  " & Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
            bFound = True
          Endif
        Else
          If rDevice!batterystatus Then
            sMessageBody &= "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus & "  " & Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
            bFound = True
          Endif
        Endif
      Next
      ' sent e-mail with status
      If bFound Then
        Mail.SendMail(Application.Name & (": Battery Status"), ("These Devices have their Battery status match selection '") & sType & "':\n" & sMessageBody, Main.sEmailToAddress)
      Endif
    Endif
  Endif
  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' erase all logged data for device with iDeviceId, or just one value if iValue is specified
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EraseLog(iDeviceId As Integer, Optional iValue As Integer)

  If iValue Then
    Try Main.hDB.Exec("DELETE FROM device_values_log WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValue)
  Else
    Try Main.hDB.Exec("DELETE FROM device_values_log WHERE device_id = &1", iDeviceId)
  Endif

End

Private Sub FindUniqueName(sName As String) As String

  Dim rResult As Result
  Dim iNo As Integer

  For iNo = 1 To 50
    Try rResult = Main.hDB.Exec("SELECT * FROM devices WHERE name = &1", sName & iNo)
    If rResult.Count Then
      Continue
    Else
      Return sName & iNo
    Endif
  Next

End

Public Sub AutoCreateDevice(sAddress As String, iInterface As Integer, iInstance As Integer, sShortName As String, Optional sPrefName As String) As Integer

  Dim rResult As Result
  Dim sName As String
  Dim iTypeId As Integer

  If sPrefName Then
    sName = FindUniqueName(Trim(sPrefName) & " #")
  Else
    sName = FindUniqueName(sShortName & " device #")
  Endif

  ' try to select correct devicetype
  Select UCase(sShortName)
    Case "DS18S20"
      iTypeId = 15
    Case "DS2423"
      iTypeId = 58
    Case "DS2438"
      iTypeId = 65
    Case "DS18B20"
      iTypeId = 213
    Case "X10"
      iTypeId = 36
    Case "X10SECURITY", "POWERCODEDW", "POWERCODEMOTION", "POWERCODEAUX", "CODESECURE"
      iTypeId = 1
    Case "AC"
      iTypeId = 60
    Case "FS20"
      iTypeId = 210
    Case "FHTTFK"
      iTypeId = 156
    Case "FHT80"
      iTypeId = 157
    Case "EM1000", "EM1000-S", "EM1000-EM"
      iTypeId = 166
    Case "EM1000-GZ"
      iTypeId = 167
    Case "HDDTEMP"
      iTypeId = 11
    Case "DSC DWS"
      iTypeId = 41
    Case "DSC PIR"
      iTypeId = 40
    Case "DSC SMOKE"
      iTypeId = 42
    Case "PLCBUS"
      iTypeId = 117
    Case "JEELABS NODE"
      iTypeId = 142
    Case "PWRCTRL"
      iTypeId = 135
    Case "RFXSENSOR TEMP"
      iTypeId = 100
    Case "RFXSENSOR BARO"
      iTypeId = 139
    Case "RFXSENSOR SUPPLY"
      iTypeId = 102
    Case "ARC"
      iTypeId = 59
    Case "ATI REMOTE WONDER", "ATI"
      iTypeId = 113
    Case "ATI WONDER PLUS", "ATI2"
      iTypeId = 114
    Case "HE", "HEUK"
      iTypeId = 43
    Case "HEEU"
      iTypeId = 154
    Case "RFXMETER"
      iTypeId = 9
    Case "TEMP1"
      iTypeId = 214
    Case "TEMP2"
      iTypeId = 81
    Case "TEMP3"
      iTypeId = 84
    Case "TEMP4"
      iTypeId = 85
    Case "TEMP5"
      iTypeId = 223
    Case "HUM1"
      iTypeId = 223
    Case "TH1"
      iTypeId = 7
    Case "TH2"
      iTypeId = 26
    Case "TH3"
      iTypeId = 39
    Case "TH4"
      iTypeId = 215
    Case "TH5"
      iTypeId = 74
    Case "TH6"
      iTypeId = 93
    Case "TH7"
      iTypeId = 226
    Case "TH8"
      iTypeId = 235
    Case "THB1"
      iTypeId = 32
    Case "THB2"
      iTypeId = 33
    Case "RAIN1"
      iTypeId = 95
    Case "RAIN2"
      iTypeId = 38
    Case "RAIN3"
      iTypeId = 231
    Case "WIND1"
      iTypeId = 74
    Case "WIND2"
      iTypeId = 97
    Case "WIND3"
      iTypeId = 37
    Case "WIND4"
      iTypeId = 233
    Case "UV1"
      iTypeId = 8
    Case "UV2"
      iTypeId = 99
    Case "UV3"
      iTypeId = 232
    Case "DT1"
      iTypeId = 39
    Case "WEIGHT1"
      iTypeId = 22
    Case "WEIGHT2"
      iTypeId = 23
    Case "KD101"
      iTypeId = 17
    Case "ELEC1", "ELEC1_1", "ELEC1_2", "ELEC1_3"
      iTypeId = 66
    Case "ELEC2"
      iTypeId = 78
    Case "X10SECDWS", "X10SECDW"
      iTypeId = 1
    Case "X10SECMOTION"
      iTypeId = 69
    Case "X10SECREMOTE"
      iTypeId = 71
    Case "ANSLUT"
      iTypeId = 228
    Case "DM10"
      iTypeId = 179
    Case "DIGIMAX"
      iTypeId = 180
    Case "MERTIK"
      iTypeId = 193
    Case "NINJA"
      iTypeId = 194
    Case "SMOKE"
      iTypeId = 174
    Case "IO0", "IO1", "IO2", "IO3", "IO4", "IO5", "IO6", "IO7"
      iTypeId = 192
    Case "UPS"
      iTypeId = 14
    Case "BLUETOOTH"
      iTypeId = 18
    Case "S300TH"
      iTypeId = 173
    Case "SQUEEZEPLAYER"
      iTypeId = 112
    Case "HM_CC_TC"
      iTypeId = 234
    Case "P1-POWERUSAGE"
      iTypeId = 246
    Case "P1-POWERDELIVER"
      iTypeId = 255
    Case "P1-GASUSAGE"
      iTypeId = 256
    Case "CCOST"
      iTypeId = 131
    Case "TEMP6"
      iTypeId = 248
    Case "TEMP7"
      iTypeId = 251
    Case "TEMP8"
      iTypeId = 247
    Case "TEMP9"
      iTypeId = 252
    Case "TEMP10"
      iTypeId = 380
    Case "TEMP11"
      iTypeId = 387
    Case "HUM2"
      iTypeId = 247
    Case "TH9"
      iTypeId = 250
    Case "RAIN4"
      iTypeId = 253
    Case "RAIN5"
      iTypeId = 247
    Case "WIND5"
      iTypeId = 254
    Case "WIND6"
      iTypeId = 247
    Case "PIONEER"
      iTypeId = 258
    Case "MEDIA.BASIC"
      iTypeId = 259
    Case "MEDIA.MPTRNSPT"
      iTypeId = 260
    Case "MEDIA.MPMEDIA"
      iTypeId = 261
    Case "OSD.BASIC"
      iTypeId = 262
    Case "T"
      iTypeId = 263
    Case "TH"
      iTypeId = 264
    Case "THB"
      iTypeId = 265
    Case "WIND"
      iTypeId = 266
    Case "RAIN"
      iTypeId = 267
    Case "SOL"
      iTypeId = 268
    Case "UV"
      iTypeId = 269
    Case "ELVCUBE"
      iTypeId = 270
    Case "ELVDOOR"
      iTypeId = 271
    Case "ELVWALLTHERMO"
      iTypeId = 272
    Case "ELVRADTHERMO"
      iTypeId = 273
    Case "ELVBUTTON"
      iTypeId = 670
    Case "ELEC3"
      iTypeId = 274
    Case "YOULESS"
      iTypeId = 281
    Case "OPENTHERM THERMOSTAT"
      iTypeId = 237
    Case "OPENTHERM BURNER"
      iTypeId = 238
    Case "OPENTHERM BOILER"
      iTypeId = 239
    Case "OPENTHERM CENTRAL HEATING"
      iTypeId = 240
    Case "OPENTHERM OUTSIDE SENSOR"
      iTypeId = 241
    Case "THERMOSTAT"
      iTypeId = 243
    Case "LIGHTWAVERF"
      iTypeId = 230
    Case "BLYSS" ' switch
      iTypeId = 282
    Case "MEIANTECH"
      iTypeId = 285
    Case "PLUGWISE SWITCH"
      iTypeId = 297
    Case "KMTRONIC INPUT"
      iTypeId = 298
    Case "KMTRONIC OUTPUT"
      iTypeId = 299
    Case "GENERICIO"
      iTypeId = 301
    Case "BINARY POWER SWITCH"
      iTypeId = 61
    Case "ROUTING MULTILEVEL SWITCH", "MULTILEVEL SWITCH"
      iTypeId = 62
    Case "ROUTING BINARY SENSOR", "BINARY SENSOR"
      iTypeId = 63
    Case "ROUTING ALARM SENSOR"
      iTypeId = 313
    Case "DOOR LOCK", "Z-WAVE DOOR LOCK"
      iTypeId = 333
    Case "VIERA"
      iTypeId = 339
    Case "SA30"
      iTypeId = 340
    Case "BYRONSX"
      iTypeId = 341
    Case "TH10"
      iTypeId = 353
    Case "TH11"
      iTypeId = 354
    Case "TH12"
      iTypeId = 381
    Case "OMNIKSOL MAIN"
      iTypeId = 286
    Case "OMNIKSOL STRING"
      iTypeId = 660
    Case "OMNIKSOL OUTPUT"
      iTypeId = 661
    Case "CONRADRELAYBOARD"
      iTypeId = 662
    Case "SELECTPLUS"
      iTypeId = 307
    Case "BYRONMP"
      iTypeId = 386

    ' ~~~ Velbus ~~~
    Case "VMB4RY"
      iTypeId = 334
    Case "VMB4DC"
      iTypeId = 335
    Case "VMB7IN"
      iTypeId = 336
    Case "VMBGPO"
      iTypeId = 337
    Case "VMBDME"
      iTypeId = 338
    Case "VMB4RYNO"
      iTypeId = 663
    Case "VMB2BLE"
      iTypeId = 664
    Case "VMB4RYLD"
      iTypeId = 671
    Case "VMB8PB"
      iTypeId = 674
    Case "VMBDMI"
      iTypeId = 711
    Case "VMBPIRC"
      iTypeId = 712
    Case "VMBPIRO"
      iTypeId = 713
    Case "VMB8PBU"
      iTypeId = 714
    Case "VMB6PBN"
      iTypeId = 715
    Case "VMBGP2"
      iTypeId = 716
    Case "VMBGP4"
      iTypeId = 717
    Case "VMBGPOD"
      iTypeId = 718
    Case "VMBGP1"
      iTypeId = 719
    Case "VMB1BL"
      iTypeId = 726
    Case "VMB2BL"
      iTypeId = 727
    Case "VMB4PD"
      iTypeId = 728
    Case "VMB6IN"
      iTypeId = 729
    Case "VMBGP4PIR"
      iTypeId = 730

    ' ~~~ Eneco Toon ~~~
    Case "TOON THERMOSTAT"
      iTypeId = 356
    Case "TOON POWER USAGE"
      iTypeId = 357
    Case "TOON POWER PRODUCED"
      iTypeId = 358
    Case "TOON GAS USAGE"
      iTypeId = 359
    Case "TOON SCHEDULE"
      iTypeId = 360
    Case "TOON STEKKER"
      iTypeId = 384
    Case "TOON ALL ON/OFF"
      iTypeId = 385

    ' ~~~~ Jerome KernelChip ~~~
    Case "JEROME IO INPUT"
      iTypeId = 361
    Case "JEROME IO OUTPUT"
      iTypeId = 362
    Case "JEROME PULSE COUNTER"
      iTypeId = 363

    ' ~~~~ Philips Hue ~~~
    Case "LCT001"
      iTypeId = 373
    Case "LCT007"
      iTypeId = 373
    Case "LWB004"
      iTypeId = 308
    Case "LWB006"
      iTypeId = 308
    Case "LST002"
      iTypeId = 314
    Case "PLUG 01"
      iTypeId = 720

    ' ~~~~ Wirelesstags ~~~
    Case "ZGW05"
      iTypeId = 368
    Case "ZGW06"
      iTypeId = 369
    Case "ZGW07"
      iTypeId = 370
    Case "ZGW08"
      iTypeId = 371
    Case "ZGW09"
      iTypeId = 372

    ' ~~~~ Z-Wave, OpenZWave and RaZberry ~~~
    Case "Z-WAVE THERMOSTAT"
      iTypeId = 243
    Case "Z-WAVE SWITCH"
      iTypeId = 61
    Case "Z-WAVE MOTOR CONTROL", "MULTIPOSITION MOTOR SWITCH"
      iTypeId = 305
    Case "Z-WAVE DIMMER"
      iTypeId = 62
    Case "Z-WAVE SENSOR"
      iTypeId = 64
    Case "Z-WAVE DOOR LOCK"
      iTypeId = 242
    Case "Z-WAVE ENTRY CONTROL"
      iTypeId = 309
    Case "Z-WAVE CONTROLLER"
      iTypeId = 63
    Case "Z-WAVE", "Z-WAVE GENERIC"
      iTypeId = 304
    Case "Z-WAVE REMOTE SWITCH"
      iTypeId = 306
    Case "SECURE KEYPAD"
      iTypeId = 242

    ' ~~~ Visonic PowerMax/Master ~~~
    Case "VISONIC PIR"
      iTypeId = 289
    Case "VISONIC DOOR/WINDOW CONTACT"
      iTypeId = 291
    Case "VISONIC GAS DETECTOR"
      iTypeId = 294
    Case "VISONIC SMOKE DETECTOR"
      iTypeId = 293
    Case "VISONIC POWERMAX"
      iTypeId = 672
    Case "VISONIC POWERMASTER"
      iTypeId = 673
    'Case "VISONIC TEMPERATURE"
    'Case "VISONIC WIRED"
    'Case "VISONIC CAMERA"
    'Case "VISONIC UNKNOWN"

    ' ~~~ Virtual Devices ~~~
    Case "WEATHER"
      iTypeId = 141

    ' ~~~ MySensors ~~~
    Case "MYSENSORS"
      iTypeId = 315

    Case "OWW-TEXT"
      iTypeId = 320

    ' ~~~ MQTT ~~~
    Case "MQTT-GENERIC"
      iTypeId = 303
    Case "MQTT-JSON"
      iTypeId = 669

    ' ~~~ RFLink ~~
    Case "ALECTRO"
       iTypeId = 700
    Case "AURIOL"
       iTypeId = 701
    Case "CRESTA"
       iTypeId = 702
    Case "LACROSSE"
       iTypeId = 703
    Case "KAKU"
       iTypeId = 222
    Case "NEWKAKU"
       iTypeId = 704
    Case "UPM"
       iTypeId = 705
    Case "RFLINK GENERIC"
       iTypeId = 707

    ' ~~~ UniPi ~~~
    Case "UNIPI"
       iTypeId = 706

    ' ~~~ Lighting4 ~~~
    Case "PT2262"
       iTypeId = 321

    ' ~~~ Unknown devicetype ~~~
    Case Else
      WriteDebugLog("Auto device create for '" & sName & "' failed because it's unknown!")
      WriteDebugLog("Device type: " & sShortName)
      WriteDebugLog("Address: " & sAddress)
      WriteDebugLog("Interface: '" & FindNameForInterface(iInterface) & "' (" & iInterface & ")")
      WriteDebugLog("Instance: " & iInstance)
      WriteDebugLog("Please report this to support@domotiga.nl")
      WriteDebugLog("Also note that you can probably simply create this device manually, and selecting a devicetype similar to the one missing.")
      Return
  End Select

  WriteDebugLog("Auto created device '" & sName & "' with address '" & sAddress & "' of type '" & FindNameForDeviceType(iTypeId) & "' with interface '" & FindNameForInterface(iInterface) & "' and instance '" & iInstance & "'")

  ' create device
  Main.hDB.Begin()
  rResult = Main.hDB.Create("devices")
  rResult!name = sName
  rResult!devicetype_id = iTypeId
  rResult!interface_id = iInterface
  rResult!instance_id = iInstance
  rResult!address = sAddress
  rResult!enabled = True
  rResult!onicon = "new.png"
  rResult!dimicon = "new.png"
  rResult!officon = "new.png"
  rResult!hide = False
  rResult!dimable = False
  rResult!switchable = False
  rResult!firstseen = Now()
  rResult!lastseen = Now()
  rResult!location_id = 1
  Try rResult.Update()

  ' Don't crash if the auto-create failed, most cases an invalid (none-utf8) name or address
  If Error Then
    WriteLog("ERROR: Auto created device '" & sName & "' with address '" & sAddress & "' failed. Msg=" & Error.Text)
    Return 0
  Endif

  Main.hDB.Commit()

  ' try to get id of created device
  Try rResult = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM devices")
  If Not Error Then
    Return rResult!lastid
  Else
    Return 0
  Endif

End

Public Sub CheckRepeatDevice()

  Dim rResult As Result
  Dim dLastSeen As Date
  Dim period As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE repeatstate IS TRUE AND enabled is TRUE")
  For Each rResult
    period = rResult!repeatperiod
    dLastSeen = rResult!lastseen
    If (Now() > DateAdd(dLastSeen, gb.Minute, period)) Then
      Devices.SetDevice(rResult!id, GetCurrentUnCorrectedValueForDevice(rResult!id, 1))
    Endif
  Next

End

Public Sub CheckResetDevice()

  Dim rResult As Result
  Dim dLastSeen As Date
  Dim period As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE reset IS TRUE AND enabled is TRUE")
  For Each rResult
    period = rResult!resetperiod
    dLastSeen = rResult!lastseen
    If (GetCurrentUnCorrectedValueForDevice(rResult!id, 1) <> rResult!resetvalue) And (Now() > DateAdd(dLastSeen, gb.Minute, period)) Then
      If rResult!switchable Then
        Devices.SetDevice(rResult!id, rResult!resetvalue)
      Else
        Devices.ValueUpdate(rResult!id, 1, rResult!resetvalue)
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type of control for device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckControlDevice(sAddress As String, iInterface As Integer) As String

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT switchable, dimable FROM devices WHERE address LIKE &1 AND interface_id = &2 AND enabled is TRUE", sAddress, iInterface)
  If rDeviceFind.Available Then
    If rDeviceFind!switchable Then
      Return "Switch"
    Else If rDeviceFind!dimable Then
      Return "Dimmer"
    Else
      Return "Other"
    Endif
  Else
    Return "Switch"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get the id of the device with sDeviceName
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindIdForDevice(sDeviceName As String) As Integer
  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sDeviceName)
  ' found only one unique entry?
  If rDevice.Count > 1 Then
    WriteDebugLog(("The following devices have same name:"))
    For Each rDevice
      WriteDebugLog(("Device with address '") & rDevice!address & "' is '" & rDevice!name & "'")
    Next
    Return 0
  ' ok this one seems useful
  Else If rDevice.Count = 1 Then
      Return rDevice!id
  ' no device found, something is wrong
  Else
    WriteDebugLog("Device with name '" & sDeviceName & "' not found!")
    Return 0
  Endif

Catch
  WriteDebugLog("Error while trying to find id: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return on/off/dim icon name related to value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetStatusIcon(sValue As String, sOnIcon As String, sOffIcon As String, sDimIcon As String) As String

  Dim aValue As String[]

  ' split command
  aValue = Split(UCase(sValue), " ")

  If Not IsNull(sOnIcon) Or Not IsNull(sOffIcon) Then
    If aValue.Count = 1 Then
      Select Case UCase(aValue[0])
        Case "ON", "OPEN", "MOTION", "AWAKE", "ONLINE", "LIGHT", "UP", "ALARM"
          Return sOnIcon
        Case Else
          Return sOffIcon
      End Select
    Else If aValue.Count > 1 Then
      If aValue[0] = "DIM" Then
        If Len(sDimIcon) Then Return sDimIcon
      Else
        If Len(sOffIcon) Then Return sOffIcon
      Endif
    Endif
  Else
    Return ""
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteDevice(iDeviceId As Integer) As Boolean

  ' TODO: handle in database
  Main.hDB.Exec("DELETE FROM devices WHERE id = &1", iDeviceId)
  Main.hDB.Exec("DELETE FROM device_values WHERE device_id = &1", iDeviceId)
  Devices.EraseLog(iDeviceId)
  Main.hDB.Exec("DELETE FROM devices_xively WHERE deviceid = &1", iDeviceId)
  Main.hDB.Exec("DELETE FROM devices_bwired WHERE deviceid = &1", iDeviceId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete device value with device iDeviceId and valuenum
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteDeviceValue(iDeviceId As Integer, iValueNum As Integer) As Boolean

  ' TODO: handle in database
  Main.hDB.Exec("DELETE FROM device_values_log WHERE device_id = &1 AND valuenum  = &2", iDeviceId, iValueNum)
  Main.hDB.Exec("DELETE FROM device_values WHERE device_id = &1 AND valuenum = &2", iDeviceId, iValueNum)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' make device with iDeviceId hidden
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HideDevice(iDeviceId As Integer) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("UPDATE devices SET hide = TRUE WHERE id = &1", iDeviceId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' make device with iDeviceId visible
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UnHideDevice(iDeviceId As Integer) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("UPDATE devices SET hide = FALSE WHERE id = &1", iDeviceId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' toggle device state of device with iDeviceId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ToggleDeviceValue(iDeviceId As Integer) As String

  If CheckIfDeviceExists(iDeviceId)
    Return Toggle(GetCurrentValueForDevice(iDeviceId, 1))
  Else
    Return ""
  Endif

Catch
  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices and return fields from the database, depending which devices are required
' optionally the output van be sorted, by specifying the sOrder
' sWhich can have (or a combination, delimited by a +):
' all, enabled, disabled, visible, hidden, switch, dim, sensor, ext (default is: enabled+visible)
' ext - all device information, gathered from multiple tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetDeviceList(Optional sWhich As String, Optional sSortOrder As String) As Result

  Dim rDevice As Result
  Dim sWhere, sAppend, sSQL As String

  sWhich = LCase(sWhich)

  ' If nobody specifies anything, we just return it all
  If sWhich = "" Then
    sWhich = "all+ext"
  Endif

  If Not InStr(sWhich, "all") Then

    If Not sWhich Then
      sWhich = "enabled+visible"
    Endif

    sAppend = ""
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "enabled"), "enabled IS TRUE", ""), sAppend)
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "disabled"), "enabled IS FALSE", ""), sAppend)

    If sAppend Then
      If sWhere Then
        sWhere &= " AND (" & sAppend & ")"
      Else
        sWhere &= "WHERE (" & sAppend & ")"
      Endif
    Endif

    sAppend = ""
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "visible"), "hide IS FALSE", ""), sAppend)
    sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "hidden"), "hide IS TRUE", ""), sAppend)

    If sAppend Then
      If sWhere Then
        sWhere &= " AND (" & sAppend & ")"
      Else
        sWhere &= "WHERE (" & sAppend & ")"
      Endif
    Endif

    If InStr(sWhich, "switch") Or InStr(sWhich, "dim") Or InStr(sWhich, "sensor") Then

      sAppend = ""
      sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "switch"), "switchable IS TRUE", ""), sAppend)
      sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "dim"), "dimable IS TRUE", ""), sAppend)
      sAppend = GetDeviceList_BuildSQL(IIf(InStr(sWhich, "sensor"), "(switchable IS FALSE AND dimable IS FALSE)", ""), sAppend)

      If sAppend Then
        If sWhere Then
          sWhere &= " AND (" & sAppend & ")"
        Else
          sWhere &= "WHERE (" & sAppend & ")"
        Endif
      Endif
    Endif
  Endif

  If InStr(sWhich, "ext") Then
    sSQL = "SELECT devices.*, locations.name as 'locationname', floors.name as 'floorplanname', floors.image as 'floorplanimage', devicetypes.name as 'devicetypename', plugins.name as 'interfacename' FROM devices LEFT OUTER JOIN locations ON devices.location_id = locations.id LEFT OUTER JOIN floors ON devices.floorplan_id = floors.floor LEFT JOIN devicetypes ON devices.devicetype_id = devicetypes.id Left JOIN plugins On devices.interface_id = plugins.id " & sWhere
  Else
    sSQL = "SELECT devices.*, locations.name as 'locationname' FROM devices LEFT OUTER JOIN locations on devices.location_id = locations.id " & sWhere
  Endif

  If sSortOrder Then
    sSQL &= " ORDER BY " & sSortOrder
  Endif
  Try rDevice = Main.hDB.Exec(sSQL)
  If Error Then
    WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif
  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices and return fields from the database joined with device values, depending which devices are required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetValues(Optional cOptions As Collection) As Result

  Dim rDevice As Result
  Dim sSQL, sWhere As String = ""
  Dim bFirst As Boolean
  Dim iElement As Integer

  If Not cOptions Then cOptions = New Collection

  If cOptions.Exist("device_id") Then
    sWhere = " WHERE device_id = " & cOptions["device_id"]
  Endif

  If cOptions.Exist("not_device_id") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    sWhere &= "id <> " & cOptions["not_device_id"]
  Endif

  If cOptions.Exist("log") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["log"] Then
      sWhere &= "log is TRUE"
    Else
      sWhere &= "log is FALSE"
    Endif
  Endif

  If cOptions.Exist("valuenum") Then
    If Not sWhere Then
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    bFirst = True
    For Each iElement In cOptions["valuenum"]
      If Not bFirst Then sWhere &= " OR " Else bFirst = False
      sWhere &= " valuenum = " & iElement
    Next
    sWhere &= ")"
  Endif

  sSQL &= "SELECT device_values.* From device_values " & sWhere

  If cOptions.Exist("sortOrder") Then
    sSQL &= " ORDER BY " & cOptions["sortOrder"]
  Endif

  Try rDevice = Main.hDB.Exec(sSQL)
  If Error Then
    WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif

  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device value log (history)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Get_Device_Values_Log(Optional cOptions As Collection) As Result

  Dim rResult As Result
  Dim sSQL, sWhere As String = ""

  ' We require at least a device id and valuenum to execute this query
  If Not cOptions Then Return rResult
  If Not cOptions.Exist("device_id") Then Return rResult
  If Not cOptions.Exist("valuenum") Then Return rResult

  sWhere = " WHERE device_values_log.device_id = " & cOptions["device_id"] & " AND device_values_log.valuenum = " & cOptions["valuenum"]

  If cOptions.Exist("timestamp") Then
    sWhere &= " AND device_values_log.lastchanged > '" & cOptions["timestamp"] & "'"
  Endif

  If cOptions.Exist("count") Then
    sWhere &= " ORDER BY device_values_log.id DESC LIMIT " & cOptions["count"]
  Endif

  sSQL = "SELECT device_values_log.id AS log_id, device_values_log.device_id, device_values_log.value, device_values_log.lastchanged, device_values.correction FROM device_values_log JOIN device_values ON device_values_log.device_id = device_values.device_id AND device_values_log.valuenum = device_values.valuenum " & sWhere

  If cOptions.Exist("count") Then
    sSQL = "SELECT * FROM (" & sSQL & ")sub ORDER BY log_id ASC"
  Else
    sSQL &= " ORDER BY device_values_log.id"
  Endif

  Try rResult = Main.hDB.Exec(sSQL)
  If Error Then
    WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif

  Return rResult

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devices and return fields from the database joined with device values, depending which devices are required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetDevicesAndValues(Optional cOptions As Collection) As Result

  Dim rDevice As Result
  Dim sSQL, sWhere, sElement As String = ""
  Dim bFirst As Boolean
  Dim iElement As Integer

  If Not cOptions Then cOptions = New Collection

  If cOptions.Exist("device_id") Then
    sWhere = " WHERE devices.id = " & cOptions["device_id"]
  Else If cOptions.Exist("not_device_id") Then
    sWhere = " WHERE devices.id <> " & cOptions["not_device_id"]
  Endif

  If cOptions.Exist("value_valuenum") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    sWhere &= "device_values.valuenum = " & cOptions["value_valuenum"]
  Endif

  If cOptions.Exist("enabled") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["enabled"] Then
      sWhere &= "enabled is TRUE"
    Else
      sWhere &= "enabled is FALSE"
    Endif
  Endif

  If cOptions.Exist("hide") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["hide"] Then
      sWhere &= "hide is TRUE"
    Else
      sWhere &= "hide is FALSE"
    Endif
  Endif

  If cOptions.Exist("log") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["log"] Then
      sWhere &= "device_values.log is TRUE"
    Else
      sWhere &= "device_values.log is FALSE"
    Endif
  Endif

  If cOptions.Exist("rrd") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["rrd"] Then
      sWhere &= "rrd is TRUE"
    Else
      sWhere &= "rrd is FALSE"
    Endif
  Endif

  If cOptions.Exist("graph") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    If cOptions["graph"] Then
      sWhere &= "graph is TRUE"
    Else
      sWhere &= "graph is FALSE"
    Endif
  Endif

  If cOptions.Exist("location_id") Then
    If Not sWhere Then
      sWhere = " WHERE "
    Else
      sWhere &= " AND "
    Endif
    sWhere &= "location_id = " & cOptions["location_id"]
  Endif

  If cOptions.Exist("switchable") Or cOptions.Exist("dimable") Then
    If Not sWhere Then
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    If cOptions.Exist("switchable") Then
      If cOptions["switchable"] Then
        sWhere &= "switchable is TRUE"
      Else
        sWhere &= "switchable is FALSE"
      Endif
    Endif

    If cOptions.Exist("switchable") And cOptions.Exist("dimable") Then
      If cOptions.Exist("able") Then
        sWhere &= " " & cOptions["able"] & " "
      Else
        sWhere &= " OR "
      Endif
    Else
      sWhere &= " "
    Endif

    If cOptions.Exist("dimable") Then
      If cOptions["dimable"] Then
        sWhere &= "dimable is TRUE"
      Else
        sWhere &= "dimable is FALSE"
      Endif
    Endif

    sWhere &= " )"
  Endif

  If cOptions.Exist("valuenum") Then
    If Not sWhere Then
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    bFirst = True
    For Each iElement In cOptions["valuenum"]
      If Not bFirst Then sWhere &= " OR " Else bFirst = False
      sWhere &= " device_values.valuenum = " & iElement
    Next
    sWhere &= ")"
  Endif

  If cOptions.Exist("groups") Then
    If Not sWhere Then
      sWhere = " WHERE ("
    Else
      sWhere &= " AND ("
    Endif

    bFirst = True
    For Each sElement In cOptions["groups"]
      If Not bFirst Then sWhere &= " AND " Else bFirst = False
      sWhere &= " groups LIKE '" & sElement & "'"
    Next
    sWhere &= ")"
  Endif

  sSQL = "SELECT devices.id AS device_id, devices.name AS device_name, devices.devicetype_id AS device_devicetype_id, devices.enabled AS device_enabled, " &
    "devices.location_id AS device_location_id, devices.hide AS device_hide, devices.interface_id AS device_interface_id, devices.address AS device_address,  " &
    "devices.dimable AS device_dimable, devices.switchable AS device_switchable, devices.extcode AS device_extcode, devices.onicon AS device_onicon, " &
    "devices.repeatstate AS device_repeatstate, devices.repeatperiod AS device_repeatperiod, devices.reset AS device_reset, " &
    "devices.resetperiod AS device_resetperiod, devices.resetvalue AS device_resetvalue, devices.comments AS device_comments, devices.batterystatus AS device_batterystatus, " & ""
    "devices.officon AS device_officon, devices.dimicon AS device_dimicon, devices.lastchanged AS device_lastchanged, devices.groups AS device_groups, " &
    "devices.floorplan_id AS device_floorplan_id, devices.instance_id AS device_instance_id, devices.x AS device_x, devices.y AS device_y, " &
    "devices.lastseen AS device_lastseen, devices.firstseen AS device_firstseen, devices.batterystatus AS device_batterystatus, devices.poll AS device_poll "

  If Not cOptions.Exist("inc_device_values") Then
    cOptions["inc_device_values"] = True
  Endif
  If cOptions["inc_device_values"] Then
    sSQL &= ", device_values.id AS device_value_id, device_values.valuenum AS device_value_valuenum, " &
      "device_values.value AS device_value_value, device_values.correction AS device_value_correction, device_values.units AS device_value_units, " &
      "device_values.lastseen AS device_value_lastseen, device_values.lastchanged AS device_value_lastchanged, " &
      "device_values.log AS device_value_log, device_values.logdisplay AS device_value_logdisplay, device_values.logspeak AS device_value_logspeak, " &
      "device_values.rrd AS device_value_rrd, device_values.graph AS device_value_graph, device_values.valuerrddsname AS device_value_valuerrddsname, " &
      "device_values.valuerrdtype AS device_values_valuerrdtype, device_values.valuerrdtype AS device_value_valuerrdtype, device_values.valuerrddsname AS device_value_valuerrddsname, " &
      "device_values.control AS device_value_control, device_values.feedback AS device_value_feedback, device_values.description AS device_value_description "
  Endif

  If cOptions["inc_device_values"] Then
    sSQL &= "FROM devices INNER JOIN device_values ON devices.id = device_values.device_id "
  Else
    sSQL &= "FROM devices "
  Endif

  sSQL &= sWhere

  If cOptions.Exist("sortOrder") Then
    sSQL &= " ORDER BY " & cOptions["sortOrder"]
  Endif

  Try rDevice = Main.hDB.Exec(sSQL)
  If Error Then
    WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif
  Return rDevice

End

Private Sub GetDeviceList_BuildSQL(sTemp As String, sAppend As String) As String

  If sTemp Then
    If sAppend Then
      Return sAppend & " OR " & sTemp
    Else
      Return sAppend & sTemp
    Endif
  Else
    Return sAppend 
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' retrieve all locations possible for the devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLocationList() As Result

  Dim rLocation As Result

  Try rLocation = Main.hDB.Exec("SELECT * FROM locations")

  If Error Then
    WriteLog("ERROR: '" & Error.Text & "' at'" & Error.Where & "'")
  Endif

  Return rLocation

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return disable openzwavepoll boolean for device with address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindOpenZWavePollForDevice(iInstance As Integer, sAddress As String) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT poll FROM devices WHERE address = &1 AND instance_id = &2 AND interface_id = 15", sAddress, iInstance)
  If Not Error And If rDevice.Available Then
    If rDevice.Count = 1 Then
      Return rDevice!poll
    Else
      Return False
    Endif
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all enabled devices, but not hiden devices. Return relevant fields only.
' Used for publishing MQTT device states at start-up
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAllEnabledNotHiddenDevicesAndValues() As Result

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT name, device_id, valuenum, value FROM device_values LEFT JOIN devices ON devices.id = device_values.device_id WHERE devices.enabled IS TRUE and devices.hide IS FALSE ORDER BY name, valuenum")

  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return if dimable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckIfDimable(iDeviceId As Integer) As Boolean

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT dimable FROM devices WHERE id = &1 AND enabled is TRUE", iDeviceId)
  If rDeviceFind.Available Then
    Return rDeviceFind!dimable
  Endif
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Rename device address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Rename(iDeviceId As Integer, sNewAddress As String) As Boolean

  Dim rDevice As Result

  '  Find device information, to check for duplicates
  rDevice = FindDeviceInfoForDevice(iDeviceId)

  If rDevice And If rDevice.Available Then

    ' Check for the new address, if we find one, don't continue
    If Find(rDevice!instance_id, sNewAddress, rDevice!interface_id, "DISABLEAUTOCREATE") Then
      WriteLog("ERROR: Can't rename device with id '" & iDeviceId & "', new address already exists. Old address '" & rDevice!address & "', new address '" & sNewAddress & "'.")
      Return False
    Endif

    Try Main.hDB.Exec("UPDATE devices SET address = &1 WHERE id = &2", sNewAddress, iDeviceId)
    If Error Then
      WriteLog("ERROR: Failed to rename device with id '" & iDeviceId & "'. Old address '" & rDevice!address & "', new address '" & sNewAddress & "'.")
      Return False
    Endif

    If Main.bDevicesDebug Then WriteDebugLog("Renamed device id '" & iDeviceId & "' from old address '" & rDevice!address & ", to new address '" & sNewAddress & "'")

    Return True
  Else
    Return False
  Endif 

End
