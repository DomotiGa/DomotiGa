' Gambas class file

' Description:
' FEditUsers.class

' Development Status:
' Adding, deleting and editing user information is working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bPasswordValidate As Boolean

' analyse pwd strength. Based on http://code.tutsplus.com/tutorials/build-a-simple-password-strength-checker--net-7565
Private iMinPasswordLength As Integer
Private iBaseScore As Integer
Private iScore As Integer
 
Private iNumExcess As Integer
Private iNumUpper As Integer
Private iNumNumbers As Integer
Private iNumSymbols As Integer
Private iBonusExcess As Integer
Private iBonusUpper As Integer
Private iBonusNumbers As Integer
Private iBonusSymbols As Integer
Private iBonusCombo As Integer
Private iScoreMin As Integer

Public iUsersID As Integer
Public sUsersname As String
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' allows users to maintain their own private data
  If Main.bUserisAdmin Then
    dsUsers.Filter = ""
    dcTFAEnabled.Enabled = True
  Else
    dsUsers.Filter = Subst("username = '&1'", Main.sActiveUser)
    dcUserName.Enabled = False
    dcAdmin.Enabled = False
    Me.Title = "Edit User Account"
    '' ordinary user may not change tfa settings
    dcTFAEnabled.Enabled = False
  Endif

  With dbUsers.View
    .Columns[0].Text = ("Username")
    .Columns[0].Width = 80
    .Columns[1].Text = ("Full Name")
    .Columns[1].Width = 110
    .Columns[2].Text = ("Admin")
    .Columns[2].Width = 50
    .Columns[3].Text = ("Last Login")
    .Columns[3].Width = 140
    .Columns[4].Text = ("E-mail")
    .Columns[4].Width = 140
    .Columns[5].Width = 10
    .Columns[5].Text = ("TFA")
    .Columns[6].Width = 16
    .Columns[6].Text = ("TFA Secret")
    .Columns[7].Text = ("Comments")

    
  End With

  'next line: hide pwd line with "*"
  'hTextBoxPassword.Password = True
  'hTextBoxLastLogin.ReadOnly = True
  ' gray out dcPassword

  dcPassword.enabled = False
  btnPWDEqual.Visible = False
  txtWarningPWD.Visible = False

  'init pwd strength
  iMinPasswordLength = 8 ' give minimal pwd length
  iScoreMin = 80
  iBaseScore = 50
  iScore = 0
  iNumExcess = 0
  iNumUpper = 0
  iNumNumbers = 0
  iNumSymbols = 0
  iBonusExcess = 3
  iBonusUpper = 4
  iBonusNumbers = 5
  iBonusSymbols = 5
  iBonusCombo = 0

'' set tfa button text


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' The 'admin' field is stored in Integer instead of Boolean (shortint), because of 
' a possible bug in Gambas with databrowser/control. We need to overrule the visible
' value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub dbUsers_Data(Row As Integer, Column As Integer, Value As Variant)

  Row = Row

  If Column = 2 Then
    dbUsers.Data.Text = IIf(Value = 0, ("No"), ("Yes"))
    dbUsers.Data.Alignment = Align.Center
  Endif
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub dsUsers_Change()

  ' Don't allow username change, if it is already saved in the DB
  dcUserName.Enabled = Not dcUserName.Value

  ' Reset the textboxes if we change record
  txtPassword.Text = ""
  txtPasswordRetype.Text = ""

  txtPasswordRetype.Enabled = False
  btnPWDStrength.Visible = False
  btnPWDEqual.Visible = False

  ' Put dcAdmin value into btnAdmin
  If dcAdmin.Value Then
    chkAdmin.Value = IIf(dcAdmin.Value = 0, False, True)
  Else
    chkAdmin.Value = False
  Endif
  
 '' initialize btTFA
 init_btTFA(dcTFAEnabled.Value, dcTFASecret.Value)

End

Public Sub init_btTFA(TFAEnabled As Boolean, Optional TFASecret As String)
  
  ''set btTFA button settings
   If TFAEnabled And TFASecret = "" Then
    btTFA.Text = "Setup TFA"
    btTFA.Tooltip = "Setup TFA"
    btTFA.Enabled = True
  Else If Not TFAEnabled Then
    btTFA.Text = ""
    btTFA.Tooltip = "No function. Enable TFA first."
    btTFA.Enabled = False
  Else If Len(TFASecret) = 16 Then
    btTFA.Text = "Delete secret"
    btTFA.Enabled = True
  Else ''should never happen  
    btTFA.Text = "error"
  Endif
  
End




'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub dcAdmin_Validate(Value As Variant)

  Value = Value

  If chkAdmin.Value Then
    dcAdmin.Value = -1
  Else
    dcAdmin.Value = 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub dcUserName_Validate(Value As Variant)

  Value = Value

  If Len(dcUserName.Value) = 0 Then
    Balloon(("Username is a mandatory field"), dcUserName)
    Stop Event
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub dcPassword_Validate(Value As Variant)

  Value = Value

  ' Don't do any checks if this is a second not-intended call
  If $bPasswordValidate Then Return

  txtWarningPWD.Visible = False

  ' If we have an existing password and both password/retype are blank, then allow saving
  If dcPassword.Value And If Not txtPassword.Text And If Not txtPasswordRetype.Text Then Return

 ' If the the original password is empty, we expect at least something in the password/retype fields
  If Not dcPassword.Value Then
    If Not txtPassword.Text Then
      Balloon(("Password is mandatory"), txtPassword)
      Stop Event
      Return
    Else If Not txtPasswordRetype.Text Then
      Balloon(("Retype password is mandatory"), txtPasswordRetype)
      Stop Event
      Return
    Endif
  Endif

  ' The password/retype *need* to be identical
  If txtPassword.Text <> txtPasswordRetype.Text Then
    Balloon(("Password and retype password are not equal"), txtPassword)
    Stop Event
    Return
  Endif

  If Not btnPWDStrength.Visible Then 
    Balloon(("Password is not ok in length and/or strengh"), txtPassword)
    txtWarningPWD.Visible = True
    Stop Event
    Return
  Endif

  ' need to check if user has admin power or user's name is same as dcUserName.Value
  If Comp(Main.sActiveUser, dcUserName.Value) <> 0 Then
    ' if you want to change pwd for *another* user, you must be admin
    If Not Main.bUserisAdmin Then 
      Balloon("You need admin right to change somebody else their password", txtPassword)
      Stop Event
      Return
    Endif
  Endif

  $bPasswordValidate = True
  dcPassword.Value = Util.PasswordEncrypt(txtPassword.Text)
  $bPasswordValidate = False

  ' make cookie empthy if you change pwd for another user and username is filled in
  If Comp(Main.sActiveUser, dcUserName.Value) <> 0 And dcUserName.Value Then
    Message(("User '") & dcUserName.Value & ("' has to reset other private info (email password, etc.) when logging in."))
    Try Main.hDB.Exec("UPDATE users SET cookie = '' WHERE username = &1", dcUserName.Value)
    'compute crypt key cookie if you change pwd for logged in user
  Else If Len(Main.sActiveUserCookie) > 0 Then ' put old cookie with new crypt key in DB
    Main.hDB.Exec("UPDATE users SET cookie = AES_ENCRYPT(&1,&2) WHERE username = &3", Main.sActiveUserCookie, Right(dcPassword.Value, 8), dcUserName.Value)
  Endif

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub txtPassword_Change()

 ' set a temp linear pwd score as long as min pwd length is not reached
 iScore = Len(txtPassword.Text) * 2
 iMinPasswordLength = Val(txtBxMinPwsLength.Text)
 iScoreMin = Val(TxtBxMinPWDStrength.Text)
  'validate pwd complexity
  If Len(txtPassword.Text) >= iMinPasswordLength Then
    'calc pwd strength score
    AnalysePasswordStrength(txtPassword.Text)
    ' retype of pwd is not possible as complexity rule is not matched
    If iScore >= iScoreMin Then
      txtPasswordRetype.Enabled = True
      ' show ok button for complexity of pwd
      btnPWDStrength.Visible = True
    Else
      txtPasswordRetype.Enabled = False
      ' hide ok button for complexity of pwd: min value not met.
      btnPWDStrength.Visible = False
    Endif
  Else ' retype of pwd is not possible. Complexity rules are nok
    txtPasswordRetype.Enabled = False
    ' hide ok button for complexity of pwd: min value not met.
    btnPWDStrength.Visible = False
  Endif
  'with < 50 weak; < 75 average < 100 strong and > 100 Secure
  'Set Strength meter
  PwdStrength.Value = iScore / 100
  'Set Strength meter color - not working yet
  If iScore < 20 Then 
    PwdStrength.Foreground = Color.Red
    'PwdStrength.Value = iScore / 134
  Else
    PwdStrength.Foreground = Color.Yellow
  Endif

  ' Trigger the dcPassword validation after 'something' is entered in this box
  dcPassword.Value = dcPassword.Value

End

Public Sub txtPasswordRetype_Change()

  btnPWDEqual.Visible = (txtPassword.Text = txtPasswordRetype.Text)

End

Private Sub AnalysePasswordStrength(sPwdText As String)

  Dim iBonusFlatLower As Integer = 0
  Dim iBonusFlatNumber As Integer = 0

  Dim i As Integer
  Dim sChar As String

  'init
  iBaseScore = 50
  iScore = 0
  iNumExcess = 0
  iNumUpper = 0
  iNumNumbers = 0
  iNumSymbols = 0
  iBonusCombo = 0
  
  ' analyse pwd
  For i = 1 To Len(sPwdText)
    ' take char i out of pwd
    sChar = Mid(sPwdText, i, 1)
    'starting counting the type Of char: upper, number, special char
    If Regexp.Match(sChar, "[A-Z]") Then iNumUpper = iNumUpper + 1
    If Regexp.Match(sChar, "[0-9]") Then iNumNumbers = iNumNumbers + 1
    If Regexp.Match(sChar, "([!, @, #, $, %, ^, &, *, Print , _, ~])") Then iNumSymbols = iNumSymbols + 1
  Next 'analyse pwd char by char
  
  ' enumerate exra length of pwd
  iNumExcess = Len(sPwdText) - iMinPasswordLength
  ' combo bonus: 3 types of 2 types of char
  If iNumUpper > 0 And iNumNumbers > 0 And iNumSymbols > 0
    iBonusCombo = 25 
  Else If (iNumUpper > 0 And iNumNumbers > 0) Or (iNumNumbers > 0 And iNumSymbols > 0) Or (iNumUpper > 0 And iNumSymbols > 0) Then
    iBonusCombo = 15
  Endif
  ' penalty only lower char
  If RegExp.Match(sPwdText, "[a-z]+") Then iBonusFlatLower = -15
  ' penalty only numbers
  If RegExp.Match(sPwdText, "[0-9]+") Then iBonusFlatNumber = -35

  'calculate iScore = complexity of pwd
  iScore = iBaseScore + (iNumExcess * iBonusExcess) + (iNumUpper * iBonusUpper) + (iNumNumbers * iBonusNumbers) + (iNumSymbols * iBonusSymbols) + iBonusCombo + iBonusFlatLower + iBonusFlatNumber

End

'--------------------------------
'set bTFA button settings if user enable/disable TFA
'--------------------------------
Public Sub dcTFAEnabled_Click()

  init_btTFA(dcTFAEnabled.Value, dcTFASecret.Value)

End


'--------------------------------
'setup/initialize or delte TFA when bTFA button is pushed
'--------------------------------
Public Sub btTFA_Click()

  ' check is username is filled in.
  If Len(dcUserName.Value) = 0 Then
    Balloon(("Fill in username first"), dcUserName)
  Else
    '' change btTFA.text and take action
    Select btTFA.Text
      ' case text bTFA is "setup"
      Case "Setup TFA"
        ' open setup screen
        ''iUsersID = dcID.Value
        sUsersName = dcUserName.Value
        If (FTFASetup.Showmodal()) Then
          btTFA.Text = "Delete secret"
        Else
          ''No setup of tfa completed succesfully.
      Endif
      ' case text bTA is "delete secret"
      Case "Delete secret"
        DeleteTFASecret(dcUserName.Value)
      Case Else
        ''error''
    End Select
  Endif
End
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Remove Two Factor Authentication secret for given user, return errors.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub DeleteTFASecret(sUsername As String)
  
  Main.hDB.Exec("UPDATE users SET tfasecret = null WHERE username = &1", sUsername)
  ' update text of button
  btTFA.Text = "Setup TFA"
End

