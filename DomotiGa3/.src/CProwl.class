' Gambas class file

' Description:
' CProwl.class
' Contains code for sending Prowl messages

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Prowl"
Public PluginFriendlyName As String = "Prowl"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Prowl] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Priority and Sound definitions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Priority_List As String[] = [("Normal (0)"), ("Very Low (-2)"), ("Low (-1)"), ("High (1)"), ("Emergency(2)")]

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $bDebug As Boolean
Private $sApiKey As String
Private $sApplication As String
Private $sEvent As String

Public hProwlMessage As HttpClient
Public cProwlData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $bDebug = cPl.Settings["debug"]
  $sApiKey = cPl.Settings["apikey"]
  $sApplication = cPl.Settings["application"]
  $sEvent = cPl.Settings["event"]

  ' Initialize 
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()



End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse Prowl XML Response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseProwlXML(sXML As String) As String[]

  Dim XmlR As New XmlReader
  Dim bProwl As Boolean
  Dim sOk, sCode, sRemaining, sResetDate, sErrorMessage, sPrevTag As String
  Dim aResponse As New String[5]

  ' aResponse[0] = success, error or unknown
  ' aResponse[1] = code
  ' aResponse[2] = remaining
  ' aResponse[3] = resetdate
  ' aResponse[4] = errormessage

  XmlR = New XmlReader
  Try XmlR.FromString(sXML)
  If Error Then
    aResponse[0] = "error"
    aResponse[4] = "Cannot parsing XML"
    Return aResponse
  Else
    ' First Node.Name = prowl
    ' Second Node.Name = success or error

    Do While Not XmlR.Eof

      XmlR.Read()
      If XmlR.Node.Name = "prowl" Then bProwl = True
      If bProwl Then
        If XmlR.Node.Name = "success" Or XmlR.Node.Name = "error" Then sOk = XmlR.Node.Name
      Endif

      If sPrevTag = "error" And XmlR.Node.Name = "#text" Then sErrorMessage = XmlR.Node.Value
      sPrevTag = XmlR.Node.Name

      If XmlR.Node.Type = XmlReaderNodeType.Element Then
        If sOk Then
          If XmlR.Node.Attributes.count > 0 Then
            For Each XmlR.Node.Attributes
              If XmlR.Node.Name = "code" Then sCode = XmlR.Node.Value
              If XmlR.Node.Name = "remaining" Then sRemaining = XmlR.Node.Value
              If XmlR.Node.Name = "resetdate" Then sResetDate = XmlR.Node.Value
            Next
          Endif
        Endif
      Endif
    Loop
  Endif

  If sOk Then
    aResponse[0] = sOk
  Else
    aResponse[0] = "unknown"
  Endif
  aResponse[1] = sCode
  aResponse[2] = sRemaining
  aResponse[3] = sResetDate
  aResponse[4] = sErrorMessage
  Return aResponse

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Validate Prowl ApiKey
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValidateProwlApiKey(sApiKey As String, bDebug As Boolean) As String

  Dim hProwlValidate As HttpClient
  Dim sUrl As String = "https://api.prowlapp.com/publicapi/verify?"
  Dim sBuffer As String
  Dim aResponse As String[]

  sUrl &= "apikey=" & URL.Encode(sApiKey)

  hProwlValidate = New HttpClient As "hProwlValidate"
  hProwlValidate.URL = sUrl
  hProwlValidate.TimeOut = 8
  hProwlValidate.Async = False
  hProwlValidate.Get

  If hProwlValidate.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If bDebug Then Main.WriteDebugLog(LogLabel & "Error validating API key=" & sApiKey & ", Code=" & hProwlValidate.Status & " HTTP=" & hProwlValidate.Code)
    Return "Failed, Code=" & hProwlValidate.Status & ", HTTP=" & hProwlValidate.Code
  Else
    ' success or error - read the data
    If Lof(hProwlValidate) Then sBuffer = Read #hProwlValidate, Lof(hProwlValidate)

    aResponse = ParseProwlXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If bDebug Then Main.WriteDebugLog(LogLabel & "Successfully validated API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hProwlValidate.Code
        If bDebug Then Main.WriteDebugLog(LogLabel & "Failed to validated API key=" & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
        Return False
      Default
        If bDebug Then Main.WriteDebugLog(LogLabel & "Unknown error validating API key=" & sApiKey & ", HttpCode=" & hProwlValidate.Status & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hProwlValidate.Code
    End Select

  Endif

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Prowl Test message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostProwlTest(sApiKey As String, sApplication As String, sEvent As String, sDescription As String, bDebug As Boolean) As String

  Dim hProwlMessageTest As HttpClient
  Dim sUrl As String = "https://api.prowlapp.com/publicapi/add?"
  Dim sBuffer As String
  Dim aResponse As String[]

  If sApiKey = "" Then
    Return "ERROR: No Prowl API Key supplied"
  Endif
  If sApplication = "" Then
    Return "ERROR: No Prowl application name supplied"
  Endif
  If sEvent = "" Then
    Return "ERROR: No Prowl event name supplied"
  Endif

  sUrl &= "apikey=" & URL.Encode(sApiKey) & "&" & "application=" & URL.Encode(sApplication) & "&" & "event=" & URL.Encode(sEvent) & "&" & "description=" & URL.Encode(sDescription)

  hProwlMessageTest = New HttpClient As "hProwlMessageTest"
  hProwlMessageTest.URL = sUrl
  hProwlMessageTest.TimeOut = 8
  hProwlMessageTest.Async = False
  hProwlMessageTest.Post("", "")

  If hProwlMessageTest.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Prowl message. API key=" & sApiKey & ", Code=" & hProwlMessageTest.Status & ", HTTP=" & hProwlMessageTest.Code)
    Return "Failed, Code=" & hProwlMessageTest.Status & ", HTTP=" & hProwlMessageTest.Code
  Else
    ' success or error - read the data
    If Lof(hProwlMessageTest) Then sBuffer = Read #hProwlMessageTest, Lof(hProwlMessageTest)

    aResponse = ParseProwlXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If bDebug Then Main.WriteDebugLog(LogLabel & "Successfully send message. API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hProwlMessageTest.Code
        If bDebug Then Main.WriteDebugLog(LogLabel & "Failed to send message. API key=" & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
      Default
        If bDebug Then Main.WriteDebugLog(LogLabel & "Unknown error sending message. API key=" & sApiKey & ", HttpCode=" & hProwlMessageTest.Code & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hProwlMessageTest.Code
    End Select

  Endif

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Prowl message
' The Application/Event can be left blank, then it takes the default
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostProwl(sApplication As String, sEvent As String, sDescription As String, sPriority As String) As Boolean

  Dim sUrl As String = "https://api.prowlapp.com/publicapi/add?"
  Dim Bucle As Byte

  If Not $bEnabled Then
    Main.WriteDebugLog(LogLabel & PluginFriendlyName & " is disabled")
    Return 
  Endif

  ' Find free tag, between 1 and 99. Normally we should never go over 1 thread
  For Bucle = 1 To 100
    If Not cProwlData.Exist(Bucle) Then Break
  Next

  If Bucle = 100 Then
    Main.WriteLog(LogLabel & "ERROR: Prowl Message Queue full")
    Return False
  Endif

  If sApplication = "" Then sApplication = $sApplication
  If sEvent = "" Then sEvent = $sEvent
  sUrl &= "apikey=" & URL.Encode($sApiKey) & "&" & "application=" & URL.Encode(sApplication) & "&" & "event=" & URL.Encode(sEvent) & "&" & "description=" & URL.Encode(sDescription) & IIf(sPriority, "&priority=" & URL.Encode(sPriority), "")

  hProwlMessage = New HttpClient As "hProwlMessage"
  hProwlMessage.URL = sUrl
  hProwlMessage.TimeOut = 8
  hProwlMessage.Async = True
  hProwlMessage.Tag = Bucle
  hProwlMessage.Post("", "")

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Posting Prowl message (#" & Bucle & ") " & sUrl)
  cProwlData.Add("", Bucle)

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read the data send by Prowl, this can be called multiple times
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hProwlMessage_Read()

  Dim sData, sBuffer As String

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cProwlData[Last.Tag] Then
    sData = cProwlData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif

  cProwlData[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' End of the Prowl response found, parse it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hProwlMessage_Finished()

  Dim aResponse As New String[5]

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Last.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Prowl message (#" & Last.Tag & "). API key=" & $sApiKey & ", Code=" & Last.Status & ", HTTP=" & Last.Code)
  Else
    ' success or error - read the data
    aResponse = ParseProwlXML(cProwlData[Last.Tag])
    Select Case aResponse[0]
      Case "success"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Successfully send message (#" & Last.Tag & "). API key=" & $sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = Last.Code
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Failed to send message (#" & Last.Tag & "). API key=" & $sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
      Default
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown error sending message (#" & Last.Tag & "). API key=" & $sApiKey & ", HttpCode=" & Last.Code & ", XML=" & cProwlData[Last.Tag])
    End Select

  Endif

Finally

  cProwlData.Remove(Last.Tag)
  Last.Close

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text & " when sending Prowl message")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Error Raised for the Prowl message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hProwlMessage_Error()

  ' Return if it is sync request
  If Last.Async = False Then Return

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Prowl message: " & Last.Status)

  Try cProwlData.Remove(Last.Tag)
  Try Last.Close

End
