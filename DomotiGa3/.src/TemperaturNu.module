' Gambas module file

' Description:
' TemperaturNu.module
' Support for Temperatur.nu related functions.

' Development Status:
' Development just started.

' Links:
' http://www.temperatur.nu/

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Daniel Lindmark in 2010.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "TemperaturNu"
Public PluginType As Integer = Plugin.Type_Module
Public PluginFriendlyName As String = "TemperaturNu"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Daniel Lindmark"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[TemperaturNu] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sCity As String
Private $sId As Integer
Private $iPushTime As Integer
Private $bTemperaturNuDebug As Boolean
Private $iDeviceId As Integer
Private $sDeviceValue As String

Public hPost As New HttpClient As "hPost"
Public tTemperaturNu As Timer
Private sDownloadBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance 
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sCity = cPl.Settings["city"]
  $sId = cPl.Settings["apikey"]
  $iPushTime = cPl.Settings["pushtime"]
  $bTemperaturNuDebug = cPl.Settings["debug"]
  $iDeviceId = cPl.Settings["deviceid"]
  $sDeviceValue = cPl.Settings["devicevalue"]

  ' Initialize 

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()



End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for TemperaturNu
  tTemperaturNu = New Timer As "tTemperaturNu"
  tTemperaturNu.Delay = Main.iTemperaturNuPushTime * 1000 * 60 ' multiply for minutes
  tTemperaturNu.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tTemperaturNu_Timer()

  UploadTemperaturNuData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create url string and upload it to the service
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UploadTemperaturNuData()

  Dim sContent As String

  sDownloadBuffer = ""

  ' if we are already uploading return
  If hPost.Status > 0 Then
    Main.WriteLog(LogLabel & "I'm already uploading data to Temperatur.nu, skipping.")
    Return
  Endif

  ' create string
  sContent = CreateTemperaturNuData()

  ' use httpclient to post data to service
  hPost.URL = "http://www.temperatur.nu/report/puttemp.php" & sContent
  hPost.TimeOut = 10
  hPost.Async = True
  hPost.Get()

  If Main.bTemperaturNuDebug Then Main.WriteDebugLog(LogLabel & hPost.URL)

End

Public Sub CreateTemperaturNuData() As String

  Dim sValue As String = Devices.GetCurrentValueForDevice(Main.iTemperaturNuDeviceId, Main.sTemperaturNuDeviceValue)

  Return "?s=" & Main.sTemperaturNuCity & "&id=" & Main.sTemperaturNuId & "&t=" & sValue

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch error
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Error()

  Main.WriteDebugLog(LogLabel & "Temperature data post error.")

End

Public Sub hPost_Read()

  Dim sBuffer As String

  sBuffer = Read #Last, Lof(Last)
  sDownloadBuffer &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check http return code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Finished()

  Dim iCount As Integer

  ' select on http result code and display message
  Select hPost.Code
    Case 200
      Main.WriteLog(LogLabel & "Uploaded data to Temperatur.nu. Response from server: " & sDownloadBuffer)
    Case 401
      Main.WriteLog(LogLabel & "Error authenticating while uploading data to Temperatur.nu!")
    Case 404
      Main.WriteLog(LogLabel & "Error page not found while uploading data to Temperatur.nu!")
    Case Else
      Main.WriteLog(LogLabel & "Unknown error occured while uploading data to Temperatur.nu! Response from server: " & sDownloadBuffer)
  End Select

  ' if debug is on print all http headers
  If Not Main.bTemperaturNuDebug Then Return
  For iCount = 0 To hPost.Headers.Count - 1
    Main.WriteDebugLog(LogLabel & Left(hPost.Headers[iCount], Len(hPost.Headers[iCount]) - 1))
  Next

End
