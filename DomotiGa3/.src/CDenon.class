' Gambas class file

' Description:
' CDenon.class
' Support for Denon receiver control.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Daniel Keller in 2010.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Denon"
Public PluginFriendlyName As String = "Denon Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Denon] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bDebug As Boolean
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String

Public hMySocket As CSocket
Public hMySerial As CSerialPort

Private $sMsgData As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry
  
  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = gb.String
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one - but store the retry counter between new instances
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = gb.String
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' Try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close

  ' Stop possible timers
  StopTimers()

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop all possible timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")
  StopTimers()

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)
  StopTimers()

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim iPos As Integer

  iPos = InStr(vVar, gb.Cr) ' CR=13
  If iPos Then
    $sMsgData &= Mid(vVar, 1, iPos - 1)
    If Len($sMsgData) > 1 Then ProcessReceivedPacket($sMsgData)
    $sMsgData = Mid(vVar, iPos + 1)
  Else
    $sMsgData &= vVar
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  ' send some commands to get the states of the device and write them back in variable.
  SendCmd("MV?")
  Sleep 0.5
  SendCmd("SV?")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data back from MySensors gateway and parse it when it's complete
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim iPos As Integer

  iPos = InStr(vVar, gb.Cr) ' CR=13
  If iPos Then
    $sMsgData &= Mid(vVar, 1, iPos - 1)
    If Len($sMsgData) > 1 Then ProcessReceivedPacket($sMsgData)
    $sMsgData = Mid(vVar, iPos + 1)
  Else
    $sMsgData &= vVar
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCmd(sCmd As String)

  If $bDebug Then WriteDebugLog("Sending '" & sCmd & "' to Receiver.")

  ' Append Carriage-Return
  sCmd &= gb.Cr

  If InStr($sInterface, "tcp") Then
    ' send the message to the tcp stream
    hMySocket.Write(sCmd)
  Else
    ' send the message to the serial port
    hMySerial.Write(sCmd)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sValue)
    Case "on"
      SendCmd("PWON")
    Case "off"
      SendCmd("PWSTANDBY")
    Case Else
      If $bDebug Then WriteDebugLog("Unsupported command received: " & sValue)
  End Select

End

Public Sub SetCommand(sCmd As Variant, sValue As Variant, sAddress As String)

  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "power"
      ' ON or OFF
      If UCase(sValue) = "OFF" Then
        svalue = "STANDBY"
      Endif
      SendCmd("PW" & UCase(sValue))
    Case "z2power"
      ' ON or OFF
      SendCmd("Z2" & UCase(sValue))
    Case "mainpower"
      ' ON or OFF
      SendCmd("ZM" & UCase(sValue))
    Case "volume"
      ' 18(db) until -80 (db), up, down,
      ' maybe later on also +/- number (let's say to increase +5)
      Try sValue = Val(sValue)
      If TypeOf(sValue) = gb.Integer Then
        sValue = sValue + 80
      Else
        If UCase(sValue) = "OFF" Then sValue = 99
      Endif
      SendCmd("MV" & sValue)
    Case "z2volume"
      ' 18(db) until -80 (db), up, down,
      ' maybe later on also +/- number (let's say to increase +5)
      Try sValue = Val(sValue)
      If TypeOf(sValue) = gb.Integer Then
        sValue = sValue + 80
      Else
        If UCase(sValue) = "OFF" Then sValue = 99
      Endif
      SendCmd("Z2" & sValue)
    Case "mute"
      ' ON or OFF
      SendCmd("MU" & UCase(sValue))
    Case "z2mute"
      ' ON or OFF
      SendCmd("Z2MU" & UCase(sValue))
    Case "input"
      ' phone, cd, tuner, dvd, vdp, tv, dbs, vcr-1, vcr-2, vcr-3, v.aux, cdr/tape
      SendCmd("SI" & UCase(sValue))
    Case "z2input"
      ' phone, cd, tuner, dvd, vdp, tv, dbs, vcr-1, vcr-2, vcr-3, v.aux
      SendCmd("Z2" & UCase(sValue))
    Case "cli"
      ' send any correct command to receiver
      SendCmd(UCase(sValue))
    Case Else
      If $bDebug Then WriteDebugLog("Unsupported command received: " & sCmd & " " & sValue)
  End Select
  ' TODO: has to be completed with others and zone 2

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' GetCommand, used by AVControl/FMusic
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCommand(sCmd As String, sAddress As String)

  sCmd = sCmd
  sAddress = sAddress

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sStr As String)

  Dim sMaincat, sZonecat, sItem, sValue, sTemp As String

  If $bDebug Then WriteDebugLog("Received: " & sStr)

  sMaincat = Left(sStr, 2)
  sZonecat = Mid(sStr, 3)

  Select Case sMaincat

    Case "PW"
      ' main power
      sItem = "Power"
      If sStr = "PWON" Then sValue = "On"
      If sStr = "PWSTANDBY" Then sValue = "Off"
      DenonSetValue(sItem, sValue)

    Case "MV"
      ' master volume
      sTemp = Mid(sStr, 3)
      If Mid(sStr, 3, 3) = "MAX"
        'do nothing
      Else
        sItem = "Volume"
        If sTemp = "99"
          sValue = ""
        Else
          If Len(sTemp) = 1 Then sTemp = sTemp & "00"
          If Len(sTemp) = 2 Then sTemp = sTemp & "0"
          sValue = (Val(sTemp) / 10) - 80
          DenonSetValue(sItem, sValue)
        Endif
      Endif

    Case "MU"
      ' main mute
      sItem = "MainMute"
      If sStr = "MUON" Then sValue = "On"
      If sStr = "MUOFF" Then sValue = "Off"
      DenonSetValue(sItem, sValue)

    Case "ZM"
      ' power main zone
      sItem = "MainZonePower"
      If sStr = "ZMON" Then sValue = "On"
      If sStr = "ZMOFF" Then sValue = "Off"
      DenonSetValue(sItem, sValue)

    Case "SI"
      ' source input
      sItem = "MainInput"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    Case "SV"
      ' video input
      sItem = "VideoInput"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    Case "MS"
      sItem = "SurroundMode"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    Case "DC"
      sItem = "Digital Input Mode"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    Case "SD"
      sItem = "Input Mode"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    Case "SR"
      sItem = "Record Selection"
      sValue = Left(sStr, 2)
      DenonSetValue(sItem, sValue)

    Case "Z2"
      ' zone2 integration

      Select Case sZonecat

        Case "PHONO"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "CD"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "TUNER"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "DVD"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "HDP"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "TV/CBL"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "SAT"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "VCR"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "V.AUX"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "SOURCE"
          sItem = "Zone2Input"
          sValue = Left(sStr, 2)
          DenonSetValue(sItem, sValue)

        Case "MUON"
          sItem = "Zone2Mute"
          DenonSetValue(sItem, "On")

        Case "MUOFF"
          sItem = "Zone2Mute"
          DenonSetValue(sItem, "Off")

        Case "ON"
          sItem = "Zone2Power"
          DenonSetValue(sItem, "On")

        Case "OFF"
          sItem = "Zone2Power"
          DenonSetValue(sItem, "Off")
      End Select

      If IsNull(Val(sZonecat)) Then
        ' not a number, do nothing
      Else
        sTemp = Mid(sStr, 3)
        sItem = "Zone2Volume"
        If sTemp = "99"
          sValue = ""
        Else
          If Len(sTemp) = 1 Then sTemp = sTemp & "00"
          If Len(sTemp) = 2 Then sTemp = sTemp & "0"
          sValue = (Val(sTemp) / 10) - 80
          DenonSetValue(sItem, sValue)
        Endif
      Endif

    Case "Z3"
      ' not implemented yet

    Case Else
      If $bDebug Then WriteDebugLog("Not implemented yet!")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DenonSetValue(sItem As String, vValue As Variant)

  Main.SetGlobalVar("Denon_" & sItem, vValue)
  If $bDebug Then WriteDebugLog("Received Item: " & sItem & " Value: " & vValue)

End
