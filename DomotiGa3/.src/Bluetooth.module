' Gambas module file

' Description:
' Bluetooth.module
' Support for Bluetooth proximity, see if a user is around by checking his bluetooth device(s).

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public tBluetooth As Timer
Private sScan As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer for polling
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Run()

  ' start poll timer for bluetooth
  tBluetooth = New Timer As "tBluetooth"
  tBluetooth.Delay = Main.iBluetoothPollTime * 1000 ' multiply for seconds
  tBluetooth.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start one of two scan types depending on Threshold setting
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tBluetooth_Timer()

  If Main.iBluetoothThreshold = 255 Then
    ScanBluetooth()
  Else
    CheckBluetooth()
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan for BT devices, don't calculate RSSI
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckBluetooth()

  Dim rResult As Result
  Dim iDeviceId, iRSSI As Integer
  Dim sRSSI, sProx As String

  ' get all enabled devices of type blutooth
  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Bluetooth Dongle"))
  If rResult.Available Then
    If rResult.Count >= 1 Then
      ' check each device
      For Each rResult
        iDeviceId = rResult!id
        If Main.bBluetoothDebug Then Main.WriteDebugLog(("[Bluetooth] Checking device named '") & rResult!name & ("' with address '") & rResult!address & "'.")
        ' check device for signal strenght
        sRSSI = GetRSSI(rResult!address)
        If Main.bBluetoothDebug Then Main.WriteDebugLog("[Bluetooth] " & Replace(sRSSI, gb.NewLine, ""))
        If TypeOf(Val(sRSSI)) = gb.Integer Then
          iRSSI = TypeOf(Val(sRSSI)) = gb.Integer 
          sProx = IIf(iRSSI > Main.iBluetoothThreshold, "Near", "Far")
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, sProx, Val(sRSSI), "", "")
          If Main.bBluetoothDebug Then Main.WriteDebugLog(("[Bluetooth] Got RSSI value ") & iRSSI)
        Else
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, ("Away"), "", "", "")
        Endif
      Next
    Else
      Main.WriteLog(("Bluetooth: No Bluetooth device(s) found in device table!"))
    End If
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan bluetooth network
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function ScanBluetooth() As String

  If Main.bBluetoothDebug Then
    Main.WriteDebugLog(("[Bluetooth] Starting device scan."))
    Main.WriteDebugLog(("[Bluetooth] 'hcitool -i " & Main.sBluetoothDevice & " scan'"))
  Endif
  Exec ["hcitool", "-i", Main.sBluetoothDevice, "scan"] For Read As "ScanBT"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ScanBT_Read()

  Dim sBuffer As String

  Try sBuffer = Read #Last, -256
  sScan &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan bluetooth has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ScanBT_Kill()

  Dim sLine As String
  Dim aScan As String[]
  Dim iDeviceId As Integer
  Dim rResult As Result

  If Len(sScan) > 13 Then
    rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Bluetooth Dongle"))
    If rResult.Available Then
      If rResult.Count >= 1 Then
        ' check each device
        For Each rResult
          If Main.bBluetoothDebug Then Main.WriteDebugLog(("[Bluetooth] Checking device named '") & rResult!name & ("' with address '") & rResult!address & "'.")
          If InStr(sScan, rResult!address) Then
            iDeviceId = Devices.Find(rResult!address, Devices.FindInterface("Bluetooth Dongle"), "BLUETOOTH")
            If iDeviceId Then Devices.ValueUpdate(rResult!id, "Home", "", "", "")
          Else
            iDeviceId = Devices.Find(rResult!address, Devices.FindInterface("Bluetooth Dongle"), "BLUETOOTH")
            If iDeviceId Then Devices.ValueUpdate(rResult!id, ("Away"), "", "", "")
          Endif
        Next
      Else
        Main.WriteLog(("Bluetooth: No Bluetooth device(s) found in device table!"))
      Endif
    Endif

    ' parse each line
    For Each sLine In Split(sScan, "\n")
      ' check for sensor data
      If InStr(sLine, "Scanning") Then Continue
      aScan = Scan(sLine, " * *")
      If aScan.Count = 2 Then
        If Main.bBluetoothDebug Then Main.WriteDebugLog(("[Bluetooth] Found device with address '") & aScan[0] & ("' and name '") & aScan[1] & "'.")
      Endif
    Next
    sScan = ""
  Else
    If Main.bBluetoothDebug Then Main.WriteDebugLog(("[Bluetooth] No device(s) found."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return BT field strenght info for sAddress
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetRSSI(sAddress As String) As String

  Dim sStrength As String

  If Main.bBluetoothDebug Then Main.WriteDebugLog(("[Bluetooth] 'hcitool rssi " & sAddress & "'"))
  Exec ["hcitool", "rssi", sAddress] To sStrength
  Return Replace$(sStrength, "RSSI return value: ", "")

End
