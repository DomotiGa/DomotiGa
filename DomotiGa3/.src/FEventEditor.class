' Gambas class file

' Description:
' FEventEditor.class
' Support for creating and editing of all events parameters.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private rResult As Result
Private rResultTriggers As Result
Private rResultConditions As Result
Private rResultActions As Result
Private $aActions As New String[]
Public bAddEvent As Boolean
Public iTrigger As Integer
Public iAction As Integer
Public iCondition As Integer
Public iEditingCondition As Integer
Public iEditingAction As Integer

Public Sub Form_Open()

  If bAddEvent Then
    Me.Text = ("Create Event")
    chkEnabled.Value = True
    btnDeleteEvent.Visible = False
  Endif
  
  Me.Move(FMain.X + 50, FMain.Y + 70)
  LoadEvent()

  btnMoveUpAction.Enabled = False
  btnMoveDownAction.Enabled = False
  btnRemoveAction.Enabled = False
  btnInsertAction.Enabled = False

End

Public Sub GetTriggers()

  ' fill combos with available triggers
  Try rResultTriggers = Main.hDB.Exec("SELECT * FROM triggers order by name")
  cmbTrigger.Clear
  cmbTrigger.Add("")
  If rResultTriggers Then
    If (rResultTriggers.Count >= 1) Then
      For Each rResultTriggers
        cmbTrigger.Add(rResultTriggers!name)
      Next
    Endif
  Else
    Message(("ERROR: No triggers database table found!"))
  Endif

  ' Reset the trigger button to edit or create
  cmbTrigger_Click()

End

Public Sub GetConditions(oObject As Object)

  ' fill combos with available conditions
  Try rResultConditions = Main.hDB.Exec("SELECT * FROM conditions order by name")
  oObject.Clear
  oObject.Add("")
  If rResultConditions Then
    If (rResultConditions.Count >= 1) Then
      For Each rResultConditions
        oObject.Add(rResultConditions!name)
      Next
    Endif
  Else
    Message(("No conditions database table found!"))
  Endif

End

Public Sub GetCategories()

  Dim rCategory As Result

  ' fill combo with available categories
  Try rCategory = Main.hDB.Exec("SELECT * FROM category")
  cmbCategory.Clear
  cmbCategory.Add("")
  If rCategory Then
    If (rCategory.Count >= 1) Then
      For Each rCategory
        cmbCategory.Add(rCategory!name)
      Next
    Endif
  Else
    Message(("No category database table found!"))
  Endif

End

Public Sub GetCategory() As Integer

  Dim rCat As Result
  Dim iCat As Integer

  rCat = Main.hDB.Exec("SELECT * FROM category where name=&1", cmbCategory.Text)
  If rCat.Count Then iCat = rCat!id
  Return iCat

End

Public Sub GetCategoryName(iId As Integer) As String

  Dim rCat As Result
  Dim sCat As String

  rCat = Main.hDB.Exec("SELECT * FROM category where id=&1", iId)
  If rCat.Count Then sCat = rCat!name
  Return sCat

End

Public Sub GetActions()

  Dim rAction As Result

  ' create empty table
  tvActions.Rows.Count = 0
  tvActions.Rows.Resizable = False
  tvActions.Columns.Count = 1
  tvActions.Columns.Resizable = False

  ' fill combos with available actions
  Try rResultActions = Main.hDB.Exec("SELECT * FROM actions order by name")
  cmbAction.Clear
  cmbAction.Add("")
  If rResultActions Then
    If (rResultActions.Count >= 1) Then
      For Each rResultActions
        cmbAction.Add(rResultActions!name)
      Next
    Endif
  Else
    Message(("No actions database table found!"))
  Endif

  If Not bAddEvent Then
    tvActions.Clear
    $aActions.Clear
    ' fill tableview with actions
    Try rAction = Main.hDB.Exec("SELECT * FROM events_actions WHERE event = &1 ORDER BY events_actions.order", FEvents.txtCurEvent)
    If Not Error Then
      If rAction Then
        For Each rAction
          $aActions.Add(GetActionName(rAction!action), rAction!order)
        Next
        tvActions.Rows.Count = $aActions.Count
        tvActions.Rows.Resizable = False
        tvActions.Columns.Count = 1
        tvActions.Columns.Resizable = False
      Endif
    Endif
  Endif

End

Public Sub LoadEvent()

  btnEditCondition2.Enabled = False

  GetTriggers()
  GetConditions(cmbCondition1)
  GetConditions(cmbCondition2)
  GetActions()
  GetCategories()

  If Not bAddEvent Then
    ' get selected event values
    Try rResult = Main.hDB.Exec("SELECT * FROM events WHERE id = &1", FEvents.txtCurEvent)
    If Not Error Then
      If rResult.Count >= 1 Then
        tbName.Text = rResult!name
        If rResult!lastrun Then tbRunLast.Text = Replace$(Str$(Format(rResult!lastrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        If rResult!firstrun Then tbRunFirst.Text = Replace$(Str$(Format(rResult!firstrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        Try chkEnabled.Value = rResult!enabled
        Try chkReRun.Value = rResult!rerunenabled
        Try spbReRunValue.Value = rResult!rerunvalue
        Try cmbReRunType.Text = StripRerun(rResult!reruntype)
        Try chkLog.Value = rResult!log
        txtDescription.Text = rResult!comments
        If rResult!trigger1 Then
          cmbTrigger.Text = GetTriggerName(rResult!trigger1)
          btnEditTrigger.Enabled = True
        Endif
        If rResult!condition1 Then
          cmbCondition1.Text = GetConditionName(rResult!condition1)
          btnEditCondition1.Enabled = True
        Endif
        If rResult!condition2 Then
          cmbCondition2.Text = GetConditionName(rResult!condition2)
          btnEditCondition2.Enabled = True
        Else
          cmbCondition2.Enabled = False
        Endif
        cmbOperand.Text = rResult!operand
        If cmbOperand.Text Then cmbCondition2.Enabled = True
        Try cmbCategory.Text = GetCategoryName(rResult!category)
      Else
        Message(("Couldn't load event record!"))
        Me.Close
      Endif
      btnRun.Enabled = True
    Endif
  Endif

End

Private Sub GetTriggerName(iId As Integer) As String

  Dim rResultTrig As Result

  rResultTrig = Main.hDB.Exec("SELECT name FROM triggers WHERE id = &1", iId)
  Try Return rResultTrig!name

End

Private Sub GetConditionName(iId As Integer) As String

  Dim rResultCondition As Result

  rResultCondition = Main.hDB.Exec("SELECT name FROM conditions WHERE id = &1", iId)
  Try Return rResultCondition!name

End

Private Sub GetTriggerId(sName As String) As Integer

  Dim rResultTrig As Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  If rResultTrig Then
    If rResultTrig.Count = 1 Then Return rResultTrig!id
  Endif

End

Private Sub GetConditionId(sName As String) As Integer

  Dim rResultCondition As Result

  rResultCondition = Main.hDB.Exec("SELECT id FROM conditions WHERE name = &1", sName)
  If rResultCondition Then
    If rResultCondition.Count = 1 Then Return rResultCondition!id
  Endif

End

Private Sub GetActionId(sName As String) As Integer

  Dim rResultAction As Result

  rResultAction = Main.hDB.Exec("SELECT id FROM actions WHERE name = &1", sName)
  If rResultAction Then
    If rResultAction.Count Then
      Return rResultAction!id
    Endif
  Else
    Return 0
  Endif

End

Private Sub GetActionName(iId As Integer) As String

  Dim rResultAction As Result

  rResultAction = Main.hDB.Exec("SELECT name FROM actions WHERE id = &1", iId)
  Try Return rResultAction!name

End

Public Sub tbName_KeyPress()

  btnSave.Enabled = True

End

Public Sub btnCancel_Click()

  bAddEvent = False
  Me.Close

End

Public Sub btnDeleteEvent_Click()

  Select Message.Question(("Are you sure that you want to delete this event?"), ("Yes"), ("No"))
    Case 1
      Main.hDB.Exec("DELETE FROM events WHERE id = &1", rResult!id)
      Main.hDB.Exec("DELETE FROM events_actions WHERE event = &1", rResult!id)
      Me.Close
      FEvents.UpdateEventView()
  End Select

End

Public Sub btnNewEvent_Click()

  bAddEvent = True
  btnSave_Click()

End

Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim sSql As String
  Dim iTriggerId1, iConditionId1, iConditionId2, iCnt, iEventId As Integer

  If Not tbName.Text Then
    Balloon(("Please enter a name for this event!"), tbName)
    Return
  Endif

  If cmbTrigger.Text Then
    iTriggerId1 = GetTriggerId(cmbTrigger.Text)
  Else
    Balloon(("Please select a trigger!"), cmbTrigger)
    Return
  Endif
  If cmbCondition1.Text Then
    iConditionId1 = GetConditionId(cmbCondition1.Text)
  Endif
  If cmbCondition2.Text Then
    iConditionId2 = GetConditionId(cmbCondition2.Text)
  Endif
  If chkEnabled.Value = False And bAddEvent Then
    Select Message.Question(("You haven't enabled this event, shall I enable it?"), ("Yes"), ("No"))
      Case 1
        chkEnabled.Value = True
      Case 0
        ' you want it
    End Select
  Endif
  If bAddEvent Then
    ' create new event row
    sSql = "INSERT INTO events SET id = NULL, name = &1, enabled = &2, log = &3, comments = &4, trigger1 = &5, condition1 = &6, condition2 = &7, operand = &8, rerunenabled = &9, reruntype = &{10}, rerunvalue = &{11}, category = &{12}"
    rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, chkEnabled.Value, chkLog.Value, txtDescription.Text, iTriggerId1, iConditionId1, iConditionId2, cmbOperand.Text, chkReRun.Value, ParseRerun(cmbReRunType.Text), spbReRunValue.Value, GetCategory())
    rResultUpdate = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM events")
    iEventId = rResultUpdate!lastid
  Else
    ' update new event details
    sSql = "UPDATE events SET name = &1, enabled = &2, log = &3, comments = &4, trigger1 = &5, condition1 = &6, condition2 = &7, operand = &8, rerunenabled = &9, reruntype = &{10}, rerunvalue = &{11}, category = &{12} WHERE id = &{13}"
    rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, chkEnabled.Value, chkLog.Value, txtDescription.Text, iTriggerId1, iConditionId1, iConditionId2, cmbOperand.Text, chkReRun.Value, ParseRerun(cmbReRunType.Text), spbReRunValue.Value, GetCategory(), rResult!id)
    iEventId = rResult!id
  Endif

  If iEventId Then
    ' then we save it's action(s)
    sSql = "DELETE from events_actions WHERE event = &1"
    rResultUpdate = Main.hDB.Exec(sSql, iEventId)

    sSql = "INSERT events_actions SET event = &1, action = &2, events_actions.order= &3, delay= &4"
    If $aActions.Count > 0 Then
      While iCnt < $aActions.Count
        rResultUpdate = Main.hDB.Exec(sSql, iEventId, GetActionId($aActions[iCnt]), iCnt, 0)
        Inc iCnt
      Wend
    Endif
  Endif

  FEvents.UpdateEventView()
  bAddEvent = False
  Me.Close

End


Public Sub chkEnabled_Click()

  btnSave.Enabled = True

End

Public Sub chkLog_Click()

  btnSave.Enabled = True

End

Public Sub txtDescription_KeyPress()

  btnSave.Enabled = True

End

Public Sub btnEditTrigger_Click()

  iTrigger = GetTriggerId(cmbTrigger.Text)
  If iTrigger = 0 Then FTriggerEditor.bAddTrigger = True
  FTriggerEditor.Show()

End

Public Sub btnEditCondition1_Click()

  iCondition = GetConditionId(cmbCondition1.Text)
  iEditingCondition = 1
  FConditionEditor.Show()

End

Public Sub btnEditCondition2_Click()

  iCondition = GetConditionId(cmbCondition2.Text)
  iEditingCondition = 2
  FConditionEditor.Show()

End

Public Sub cmbCondition1_Click()

  If cmbOperand.Text Then
    If cmbCondition1.Text Then
      btnEditCondition2.Enabled = True
    Else
      btnEditCondition2.Enabled = False
    Endif
  Else
    btnEditCondition2.Enabled = False
  Endif

  If cmbCondition1.Text Then
    btnEditCondition1.Text = ("Edit")
  Else
    btnEditCondition1.Text = ("Create")
  Endif
  btnSave.Enabled = True

End

Public Sub cmbCondition2_Click()

  If cmbCondition1.Text Then
    btnEditCondition2.Enabled = True
  Else
    btnEditCondition2.Enabled = False
  Endif

  If cmbCondition2.Text Then
    btnEditCondition2.Text = ("Edit")
  Else
    btnEditCondition2.Text = ("Create")
  Endif
  btnSave.Enabled = True

End

Public Sub btnEditAction_Click()

  iAction = GetActionId(cmbAction.Text)
  iEditingAction = 1
  FActionEditor.Show()
  btnSave.Enabled = True

End

Public Sub cmbOperand_Click()

  If cmbCondition1.Text Then
    If cmbOperand.Text Then
      cmbCondition2.Enabled = True
      btnEditCondition2.Enabled = True
    Else
      cmbCondition2.Enabled = False
      btnEditCondition2.Enabled = False
    Endif
  Endif
  btnSave.Enabled = True

End

Private Sub ParseRerun(sRerun As String) As String

  If sRerun Then
    Return "gb." & Left(sRerun, Len(sRerun) - 1)
  Else
    Return ""
  Endif

End

Private Sub StripRerun(sRerun As String) As String

  If sRerun Then
    Return Replace(sRerun, "gb.", "") & "s"
  Else
    Return ""
  Endif

End

Public Sub tvActions_Data(Row As Integer, Column As Integer)

  tvActions.Data.Text = $aActions[Row]

End

Public Sub btnInsertAction_Click()

  If cmbAction.Text <> "" Then
    $aActions.Add(cmbAction.Text, GetActionId(cmbAction.Text))
    Inc tvActions.Rows.Count
    tvActions.MoveTo($aActions.Max, 0)
    btnRun.Enabled = False

    btnRemoveAction.Enabled = True
    If $aActions.Count > 1 Then
      btnMoveUpAction.Enabled = True
      btnMoveDownAction.Enabled = True
    Else
      btnMoveUpAction.Enabled = False
      btnMoveDownAction.Enabled = False
    Endif

  Endif

End

Public Sub btnRemoveAction_Click()

  If $aActions.Count = 0 Then Return
  If tvActions.Row < 0 Then Return
  $aActions.Remove(tvActions.Row)
  Dec tvActions.Rows.Count
  tvActions.Refresh
  btnRun.Enabled = False

  If $aActions.Count = 0 Then
    btnRemoveAction.Enabled = False
  Endif

  If $aActions.Count <= 1 Then
    btnMoveUpAction.Enabled = False
    btnMoveDownAction.Enabled = False
  Endif

End

Public Sub btnMoveUpAction_Click()

  If tvActions.Row <= 0 Then Return
  tvActions.Save
  Swap $aActions[tvActions.Row], $aActions[tvActions.Row - 1]
  tvActions.Refresh
  Dec tvActions.Row
  btnRun.Enabled = False

End

Public Sub btnMoveDownAction_Click()

  If tvActions.Row >= (tvActions.Rows.Count - 1) Then Return
  tvActions.Save
  Swap $aActions[tvActions.Row], $aActions[tvActions.Row + 1]
  tvActions.Refresh
  Inc tvActions.Row
  btnRun.Enabled = False

End

Public Sub tvActions_Click()

  Try cmbAction.Text = $aActions[tvActions.Row]
  If Not Error Then
    btnEditAction.Enabled = True
    btnRemoveAction.Enabled = True
    If $aActions.Count > 1 Then
      btnMoveUpAction.Enabled = True
      btnMoveDownAction.Enabled = True
    Else
      btnMoveUpAction.Enabled = False
      btnMoveDownAction.Enabled = False
    Endif
  Endif

End

Public Sub cmbAction_Click()

  If cmbAction.Text <> "" Then
    btnInsertAction.Enabled = True
    btnEditAction.Text = ("Edit")
  Else
    btnInsertAction.Enabled = False
    btnEditAction.Text = ("Create")
  Endif

End

Public Sub cmbTrigger_Click()

  If cmbTrigger.Text <> "" Then
    btnEditTrigger.Text = ("Edit")
  Else
    btnEditTrigger.Text = ("Create")
  Endif

End

Public Sub tvActions_DblClick()

  If $aActions.Count = 0 Then Return
  btnEditAction_Click()

End

Public Sub btnRun_Click()

  If Main.bServer Then
    Events.RunActions(rResult!id)
  Else
    Client.RunActions(rResult!id)
  Endif
  Balloon("Action(s) executed", btnRun)

End
