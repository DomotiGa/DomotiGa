' Gambas class file

' Description:
' CXBMCxPL.class
' Connect to XBMC xPL interface via xPL protocol.

' Development Status:
' Works, needs some more testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "XBMCxPL"
Public PluginFriendlyName As String = "XBMC xPL"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[XBMCxPL] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property RXAddress As String
Property TXAddress As String
Property XBMCDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sRXAddress As String
Private $sTXAddress As String
Private $bDebug As Boolean

Private Const VENDOR As String = "domotiga-xpl"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sRXAddress = cPl.Settings["rxaddress"]
  $sTXAddress = cPl.Settings["txaddress"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("XBMC xPL Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ProcessxPLMsg(oxPLMsg As Object)

  Dim sAddress, sValue, sValue2, sValue3, sValue4 As String
  Dim iDeviceId As Integer

  Select oxPLMsg.Schema
    Case "hbeat.app", "hbeat.basic"
    Case "media.mptrnspt"

      ' IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Received player control message schema '" & oxPLMsg.Schema & "'"))
      ' sAddress = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "mp")
      ' sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      Return
    Case "media.mpmedia"
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received media control message schema '" & oxPLMsg.Schema & "'")
      sAddress = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "mp")
      ' sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      ' sType = "AC"
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received unsupported message schema '" & oxPLMsg.Schema & "'")
  End Select

  If oxPLMsg.Schema = "hbeat.app" Or If oxPLMsg.Schema = "hbeat.basic" Or If oxPLMsg.Schema = "hbeat.end" Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Got heartbeat msg of type '" & oxPLMsg.Schema & "' from '" & oxPLMsg.Source & "'")
  Else
    ' find device id
    iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, oxPLMsg.Schema)
    ' update device
    If iDeviceId Then
      Devices.ValueUpdate(iDeviceId, 1, sValue)
      Devices.ValueUpdate(iDeviceId, 2, sValue2)
      Devices.ValueUpdate(iDeviceId, 3, sValue3)
      Devices.ValueUpdate(iDeviceId, 4, sValue4)
    Endif
    'IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Device with address '" & sAddress & "' reported " & sValue)
  Endif
  oxPLMsg = Null

End

Public Sub SendOSDBasic(sTarget As String, sCommand As String, sText As String, Optional iDelay As Integer)

  Dim sCmndMsg As String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  Dim sOSDBasicMsg As String = "osd.basic\n{\ncommand=" & sCommand

  If iDelay Then sOSDBasicMsg &= "\ndelay=" & iDelay
  If sText Then sOSDBasicMsg &= "\ntext=" & sText

  sOSDBasicMsg &= "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' osd.basic
  ' {
  '   command=clear|write|exlusive|release
  '   text=<text to display>
  '   delays=<seconds to display>
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sOSDBasicMsg)

End


Public Sub SendMediaBasic(sTarget As String, sAddress As String, sCommand As String, Optional sParam As String)

  Dim sCmndMsg As String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  Dim sMediaBasicMsg As String = "media.basic\n{\ncommand=" & sCommand & "\nmp=" & sAddress

  Select Case sCommand
    Case "chapter"
      sMediaBasicMsg &= "\nchapter=" & sParam
    Case "position"
      sMediaBasicMsg &= "\nposition=" & sParam
  End Select
  sMediaBasicMsg &= "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' media.basic
  ' {
  '   command=play|stop|pause|record|forward|rewind|position|chapter|next|back
  '   mp=id
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sMediaBasicMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

End

Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String
  Dim aCommand, aParam As String[]

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  Select sType
    Case "osd.basic"
      aCommand = Split(sCmd, " ")
      Select Case UCase(aCommand[0])
        Case "WRITE"
          aParam = Scan(sCmd, "write *")
          If aParam.Count = 1
            SendOSDBasic(Main.hXBMCxPL.TXAddress, "write", aParam[0], 10)
          Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command should be followed by a space and text!")
          Endif
        Case "CLEAR", "RELEASE", "EXCLUSIVE"
          SendOSDBasic(Main.hXBMCxPL.TXAddress, sCmd, "", 10)
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for osd.basic!")
      End Select
    Case "media.basic"
      aCommand = Split(sCmd, " ")
      Select Case UCase(aCommand[0])
        ' play|stop|pause|record|forward|rewind|position|chapter|next|back
        Case "PLAY", "STOP", "PAUSE", "RECORD", "FORWARD", "REWIND", "NEXT", "BACK"
          SendMediaBasic(Main.hXBMCxPL.TXAddress, sAddress, sCmd)
        Case "CHAPTER"
          aParam = Scan(sCmd, "chapter *")
          If aParam.Count = 1
            SendMediaBasic(Main.hXBMCxPL.TXAddress, sAddress, "chapter", aParam[0])
          Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command should be followed by a space and chapter number!")
          Endif
        Case "POSITION"
          aParam = Scan(sCmd, "position *")
          If aParam.Count = 1
            SendMediaBasic(Main.hXBMCxPL.TXAddress, sAddress, "position", aParam[0])
          Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command should be followed by a space and postion number, or inc dec!")
          Endif
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for media.basic!")
      End Select
    Default
      Main.WriteDebugLog(LogLabel & "The '" & sType & "' protocol is not supported by XBMC xPL code!")
      Return
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' implement properties
Private Function RXAddress_Read() As String

  Return $sRXAddress

End

Private Sub RXAddress_Write(Value As String)

  $sRXAddress = Value

End

Private Function TXAddress_Read() As String

  Return $sTXAddress

End

Private Sub TXAddress_Write(Value As String)

  $sTXAddress = Value

End

Private Function XBMCDebug_Read() As Boolean

  Return $bDebug

End

Private Sub XBMCDebug_Write(Value As Boolean)

  $bDebug = Value

End
