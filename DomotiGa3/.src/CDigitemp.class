' Gambas class file

' Description:
' CDigitemp.class
' Support for digitemp 1-wire sensors (only temperature at this moment).
' DigiTemp supports DS18S20, DS1820, DS18B20, DS2438, DS2422, DS2423 and DS2409

' Development Status:
' Just build, possibly bugs around.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Digitemp"
Public PluginFriendlyName As String = "Digitemp"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Digitemp] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sCommand As String
Private $sConfig As String
Private $iReadTime As Integer
Private $iPollTime As Integer
Private $bDebug As Boolean

Public tDigitemp As Timer
Private sOutput As String

Private Const DS18S20 As String = "10"
Private Const DS2423 As String = "1D"
Private Const DS2409 As String = "1F"
Private Const DS2438 As String = "26"
Private Const DS18B20 As String = "28"
Private Const DS2422 As String = "41"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sCommand = cPl.Settings["command"]
  $sConfig = cPl.Settings["config"]
  $iReadTime = cPl.Settings["readtime"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  If Not Util.ProgramExist($sCommand) Then
    Main.WriteLog(LogLabel & "ERROR: Digitemp command " & $sCommand & " not found, did you install it?")
    IsRunning = False
    ErrorText = "Digitemp command " & $sCommand & " not found, did you install it?"
    Return
  Endif

  If Not Exist($sConfig) Then
    Main.WriteLog(LogLabel & "ERROR: Digitemp config file " & $sConfig & " not found, did you initialize it?")
    IsRunning = False
    ErrorText = "Digitemp config file " & $sConfig & " not found, did you initialize it?"
    Return
  Endif

  InterfaceId = Devices.FindInterface("Digitemp")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' We can be running
  IsRunning = True

  ' Initialize
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tDigitemp.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' start poll timer for digitemp
  tDigitemp = New Timer As "tDigitemp"
  tDigitemp.Delay = $iPollTime * 1000 ' multiply for seconds
  tDigitemp.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tDigitemp_Timer()

  CheckDigitemp()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run digitemp to get sensor data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckDigitemp()

  Dim iReadTime As Integer

  If $iReadtime < 1000 Then
    iReadtime = 1000
  Else
    iReadtime = $iReadtime
  Endif
  If $bDebug Then Main.WriteDebugLog(LogLabel & $sCommand & " -a -q -r " & iReadTime & " -c " & $sConfig)
  Exec [$sCommand, "-a", "-q", "-r", iReadTime, "-c", $sConfig] For Read As "Digitemp"

Catch
   If $bDebug Then Main.WriteDebugLog(LogLabel & "Error when trying to run '" & $sCommand & "': " & Error.Text & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Digitemp_Read()

  Dim sLine As String

  sLine = Read #Last, -256
  sOutput &= sLine

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' digitemp has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Digitemp_Kill()

  Dim sLine As String
  Dim aScan As String[]
  Dim iDeviceId As Integer

  ' parse each line
  For Each sLine In Split(sOutput, "\n")
    ' check for sensor data
    If InStr(sLine, "Sensor") Then
      Select Case Left$(sLine, 2)
        Case DS18S20
          ' 1049023A01080015 Nov 21 19:44:49 Sensor 0 C: 22.44 F: 72.39
          aScan = Scan(sLine, "* * * * * * * * * *")
          If aScan.Count = 10 Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor ID: " & aScan[0] & " Type: DS18S20 Values: " & aScan[7] & "°C " & aScan[9] & "°F")
            iDeviceId = Devices.Find(Instance, aScan[0], InterfaceId, "DS18S20")
            If iDeviceId Then
              If aScan[7] <> "85.00" Then
                If Main.sTemperature = "°C" Then
                  Devices.ValueUpdate(iDeviceId, 1, aScan[7], Devices.ValueType_Temperature)
                Else
                  Devices.ValueUpdate(iDeviceId, 1, aScan[9], Devices.ValueType_Temperature)
                Endif
              Endif
            Endif
          Else
            Main.WriteDebugLog(LogLabel & "Got parse error when scanning line: " & sLine)
          Endif
        Case DS2423
          aScan = Scan(sLine, "* * * * * * * *")
          If aScan.Count = 8 Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor ID: " & aScan[0] & " Type: DS2423 Values: " & aScan[6] & " " & aScan[7])
            iDeviceId = Devices.Find(Instance, aScan[0], InterfaceId, "DS2423")
            If iDeviceId Then
              Select aScan[6]
                Case "#0"
                  Devices.ValueUpdate(iDeviceId, 1, aScan[7])
                Case "#1"
                  Devices.ValueUpdate(iDeviceId, 2, aScan[7])
              End Select
            Endif
          Else
            Main.WriteDebugLog(LogLabel & "Got parse error when scanning line: " & sLine)
          Endif
        Case DS2409
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor " & aScan[0] & " Type: DS2409 " & sLine)
        Case DS2438
          ' 26D050E7000000FF Apr 25 18:15:45 Sensor 0 C: 22.22 F: 71.99 H: 20%
          aScan = Scan(sLine, "* * * * * * * * * * * *")
          If aScan.Count = 12 Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor ID: " & aScan[0] & " Type: DS2438 Values: " & aScan[7] & "°C " & aScan[9] & "°F" & aScan[11] & "%")
            iDeviceId = Devices.Find(Instance, aScan[0], InterfaceId, "DS2438")
            If iDeviceId Then
              Devices.ValueUpdate(iDeviceId, 1, aScan[7], Devices.ValueType_Temperature)
              Devices.ValueUpdate(iDeviceId, 2, aScan[9], Devices.ValueType_Temperature)
              Devices.ValueUpdate(iDeviceId, 3, aScan[11], Devices.ValueType_Humidity)
            Endif
          Else
            Main.WriteDebugLog(LogLabel & "Got parse error when scanning line: " & sLine)
          Endif
        Case DS18B20
          aScan = Scan(sLine, "* * * * * * * * * *")
          If aScan.Count = 10 Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor ID: " & aScan[0] & " Type: DS18B20 Values: " & aScan[7] & "°C " & aScan[9] & "°F")
            iDeviceId = Devices.Find(Instance, aScan[0], InterfaceId, "DS18B20")
            If iDeviceId Then
              If aScan[7] <> "85.00" Then
                If Main.sTemperature = "°C" Then
                  Devices.ValueUpdate(iDeviceId, 1, aScan[7], Devices.ValueType_Temperature)
                Else
                  Devices.ValueUpdate(iDeviceId, 1, aScan[9], Devices.ValueType_Temperature)
                Endif
              Endif
            Endif
          Else
            Main.WriteDebugLog(LogLabel & "Got parse error when scanning line: " & sLine)
          Endif
        Case DS2422
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor " & aScan[0] & " Type: DS2422 " & sLine)
        Case Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Sensor " & aScan[9] & " Type: Unsupported! " & sLine)
        End Select
    Endif
  Next

  sOutput = Null

End
