' Gambas class file

' Description:
' JsonRpcFunction.class

' Development Status:
' Just Started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'***************************************************************************
Export

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property URL As String
Property Method As String
Property Async As Boolean
Property Id As Integer
Property User As String
Property Password As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private hHttpClient As HttpClient
Private $sMethod As String
Private $sURL As String
Private $bAsync As Boolean
Private $iId As Integer
Private $sUser As String
Private $sPassword As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Events to be raised
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event Reply(Data As Variant)
Event BadReply(Code As String)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when Object is created - we take method name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub _New(NewMethod As String)

  $sMethod = NewMethod

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Do the HttpClient Post now
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Call(cParams As Collection) As Boolean

  Dim cJsonData As New Collection
  Dim sJsonData As String

' pass real result in a different parameter back like
' authentication !

  If hHttpClient Then
    If hHttpClient.Status > 0 Then
      Error.Raise("Still active")
      Return
    Endif
  Endif

  If Not $sMethod Then
    Error.Raise("Invalid Method")
    Return
  Endif

  If Not $sURL Then
    Error.Raise("Invalid URL")
    Return
  Endif

  ' If the id isn't known yet, generate a new one
  If Not $iId Then
    Randomize
    $iId = Int(Rnd(1, 32768))
  Endif

  hHttpClient = New HttpClient As "HttpClient"

  ' Build up the JSON-RPC request
  cJsonData["jsonrpc"] = "2.0"
  cJsonData["method"] = $sMethod
  If cParams <> Null Then 
    cJsonData["params"] = cParams
  Endif
  cJsonData["id"] = $iId
  
  sJsonData = JSON.Encode(cJsonData)

  ' Fix empty strings
  sJsonData = Replace(sJsonData, " \"\\u00x0\"", " \"\"")
  sJsonData = Replace(sJsonData, "[\"\\u00x0\"", "[\"\"")
  sJsonData = Replace(sJsonData, " \"\\u0001\"", " \"\"")
  sJsonData = Replace(sJsonData, "[\"\\u0001\"", "[\"\"")

  hHttpClient.URL = $sURL
  hHttpClient.Async = $bAsync
  hHttpClient.TimeOut = 10

  ' Set authentication if user & password are set
  If Not $sUser And If Not $sPassword Then
    hHttpClient.Auth = Net.AuthBasic
    hHttpClient.User = $sUser
    hHttpClient.Password = $sPassword
  Endif

  ' Post the json data
  hHttpClient.Post("application/json", sJsonData)

  ' If Async = False, read the data
  If Not $bAsync Then
    ' Check if we got an error
    ' True - no error - place return values in Collection
    ' False - an error
  Else
    ' If Async, always return True
    Return True
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sub URL_Write(NewURL As String)

  If hHttpClient Then
    If hHttpClient.Status > 0 Then
      Error.Raise("Still active")
      Return
    EndIf
  EndIf

  $sURL = Trim(NewURL)

End

Function URL_Read() As String

  Return $sURL

End

Function Method_Write(NewMethod As String)

  $sMethod = NewMethod

End

Function Method_Read() As String

  Return $sMethod

End

Function Async_Write(NewAsync As Boolean)

  $bAsync = NewAsync

End

Function Async_Read() As Boolean

  Return $bAsync

End

Function Id_Write(NewId As Integer)

  If NewId >= 1 Then
    $iId = NewId
  Else
    ' If number is negative or zero, generate one ourself
    Randomize
    $iId = Int(Rnd(1, 32768))
  Endif

End

Function Id_Read() As Integer

  Return $iId

End

Function User_Write(NewUser As String)

  $sUser = NewUser

End

Function User_Read() As String

  Return $sUser

End

Function Password_Write(NewPassword As String)

  $sPassword = NewPassword

End

Function Password_Read() As String

  Return $sPassword

End

