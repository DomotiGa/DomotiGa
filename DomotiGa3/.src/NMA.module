' Gambas module file

' Description:
' NMA.module
' Contains code for sending NMA messages

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public hNMAMessage As HttpClient
Public cNMAData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse NMA XML Response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseNMAXML(sXML As String) As String[]

  Dim XmlR As New XmlReader
  Dim bNMA As Boolean
  Dim sOk As String
  Dim sCode As String
  Dim sRemaining As String
  Dim sResetDate As String
  Dim sErrorMessage As String
  Dim sPrevTag As String
  Dim aResponse As New String[5]

  ' aResponse[0] = success, error or unknown
  ' aResponse[1] = code
  ' aResponse[2] = remaining
  ' aResponse[3] = resetdate
  ' aResponse[4] = errormessage
  
  XmlR = New XmlReader
  Try XmlR.FromString(sXML)
  If Error Then
    aResponse[0] = "error"
    aResponse[4] = "Cannot parsing XML"
    Return aResponse
  Else
    ' First Node.Name = nma
    ' Second Node.Name = success or error

    Do While Not XmlR.Eof

      XmlR.Read()
      If XmlR.Node.Name = "nma" Then bNMA = True
      If bNMA Then
        If XmlR.Node.Name = "success" Or XmlR.Node.Name = "error" Then sOk = XmlR.Node.Name
      End If

      If sPrevTag = "error" And XmlR.Node.Name = "#text" Then sErrorMessage = XmlR.Node.Value
      sPrevTag = XmlR.Node.Name

      If XmlR.Node.Type = XmlReaderNodeType.Element Then
        If sOk Then
          If XmlR.Node.Attributes.count > 0 Then
            For Each XmlR.Node.Attributes
              If XmlR.Node.Name = "code" Then sCode = XmlR.Node.Value
              If XmlR.Node.Name = "remaining" Then sRemaining = XmlR.Node.Value
              If XmlR.Node.Name = "resetdate" Then sResetDate = XmlR.Node.Value
            Next
          End If
        End If
      End If
    Loop
  End If

  If sOk Then
    aResponse[0] = sOk
  Else
    aResponse[0] = "unknown"
  End If
  aResponse[1] = sCode
  aResponse[2] = sRemaining
  aResponse[3] = sResetDate
  aResponse[4] = sErrorMessage
  Return aResponse

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Validate NMA ApiKey
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValidateNMAApiKey(sApiKey As String) As String

  Dim hNMAValidate As HttpClient
  Dim sUrl As String = "https://www.notifymyandroid.com/publicapi/verify?"
  Dim sBuffer As String
  Dim aResponse As String[]

  If sApiKey = "" Then sApiKey = Main.sNMAApiKey
  sUrl &= "apikey=" & URL.Encode(sApiKey)

  hNMAValidate = New HttpClient As "hNMAValidate"
  hNMAValidate.URL = sUrl
  hNMAValidate.TimeOut = 8
  hNMAValidate.Async = False
  hNMAValidate.Get

  If hNMAValidate.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Error validating API key=" & sApiKey & ", Code=" & hNMAValidate.Status & ", HttpCode=" & hNMAValidate.Code)
    Return "Failed, Code=" & hNMAValidate.Status & ", HTTP=" & hNMAValidate.code
  Else
    ' success or error - read the data
    If Lof(hNMAValidate) Then sBuffer = Read #hNMAValidate, Lof(hNMAValidate)

    aResponse = ParseNMAXML(sBuffer)
    Select Case aResponse[0]
      Case "success"
        If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Successfully validated API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
        Return ""
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = hNMAValidate.Code
        If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Failed to validated API key= " & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
        Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
        Return False
      Default
        If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Unknown error validating API key=" & sApiKey & ", HttpCode=" & hNMAValidate.Code & ", XML=" & sBuffer)
        Return "Unknown XML, HTTP=" & hNMAValidate.Code
    End Select

  End If

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the NMA message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostNMA(sApiKey As String, sApplication As String, sEvent As String, sDescription As String, Optional bAsync As Boolean = True) As String

  Dim sUrl As String = "https://www.notifymyandroid.com/publicapi/notify?"
  Dim sBuffer As String
  Dim aResponse As String[]
  Dim Bucle As Byte

  ' In Async mode we need to do extra things
  If bAsync Then
    ' Find free tag, between 1 and 99. Normally we should never go over 1 thread
    For Bucle = 1 To 100
      If Bucle = 100 Then Break

      If Not cNMAData.Exist(Bucle) Then Break
    Next

    If Bucle = 100 Then
      Main.WriteLog("ERROR: Notify My Android Message Queue full")
      Return
    End If
  End If

  If sApiKey = "" Then sApiKey = Main.sNMAApiKey
  If sApplication = "" Then sApplication = Main.sNMAApplication
  If sEvent = "" Then sEvent = Main.sNMAEvent
  sUrl &= "apikey=" & URL.Encode(sApiKey) & "&" & "application=" & URL.Encode(sApplication) & "&" & "event=" & URL.Encode(sEvent) & "&" & "description=" & URL.Encode(sDescription)

  hNMAMessage = New HttpClient As "hNMAMessage"
  hNMAMessage.URL = sUrl
  hNMAMessage.TimeOut = 8
  hNMAMessage.Async = bAsync
  hNMAMessage.Tag = Bucle
  hNMAMessage.Post("", "")

  ' If Async = False - we need to return if it is successfull or not
  If bAsync Then
    If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Posting NMA message (#" & Bucle & ") " & sUrl)
    cNMAData.Add("", Bucle)
  Else
    If hNMAMessage.Status < 0 Then
      ' Faillure fetching data or apikey is invalid
      If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Error sending NMA message. API key=" & sApiKey & ", Code=" & hNMAMessage.Status & ", HttpCode=" & hNMAMessage.Code)
      Return "Failed, Code=" & hNMAMessage.Status & ", HTTP=" & hNMAMessage.Code
    Else
      ' success or error - read the data
      If Lof(hNMAMessage) Then sBuffer = Read #hNMAMessage, Lof(hNMAMessage)

      aResponse = ParseNMAXML(sBuffer)
      Select Case aResponse[0]
        Case "success"
          If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Successfully send message. API key=" & sApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
          Return ""
        Case "error"
          If aResponse[1] = "" Then aResponse[1] = hNMAMessage.Code
          If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Failed to send message. API key= " & sApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
          Return "Code=" & aResponse[1] & ", Msg=" & aResponse[4]
        Default
          If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Unknown error sending message. API key=" & sApiKey & ", HttpCode=" & hNMAMessage.Code & ", XML=" & sBuffer)
          Return "Unknown XML, HTTP=" & hNMAMessage.Code
      End Select

    End If
  End If

  Return ""
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read the data send by NMA, this can be called multiple times
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hNMAMessage_Read()

  Dim sData, sBuffer As String

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cNMAData[Last.Tag] Then
    sData = cNMAData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif

  cNMAData[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' End of the NMA response found, parse it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hNMAMessage_Finished()

  Dim aResponse As New String[5]

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Last.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Error sending NMA message (#" & Last.Tag & "). API key=" & Main.sNMAApiKey & ", Code=" & Last.Status & ", HTTP=" & Last.Code)
  Else
    ' success or error - read the data
    aResponse = ParseNMAXML(cNMAData[Last.Tag])
    Select Case aResponse[0]
      Case "success"
        If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Successfully send message (#" & Last.Tag & "). API key=" & Main.sNMAApiKey & ", Code=" & aResponse[1] & ", Remaining=" & aResponse[2] & ", ResetDate=" & aResponse[3])
      Case "error"
        If aResponse[1] = "" Then aResponse[1] = Last.Code
        If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Failed to send message (#" & Last.Tag & "). API key=" & Main.sNMAApiKey & ", Code=" & aResponse[1] & ", ErrorMessage=" & aResponse[4])
      Default
        If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Unknown error sending message (#" & Last.Tag & "). API key=" & Main.sNMAApiKey & ", HttpCode=" & Last.Code & ", XML=" & cNMAData[Last.Tag])
    End Select

  End If

Finally

  cNMAData.Remove(Last.Tag)
  Last.Close

Catch
  Main.WriteLog("ERROR: " & Error.Text & " when sending NMA message")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Error Raised for the NMA message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hNMAMessage_Error()

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Main.bNMADebug Then Main.WriteDebugLog("[NMA] Error sending NMA message: " & Last.Status)

  Try cNMAData.Remove(Last.Tag)
  Try Last.Close

End
