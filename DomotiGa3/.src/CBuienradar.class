' Gambas class file

' Description:
' CBuienradar.class
' Provides various weather related functions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Buienradar"
Public PluginFriendlyName As String = "Buienradar"
Public PluginVersion As String = "1.02"
Public PluginAuthor As String = "Johan Van Dyck"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Buienradar] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sCity As String
Private $sLatitude As String
Private $sLongitude As String
Private $iRefresh As Integer
Private $bDebug As Boolean
Private $iOutputPrecision As Integer
Private $sURLBuienradar As String
Private $sOutput As String
Private $iDevMaxValue As Integer
Private $iDevTimeValue As Integer

Public hBuienradar As New HttpClient
Public tBuienradar As New Timer
Public $sBuffer As String

Private $sURLRedirect As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sCity = cPl.Settings["city"]
  $sLatitude = cPl.Settings["latitude"]
  $sLongitude = cPl.Settings["longitude"]
  $iRefresh = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]
  $iOutputPrecision = cPl.Settings["outputprecision"]
  $sURLBuienradar = cPl.Settings["urlbuienradar"]
  $sOutput = cPl.Settings["output"]
  $iDevMaxValue = cPl.Settings["devmaxvalue"]
  $iDevTimeValue = cPl.Settings["devtimevalue"]

  InterfaceId = Devices.FindInterface("Virtual Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Initialize
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tBuienradar.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' Fetch the initial data
  GetWeather()
  Try tBuienradar.Stop

  ' create refresh timer
  tBuienradar = New Timer As "tBuienradar"
  tBuienradar.Delay = $iRefresh * 1000
  tBuienradar.Start
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Started refresh timer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tBuienradar_Timer()

  GetWeather()
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating data.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a GET call to Buienradar and store the info
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetWeather()

  Dim sURL As String

  ' Don't start a new session if one is already active
  If hBuienradar.Status > 0 Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: Fetching data is already in progress!")
    Return
  Endif

  $sBuffer = ""

  If $sURLRedirect Then
    ' It is possible we received a 302/Redirect with a previous HTTP GET, now go try to fetch this one
    sURL = $sURLRedirect
  Else
    ' Build up the GET Url, we retrieve current conditions only
    ' e.g. http://gps.buienradar.nl/getrr.php?lat=52&lon=4
    sURL = $sURLBuienradar & "?lat=" & $sLatitude & "&lon=" & $sLongitude
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Fetching data for Country/City '" & $sCity & "' with request '" & sURL & "'")
  Endif

  hBuienradar = New HttpClient As "hBuienradar"
  hBuienradar.URL = sURL
  hBuienradar.Async = True
  hBuienradar.TimeOut = 5
  hBuienradar.Tag = $sCity
  hBuienradar.Get

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle data reading
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hBuienradar_Read()

  IsRunning = True
  If Lof(Last) Then $sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle read errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hBuienradar_Error()

  isRunning = False
  ErrorText = "Error retrieving Buienradar URL. Code=" & hBuienradar.Status
  Main.WriteLog(LogLabel & "ERROR: Retrieving Buienradar URL. Code=" & hBuienradar.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle finish request and start parsing the data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hBuienradar_Finished()

  Dim sMsg As String
  Dim cData As Collection
  Dim sHeader As String
  Dim iCode As Integer
  Dim iPos As Integer

  ' There is a bug in Gambas 3.9.2 and earlier when Content-Length=0 the "Last.Code" is always zero
  ' Even with a 302 redirect

  iCode = Last.Code

  If iCode = 0 Or If iCode = 302 Then
    '  With a possible redirect we received header
    If Last.Headers.Count Then
      For Each sHeader In Last.Headers
        If InStr(sHeader, "Location:", gb.IgnoreCase) = 1 Then
          iCode = 302
          $sURLRedirect = LTrim(Mid(sHeader, InStr(sHeader, ":") + 1))
          ' Check if the URL is redirect like "/" or "http://", otherwise we need to add it
          If InStr($sURLRedirect, "/") = 1 Then
            iPos = InStr($sURLBuienradar, "://")
            If iPos Then
              iPos = InStr($sURLBuienradar, "/", iPos + 3)
              If iPos Then
                $sURLRedirect = Mid($sURLBuienradar, 1, iPos - 1) & $sURLRedirect
              Else
                $sURLRedirect = $sURLBuienradar & $sURLRedirect
              Endif
            Else
              ' Invalid URL? We expect "://" otherwise the HTTPClient can't do much with it
              Main.WriteLog(LogLabel & "ERROR: Buienradar URL '" & $sURLBuienradar & "' seems to be invalid, it should contain at least '://'. Can't redirect the URL")
              $sURLRedirect = ""
              iCode = 500
            Endif
          Endif
        Endif
      Next
    Endif
  Endif

  Select iCode
    Case 200
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received '" & $sBuffer & "'")
      DecodeBuienradar($sBuffer)
    Case 302 ' Redirect
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received a HTTP URL Redirect to '" & $sURLRedirect & "'")
      ' Now redo the HTTP GET of the data with the new URL
      GetWeather()
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating data.")
    Default
      IsRunning = False
      ErrorText = "Unknown HTTP Code=" & Last.Code
      Try cData = JSON.Decode($sBuffer)
      If cData And If cData.Exist("error") Then sMsg = cData["error"]
      Main.WriteLog(LogLabel & "ERROR: Unknown HTTP Code=" & Last.Code & ", Status=" & Last.Status & ", while fetching weather data!" & IIf(sMsg, " Msg=" & sMsg, ""))
  End Select

  Try Last.Close

Catch
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Progress WeatherUnderground data and store it in a virtualdevice and Collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodeBuienradar(sData As String)

  Dim sLine, sFirstTime As String
  Dim aLines, aValues As String[]
  Dim iDeviceId As Integer
  Dim iLine, iValue As Integer = 1

  ' example data:
	'"000|16:05\r\n000|16:10\r\n000|16:15\r\n000|16:20\r\n000|16:25\r\n000|16:30\r\n000|16:35\r\n000|16:40\r\n000|16:45\r\n000|16:50\r\n
	'000 |16:55\r\n000|17:00\r\n000|17:05\r\n000|17:10\r\n000|17:15\r\n000|17:20\r\n000|17:25\r\n000|17:30\r\n000|17:35\r\n000|17:40\r\n
	'000 |17:45\r\n000|17:50\r\n000|17:55\r\n000|18:00\r\n000|18:05\r\n"

  ' find virtual device
  iDeviceId = Devices.Find(Instance, "Buienradar", InterfaceId, "Weather", "Buienradar")
  ' split per line
  aLines = Split(sData, "\n")
  ' split rainfall and ('time of rainfall' + \r)
  For Each sLine In aLines
    aValues = Split(sLine, "|")
    If aValues.Count = 0 Then Continue

	  If (iValue == ($iDevMaxValue + 1)) Then Break ' max number of wanted device values reached.
    ' for debug only simulate rain with value 77 = 0,1 mm/h rain or 078 to have fractional with n decimals.
    ' 'aValues[0] = "078"
    ' choose which type of output: integer or mm/h
    If $sOutput = "mm/h" Then
      ' convert rainfall from integer to mm/h via "mm/pro hour = 10^((value -109)/32)" formula given by the API website.
      ' info: good practise is to round to -3 digits as rainfall is an exponential curve. "-3" digits gives a good result for medium rainfall values
      aValues[0] = CStr(Round(10 ^ ((Val(aValues[0]) - 109) / 32), - $iOutputPrecision))
    Else
      ' output integer value between 0 and 255. No calculation needed.
    Endif

	  ' temp store the first time of the data
	  If iLine == 1 Then sFirstTime = Left(aValues[1], 5)

    ' if device found then update it's values
    If iDeviceId Then
      If iValue == $iDevTimeValue Then
        Devices.ValueUpdate(iDeviceId, iValue, sFirstTime)
        Inc iValue
        If iValue == ($iDevMaxValue + 1) Then Continue ' max number of value reached.
        Devices.ValueUpdate(iDeviceId, iValue, aValues[0])
        Inc iValue
      Else
        Devices.ValueUpdate(iDeviceId, iValue, aValues[0])
        Inc iValue
  	    If iValue == $iDevMaxValue Then Continue ' max number of value reached.
      Endif ' devtimevalue
	  Endif ' iDeviceID
    Inc iLine
  Next

Catch
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the Buienradar data format (not yet implemented)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JsonRpc_Buienradar_Get(cData As Collection) As Collection

  If cData Then
  Else
    ' If nothing supplied, just return no data
    Return "No data supplied"
  Endif

End
