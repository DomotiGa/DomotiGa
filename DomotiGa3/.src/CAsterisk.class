' Gambas class file

' Description:
' Asterisk.class
' Provide support for Asterisk PABX monitoring. (via manager API port)

' Development Status:
' Just started to build this one.
' Incoming call detection and Voicebox status implemented.
' Tested with Asterisk 1.4.21.2 and Digium TDM400

' Links:
' http://www.voip-info.org/wiki/view/Asterisk+-+documentation+of+application+commands

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables 
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Name As String = "Asterisk"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "Asterisk API"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[Asterisk] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property TCPHost As String
Property TCPPort As Integer
Property AsteriskDebug As Boolean
Property User As String
Property Password As String
Property Polltime As Integer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sUser As String
Private $sPassword As String
Private $iPolltime As Integer
Private $bAsteriskDebug As Boolean

Public hAsterisk As New Socket

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $iPollTime = cPl.Settings["polltime"]
  $sUser = cPl.Settings["user"]
  $sPassword = cPl.Settings["password"]
  $bAsteriskDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hAsterisk.Close

  ' get a new one
  hAsterisk = New Socket As "Asterisk"
  hAsterisk.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to Server " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to Server " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Connection is estabilished
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Asterisk_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

  ' authenticate ourself to API interface
  ManagerLogin()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Asterisk_Read()

  Dim sData As String

  If hAsterisk.Status = Net.Connected Then
    Line Input #hAsterisk, sData
    If InStr(sData, "Asterisk Call Manager") Then Main.WriteLog(LogLabel & sData)
    If InStr(sData, "Response: Error") Or InStr(sData, "Response: Success") Then
      Line Input #hAsterisk, sData
      If $bAsteriskDebug Then Main.WriteDebugLog(LogLabel & sData)
      ' put support for parsing incoming events/calls here
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle TCP errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Asterisk_Error()

  Log.Plugin_TCP_Error(LogLabel, $sTCPHost, Last.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hAsterisk.Close
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP Server closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Login to the Asterisk
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ManagerLogin()

  Dim sCommand As String

  sCommand = "ACTION: LOGIN\r\nUSERNAME: " & $sUser & "\r\nSECRET: " & $sPassword & "\r\nEVENTS: ON\r\n\r\n"
  Print #hAsterisk, sCommand

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' implement properties
Private Function TCPHost_Read() As String

  Return $sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  $sTCPHost = Value

End

Private Function TCPPort_Read() As Integer

  Return $iTCPPort

End

Private Sub TCPPort_Write(Value As Integer)

  $iTCPPort = Value

End

Private Function User_Read() As String

  Return $sUser

End

Private Sub User_Write(Value As String)

  $sUser = Value

End

Private Function Password_Read() As String

  Return $sPassword

End

Private Sub Password_Write(Value As String)

  $sPassword = Value

End

Private Function Polltime_Read() As Integer

  Return $iPolltime

End

Private Sub Polltime_Write(Value As Integer)

  $iPolltime = Value

End

Private Function AsteriskDebug_Read() As Boolean

  Return $bAsteriskDebug

End

Private Sub AsteriskDebug_Write(Value As Boolean)

  $bAsteriskDebug = Value

End
