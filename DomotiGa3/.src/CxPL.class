' Gambas class file

' Description:
' CxPL.class
' Provide basic support for the xPL protocol.

' Development Status:
' Just started developing this one, not 100% complete yet.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private Const VENDOR As String = "domotiga-xpl"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "xPL"
Public PluginFriendlyName As String = "xPL"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[xPL] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Property xPLDebug As Boolean
Property Interface As String
Property HeartBeatTime As Integer
Property TargetHost As String
Property OurIPAddress As String

Private $bDebug As Boolean
Private $sInterface As String
Private $iHeartBeatTime As Integer
Private $sTargetHost As String
Private $sOurIPAddress As String

Public hxPLListener As New UdpSocket
Public hxPLSender As New UdpSocket

Private iListenerPort As Integer = 50000

Public tHBeatTimer As Timer
Public xPLMsg As New CxPLMsg

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iHeartBeatTime = cPl.Settings["heartbeat"]
  $bDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  StartListener()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function StartListener() As Boolean

  Dim iOffset As Integer

  ' try to close the connection
  Try hxPLListener.Close

  ' get a new one
  hxPLListener = New UdpSocket As "xPLListener"

  For iOffset = 0 To 5
    iListenerPort += iOffset
    Try hxPLListener.Port = iListenerPort
    Try hxPLListener.Bind()
    If Not Error Then
      ' start hbeat timer to stay connected to hub
      tHBeatTimer = New Timer As "tHBeatTimer"
      tHBeatTimer.Delay = 60000 * $iHeartBeatTime ' heartbeat interval
      tHBeatTimer.Start
      SendHeartBeat()

      ' Write to main logfile we connected successfully
      Main.WriteLog(LogLabel & PluginFriendlyName & " UDP Server listening on Port " & iListenerPort)
      IsRunning = True

      Return True
    Endif
  Next

  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " UDP Server FAILED to listen on Port " & iListenerPort)
  Return False

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " UDP Server FAILED to listen on Port " & iListenerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

Public Sub tHBeatTimer_Timer()

  SendHeartBeat()

End

Public Sub xPLListener_Read()

  Dim sData As String

  Try sData = Read #hxPLListener, Lof(hxPLListener)
  If Error Then
    Main.WriteDebugLog(LogLabel & "Error reading data from udp socket! -> " & Error.Text)
  Else
    If ValidateMsg(sData) Then
      ProcessData(xPLExtract(sData))
    Else
      Main.WriteDebugLog(LogLabel & "Received an invalid xPL message!")
    Endif
  Endif
  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sData)

End

Private Sub ValidateMsg(sData As String) As Boolean

  Dim sRegExp As Regexp
  Dim sPattern As String = "^xpl-(?<msgtype>trig|stat|cmnd)\n{\n(?:hop=\\d\n" &
   "|source=(?<sv>[0-9a-z]{1,8})-(?<sd>[0-9a-z]{1,8})\\.(?<si>[0-9a-zA-Z/-]{1,16})\n" &
   "|target=(?<target>(?<tv>[0-9a-z]{1,8})-(?<td>[0-9a-z]{1,8})\\.(?<ti>[0-9a-z/-]{1,16})|\\*)\n){3}" &
   "\\}\n" &
   "(?<class>[0-9a-z/-]{1,8})\\.(?<type>[0-9a-z/-]{1,8})\n" &
   "\\{\n" &
   "(?:(?<key>[0-9a-z/-]{1,16})=(?<val>[\x20-\xFF]{0,})\n)*" &
   "\\}\n$"

  sRegExp = New Regexp(sData, sPattern, Regexp.MultiLine)
  If sRegExp.Offset = 0 Then
    Return True   ' valid
  Else
    Return False  ' not valid
  Endif

End

Private Sub ProcessData(oxPLMsg As Object)

  Dim axPLSources As Object[] = [Main.hRFXComxPL, Main.hXBMCxPL]
  Dim oSource As Object
  Dim bFound As Boolean = False

  oxPLMsg.Source = GetHeaderValueFromKey(oxPLMsg, "source")
  Select oxPLMsg.Type
    Case "xpl-stat", "xpl-trig", "xpl-cmnd"
      If oxPLMsg.Source = VENDOR & "." & System.Host Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received message from ourselves, ignore.")
        bFound = True
      Else
        For Each oSource In axPLSources
          If oSource Then
            If oxPLMsg.Source = oSource.RXAddress Then
              oSource.ProcessxPLMsg(oxPLMsg)
              bFound = True
            Endif
          Endif
        Next
      Endif
    Case Else
      Main.WriteDebugLog(LogLabel & "Received unsupported message type '" & oxPLMsg.Type & "'")
  End Select
  If bFound = False And If $bDebug Then Main.WriteDebugLog(LogLabel & "Didn't find any matching xPL interface with source address '" & oxPLMsg.Source & "'")

End

Public Sub GetHeaderValueFromKey(oxPLMsg As CxPLMsg, sKey As String) As String

  Dim iCnt As Integer

  For iCnt = 0 To oxPLMsg.HeaderName.Max
    If oxPLMsg.HeaderName[iCnt] = sKey Then Return oxPLMsg.HeaderValue[iCnt]
  Next
  Return

End

Public Sub GetBodyValueFromKey(oxPLMsg As CxPLMsg, sKey As String) As String

  Dim iCnt As Integer

  For iCnt = 0 To oxPLMsg.BodyName.Max
    If oxPLMsg.BodyName[iCnt] = sKey Then Return oxPLMsg.BodyValue[iCnt]
  Next
  Return

End

Private Sub xPLExtract(sMsg As String) As CxPLMsg

  Dim xPLMsgLocal As New CxPLMsg
  Dim iSection As Integer = 1
  Dim sLine As String
  Dim aMsg, aScan As String[]

  aMsg = Split(sMsg, "\n")
  If aMsg.Count Then
    xPLMsgLocal.Type = aMsg[0]
    For Each sLine In aMsg

      ' start of message
      If iSection = 1 Then
        If sLine = "{" Then Inc iSection
      Endif

      ' parse header
      If iSection = 2 Then
        If sLine = "}" Then
          Inc iSection
        Else
          aScan = Scan(sLine, "*=*")
          If aScan.Count = 2 Then xPLMsgLocal.AddHeaderPair(aScan[0], aScan[1])
        Endif
      Endif

      ' look for schema
      If iSection = 3 Then
        If (Len(sLine) > 2) Then
          xPLMsgLocal.Schema = sLine
          Inc iSection
        Endif
      Endif

      ' start of body
      If iSection = 4 Then
        If sLine = "{" Then Inc iSection
      Endif

      ' parse body
      If iSection = 5 Then
        If sLine = "}" Then
          Inc iSection
        Else
          aScan = Scan(sLine, "*=*")
          If aScan.Count = 2 Then
            xPLMsgLocal.AddBodyPair(aScan[0], aScan[1])
          Endif
        Endif
      Endif
    Next
  Endif

  Return xPLMsgLocal

End

Public Sub SendHeartBeat()

  Dim sStatMsg As String = "xpl-stat\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=*\n}\n"
  Dim sHbeatMsg As String = "hbeat.app\n{\ninterval=" & $iHeartBeatTime & "\nport=" & iListenerPort & "\nremote-ip=" & $sOurIPAddress & "\nversion=" & Main.sProgramVersion & "\n}\n"

  SendMessage(sStatMsg & sHbeatMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send UDP message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendMessage(sMessage As String)

  ' sent it to all computers on this network
  hxPLSender = New UdpSocket As "Sender"
  hxPLSender.Broadcast = True
  hxPLSender.Port = 0
  hxPLSender.Bind()
  hxPLSender.TargetPort = 3865
  hxPLSender.TargetHost = $sTargetHost
  Write #hxPLSender, sMessage, Len(sMessage)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & sMessage)

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Cannot send xPL message! " & ERROR.Text & " at " & ERROR.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hxPLListener.Close
  Try hxPLSender.Close
  Try tHBeatTimer.Stop
  Main.WriteLog(LogLabel & "listener stopped.")

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & ERROR.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display error if connect failed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hxPLListener_Error()

  ' handle error
  Select Case hxPLListener.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(LogLabel & "The system does not allow to create a socket.")
    Case Net.CannotBindSocket
      Main.WriteLog(LogLabel & "Unable to bind a socket.")
    Case Net.CannotRead
      Main.WriteLog(LogLabel & "Error reading data.")
    Case Net.CannotWrite
      Main.WriteLog(LogLabel & "Error writing data.")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function XPLDebug_Read() As Boolean

  Return $bDebug

End

Private Sub xPLDebug_Write(Value As Boolean)

  $bDebug = Value

End

Private Function Interface_Read() As String

  Return $sInterface

End

Private Sub Interface_Write(Value As String)

  $sInterface = Value

End

Private Function HeartBeatTime_Read() As Integer

  Return $iHeartBeatTime

End

Private Sub HeartBeatTime_Write(Value As Integer)

  $iHeartBeatTime = Value

End

Private Function TargetHost_Read() As String

  Return $sTargetHost

End

Private Sub TargetHost_Write(Value As String)

  $sTargetHost = Value

End

Private Function OurIPAddress_Read() As String

  Return $sOurIPAddress

End

Private Sub OurIPAddress_Write(Value As String)

  $sOurIPAddress = Value

End
