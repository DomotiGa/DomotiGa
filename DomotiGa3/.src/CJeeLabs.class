' Gambas class file

' Description:
' CJeeLabs.class
' Support for JeeLabs JeeLinks interface and Sensors and KAKU commands

' Development Status:
' Working for JeeNodes.
' JLink needs to be loaded with RF12 DEMO sketch for
' KAKU control support.

' Links:
' http://jeelabs.org

' Credits:
' Thanks to Jean-Claude Wippler, Wouter Wolkers and Andy van Dongen.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "JeeLabs"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "JeeLabs JeeLink"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[JeeLabs] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $bJeeLabsDebug As Boolean

Public hJeeLabs As New SerialPort
Private sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bJeeLabsDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("JeeLabs Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hJeeLabs.Close

  ' get a new one
  hJeeLabs = New Serialport As "JeeLabs"

  With hJeeLabs
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hJeeLabs.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  If $bJeeLabsDebug Then Main.WriteDebugLog(LogLabel & "SendCommand (sAddress='" & sAddress & "', sCmd = '" & sCmd & "')")

  Select sType
    Case "ARC", "KAKU" ' KlikAanKlikUit with CodeWheel, NEXA, Domia Lite, Proove, ByeByeStandby, ELRO AB600, Intertechno, Duwi
      If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
        KAKU(sAddress, sCmd, iDeviceId)
      Else
        Main.WriteDebugLog(LogLabel & "Invalid ARC or KAKU address '" & sAddress & "' given!")
      Endif
    Case Else
      Main.WriteDebugLog(LogLabel & "unsupported device type in SendCommand. (" & sType & ")")
  End Select

End

Private Sub KAKU(sAddress As String, sCmd As String, Optional iDeviceId As Integer)

  Dim iDevice, iUnit, iStatus As Integer

  iUnit = Asc(Left$(sAddress, 1)) - &H40
  iDevice = Right$(sAddress, 2)

  Select UCase(sCmd)
    Case "ON"
      iStatus = "1"
    Case "OFF"
      iStatus = "0"
    Default
      Main.WriteDebugLog(LogLabel & "Unknown KAKU command '" & UCase(sCmd) & "' given!")
      Return
  End Select

  If $bJeeLabsDebug Then Main.WriteDebugLog(LogLabel & "Sending kaku command: " & iUnit & "," & iDevice & "," & iStatus & " k")
  Try Print #hJeeLabs, iUnit & "," & iDevice & "," & iStatus & " k"
  If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the serial port! -> " & Error.Text)

End

Public Sub JeeLabs_Read()

  Dim sData As String

  Try sData = Read #hJeeLabs, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from serial port! -> " & Error.Text)
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 And If Left(sBuffer, 2) = "OK" Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Private Sub ParseLine(sData As String)

  Dim sLine, sMotion, sLowBat As String
  Dim aScan As String[]
  Dim iDeviceId, iSensorId, iLDR, iHumi, iTemp, iLowBat As Integer
  Dim bPIR As Boolean

  If $bJeeLabsDebug Then Main.WriteDebugLog(LogLabel & sData)

  ' parse each line
  For Each sLine In Split(sData, "\n")
    ' parse sensor data
    aScan = Scan(sLine, "* * * * * *")
    If aScan.Count = 6 Then
      iSensorId = aScan[1]
      iSensorId = IIf(iSensorId > 31, iSensorId - 32, iSensorId)
      iLDR = aScan[2]
      bPIR = BTst(CInt(aScan[3]), 0)
      iHumi = Lsr(CInt(aScan[3]), 1)
      iTemp = (((256 * (CInt(aScan[5]) And 3) + CInt(aScan[4])) Xor 512) - 512)
      iLowBat = Lsr(CInt(aScan[5]), 2) And 1
      sLowBat = If(iLowBat, "Empty", "OK")
      sMotion = IIf(bPIR, "Motion", "No Motion")
      If $bJeeLabsDebug Then
        Main.WriteDebugLog(LogLabel & "Sensor ID: " & iSensorId)
        Main.WriteDebugLog(LogLabel & "LDR      : " & iLDR)
        Main.WriteDebugLog(LogLabel & "PIR      : " & sMotion)
        Main.WriteDebugLog(LogLabel & "Humi     : " & iHumi)
        Main.WriteDebugLog(LogLabel & "Temp     : " & iTemp)
        Main.WriteDebugLog(LogLabel & "LowBat   : " & iLowBat & " (" & sLowBat & ")")
      Endif
      ' try to find device with address, and correct interface type.
      iDeviceId = Devices.Find(Instance, iSensorId, InterfaceId, "JEELABS NODE")
      ' if found then update it's value
      If iDeviceId Then
        Devices.ValueUpdate(iDeviceId, 1, iTemp, Devices.ValueType_Temperature)
        Devices.ValueUpdate(iDeviceId, 2, iHumi, Devices.ValueType_Humidity)
        Devices.ValueUpdate(iDeviceId, 3, iLDR)
        Devices.ValueUpdate(iDeviceId, 4, sMotion)
        Devices.Battery(iDeviceId, sLowBat)
      Endif
    Endif
  Next

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Parsing data packet: " & sLine & " " & ERROR.Text & " at " & ERROR.Where)

End
