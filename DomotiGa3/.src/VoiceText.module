' Gambas module file

' Description:
' VoiceText.module
' Support for VoiceText, Cepstral's Swift, espeak and picotts.

' Development Status:
' Not implemented completely, but it works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private sOutput As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' speak text with voice
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speak(sText As String, Optional sSex As String)

  Dim sVoiceSex As String

  ' audio mute is enabled
  If Main.GlobalVar["Mute"] Then
    Main.WriteSpeakLog(("[Muted] '") & sText & "'")
  Else
    ' speak out loud
    Main.WriteSpeakLog("'" & sText & "'")
    If Main.bVoiceTextEnabled And Main.sVoiceTextEngine = "cepstral" Then
      If sSex Then
        Select Case LCase(sSex)
          Case "female"
            sVoiceSex = PickVoice(Main.sVoiceTextVoicesFemale)
          Case "male"
            sVoiceSex = PickVoice(Main.sVoiceTextVoicesMale)
          Case Else
            sVoiceSex = sSex
        End Select
      Else
        sVoiceSex = PickVoice(Main.sVoiceTextVoicesFemale)
      Endif

      ' Swift command-line synthesis program
      ' Version 5.1.0 of July 2008
      ' Copyright (c) 2000-2006, Cepstral LLC.

      ' Voice      | Version | Lic? | Gender | Age | Language         | Sample Rate
      ' -----------|---------|------|--------|-----|------------------|------------
      ' Linda      | 5.1.0   | Yes  | female | 25  | US English       | 16000 Hz
      ' Emily      | 5.1.0   | Yes  | female | 30  | US English       | 16000 Hz

      ' swift -n voice 'text to speak'

      If Not Main.sVoiceTextPrefixCmd Then
        Exec ["swift", "-n", sVoiceSex, "'" & sText & "'"] For Read As "Speaking"
      Else
        Exec [Main.sVoiceTextPrefixCmd, "swift", "-n", sVoiceSex, "'" & sText & "'"] For Read As "Speaking"
      Endif
    Else If Main.bVoiceTextEnabled And Main.sVoiceTextEngine = "espeak" Then
      ' espeak -v voice 'text to speak'
      If Not Main.sVoiceTextPrefixCmd Then
        Exec ["espeak", "-v", Main.sVoiceTextVoicesMale, "'" & sText & "'"] For Read As "Speaking"
      Else
        Exec [Main.sVoiceTextPrefixCmd, "espeak", "-v", Main.sVoiceTextVoicesMale, "'" & sText & "'"] For Read As "Speaking"
      Endif
    Else If Main.bVoiceTextEnabled And Main.sVoiceTextEngine = "picotts" Then
      ' pico2wave -l fr-FR -w test.wav "text to speak!"
      ' aplay test.wav
      If Not Main.sVoiceTextPrefixCmd Then
        Exec ["pico2wave", "-l", Main.sVoiceTextVoicesMale, "-w", "/tmp/pico.wav", "'" & sText & "'"] Wait For Read As "Speaking"
        Exec ["aplay", "/tmp/pico.wav"]
      Else
        'EXEC [Main.sVoiceTextPrefixCmd, "pico2wave", "-l", "fr-FR", "-w", "/tmp/pico.wav", "'" & sText & "'", "&&", "aplay", "/tmp/pico.wav", "&&", "rm", "-f", "/tmp/pico.wav"] FOR READ AS "Speaking"
        Exec [Main.sVoiceTextPrefixCmd, "pico2wave", "-l", Main.sVoiceTextVoicesMale, "-w", "/tmp/pico.wav", "'" & sText & "'"] Wait For Read As "Speaking"
        Exec ["aplay", "/tmp/pico.wav"]
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speaking_Read()

  Dim sLine As String

  sLine = Read #Last, -256
  sOutput &= sLine

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speaking_Error(sString As String)

  Main.WriteDebugLog("[VoiceText] " & Replace$(sString, "\n", ""))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' speak command finished
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speaking_Kill()

  If Main.bVoiceTextDebug And sOutput Then Main.WriteDebugLog("[VoiceText] " & sOutput)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' select voice to use
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function PickVoice(sVoices As String) As String

  Dim aVoices As String[]

  ' split them up if more than one voice is specified
  aVoices = Split(sVoices, ",")
  If aVoices.Count > 1 Then
    ' pick a random one ourselfs
    Return aVoices[Rnd(aVoices.Count)]
  Else
    Return sVoices
  Endif

End
