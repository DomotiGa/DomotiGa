' Gambas class file

' Description:
' CTelnetServer.class
' Built-in telnet server support for MisterHouse's mhsend for example.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "TelnetServer"
Public PluginFriendlyName As String = "Telnet Server (MisterHouse)"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[TelnetServer] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iTelnetPort As Integer
Private $bDebug As Boolean

Public hTelnetServer As ServerSocket

Private oClients As New Object[]
Private DIGITS As String[] = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iTelnetPort = cPl.Settings["telnetport"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  hTelnetServer = New ServerSocket As "TelnetServer"
  hTelnetServer.Type = Net.Internet
  hTelnetServer.Port = $iTelnetPort
  hTelnetServer.Listen(0)

  If hTelnetServer.Status = Net.Active Then
    Return True
  Endif
  Return False

End

' shutdown our web server
Private Sub Disconnect()

  hTelnetServer.Close()

End

Public Sub TelnetServer_Connection(RemoteHostIP As String)

  Dim hSocket As Socket

  If hTelnetServer.Status <= Net.Active Then Return
  hSocket = hTelnetServer.Accept()
  oClients.Add(hSocket)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Connect from client with ip address " & RemoteHostIP & " (" & DNS.ResolveHost(RemoteHostIP) & ") ")

End

Public Sub TelnetServer_Error()

  Main.WriteLog(LogLabel & "ERROR: Unable to bind socket.")

End

Public Sub Socket_Read()

  Dim sBuffer, sCommand, sArgument, sResponse, sText As String
  Dim aPacket, aCommand, aAuth, aLogin As String[]
  Dim iCnt As Integer
  Dim bAuthorized As Boolean = False

  If Last.Status <> Net.Connected Then Return
  Try sBuffer = Read #Last, Lof(Last)
  If Error Then Main.WriteDebugLog(LogLabel & "Cannot read from socket stream!")

  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sBuffer)

  aPacket = Split(sBuffer, "\n")
  aCommand = Split(aPacket[0], " ")
  If aCommand.Count = 1 Then
    sCommand = aCommand[0]
  Else If aCommand.Count = 2 Then
    sCommand = aCommand[0]
    sArgument = aCommand[1]
  Endif

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Command: " & sCommand)

  For iCnt = 1 To aPacket.Count - 1
    If InStr(aPacket[iCnt], "Authorization: Basic") Then
      aLogin = Scan(aPacket[iCnt], "Authorization: Basic *")
      If aLogin.Count = 1 Then
        aAuth = Split(UnpackU(aLogin[0]), ":")
        If aAuth.Count = 2 Then
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "User: " & aAuth[0])
            Main.WriteDebugLog(LogLabel & "Password: " & aAuth[1])
          Endif
          If CheckAuth(aAuth[0], aAuth[1]) Then
            If $bDebug Then
              Main.WriteDebugLog(LogLabel & "Authentication ok!")
            Endif
            bAuthorized = True
          Else
            If $bDebug Then
              Main.WriteDebugLog(LogLabel & "Authentication failed!")
            Endif
            bAuthorized = False
          Endif
        Else
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "User: " & aAuth[0])
            Main.WriteDebugLog(LogLabel & "No password specified.")
          Endif
          If CheckAuth(aAuth[0], "") Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Authentication ok!")
            bAuthorized = True
          Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Authentication failed!")
          Endif
          Return
        Endif
     Endif
    Endif
    sText = aPacket[iCnt]
  Next

  If bAuthorized Then
    Select sCommand
      Case "speak"
        VoiceText.Speak(sText)
        sResponse = "Data was spoken"
      Case "display", "log"
        Main.WriteLog(LogLabel & sText)
        sResponse = "Data was logged"
      Case "display"
        Main.WriteLog(LogLabel & sText)
        sResponse = "Data was displayed"
      Case "log"
        Main.WriteLog(LogLabel & sText)
        sResponse = "Data was logged"
      Case "run"

      Case "file"

    End Select
  Else
    sResponse = "Action is not authorized: " & sCommand & " " & sText
  Endif

  ' send result
  Try Write #Last, sResponse, Len(sResponse)
  If Error Then Main.WriteDebugLog(LogLabel & "Cannot write to socket stream!")

End

Private Function UnpackU(sCodedStr As String) As String

  Dim iIdx, iIdy, iPtr As Integer
  Dim iLengthUU, iAscAChar, iAscMin32 As Integer
  Dim sBinFour, sResult As String

  ' first character's ascii code - 32 is the length
  iAscAChar = Asc(Left$(sCodedStr, 1))
  iAscMin32 = iAscAChar - 32
  iLengthUU = iAscMin32
  iPtr = 0
  ' step through the uuencoded string character by character starting at the 2nd character(1st is the length)
  For iIdx = 2 To Len(sCodedStr)
    iAscAChar = Asc(Mid$(sCodedStr, iIdx, 1))
    ' only include what is not whitespace
    If iAscAChar > 31 And iAscAChar < 97 Then
      ' subtract 32 from the ascii code of the character
      iAscMin32 = iAscAChar - 32
      ' assemble a block of four 6-bit values
      sBinFour &= Right$("000000" & IntToBase(iAscMin32, 2), 6)
      ' once we have 4 binary 6-bit 'characters' in our string
      If Len(sBinFour) = 24 Then
        ' treat the 4-6bit characters as 3-8bit characters
        For iIdy = 1 To 3
          If iPtr < iLengthUU
            ' converts each block of 8 bits to its decimal value and assigns to the output byte array
            sResult &= Chr(ToInt(Mid$(sBinFour, 1 + ((iIdy - 1) * 8), 8), 2))
            Inc iPtr
          Endif
        Next
        sBinFour = ""
      Endif
    Endif
  Next
  Return sResult

End

Private Sub CheckAuth(sUser As String, sPasswd As String) As Boolean

  Dim rResult As Result

  Try rResult = Main.hDB.Exec("SELECT * FROM users WHERE username = &1", sUser)
  If rResult.Count = 1 Then
    If rResult!password = sPasswd Then
      Return True
    Endif
  Endif
  Return False

End

Private Function IntToBase(iNumberIn As Integer, iBase As Integer) As String

  Dim iRemain, iNumToDivide As Integer
  Dim sResult As String = ""

  iNumToDivide = iNumberIn
  Do While iNumToDivide / iBase > 0
    iRemain = iNumToDivide Mod iBase
    iNumToDivide = Int(iNumToDivide / iBase)
    sResult = DIGITS[iRemain] & sResult
  Loop
  Return sResult

End

Private Function ToInt(sInputStr As String, iBase As Integer) As Integer

  Dim iIdx, iMult, iResult, iValue As Integer

  iMult = 1
  For iIdx = Len(sInputStr) To 1 Step -1
    ' if we're in a base with digits bigger than 9 we need the find to return 10 for A, 11 for B, 12 for C etc.
    iValue = DIGITS.Find(UCase(Mid$(sInputStr, iIdx, 1))) * iMult
    iResult += iValue
    iMult *= iBase
  Next
  Return iResult

End

Public Sub Socket_Closed()

  oClients.Remove(oClients.Find(Last))

End

