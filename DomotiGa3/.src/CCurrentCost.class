' Gambas class file

' Description:
' CCurrentCost.class
' Support for Current Cost energy meters.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Alan Gray in 2014 and is a major rewrite of Renaud's in 2010.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "CurrentCost"
Public PluginFriendlyName As String = "CurrentCost Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[CurrentCost] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String

Public hMySocket As CSocket
Public hMySerial As CSerialPort

Private $sMsgData As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
  Try $sTCPHost = cPl.Settings["tcphost"]
  Try $iTCPPort = cPl.Settings["tcpport"]
  Try $sInterface = cPl.Settings["type"]

  InterfaceId = Devices.FindInterface("Current Cost Receiver")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry
  
  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = gb.String
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one - but store the retry counter between new instances
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = gb.String
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' Try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close

  ' Stop possible timers
  StopTimers()

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop all timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteDebugLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  IsRunning = False
  ErrorText = sMsg

  WriteLog("ERROR: " & sMsg)

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim sData As String
  Dim iCnt As Integer

  If vVar Then
    For iCnt = 1 To Len(vVar)
      sData = Mid(vVar, iCnt, 1)

      If sData = Chr(13) Or If sData = Chr(10) Then ' buffer until newline or cr then parse
        If Right($sMsgData, 6) = "</msg>" Then ProcessReceivedPacket($sMsgData)
        $sMsgData = ""
      Else
        $sMsgData &= sData
      Endif

    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data back from MySensors gateway and parse it when it's complete
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim sData As String
  Dim iCnt As Integer

  If vVar Then
    For iCnt = 1 To Len(vVar)
      sData = Mid(vVar, iCnt, 1)

      If sData = Chr(13) Or If sData = Chr(10) Then ' buffer until newline or cr then parse
        If Right($sMsgData, 6) = "</msg>" Then ProcessReceivedPacket($sMsgData)
        $sMsgData = ""
      Else
        $sMsgData &= sData
      Endif

    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process data read by serial port
' Decides if data is History, Real-time value or Real-Time pulse
' and sends to appropriate "getput.." routine. 
' It gets the ID for the device from the system and the device type) from the data.
' (1=electric value,' 2=electric pulse, 3=gas, 4=water.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sStr As String)

  Dim iDeviceId As Integer
  Dim aScan As String[]
  Dim bHistory As Boolean
  Dim sType, sId As String

  If $bDebug Then WriteDebugLog("< " & sStr)
  aScan = Scan(sStr, "*<hist>*</hist>*")
  If aScan.Count = 0 Then bHistory = False Else bHistory = True

  aScan = Scan(sStr, "*<type>*</type>*")

  ' We require a <type>, otherwise it is an invalid packet?
  If aScan.Count >= 1 Then
    sType = aScan[1]
    If bHistory Then
      GetPutHistoryData(sStr)
    Else
      aScan = Scan(sStr, "*<id>*</id>*")
      sId = aScan[1]
      iDeviceId = Devices.Find(Instance, sId, InterfaceId, "CCOST")
      Select sType
        Case 1  'electric watt meter ie direct values
          GetPutRealTimeValueData(iDeviceId, sType, sStr)
        Case 2, 3, 4  ' pulse data 2 is electric, 3 is gas, 4 is water
          GetPutRealTimePulseData(iDeviceId, sType, sStr)
        Case Else
          WriteDebugLog("Unknown type '" & sType & "' received")
      End Select
    Endif
  Else
    WriteLog("ERROR: Invalid packet received, missing <type>...</type>")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' This is just a stub that receives that type of data, but does nothing.
' Needs to be implemented.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPutHistoryData(sStr As String)

  sStr = sStr
  ' Two hourly history
  '<msg> start Of message
  ' <src> CC128 - v0.19</src> [ As For Real - Time]
  ' <uid> 161 A582015AA09B</uid> [ As For Real - Time]
  ' <dsb> 00089</dsb> [ As For Real - Time]
  ' <Time> 13: 10: 50</Time> [ As For Real - Time]
  ' <hist> start Of history
  ' <dsw> 00032</dsw> days since wipe Of history
  ' <type> 1</type> sensor Type, "1" = electricity
  ' <units> kwhr</units> units Of data eg KWHr
  ' <data> start Of data burst
  ' <sensor> 0</sensor> historic Appliance Number
  ' <h024> 001.1</h024> h = "hours", 24 = "22 to 24 hrs ago"
  ' <h022> 000.9</h022> h = "hours", 22 = "20 to 22 hrs ago"
  ' <h020> 000.3</h020> h = "hours", 18 = "18 to 20 hrs ago"
  ' <h018> 000.4</h018> h = "hours", 22 = "16 to 18 hrs ago"
  '</data>
  ' ...[Sensor 1 To 8 data here]
  ' <data>
  ' <sensor> 9</sensor>
  ' <units> kwhr</units>
  ' <h024> 000.0</h024>
  ' <h022> 000.0</h022>
  ' <h020> 000.0</h020>
  ' <h018> 000.0</h018>
  '</data>
  '</hist>
  '</msg> End Of Message

  ' Daily history
  '<msg>
  ' <src> CC128 - v0.19</src>
  ' <uid> 161 A582015AA09B</uid>
  ' <dsb> 00089</dsb>
  ' <Time> 13: 10: 50</Time>
  ' <hist>
  ' <dsw> 00032</dsw>
  ' <type> 1</type>
  ' <units> kwhr</units>
  ' <data>
  ' <sensor> 0</sensor>
  ' <units> kwhr</units>
  ' <d055> 012.9</d055> d = "days", 055 = "55 days ago"
  ' <d054> 011.0</d054>
  ' <d053> 014.3</d053>
  ' <d052> 019.5</d052>
  '</data>
  ' ...[Sensor 1 To 8 data here]
  ' <data>
  ' <sensor> 9</sensor>
  ' <units> kwhr</units>
  ' <d055> 000.0</d055>
  ' <d054> 000.0</d054>
  ' <d053> 000.0</d053>
  ' <d052> 000.0</d052>
  '</data>
  '</hist>
  '</msg>

  ' Monthly history
  '<msg>
  ' <src> CC128 - v0.19</src>
  ' <uid> 161 A582015AA09B</uid>
  ' <dsb> 00089</dsb>
  ' <Time> 13: 10: 50</Time>
  ' <hist>
  ' <dsw> 00032</dsw>
  ' <type> 1</type>
  ' <units> kwhr</units>
  ' <data>
  ' <sensor> 0</sensor>
  ' <units> kwhr</units>
  ' <m002> 257.0</m002> m = "month", 002 = "2 months ago"
  ' <m001> 340.0</m001>
  '</data>
  ' ...[Sensor 1 To 8 data here]
  ' <data>
  ' <sensor> 9</sensor>
  ' <units> kwhr</units>
  ' <m002> 000.0</m002>
  ' <m001> 000.0</m001>
  '</data>
  '</hist>
  '</msg>

  If $bDebug Then WriteDebugLog(" received history data.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse realtime data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPutRealTimeValueData(iDeviceId As Integer, sType As String, sStr As String)

  Dim bValid As Boolean
  Dim sValue, sTarget As String
  Dim iValueNum As Integer = 0
  Dim sTargetList As String[]

  sType = sType
  '<msg> start Of message
  ' <src> CC128 - v1.29 </src> source And software version * *
  ' <uid> 161 A582015AA09B </uid> unique ID * (see text †)
  ' <dsb> 00089 </dsb> days since birth, ie days run
  ' <Time> 13: 02: 39 </Time> 24 Hour clock Time *
  ' <tmpr> 18.7 </tmpr> temperature As Measured In degC * #
  ' <tmprF> 72.3 </tmprF> temperature As Measured In degF *
  ' <sensor> 1 </sensor> Appliance Number As Displayed
  ' <id> 01234 </id> radio ID received From the sensor
  ' <type> 1 </type> sensor Type, "1" = electricity
  ' <ch1> sensor channel *
  '   <watts> 00345 </watts> data And units
  ' </ch1>
  ' <ch2> sensor channel *
  '   <watts> 02151 </watts>
  ' </ch2>
  ' <ch3> sensor channel *
  '   <watts> 00000 </watts>
  ' </ch3>
  '</msg> End Of message

  sTargetList = ["*<ch1><watts>*</watts></ch1>*", "*<ch2><watts>*</watts></ch2>*", "*<ch3><watts>*</watts></ch3>*", "*<tmpr>*</tmpr>*"]
  For Each sTarget In sTargetList
    Inc iValueNum
    sValue = ExtractValue(sStr, sTarget)
    If sValue = "" Then
      CurrentCostUpdateError(iDeviceId, " Could not read ", iValueNum)
    Else
      bValid = InsertCurrentCostData(iDeviceId, iValueNum, sValue)
      If Not bValid Then CurrentCostUpdateError(iDeviceId, " Could not write ", iValueNum)
    Endif
  Next 'sTarget

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Extract specified values and place them in consecutive device "Value" stores.
' Current Cost warn that software must be tolerant of the absence of individual data-fields
' as this will vary by device. Thus the fields chosen and the order in which they are
' placed in Value1, Value2 etc are set by the programmer.
' sStr is the raw data
' iDeviceId is the Current Cost device ID
' sType is the Current Cost device type
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPutRealTimePulseData(iDeviceId As Integer, sType As String, sStr As String)

  Dim sTarget, sValue As String
  Dim iValueNum As Integer = 0
  Dim bValid As Boolean
  Dim sTargetList As String[]

  sType = sType
  '<msg> start Of message
  ' <src> CC128 - v1.29 </src> source And software version * *
  ' <uid> 161 A582015AA09B </uid> unique ID * (see previous text †)
  ' <dsb> 00089 </dsb> days since birth, ie days run
  ' <Time> 13: 02: 39 </Time> 24 Hour clock Time *
  ' <tmpr> 18.7 </tmpr> temperature As Measured In degC *
  ' <tmprF> 72.3 </tmprF> temperature As Measured In degF *
  ' <sensor> 9 </sensor> Appliance Number As Displayed
  ' <id> 01234 </id> radio ID received From the sensor
  ' <type> 2 </type> sensor Type, 2 = electric impulse
  ' <imp> 0000089466 </imp> Meter Impulse Count
  ' <ipu> 1000 </ipu> Meter Impulses Per Unit
  '</msg> End Of message

  sTargetList = ["*<imp>*</*imp>", "*<ipu>*</ipu>*", "*<tmpr>*</tmpr>*"]
  If $bDebug Then WriteDebugLog(" received pulse data.")
  For Each sTarget In sTargetList
    Inc iValueNum
    sValue = ExtractValue(sStr, sTarget)
    If sValue = "" Then
      CurrentCostUpdateError(iDeviceId, " Could not read ", iValueNum)
    Else
      bValid = InsertCurrentCostData(iDeviceId, iValueNum, sValue)
      If Not bValid Then CurrentCostUpdateError(iDeviceId, " Could not write ", iValueNum)    
    Endif
  Next 'sTarget

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Returns value of "Target" in string Str or "" (empty string) if not found.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ExtractValue(sStr As String, sTarget As String) As String

  Dim sValue As String
  Dim sExtracted As String[]

  sExtracted = Scan(sStr, sTarget)
  If sExtracted.count > 0 Then sValue = sExtracted[1] Else sValue = ""
  Return sValue

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Inserts "Value" in device value store number "ValueNum". Returns true/false according to success
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub InsertCurrentCostData(iDeviceId As Integer, iValueNum As Integer, sValue As String) As String

   Return Devices.ValueUpdate(iDeviceId, iValueNum, sValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Puts entry in debug log "Could not read"/"Could not write" value numberX DeviceY
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CurrentCostUpdateError(iDeviceId As Integer, sError As String, iValueNum As Integer)

  If $bDebug Then WriteDebugLog(sError & " Value '" & iValueNum & "' Device '" & iDeviceId & "'")

End

