' Gambas class file

' Description:
' CCurrentCost.class
' Support for Current Cost energy meters.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Renaud in 2010.

' Read file called COPYING for license details.

Property Port As String
Property Baud As String
Property CurrentCostDebug As Boolean

Private sPort As String
Private sBaud As String
Private bCurrentCostDebug As Boolean

Public hCurrentCost As New SerialPort

Public sBuffer As String
Public sAddress As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hCurrentCost.Close

  ' get a new one
  hCurrentCost = New Serialport As "CurrentCost"

  With hCurrentCost
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog("CurrentCost Error: " & ERROR.Text)
  Return False

End

Public Sub CurrentCost_Read()

  Dim sData As String

  Try sData = Read #hCurrentCost, 1
  If Error Then Main.WriteDebugLog(("[CurrentCost] Error reading data from serial port! -> ") & Error.Text)
  If sData = Chr(10) Or If sData = Chr(13) Then ' buffer until newline or cr then parse
    If Right(sBuffer, 6) = "</msg>" Then ParseMessage(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub ParseMessage(sStr As String)

  Dim iDeviceId As Integer
  Dim aScan As String[]
  Dim sValue, sMaxValue As String

  If bCurrentCostDebug Then Main.WriteDebugLog("[CurrentCost] " & sStr)

  ' scan message
  aScan = Scan(sStr, "*<id>*</id>*<watts>*</watts>*")
  ' scan again with different pattern
  If aScan.Count <> 5 Then aScan = Scan(sStr, "*<sensor>*</sensor>*<watts>*</watts>*")
  ' here we have instantaneous data logging
  If aScan.Count = 5 Then
    sValue = aScan[3]
    sAddress = aScan[1]
    ' try to find device with address, and correct interface type.
    iDeviceId = Devices.Find(sAddress, Devices.FindInterface("Current Cost Receiver"), "CCOST")
    ' if found then update it's value
    If iDeviceId Then
      Devices.ValueUpdate(iDeviceId, "", sValue, "", "")
      sMaxValue = Devices.GetCurrentValueForDevice(iDeviceId, 3)
      If sValue > sMaxValue Then
        Main.WriteLog(("[Current Cost] Max electrical consumption reached ") & sValue & (" Watts"))
        Devices.ValueUpdate(iDeviceId, "", "", sValue, "")
      Endif
    Endif
    aScan = Scan(sStr, "*<h004>*</h004>*")
    ' here we have real time data
    If aScan.Count = 3 Then
      ' if found then update it's value
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, aScan[1], "", "", "")
    Endif
    aScan = Scan(sStr, "*<tmpr>*</tmpr>*")
    ' here we have temperature data
    If aScan.Count = 3 Then
      ' if found then update it's value
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, "", "", "", Trim(aScan[1]))
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hCurrentCost.Close
  Main.WriteLog("CurrentCost serial port close.")

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog("CurrentCost Error: " & ERROR.Text)
  Return False

End

' implement properties
Function Port_Read() As String

  Return sPort

End

Sub Port_Write(Value As String)

  sPort = Value

End

Private Function Baud_Read() As String

  Return sBaud

End

Private Sub Baud_Write(Value As String)

  sBaud = Value

End

Private Function CurrentCostDebug_Read() As Boolean

  Return bCurrentCostDebug

End

Private Sub CurrentCostDebug_Write(Value As Boolean)

  bCurrentCostDebug = Value

End
