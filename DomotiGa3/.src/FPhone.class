' Gambas class file

' Description:
' FPhone.class
' Display all phone call entries stored in the database.

' Development Status:
' Need to add doubleclick event to edit contacts and more efficient sorting.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private tRefresh As New Timer
Private bAutoRefresh As Boolean
Private iCalls As Integer
Private bNoAnswer As Boolean
Private rResult As Result

Public Sub Form_Open()

  btnAll.Enabled = False
  GetPhoneCallsList()

  ' create refresh timer
  tRefresh = New Timer As "tRefresh"
  tRefresh.Delay = 3000 ' 3 seconds

End

Public Sub GetPhoneCallsList()

  Dim sSql As String = "SELECT * FROM cdr"

  ' select in or outgoing calls only
  If iCalls = 1 Then sSql &= " WHERE dcontext='default'"
  If iCalls = 2 Then sSql &= " WHERE dcontext='incoming'"

  If bNoAnswer Then
    If iCalls = 0 Then
      sSql &= " WHERE disposition='NO ANSWER'"
    Else
      sSql &= " AND disposition='NO ANSWER'"
    Endif
  Endif

  Try rResult = Main.hDB.Exec(sSql & " ORDER BY calldate DESC")
  If Not Error Then
    If Not rResult Then Return

    With gvPhoneCalls
      .Columns.Count = 7
      .Rows.Count = rResult.Count
      .Font.Size = "9"
      .Columns[0].Title = ("Type")
      .Columns[0].Width = 80
      .Columns[1].Title = ("Name")
      .Columns[1].Width = 190
      .Columns[2].Title = ("Number")
      .Columns[2].Width = 110
      .Columns[3].Title = ("Line")
      .Columns[3].Width = 100
      .Columns[4].Title = ("Time")
      .Columns[4].Width = 140
      .Columns[5].Title = ("Duration")
      .Columns[5].Width = 70
      .Columns[6].Title = ("Status")
      .Columns[6].Width = 110
    End With
  Endif

End

Public Sub gvPhoneCalls_ColumnClick(iColumn As Integer)

  FMain.SortGridView(FPhone.gvPhoneCalls, iColumn, True)

End

Public Sub gvPhonecalls_Data(Row As Integer, Column As Integer)

  Dim sName, sNumber As String

  If Row Mod 2 Then gvPhoneCalls.Data.Background = Color.Background

  Try rResult.MoveTo(Row)
  If Not Error Then
    If rResult!dcontext == "default" Then
      sNumber = rResult!dst
    Else
      sNumber = rResult!src
    Endif

    Select Case Column
      Case 0
        If rResult!dcontext == "default" Then
          gvPhoneCalls.Data.Text = ("Outgoing")
          sNumber = rResult!dst
        Else
          gvPhoneCalls.Data.Text = ("Incoming")
          sNumber = rResult!src
        Endif
      Case 1
        sName = CallerID.FindCallerNameContact(sNumber)
        If (sName = "") And (Len(sNumber) > 4) Then sName = CallerID.FindCallerNameContact(Main.sCallerIDNationalPrefix & Main.sCallerIDAreaCode & sNumber)
        gvPhoneCalls.Data.Text = sName
      Case 2
        gvPhoneCalls.Data.Text = sNumber
      Case 3
        gvPhoneCalls.Data.Text = rResult!channel
      Case 4
        gvPhoneCalls.Data.Text = Replace$(Str$(Format(rResult!calldate, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Case 5
        gvPhoneCalls.Data.Text = TimeString(rResult!billsec)
      Case 6
        gvPhoneCalls.Data.Text = Main.Caps(LCase(rResult!disposition))
    End Select
  Endif

End

Private Function TimeString(lSeconds As Long) As String

  Dim lHrs, lMinutes As Long
  Dim sTime As String

  lHrs = Int(lSeconds / 3600)
  lMinutes = (Int(lSeconds / 60)) - (lHrs * 60)
  lSeconds = Int(lSeconds Mod 60)

  If lSeconds = 60 Then
    Inc lMinutes
    lSeconds = 0
  Endif

  If lMinutes = 60 Then
    Inc lHrs
    lMinutes = 0
  Endif
  sTime = Format(CStr(lHrs), "####00") & ":" & Format(CStr(lMinutes), "00") & ":" & Format(CStr(lSeconds), "00")
  Return sTime

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRefresh_Timer()

  GetPhoneCallsList()

End

Public Sub Form_Close()

  tRefresh.Stop

End

Public Sub Form_LostFocus()

  tRefresh.Stop

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then tRefresh.Start

End

Public Sub Form_Resize()

  gvPhoneCalls.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    tRefresh.Start
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    tRefresh.Stop
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

Public Sub btnRefresh_Click()

  GetPhoneCallsList()

End

Public Sub btnAll_Click()

  iCalls = 0
  btnAll.Enabled = False
  btnIncoming.Enabled = True
  btnOutgoing.Enabled = True
  GetPhoneCallsList()

End

Public Sub btnOutgoing_Click()

  iCalls = 1
  btnOutgoing.Enabled = False
  btnAll.Enabled = True
  btnIncoming.Enabled = True
  GetPhoneCallsList()

End

Public Sub btnIncoming_Click()

  iCalls = 2
  btnIncoming.Enabled = False
  btnAll.Enabled = True
  btnOutgoing.Enabled = True
  GetPhoneCallsList()

End

Public Sub tbtnNoAnswer_Click()

  bNoAnswer = tbtnNoAnswer.Value
  GetPhoneCallsList()

End

Public Sub gvPhoneCalls_DblClick()

  If gvPhoneCalls.Row = -1 Then Return

  ' open contacts editor window
  If gvPhoneCalls.Column Then
    FEditContacts.sFilter = gvPhoneCalls[gvPhoneCalls.Row, 2].Text
    FEditContacts.Show
  Endif

End
