' Gambas module file

' Description:
' X10Cmd.module
' Use Heyu or other command to control X10 devices.

' Development Status:
' Writing is working, maybe better error checking is needed.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Reading device status code was written by Renaud.

' Read file called COPYING for license details.

Private sOutput As String
Private sMonitorBuffer As String
Private pMonitor As Process
Private cQueue As New Collection  ' command buffer
Private bX10CmdBusy As Boolean  ' waiting for command to finish

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command with heyu or other command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sDevice As String, sCmd As String)

  Dim sCommand As String
  Dim aDim As String[]
  Dim iDim As Integer

  sCmd = UCase(sCmd)

  If InStr(sCmd, "ON") Or InStr(sCmd, "OFF") Then
    Select Main.iX10Cmdtype
      Case 0 ' cm11a heyu
        sCommand = LCase(sCmd) & " " & sDevice
      Case 1 ' cma15a cm15ademo
        sCommand = LCase(sDevice) & " " & LCase(sCmd)
      Case 2 ' cm17a heyu
        sCommand = "f" & LCase(sCmd) & " " & sDevice
    End Select
  Else If InStr(sCmd, "DIM ") Then ' DIM 1 - 99
    aDim = Split(sCmd, " ")
    If aDim.Count = 2 Then
      iDim = Val(aDim[1])
      Select Main.iX10Cmdtype
        Case 0 ' cm11a heyu
          If iDim > 0 Then iDim = Round(0.32 * iDim) ' 32 steps
          sCommand = "preset " & sDevice & " " & iDim
        Case 1 ' cm15a cm15ademo
          sCommand = LCase(sDevice) & " " & "xDim " & iDim
      End Select
    Else
      Main.WriteDebugLog(("[X10Cmd] invalid dim command format '") & sCmd & "'")
      Return
    Endif
  Else If InStr(sCmd, "DIM") Or InStr(sCmd, "BRIGHT") Then
    Select Main.iX10Cmdtype
      Case 0 ' heyu
        sCommand = LCase(sCmd) & " " & sDevice & " 2"
      Case 1 ' cm15ademo
        sCommand = LCase(sDevice) & " " & LCase(sCmd)
    End Select
  Else If InStr(sCmd, "STOP")
    ' ignore
  Else
    Main.WriteDebugLog(("[X10Cmd] Unsupported command '") & Main.sX10CmdCommand & " " & sCmd & "'")
    Return
  Endif
  QueueCommand(sCommand)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sCmd As String)

  ' add command to queue
  cQueue.Add(sCmd, Rnd)

  ' if interface is not busy process it
  If bX10CmdBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim sCmd As String

  For Each sCmd In cQueue
    RunCommand(sCmd, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunCommand(sCmd As String, sKey As String)

  If Main.iX10CmdType = 1 And Main.bX10CmdMonitor = True Then
     If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Run: ") & sCmd)
     Print #pMonitor, "x " & sCmd
  Else  
    If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Run: ") & Main.sX10CmdCommand & " " & sCmd)
    Shell Main.sX10CmdCommand & " " & sCmd & " 2>&1" For Read As "X10Cmd"
    If bX10CmdBusy = False Then bX10CmdBusy = True
  Endif
  
  ' remove command from queue
    cQueue.Remove(sKey)
    
Catch
  Main.WriteDebugLog(("[X10Cmd] Error executing: '") & Main.sX10CmdCommand & " " & sCmd & "' " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10Cmd_Read()

  Dim sLine As String

  sLine = Read #Last, -256
  sOutput &= sLine

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' command has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10Cmd_Kill()

  If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Result: ") & sOutput)
  sOutput = Null

  bX10CmdBusy = False
  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Sending next command from Queue (count = " & cQueue.Count & ")"))
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start heyu monitor
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Monitor()

   Select Main.iX10Cmdtype
      Case 0 ' heyu
        pMonitor = Exec [Main.sX10CmdCommand, "monitor"] For Read As "X10CmdMonitor"
      Case 1 ' cm15ademo
        pMonitor = Exec [Main.sX10CmdCommand] For Read Write As "X10CmdMonitor"
      Case 2 ' cm17
        Main.WriteDebugLog("[X10CMD] Monitor not aviable")
    End Select

    Catch
      Main.WriteDebugLog(("[X10Cmd] Error executing: '") & Main.sX10CmdCommand & " monitor' " & Error.Text & " at " & Error.Where)


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read monitor output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10CmdMonitor_Read()

  Dim sLine As String

  Try sLine = Read #Last, -256
  If Error Then Main.WriteDebugLog(("[X10Cmd] Error reading data from monitor output-> ") & Error.Text)
  If Len(sLine) > 0 Then
    sMonitorBuffer &= sLine
    
    
    If InStr(sMonitorBuffer, "func") > 0 And Main.iX10Cmdtype = 0 Then  ' heyu
      ParseMonitorMessageHeyu(sMonitorBuffer)
      sMonitorBuffer = Null
    Endif
    
    If InStr(sMonitorBuffer, "PLC-") > 0 And Main.iX10Cmdtype = 1 Then  ' cm15demo
      ParseMonitorMessageCm15demo(sMonitorBuffer)
      sMonitorBuffer = Null
    Endif
    
    
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse monitor output for heyu
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseMonitorMessageHeyu(sMessage As String)

  Dim iDeviceId, iCnt As Integer
  Dim aFirstLine, aSecondLine As String[]
  Dim sAddress, sOrder, sHouseCode As String

  If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Monitor get: ") & sMessage)

  ' Message sample :
  ' 1 line : 09/19 18:44:53  rcvi addr unit       4 : hu I4  (_no_alias_)
  ' 2 line : 09/19 18:44:53  rcvi func          Off : hc I

  aFirstLine = Scan(sMessage, "*addr unit* : hu*(*")
  aSecondLine = Scan(sMessage, "*func*: hc*")

  If aFirstLine.Count = 4 And aSecondLine.Count = 3 Then
    sAddress = Trim(aFirstLine[2])

    If Len(sAddress) = 2 Then
      sAddress = Left(sAddress, 1) & "0" & Right(sAddress, 1)
    Endif
    sOrder = Trim(aSecondLine[1])

    If Main.bX10CmdGlobalX10 Then
      iDeviceId = Devices.FindAll(sAddress, 9999, "X10")
    Else
      iDeviceId = Devices.Find(sAddress, Devices.FindInterface("X10Cmd Interface"), "X10")
    Endif

    ' if found then update it's value
    If iDeviceId Then Devices.ValueUpdate(iDeviceId, sOrder, "", "", "")
  Else ' support for AllOff
    If aSecondLine.Count = 3 And Trim(aSecondLine[1]) = "AllOff" Then
      sHouseCode = Trim(aSecondLine[2])
      If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] AllOff command detected for HouseCode: ") & sHouseCode)
      For iCnt = 1 To 16 Step 1
        sAddress = sHouseCode & Format(iCnt, "0#")
        If Main.bX10CmdGlobalX10 Then
          iDeviceId = Devices.FindAll(sAddress, 9999, "X10")
        Else
          iDeviceId = Devices.Find(sAddress, Devices.FindInterface("X10Cmd Interface"), "X10")
        Endif
        If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Switching device ") & sHouseCode & icnt & (" Off"))
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      Next
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse monitor output for cm15demo
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseMonitorMessageCm15demo(sMessage As String)

  Dim iDeviceId, iCnt As Integer
  Dim data As String[]
  Dim sAddress, sOrder, sHouseCode, sCurrentValue As String

  If Main.bX10CmdDebug Then Main.WriteDebugLog(("[X10Cmd] Monitor get: ") & sMessage)

  ' Message sample :
  ' date X PLC-R: C-1  Off        ?

  data = Scan(sMessage, "*PLC-R: * * *")
 
  If data.Count = 4
    sAddress = Trim(data[1])
    sAddress = Replace$(sAddress, "-", "")
    If Len(sAddress) = 2 Then
      sAddress = Left(sAddress, 1) & "0" & Right(sAddress, 1)
    Endif
    
    sOrder = Trim(data[2])

    If Main.bX10CmdGlobalX10 Then
       iDeviceId = Devices.FindAll(sAddress, 9999, "X10")
    Else
       iDeviceId = Devices.Find(sAddress, Devices.FindInterface("X10Cmd Interface"), "X10")
    Endif
  
    If iDeviceId > 0 Then ' if found then update it's value
      sCurrentValue = Devices.GetValueForDevice(Devices.FindNameForDevice(iDeviceId))
      If Not (sCurrentValue Like sOrder) Then 
        Devices.ValueUpdate(iDeviceId, sOrder, "", "", "")
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stop monitor
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Monitor_Stop()

  Try pMonitor.Kill

End
