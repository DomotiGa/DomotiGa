' Gambas class file

' Description:
' CPachube.class
' Support for Pachube (pronounce: patch-bay) sensors network.

' Development Status:
' Just build, so possible bugs around.

' Links:
' http://www.pachube.com

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Pachube"
Public PluginType As Integer = Plugin.Type_Module
Public PluginFriendlyName As String = "Pachube"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Pachube] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iFeed As Integer
Private $iPushTime As Integer
Private $sAPIKey As String
Private $bDebug As Boolean

Public hPost As New HttpClient As "hPost"
Public tPachube As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry, Optional bRun As Boolean = True)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iFeed = cPl.Settings["feed"]
  $iPushTime = cPl.Settings["pushtime"]
  $sAPIKey = cPl.Settings["apikey"]
  $bDebug = cPl.Settings["debug"]

  ' Initialize 
  If bRun Then Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tPachube.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for Pachube
  tPachube = New Timer As "tPachube"
  tPachube.Delay = $iPushTime * 1000 * 60 ' multiply for minutes
  tPachube.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPachube_Timer()

  UploadPachubeData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create xml data and upload it to the service
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UploadPachubeData()

  Dim sContent As String

  ' if we are already uploading return
  If hPost.Status > 0 Then
    Main.WriteLog(LogLabel & "I'm already uploading sensor data to Pachube, skipping.")
    Return
  Endif

  ' create xml string
  sContent = CreatePachubeData()

  ' use httpclient to post xml to service
  hPost.URL = "https://www.pachube.com/api/feeds/" & $iFeed & ".xml?_method=put&key=" & $sAPIKey
  hPost.TimeOut = 10
  hPost.Async = True
  hPost.Post("text/xml", sContent)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sContent)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan pachube devices table and create xml document
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CreatePachubeData() As String

  Dim sXml, sValue, sTag As String
  Dim rResult As Result
  Dim aTags As String[]

  ' scan device table
  rResult = Main.hDB.Exec("SELECT * FROM devices_pachube")
  If Not rResult Then
    Main.WriteLog(LogLabel & "ERROR: table 'devices_pachube' not found!")
    Return
  Endif

  ' build header
  sXml = "<?xml version='1.0' encoding='UTF-8'?>\n"
  sXml &= "<eeml xmlns='http://www.eeml.org/xsd/005' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.eeml.org/xsd/005 http://www.eeml.org/xsd/005/005.xsd'>\n"
  sXml &= "<environment>\n"

  ' create device entries
  If rResult.Count Then
    For Each rResult
      sXml &= "<data id='" & rResult!datastreamid & "'>\n"
      aTags = Split(rResult!tags, ",")
      If aTags.Count > 0 Then
        For Each sTag In aTags
          sXml &= "<tag>" & LTrim(sTag) & "</tag>\n"
        Next
      Else
        sXml &= "<tag>" & rResult!tags & "</tag>\n"
      Endif
      sValue = Devices.GetCurrentValueForDevice(rResult!deviceid, rResult!value)
      sXml &= "<value>" & sValue & "</value>\n"
      sXml &= "<unit symbol='" & rResult!devicelabel & "' type='" & rResult!unittype & "'>" & rResult!units & "</unit>\n"
      sXml &= "</data>\n"
    Next
  Endif
  ' close document
  sXml &= "</environment>\n"
  sXml &= "</eeml>\n"

  Return sXml

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch error
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Error()

  Log.Plugin_CURL_Error(LogLabel, "www.pachube.com", Last.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check http return code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Finished()

  Dim iCount As Integer

  ' select on http result code and display message
  Select hPost.Code
    Case 0
      If InStr(hPost.Headers[0], "HTTP/1.1 200") Or If InStr(hPost.Headers[0], "HTTP/1.1 100") Then
        Main.WriteLog(LogLabel & "Uploaded sensor data to Pachube.")
      Else
        Main.WriteLog(LogLabel & "Unknown error occured while uploading sensor data to Pachube!")
      Endif
    Case 200
      Main.WriteLog(LogLabel & "Uploaded sensor data to Pachube.")
    Case 401
      Main.WriteLog(LogLabel & "Error authenticating while uploading sensor data to Pachube!")
    Case 403
      Main.WriteLog(LogLabel & "Error forbidden to upload sensor data to Pachube!")
    Case 404
      Main.WriteLog(LogLabel & "Error page not found while uploading sensor data to Pachube!")
    Case 422
      Main.WriteLog(LogLabel & "Error sensor data is not valid after uploading to Pachube!")
    Case 503
      Main.WriteLog(LogLabel & "Error rate limit exceeded while uploading sensor data to Pachube!")
    Case Else
      Main.WriteLog(LogLabel & "Unknown error occured while uploading sensor data to Pachube! (" & hPost.Code & ") " & hPost.Reason)
  End Select

  ' if debug is on print all http headers
  If Not $bDebug Then Return
  For iCount = 0 To hPost.Headers.Count - 1
    Main.WriteDebugLog(LogLabel & Left(hPost.Headers[iCount], Len(hPost.Headers[iCount])))
  Next

End

