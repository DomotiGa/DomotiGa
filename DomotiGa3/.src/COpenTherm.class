' Gambas class file

' Description:
' COpenTherm.class
' Support for OpenTherm gateway interface

' Development Status:
' Work in progress

' Links:
' http://www.tclcode.com/opentherm/index.html#intro

' Supported device addresses:
'
' Thermostat      : value1 = Room Temperature set point (°C)      - OpenTherm MsgID=16
'                   value2 = Room Temperature sensor (°C)         - OpenTherm MsgID=24
'                   value3 = Room set point status                - n/a
'                   value4 = Status OpenTherm master:
'                            - "Idle"                             - OpenTherm MsgID=0, Lowerbyte: 0000 0000
'                            - "Heating up room"                  - OpenTherm MsgID=0, Lowerbyte: 0000 0010
'                            - "Heating up boiler"                - OpenTherm MsgID=0, Lowerbyte: 0000 0100
'                            - "Cooling down room"                - OpenTherm MsgID=0, Lowerbyte: 0001 0000
'                            - "Error"                            - OpenTherm MsgID=0, Lowerbyte: 0000 0001
'
' CentralHeating  : value1 = CH set point (°C)                    - OpenTherm MsgID=57
'                   value2 = CH temperature (°C)                  - OpenTherm MsgID=1
'                   value3 = Modulation level (%)                 - OpenTherm MsgID=17
'                   value4 = Water pressure (Bar)                 - OpenTherm MsgID=18
'
'
' Boiler          : value1 = Boiler set point (°C)                - OpenTherm MsgID=56
'                   value2 = Boiler water temperature (°C)        - OpenTherm MsgID=25
'                   value3 = Boiler water flow (l/min)            - OpenTherm MsgID=19  [Only when polling is disabled.]
'                   value4
'
' Burner          : value1 = Flame status  (On/Off)               - OpenTherm MsgID=0, Lowerbyte: 0000 1000
'                   value2 = Burner starts (counter)              - OpenTherm MsgID=116
'                   value3 = CH Burner operation (hours)          - OpenTherm MsgID=120
'                   value4 = DHW Burner operation (hours)         - OpenTherm MsgID=123
'
' Outside         : value1 = Outside Temperature Sensor (°C)      - OpenTherm MsgID=27
'                   value2
'                   value3
'                   value4

' Credits: BreFra (Frank van Breugel)

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "OpenTherm"
Public PluginFriendlyName As String = "OpenTherm Gateway"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 9

Public KeyName As String
Public LogLabel As String = "[OpenTherm] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sInterface As String
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sSerPort As String
Private $bDebug As Boolean
Private $iPollTime As Integer
Private $sThermostat As String
Private $sTemperatureOverride As String
Private $bSyncClock As Boolean
Private $bRelayEnabled As Boolean
Private $iRelayPort As Integer

Public tOpenTherm As Timer
Public hOpenThermSer As New SerialPort
Public hOpenThermTCP As New Socket
Public hOpenThermRelay As New ServerSocket
Public hRelayOTClient As Object[]
Public hRelayOTSocket As New Socket

Private sBuffer As String
Private sBufferSocket As String
Private sTemperatureOverrideStatus As String

' Device IDs
Private iThermostatID As Integer            ' DeviceID of Thermostat device
Private iCHID As Integer                    ' DeviceID of Central Heating device
Private iBoilerID As Integer                ' DeviceID of Boiler device
Private iBurnerID As Integer                ' DeviceID of Burner device
Private iOutsideID As Integer               ' DeviceID of Outside temperature device

' local status variables
Private fRoomTemp As Float = 0              ' Room temperature
Private fRoomSetPoint As Float = 0          ' Room temperature set point
Private fOutsideTemp As Float = 0           ' Outside temperature
Private bFault As Boolean = False           ' Fault indicator
Private bCH As Boolean = False              ' Central Heating state (true = active)
Private bDHW As Boolean = False             ' Domestic hot water state (true = active)
Private bCooling As Boolean = False         ' Cooling state
Private bFlame As Boolean = False           ' Flame status
Private fCHModLevel As Float = 0            ' Relative modulation level
Private fCHWaterPress As Float = 0          ' CH Water pressure
Private fBoilerTemp As Float = 0            ' Boler water temperature
Private fBoilerSetPoint As Float = 0        ' Boiler temperature set point
Private fBurnerStarts As Float = 0          ' Burner starts counter
Private fCHSetPoint As Float = 0            ' Central Heating temperature set point
Private fCHBurnerHours As Float = 0         ' Burning hours central heating
Private fHWBurnerHours As Float = 0         ' Burning hours boiler
Private fBoilerFlow As Float = 0            ' Hot water flow

Private bApplicationError As Boolean        ' Indicates error state OpenTherm application
Private bIgnoreAbout As Boolean             ' Indicates if about message is expected
Private bOverrideActive As Boolean          ' Indicates if setpoint override is active
Private bOverrideSend As Boolean            ' Indicates if override setpoint is send to gateway
Private fCurrentSetPoint As Float           ' Setpoint received from gateway
Private fOverrideSetPoint As Float          ' Setpoint to override existing thermostat setpoint
Private fOriginalSetPoint As Float          ' Setpoint of thermostat before override
Private fOverrideBoilerSetPoint As Float    ' Boiler setpoint
Private fCentralHeatingSetPoint As Float    ' Central heating setpoint
Private bClockSyncedToday As Boolean        ' Indicates if clock is already synced
Private iDayOfMonth As Integer

Public tReConnect As Timer
Private iReConnectRetry As Integer = 0 ' retries
Private aReConnectDelay As Integer[] = [5000, 10000, 30000, 60000, 300000, 900000, 1800000, 3600000, 7200000, 14400000] ' 5sec, 10sec, 30sec, 1min, 5min, 15min, 1/2hour, 1hour, 2hours, 4hours

' queue and command buffer stuff
Private cQueue As New Collection    ' command buffer
Private bInterfaceBusy As Boolean   ' waiting for busy timer to finish
Public tInterfaceBusy As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sTCPhost = cPl.Settings["tcphost"]
  $iTCPport = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sThermostat = cPl.Settings["thermostat"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]
  $sTemperatureOverride = cPl.Settings["temperatureoverride"]
  $bRelayEnabled = cPl.Settings["relayenabled"]
  $iRelayPort = cPl.Settings["relayport"]
  $bSyncClock = cPl.Settings["syncclock"]

  ' Define timer for TCP reconnect
  tReConnect = New Timer As "tReConnect"
  tReConnect.Delay = iReConnectRetry
  tReConnect.Stop

  InterfaceId = Devices.FindInterface("OpenTherm Gateway")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

  ' Start relaying
  If $bRelayEnabled Then
    If StartRelay() Then
      Main.WriteLog(LogLabel & "Relay listening for client on port " & $iRelayPort)
    Else
      Main.WriteLog(LogLabel & "ERROR: Relay FAILED to listen  to port " & $iRelayPort)
    Endif
  Else
    Main.WriteLog(LogLabel & "Relay disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  ' try to close the port
  Try hOpenThermSer.Close

  ' get a new one
  hOpenThermSer = New Serialport As "OpenThermSer"

  With hOpenThermSer
    .PortName = $sSerPort
    .Speed = 9600
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  bIgnoreAbout = True
  Try Print #hOpenThermSer, "PR=A\r" ' request information about OpenTherm gateway
  If Error Then
    Main.WriteDebugLog(LogLabel & "Error writing data to serial port! -> " & Error.Text)
    Return False
  Else
    GetDeviceIDs()
    'Wait 1 ' wait to let the gateway repond to about request
    ' If bIgnoreAbout Then
    '   ' Try hOpenThermSer.Close
    '   Main.WriteDebugLog(LogLabel & "Gateway is not responding.")
    '   Return False
    ' Else
    ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
    IsRunning = True

    ' All went ok
    Return True
  '  Endif
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Receive data from serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OpenThermSer_Read()

  Dim sData As String

  Try Read #hOpenThermSer, sData, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from serial port! -> " & Error.Text)
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Open TCP port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP(Optional bFirstStart As Boolean = True) As Boolean

  ' try to close the connection
  Try hOpenThermTCP.Close
  bIgnoreAbout = True

  ' get a new one
  hOpenThermTCP = New Socket As "OpenThermTCP"
  hOpenThermTCP.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  If bFirstStart Then Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OpenThermTCP_Ready()

  GetDeviceIDs()
  Main.WriteLog(LogLabel & "TCP socket connected.")
  IsRunning = True

  ' connected so reset retry counter
  tReConnect.Stop
  iReConnectRetry = 0

  Try Print #hOpenthermTCP, "PR=A" ' get about information of opentherm gateway

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tReConnect_Timer()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OpenThermTCP_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")
  ReConnect()

End

Public Sub ReConnect()

  If iReConnectRetry < aReConnectDelay.Max + 1 Then
    Main.WriteLog(LogLabel & "Retry to connect in " & IIf(aReConnectDelay[iReConnectRetry] > 60000, CStr(aReConnectDelay[iReConnectRetry] / 60000) & " minutes.", CStr(aReConnectDelay[iReConnectRetry] / 1000) & " seconds."))
    tReConnect.Delay = aReConnectDelay[iReConnectRetry]
    tReConnect.Start
  Else
    tReConnect.Stop
    Main.WriteLog(LogLabel & "Too many reconnect failures, stopped trying.")
  Endif
  Inc iReConnectRetry

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OpenThermTCP_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Error occured while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OpenThermTCP_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg
  ReConnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Receive data from network socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OpenThermTCP_Read()

  Dim sData As String

  Try Read #hOpenThermTCP, sData, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from TCP socket! -> " & Error.Text)
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start relay port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function StartRelay() As Boolean

  hOpenThermRelay = New ServerSocket As "OpenThermRelay"
  hOpenThermRelay.Type = Net.Internet
  hOpenThermRelay.Port = $iRelayPort
  ' we start listening for max 1 connection
  hOpenThermRelay.Listen(1)

  If hOpenThermRelay.Status = Net.Active Then
    hRelayOTclient = New Object[]
    ' all ok
    Return True
  Else
    Return False
  Endif

End

Public Sub OpenThermRelay_Connection(sHost As String)

  hRelayOTSocket = New Socket As "RelayOTSocket"
  ' accept client
  If hOpenThermRelay.Status <= Net.Inactive Then Return
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Relay Connection request from client '" & sHost & "'")

  hRelayOTSocket = hOpenThermRelay.Accept()
  hRelayOTclient.Add(hRelayOTSocket)
  If $bDebug Then
    If hRelayOTSocket.Status = Net.Connected Then Main.WriteLog(LogLabel & "Relay client connection from IP address '" & hRelayOTSocket.RemoteHost & "' (" & DNS.ResolveHost(hRelayOTSocket.RemoteHost) & ") accepted.")
  Endif

End

Public Sub OpenThermRelay_Error()

  ' handle error
  Select Case hOpenThermRelay.Status
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(LogLabel & "Relay the system does not allow to create a socket.")
    Case Net.CannotBindSocket
      Main.WriteDebugLog(LogLabel & "Relay cannot bind socket.")
    Case Net.CannotListen
      Main.WriteDebugLog(LogLabel & "Relay cannot listen on port.")
  End Select

End

Public Sub OpenThermRelay_Closed()

  Main.WriteLog(LogLabel & "TCP relay socket closed.")

End

Public Sub Socket_Read()

  Dim sData As String

  If Last.Status <> Net.Connected Then Return
  Try Read #Last, sData, 1

  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBufferSocket) > 1 Then
      sBufferSocket = Left(sBufferSocket, Len(sBufferSocket) - 1)
      Main.WriteDebugLog(LogLabel & "Relay Received command from relay client '" & sBufferSocket & "'")
      QueueCommand(sBufferSocket)
    Endif
    sBufferSocket = Null
  Else
    sBufferSocket &= sData
  Endif

End

Public Sub Socket_Closed()

  Main.WriteLog(LogLabel & "Relay client connection closed.")
  hRelayOTclient.Remove(hRelayOTclient.Find(Last))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get device id's, and store them as local variables, this will speedup the code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetDeviceIDs()

  iThermostatID = Devices.Find(Instance, "Thermostat", InterfaceId, "OpenTherm Thermostat")
  If iThermostatID = 0 Then
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Thermostat device is missing and not automatically created. Thermostat updates will be ignored!")
      Main.WriteDebugLog(LogLabel & "Check if the device exists and is not disabled or hidden.")
    Endif
  Endif
  iCHID = Devices.Find(Instance, "CentralHeating", InterfaceId, "OpenTherm Central Heating")
  If iCHID = 0 Then
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Central heating device is missing and not automatically created. Central heating updates will be ignored!")
      Main.WriteDebugLog(LogLabel & "Check if the device exists and is not disabled or hidden.")
    Endif
  Endif
  iBoilerID = Devices.Find(Instance, "Boiler", InterfaceId, "OpenTherm Boiler")
  If iBoilerID = 0 Then
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Boiler device is missing and not automatically created. Boiler updates will be ignored!")
      Main.WriteDebugLog(LogLabel & "Check if the device exists and is not disabled or hidden.")
    Endif
  Endif
  iBurnerID = Devices.Find(Instance, "Burner", InterfaceId, "OpenTherm Burner")
  If iBurnerID = 0 Then
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Burner device is missing and not automatically created. Burner updates will be ignored!")
      Main.WriteDebugLog(LogLabel & "Check if the device exists and is not disabled or hidden.")
    Endif
  Endif
  iOutsideID = Devices.Find(Instance, "Outside", InterfaceId, "OpenTherm Outside sensor")
  If iOutsideID = 0 Then
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Outside sensor device is missing and not automatically created. Outside sensor updates will be ignored!")
      Main.WriteDebugLog(LogLabel & "Check if the device exists and is not disabled or hidden.")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start polling if enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' define timer for interface busy
  tInterfaceBusy = New Timer As "tInterfaceBusy"
  tInterfaceBusy.Delay = 150 ' default time between cmds

  If $iPollTime > 0 Then
    ' start poll timer
    tOpenTherm = New Timer As "tOpenTherm"
    tOpenTherm.Delay = $iPollTime * 1000 ' multiply for seconds
    tOpenTherm.Start
  Else
    ' don't turn on polling, just process all messages received via OpenTherm gateway connection
    QueueCommand("PS=0")
  Endif

End

Public Sub tOpenTherm_Timer()

  GetStatus()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request latest status report of OpenTherm gateway
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetStatus()

  Dim sDay As String

  ' request new status report
  QueueCommand("PS=1")
  If $bSyncClock Then
    If iDayOfMonth <> Day(Now) Then
      bClockSyncedToday = False
      iDayOfMonth = Day(Now)
    Endif
    If Not bClockSyncedToday Then
      ' TODO: make TimeCron configurable from GUI
      If Events.TimeCron("15 3 * * *") Then ' only once a day at 3:15
        Sleep 0.5 ' wait a little so reply of status report doesn't interfere
        bClockSyncedToday = True
        sDay = CStr(WeekDay(Now))
        If sDay = "0" Then sDay = "7" ' correct sundays
        QueueCommand("SC=" & Format(Now, "h:n") & "/" & sDay)
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sData As String)

  Dim sLine, sFlame, sThermostat As String
  Dim sResponses As String[]
  Dim iCount As Integer
  Dim bParseLine As Boolean

  Dim iMsgID As Integer
  Dim fTemp As Float
  Dim bTemp As Byte
  Dim sMsgData, sMsgDirection, sErrorDescription As String

  Main.ControlLed("OT", "On")
  ' parse each line
  For Each sLine In Split(sData, "\n")
    bParseLine = True

    ' relay incoming data to connected relayclient
    If $bRelayEnabled Then
      If hRelayOTSocket.Status = Net.Connected Then Try Write #hRelayOTSocket, sline & "\r\n"
    Endif

    Select Case Right(sLine, 2)
      Case "OK"
        'IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Received 'OK' response: The command was accepted."))
        bParseLine = False
      Case "NG"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'NG' response: The command code is unknown.")
        bParseLine = False
      Case "SE"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'SE' response: The command contained an unexpected character or was incomplete.")
        bParseLine = False
      Case "BV"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'BV' response: The command contained a value that is not allowed.")
        bParseLine = False
      Case "OR"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'OR' response: A number was specified outside of the allowed range.")
        bParseLine = False
      Case "NS"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'NS' response: The alternative Data-ID could not be added because the table is full.")
        bParseLine = False
      Case "NF"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'NF' response: The specified alternative Data-ID could not be removed because it does not exist in the table.")
        bParseLine = False
      Case "IP"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'IP' response: The device cannot perform the action at this time, but will do so as soon as possible.")
        bParseLine = False
      Case "OE"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'OE' response: Overrun error in command.")
        bParseLine = False
      Case "PF"
        'IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Received 'PF' response: The requested information will be printed in a separate report."))
        bParseLine = False
    End Select

    Select Case Right(sLine, 8)
      Case "Error 01"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'Error 01' response: A bit transistion happend at an unexpected time.")
        bParseLine = False
      Case "Error 02"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'Error 02' response: The stop bit was 0 while it should be 1.")
        bParseLine = False
      Case "Error 03"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'Error 03' response: A bit was not received when it was expected.")
        bParseLine = False
      Case "Error 04"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'Error 04' response: A parity error was detected on a received opentherm message.")
        bParseLine = False
    End Select

    If InStr(sLine, ":") Then
      ' If OTGW is running firmware 4.0 or later it will report the accepted command send to the OTGW
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Command '" & sline & "' accepted by gateway.")
      bParseLine = False
    Else
      If Len(sLine) = 9 Then 'AND NOT (bIgnoreAbout) THEN
        iMsgID = Val("&H" & Mid(sLine, 4, 2))
        sMsgData = Right(sLine, 4)
        fTemp = Val("&H" & sMsgData & "&")
        sMsgDirection = Left(sLine, 1)

        Select Case iMsgID  ' OpenTherm Message ID
          Case 0
            If sMsgDirection = "B" And Not (iThermostatID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received status message: " & sLine)
              bTemp = Val("&" & Right(sMsgData, 2)) ' Lower byte
              If $bDebug Then
                If BTst(bTemp, 0) Then Main.WriteDebugLog(LogLabel & " - status = Error.")
                If BTst(bTemp, 3) Then
                  Main.WriteDebugLog(LogLabel & " - status = Flame on")
                Else
                  Main.WriteDebugLog(LogLabel & " - status = Flame off")
                Endif
                If BTst(bTemp, 1) Then Main.WriteDebugLog(LogLabel & " - status = Heating up room.")
                If BTst(bTemp, 2) Then Main.WriteDebugLog(LogLabel & " - status = Heating boiler.")
                If BTst(bTemp, 4) Then Main.WriteDebugLog(LogLabel & " - status = Cooling down room.")
              Endif
              If (BTst(bTemp, 1) <> bCH) Then ' Central Heating state
                bCH = BTst(bTemp, 1)
                If bCH Then
                  Devices.ValueUpdate(iThermostatID, 4, "Heating up room")
                Else
                  Devices.ValueUpdate(iThermostatID, 4, "Idle")
                Endif
              Endif
              If (BTst(bTemp, 2) <> bDHW) Then ' Domestic hot water state
                bDHW = BTst(bTemp, 2)
                If bDHW Then
                  Devices.ValueUpdate(iThermostatID, 4, "Heating up boiler")
                Else
                  Devices.ValueUpdate(iThermostatID, 4, "Idle")
                Endif
              Endif
              If (BTst(bTemp, 3) <> bFlame) Then ' Flame status
                bFlame = BTst(bTemp, 3)
                If bFlame Then
                  Devices.ValueUpdate(iBurnerID, 1, "On")
                Else
                  Devices.ValueUpdate(iBurnerID, 1, "Off")
                Endif
              Endif
              If (BTst(bTemp, 4) <> bCooling) Then ' Cooling state
                bCooling = BTst(bTemp, 3)
                If bCooling Then
                  Devices.ValueUpdate(iThermostatID, 4, "Cooling down room")
                Else
                  Devices.ValueUpdate(iThermostatID, 4, "Idle")
                Endif
              Endif
              If (BTst(bTemp, 0) <> bFault) Then ' Fault indicator (details in message #5)
                bFault = BTst(bTemp, 0)
                If bFault Then
                  If Not (bApplicationError) Then Devices.ValueUpdate(iThermostatID, 4, "Unknown error")
                Else
                  Devices.ValueUpdate(iThermostatID, 4, "Idle")
                Endif
              Endif
            Endif
          Case 1  ' Control set point
            If sMsgDirection = "B" And Not (iCHID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received control set point message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - set point temperature = " & CStr(fTemp))
              If fCHSetPoint <> fTemp Then
                fCHSetPoint = fTemp
                Devices.ValueUpdate(iCHID, 1, Format(fCHSetPoint, "#0.0#"), Devices.ValueType_Temperature)
              Endif
            Endif
          Case 5  ' Application specific fault flags
            If sMsgDirection = "B" Then
              bTemp = Val("&" & Left(sMsgData, 2)) ' High byte
              If bTemp > 0 Then ' Check if a fault bit is set
                bApplicationError = True
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'application specific fault flags' message: " & sLine)
                sErrorDescription = ""
                If BTst(bTemp, 0) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = service required.")
                  sErrorDescription &= ", Service required"
                Endif
                If BTst(bTemp, 1) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = remote reset enabled.")
                  sErrorDescription &= ", remote reset enabled"
                Endif
                If BTst(bTemp, 2) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = water pressure fault.")
                   sErrorDescription &= ", water pressure fault"
                Endif
                If BTst(bTemp, 3) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = gas/flame fault.")
                   sErrorDescription &= ", gas/flame fault"
                Endif
                If BTst(bTemp, 4) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = air pressure fault.")
                  sErrorDescription &= ", air pressure fault"
                Endif
                If BTst(bTemp, 5) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = water over temperature fault.")
                  sErrorDescription &= ", water over temperature fault"
                Endif
                If BTst(bTemp, 6) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = <unknown> (bit 7 set).")
                  sErrorDescription &= ", unknown fault"
                Endif
                If BTst(bTemp, 7) Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & " - fault = <unknown> (bit 8 set).")
                  sErrorDescription &= ", unknown fault"
                Endif
                If Len(sErrorDescription) > 0 Then
                  sErrorDescription = Right(sErrorDescription, Len(sErrorDescription) - 2)
                  If Not (iThermostatID = 0) Then Devices.ValueUpdate(iThermostatID, 4, sErrorDescription)
                Endif
              Else
                If $bDebug Then
                  Main.WriteDebugLog(LogLabel & "Received 'application specific fault flags' message: " & sLine)
                  Main.WriteDebugLog(LogLabel & " - No fault flags set.")
                Endif
                bApplicationError = False
              Endif
            Endif
          Case 16 ' Room set point
            If sMsgDirection = "T" And Not (iThermostatID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received room set point message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - set point temperature = " & CStr(fTemp))
              fCurrentSetPoint = fTemp
              If fRoomSetPoint <> fTemp Then
                fRoomSetPoint = fTemp
                Devices.ValueUpdate(iThermostatID, 1, Format(fRoomSetPoint, "#0.0#"))
                Devices.ValueUpdate(iThermostatID, 3, CheckRemoteControl())
              Endif
            Endif
          Case 17 ' Relative modulation level
            If sMsgDirection = "B" And Not (iCHID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received relative modulation level message: " & sLine)
              fTemp = fTemp / 256
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - level = " & CStr(fTemp))
              If fCHModLevel <> fTemp Then
                fCHModLevel = fTemp
                Devices.ValueUpdate(iCHID, 3, fCHModLevel)
              Endif
            Endif
          Case 18 ' CH Water pressure
            If sMsgDirection = "B" And Not (iCHID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received central heating water pressure message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - pressure = " & CStr(fTemp))
              If fCHWaterPress <> fTemp Then
                fCHWaterPress = fTemp
                Devices.ValueUpdate(iCHID, 4, Format(fCHWaterPress, "#.0#"))
              Endif
            Endif
          Case 19 ' Boiler hot water flow
            If sMsgDirection = "B" And Not (iBoilerID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received hot water flow message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - flow rate = " & CStr(fTemp))
              If fBoilerFlow <> fTemp Then
                fBoilerFlow = fTemp
                Devices.ValueUpdate(iBoilerID, 3, Format(fBoilerFlow, "#.0#"))
              Endif
            Endif
          Case 24 ' Room temperature
            If sMsgDirection = "T" And Not (iThermostatID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received room temperature message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - temperature = " & CStr(fTemp))
              If fRoomTemp <> fTemp Then
                fRoomTemp = fTemp
                Devices.ValueUpdate(iThermostatID, 2, Format(fRoomTemp, "#0.0#"), Devices.ValueType_Temperature)
              Endif
            Endif
          Case 25 ' Boiler water temperature
            If sMsgDirection = "B" And Not (iBoilerID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received boiler temperature message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - temperature = " & CStr(fTemp))
              If fBoilerTemp <> fTemp Then
                fBoilerTemp = fTemp
                Devices.ValueUpdate(iBoilerID, 2, Format(fBoilerTemp, "#0.0#"), Devices.ValueType_Temperature)
              Endif
            Endif
          Case 27 ' Outside temperature
            If sMsgDirection = "B" And Not (iOutsideID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received outside temperature message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - temperature = " & CStr(fTemp))
              If fOutsideTemp <> fTemp And fTemp <> 0 Then
                fOutsideTemp = fTemp
                Devices.ValueUpdate(iOutsideID, 1, Format(fOutsideTemp, "#0.0#"), Devices.ValueType_Temperature)
              Endif
            Endif
          Case 56 ' Boiler temperature set point
            If (sMsgDirection = "B" Or sMsgDirection = "A") And Not (iBoilerID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received boiler set point message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - set point temperature = " & CStr(fTemp))
              If fBoilerSetPoint <> fTemp Then
                fBoilerSetPoint = fTemp
                Devices.ValueUpdate(iBoilerID, 1, Format(fBoilerSetPoint, "#0.0#"), Devices.ValueType_Temperature)
              Endif
            Endif
          Case 57 ' CH temperature set point
            If (sMsgDirection = "B" Or sMsgDirection = "A") And Not (iCHID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received maximum central heating set point message: " & sLine)
              fTemp = Round((fTemp / 256), -2)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - set point temperature = " & CStr(fTemp))
              If fCHSetPoint <> fTemp Then
                fCHSetPoint = fTemp
                Devices.ValueUpdate(iCHID, 1, Format(fCHSetPoint, "#0.0#"), Devices.ValueType_Temperature)
              Endif
            Endif
          Case 116 ' Burner starts counter
            If sMsgDirection = "B" And Not (iBurnerID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received burner starts counter message: " & sLine)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - counter = " & CStr(fTemp))
              If fBurnerStarts <> fTemp Then
                fBurnerStarts = fTemp
                Devices.ValueUpdate(iBurnerID, 2, fBurnerStarts)
              Endif
            Endif
          Case 120 ' Burner hours central heating
            If sMsgDirection = "B" And Not (iBurnerID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received burner running hours central heating message: " & sLine)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - counter = " & CStr(fTemp))
              If fCHBurnerHours <> fTemp Then
                fCHBurnerHours = fTemp
                Devices.ValueUpdate(iBurnerID, 3, fCHBurnerHours)
              Endif
            Endif
          Case 123 ' Burner hours boiler
            If sMsgDirection = "B" And Not (iBurnerID = 0) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Received burner running hours boiler message: " & sLine)
              If $bDebug Then Main.WriteDebugLog(LogLabel & " - counter = " & CStr(fTemp))
              If fHWBurnerHours <> fTemp Then
                fHWBurnerHours = fTemp
                Devices.ValueUpdate(iBurnerID, 4, fHWBurnerHours)
              Endif
            Endif
        End Select
        bParseLine = False
      Endif
    Endif

    If InStr(sLine, "OpenTherm Gateway") Then
      If bIgnoreAbout Then
        bIgnoreAbout = False
        Main.WriteLog(LogLabel & "Connected to '" & sLine & "'")
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Received 'OpenTherm Gateway' response, OpenTherm gateway device has been restarted unexpectedly?")
        If bOverrideActive Then
          If $bDebug Then Main.WriteDebugLog(LogLabel & "  resending thermostat override setpoint '" & CStr(fOverrideSetPoint) & "'")
          SendCommand("THERMOSTAT", CStr(fOverrideSetPoint))
        Endif
      Endif
      bParseLine = False
    Endif

    If bParseLine Then
      Main.WriteDebugLog(LogLabel & "Parsing received OpenTherm gateway report: " & sLine)
      Try sResponses = Split(sLine)
      If Error Then
        If $bDebug Then
          Main.WriteDebugLog(LogLabel & "Failed to parse report: " & ERROR.Text & " at " & ERROR.Where)
        Endif
      Else
        ' Example of sResponses:
        '  0 - 00000011/00001010   Status (MsgID=0) - Printed as two 8-bit bitfields
        '  1 - 59.00               Control setpoint (MsgID=1) - Printed as a floating point value
        '  2 - 00000000/00000000   Remote parameter flags (MsgID= 6) - Printed as two 8-bit bitfields
        '  3 - 100.00              Maximum relative modulation level (MsgID=14) - Printed as a floating point value
        '  4 - 0/0                 Boiler capacity and modulation limits (MsgID=15) - Printed as two bytes
        '  5 - 19.50               Room Setpoint (MsgID=16) - Printed as a floating point value
        '  6 - 0.00                Relative modulation level (MsgID=17) - Printed as a floating point value
        '  7 - 1.80                CH water pressure (MsgID=18) - Printed as a floating point value
        '  8 - 19.57               Room temperature (MsgID=24) - Printed as a floating point value
        '  9 - 59.00               Boiler water temperature (MsgID=25) - Printed as a floating point value
        ' 10 - 0.00                DHW temperature (MsgID=26) - Printed as a floating point value
        ' 11 - 0.00                Outside temperature (MsgID=27) - Printed as a floating point value
        ' 12 - 0.00                Return water temperature (MsgID=28) - Printed as a floating point value
        ' 13 - 0/0                 DHW setpoint boundaries (MsgID=48) - Printed as two bytes
        ' 14 - 0/0                 Max CH setpoint boundaries (MsgID=49) - Printed as two bytes
        ' 15 - 60.00               DHW setpoint (MsgID=56) - Printed as a floating point value
        ' 16 - 90.00               Max CH water setpoint (MsgID=57) - Printed as a floating point value
        ' 17 - 31442               Burner starts (MsgID=116) - Printed as a decimal value
        ' 18 - 0                   CH pump starts (MsgID=117) - Printed as a decimal value
        ' 19 - 0                   DHW pump/valve starts (MsgID=118) - Printed as a decimal value
        ' 20 - 0                   DHW burner starts (MsgID=119) - Printed as a decimal value
        ' 21 - 3027                Burner operation hours (MsgID=120) - Printed as a decimal value
        ' 22 - 0                   CH pump operation hours (MsgID=121) - Printed as a decimal value
        ' 23 - 0                   DHW pump/valve operation hours (MsgID=122) - Printed as a decimal value
        ' 24 - 258                 DHW burner operation hours (MsgID=123) - Printed as a decimal value

        If sResponses.count = 25 Then
          ' Remove : in any response
          For iCount = 0 To 24
            sResponses[iCount] = Replace(sResponses[iCount], ":", "", 1)
          Next
          ' Update current setpoint
          fCurrentSetPoint = Val(Format(CStr(sResponses[5]), "#.#"))

          ' Update thermostat values
          If Not (iThermostatID = 0) Then
            If $bDebug Then
              Main.WriteDebugLog(LogLabel & "Thermostat:")
              Main.WriteDebugLog(LogLabel & " - Room temperature set point = " & sResponses[8])
              Main.WriteDebugLog(LogLabel & " - Room temperature = " & sResponses[5])
              Main.WriteDebugLog(LogLabel & " - Status = " & sResponses[0])
            Endif
            sTemperatureOverrideStatus = CheckRemoteControl() ' update thermostat override status
            sThermostat = "Idle" ' defauls to Idle
            If (Mid(sResponses[0], 13, 1)) = "1" Then sThermostat = "Cooling down room" ' OpenTherm MsgID=0, LWB, 0001 0000
            If (Mid(sResponses[0], 15, 1)) = "1" Then sThermostat = "Heating up boiler" ' OpenTherm MsgID=0, LWB, 0000 0100
            If (Mid(sResponses[0], 16, 1)) = "1" Then sThermostat = "Heating up room"   ' OpenTherm MsgID=0, LWB, 0000 0010
            If (Mid(sResponses[0], 17, 1)) = "1" Then sThermostat = "Error"             ' OpenTherm MsgID=0, LWB, 0000 0001
            Devices.ValueUpdate(iThermostatID, 1, Format(sResponses[5], "#0.0#"), Devices.ValueType_Temperature)
            Devices.ValueUpdate(iThermostatID, 2, Format(sResponses[8], "#0.0#"), Devices.ValueType_Temperature)
            Devices.ValueUpdate(iThermostatID, 3, sTemperatureOverrideStatus)
            Devices.ValueUpdate(iThermostatID, 4, sThermostat)
          Endif

          ' Update Central Heating values
          If Not (iCHID = 0) Then
            If $bDebug Then
              Main.WriteDebugLog(LogLabel & "Central heating:")
              Main.WriteDebugLog(LogLabel & " - Set point = " & sResponses[16])
              Main.WriteDebugLog(LogLabel & " - Temperature = " & sResponses[1])
              Main.WriteDebugLog(LogLabel & " - Modulation level = " & sResponses[6])
              Main.WriteDebugLog(LogLabel & " - Water pressure = " & sResponses[7])
            Endif
            Devices.ValueUpdate(iCHID, 1, Format(sResponses[16], "##0.0#"))
            Devices.ValueUpdate(iCHID, 2, Format(sResponses[1], "##0.0#"))
            Devices.ValueUpdate(iCHID, 3, Format(sResponses[6], "##0"))
            Devices.ValueUpdate(iCHID, 4, Format(sResponses[7], "0.##"))
          Endif

          ' Update hot water (boiler) values
          If Not (iBoilerID = 0) Then
            If $bDebug Then
              Main.WriteDebugLog(LogLabel & "Hot water (boiler):")
              Main.WriteDebugLog(LogLabel & " - Set point = " & sResponses[15])
              Main.WriteDebugLog(LogLabel & " - Temperature = " & sResponses[9])
            Endif
            Devices.ValueUpdate(iBoilerID, 1, Format(sResponses[15], "##0.0#"))
            Devices.ValueUpdate(iBoilerID, 2, Format(sResponses[9], "##0.0#"), Devices.ValueType_Temperature)
          Endif

          ' Update burner values
          If Not (iBurnerID = 0) Then
            If $bDebug Then
              Main.WriteDebugLog(LogLabel & "Burner:")
              Main.WriteDebugLog(LogLabel & " - Flame = " & Mid(sResponses[0], 14, 1))
              Main.WriteDebugLog(LogLabel & " - starts = " & sResponses[17])
              Main.WriteDebugLog(LogLabel & " - operation hours central heating = " & sResponses[21])
              Main.WriteDebugLog(LogLabel & " - operation hours hot water boiler = " & sResponses[24])
            Endif
            sFlame = IIf((Mid(sResponses[0], 14, 1) = "1"), "On", "Off")
            Devices.ValueUpdate(iBurnerID, 1, sFlame)
            Devices.ValueUpdate(iBurnerID, 2, Format(CStr(sResponses[17]), "#####"))
            Devices.ValueUpdate(iBurnerID, 3, Format(CStr(sResponses[21]), "#####"))
            Devices.ValueUpdate(iBurnerID, 4, Format(CStr(sResponses[24]), "#####"))
          Endif

          ' Update outside sensor
          If Not (iOutsideID = 0) Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Outside temperature: " & sResponses[11])
            If sResponses[11] <> "0.00" Then
              fOutsideTemp = CFloat(Format(CStr(sResponses[11]), "#0.0#"))
              Devices.ValueUpdate(iOutsideID, 1, Format(CStr(fOutsideTemp), "#0.0#"), Devices.ValueType_Temperature)
            Endif
          Endif

        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid response '" & sLine & "'")
        Endif
      Endif
    Endif
  Next
  Main.ControlLed("OT", "Off")

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: Parsing OpenTherm data packet: '" & sLine & "' '" & Error.Text & "' at '" & Error.Where & "'")

End

Private Function CheckRemoteControl() As String

  Dim sCheckRemoteControl As String

  ' Update thermostat override status
  If Not bOverrideSend And Not bOverrideActive Then sCheckRemoteControl = "Override inactive"
  If bOverrideSend Then
    If fOverrideSetPoint = fCurrentSetPoint Then
      Main.WriteDebugLog(LogLabel & " - Room temperature set point is overruled by DomotiGa")
      bOverrideActive = True
      sCheckRemoteControl = "Override active"
      bOverrideSend = False
    Else
      Main.WriteDebugLog(LogLabel & " - New room temperature set point " & CStr(fOverrideSetPoint) & " not active yet")
    Endif
  Endif

  If bOverrideActive And ($sTemperatureOverride = "Temporarily") Then
    If fCurrentSetPoint <> fOverrideSetPoint Then
      Main.WriteDebugLog(LogLabel & " - Override room temperature disabled due to setpoint change")
      bOverrideActive = False
      sCheckRemoteControl = "Override inactive"
    Endif
  Endif
  Return sCheckRemoteControl

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType, sDay, sCmdPrefix As String

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Device with address '" & sAddress & "' not found!")
    Return
  Endif

  If Len(sCmd) > 0 Then
    Select Case UCase(sAddress)
      Case "THERMOSTAT"  ' Set new thermostat setpoint (override currently active setpoint)
        sCmdPrefix = ""
        fOriginalSetPoint = fCurrentSetPoint
        fOverrideSetPoint = CFloat(Val(sCmd))
        Select Case UCase($sTemperatureOverride)
          Case "CONSTANT"
            sCmdPrefix = "TC="
            bOverrideSend = True
          Case "TEMPORARILY"
            ' Set temporarily override for configured thermostat type
            Select Case $sThermostat
              Case "Remeha Celcia 20"
                sCmdPrefix = "TR="
                bOverrideSend = True
              Case "Other"
                sCmdPrefix = "TT="
                bOverrideSend = True
              Case Else
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid Thermostat type: " & $sThermostat)
            End Select
          Case Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid temperature override: " & $sTemperatureOverride)
        End Select
        If Len(sCmdPrefix) = 3 Then
          If fOverrideSetPoint >= 0 And fOverrideSetPoint < 30 Then 'validate new thermostat override setpoint
            If fCurrentSetPoint = fOverrideSetPoint Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Thermostat setpoint already set to '" & sCmd & "'")
            Else
              If $bDebug Then Main.WriteDebugLog(LogLabel & "send new thermostat setpoint command: '" & sCmdPrefix & sCmd & "'")
              QueueCommand(sCmdPrefix & CStr(fOverrideSetPoint))
              If sCmd = "0" Or sCmd = "0.0" Then
                sTemperatureOverrideStatus = ""
                fOriginalSetPoint = 0
                fOverrideSetPoint = 0
                bOverrideSend = False
                bOverrideActive = False
              Endif
              If bOverrideSend Then sTemperatureOverrideStatus = "Override send"
            Endif
          Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid thermostat override setpoint value '" & sCmd & "'. Valid values are between 0.0 and 30.0")
            bOverrideSend = False
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid thermostat override prefix '" & sCmdPrefix * "'")
          bOverrideSend = False
        Endif

      Case "BOILER"           ' Set the domestic hot water setpoint
        If CFloat(Val(sCmd)) > 0 And CFloat(Val(sCmd)) < 100 Then
          fOverrideBoilerSetPoint = CFloat(Val(sCmd))
          QueueCommand("SW=" & CStr(fOverrideBoilerSetPoint))
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid boiler setpoint value '" & CStr(fOverrideBoilerSetPoint) & "'. Valid values are between 0.0 and 100.0")
        Endif

      Case "CENTRALHEATING"   ' Set the maximum central heating setpoint
        If CFloat(Val(sCmd)) > 0 And CFloat(Val(sCmd)) < 100 Then
          fCentralHeatingSetPoint = CFloat(Val(sCmd))
          QueueCommand("SH=" & CStr(fCentralHeatingSetPoint))
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid central heating setpoint value '" & CStr(fCentralHeatingSetPoint) & "'. Valid values are between 0.0 and 100.0")
        Endif

      Case "OUTSIDE"          ' Send new outside temperature to thermostat
        If CFloat(Val(sCmd)) > -40 And CFloat(Val(sCmd)) < 127 Then
          fOutsideTemp = CFloat(Val(sCmd))
          QueueCommand("OT=" & CStr(fOutsideTemp))
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid outside temperature '" & CStr(fOutsideTemp) & "'. Valid values are between -40.0 and +127.0")
        Endif

      Case "CLOCK"            ' Synchronize clock with local clock by sending current time
        If sCmd = "sync" Then
          sDay = CStr(WeekDay(Now))
          If sDay = "0" Then sDay = "7" ' Correct sundays
          QueueCommand("SC=" & Format(Now, "hh:nn") & "/" & sDay)
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid command for 'Clock' device: " & sCmd)
        Endif
    End Select
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid command '" & sCmd & "' for device " & sAddress)
  Endif

Catch
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sCmd As String)

  ' add command to queue
  cQueue.Add(sCmd, Rnd)

  ' if interface is not busy process it
  If bInterfaceBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim sCmd As String

  For Each sCmd In cQueue
    WriteCmd(sCmd, cQueue.Key)
    Break ' only do first one
  Next

End

Private Sub WriteCmd(sCommand As String, sKey As String)

  If $bDebug Then
    If sCommand <> "PS=1" Then ' Don't log default report request
      Main.WriteDebugLog(LogLabel & "write command: " & sCommand)
    Endif
  Endif

  If Len(sCommand) > 3 And InStr(sCommand, "=") Then
    If $sInterface = "tcp" Then
      Try Print #hOpenThermTCP, sCommand & "\r"
      If Error Then
        Main.WriteDebugLog(LogLabel & "Error writing data to socket! -> " & ERROR.Text)
        Main.WriteDebugLog(LogLabel & "Trying to reconnect...")
        Try hOpenThermTCP.Connect
      Endif
    Else
      Try Print #hOpenThermSer, sCommand & "\r"
      If Error Then
        Main.WriteDebugLog(LogLabel & "Error writing data to serial port! -> " & Error.Text)
      Endif
    Endif
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid command: " & sCommand)
  Endif

  ' remove command from queue
  cQueue.Remove(sKey)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to stop timers and close the connection
  Try tInterfaceBusy.Stop
  Try tReConnect.Stop
  Try tOpenTherm.Stop
  Try hOpenThermRelay.Close
  Try hOpenThermTCP.Close
  Try hOpenThermSer.Close

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Catch ' some errors
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

End
