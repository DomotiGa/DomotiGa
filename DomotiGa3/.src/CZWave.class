' Gambas class file

' Description:
' CZWave.class
' Support for Z-Wave protocol.

' Development Status:
' Under heavy development.

' Credits:
' Thanks to Willem-Jan from ezHome.nl, Enver from Tane.nl and Jaren for the open-zwave wrapper code.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "OpenZWave"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "OpenZWave Z-Wave"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[OpenZWave] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Library "libdomozwave"
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public sLibDomoZwave As String = "DomoZWave version r1143"

' Initialize and destroy the wrapper - no HomeId required
Extern DomoZWave_Init(deviceConfigPath As String, zwConfigPath As String, logname As String, rpcPort As Integer, enableLog As Boolean, enableOZWLog As Boolean, polltime As Integer)
Extern DomoZWave_AddSerialPort(serialPort As String)
Extern DomoZWave_Destroy()

' Write zwcfg*xml, normally not needed
Extern DomoZWave_WriteConfig(home As Integer)

' Retrieve wrapper and controller information
Extern DomoZWave_Version() As String
Extern DomoZWave_OZWVersion() As String
Extern DomoZWave_GetLibraryVersion(home As Integer) As String
Extern DomoZWave_GetLibraryTypeName(home As Integer) As String
Extern DomoZWave_ControllerType(home As Integer) As String

' Enable/disable polling of the devices by open-zwave
Extern DomoZWave_EnablePolling(home As Integer, node As Integer, polltime As Integer)
Extern DomoZWave_DisablePolling(home As Integer, node As Integer)

' Retrieve or set node information
Extern DomoZWave_GetNodeQueryStage(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeManufacturerName(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeProductName(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeName(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeLocation(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeManufacturerId(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeProductType(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeProductId(home As Integer, node As Integer) As String
Extern DomoZWave_SetNodeManufacturerName(home As Integer, node As Integer, manufacturerName As String)
Extern DomoZWave_SetNodeProductName(home As Integer, node As Integer, productName As String)
Extern DomoZWave_SetNodeName(home As Integer, node As Integer, nodeName As String)
Extern DomoZWave_SetNodeLocation(home As Integer, node As Integer, nodeLocation As String)
Extern DomoZWave_GetNodeLibraryVersion(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeProtocolVersion(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeApplicationVersion(home As Integer, node As Integer) As String

' Request or update node state
Extern DomoZWave_RequestNodeState(home As Integer, node As Integer) As Boolean
Extern DomoZWave_RequestNodeDynamic(home As Integer, node As Integer) As Boolean
Extern DomoZWave_RequestNodeNeighborUpdate(home As Integer, node As Integer, Optional addqueue As Boolean = False) As Boolean
Extern DomoZWave_RefreshNodeInfo(home As Integer, node As Integer) As Boolean
Extern DomoZWave_RequestNodeVersion(home As Integer, node As Integer) As Boolean
Extern DomoZWave_RequestNodeMeter(home As Integer, node As Integer) As Boolean
Extern DomoZWave_SetValue(home As Integer, node As Integer, instance As Integer, value As Integer) As Boolean

' Request or update node configuration
Extern DomoZWave_SetConfigParam(home As Integer, node As Integer, param As Integer, value As Integer, size As Integer) As Boolean
Extern DomoZWave_SetConfigParamList(home As Integer, node As Integer, param As Integer, value As String) As Boolean
Extern DomoZWave_RequestConfigParam(home As Integer, node As Integer, param As Integer)
Extern DomoZWave_RequestAllConfigParams(home As Integer, node As Integer)
Extern DomoZWave_GetNodeConfigList(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeConfigLabel(home As Integer, node As Integer, item As Integer) As String
Extern DomoZWave_GetNodeConfigHelp(home As Integer, node As Integer, item As Integer) As String
Extern DomoZWave_GetNodeConfigValue(home As Integer, node As Integer, item As Integer) As String
Extern DomoZWave_GetNodeConfigValueType(home As Integer, node As Integer, item As Integer) As String
Extern DomoZWave_GetNodeConfigValueList(home As Integer, node As Integer, item As Integer) As String
Extern DomoZWave_GetNodeConfigValueReadOnly(home As Integer, node As Integer, item As Integer) As Boolean

' Retrieve the node neighborhood list or commandclass list
Extern DomoZWave_GetNodeNeighborsList(home As Integer, node As Integer) As String
Extern DomoZWave_GetNodeCommandClassList(home As Integer, node As Integer, Optional instance As Integer) As String

' Request or update the group/association of a node
Extern DomoZWave_GetNodeGroupCount(home As Integer, node As Integer) As Integer
Extern DomoZWave_GetNodeGroupList(home As Integer, node As Integer, ogroup As Integer) As String
Extern DomoZWave_GetNodeGroupMax(home As Integer, node As Integer, ogroup As Integer) As Integer
Extern DomoZWave_GetNodeGroupLabel(home As Integer, node As Integer, ogroup As Integer) As String
Extern DomoZWave_AddAssociation(home As Integer, node As Integer, group As Integer, othernode As Integer)
Extern DomoZWave_RemoveAssociation(home As Integer, node As Integer, group As Integer, othernode As Integer)

' Request or set UserCode of a node
Extern DomoZWave_GetNodeUserCodeCount(home As Integer, node As Integer) As Integer
Extern DomoZWave_GetNodeUserCodeLabel(home As Integer, node As Integer, usercode As Integer) As String
Extern DomoZWave_GetNodeUserCodeValue(home As Integer, node As Integer, usercode As Integer) As String
Extern DomoZWave_SetNodeUserCodeStart(home As Integer, node As Integer) As Boolean
Extern DomoZWave_SetNodeUserCodeStop(home As Integer) As Boolean
Extern DomoZWave_SetNodeUserCodeRemove(home As Integer, node As Integer, usercode As Integer) As Boolean

' Soft or hard reset the controller
Extern DomoZWave_ControllerSoftReset(home As Integer)
Extern DomoZWave_ControllerHardReset(home As Integer)

' Controller commands
Extern DomoZWave_CancelControllerCommand(home As Integer) As Boolean
Extern DomoZWave_AddDevice(home As Integer) As Boolean
Extern DomoZWave_RemoveDevice(home As Integer) As Boolean
Extern DomoZWave_AssignReturnRoute(home As Integer, node As Integer, destnode As Integer) As Boolean
Extern DomoZWave_DeleteAllReturnRoutes(home As Integer, node As Integer) As Boolean
Extern DomoZWave_RequestNetworkUpdateFromPrimary(home As Integer) As Boolean
Extern DomoZWave_CreateNewPrimary() As Boolean
Extern DomoZWave_TransferPrimaryRole() As Boolean
Extern DomoZWave_HasNodeFailed(home As Integer, node As Integer, Optional addqueue As Boolean = False) As Boolean
Extern DomoZWave_RemoveFailedNode(home As Integer, node As Integer) As Boolean
Extern DomoZWave_ReplaceFailedNode(home As Integer, node As Integer) As Boolean
Extern DomoZWave_SendNodeInformation(home As Integer, node As Integer) As Boolean
Extern DomoZWave_ReplicationSend(home As Integer, node As Integer) As Boolean
Extern DomoZWave_HealNetworkNode(home As Integer, node As Integer, doRR As Boolean)
Extern DomoZWave_HealNetwork(home As Integer, doRR As Boolean)
Extern DomoZWave_TestNetworkNode(home As Integer, node As Integer, count As Integer)
Extern DomoZWave_TestNetwork(home As Integer, count As Integer)

' Statistical information
Extern DomoZWave_GetDriverStatistics(home As Integer) As String
Extern DomoZWave_GetSendQueueCount(home As Integer) As Long

' Make certain information readable - no HomeId required
Extern DomoZWave_CommandClassIdName(class_value As Integer) As String
Extern DomoZWave_GenreIdName(genre As Integer) As String
Extern DomoZWave_BasicTypeName(basictype As Integer) As String
Extern DomoZWave_GenericTypeName(generictype As Integer) As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property Port As String
Property ZWaveDebug As Boolean
Property PollTime As Integer
Property PollTimeListening As String
Property EnablePollListening As Boolean
Property PollTimeSleeping As String
Property EnablePollSleeping As Boolean
Property UpdateNeighbor As String
Property EnableUpdateNeighbor As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $bZWaveDebug As Boolean
Private $iPollTime As Integer
Private $sPollTimeListening As String
Private $bEnablePollListening As Boolean
Private $sPollTimeSleeping As String
Private $bEnablePollSleeping As Boolean
Private $sUpdateNeighbor As String
Private $bEnableUpdateNeighbor As Boolean

Public bOZWInitialized As Boolean = False
Public tZWaveLED As New Timer
Public tOZWKeepAlive As New Timer
Public bOZWKeepAliveState As Boolean
Public bOZWKeepAlivePrevState As Boolean

Public sZWaveAPIVersion As String
Public sZWaveZDKVersion As String
Public iHomeID As Integer
Public iControllerID As Integer
Public sControllerType As String = ("Unknown")

' Timer variables to cancel certain commands/states in open-zwave
Public tControllerCommand As Timer
Public tUserCodeEnroll As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $bZWaveDebug = cPl.Settings["debug"]
  $iPollTime = cPl.Settings["polltime"]
  $sPollTimeListening = cPl.Settings["polltimelistening"]
  $bEnablePollListening = cPl.Settings["enablepolllistening"]
  $sPollTimeSleeping = cPl.Settings["polltimesleeping"]
  $bEnablePollSleeping = cPl.Settings["enablepollsleeping"]
  $sUpdateNeighbor = cPl.Settings["updateneighbor"]
  $bEnableUpdateNeighbor = cPl.Settings["enableupdateneighbor"]

  ' Connect/Initialize connection

  ' Check if the library matches the required version
  If sLibDomoZwave <> Version() Then
    'Message.Error(("The OpenZWave wrapper version doesn't match the required version\n\nRequired by DomotiGa: " & hZWave.sLibDomoZwave & "\nOpenZWave wrapper: " & hZWave.Version() & "\n\nPlease recompile as described on page:\nhttp://www.domotiga.nl/projects/domotiga/wiki/Z-Wave"))
    Main.WriteLog(LogLabel & "ERROR: interface is disabled, because of a version mismatch")
    Return
  Endif

  If Exist(Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/") = False Then
    Main.WriteLog(LogLabel & "ERROR: interface is disabled, the open-zwave configuration directory is missing (" & Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/" & ")")
    Return
  Endif

  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run zwave network related tasks
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunTasks()

  ' check if neighbor needs updating
  If $bEnableUpdateNeighbor Then
    If Events.TimeCron($sUpdateNeighbor) Then

      If bOZWInitialized = False Then
        If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "RunTasks Update Neighbors can't start, because the Open Z-Wave library isn't fully initialized.")
        Return
      Endif

      HealNetwork()
    Endif
  Endif

  ' check if listening nodes needs polling
  If $bEnablePollListening Then
    If Events.TimeCron($sPollTimeListening) Then

      If bOZWInitialized = False Then
        If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "RunTasks Poll Listening can't start, because the Open Z-Wave library isn't fully initialized.")
        Return
      Endif

      RequestNodeDynamicReport(0)
    Endif
  Endif

  ' check if sleeping nodes needs polling
  If $bEnablePollSleeping Then
    If Events.TimeCron($sPollTimeSleeping) Then

      If bOZWInitialized = False Then
        If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "RunTasks Poll Sleeping can't start, because the Open Z-Wave library isn't fully initialized.")
        Return
      Endif

      RequestNodeDynamicReport(0, True)
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get information about version and nodes from stick
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Connect()


  Main.WriteLog(LogLabel & PluginFriendlyName & " interface trying to connect to Port " & $sSerPort)

  ' We (re)start the Z-Wave, set OZW initialized to FALSE
  bOZWInitialized = False

  ' Reset home ID & controller ID to 0 after a (re)start
  iHomeID = 0
  iControllerID = 0
  Main.ControlLed("ZWave", "Off")

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Initialising open-zwave wrapper.")
  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "" & DomoZWave_Version())
  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "" & DomoZWave_OZWVersion())

  ' First we initialize the open-zwave wrapper, but we also need to add 1 or more
  ' serialports to really allow it to function
  DomoZWave_Init(Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/", Main.sBaseDir &/ "wrappers/domozwave/", Main.sBaseDir &/ "logs" &/ Main.sDomoZWaveFile, Main.hXMLRPC.HTTPPort, $bZWaveDebug, $bZWaveDebug, $iPollTime)
  DomoZWave_AddSerialPort($sSerPort)

  ' start timer for Z-Wave keepalive of when using the Open Z-Wave library
  ' We will wait 10 seconds to receive the controllerid, because this should happen within 1-2 seconds
  ' After we received the controllerid, we set the timer 60 seconds and we will send a DynamicReport request to the controllerid
  tOZWKeepAlive = New Timer As "tOZWKeepAlive"
  tOZWKeepAlive.Delay = 10000
  tOZWKeepAlive.Start
  bOZWKeepAliveState = False
  bOZWKeepAlivePrevState = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  OZW_SendCommand(sAddress, sCmd)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request or update node state
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestBasicReport(iNodeId As Integer, Optional Sleeping As Boolean = False) As Boolean

  Dim rResultNodes As Result

  If iNodeId == 0 Then

    If Sleeping Then
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger sleeping nodes to update their basic values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is TRUE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Else
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger listening nodes to update their basic values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is FALSE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Endif

    If rResultNodes Then
      If (rResultNodes.Count >= 1) Then
        For Each rResultNodes
          ' We can't query a controller or static controller
          If rResultNodes!typebasic >= 3 Then
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting state for node id " & rResultNodes!nodeid & ".")
            DomoZWave_RequestNodeState(iHomeID, rResultNodes!nodeid)
          Endif
        Next
      Endif
    Endif

    Return True

  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting node state of node id " & iNodeId)
    Return DomoZWave_RequestNodeState(iHomeID, iNodeId)
  Endif

End

Public Sub RequestNodeDynamicReport(iNodeId As Integer, Optional Sleeping As Boolean = False) As Boolean

  Dim rResultNodes As Result

  If iNodeId == 0 Then

    If Sleeping Then
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger sleeping nodes to update their dynamic values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is TRUE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Else
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger listening nodes to update their dynamic values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is FALSE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Endif

    If rResultNodes Then
      If (rResultNodes.Count >= 1) Then
        For Each rResultNodes
          ' We can't query a controller or static controller
          If rResultNodes!typebasic >= 3 Then
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting dynamic for node id " & rResultNodes!nodeid & ".")
            DomoZWave_RequestNodeDynamic(iHomeID, rResultNodes!nodeid)
          Endif
        Next
      Endif
    Endif

    Return True

  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting dynamic of node id " & iNodeId)
    Return DomoZWave_RequestNodeDynamic(iHomeID, iNodeId)
  Endif

End

Public Sub RequestNodeVersionReport(iNodeId As Integer, Optional Sleeping As Boolean = False) As Boolean

  Dim rResultNodes As Result

  If iNodeId == 0 Then

    If Sleeping Then
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger sleeping nodes to update their version values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is TRUE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Else
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger listening nodes to update their verion values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is FALSE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Endif

    If rResultNodes Then
      If (rResultNodes.Count >= 1) Then
        For Each rResultNodes
          ' We can't query a controller or static controller
          If rResultNodes!typebasic >= 3 Then
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting version for node id " & rResultNodes!nodeid & ".")
            DomoZWave_RequestNodeVersion(iHomeID, rResultNodes!nodeid)
          Endif
        Next
      Endif
    Endif

    Return True

  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting version of node id " & iNodeId)
    Return DomoZWave_RequestNodeVersion(iHomeID, iNodeId)
  Endif

End

Public Sub RequestNodeMeterReport(iNodeId As Integer, Optional Sleeping As Boolean = False) As Boolean

  Dim rResultNodes As Result

  If iNodeId == 0 Then

    If Sleeping Then
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger sleeping nodes to update their meter values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is TRUE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Else
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger listening nodes to update their meter values.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is FALSE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Endif

    If rResultNodes Then
      If (rResultNodes.Count >= 1) Then
        For Each rResultNodes
          ' We can't query a controller or static controller
          If rResultNodes!typebasic >= 3 Then
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting meter for node id " & rResultNodes!nodeid & ".")
            DomoZWave_RequestNodeMeter(iHomeID, rResultNodes!nodeid)
          Endif
        Next
      Endif
    Endif

    Return True

  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting meter of node id " & iNodeId)
    Return DomoZWave_RequestNodeMeter(iHomeID, iNodeId)
  Endif

End

Public Sub RequestNodeNeighborUpdate(iNodeId As Integer, Optional Sleeping As Boolean = False) As Boolean

  Dim rResultNodes As Result

  If iNodeId == 0 Then

    If Sleeping Then
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger sleeping nodes to update their neighbor routing.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is TRUE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Else
      If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Trigger listening nodes to update their neighbor routing.")
      rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is FALSE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
    Endif

    If rResultNodes Then
      If (rResultNodes.Count >= 1) Then
        For Each rResultNodes
          ' We can't query a controller or static controller
          If rResultNodes!typebasic >= 3 Then
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting neighbor update for node id " & rResultNodes!nodeid & ".")

            DomoZWave_RequestNodeNeighborUpdate(iHomeID, rResultNodes!nodeid, True)
          Endif
        Next
      Endif
    Endif

    Return True

  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting node id " & iNodeId & " to update it's neighbors.")
    Return DomoZWave_RequestNodeNeighborUpdate(iHomeID, iNodeId, False)
  Endif

End

Public Sub RefreshNodeInfo(iNodeId As Integer) As Boolean

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting node id " & iNodeId & " to refresh ALL its node information.")
  Return DomoZWave_RefreshNodeInfo(iHomeID, iNodeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request or update node configuration
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub SetConfigParam(iNodeId As Integer, iParam As Integer, iValue As Integer, Optional iSize As Integer = 2)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Set config param " & iParam & " to value " & iValue & " for node id " & iNodeId & ", size is " & iSize & ".")
  DomoZWave_SetConfigParam(iHomeID, iNodeId, iParam, iValue, iSize)

End

Public Sub SetConfigParamList(iNodeId As Integer, iParam As Integer, sValue As String)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Set config param List " & iParam & " to value \"" & sValue & "\" for node id " & iNodeId & ".")
   DomoZWave_SetConfigParamList(iHomeID, iNodeId, iParam, sValue)

End

Public Sub RequestConfigParam(iNodeId As Integer, iParam As Integer)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Get config param " & iParam & " for node id " & iNodeId & ".")
  DomoZWave_RequestConfigParam(iHomeID, iNodeId, iParam)

End

Public Sub RequestAllConfigParams(iNodeId As Integer)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting all config params for node id " & iNodeId & ".")
  DomoZWave_RequestAllConfigParams(iHomeID, iNodeId)

End

Public Sub GetNodeConfigList(iNodeId As Integer) As String

  Return DomoZWave_GetNodeConfigList(iHomeID, iNodeId)

End

Public Sub GetNodeConfigLabel(iNodeId As Integer, Item As Integer) As String

  Return DomoZWave_GetNodeConfigLabel(iHomeID, iNodeId, Item)

End

Public Sub GetNodeConfigHelp(iNodeId As Integer, Item As Integer) As String

  Return DomoZWave_GetNodeConfigHelp(iHomeID, iNodeId, Item)

End

Public Sub GetNodeConfigValue(iNodeId As Integer, Item As Integer) As String

  Return DomoZWave_GetNodeConfigValue(iHomeID, iNodeId, Item)

End

Public Sub GetNodeConfigValueType(iNodeId As Integer, Item As Integer) As String

  Return DomoZWave_GetNodeConfigValueType(iHomeID, iNodeId, Item)

End

Public Sub GetNodeConfigValueList(iNodeId As Integer, Item As Integer) As String

  Return DomoZWave_GetNodeConfigValueList(iHomeID, iNodeId, Item)

End

Public Sub GetNodeConfigValueReadOnly(iNodeId As Integer, Item As Integer) As Boolean

  Return DomoZWave_GetNodeConfigValueReadOnly(iHomeID, iNodeId, Item)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve the node neighborhood list or commandclass list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub GetNodeNeighborsList(iNodeId As Integer) As String

  Dim NList As String

  'IF $bZWaveDebug THEN Main.WriteDebugLog(LogLabel & "Requesting neighborslist for node id " & iNodeId & ".")
  NList = DomoZWave_GetNodeNeighborsList(iHomeID, iNodeId)

  ' Replace the "|" with ", " to make it more human readable
  Return Replace$(NList, "|", ", ")
  
End

Public Sub GetNodeCommandClassList(iNodeId As Integer, Optional Instance As Integer = 0) As String

  Dim NList As String

  'IF $bZWaveDebug THEN Main.WriteDebugLog(LogLabel & "Requesting commandclasslist for node id " & iNodeId & IIf(Instance >= 1, " instance " & Instance, "") & ".")
  NList = DomoZWave_GetNodeCommandClassList(iHomeID, iNodeId, Instance)

  ' Replace the "COMMAND_CLASS_", because it is in each value (makes the string too long)
  NList = Replace$(NList, "COMMAND_CLASS_", "")
  ' Replace the "|" with ", " to make it more human readable
  Return Replace$(NList, "|", ", ")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Group Association
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub GetNodeGroupCount(iNodeId As Integer) As Integer

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requested group count for node id " & iNodeId & ".")
  Return DomoZWave_GetNodeGroupCount(iHomeID, iNodeId)

End

Public Sub GetNodeGroupList(iNodeId As Integer, group As Integer) As String

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requested group list for node id " & iNodeId & ".")
  Return DomoZWave_GetNodeGroupList(iHomeID, iNodeId, group)

End

Public Sub GetNodeGroupMax(iNodeId As Integer, group As Integer) As Integer

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requested group max for node id " & iNodeId & " and group " & group & ".")
  Return DomoZWave_GetNodeGroupMax(iHomeID, iNodeId, group)

End

Public Sub GetNodeGroupLabel(iNodeId As Integer, group As Integer) As String

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requested group label for node id " & iNodeId & " and group " & group & ".")
  Return DomoZWave_GetNodeGroupLabel(iHomeID, iNodeId, group)

End

Public Sub AddAssociation(iNodeId As Integer, iAssociationGroup As Integer, iAssociationNode As Integer)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Add association node id " & iNodeId & " between group " & iAssociationGroup & " and node " & iAssociationNode & ".")
  DomoZWave_AddAssociation(iHomeID, iNodeId, iAssociationGroup, iAssociationNode)

End

Public Sub RemoveAssociation(iNodeId As Integer, iAssociationGroup As Integer, iAssociationNode As Integer)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Remove association node id " & iNodeId & " between group " & iAssociationGroup & " and node " & iAssociationNode & ".")
  DomoZWave_RemoveAssociation(iHomeID, iNodeId, iAssociationGroup, iAssociationNode)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' UserCode functions, usefull for e.g. Tag Reader
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub GetNodeUserCodeCount(iNodeId As Integer) As Integer

  Return DomoZWave_GetNodeUserCodeCount(iHomeID, iNodeId)

End

Public Sub GetNodeUserCodeLabel(iNodeId As Integer, UserCode As Integer) As String

  Return DomoZWave_GetNodeUserCodeLabel(iHomeID, iNodeId, UserCode)

End

Public Sub GetNodeUserCodeValue(iNodeId As Integer, UserCode As Integer) As String

  Return DomoZWave_GetNodeUserCodeValue(iHomeID, iNodeId, UserCode)

End

Public Sub SetNodeUserCodeStart(iNodeId As Integer) As Boolean

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Start UserCode enrollment for homeid=" & iHomeID & ", nodeid=" & iNodeId)
  Try tUserCodeEnroll.Stop
  tUserCodeEnroll = New Timer As "tUserCodeEnroll"
  tUserCodeEnroll.Delay = 30000
  tUserCodeEnroll.Start

  Return DomoZWave_SetNodeUserCodeStart(iHomeID, iNodeId)

End

Public Sub SetNodeUserCodeStop() As Boolean

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Stop UserCode enrollment for homeid=" & iHomeID & " (30 sec timer expired)")
  tUserCodeEnroll.Stop
  Return DomoZWave_SetNodeUserCodeStop(iHomeID)
  
End

Public Sub tUserCodeEnroll_Timer()

  SetNodeUserCodeStop()

End
 

Public Sub SetNodeUserCodeRemove(iNodeId As Integer, UserCode As Integer)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Remove UserCode for homeid=" & iHomeID & ", nodeid=" & iNodeId & ", usercode=" & UserCode)
  DomoZWave_SetNodeUserCodeRemove(iHomeID, iNodeId, UserCode)

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Soft or hard reset the controller
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub ControllerSoftReset()

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Controller will be Soft Reset for homeid=" & iHomeID & " (no data will be lost)")
  DomoZWave_ControllerSoftReset(iHomeID)

End

Public Sub ControllerHardReset()

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Controller will be HARD Reset for homeid=" & iHomeID & " (*ALL* data will be lost)")
  DomoZWave_ControllerHardReset(iHomeID)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Controller commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub CancelControllerCommand() As Boolean

  Dim bResult As Boolean

  ' Try to stop timer first
  Try tControllerCommand.Stop

  bResult = DomoZWave_CancelControllerCommand(iHomeID)

  If bResult Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Cancelling controller command")
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Cancelling controller command, controller was already in normal operation mode")
  Endif

  Return bResult

End

Public Sub AddDevice() As Boolean

  Dim bResult As Boolean

  ' First we execute the command
  ' If True == Command succeeded
  ' If False == Command failed (most likely controller is already in an add/remove mode)
  bResult = DomoZWave_AddDevice(iHomeID)

  If bResult Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Begin add device, press button on device to add!")

    ' Start our 30sec timer - we *need* to put it in CZWave.class, because the Z-Wave Commander 
    ' closing can resulting in "hanging" of the controller
    tControllerCommand = Null
    tControllerCommand = New Timer As "tControllerCommand"
    tControllerCommand.Delay = 30000
    tControllerCommand.Start
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Begin add device, controller already in add/remove mode, press cancel first")
  Endif

  Return bResult

End

Public Sub RemoveDevice() As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_RemoveDevice(iHomeID)

  If bResult Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Begin remove device, press button on device to remove!")

    ' Start our 30sec timer
    Try tControllerCommand.Stop
    tControllerCommand = New Timer As "tControllerCommand"
    tControllerCommand.Delay = 30000
    tControllerCommand.Start
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Begin remove device, controller already in add/remove mode, press cancel first")
  Endif

  Return bResult

End

Public Sub tControllerCommand_Timer()

  tControllerCommand.Stop
  CancelControllerCommand()

End

Public Sub RequestNetworkUpdate()

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Requesting network update.")
  DomoZWave_RequestNetworkUpdateFromPrimary()

End

Public Sub HasNodeFailed(iNodeId As Integer) As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_HasNodeFailed(iHomeID, iNodeId)

  If bResult Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Check if node has failed, call X to check the response")
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Check if node has failed can't be executed. The controller isn't in normal mode")
  Endif

End

Public Sub RemoveFailedNode(iNodeId As Integer) As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_RemoveFailedNode(iHomeID, iNodeId)

  If bResult Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Remove failed node executed (only works if the node is on the failed list)")
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Remove failed node can't be executed. The controller isn't in normal mode")
  Endif

End

Public Sub ReplaceFailedNode(iNodeId As Integer) As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_ReplaceFailedNode(iHomeID, iNodeId)

  If bResult Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Replace failed node executed, press button the new node now (only works if the node is on the failed list)")
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Replace failed node, can't be executed. The controller isn't in normal mode")
  Endif

End

Public Sub HealNetwork()

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Healing network")
  DomoZWave_HealNetwork(iHomeID, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Make certain information readable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CommandClassIdName(class_value As Integer) As String

  Return DomoZWave_CommandClassIdName(class_value)

End

Public Sub GenreIdName(genre As Integer) As String

  Return DomoZWave_GenreIdName(genre)

End

Public Sub BasicTypeName(basictype As Integer) As String

  Return DomoZWave_BasicTypeName(basictype)

End

Public Sub GenericTypeName(generictype As Integer) As String

  Return DomoZWave_GenericTypeName(generictype)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' translate between API and ZDK version numbering
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ExpandVersion(sVersion As String) As String

  Select sVersion
    Case "2.78"
      Return "5.02 Patch 3"
    Case "2.64"
      Return "5.02 Patch 2"
    Case "2.51"
      Return "5.02 Patch 1"
    Case "2.48"
      Return "5.02"
    Case "2.74"
      Return "4.50"
    Case "2.67"
      Return "4.28"
    Case "2.40"
      Return "4.27"
    Default
      Return "Unknown"
    End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create a record with node information in database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateNode(iNodeId As Integer, iTypeBasic As Integer, iTypeGeneric As Integer, iTypeSpecific As Integer, iCapabilities As Integer, iSecurity As Integer, bSleeping As Boolean)

  Dim rResult As Result

  ' Always remove the node first - This prevents duplicates and stores the latest
   Main.hDB.Exec("DELETE FROM devices_zwave WHERE nodeid=&1", iNodeId)

  ' write node to the database table
  Main.hDB.Begin()
  rResult = Main.hDB.Create("devices_zwave")
  rResult!nodeid = iNodeId
  rResult!typebasic = iTypeBasic
  rResult!typegeneric = iTypeGeneric
  rResult!typespecific = iTypeSpecific
  rResult!capabilities = iCapabilities
  rResult!security = iSecurity
  rResult!sleeping = bSleeping
  rResult.Update()
  Main.hDB.Commit()

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Added node " & iNodeId & " to the DomotiGa Z-Wave list.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Remove specific Z-Wave node from database - It is not called during exit of the openzwave library
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RemoveNode(iNodeId As Integer)

  Main.hDB.Exec("DELETE FROM devices_zwave WHERE nodeid=&1", iNodeId)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Removed node " & iNodeId & " from the DomotiGa Z-Wave list.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' clear nodes table from database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RemoveNodes()

  Dim hTable As Table

  Try Main.hDB.Tables.Remove("devices_zwave")
  hTable = Main.hDB.Tables.Add("devices_zwave")

  hTable.Fields.Add("id", db.Serial)
  hTable.Fields.Add("nodeid", gb.String, 32)
  hTable.Fields.Add("value", gb.String, 32)
  hTable.Fields.Add("value2", gb.String, 32)
  hTable.Fields.Add("value3", gb.String, 32)
  hTable.Fields.Add("value4", gb.String, 32)
  hTable.Fields.Add("typebasic", gb.Integer)
  hTable.Fields.Add("typegeneric", gb.Integer)
  hTable.Fields.Add("typespecific", gb.Integer)
  hTable.Fields.Add("capabilities", gb.Integer)
  hTable.Fields.Add("security", gb.Integer)
  hTable.Fields.Add("sleeping", gb.Boolean)
  hTable.Fields.Add("manufacturer", gb.String, 64)
  hTable.Fields.Add("model", gb.String, 64)
  hTable.Fields.Add("version", gb.String, 32)
  hTable.Fields.Add("speed", gb.String, 32)
  hTable.Fields.Add("neighbors", gb.String)
  hTable.Fields.Add("classes", gb.String)
  hTable.PrimaryKey = ["id"]

  hTable.Update

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Removed all nodes from the DomotiGa Z-Wave list.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get manufacturer name from the Open Z-Wave device list and update the table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OZW_GetManufacturerAndModel()

  Dim rResultNodes As Result
  Dim sManufacturer As String
  Dim sModel As String

  rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave")
  If rResultNodes Then
    If (rResultNodes.Count >= 1) Then
      For Each rResultNodes
        sManufacturer = DomoZWave_GetNodeManufacturerName(iHomeID, rResultNodes!nodeid)
        sManufacturer = Replace(sManufacturer, "Unknown: ", "")
        sModel = DomoZWave_GetNodeProductName(iHomeID, rResultNodes!nodeid)
        sModel = Replace(sModel, "Unknown: ", "")

        ' Add it to the database now
        Main.hDB.Exec("UPDATE devices_zwave SET manufacturer = &1, model = &2 WHERE nodeid = &3", sManufacturer, sModel, rResultNodes!nodeid)
      Next
    Endif
  Endif

End

Public Sub GetNodeManufacturerName(iNodeId As Integer) As String

  Return DomoZWave_GetNodeManufacturerName(iHomeID, iNodeId)

End

Public Sub GetNodeProductName(iNodeId As Integer) As String

  Return DomoZWave_GetNodeProductName(iHomeID, iNodeId)

End

Public Sub GetNodeLibraryVersion(iNodeId As Integer) As String

  Return DomoZWave_GetNodeLibraryVersion(iHomeID, iNodeId)

End

Public Sub GetNodeProtocolVersion(iNodeId As Integer) As String

  Return DomoZWave_GetNodeProtocolVersion(iHomeID, iNodeId)

End

Public Sub GetNodeApplicationVersion(iNodeId As Integer) As String

  Return DomoZWave_GetNodeApplicationVersion(iHomeID, iNodeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get value from node
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentValueNode(iNodeId As Integer) As String

  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT * FROM devices_zwave WHERE nodeid = &1", iNodeId)
  If Not rResult.Available Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Node with id '" & iNodeId & "' not found in database!")
    Return 0
  Else
    Return rResult!value
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update a node record with value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateValueNode(sAddress As String, iValue As Integer, sValue As String) As Boolean

  Dim rResult As Result

  Select iValue
    Case 1
      rResult = Main.hDB.Exec("UPDATE devices_zwave SET value = &1 WHERE nodeid = &2", sValue, sAddress)
    Case 2
      rResult = Main.hDB.Exec("UPDATE devices_zwave SET value2 = &1 WHERE nodeid = &2", sValue, sAddress)
    Case 3
      rResult = Main.hDB.Exec("UPDATE devices_zwave SET value3 = &1 WHERE nodeid = &2", sValue, sAddress)
    Case 4
      rResult = Main.hDB.Exec("UPDATE devices_zwave SET value4 = &1 WHERE nodeid = &2", sValue, sAddress)
    Case Else
      ' We need to skip Value255 - Battery level
      Return True
  End Select

  If rResult Then
    Return True
  Else
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Node with id '" & sAddress & "' not found in database!")
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Timer for checking Open Z-Wave library connectivity
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub tOZWKeepAlive_Timer()

  If iControllerID = 0 Then
    Main.WriteLog(LogLabel & "ERROR: interface FAILED to connect to Port " & $sSerPort & " (retrying)")
    tOZWKeepAlive.Stop
  Else

    If bOZWKeepAliveState = False Then

       If bOZWKeepAlivePrevState = True Then
          'Main.WriteLog(LogLabel & "ERROR: interface FAILED to respond in the polltime interval")
          'Main.ControlLed("ZWave", "Off")
       Endif
       
    Else

       If bOZWKeepAlivePrevState = False Then
          'Main.WriteLog(LogLabel & "interface responded again in the polltime interval")
          'Main.ControlLed("ZWave", "On")
       Endif

    Endif

    bOZWKeepAlivePrevState = bOZWKeepAliveState
    bOZWKeepAliveState = False

  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset led status in main status bar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tZWaveLED_Timer()

  Main.ControlLed("ZWave", "Off")
  tZWaveLED.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Destroyed open-zwave wrapper.")
  DomoZWave_Destroy()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieves the OpenZWave library version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Function Version() As String

  ' First we try to call the function. This will fail if the library doesn't exist or is invalid
  Try DomoZwave_Version()
  If Error Then
    Return ""
  Endif

  Return DomoZWave_Version()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Open Z-Wave functions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OZW_SendCommand(sAddress As String, sCmd As String)

  Dim iBrightness As Integer
  Dim sNode, sInstance As String
  Dim aAddr As String[]

  ' address format 8:2, for instance 2 of node 8
  aAddr = Scan(sAddress, "*:*")
  If aAddr.Count = 2 Then
    sNode = aAddr[0]
    sInstance = aAddr[1]
  Else
    sNode = sAddress
    sInstance = 1 ' no instance specified, use first
  Endif

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Sending command " & sCmd & " to address " & sAddress & ".")
  sCmd = UCase(sCmd)
  If sCmd = "ON"
    SetValue(sNode, sInstance, 255)
  Else If sCmd = "OFF"
    SetValue(sNode, sInstance, 0)
  Else If InStr(sCmd, "DIM ") Then ' DIM 0-100
    iBrightness = Val(Replace(sCmd, "DIM ", ""))
    SetValue(sNode, sInstance, iBrightness)
  Else
    Main.WriteDebugLog(LogLabel & "Only DIM and ON/OFF commands are supported!")
  Endif

End

Public Sub SetValue(iNodeId As Integer, iInstance As Integer, iValue As Integer)

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Set value for node " & iNodeId & " and instance " & iInstance & " to " & iValue)
  DomoZWave_SetValue(iHomeID, iNodeId, iInstance, iValue)

End

Public Sub OZW_SetIds(homeId As Integer, controllerId As Integer)

  iHomeID = homeId
  iControllerID = controllerId
  sControllerType = DomoZWave_ControllerType(iHomeID)
  sZWaveAPIVersion = DomoZWave_GetLibraryVersion(iHomeID)
  ' Strip off "Z-Wave "
  sZWaveAPIVersion = Replace(sZWaveAPIVersion, "Z-Wave ", "")
  sZWaveZDKVersion = ExpandVersion(sZWaveAPIVersion)

  ' Now we can write to the main logfile that we are connected
  Main.WriteLog(LogLabel & "interface successfully connected to Port " & $sSerPort)

  If $bZWaveDebug Then
    Main.WriteDebugLog(LogLabel & "interface successfully connected to Port " & $sSerPort)
    Main.WriteDebugLog(LogLabel & "Received response from Z-Wave controller: homeid=" & homeId & ", nodeid=" & iControllerID & ".")
    Main.WriteDebugLog(LogLabel & "Z-Wave controller type: " & sControllerType & ".")
    Main.WriteDebugLog(LogLabel & "Z-Wave API version: " & sZWaveAPIVersion & ", SDK version: " & sZWaveZDKVersion & ".")
  Endif

  ' Enable LED if we got a response from the Open Z-Wave library
  Main.ControlLed("ZWave", "On")

  ' Set the timer to Open Z-Wave PollTime milliseconds polling now
  tOZWKeepAlive.Stop

  If $iPollTime <> 0 Then
    tOZWKeepAlive.Delay = $iPollTime
    tOZWKeepAlive.Start
    bOZWKeepAliveState = True
    bOZWKeepAlivePrevState = True
  Endif

End

Public Sub OZW_SetValue(iHomeId As Integer, iNodeId As String, iInstanceId As Integer, iValue As Integer, sValue As String)

  Dim iDeviceId As Integer
  Dim sAddress As String

  sAddress = iNodeId & IIf(iInstanceId > 1, ":" & iInstanceId, "")
  UpdateValueNode(sAddress, iValue, sValue)
  ' update value
  If iNodeId Then
    If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Got value changed notification for node " & iNodeid & " and instance " & iInstanceId & " value" & iValue & " changed to " & sValue & ".")
    iDeviceId = Devices.Find(Instance, sAddress, Devices.FindInterface("Z-Wave Controller"), "ZWAVE")
    If iValue = 255 Then ' battery level
      If iDeviceId Then Devices.Battery(iDeviceId, sValue)
    Else ' device value
      If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, iValue, sValue)
    Endif
  Endif

  ' We got a status update from the Z-Wave network, update the KeepAlive variable
  bOZWKeepAliveState = True

End

Public Sub OZW_AllQueried()

  Dim rResultNodes As Result

  ' The Open Z-Wave library is fully initialized now
  bOZWInitialized = True

  Main.WriteLog(LogLabel & "interface is fully initialized.")

  ' In debug mode, first report we are fully initialized
  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "All Z-Wave devices are Queried. Z-Wave devices can be used now.")

  If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Searching for nodes to enable/disable poll.")
  rResultNodes = Main.hDB.Exec("SELECT * from devices_zwave WHERE sleeping is FALSE AND nodeid NOT LIKE '%:%' ORDER BY length(nodeid), nodeid")
  If rResultNodes Then
    If (rResultNodes.Count >= 1) Then
      For Each rResultNodes
        If rResultNodes!nodeid <> Main.hZWave.iControllerID Then ' we cannot query ourselves
          If $iPollTime = 0 Then
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Disable polling for node " & rResultNodes!nodeid)
            DomoZWave_DisablePolling(iHomeID, rResultNodes!nodeid)
          Else
            If $bZWaveDebug Then Main.WriteDebugLog(LogLabel & "Enable polling for node " & rResultNodes!nodeid & " every " & $iPollTime & " mSec.")
            DomoZWave_EnablePolling(iHomeID, rResultNodes!nodeid, $iPolltime)
          Endif
        Endif
      Next
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'--------------------------------------------------------
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' implement properties
Function Port_Read() As String

  Return $sSerPort

End

Sub Port_Write(Value As String)

  $sSerPort = Value

End

Private Function ZWaveDebug_Read() As Boolean

  Return $bZWaveDebug

End

Private Sub ZWaveDebug_Write(Value As Boolean)

  $bZWaveDebug = Value

End

Private Function Polltime_Read() As Integer

  Return $iPolltime

End

Private Sub Polltime_Write(Value As Integer)

  $iPolltime = Value

End

Private Function PolltimeListening_Read() As String

  Return $sPollTimeListening

End

Private Sub PolltimeListening_Write(Value As String)

  $sPollTimeListening = Value

End

Private Function PolltimeSleeping_Read() As String

  Return $sPollTimeSleeping

End

Private Sub PolltimeSleeping_Write(Value As String)

  $sPollTimeSleeping = Value

End

Private Function UpdateNeighbor_Read() As String

  Return $sUpdateNeighbor

End

Private Sub UpdateNeighbor_Write(Value As String)

  $sUpdateNeighbor = Value

End

Private Function EnablePollListening_Read() As Boolean

  Return $bEnablePollListening

End

Private Sub EnablePollListening_Write(Value As Boolean)

  $bEnablePollListening = Value

End

Private Function EnablePollSleeping_Read() As Boolean

  Return $bEnablePollSleeping

End

Private Sub EnablePollSleeping_Write(Value As Boolean)

  $bEnablePollSleeping = Value

End

Private Function EnableUpdateNeighbor_Read() As Boolean

  Return $bEnableUpdateNeighbor

End

Private Sub EnableUpdateNeighbor_Write(Value As Boolean)

  $bEnableUpdateNeighbor = Value

End

