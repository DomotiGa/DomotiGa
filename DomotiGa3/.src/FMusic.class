' Gambas class file

' Description:
' FMusic.class
' Room for audio player controls.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Credits:
' Sebastiaan for SqueezePlayer code and Music GUI.

' Read file called COPYING for license details.

Private bPioneerControl As Boolean = True

Public Sub Form_Open()

  If Plugin.IsPluginEnabled("Onkyo", 0) Then
    pnlOnkyo.Enabled = True
  Else
    pnlOnkyo.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("Denon", 0) Then
    pnlDenon.Enabled = True
  Else
    pnlDenon.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("SqueezeServer", 0) Then
    pnlSqueeze.Enabled = True
  Else
    pnlSqueeze.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("IPort", 0) Then
    pnlIPort.Enabled = True
  Else
    pnlIPort.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("Pioneer", 0) Then
    pnlPioneer.Enabled = True
  Else
    pnlPioneer.Enabled = False
  Endif

  pnlDenon.Hide
  pnlOnkyo.Hide
  pnlIPort.Hide
  pnlSqueeze.Hide
  pnlPioneer.Hide

End

Public Sub Form_Resize()

  pnlSqueeze.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  pnlDenon.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  pnlOnkyo.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  pnlIPort.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  pnlPioneer.Move(4, 30, Me.ClientWidth - 10, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Public Sub btnOnkyo_Click()

  btnOnkyo.Enabled = False
  btnDenon.Enabled = True
  btnIPort.Enabled = True
  btnSqueeze.Enabled = True
  btnPioneer.Enabled = True
  btnRefresh.Visible = False
  pnlOnkyo.Show
  pnlDenon.Hide
  pnlIPort.Hide
  pnlSqueeze.Hide
  pnlPioneer.Hide

End

Public Sub btnDenon_Click()

  btnDenon.Enabled = False
  btnOnkyo.Enabled = True
  btnIPort.Enabled = True
  btnSqueeze.Enabled = True
  btnPioneer.Enabled = True
  btnRefresh.Visible = False
  pnlDenon.Show
  pnlOnkyo.Hide
  pnlIPort.Hide
  pnlSqueeze.Hide
  pnlPioneer.Hide

End

Public Sub btnSqueeze_Click()

  If Plugin.IsPluginEnabled("SqueezeServer", 0) Then
    btnSqueeze.Enabled = False
    btnDenon.Enabled = True
    btnOnkyo.Enabled = True
    btnIPort.Enabled = True
    btnPioneer.Enabled = True
    btnRefresh.Visible = True
    SqueezeAddPlayers()
    SqueezeAddAlbums()
    pnlSqueeze.Show
    pnlDenon.Hide
    pnlOnkyo.Hide
    pnlIPort.Hide
    pnlPioneer.Hide
    tmrCurrentSong.Enabled = True
  Endif

End


Public Sub btnPioneer_Click()

  If Plugin.IsPluginEnabled("Pioneer", 0) Then
    btnPioneer.Enabled = False
    btnDenon.Enabled = True
    btnOnkyo.Enabled = True
    btnIPort.Enabled = True
    btnSqueeze.Enabled = True
    btnRefresh.Visible = True
    RefreshPioneerControls()
    pnlDenon.Hide
    pnlOnkyo.Hide
    pnlIPort.Hide
    pnlPioneer.Show
  Endif

End

Private Sub RefreshPioneerControls()

  Dim sTemp As String
  bPioneerControl = False
  If Main.bServer Then
    If UCase(Main.GetGlobalVar("Pioneer_Power")) = "ON" Then
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("power_2", "")
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("volume", "")
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("volume_2", "")
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("input", "")
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("input_2", "")
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("mute", "")
      Try Plugin.GetPluginObject("Pioneer", 1).Interface.GetCommand("mute_2", "")
      Sleep 0.5 ' wait for responses to be populated into global vars...
    Endif
  Else
    Client.GetGlobalVars()
    If UCase(Main.GetGlobalVar("Pioneer_Power")) = "ON" Then
      Client.AVGetControl("pioneer", "power_2", "")
      Client.AVGetControl("pioneer", "volume", "")
      Client.AVGetControl("pioneer", "volume_2", "")
      Client.AVGetControl("pioneer", "input", "")
      Client.AVGetControl("pioneer", "input_2", "")
      Client.AVGetControl("pioneer", "mute", "")
      Client.AVGetControl("pioneer", "mute_2", "")
      Sleep 0.5 'wait for responses to be populated into global vars...
      Client.GetGlobalVars()
    Endif
  Endif

  tbtnPioneerPower.Value = IIf(UCase(Main.GetGlobalVar("Pioneer_Power")) = "ON", True, False)
  If Not tbtnPioneerPower.Value Then
    fraPioneerInput.Enabled = False
    fraPioneerVolume.Enabled = False
  Endif
  tbtnPioneerPower_2.Value = IIf(UCase(Main.GetGlobalVar("Pioneer_Power_2")) = "ON", True, False)
  If Not tbtnPioneerPower_2.Value Then
    fraPioneerInput_2.Enabled = False
    fraPioneerVolume_2.Enabled = False
  Endif
  sTemp = Main.GetGlobalVar("Pioneer_Volume")
  If sTemp <> "" Then
    If Val(sTemp) >= 0 And Val(sTemp) <= 100 Then
      slPioneerVolume.Value = 100 - Val(sTemp)
    Endif
  Endif
  sTemp = Main.GetGlobalVar("Pioneer_Volume_2")
  If sTemp <> "" Then
    If Val(sTemp) >= 0 And Val(sTemp) <= 100 Then
      slPioneerVolume_2.Value = 100 - Val(sTemp)
    Endif
  Endif
  SetPioneerInputControl("MAIN", Main.GetGlobalVar("Pioneer_Input"))
  SetPioneerInputControl("ZONE2", Main.GetGlobalVar("Pioneer_Input_2"))
  bPioneerControl = True

End

Private Sub SetPioneerInputControl(sZone As String, sInput As String)

  bPioneerControl = False
  Select Case UCase(sInput)
    Case "PHONO"
      If sZone = "MAIN" Then rbPioneerInputPhono.Value = True
    Case "CD"
      If sZone = "MAIN" Then rbPioneerInputCD.Value = True
      If sZone = "ZONE2" Then rbPioneerInputCD_2.Value = True
    Case "TUNER"
      If sZone = "MAIN" Then rbPioneerInputTuner.Value = True
      If sZone = "ZONE2" Then rbPioneerInputTuner_2.Value = True
    Case "CD-R/TAPE"
      If sZone = "MAIN" Then rbPioneerInputCDR.Value = True
      If sZone = "ZONE2" Then rbPioneerInputCDR_2.Value = True
    Case "DVD"
      If sZone = "MAIN" Then rbPioneerInputDVD.Value = True
      If sZone = "ZONE2" Then rbPioneerInputDVD_2.Value = True
    Case "TV/SAT"
      If sZone = "MAIN" Then rbPioneerInputTV.Value = True
      If sZone = "ZONE2" Then rbPioneerInputTV_2.Value = True
    Case "VIDEO1"
      If sZone = "MAIN" Then rbPioneerInputVideo1.Value = True
      If sZone = "ZONE2" Then rbPioneerInputVideo1_2.Value = True
    Case "VIDEO2"
      If sZone = "MAIN" Then rbPioneerInputVideo2.Value = True
      If sZone = "ZONE2" Then rbPioneerInputVideo2_2.Value = True
    Case "DVR/BDR"
      If sZone = "MAIN" Then rbPioneerInputDVR.Value = True
      If sZone = "ZONE2" Then rbPioneerInputDVR_2.Value = True
    Case "IPOD/USB"
      If sZone = "MAIN" Then rbPioneerInputIpod.Value = True
      If sZone = "ZONE2" Then rbPioneerInputIpod_2.Value = True
    Case "XMRadio"
      If sZone = "MAIN" Then rbPioneerInputXM.Value = True
      If sZone = "ZONE2" Then rbPioneerInputXM_2.Value = True
    Case "HDMI1"
      If sZone = "MAIN" Then rbPioneerInputHDMI1.Value = True
    Case "HDMI2"
      If sZone = "MAIN" Then rbPioneerInputHDMI2.Value = True
    Case "HDMI3"
      If sZone = "MAIN" Then rbPioneerInputHDMI3.Value = True
    Case "HDMI4"
      If sZone = "MAIN" Then rbPioneerInputHDMI4.Value = True
    Case "HDMI5"
      If sZone = "MAIN" Then rbPioneerInputHDMI5.Value = True
    Case "BD"
      If sZone = "MAIN" Then rbPioneerInputBD.Value = True
    Case "HomeMedia"
      If sZone = "MAIN" Then rbPioneerInputHomeMedia.Value = True
      If sZone = "ZONE2" Then rbPioneerInputHomeMedia_2.Value = True
    Case "SIRIUS"
      If sZone = "MAIN" Then rbPioneerInputSirius.Value = True
      If sZone = "ZONE2" Then rbPioneerInputSirius_2.Value = True
  End Select
  bPioneerControl = True

End

Private Sub SqueezeAddPlayers()

  Dim iCount As Integer
  Dim rResult As Result
  Dim bConnected As Boolean

  tbvSqueezePlayers.Clear()
  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("SqueezeServer Interface"), 1)
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  Endif
  With tbvSqueezePlayers
    .Font.Size = "9"
    .Rows.Count = rResult.Count
    .Columns.Count = 3
    .Columns[0].Width = 20
    .Columns[1].Width = 200
    .Columns[1].Title = ("Name")
    .Columns[2].Width = 100
    .Columns[2].Title = ("Status")
  End With
  For iCount = 0 To rResult.Count - 1
    If Main.bServer Then
      bConnected = Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayerConnectedToServer(rResult!address)
    Else
      bConnected = Client.SqueezeboxGetIsPlayerConnectedToServer(rResult!address)
    Endif
    If bConnected Then
      tbvSqueezePlayers[iCount, 0].Picture = Picture[Main.sBaseDir & "/icons/green-icon.png"]
      tbvSqueezePlayers[iCount, 2].Text = "Online"
    Else
      tbvSqueezePlayers[iCount, 0].Picture = Picture[Main.sBaseDir & "/icons/red-icon.png"]
      tbvSqueezePlayers[iCount, 2].Text = "Offline"
    Endif
    tbvSqueezePlayers[iCount, 1].Text = rResult!name
  Next

End

Private Sub SqueezeAddAlbums()

  Dim iPos, iCount As Integer
  Dim s, sId, sName As String
  Dim aAlbums As New String[]

  If Main.bServer Then
    aAlbums = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetAlbums()
  Else
    aAlbums = Client.SqueezeboxGetAlbums()
  Endif
  tbvSqueezeAlbums.Clear
  If aAlbums.Count > 0 Then
    With tbvSqueezeAlbums
      .Font.Size = "9"
      .Rows.Count = aAlbums.Count
      .Columns.Count = 2
      .Columns[0].Width = 30
      .Columns[0].Title = ("Id")
      .Columns[1].Width = 200
      .Columns[1].Title = ("Name")
    End With
    iCount = 0
    For Each s In aAlbums
      iPos = InStr(s, "^")
      sId = Mid(s, 1, iPos - 1)
      sName = Mid(s, iPos + 1)
      tbvSqueezeAlbums[iCount, 0].Text = sId
      tbvSqueezeAlbums[iCount, 1].Text = sName
      iCount = iCount + 1
    Next
  Endif

End

Public Sub btnIPort_Click()

  btnIPort.Enabled = False
  btnSqueeze.Enabled = True
  btnDenon.Enabled = True
  btnOnkyo.Enabled = True
  btnPioneer.Enabled = True
  btnRefresh.Visible = False
  pnlIPort.Show
  pnlSqueeze.Hide
  pnlDenon.Hide
  pnlOnkyo.Hide
  pnlPioneer.Hide

End

Public Sub slOnkyoVolume_Change()

  ControlOnkyo("volume", slOnkyoVolume.Value)
  lcdOnkyoVolume.Value = slOnkyoVolume.Value

End

Public Sub btnOnkyoMute_Click()

  If btnOnkyoMute.Value = True Then
    ControlOnkyo("mute", "on")
  Else
    ControlOnkyo("mute", "off")
  Endif

End

Private Sub ControlOnkyo(sCmd As String, sValue As String)

  If Main.bServer Then
    Try Plugin.GetPluginObject("Onkyo", 1).Interface.SetCommand(sCmd, sValue, 1)
  Else
    Client.AVSetControl("onkyo", sCmd, sValue, 1)
  Endif

End

Private Sub ControlDenon(sCmd As String, sValue As String)

  If Main.bServer Then
    Try Plugin.GetPluginObject("Denon", 1).Interface.SetCommand(sCmd, sValue, 1)
  Else
    Client.AVSetControl("denon", sCmd, sValue, 1)
  Endif

End

Private Sub ControlPioneer(sCmd As String, sValue As String)

  If Main.bServer Then
    Try Plugin.GetPluginObject("Pioneer", 1).Interface.SetCommand(sCmd, sValue, 1)
  Else
    Client.AVSetControl("pioneer", sCmd, sValue, 1)
  Endif

End

Public Sub InputSelectOnkyo_Click()

  ControlOnkyo("input", Last.Tag)

End

Public Sub InputSelectPioneer_Click()

  If bPioneerControl Then
    ControlPioneer("input", Last.Tag)
  Else
    bPioneerControl = True
  Endif

End

Public Sub InputSelectPioneer_2_Click()

  If bPioneerControl Then
    ControlPioneer("input_2", Last.Tag)
  Else
    bPioneerControl = True
  Endif

End

Public Sub tbtnOnkyoPower_Click()

  If tbtnOnkyoPower.Value Then
    tbtnOnkyoPower.Text = "On"
    ControlOnkyo("power", "on")
  Else
    tbtnOnkyoPower.Text = "Standby"
    ControlOnkyo("power", "off")
  Endif

End

Public Sub tbtnDenonPower_Click()

  If tbtnDenonPower.Value Then
    tbtnDenonPower.Text = "On"
    ControlDenon("power", "on")
  Else
    tbtnDenonPower.Text = "Standby"
    ControlDenon("power", "off")
  Endif

End

Public Sub slDenonVolume_Change()

  ControlDenon("volume", slDenonVolume.Value)
  lcdDenonVolume.Value = slDenonVolume.Value

End

Public Sub btnDenonMute_Click()

  If btnDenonMute.Value = True Then
    ControlDenon("mute", "on")
  Else
    ControlDenon("mute", "off")
  Endif

End

Public Sub btnOnkyoVolUp_Click()

  ControlOnkyo("volume", "up1")

End

Public Sub btnOnkyoVolDown_Click()

  ControlOnkyo("volume", "down1")

End

Public Sub btnIPortPlayPause_Click()

  ControlIPort("playctrl", "play")

End

Private Sub ControlIPort(sCmd As String, sValue As String)

  If Main.bServer Then
    Try Plugin.GetPluginObject("IPort", 1).Interface.SetCommand(sCmd, sValue, 1)
  Else
    Client.AVSetControl("iport", sCmd, sValue, 1)
  Endif

End

Public Sub btnIPortStop_Click()

  ControlIPort("playctrl", "stop")

End

Public Sub btnIPortPrev_Click()

  ControlIPort("playctrl", "prev")

End

Public Sub btnIPortNext_Click()

  ControlIPort("playctrl", "next")

End

Public Sub btnIPortRew_Click()

  ControlIPort("playctrl", "startrew")

End

Public Sub btnIPortFF_Click()

  ControlIPort("playctrl", "startff")

End

Public Sub btnIPortEndFFRew_Click()

  ControlIPort("playctrl", "endffrew")

End

Public Sub btnIPortLEDOff_Click()

  ControlIPort("ledctrl", "off")

End

Public Sub btnIPortLEDOn_Click()

  ControlIPort("ledctrl", "on")

End

Public Sub btnSqueezeStop_Click()

  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.StopPlayer(txtSqueezePlayerId.Text)
  Else
    Client.SqueezeboxStopPlayer(txtSqueezePlayerId.Text)
  Endif
  buttonStatusStop()

End

Public Sub btnSqueezePrev_Click()

  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.PrevNumberPlayer(txtSqueezePlayerName.Text)
  Else
    Client.SqueezeboxPrevNumberPlayer(txtSqueezePlayerName.Text)
  Endif

End

Public Sub btnSqueezeNext_Click()

  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.NextNumberPlayer(txtSqueezePlayerName.Text)
  Else
    Client.SqueezeboxNextNumberPlayer(txtSqueezePlayerName.Text)
  Endif

End

Public Sub btnSqueezePlay_Click()

  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayPlayer(txtSqueezePlayerId.Text)
  Else
    Client.SqueezeboxPlayPlayer(txtSqueezePlayerId.Text)
  Endif
  buttonStatusPlay()

End

Private Sub buttonStatusStop()

  btnSqueezePlay.Enabled = True
  btnSqueezeStop.Enabled = False
  btnSqueezePause.Enabled = False
  btnSqueezeNext.Enabled = False
  btnSqueezePrev.Enabled = False

End

Private Sub buttonStatusPlay()

  btnSqueezePlay.Enabled = False
  btnSqueezeStop.Enabled = True
  btnSqueezePause.Enabled = True
  btnSqueezeNext.Enabled = True
  btnSqueezePrev.Enabled = True

End

Private Sub buttonStatusPause()

  btnSqueezePlay.Enabled = True
  btnSqueezeStop.Enabled = True
  btnSqueezePause.Enabled = False
  btnSqueezeNext.Enabled = False
  btnSqueezePrev.Enabled = False

End

Public Sub slSqueezeVolume_Change()

  lcdSqueezeVolume.Value = slSqueezeVolume.Value
  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.SetVolumePlayer(txtSqueezePlayerName.Text, slSqueezeVolume.Value)
  Else
    Client.SqueezeboxSetVolumePlayer(txtSqueezePlayerName.Text, slSqueezeVolume.Value)
  Endif

End

Public Sub btnSqueezePlayAlbum_Click()

  Dim iRow As Integer
  Dim sId, sName, sPlayerName, sPlayerId As String

  iRow = tbvSqueezeAlbums.Row
  sId = tbvSqueezeAlbums[iRow, 0].Text
  sName = tbvSqueezeAlbums[iRow, 1].Text
  sPlayerName = txtSqueezePlayerName.Text
  sPlayerId = txtSqueezePlayerId.Text
  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.ClearPlaylistPlayer(sPlayerId)
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.AddAlbumToPlaylistPlayer(sPlayerId, sName)
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayPlayer(sPlayerId)
  Else
    Client.SqueezeboxClearPlaylistPlayer(sPlayerId)
    Client.SqueezeboxAddAlbumToPlaylistPlayer(sPlayerId, sName)
    Client.SqueezeboxPlayPlayer(sPlayerName, sPlayerId)
  Endif
  buttonStatusPlay()

End

Public Sub btnSqueezeAddToPlaylist_Click()

  Dim iRow As Integer
  Dim sId, sName As String

  iRow = tbvSqueezeAlbums.Row
  sId = tbvSqueezeAlbums[iRow, 0].Text
  sName = tbvSqueezeAlbums[iRow, 1].Text
  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.AddAlbumToPlaylistPlayer(txtSqueezePlayerName.Text, sName)
  Else
    Client.SqueezeboxAddAlbumToPlaylistPlayer(txtSqueezePlayerName.Text, sName)
  Endif

End

Public Sub btnSqueezePause_Click()

  If Main.bServer Then
    Plugin.GetPluginObject("SqueezeServer", 1).Interface.PausePlayer(txtSqueezePlayerId.Text)
  Else
    Client.SqueezeboxPausePlayer(txtSqueezePlayerId.Text)
  Endif
  buttonStatusPause()

End

Public Sub tmrCurrentSong_Timer()

  Dim sCurrentTitle, sCurrentArtist As String

  If txtSqueezePlayerId.Text <> "" Then
    If Main.bServer Then
      sCurrentTitle = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentTitle(txtSqueezePlayerId.Text)
      sCurrentArtist = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentArtist(txtSqueezePlayerId.Text)
    Else
      sCurrentTitle = Client.SqueezeboxGetCurrentTitlePlayer(txtSqueezePlayerId.Text)
      sCurrentArtist = Client.SqueezeboxGetCurrentArtistPlayer(txtSqueezePlayerId.Text)
    Endif
    lblSqueezeCurrentTitle.Text = sCurrentTitle
    lblSqueezeCurrentArtist.Text = sCurrentArtist
  Endif

End

Public Sub tbvSqueezePlayers_Click()

  Dim iIndex As Integer
  Dim sPlayerId, sPlayerName, sPlayerType, sVolume, sMode, sCurrentTitle, sCurrentArtist, sName, sStatus As String
  Dim rResult As Result

  iIndex = tbvSqueezePlayers.Row
  sName = tbvSqueezePlayers[iIndex, 1].Text
  sStatus = tbvSqueezePlayers[iIndex, 2].Text

  rResult = Devices.FindAddressForDevice(sName)
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  Endif

  If sStatus = "Online" Then
    If Main.bServer Then
      sPlayerId = rResult!address
      sPlayerName = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetPlayerName(sPlayerId)
      sPlayerType = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetIsPlayer(sPlayerId)
      sVolume = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetVolumePlayer(sPlayerId)
      sMode = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetModePlayer(sPlayerId)
      sCurrentTitle = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentTitle(sPlayerId)
      sCurrentArtist = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentArtist(sPlayerId)
    Else
      sPlayerId = rResult!address
      sPlayerName = Client.SqueezeboxGetPlayerName(sPlayerId)
      sPlayerType = Client.SqueezeboxGetIsPlayer(sPlayerId)
      sVolume = Client.SqueezeboxGetVolumePlayer(sPlayerId)
      sMode = Client.SqueezeboxGetModePlayer(sPlayerId)
      sCurrentTitle = Client.SqueezeboxGetCurrentTitlePlayer(sPlayerId)
      sCurrentArtist = Client.SqueezeboxGetCurrentArtistPlayer(sPlayerId)
    Endif

    Select Case sMode
      Case "stop"
        buttonStatusStop()
      Case "play"
        buttonStatusPlay()
      Case "pauze"
        buttonStatusPause()
    End Select

    If Len(sVolume) Then
      fraSqueeVolume.Visible = True
      slSqueezeVolume.Value = Val(sVolume)
      lcdSqueezeVolume.Value = sVolume
    Else
      slSqueezeVolume.Value = 0
      lcdSqueezeVolume.Value = 0
      fraSqueeVolume.Visible = False
    Endif
    txtSqueezePlayerId.Text = sPlayerId
    txtSqueezePlayerName.Text = sPlayerName
    txtSqueezePlayerType.Text = sPlayerType
    lblSqueezeCurrentTitle.Text = sCurrentTitle
    lblSqueezeCurrentArtist.Text = sCurrentArtist
    frmSqueezeControl.Visible = True
    tabPanelSqueezeMusic.Visible = True
  Endif

Catch

End

Public Sub btnRefresh_Click()

  If pnlSqueeze.Visible Then SqueezeAddPlayers()
  If pnlPioneer.Visible Then RefreshPioneerControls()

End

Public Sub slPioneerVolume_Change()

  If bPioneerControl Then ControlPioneer("volume", (100 - slPioneerVolume.Value))
  lcdPioneerVolume.Value = 100 - slPioneerVolume.Value

End

Public Sub slPioneerVolume_2_Change()

  If bPioneerControl Then ControlPioneer("volume_2", (100 - slPioneerVolume_2.Value))
  lcdPioneerVolume_2.Value = 100 - slPioneerVolume_2.Value

End

Public Sub tbtnPioneerPower_Click()

  If tbtnPioneerPower.Value Then
    tbtnPioneerPower.Text = "On"
    fraPioneerInput.Enabled = True
    fraPioneerVolume.Enabled = True
    If bPioneerControl Then ControlPioneer("power", "on")
  Else
    tbtnPioneerPower.Text = "Standby"
    fraPioneerInput.Enabled = False
    fraPioneerVolume.Enabled = False
    If bPioneerControl Then ControlPioneer("power", "off")
  Endif

End

Public Sub tbtnPioneerPower_2_Click()

  If tbtnPioneerPower_2.Value Then
    tbtnPioneerPower_2.Text = "On"
    fraPioneerInput_2.Enabled = True
    fraPioneerVolume_2.Enabled = True
    If bPioneerControl Then ControlPioneer("power_2", "on")
  Else
    tbtnPioneerPower_2.Text = "Standby"
    fraPioneerInput_2.Enabled = False
    fraPioneerVolume_2.Enabled = False
    If bPioneerControl Then ControlPioneer("power_2", "off")
  Endif

End

Public Sub btnPioneerVolUp_Click()

  slPioneerVolume.Value = slPioneerVolume.Value - 1

End

Public Sub btnPioneerVolUp_2_Click()

  slPioneerVolume_2.Value = slPioneerVolume_2.Value - 1

End

Public Sub btnPioneerVolDown_Click()

  slPioneerVolume.Value = slPioneerVolume.Value + 1

End

Public Sub btnPioneerVolDown_2_Click()

  slPioneerVolume_2.Value = slPioneerVolume_2.Value + 1

End

Public Sub btnPioneerMute_Click()

  If btnPioneerMute.Value Then
    If bPioneerControl Then ControlPioneer("mute", "on")
  Else
    If bPioneerControl Then ControlPioneer("mute", "off")
  Endif

End

Public Sub btnPioneerMute_2_Click()

  If btnPioneerMute_2.Value Then
    If bPioneerControl Then ControlPioneer("mute_2", "on")
  Else
    If bPioneerControl Then ControlPioneer("mute_2", "off")
  Endif

End

Public Sub btnSqueezeRefreshAlbumList_Click()

  SqueezeAddAlbums()

End
