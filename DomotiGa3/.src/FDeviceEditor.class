' Gambas class file

' Description:
' FDeviceEditor.class
' Support for creating and edit all device parameters.

' Development Status:
' Finished and working, maybe needs better error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public rResultDevice As Result
Public rResultType As Result
Public rResultInterface As Result
Public rResultInterfaces As Result
Public rResultLocation As Result
Public rResultGroups As Result
Public rResultDeviceTypes As Result
Public rResultFloorplan As Result
Public bAddDevice As Boolean
Private sCurrentDeviceName As String

' device values editor
Private iSortValuesColumn As Integer
Private bSortValuesColumn As Boolean
Private mDeviceValues As Menu

' id of device to edit
Private $iDeviceId As Integer

Public Sub Run(Optional iId As Integer)

  $iDeviceId = iId
  If Not $iDeviceId Then bAddDevice = True
  Me.Show()

End

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)
  cmbHouseCode.Hide
  spDeviceCode.Hide
  LoadDevice()
  GetValueList()
  CreateDeviceValuesMenu()

  ' Hide deviceid if this is an add and set "enabled" by default
  If bAddDevice Then
    TextLblDeviceId.Visible = False
    tbDeviceId.Visible = False
    chkEnabled.Value = True
    btnDeleteDevice.Visible = False
  Endif

  ' give focus to first field
  tbName.SetFocus

End

Public Sub LoadDevice()

  Dim cDeviceType As New Collection
  Dim sDeviceType As String

  ' fill combo with available devicetypes
  cmbModule.Add(" ")
  cmbDeviceType.Add(" ")
  Try rResultDeviceTypes = Main.hDB.Exec("SELECT * FROM devicetypes ORDER BY name")
  If rResultDeviceTypes Then
    If rResultDeviceTypes.Count Then
      For Each rResultDeviceTypes
        cmbModule.Add(rResultDeviceTypes!name)
        ' weed out double device types
        If Len(rResultDeviceTypes!protocol)
          If cDeviceType.Exist(rResultDeviceTypes!protocol) Then Continue
          cDeviceType.Add(rResultDeviceTypes!protocol, rResultDeviceTypes!protocol)
        Endif
      Next
      For Each sDeviceType In cDeviceType
        cmbDeviceType.Add(sDeviceType)
      Next
    Else
      Message(("No devicetypes found!"))
    Endif
  Else
    Message(("No devicetypes database table found!"))
  Endif

  ' fill combo with available interfaces
  cmbInterface.Add(" ")
  Try rResultInterfaces = Main.hDB.Exec("SELECT * FROM plugins ORDER BY interface")
  If rResultInterfaces Then
    If rResultInterfaces.Count Then
      For Each rResultInterfaces
        If rResultInterfaces!protocols Then cmbInterface.Add(rResultInterfaces!interface)
      Next
    Else
      Message(("No interfaces found!"))
    Endif
  Else
    Message(("No interfaces database table found!"))
  Endif

  ' fill available groups list
  rResultGroups = Main.hDB.Exec("SELECT * FROM groups ORDER BY name")
  If rResultGroups And If rResultGroups.Available Then
    For Each rResultGroups
      Try lvGroupAvail.Add(rResultGroups!name, rResultGroups!name)
    Next
  Else
    Message(("No groups database table found!"))
  Endif

  RefreshLocationsList()
  RefreshFloorplansList()

  If bAddDevice Then
    tbX.Text = "0"
    tbY.Text = "0"
  Else
    ' get selected device values
    rResultDevice = Devices.GetDevicesAndValues(["device_id": $iDeviceId, "inc_device_values": False])
    If rResultDevice And If rResultDevice.Available Then
      tbDeviceId.Text = rResultDevice!device_id
      tbName.Text = rResultDevice!device_name
      FDeviceEditor.Title = "Editing Device: " & tbName.Text
      sCurrentDeviceName = tbName.Text
      ' cmbInstance.Index = rResult!device_instance_id
      Try rResultType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rResultDevice!device_devicetype_id)
      If rResultType.Available Then
        If rResultType.Count Then
          cmbModule.Text = rResultType!name
          cmbDeviceType.Text = rResultType!protocol
          tbDeviceDescr.Text = rResultType!description
          FillAddressFields(rResultType!protocol)
          SelectAddressFields(rResultType!protocol, rResultType!addressformat)
        Endif
      Endif

      ' load device picture if available
      LoadDeviceImage()
      ' select interface
      Try rResultInterface = Main.hDB.Exec("SELECT * FROM plugins WHERE id = &1", rResultDevice!device_interface_id)
      If rResultInterface And If rResultInterface.Count Then cmbInterface.Text = rResultInterface!interface

      ' select location
      Try rResultLocation = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResultDevice!device_location_id)
      If rResultLocation And If rResultLocation.Count Then
        Try cmbLocation.Text = rResultLocation!name
      Else
        cmbLocation.Text = ("Not Defined")
      Endif

      ' load instance list and value
      RefreshInstancesList()
      cmbInstance.Index = rResultDevice!device_instance_id - 1

      ' put groups in selected or available groups list
      rResultGroups = Main.hDB.Exec("SELECT * FROM groups")
      If (rResultGroups.Count >= 1) Then
        For Each rResultGroups
          If InStr("|" & rResultDevice!device_groups & "|", "|" & rResultGroups!name & "|") Then
            Try lvGroupActive.Add(rResultGroups!name, rResultGroups!name)
            Try lvGroupAvail.Remove(rResultGroups!name)
          Endif
        Next
      Endif

      ' rest of fields
      tbOnIcon.Text = rResultDevice!device_onicon
      tbOffIcon.Text = rResultDevice!device_officon
      tbDimIcon.Text = rResultDevice!device_dimicon
      Try tbLastSeen.Text = Replace$(Str$(Format(rResultDevice!device_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Try tbFirstSeen.Text = Replace$(Str$(Format(rResultDevice!device_firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Try tbLastChanged.Text = Replace$(Str$(Format(rResultDevice!device_lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")

      DisplayIcons()

      Try chkEnabled.Value = rResultDevice!device_enabled
      Try chkHide.Value = rResultDevice!device_hide
      Try chkSwitchable.Value = rResultDevice!device_switchable
      Try chkDimable.Value = rResultDevice!device_dimable
      Try chkExtended.Value = rResultDevice!device_extcode
      Try chkRepeat.Value = rResultDevice!device_repeatstate
      Try chkDisabledOpenZWavePoll.Value = rResultDevice!device_poll
      vbRepeatPeriod.Value = rResultDevice!device_repeatperiod
      vbRepeatPeriod.Enabled = chkRepeat.Value
      Try chkReset.Value = rResultDevice!device_reset
      vbResetPeriod.Value = rResultDevice!device_resetperiod
      vbResetPeriod.Enabled = chkReset.Value
      tbResetValue.Text = rResultDevice!device_resetvalue
      tbResetValue.Enabled = chkReset.Value

      tbComments.Text = rResultDevice!device_comments
      tbBatt.Text = rResultDevice!device_batterystatus

      ' floorplan values
      tbX.Text = rResultDevice!device_x
      tbY.Text = rResultDevice!device_y

      ' select floorplan
      rResultFloorplan = Main.hDB.Exec("SELECT * FROM floors WHERE floor = &1", rResultDevice!device_floorplan_id)
      If rResultFloorplan.Count Then
        cmbFloorplan.Text = rResultFloorplan!name
      Else
        cmbFloorplan.Text = ("Not Defined")
      Endif
    Else
      Message(("Couldn't load device record!"))
      Me.Close
    Endif
  Endif

Catch ' some errors
  Main.WriteDebugLog("[DeviceEditor] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub RefreshInstancesList()

  Dim rResultInterfaceSelected As Result
  Dim iMax As Integer = 1
  Dim iInstance As Integer

  Try rResultInterfaceSelected = Main.hDB.Exec("SELECT name FROM plugins WHERE interface = &1", cmbInterface.Text)
  If rResultInterfaceSelected.Available Then
    iMax = GetMaxInstanceforPlugin(LCase(rResultInterfaceSelected!name))
  Endif

  cmbInstance.Clear
  If iMax Then
    For iInstance = 1 To iMax
      cmbInstance.Add("Instance #" & iInstance)
    Next
  Endif

End

Private Sub GetMaxInstanceforPlugin(sPluginName As String) As Integer

  Dim iMaxInstance As Integer

  If Main.bServer Then
    iMaxInstance = Plugin.GetPluginMaxInstances(sPluginName)
  Else
    ' FIXME: We are running in client/server mode - call json
    iMaxInstance = 9
  Endif

  Return IIf(iMaxInstance, iMaxInstance, 1)

End

Public Sub RefreshLocationsList()

  Dim rResult As Result

  ' fill combo with available locations
  cmbLocation.Clear
  cmbLocation.Add("")
  rResult = Main.hDB.Exec("SELECT * FROM locations ORDER BY name")
  If rResult And If rResult.Available Then
    For Each rResult
      cmbLocation.Add(rResult!name)
    Next
  Else
    Message(("No locations database table found!"))
  Endif

End

Public Sub RefreshFloorplansList()

  ' fill combo with available floorplans
  cmbFloorplan.Clear
  rResultFloorplan = Main.hDB.Exec("SELECT * FROM floors ORDER BY name")
  If rResultFloorplan Then
    If rResultFloorplan.Count Then
      For Each rResultFloorplan
        cmbFloorplan.Add(rResultFloorplan!name)
      Next
    Endif
  Else
    Message(("No floorplans database table found!"))
  Endif

End

Public Sub RefreshDeviceType()

  rResultType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE name = &1", cmbModule.Text)
  If rResultType.Count Then
    SelectAddressFields(rResultType!protocol, rResultType!addressformat)
    cmbDeviceType.Text = rResultType!protocol
    tbDeviceDescr.Text = rResultType!description
  Endif

End

Public Sub DoesInterfaceDoDeviceType() As Boolean

  Dim rResultInt, rResultDevType As Result
  Dim sDevProtocol, sIntProtocol As String

  rResultDevType = Main.hDB.Exec("SELECT protocol FROM devicetypes WHERE name = &1", cmbModule.Text)
  sDevProtocol = rResultDevType!protocol

  rResultInt = Main.hDB.Exec("SELECT protocols FROM plugins WHERE interface = &1", cmbInterface.Text)
  sIntProtocol = rResultInt!protocols

  If InStr(sIntProtocol, sDevProtocol) Then
    Return True
  Else
    Return False
  Endif

End

Public Sub GetDeviceType() As Integer

  rResultType = Main.hDB.Exec("SELECT id FROM devicetypes WHERE name = &1", cmbModule.Text)
  Return rResultType!id

End

Public Sub GetInterface() As Integer

  rResultInterface = Main.hDB.Exec("SELECT id FROM plugins WHERE interface = &1", cmbInterface.Text)
  Return rResultInterface!id

End

Public Sub GetLocation() As Integer

  rResultLocation = Main.hDB.Exec("SELECT id FROM locations WHERE name = &1", cmbLocation.Text)
  Try Return rResultLocation!id

End

Public Sub SelectAddressFields(sType As String, sAddressFormat As String)

  cmbHouseCode.Enabled = False
  lblOther.Show
  cmbHouseCode.Hide
  spDeviceCode.Hide
  tbOtherAddress.Show
  lblX10.Hide
  chkDisabledOpenZWavePoll.Enabled = False

  Select Case sType
    Case "Shell"
      lblOther.Text = ("Command")
    Case "Ping"
      lblOther.Text = ("IP Addr.")
    Case "1-Wire"
      lblOther.Text = ("1-Wire ID")
    Case "Bluetooth"
      lblOther.Text = ("MAC Addr.")
    Case "HDDTemp"
      lblOther.Text = ("Device")
    Case "Plugwise"
      lblOther.Text = ("MAC Addr.")
    Case "HEUK", "AC", "HEEU"
      lblOther.Text = ("Dev Unit")
    Case "UPS"
      lblOther.Text = ("UPS Name")
    Case "DSC"
      lblOther.Text = ("Zone Name")
    Case "Weeder"
      lblOther.Text = ("Output")
    Case "X10", "KAKU", "ARC", "PLCBUS", "Harrison", "Koppla", "Flamingo", "Waveman", "Impuls", "HE105", "RTS10", "RisingSun", "PhilipsSBC", "EMW200", "AB400", "Energenie"
      cmbHouseCode.Show
      spDeviceCode.Show
      tbOtherAddress.Hide
      lblOther.Hide
      lblX10.Show
      cmbHouseCode.Enabled = True
    Case "KNX"
      lblOther.Text = ("Grp Addr.")
    Case "Z-Wave"
      lblOther.Text = ("Node ID")
      chkDisabledOpenZWavePoll.Enabled = True
    Case "T10-Preset"
      lblOther.Text = ("SwitchNo.")
    Case "FS10", "FS20", "RS200", "AB601", "IT", "REV", "BS-QU", "MARMI", "OA-FM", "KO-FC", "RS862"
      lblOther.Text = ("Addr.Str.")
    Case "K8055"
      lblOther.Text = ("Port")
    Case "MQTT"
      lblOther.Text = ("Topic")
    Case Else
      lblOther.Text = ("Address")
  End Select
  lblInfo.Text = sAddressFormat

End

Public Sub FillAddressFields(sType As String)

  Select Case sType
    Case "X10", "KAKU", "ARC", "PLCBUS", "Harrison", "Koppla", "Flamingo", "Waveman", "Impuls", "HE105", "RTS10", "RisingSun", "PhilipsSBC", "EMW200", "AB400", "Energenie"
      ' fill address fields
      If rResultDevice!device_address Then
        cmbHouseCode.Text = Left$(rResultDevice!device_address, 1)
        Try spDeviceCode.Value = Right$(rResultDevice!device_address, 2)
        If Error Then
          Try spDeviceCode.Value = Right$(rResultDevice!device_address, 1)
        Endif
      Endif
    Case Else
      If rResultDevice!device_address Then
        tbOtherAddress.Text = rResultDevice!device_address
      Endif
  End Select

End

Public Sub GetAddress() As String

  If cmbHouseCode.Enabled = True Then
    Return cmbHouseCode.Text & Format$(spDeviceCode.Value, "0#")
  Else
    Return tbOtherAddress.Text
  Endif

End

Public Sub tbName_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbInterface_Click()

  btnSave.Enabled = True
  RefreshInstancesList()

End

Public Sub cmbHouseCode_Click()

  btnSave.Enabled = True

End

Public Sub spDeviceCode_Click()

  btnSave.Enabled = True

End

Public Sub tbOtherAddress_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbLocation_Click()

  btnSave.Enabled = True

End

Public Sub tbLabel_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel2_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel3_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel4_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbValue_KeyPress()

  btnSave.Enabled = True

End

Public Sub btnCancel_Click()

  bAddDevice = False
  Me.Close

End

Public Sub cmbModule_Click()

  RefreshDeviceType()
  btnSave.Enabled = True
  LoadDeviceImage()

End

Private Sub LoadDeviceImage()

  Dim sImage, sImage2, sName, sName2 As String

  sName = LCase(Replace(cmbModule.Text, " ", "-"))
  sName = Replace(sName, "/", "-")

  sName2 = LCase(Replace(tbName.Text, " ", "-"))
  sName2 = Replace(sName2, "/", "-")

  sImage = Main.sBaseDir &/ "icons/devices" &/ sName & ".jpg"
  sImage2 = Main.sBaseDir &/ "icons/devices" &/ sName2 & ".jpg"
  txtDeviceImage.Hide
  Try pbDevice.Picture = Picture.Load(sImage2)
  If Error Then
    Try pbDevice.Picture = Picture.Load(sImage)
    If Error Then
      pbDevice.Hide
      txtDeviceImage.Text = IIf(sName2, sName2 & ".jpg\n", "") & IIf(sName, sName & ".jpg", "")
      txtDeviceImage.Show
    Else
      pbDevice.Show
    Endif
  Endif

End

Public Sub GetGroups() As String

  Dim iCount As Integer
  Dim sGroups As String = "|"

  lvGroupActive.MoveFirst

  For iCount = 1 To lvGroupActive.Count
    sGroups &= lvGroupActive.Item.Text & "|"
    lvGroupActive.MoveNext
  Next

  Return sGroups

End

Public Sub lvGroupAvail_Click()

  btnSave.Enabled = True
  lvGroupActive.Add(lvGroupAvail.Key, lvGroupAvail.Key)
  lvGroupAvail.Remove(lvGroupAvail.Key)

End

Public Sub lvGroupActive_Click()

  btnSave.Enabled = True
  lvGroupAvail.Add(lvGroupActive.Key, lvGroupActive.Key)
  lvGroupActive.Remove(lvGroupActive.Key)

End

Public Sub btnDeleteDevice_Click()

  Select Message.Question(("Are you sure that you want to delete this device?"), ("Yes"), ("No"))
    Case 1
      Devices.DeleteDevice(rResultDevice!device_id)
      Me.Close
      FDevices.GetDeviceList()
  End Select

End

Private Sub DeviceNameExist(sName As String, Optional iDeviceId As Integer) As Boolean

  Dim iId As Integer

  iId = Devices.FindIdForDevice(sName)
  If iId And If iId <> iDeviceId Then Return True

  Return False

End

Private Sub DeviceAddressExist(sAddress As String, iInterface As Integer, iInstance As Integer, Optional iDeviceId As Integer) As Boolean

  Dim rResult As Result

  If Len(sAddress) = 0 Then Return True

  rResult = Main.hDB.Exec("SELECT id, address FROM devices WHERE interface_id = &1 AND instance_id = &2", iInterface, iInstance)
  If rResult And If rResult.Available Then
    For Each rResult
      If iDeviceId Then
        If sAddress = rResult!address And If rResult!id <> iDeviceId Then Return True
      Else
        If sAddress = rResult!address Then Return True
      Endif
    Next
  Endif

  Return False

End

Public Sub btnNewDevice_Click()

  Dim rResultUpdate As Result
  Dim sSql, sAddress, sGroups As String
  Dim iLocation, iInterface, iDeviceType, iFloorplan As Integer

  If Not tbName.Text Then
    Balloon(("Please enter a name for this device!"), tbName)
    Return
  Endif
  If DeviceNameExist(tbName.Text) Then
    Balloon(("Please enter a unique name for this device!"), tbName)
    Return
  Endif
  If Len(cmbModule.Text) < 2 Then
    Balloon(("Please select a devicetype for this device!"), cmbModule)
    Return
  Endif
  If Len(cmbInterface.Text) < 2 Then
    Balloon(("Please select an interface for this device!"), cmbInterface)
    Return
  Endif
  If Not DoesInterfaceDoDeviceType() Then
    Balloon(("Selected interface does not support this protocol!"), cmbDeviceType)
    Return
  Endif
  If Len(cmbInstance.Text) < 2 Then
    Balloon(("Please select an instance for this device!"), cmbInstance)
    Return
  Endif
  If chkEnabled.Value = False And bAddDevice Then
    Select Message.Question(("You haven't enabled this device, shall I enabled it?"), ("Yes"), ("No"))
      Case 1
        chkEnabled.Value = True
      Case 0
        ' you want it
    End Select
  Endif
  If chkEnabled.Value Then
    If DeviceAddressExist(GetAddress(), GetInterface(), cmbInstance.Index) Then
      Balloon(("Please enter a unique address for this device!"), Frame2)
      Return
    Endif
  Endif

  iDeviceType = GetDeviceType()
  iInterface = GetInterface()
  sAddress = GetAddress()
  iLocation = GetLocation()
  sGroups = GetGroups()
  iFloorplan = GetFloorplan()

  ' Insert new devices in the device database
  sSql = "INSERT INTO devices SET name = &1, devicetype_id = &2, interface_id = &3, address = &4, location_id = &5,"
  sSql &= "officon = &{6}, onicon = &{7}, batterystatus = &{8}, comments = &{9}, enabled = &{10}, groups = &{11},"
  sSql &= "hide = &{12}, switchable = &{13}, dimable = &{14},"
  sSql &= "x = &{15}, y = &{16}, floorplan_id = &{17}, dimicon = &{18}, extcode = &{19},"
  sSql &= "repeatstate = &{20}, repeatperiod = &{21}, reset = &{22}, resetperiod = &{23}, resetvalue = &{24}, poll = &{25}, instance_id = &{26}"

  rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, rResultType!id, iInterface, sAddress, iLocation, tbOffIcon.Text, tbOnIcon.Text, tbBatt.Text, tbComments.Text, chkEnabled.Value, sGroups, chkHide.Value, chkSwitchable.Value, chkDimable.Value, tbX.Text, tbY.Text, iFloorplan, tbDimIcon.Text, chkExtended.Value, chkRepeat.Value, vbRepeatPeriod.Value, chkReset.Value, vbResetPeriod.Value, tbResetValue.Text, chkDisabledOpenZWavePoll.Value, cmbInstance.Index + 1)

  ' try to get id of created device and create empty value 1
  Try rResultDevice = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM devices")
  If Not Devices.CreateValue(rResultDevice!lastid, 1, "") Then
    Balloon("Couldn't autocreate device value1 !", btnSave)
  Endif
  FDevices.GetDeviceList()
  If FControl.Visible Then FControl.ReloadPage()
  bAddDevice = False

  Me.Close

End

Public Sub CreateDeviceValuesMenu()

  Dim mDelete As Menu

  mDeviceValues = New Menu(FDeviceEditor)
  mDelete = New Menu(mDeviceValues)
  mDelete.Text = "Delete"
  mDelete.Action = "delete"
  mDeviceValues.Hide

End

Public Sub tbvDeviceValues_Menu()

  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then mDeviceValues.Popup()

End

Public Sub Action_Activate(sKey As String) As Boolean

  Dim iValNum, iSelect, iRow As Integer
  Dim sValues As String

  If tbvDeviceValues.Row = -1 Then Return
  iRow = tbvDeviceValues.Row
  ' one row selected
  If tbvDeviceValues.Rows.Selection.Count = 1 Then
    iValNum = tbvDeviceValues[iRow, 1].Text
    If iValNum Then
      Select Case key
        Case "delete"
          Select Message.Question(("Are you sure that you want to delete 'Value" & tbvDeviceValues[iRow, 1].Text & "' from this device?"), ("Yes"), ("No"))
            Case "1"
              Devices.DeleteDeviceValue(rResultDevice!device_id, iValNum)
              GetValueList()
          End Select
      End Select
    Endif
  ' more than one row selected
  Else If tbvDeviceValues.Rows.Selection.Count > 1 Then
    Select Case sKey
      Case "delete"
        For Each iSelect In tbvDeviceValues.Rows.Selection
          sValues &= "'Value" & tbvDeviceValues[iSelect, 1].Text & "'\n"
        Next
        Select Message.Question(("Are you sure that you want to delete these values from this device?\n" & sValues), ("Yes"), ("No"))
          Case "1"
            For Each iSelect In tbvDeviceValues.Rows.Selection
              iValNum = tbvDeviceValues[iSelect, 1].Text
              Devices.DeleteDeviceValue(rResultDevice!device_id, iValNum)
            Next
            GetValueList()
        End Select
    End Select

  Endif

End

Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim sSql, sAddress, sGroups As String
  Dim iLocation, iInterface, iDeviceType, iFloorplan As Integer

  If bAddDevice Then
    btnNewDevice_Click()
    Return
  Endif
  If Not tbName.Text Then
    Balloon(("Please enter a name for this device!"), tbName)
    Return
  Endif
  If DeviceNameExist(tbName.Text, rResultDevice!device_id) Then
    Balloon(("Please enter a unique name for this device!"), tbName)
    Return
  Endif
  If Len(cmbModule.Text) < 2 Then
    Balloon(("Please select an device type for this device!"), cmbModule)
    Return
  Endif
  If Len(cmbInterface.Text) < 2 Then
    Balloon(("Please select an interface for this device!"), cmbInterface)
    Return
  Endif
  If Len(cmbInstance.Text) < 2 Then
    Balloon(("Please select an instance for this device!"), cmbInstance)
    Return
  Endif
  If Not DoesInterfaceDoDeviceType() Then
    Balloon(("Selected interface does not support this devicetype!"), cmbDeviceType)
    Return
  Endif

  If chkEnabled.Value = False And chkHide.Value = False And bAddDevice = True Then
    Select Message.Question(("You haven't enabled this device, shall I enabled it?"), ("Yes"), ("No"))
      Case 1
        chkEnabled.Value = True
      Case 0
        ' you want it
    End Select
  Endif
  If chkEnabled.Value = True Then
    If DeviceAddressExist(GetAddress(), GetInterface(), cmbInstance.Index + 1, rResultDevice!device_id) Then
      Balloon(("Please enter a unique address for this device!"), Frame2)
      Return
    Endif
  Endif

  iDeviceType = GetDeviceType()
  iInterface = GetInterface()
  sAddress = GetAddress()
  iLocation = GetLocation()
  sGroups = GetGroups()
  iFloorplan = GetFloorplan()

  ' save new device settings
  sSql = "UPDATE devices SET name = &1, devicetype_id = &2, interface_id = &3, address = &4, location_id = &5,"
  sSql &= "officon = &{6}, onicon = &{7}, batterystatus = &{8}, comments = &{9}, enabled = &{10}, groups = &{11},"
  sSql &= "hide = &{12}, switchable = &{13}, dimable = &{14},"
  sSql &= "x = &{15}, y = &{16}, floorplan_id = &{17}, dimicon = &{18}, extcode = &{19},"
  sSql &= "repeatstate = &{20}, repeatperiod = &{21}, reset = &{22}, resetperiod = &{23}, resetvalue = &{24}, poll = &{25}, instance_id = &{26} WHERE id = &{27}"

  rResultUpdate = Main.hDB.Exec(sSql, tbName.Text, rResultType!id, iInterface, sAddress, iLocation, tbOffIcon.Text, tbOnIcon.Text, tbBatt.Text, tbComments.Text, chkEnabled.Value, sGroups, chkHide.Value, chkSwitchable.Value, chkDimable.Value, tbX.Text, tbY.Text, iFloorplan, tbDimIcon.Text, chkExtended.Value, chkRepeat.Value, vbRepeatPeriod.Value, chkReset.Value, vbResetPeriod.Value, tbResetValue.Text, chkDisabledOpenZWavePoll.Value, cmbInstance.Index + 1, rResultDevice!device_id)

  FDevices.GetDeviceList()
  If FControl.Visible Then FControl.ReloadPage()
  bAddDevice = False
  Me.Close

End

Public Sub chkEnabled_Click()

  btnSave.Enabled = True

End

Public Sub chkHide_Click()

  btnSave.Enabled = True

End

Public Sub chkLog_Click()

  btnSave.Enabled = True

End

Public Sub tbComments_KeyPress()

  btnSave.Enabled = True

End

Public Sub spDeviceCode_Change()

  btnSave.Enabled = True

End

Public Sub chkGraph_Click()

  btnSave.Enabled = True

End

Public Sub chkLogDisplay_Click()

  btnSave.Enabled = True

End

Public Sub chkDimable_Click()

  chkSwitchable.Value = False
  btnSave.Enabled = True

End

Public Sub chkSwitchable_Click()

  chkDimable.Value = False
  btnSave.Enabled = True

End

Public Sub btnBattReplaced_Click()

  tbComments.Text &= ("Battery is replaced on ") & Format(Now(), "yyyy-mm-dd hh:nn:ss")
  tbBatt.Text = Null
  btnSave.Enabled = True

End

Public Sub btnIconOn_Click()

  Dim sIconName As String

  sIconName = FSelectFile.Run(Main.sBaseDir &/ "icons" &/ tbOnIcon.Text, ["*.png;*.jpg;*.jpeg;*.xpm;*.gif", "Picture files"], Main.sBaseDir &/ "icons", True, "Select an icon")
  If Len(sIconName) Then
    If CheckIfIcon(sIconName) Then
      tbOnIcon.Text = sIconName
    Else
      Message.Info("Image doesn't seem to be an icon, preferred size is 16x16 pixels.")
    Endif
  Endif
  btnSave.Enabled = True
  DisplayIcons()

End

Public Sub btnIconOff_Click()

  Dim sIconName As String

  sIconName = FSelectFile.Run(Main.sBaseDir &/ "icons" &/ tbOnIcon.Text, ["*.png;*.jpg;*.jpeg;*.xpm;*.gif", "Picture files"], Main.sBaseDir &/ "icons", True, "Select an icon")
  If Len(sIconName) Then
    If CheckIfIcon(sIconName) Then
      tbOffIcon.Text = sIconName
    Else
      Message.Info("Image doesn't seem to be an icon, preferred size is 16x16 pixels.")
    Endif
  Endif
  btnSave.Enabled = True
  DisplayIcons()

End

Public Sub btnIconDim_Click()

  Dim sIconName As String

  sIconName = FSelectFile.Run(Main.sBaseDir &/ "icons" &/ tbOnIcon.Text, ["*.png;*.jpg;*.jpeg;*.xpm;*.gif", "Picture files"], Main.sBaseDir &/ "icons", True, "Select an icon")
  If Len(sIconName) Then
    If CheckIfIcon(sIconName) Then
      tbDimIcon.Text = sIconName
    Else
      Message.Info("Image doesn't seem to be an icon, preferred size is 16x16 pixels.")
    Endif
  Endif
  btnSave.Enabled = True
  DisplayIcons()

End

Public Sub CheckIfIcon(sIconName As String) As Boolean

  With ImageStat(Main.sBaseDir &/ "icons" &/ sIconName)
    If .Width <= 16 And If .Height <= 16 Then Return True
  End With
  Return False

End

Public Sub btnEditFloorplan_Click()

  ' only start editor if location/floorplan is chosen
  If cmbFloorplan.Text And cmbFloorplan.Text <> " " Then
    FFloorplanEditor.iIdNotShow = $iDeviceId
    FFloorplanEditor.pbIcon.Picture = Picture[Main.sBaseDir &/ "icons" &/ tbOnIcon.Text]
    FFloorplanEditor.txtX.Text = tbX.Text
    FFloorplanEditor.txtY.Text = tbY.Text
    FFloorplanEditor.Show()
  Else
    Message(("Select a floorplan first!"))
  Endif

End

Public Sub GetFloorplan() As Integer

  rResultFloorplan = Main.hDB.Exec("SELECT floor FROM floors WHERE name = &1", cmbFloorplan.Text)
  Try Return rResultFloorplan!floor

End

Public Sub DisplayIcons()

  If Exist(Main.sBaseDir &/ "icons") Then
    If tbOnIcon.Text Then
      Try mbIconOn.Path = Main.sBaseDir &/ "icons" &/ tbOnIcon.Text
      If Not Error Then mbIconOn.Playing = True
    Else
      mbIconOn.Path = ""
      mbIconOn.Playing = False
      mbIconOn.Refresh
    Endif

    If tbDimIcon.Text Then
      Try mbIconDim.Path = Main.sBaseDir &/ "icons" &/ tbDimIcon.Text
      If Not Error Then mbIconDim.Playing = True
    Else
      mbIconDim.Path = ""
      mbIconDim.Playing = False
      mbIconDim.Refresh
    Endif

    If tbOffIcon.Text Then
      Try mbIconOff.Path = Main.sBaseDir &/ "icons" &/ tbOffIcon.Text
      If Not Error Then mbIconOff.Playing = True
    Else
      mbIconOff.Path = ""
      mbIconOff.Playing = False
      mbIconOff.Refresh
    Endif
  Else
    Main.WriteDebugLog(("ERROR: Cannot find " & Main.sBaseDir &/ "icons" & " directory!"))
  Endif

Catch ' some errors
  Main.WriteDebugLog("[DeviceEditor] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub cmbFloorplan_Click()

  btnSave.Enabled = True

End

Public Sub cmbLabel_Click()

  btnSave.Enabled = True

End

Public Sub cmbLabel2_Click()

  btnSave.Enabled = True

End

Public Sub cmbLabel3_Click()

  btnSave.Enabled = True

End

Public Sub chkExtended_Click()

  btnSave.Enabled = True

End

Public Sub cmbLabel4_Click()

  btnSave.Enabled = True

End


Public Sub RefreshModuleList()

  Dim rResult As Result
  Dim sPattern As String = cmbDeviceType.Text

  cmbModule.Clear()

  If (Len(cmbDeviceType.Text) < 2) Then sPattern = "%"
  ' fill devicetype combo with devicetypes of sType
  Try rResult = Main.hDB.Exec("SELECT name FROM devicetypes WHERE protocol LIKE &1 ORDER BY name", sPattern)
  If Not Error Then
    If rResult And If rResult.Available Then
      For Each rResult
        cmbModule.Add(rResult!name)
      Next
    Endif
  Else
    Message(("No devicetypes database table found!"))
  Endif

   cmbModule.Refresh()

  Try cmbModule.Text = rResultType!name
  LoadDeviceImage()
  If bAddDevice Then RefreshInterfaceList()
  RefreshDeviceType()
  RefreshInstancesList()

End

Public Sub RefreshInterfaceList()

  Dim sType As String = cmbDeviceType.Text
  Dim rResult As Result

  cmbInterface.Clear()

  ' If unknown, then show all interfaces
  If sType = "Unknown" Then sType = "%"

  ' fill interfaces combo with interfaces which support sType
  Try rResult = Main.hDB.Exec("SELECT interface FROM plugins WHERE protocols LIKE '" & sType & "' OR protocols LIKE '" & sType & " %' OR protocols LIKE '% " & sType & "' OR protocols LIKE '% " & sType & " %' ORDER BY interface")
  If Not Error Then
    If rResult And If rResult.Available Then
      For Each rResult
        cmbInterface.Add(rResult!interface)
      Next
    Endif
  Else
    Message(("No plugins database table found!"))
  Endif

  cmbInterface.Refresh()

End

Public Sub cmbDeviceType_Click()

  RefreshModuleList()
  btnSave.Enabled = True

End

Public Sub chkReset_Click()

  tbResetValue.Enabled = chkReset.Value
  vbResetPeriod.Enabled = chkReset.Value
  btnSave.Enabled = True

End

Public Sub chkRepeat_Click()

  vbRepeatPeriod.Enabled = chkRepeat.Value
  btnSave.Enabled = True

End

Public Sub btnDeviceValuesEditor_Click()

  FDeviceValues.Show

End

Public Sub GetValueList()

  Dim iCount As Integer
  Dim rResultValues As Result

  Application.Busy = True

  rResultValues = Devices.GetDevicesAndValues(["enabled": Not chkDisabled.Value, "hide": chkHidden.Value, "sortOrder": "valuenum", "device_id": rResultDevice!device_id])

  If Not rResultValues Then
    Message.Info(("Error: table 'device values' not found!"))
    Return
  Endif

  With tbvDeviceValues
    .Font.Size = "9"
    .Columns.Count = 7
    .Rows.Count = rResultValues.Count
    .Columns[0].Title = ("Id")
    .Columns[0].Width = 35
    .Columns[1].Title = ("Num")
    .Columns[1].Width = 35
    .Columns[2].Title = ("Value")
    .Columns[2].Width = 110
    .Columns[3].Title = ("Control")
    .Columns[3].Width = 50
    .Columns[4].Title = ("Feedback")
    .Columns[4].Width = 62
    .Columns[5].Title = ("Log")
    .Columns[5].Width = 35
    .Columns[6].Title = ("Last Seen")
  End With

  For iCount = 0 To rResultValues.Max
    tbvDeviceValues[iCount, 0].Text = rResultValues!device_value_id
    tbvDeviceValues[iCount, 1].Text = rResultValues!device_value_valuenum
    tbvDeviceValues[iCount, 2].Text = Devices.CorrectValue(rResultValues!device_value_value, rResultValues!device_value_correction, rResultValues!device_id) & IIf(rResultValues!device_value_units, " " & rResultValues!device_value_units, "")
    tbvDeviceValues[iCount, 3].Text = Main.DisplayBool(rResultValues!device_value_control)
    tbvDeviceValues[iCount, 4].Text = Main.DisplayBool(rResultValues!device_value_feedback)
    tbvDeviceValues[iCount, 5].Text = Main.DisplayBool(rResultValues!device_value_log)
    If rResultValues!device_value_lastseen Then
      tbvDeviceValues[iCount, 6].Text = Replace$(Str$(Format(rResultValues!device_value_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    Else
      tbvDeviceValues[iCount, 6].Text = ""
    Endif

    ' Expand column size
    If tbvDeviceValues.Font.TextWidth(tbvDeviceValues[iCount, 1].Text) > tbvDeviceValues.Columns[1].Width Then
      tbvDeviceValues.Columns[1].Width = tbvDeviceValues.Font.TextWidth(tbvDeviceValues[iCount, 1].Text)
    Endif

    rResultValues.MoveNext
  Next

Finally
  Application.Busy = False

End

Public Sub btnRefresh_Click()

  GetValueList()

End

Public Sub tbvDeviceValues_ColumnClick(Column As Integer)

  If iSortValuesColumn = Column Then
    bSortValuesColumn = Not bSortValuesColumn
  Else
    bSortValuesColumn = True
  Endif

  iSortValuesColumn = Column
  FMain.SortTableView(tbvDeviceValues, Column, bSortValuesColumn)

End

Public Sub tbvDeviceValues_DblClick()

  ' only continue if Row <> -1, which normally happens when DblClick on column and gambas3
  If tbvDeviceValues.Row = -1 Then Return

  ' open value editor window
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceValueEditor.Edit(rResultDevice!device_id, tbvDeviceValues[tbvDeviceValues.Row, 1].Text)
  Else
    Message(("Sorry, editing device values is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub chkHidden_Click()

  GetValueList()

End

Public Sub chkDisabled_Click()

  GetValueList()

End

Public Sub btnAddValue_Click()

  If Not rResultDevice Then
    Message(("First save the new device before adding values"))
    Return
  Endif

  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceValueEditor.Edit(rResultDevice!device_id, -1)
  Else
    Message(("Sorry, adding device values is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub btnDeleteValue_Click()

  Dim iCurRow As Integer = tbvDeviceValues.Row

  If iCurRow = -1 Then Return

  Select Message.Question(("Are you sure that you want to delete 'value") & tbvDeviceValues[iCurRow, 1].Text & ("' from this device?"), ("Yes"), ("No"))
    Case "1"
      Devices.DeleteDeviceValue(rResultDevice!device_id, tbvDeviceValues[iCurRow, 1].Text)
      GetValueList()
  End Select

End

Public Sub btnEditLocations_Click()

  Try FEditDeviceTypesGroups.TabPanelAll.Index = 3
  FEditDeviceTypesGroups.Show

End

Public Sub btnRefreshLocations_Click()

  RefreshLocationsList()

End

Public Sub btnRefreshFloorplans_Click()

  RefreshFloorplansList()

End

Public Sub btnEditFloorplans_Click()

  Try FEditDeviceTypesGroups.TabPanelAll.Index = 4
  FEditDeviceTypesGroups.Show

End
