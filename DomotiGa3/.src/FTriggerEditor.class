' Gambas class file

' Description:
' FTriggerEditor.class
' Support for creating and edit event triggers.

' Development Status:
' Just started, not working 100% yet.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bAddTrigger As Boolean
Public bTriggerEdit As Boolean
Private rResult As Result
Private rResultDevices As Result
Private sVarCompare As String
Private sDevCompare As String
Private iTriggerTab As Integer
Private cTriggerTypeNames As New Collection

Public Sub LoadTreeView()

  tvVariables.Clear
  LoadVariables("Variables")
  LoadDevices("Devices")

End

Public Sub LoadTriggers()

  Dim aTriggers As String[]
  Dim sTrigger As String

  aTriggers = Split(rResult!param1, "|")
  If aTriggers.Count Then
    For Each sTrigger In aTriggers
      Try lvTriggerList.Add(sTrigger, sTrigger)
    Next
  Endif

End

Public Sub lvTriggerList_DblClick()

  Try lvTriggerList.Remove(lvTriggerList.Item.Key)

End

Public Sub LoadVariables(sParent As String)

  Dim cGV As CGlobalVarEntry

  tvVariables.Add(Left(sParent, 3), sParent)
  For Each cGV In Main.GlobalVar
    LoadItem(Main.GlobalVar.Key, Main.GlobalVar.Key, Left(sParent, 3))
  Next

End

Public Sub LoadDevices(sParent As String)

  Dim iCount As Integer
  Dim rDevices As Result
  Dim sKey As String
  
  tvVariables.Add(Left(sParent, 3), sParent)

  rResult = Devices.GetDevicesAndValues(["sortOrder": "name"])
  
  If Not rResult Then
    LoadItem("ERROR", "Error: table 'devices' not found!", Left(sParent, 3))
    Return
  Endif

  For Each rResult
    sKey = Left(sParent, 3) & "_" & rResult!device_id
    If Not tvVariables.Exist(sKey) Then
      tvVariables.Add(sKey, rResult!device_name & " (" & rResult!device_id & ")",, Left(sParent, 3))
      LoadItem("LastChanged", "LastChanged", sKey)
      LoadItem("LastSeen", "LastSeen", sKey)
      LoadItem("BatteryStatus", "BatteryStatus", sKey)
    Endif
    LoadItem("Value" & rResult!device_value_valuenum, "Value" & rResult!device_value_valuenum, sKey)
  Next  

End

Public Sub LoadItem(sKey As String, sText As String, sParent As String)

  tvVariables.Add(sParent & "_" & sKey, sText,, sParent)

End

Public Sub tvVariables_DblClick()

  Dim sVal As String

  If tvVariables.Current.Children = 0 Then
    If Left(tvVariables.Current.Key, 3) = "Var" Then
      ' here a Variable is added to the formula
      sVal = tvVariables.Current.Key
    Else If Left(tvVariables.Current.Key, 3) = "Dev" Then
      ' here a Device value is added to the formula
      sVal = tvVariables.Current.Key
    Else
      sval = tvVariables.Current.Text
    Endif
    Try lvTriggerList.Add(sVal, sVal)
    'tvVariables.Remove(tvVariables.Current.Key)
  Endif

End

Public Sub btnApply_Click()

  Dim aCron As String
  aCron = "TimeCron(" & txtCronTabMulti.Text & ")"
  Try lvTriggerList.Add(aCron, aCron)

End


Public Sub lvTriggerList_Activate()

    Try lvTriggerList.Remove(lvTriggerList.Item.Key)

End

Public Sub Form_Open()

  Dim cGV As CGlobalVarEntry
  Dim iCount As Integer

  If bAddTrigger Then
    Me.Text = ("Create Trigger")
    btnDeleteTrigger.Visible = False
  Endif

  Me.Move(FMain.X + 50, FMain.Y + 70)

' Fill combo with all trigger types & and keep track of the order
  cTriggerTypeNames.Clear()
  For iCount = 1 To tabTriggerTypes.Count
    cmbTriggerTypes.Add(tabTriggerTypes[iCount - 1].Text)
    cTriggerTypeNames.Add(iCount, tabTriggerTypes[iCount - 1].Text)
  Next

  ' fill combo with available global vars
  cmbVariables.Add("")
  For Each cGV In Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  Next
  rbVarEqual_Click()
  ' fill combo with available devices
  cmbDevices.Add("")
  cmbDevicesLastseen.Add("")
  rResultDevices = Main.hDB.Exec("SELECT * FROM devices ORDER BY name")
  If rResultDevices Then
    If rResultDevices.Count Then
      For Each rResultDevices
        cmbDevices.Add(rResultDevices!name)
        cmbDevicesLastseen.Add(rResultDevices!name)
      Next
    Endif
  Else
    Message.Info(("Error: couldn't find trigger details!"))
    Return
  Endif

  LoadTreeView()

  If Not bAddTrigger Then
    ' fetch trigger details
    If bTriggerEdit Then
      Try rResult = Main.hDB.Exec("SELECT * FROM triggers WHERE id = &1", FEvents.txtCurEvent)
    Else
      Try rResult = Main.hDB.Exec("SELECT * FROM triggers WHERE id = &1", FEventEditor.iTrigger)
    Endif
    If Not rResult Then
      Message.Info(("Error: couldn't find trigger details!"))
      Return
    Endif
    If rResult.Count = 1 Then
      txtTriggerName.Text = rResult!name
      txtDescription.text = rResult!description
      iTriggerTab = rResult!type

      ' preload controls to values from database
      Select rResult!type
        Case 1 ' time now
          txtCronTab.Text = rResult!param1
        Case 2 ' variable
          cmbVariables.Text = rResult!param1
          SelectVarCompare(rResult!param2)
          txtVariable.Text = rResult!param3
          cmbVariables_Click()
        Case 3 ' device change
          Try cmbDevices.Text = Devices.FindNameForDevice(rResult!param1)
          Try cmbValue.Index = rResult!param2
          SelectDevCompare(rResult!param3)
          Try txtDevice.Text = rResult!param4
          cmbDevices_Click()
        Case 4 ' ir remote
          Try txtRemote.Text = rResult!param1
          Try txtButton.Text = rResult!param2
        Case 5 ' iviewer remote
          Try txtIViewerRemote.Text = rResult!param1
          Try txtIViewerJoin.Text = rResult!param2
          Try txtIViewerValue.Text = rResult!param3
        Case 6 ' temp multi trigger
          LoadTriggers()
        Case 7 ' manually
          ' Nothing to do
        Case 8 ' device lastseen
          Try cmbDevicesLastseen.Text = Devices.FindNameForDevice(rResult!param1)
          txtDeviceLastseen.Text = Devices.GetLastSeenForDevice(rResult!param1)
      End Select
      Try tabTriggerTypes.Index = rResult!type - 1
      tabTriggerTypes.SetFocus()
    Else
      bAddTrigger = True
    Endif
  Endif

 ' Hide all tabs
  For iCount = 1 To tabTriggerTypes.Count
    tabTriggerTypes[iCount - 1].Visible = False
  Next
  
  ' If the number is out-of-range, set it to default
  If iTriggerTab < 1 Or iTriggerTab > tabTriggerTypes.Count Then
    iTriggerTab = 1
  Endif
  ' Set current action type
  cmbTriggerTypes.Index = cTriggerTypeNames[tabTriggerTypes[iTriggerTab - 1].Text] - 1
  ' Make only 1 tab visible
  tabTriggerTypes[iTriggerTab - 1].Visible = True

End

Public Sub GetTriggers() As String

  Dim iCount As Integer
  Dim sTriggers As String = "|"

  lvTriggerList.MoveFirst

  For iCount = 1 To lvTriggerList.Count
    sTriggers &= lvTriggerList.Item.Text & "|"
    lvTriggerList.MoveNext
  Next

  Return sTriggers

End

Public Sub rbVarEqual_Click()

  sVarCompare = "="

End

Public Sub rbVarSmaller_Click()

  sVarCompare = "<"

End

Public Sub rbVarBigger_Click()

  sVarCompare = ">"

End

Public Sub rbVarUnEqual_Click()

  sVarCompare = "<>"

End

Public Sub rbVarMod_Click()

  sVarCompare = "MOD 0"

End

Private Sub EnableButtons()

  btnSave.Enabled = True
  btnDeleteTrigger.Enabled = True
  btnNewTrigger.Enabled = True

End

Public Sub txtTriggerName_Change()

  EnableButtons()

End

Public Sub txtTriggerDescription_Change()

  EnableButtons()

End

Public Sub tabTriggerTypes_Click()

  EnableButtons()

End

Public Sub spbHours_Change()

  EnableButtons()

End

Public Sub spbMinutes_Change()

  EnableButtons()

End

Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim iType As Integer
  Dim sSql, sParam1, sParam2, sParam3, sParam4, sParam5, sCron As String
  Dim aCron As String[]

  If Not txtTriggerName.Text Then
    Balloon(("Please enter a name for this trigger!"), txtTriggerName)
    Return
  Endif

  If Not bAddTrigger Then
    ' name has changed
    If rResult!name <> txtTriggerName.Text Then
      If TriggerNameExist(txtTriggerName.Text) Then
        Balloon(("Please enter a unique name for this trigger!"), txtTriggerName)
        Return
      Endif
    Endif
  Endif

  iType = cTriggerTypeNames[cmbTriggerTypes.Text]

  Select iType
    Case 1
      sCron = LTrim(txtCronTab.Text)
      sCron = RTrim(sCron)
      aCron = Split(sCron, " ")
      If aCron.Count <> 5 Then
        Balloon(("Please enter 5 fields!"), txtCronTab)
        Return
      Endif
      sParam1 = sCron
    Case 2
      If Not cmbVariables.Text Then
        Balloon(("Please select a variable!"), cmbVariables)
        Return
      Endif
      sParam1 = cmbVariables.Text
      sParam2 = sVarCompare
      If Not txtVariable.Text Then
        Balloon(("Please enter a value to check!"), txtVariable)
        Return
      Endif
      sParam3 = txtVariable.Text
    Case 3
      If Not cmbDevices.Text Then
        Balloon(("Please select a device!"), cmbDevices)
        Return
      Endif
      sParam1 = Devices.FindIdForDevice(cmbDevices.Text)
      If Not cmbValue.Text Then
        Balloon(("Please select the field to check!"), cmbValue)
        Return
      Endif
      If Not txtDevice.Text Then
        Balloon(("Please enter a value to check!"), txtDevice)
        Return
      Endif
      sParam2 = cmbValue.Index
      sParam3 = sDevCompare
      sParam4 = txtDevice.Text
    Case 4
      If Not txtRemote.Text Then
        Balloon(("Please enter a remote name!"), txtRemote)
        Return
      Endif
      If Not txtButton.Text Then
        Balloon(("Please enter a button value!"), txtButton)
        Return
      Endif
      sParam1 = txtRemote.Text
      sParam2 = txtButton.Text
      sParam3 = spRepeat.Value
    Case 5
      If Not txtIViewerJoin.Text Then
        Balloon(("Please enter a join name!"), txtIViewerJoin)
        Return
      Endif
      If Not txtIViewerValue.Text Then
        Balloon(("Please enter a value!"), txtIViewerValue)
        Return
      Endif
      sParam1 = txtIViewerRemote.Text
      sParam2 = txtIViewerJoin.Text
      sParam3 = txtIViewerValue.Text
    Case 6
      sParam1 = GetTriggers()
    Case 7 ' manually
      ' nothing to do
    Case 8 ' device lastseen
      If Not cmbDevicesLastseen.Text Then
        Balloon(("Please select a device!"), cmbDevicesLastseen)
        Return
      Endif
      sParam1 = Devices.FindIdForDevice(cmbDevicesLastseen.Text)
      If Not txtDeviceLastseen.Text Then
        Balloon(("Please enter a value to check!"), txtDeviceLastseen)
        Return
      Endif
  End Select

  If bAddTrigger Then
    If TriggerNameExist(txtTriggerName.Text) Then
      Balloon(("Please enter a unique name for this trigger!"), txtTriggerName)
      Return
    Endif
    Main.hDB.Begin()
    rResult = Main.hDB.Create("triggers")
    rResult!name = txtTriggerName.Text
    rResult!type = iType
    rResult!description = txtDescription.Text
    rResult!param1 = sParam1
    rResult!param2 = sParam2
    rResult!param3 = sParam3
    rResult!param4 = sParam4
    rResult!param5 = sParam5
    rResult.Update()
    Main.hDB.Commit()
  Else
    ' save new trigger settings
    sSql = "UPDATE triggers SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7, description = &8 WHERE id = &9"
    Try rResultUpdate = Main.hDB.Exec(sSql, txtTriggerName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, txtDescription.Text, rResult!id)
  Endif

  If FEventEditor.Id Then
    FEventEditor.GetTriggers()
    FEventEditor.cmbTrigger.Text = txtTriggerName.Text
  Endif

  bAddTrigger = False
  Me.Close
  FEvents.GetEventList()

End

Public Sub btnNewTrigger_Click()

  bAddTrigger = True
  btnSave_Click()

End

Public Sub btnCancel_Click()

  Me.Close

End

Private Sub TriggerNameExist(sName As String) As Boolean

  Dim rResultTrig As Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  If rResultTrig Then
    If rResultTrig.Count Then
      Return True
    Endif
  Endif
  Return False

End

Private Sub SelectVarCompare(sValue As String)

  Select sValue
    Case "="
      rbVarEqual.Value = True
    Case "<"
      rbVarSmaller.Value = True
    Case ">"
      rbVarBigger.Value = True
    Case "<>"
      rbVarUnEqual.Value = True
    Case "MOD 0"
      rbVarMod.Value = True
  End Select

End

Public Sub cmbVariables_Click()

  If cmbVariables.Text Then
    If TypeOf(Main.GetGlobalVar(cmbVariables.Text)) = gb.Boolean Then
      txtVariableValue.Text = Main.DisplayBool(Main.GetGlobalVar(cmbVariables.Text))
      rbVarSmaller.Enabled = False
      rbVarBigger.Enabled = False
      rbVarMod.Enabled = False
    Else If Not TypeOf(Main.GetGlobalVar(cmbVariables.Text)) <= gb.Float Then
      rbVarSmaller.Enabled = False
      rbVarBigger.Enabled = False
      rbVarMod.Enabled = False
      txtVariableValue.Text = Main.GetGlobalVar(cmbVariables.Text)
    Else If Not Main.IsTime(Main.GetGlobalVar(cmbVariables.Text)) Then
      rbVarMod.Enabled = False
      txtVariableValue.Text = Main.GetGlobalVar(cmbVariables.Text)
    Else
      txtVariableValue.Text = Main.GetGlobalVar(cmbVariables.Text)
    Endif
  Endif

End

Private Sub SelectDevCompare(sValue As String)

  Select sValue
    Case "="
      rbDevEqual.Value = True
    Case "<"
      rbDevSmaller.Value = True
    Case ">"
      rbDevBigger.Value = True
    Case "<>"
      rbDevUnEqual.Value = True
  End Select

End

Public Sub rbDevEqual_Click()

  sDevCompare = "="

End

Public Sub rbDevSmaller_Click()

  sDevCompare = "<"

End

Public Sub rbDevBigger_Click()

  sDevCompare = ">"

End

Public Sub rbDevUnEqual_Click()

  sDevCompare = "<>"

End

Public Sub cmbDevices_Click()

  Dim iId As Integer

  If cmbValue.Text And cmbDevices.Text Then
    iId = Devices.FindIdForDevice(cmbDevices.Text)
    If iId Then txtDeviceValue.Text = Devices.GetCurrentValueForDevice(iId, cmbValue.Index)
    If TypeOf(Val(txtDeviceValue.Text)) <= gb.Float Then
      rbDevBigger.Enabled = True
      rbDevSmaller.Enabled = True
    Else
      rbDevEqual.Enabled = True
      rbDevBigger.Enabled = False
      rbDevSmaller.Enabled = False
    Endif
  Endif

End

Public Sub cmbDevicesLastseen_Click()

  Dim iId As Integer

  If cmbDevicesLastseen.Text Then
    iId = Devices.FindIdForDevice(cmbDevicesLastseen.Text)
    If iId Then txtDeviceLastseen.Text = Devices.GetLastSeenForDevice(iId)
  Endif

End

Public Sub cmbValue_Click()

  cmbDevices_Click()

End

Public Sub btnDeleteTrigger_Click()

  Dim iId As Integer

  Select Message.Question(("Are you sure that you want to delete this trigger?"), ("Yes"), ("No"))
    Case 1
      iId = GetTriggerId(txtTriggerName.Text)
      If iId Then
        Main.hDB.Exec("DELETE FROM triggers WHERE id = &1", iId)
      Endif
      If FEventEditor.Id Then FEventEditor.GetTriggers()
      Me.Close
      FEvents.GetEventList()
  End Select

End

Private Sub GetTriggerId(sName As String) As Integer

  Dim rResultTrig As Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  Try Return rResultTrig!id

End

Public Sub txtDescription_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbTriggerTypes_Click()

  Dim iCount As Integer
  ' Find the right tab, if our List is sorted
  iTriggerTab = cTriggerTypeNames[cmbTriggerTypes.Text]
  ' Hide all tabs
  For iCount = 1 To tabTriggerTypes.Count
    tabTriggerTypes[iCount - 1].Visible = False
  Next
  
  ' If the number is out-of-range, set it to default
  If iTriggerTab < 1 Or iTriggerTab > tabTriggerTypes.Count Then
    iTriggerTab = 1
  Endif
  tabTriggerTypes[iTriggerTab - 1].Visible = True

End


Public Sub txtCronTab_KeyPress()

  

End
