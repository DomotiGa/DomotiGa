' Gambas class file

' Description:
' FTriggerEditor.class
' Support for creating and edit event triggers.

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bAddTrigger As Boolean
Public bTriggerEdit As Boolean
Private rResult As Result
Private sVarCompare As String
Private sDevCompare As String
Private $iTriggerTab As Integer
Private $cTriggerTypeNames As New Collection
Private $cDevices As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Code which will be executed when the form opens
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  Dim rResultDevices As Result
  Dim cGV As CGlobalVarEntry
  Dim iCount As Integer
  Dim cCol As Collection
  Dim cValue As Integer[]
  Dim iValueNum As Integer

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' Retrieve all devices and their values. If a device doesn't have a value, it will NOT be in the list
  rResultDevices = Devices.GetDevicesAndValues(["sortOrder": "name", "inc_device_values": True])

  If rResultDevices Then
    If rResultDevices.Count Then
      For Each rResultDevices
        If rResultDevices!device_name Then
          If $cDevices.Exist(rResultDevices!device_name) Then
            cCol = $cDevices[rResultDevices!device_name]
          Else
            ' Store a new device and its id
            cCol = New Collection
            cValue = New Integer[]
            cCol["device_id"] = rResultDevices!device_id
            cCol["valuenum"] = cValue
            $cDevices[rResultDevices!device_name] = cCol
          Endif

          ' Store all valuenum of this device. We only show used valenum (dynamic)
          If Not cCol["valuenum"].Exist(rResultDevices!device_value_valuenum) Then
            cCol["valuenum"].Add(rResultDevices!device_value_valuenum)
            cCol["valuenum"].Sort()
          Endif
        Endif
      Next
    Endif
  Else
    Message.Info(("ERROR: table 'devices' not found!"))
    Return
  Endif

  ' Check if we got at least once the GlobalVar values
  If Main.GetGlobalVar("Year") = 0 Then
    If Not Main.bServer Then
      If Not Client.GetGlobalVars() Then
        Message.Error(("Received an empty or invalid response from the JSON-RPC server. Check if the server is running."))
        Me.Close
        Return
      Endif
    Endif
  Endif

  ' Change the window name when it's a new trigger
  If bAddTrigger Then
    Me.Text = ("Create Trigger")
    btnDeleteTrigger.Visible = False
    btnNewTrigger.Visible = False
  Endif

  ' Fill combo with all trigger types & and keep track of the order
  $cTriggerTypeNames.Clear()
  For iCount = 1 To tabPanelTriggerTypes.Count
    cmbTriggerTypes.Add(tabPanelTriggerTypes[iCount - 1].Text)
    $cTriggerTypeNames.Add(iCount, tabPanelTriggerTypes[iCount - 1].Text)
  Next

  ' fill combo with available global vars
  cmbVariables.Add("")
  For Each cGV In Main.GlobalVar
    cmbVariables.Add(Main.GlobalVar.Key)
  Next
  rbVarEqual_Click()

  ' fill combo with available devices
  cmbDevices.Add("")
  cmbDevicesLastseen.Add("")

  For Each $cDevices
    cmbDevices.Add($cDevices.Key)
    cmbDevicesLastseen.Add($cDevices.Key)
  Next

  LoadTreeView()

  ' Load an existing trigger
  If Not bAddTrigger Then
    ' fetch trigger details
    If bTriggerEdit Then
      Try rResult = Main.hDB.Exec("SELECT * FROM triggers WHERE id = &1", FEvents.txtCurEvent)
    Else
      Try rResult = Main.hDB.Exec("SELECT * FROM triggers WHERE id = &1", FEventEditor.iTrigger)
    Endif
    If Not rResult Then
      Message.Info(("ERROR: couldn't find trigger details!"))
      Return
    Endif
    If rResult.Count = 1 Then
      txtTriggerName.Text = rResult!name
      txtTriggerId.Text = rResult!id
      txtDescription.text = rResult!description
      $iTriggerTab = rResult!type

      ' preload controls to values from database
      Select rResult!type
        Case 1 ' time now
          txtCronTab.Text = rResult!param1
        Case 2 ' globalvar change
          cmbVariables.Text = rResult!param1
          SelectVarCompare(rResult!param2)
          txtVariable.Text = rResult!param3
          cmbVariables_Click()
        Case 3 ' device change
          cmbDevices.Text = ""

          ' Find the device name, based on the id. If it doesn't exist anymore, 
          ' e.g. if the device is deleted, then the value stays blank
          For Each $cDevices
            If $cDevices[$cDevices.Key]["device_id"] = rResult!param1 Then
              cmbDevices.Text = $cDevices.Key
              Break
            Endif
          Next

          ' Fill the table with available valuenum for this device
          cmbValue.Clear()
          If cmbDevices.Text Then
            For Each iValueNum In $cDevices[cmbDevices.Text]["valuenum"]
              cmbValue.Add("value" & iValueNum)
            Next
          Endif
          Try cmbValue.Text = "value" & rResult!param2
          SelectDevCompare(rResult!param3)
          Try txtDevice.Text = rResult!param4
          ChangeDevice()
        Case 4 ' ir remote
          Try txtRemote.Text = rResult!param1
          Try txtButton.Text = rResult!param2
        Case 5 ' iviewer remote
          Try txtIViewerRemote.Text = rResult!param1
          Try txtIViewerJoin.Text = rResult!param2
          Try txtIViewerValue.Text = rResult!param3
        Case 6 ' multi-trigger
          LoadTriggers()
        Case 7 ' scene, manual trigger
          ' Nothing to do
        Case 8 ' device lastseen
          cmbDevicesLastseen.Text = ""

          ' Find the device name, based on the id. If it doesn't exist anymore, 
          ' e.g. if the device is deleted, then the value stays blank
          For Each $cDevices
            If $cDevices[$cDevices.Key]["device_id"] = rResult!param1 Then
              cmbDevicesLastseen.Text = $cDevices.Key
              Break
            Endif
          Next

          If cmbDevicesLastSeen.Text Then
            txtDeviceLastseen.Text = Devices.GetLastSeenForDevice(rResult!param1)
          Else
            txtDeviceLastseen.Text = ""
          Endif
      End Select

      Try tabPanelTriggerTypes.Index = rResult!type - 1
      tabPanelTriggerTypes.SetFocus()
    Else
      bAddTrigger = True
    Endif
  Endif

  ' If the number is out-of-range, set it to default
  If $iTriggerTab < 1 Or $iTriggerTab > tabPanelTriggerTypes.Count Then
    $iTriggerTab = 1
  Endif

  ' Set current action type
  cmbTriggerTypes.Index = $cTriggerTypeNames[tabPanelTriggerTypes[$iTriggerTab - 1].Text] - 1

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Kick of loading the var and dev into the treeview
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LoadTreeView()

  tvVariables.Clear
  LoadVariables("Variables")
  LoadDevices("Devices")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Load the triggers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LoadTriggers()

  Dim aTriggers As String[]
  Dim sTrigger As String

  aTriggers = Split(rResult!param1, "|")
  If aTriggers.Count Then
    For Each sTrigger In aTriggers
      Try lvTriggerList.Add(sTrigger, sTrigger)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Load the available GlobalVar names into the Variable tableview
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LoadVariables(sParent As String)

  Dim cGV As CGlobalVarEntry

  tvVariables.Add(Left(sParent, 3), sParent)
  For Each cGV In Main.GlobalVar
    LoadItem(Main.GlobalVar.Key, Main.GlobalVar.Key, Left(sParent, 3))
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Load the available device id into the Variable tableview
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LoadDevices(sParent As String)

  Dim sKey As String
  Dim iValueNum As Integer

  tvVariables.Add(Left(sParent, 3), sParent)

  For Each $cDevices
    sKey = Left(sParent, 3) & "_" & $cDevices[$cDevices.Key]["device_id"]
    If Not tvVariables.Exist(sKey) Then
      tvVariables.Add(sKey, $cDevices.Key & " (" & $cDevices[$cDevices.Key]["device_id"] & ")",, Left(sParent, 3))
      LoadItem("LastChanged", "LastChanged", sKey)
      LoadItem("LastSeen", "LastSeen", sKey)
      LoadItem("BatteryStatus", "BatteryStatus", sKey)
    Endif

    For Each iValueNum In $cDevices[$cDevices.Key]["valuenum"]
      LoadItem("Value" & iValueNum, "Value" & iValueNum, sKey)
    Next
  Next

End

Public Sub LoadItem(sKey As String, sText As String, sParent As String)

  tvVariables.Add(sParent & "_" & sKey, sText,, sParent)

End

Public Sub GetTriggers() As String

  Dim iCount As Integer
  Dim sTriggers As String = "|"

  lvTriggerList.MoveFirst

  For iCount = 1 To lvTriggerList.Count
    sTriggers &= lvTriggerList.Item.Text & "|"
    lvTriggerList.MoveNext
  Next

  Return sTriggers

End

Public Sub lvTriggerList_DblClick()

  Try lvTriggerList.Remove(lvTriggerList.Item.Key)

End

Public Sub tvVariables_DblClick()

  Dim sVal As String

  If tvVariables.Current.Children = 0 Then
    If Left(tvVariables.Current.Key, 3) = "Var" Then
      ' here a Variable is added to the formula
      sVal = tvVariables.Current.Key
    Else If Left(tvVariables.Current.Key, 3) = "Dev" Then
      ' here a Device value is added to the formula
      sVal = tvVariables.Current.Key
    Else
      sval = tvVariables.Current.Text
    Endif
    Try lvTriggerList.Add(sVal, sVal)
    'tvVariables.Remove(tvVariables.Current.Key)
  Endif

End

Public Sub btnApply_Click()

  Dim aCron As String

  aCron = "TimeCron(" & txtCronTabMulti.Text & ")"
  Try lvTriggerList.Add(aCron, aCron)

End


Public Sub lvTriggerList_Activate()

  Try lvTriggerList.Remove(lvTriggerList.Item.Key)

End

Public Sub rbVarEqual_Click()

  sVarCompare = "="

End

Public Sub rbVarSmaller_Click()

  sVarCompare = "<"

End

Public Sub rbVarBigger_Click()

  sVarCompare = ">"

End

Public Sub rbVarUnEqual_Click()

  sVarCompare = "<>"

End

Public Sub rbVarMod_Click()

  sVarCompare = "MOD 0"

End

Private Sub EnableButtons()

  btnSave.Enabled = True
  btnDeleteTrigger.Enabled = True
  btnNewTrigger.Enabled = True

End

Public Sub txtTriggerName_Change()

  EnableButtons()

End

Public Sub txtTriggerDescription_Change()

  EnableButtons()

End

Public Sub tabPanelTriggerTypes_Click()

  cmbTriggerTypes.Index = tabPanelTriggerTypes.Index
  EnableButtons()

End

Public Sub spbHours_Change()

  EnableButtons()

End

Public Sub spbMinutes_Change()

  EnableButtons()

End

Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim iType As Integer
  Dim sSql, sParam1, sParam2, sParam3, sParam4, sParam5, sCron As String
  Dim aCron As String[]

  If Not txtTriggerName.Text Then
    Balloon(("Please enter a name for this trigger!"), txtTriggerName)
    Return
  Endif

  If bAddTrigger Then
    If TriggerNameExist(txtTriggerName.Text) Then
      Balloon(("Please enter a unique name for this trigger!"), txtTriggerName)
      Return
    Endif
  Else
    ' name has changed
    If rResult!name <> txtTriggerName.Text Then
      If TriggerNameExist(txtTriggerName.Text) Then
        Balloon(("Please enter a unique name for this trigger!"), txtTriggerName)
        Return
      Endif
    Endif
  Endif

  iType = tabPanelTriggerTypes.Index + 1
  Select iType
    Case 1 ' time now
      sCron = LTrim(txtCronTab.Text)
      sCron = RTrim(sCron)
      aCron = Split(sCron, " ")
      If aCron.Count <> 5 Then
        Balloon(("Please enter 5 fields!"), txtCronTab)
        Return
      Endif
      sParam1 = sCron
    Case 2 ' globalvar change
      If Not cmbVariables.Text Then
        Balloon(("Please select a variable!"), cmbVariables)
        Return
      Endif
      If Not sVarCompare Then
        Balloon(("Please enter a compare choice!"), rbVarEqual)
        Return
      Endif
      sParam1 = cmbVariables.Text
      sParam2 = sVarCompare
      If Not txtVariable.Text Then
        Balloon(("Please enter a value to check!"), txtVariable)
        Return
      Endif
      sParam3 = txtVariable.Text
    Case 3 ' device change
      If Not cmbDevices.Text Then
        Balloon(("Please select a device!"), cmbDevices)
        Return
      Endif
      If Not cmbValue.Text Then
        Balloon(("Please select the field to check!"), cmbValue)
        Return
      Endif
      If Not sDevCompare Then
        Balloon(("Please enter a compare choice!"), rbDevEqual)
        Return
      Endif
      If Not txtDevice.Text Then
        Balloon(("Please enter a value to check!"), txtDevice)
        Return
      Endif
      sParam1 = $cDevices[cmbDevices.Text]["device_id"]
      sParam2 = Replace$(cmbValue.Text, "value", "")
      sParam3 = sDevCompare
      sParam4 = txtDevice.Text
    Case 4 ' ir remote
      If Not txtRemote.Text Then
        Balloon(("Please enter a remote name!"), txtRemote)
        Return
      Endif
      If Not txtButton.Text Then
        Balloon(("Please enter a button value!"), txtButton)
        Return
      Endif
      sParam1 = txtRemote.Text
      sParam2 = txtButton.Text
      sParam3 = spRepeat.Value
    Case 5 ' iviewer remote
      If Not txtIViewerJoin.Text Then
        Balloon(("Please enter a join name!"), txtIViewerJoin)
        Return
      Endif
      If Not txtIViewerValue.Text Then
        Balloon(("Please enter a value!"), txtIViewerValue)
        Return
      Endif
      sParam1 = txtIViewerRemote.Text
      sParam2 = txtIViewerJoin.Text
      sParam3 = txtIViewerValue.Text
    Case 6 ' multi-trigger
      If lvTriggerList.Count = 0 Then
        Balloon(("Please insert at least one trigger!"), lvTriggerList)
        Return
      Endif
      sParam1 = GetTriggers()
    Case 7 ' scene, manual trigger
      ' nothing to do
    Case 8 ' device lastseen
      If Not cmbDevicesLastseen.Text Then
        Balloon(("Please select a device!"), cmbDevicesLastseen)
        Return
      Endif
      sParam1 = $cDevices[cmbDevicesLastseen.Text]["device_id"]
      If Not txtDeviceLastseen.Text Then
        Balloon(("Please enter a value to check!"), txtDeviceLastseen)
        Return
      Endif
    Case Else
      Balloon(("Error, cannot determine selected trigger type!"), tabPanelTriggerTypes)
      Return
  End Select

  If bAddTrigger Then
    Main.hDB.Begin()
    rResult = Main.hDB.Create("triggers")
    rResult!name = txtTriggerName.Text
    rResult!type = iType
    rResult!description = txtDescription.Text
    rResult!param1 = sParam1
    rResult!param2 = sParam2
    rResult!param3 = sParam3
    rResult!param4 = sParam4
    rResult!param5 = sParam5
    rResult.Update()
    Main.hDB.Commit()
  Else
    ' save new trigger settings
    sSql = "UPDATE triggers SET name = &1, type = &2, param1 = &3, param2 = &4, param3 = &5, param4 = &6, param5 = &7, description = &8 WHERE id = &9"
    Try rResultUpdate = Main.hDB.Exec(sSql, txtTriggerName.Text, iType, sParam1, sParam2, sParam3, sParam4, sParam5, txtDescription.Text, rResult!id)
  Endif

  If FEventEditor.Id Then
    FEventEditor.GetTriggers()
    FEventEditor.cmbTrigger.Text = txtTriggerName.Text
  Endif

  bAddTrigger = False
  Me.Close
  FEvents.GetEventList()

End

Private Sub TriggerNameExist(sName As String) As Boolean

  Dim rResultTrig As Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  If rResultTrig Then
    If rResultTrig.Count Then
      Return True
    Endif
  Endif
  Return False

End

Private Sub SelectVarCompare(sValue As String)

  Select sValue
    Case "="
      rbVarEqual.Value = True
    Case "<"
      rbVarSmaller.Value = True
    Case ">"
      rbVarBigger.Value = True
    Case "<>"
      rbVarUnEqual.Value = True
    Case "MOD 0"
      rbVarMod.Value = True
  End Select

End

Private Sub SelectDevCompare(sValue As String)

  Select sValue
    Case "="
      rbDevEqual.Value = True
    Case "<"
      rbDevSmaller.Value = True
    Case ">"
      rbDevBigger.Value = True
    Case "<>"
      rbDevUnEqual.Value = True
  End Select

End

Public Sub cmbVariables_Click()

  If cmbVariables.Text Then
    If TypeOf(Main.GetGlobalVar(cmbVariables.Text)) = gb.Boolean Then
      txtVariableValue.Text = Main.DisplayBool(Main.GetGlobalVar(cmbVariables.Text))
      rbVarSmaller.Enabled = False
      rbVarBigger.Enabled = False
      rbVarMod.Enabled = False
    Else If TypeOf(Main.GetGlobalVar(cmbVariables.Text)) <= gb.Float Then
      rbVarSmaller.Enabled = True
      rbVarBigger.Enabled = True
      rbVarMod.Enabled = True
      txtVariableValue.Text = Main.GetGlobalVar(cmbVariables.Text)
    Else If Main.IsTime(Main.GetGlobalVar(cmbVariables.Text)) Then
      rbVarSmaller.Enabled = True
      rbVarBigger.Enabled = True
      rbVarMod.Enabled = False
      txtVariableValue.Text = Main.GetGlobalVar(cmbVariables.Text)
    Else
      rbVarSmaller.Enabled = False
      rbVarBigger.Enabled = False
      rbVarMod.Enabled = False
      txtVariableValue.Text = Main.GetGlobalVar(cmbVariables.Text)
    Endif
  Endif

End

Public Sub btnNewTrigger_Click()

  bAddTrigger = True
  btnSave_Click()

End

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub rbDevEqual_Click()

  sDevCompare = "="

End

Public Sub rbDevSmaller_Click()

  sDevCompare = "<"

End

Public Sub rbDevBigger_Click()

  sDevCompare = ">"

End

Public Sub rbDevUnEqual_Click()

  sDevCompare = "<>"

End

Public Sub cmbDevices_Click()

  Dim iValueNum As Integer

  ' The valuenum is a dynamic list
  cmbValue.Clear()
  If cmbDevices.Text Then

    For Each iValueNum In $cDevices[cmbDevices.Text]["valuenum"]
      cmbValue.Add("value" & iValueNum)
    Next
  Endif

  ChangeDevice()

End

Private Sub ChangeDevice()

  Dim iId As Integer

  If cmbValue.Text And cmbDevices.Text Then
    Try iId = $cDevices[cmbDevices.Text]["device_id"]

    If iId Then txtDeviceValue.Text = Devices.GetCurrentUnCorrectedValueForDevice(iId, Replace$(cmbValue.Text, "value", ""))
    If TypeOf(Val(txtDeviceValue.Text)) <= gb.Float Then
      rbDevBigger.Enabled = True
      rbDevSmaller.Enabled = True
    Else
      rbDevEqual.Enabled = True
      rbDevBigger.Enabled = False
      rbDevSmaller.Enabled = False
    Endif
  Else
    txtDeviceValue.Text = ""
  Endif

End

Public Sub cmbDevicesLastseen_Click()

  Dim iId As Integer

  If cmbDevicesLastseen.Text Then
    Try iId = $cDevices[cmbDevicesLastseen.Text]["device_id"]
    If iId Then txtDeviceLastseen.Text = Devices.GetLastSeenForDevice(iId)
  Else
    txtDeviceLastseen.Text = ""
  Endif

End

Public Sub cmbValue_Click()

  ChangeDevice()

End

Public Sub btnDeleteTrigger_Click()

  Dim iTriggerId As Integer
  Dim rEvents As Result
  Dim sEventList As String

  ' check if trigger is used in events
  iTriggerId = GetTriggerId(txtTriggerName.Text)
  If iTriggerId Then
    rEvents = Main.hDB.Exec("SELECT name FROM events WHERE trigger_id = &1 ", iTriggerId)
    If rEvents
      If rEvents.Available
        sEventList = "This trigger is in use by " & IIf(rEvents.Count > 1, "these events", "this event") & ":\n"
        For Each rEvents
          sEventList &= "'" & rEvents!name & "'\n"
        Next
      Else
        sEventList = ("This trigger is not used in any event.") & "\n"
      Endif
    Endif
  Endif

  Select Message.Question(sEventList & "\n" & ("Are you sure that you want to delete this trigger?"), ("Yes"), ("No"))
    Case 1
      If iTriggerId Then
        Main.hDB.Exec("DELETE FROM triggers WHERE id = &1", iTriggerId)
      Endif
      If FEventEditor.Id Then FEventEditor.GetTriggers()
      Me.Close
      FEvents.GetEventList()
  End Select

End

Private Sub GetTriggerId(sName As String) As Integer

  Dim rResultTrig As Result

  rResultTrig = Main.hDB.Exec("SELECT id FROM triggers WHERE name = &1", sName)
  Try Return rResultTrig!id

End

Public Sub txtDescription_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbTriggerTypes_Click()

  ' Find the right tab, if our List is sorted
  $iTriggerTab = $cTriggerTypeNames[cmbTriggerTypes.Text]

  ' If the number is out-of-range, select first one
  If $iTriggerTab < 1 Or $iTriggerTab > tabPanelTriggerTypes.Count Then
    $iTriggerTab = 1
  Endif

  Try tabPanelTriggerTypes.Index = $iTriggerTab - 1
  tabPanelTriggerTypes.SetFocus()

End
