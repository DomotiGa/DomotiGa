' Gambas class file

' Description:
' FritzBox.class
' Provide support for Fritz!Box phonecall monitoring. (via call log port)

' Development Status:
' Just started to build this one.
' Incoming/outgoing call logging implemented.
' Tested with a Fritz!Box 7170 Annex A running Firmware upto 58.04.76

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "FritzBox"
Public PluginFriendlyName As String = "Fritz!Box API"
Public PluginVersion As String = "2.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[FritzBox] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $bDebug As Boolean

' Interface objects
Public hMySocket As CSocket
Private $sMsgData As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $bDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = gb.String
  hMySocket.Connect($sTCPHost, 1012)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":1012")

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":1012")
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hMySocket.Close

  ' try stop running timers
  StopTimers()

  WriteLog(PluginFriendlyName & " TCP connection closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run after succesfull connect
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port. vVar is gb.String
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  $sMsgData &= vVar

  ' Check for linefeed and process data
  While InStr($sMsgData, gb.Lf)
    ProcessReceivedPacket(Mid($sMsgData, 1, InStr($sMsgData, gb.Lf) - 1))
    $sMsgData = Mid($sMsgData, InStr($sMsgData, gb.Lf) + 1)
  Wend

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sStr As String)

  Dim aScan As String[]
  Dim rResult As Result
  Dim iId As Integer
  Dim sName As String

  ' Don't continue if the string/packet is empty
  If Not sStr Then Return

  If $bDebug Then WriteDebugLog("< " & sStr)
  ' 20.01.09 20:29:10;RING;0;0XXXXXXXXX;0XXXXXXXXX;POTS;
  If InStr(sStr, ";RING;") Then
    aScan = Scan(sStr, "*;RING;*;*;*;*;")
    If aScan.Count = 5 Then
      sName = CallerID.ReturnCallerID(aScan[2])
      Main.WriteLog(LogLabel & "Incoming phone call from " & IIf(aScan[2], aScan[2] & " (" & sName & ")", "0000000000") & ".")
      Main.SetGlobalVar("PhoneCall_Incoming", aScan[2] & " (" & sName & ") at " & Format(Now(), "hh:nn:ss dd-mm-yyyy"))
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Incoming call [id=" & aScan[1] & "] from " & aScan[2] & " on line " & aScan[3] & " (" & aScan[4] & ")")
      ' write data to cdr table
      Main.hDB.Begin()
      rResult = Main.hDB.Create("cdr")
      rResult!calldate = Now()
      rResult!uniqueid = aScan[1]
      rResult!clid = IIf(aScan[2], aScan[2], "0000000000")
      rResult!src = IIf(aScan[2], aScan[2], "0000000000")
      rResult!dcontext = "incoming"
      rResult!channel = aScan[3]
      rResult!disposition = "NO ANSWER"
      rResult.Update()
      Main.hDB.Commit()
      Main.RefreshPhoneCallList()
    Else
      Main.WriteDebugLog(LogLabel & "Error couldn't parse: " & sStr)
    Endif
  Endif
  ' 20.01.09 20:29:19;CONNECT;0;0;0XXXXXXXXX;
  If InStr(sStr, ";CONNECT;") Then
    aScan = Scan(sStr, "*;CONNECT;*;*;*;")
    If aScan.Count = 4 Then
      Main.WriteLog(LogLabel & "Phone call answered.")
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Call [id=" & aScan[1] & "] to/from " & aScan[3] & " answered")
      aScan[3] = IIf(aScan[3], aScan[3], "0000000000")
      rResult = Main.hDB.Exec("SELECT * FROM cdr WHERE clid = &1 ORDER BY calldate DESC LIMIT 1", aScan[3])
      If rResult Then
        If rResult.Count Then
          iId = rResult!id
          rResult = Main.hDB.Exec("UPDATE cdr SET disposition = 'ANSWERED', calldate = &1 WHERE id = &2", Now(), iId)
          Try Main.hDB.Exec("UPDATE contacts SET lastseen = now(), callnr = callnr+1 WHERE phoneno = &1 or mobileno = &1", aScan[3])
        Endif
      Endif
    Else
      Main.WriteDebugLog(LogLabel & "Error couldn't parse: " & sStr)
    Endif
  Endif
  ' 20.01.09 20:50:11;DISCONNECT;0;1253;
  If InStr(sStr, ";DISCONNECT;") Then
    aScan = Scan(sStr, "*;DISCONNECT;*;*;")
    If aScan.Count = 3 Then
      Main.WriteLog(LogLabel & "Phone call ended.")
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Call [id=" & aScan[1] & "] duration was " & aScan[2] & " seconds")
      rResult = Main.hDB.Exec("SELECT * FROM cdr ORDER BY calldate DESC LIMIT 1")
      If rResult.Available Then
        iId = rResult!id
        rResult = Main.hDB.Exec("UPDATE cdr SET duration = &1, billsec = &1 WHERE id = &2", aScan[2], iId)
        Main.RefreshPhoneCallList()
      Endif
    Else
      Main.WriteDebugLog(LogLabel & "Error couldn't parse: " & sStr)
    Endif
  Endif
  ' 20.01.09 22:28:50;CALL;0;0;0XXXXXXXXX;0XXXXXXXXX;POTS;
  If InStr(sStr, ";CALL;") Then
    aScan = Scan(sStr, "*;CALL;*;*;*;*;*;")
    If aScan.Count = 6 Then
      sName = CallerID.ReturnCallerID(aScan[4])
      WriteLog("Outgoing phone call to " & aScan[4] & " (" & sName & ")")
      Main.SetGlobalVar("PhoneCall_Outgoing", aScan[4] & " (" & sName & ") at " & Format(Now(), "hh:nn:ss dd-mm-yyyy"))
      If $bDebug Then Main.WriteDebugLog(LogLabel & " Outgoing call [id=" & aScan[1] & "] to " & aScan[4] & " with line " & aScan[3])
      ' write data to cdr table
      Main.hDB.Begin()
      rResult = Main.hDB.Create("cdr")
      rResult!calldate = Now()
      rResult!clid = aScan[4]
      rResult!uniqueid = aScan[1]
      rResult!src = aScan[3]
      rResult!dst = aScan[4]
      rResult!dcontext = "default"
      rResult!channel = aScan[3]
      rResult!disposition = "NO ANSWER"
      rResult.Update()
      Main.hDB.Commit()
      Main.RefreshPhoneCallList()
    Else
      Main.WriteDebugLog(LogLabel & "Error couldn't parse: " & sStr)
    Endif
  Endif

End

