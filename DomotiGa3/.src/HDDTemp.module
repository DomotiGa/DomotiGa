' Gambas module file

' Description:
' HDDTemp.module
' Support for HDDTemp harddisk temperature monitoring.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PUBLIC tHDDTemp AS Timer
PUBLIC hHDDTemp AS Socket
PRIVATE dTimeHighTemp AS Date

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Run()

  dTimeHighTemp = Date(1970, 1, 1, 0, 0, 0)
  ' start poll timer for HDDTemp
  tHDDTemp = NEW Timer AS "tHDDTemp"
  tHDDTemp.Delay = Main.iHDDTempPollTime * 1000 ' multiply for seconds
  tHDDTemp.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tHDDTemp_Timer()

  CheckHDDTemp()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open socket and connect to hddtemp daemon
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CheckHDDTemp()

  hHDDTemp = NEW Socket AS "hHDDTemp"
  hHDDTemp.Connect(Main.sHDDTempTCPHost, Main.iHDDTempTCPPort)

CATCH
  Main.WriteLog(("HDDTemp Error: ") & ERROR.Text & (" at ") & ERROR.Where)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' print debug info
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB hHDDTemp_Ready()

  IF Main.bHDDTempDebug THEN Main.WriteLog(("[HDDTemp] Connected to socket ") & Main.sHDDTempTCPHost & ":" & Main.iHDDTempTCPPort)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read and parse response string from daemon
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB hHDDTemp_Read()

  DIM sDisks, sFields AS String[]
  DIM sBuffer, sDisk, sField, sTemp, sDevice AS String
  DIM iCount, iDeviceId AS Integer

  ' read string and close the connection
  sBuffer = READ #hHDDTemp, Lof(hHDDTemp)
  TRY CLOSE #hHDDTemp

  IF Main.bHDDTempDebug THEN Main.WriteDebugLog(("[HDDTemp] Got string: ") & sBuffer)

  ' first change string so disks can be separated
  sBuffer = "|" & sBuffer & "|"
  sBuffer = Replace$(sBuffer, "||", "!")
  sDisks = Split(sBuffer, "!")

  ' iterate over each disk
  FOR EACH sDisk IN sDisks
    sFields = Split(sDisk, "|")
    iCount = 0
    FOR EACH sField IN sFields
      IF iCount = 0 THEN sDevice = sField
      IF iCount = 2 THEN
        IF sField <> "NA" THEN
          TRY sTemp = CFloat(sField)
          IF ERROR THEN CONTINUE
          IF Main.bHDDTempDebug THEN Main.WriteDebugLog(("[HDDTemp] Device '") & sDevice & ("' has a temperature of ") & sTemp & "°C")
          ' find device in database
          iDeviceId = Devices.Find(sDevice, Devices.FindInterface("HDDTemp Socket"), "HDDTEMP")
          IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sTemp, "", "", "")
          ' send warning message per e-mail if threshold is reached
          ' limit the amount of emails to one per 30 minutes
          IF (CFloat(sTemp) > Main.iHDDTempThreshold) AND (DateDiff(dTimeHighTemp, Now(), gb.Minute) > 30) THEN
            MailWarning(("The temperature of disk '") & sDevice & ("' is '") & sTemp & ("'°C/°F, so it's above the threshold of '") & Main.iHDDTempThreshold & "'°C/°F!")
            dTimeHighTemp = Now()
          ENDIF
          IF (CFloat(sTemp) < (Main.iHDDTempThreshold - 0.5)) AND (DateDiff(dTimeHighTemp, Now(), gb.Minute) < 100) THEN
            ' mail OK temp for now
            MailWarning(("The temperature of disk '") & sDevice & ("' is '") & sTemp & ("'°C/°F, so it's normal, below the threshold of '") & Main.iHDDTempThreshold & "'°C/°F!")
            dTimeHighTemp = Date(1970, 1, 1, 0, 0, 0)
          ENDIF
        ELSE
          IF Main.bHDDTempDebug THEN Main.WriteDebugLog(("[HDDTemp] Device '") & sDevice & ("' doesn't support temp measurement!"))
        ENDIF
      ENDIF
      INC iCount
    NEXT
  NEXT

CATCH ' some errors
  Main.WriteLog(("HDDTemp Error: ") & ERROR.Text & (" at ") & ERROR.Where)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB hHDDTemp_Error()

  DIM sString AS String = "HDDTemp: "

  ' handle errors
  SELECT CASE hHDDTemp.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & Main.sHDDTempTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' generate e-mail when temp is above threshold
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB MailWarning(sMessage AS String)

  Mail.SendMail(Application.Name & ": HDDTemp", sMessage, Main.sEmailToAddress)

END
