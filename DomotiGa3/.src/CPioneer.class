' Gambas class file

' Description:
' CPioneer.class
' Support for Pioneer Audio/Video receiver control.

' Development Status:
' Work in progress

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Pioneer"
Public PluginFriendlyName As String = "Pioneer Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Pioneer] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bDebug As Boolean
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String

Public hPioneer As New Socket
Public hPioneerSer As New SerialPort

Public sBuffer As String

Public bPower As Boolean
Public bPower_2 As Boolean
Public bMute As Boolean
Public bMute_2 As Boolean
Public iVolume As Integer
Public iVolume_2 As Integer
Public sInput As String
Public sInput_2 As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Pioneer Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hPioneer.Close

  ' get a new one
  hPioneer = New Socket As "Pioneer"
  hPioneer.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  ' try to close the connection
  Try hPioneerSer.Close

  ' get a new one
  hPioneerSer = New Serialport As "PioneerSer"
  With hPioneerSer
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Pioneer_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Pioneer_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hPioneer.Close
  Try hPioneerSer.Close

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Pioneer_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendCmd(sCmd As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending '" & sCmd & "' to Receiver.")
  If $sInterface = "tcp" Then
    Try Write #hPioneer, sCmd & Chr$(13), Len(sCmd) + 1
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the TCP port! -> " & Error.Text)
  Else
    If UCase(sCmd) = "PO" Or (UCase(sCmd) = "APO" And Not (bPower)) Then  'Send extra <CR> if device needs to be turned on so CPU can wake up from standby and is able to accept commands
      Try Write #hPioneerSer, Chr$(13), 1
      Sleep 0.1
    Endif
    Try Write #hPioneerSer, sCmd & Chr$(13), Len(sCmd) + 1
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the serial port! -> " & Error.Text)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Select Case sAddress
    Case "1"    ' Main
      Select Case LCase(sValue)
        Case "on"
          SendCmd("PO")
        Case "off"
          SendCmd("PF")
        Case Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sValue)
      End Select
    Case "2"    ' Zone 2
      Select Case LCase(sValue)
        Case "on"
          SendCmd("APO")
        Case "off"
          SendCmd("APF")
        Case Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sValue)
      End Select
  End Select

End

Public Sub SetCommand(sCmd As Variant, sValue As Variant, sAddress As String)

  Dim iValue As Integer

  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "power"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "PO", "PF"))
    Case "power_2"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "APO", "APF"))
    Case "volume"
      Select Case LCase(sValue)
        Case "up"
          SendCmd("VU")
        Case "down"
          SendCmd("VD")
        Case Else
          ' Volume: 0 (mute), 1 (-80(db)) .... 185 (+ 12(db))
          Try iValue = CInt(sValue) * 1.85
          If iValue >= 0 And iValue <= 185 Then
            SendCmd(CString(iValue) & "VL")
          Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sCmd & " " & sValue)
          Endif
      End Select
    Case "volume_2"
      Select Case LCase(sValue)
        Case "up"
          SendCmd("ZU")
        Case "down"
          SendCmd("ZD")
        Case Else
          ' Volume: 0 (mute), 1 (-80(db)) .... 81 (+ 0.0(db))
          Try sValue = Val(sValue)
          If TypeOf(sValue) = gb.Integer Then
            If sValue >= 0 And sValue <= 81 Then SendCmd(sValue & "ZV")
          Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sCmd & " " & sValue)
          Endif
      End Select
    Case "mute"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "MO", "MF"))
    Case "mute_2"
      ' ON or OFF
      SendCmd(IIf(sValue == "on", "Z2MO", "Z2MF"))
    Case "input"
      If sValue <> "" Then
        SendCmd(sValue & "FN")
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sCmd & sValue)
      Endif
    Case "input_2"
      If sValue <> "" Then
        SendCmd(sValue & "ZS")
      Else
           If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sCmd & " " & sValue)
      Endif
    Case "cli"
      ' send any correct command to receiver
      SendCmd(UCase(sValue))
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sCmd & " " & sValue)
  End Select

End

Public Sub GetCommand(sCmd As String, sAddress As String)

  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "volume"
      SendCmd("?V")
    Case "volume_2"
      SendCmd("?ZV")
    Case "input"
      SendCmd("?F")
    Case "input_2"
      SendCmd("?ZS")
    Case "mute"
      SendCmd("?M")
    Case "mute_2"
      SendCmd("?Z2M")
    Case "power_2"
      SendCmd("?AP")
    Case Else ' send some commands to get the states of the device and write them back in global variables.
      SendCmd("?P")
      Sleep 0.5
      SendCmd("?V")
      Sleep 0.5
      SendCmd("?M")
      Sleep 0.5
      SendCmd("?FN")
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported 'GetCommand' received: " & sCmd)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Pioneer_Read()

  Dim sData As String

  Try sData = Read #hPioneer, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from the TCP port! -> " & Error.Text)
  If sData = Chr$(13) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PioneerSer_Read()

  Dim sData As String

  Try sData = Read #hPioneerSer, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from the serial port! -> " & Error.Text)
  If sData = Chr$(13) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sStr As String)

  Dim sTemp As String

  If Left(sStr, 1) = Chr(10) Then sStr = Mid(sStr, 2)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received: " & sStr)

  Select Case sStr
    Case "PWR0"
      bPower = True
      PioneerSetValue("Power", "On")
      UpdateDeviceValue(1, "POWER", "On")
    Case "PWR1"
      bPower = False
      PioneerSetValue("Power", "Off")
      UpdateDeviceValue(1, "POWER", "Off")
    Case "APR0"
      bPower_2 = True
      PioneerSetValue("Power_2", "On")
      UpdateDeviceValue(2, "POWER", "On")
    Case "APR1"
      bPower_2 = False
      PioneerSetValue("Power_2", "Off")
      UpdateDeviceValue(2, "POWER", "Off")
    Case "MUT0"
      bMute = True
      PioneerSetValue("Mute", "On")
      UpdateDeviceValue(1, "VOLUME", "Mute")
    Case "MUT1"
      bMute = False
      PioneerSetValue("Mute", "Off")
      UpdateDeviceValue(1, "VOLUME", iVolume)
    Case "Z2MUT0"
      bMute_2 = True
      PioneerSetValue("Mute_2", "On")
      UpdateDeviceValue(2, "VOLUME", "Mute")
    Case "Z2MUT1"
      bMute_2 = False
      PioneerSetValue("Mute_2", "Off")
      UpdateDeviceValue(2, "VOLUME", iVolume_2)
    Case "E04"
      Main.WriteDebugLog(LogLabel & "ERROR: Detect inappropriate Command line")
    Case "E06"
      Main.WriteDebugLog(LogLabel & "ERROR: Detect inappropriate Parameter")
    Case "B00"
      Main.WriteDebugLog(LogLabel & "ERROR: AV Receiver is busy, Please wait few seconds")
    Case Else
      Select Case Left(sStr, 3)
        Case "VOL"                  ' master volume
          sTemp = Mid(sStr, 4)
          iVolume = Round((Val(sTemp) / 1.85), 0)
          PioneerSetValue("Volume", iVolume)
          UpdateDeviceValue(1, "VOLUME", iVolume)
        Case "Z2F"
          sInput_2 = TranslateInputSelecton(Mid(sStr, 4))
          If sInput_2 = "" Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown input selection response")
          Else
            PioneerSetValue("Input_2", sInput_2)
            UpdateDeviceValue(2, "INPUT", sInput_2)
          Endif
        Case Else
          Select Case UCase(Left(sStr, 2))
            Case "FN" 'Input source
              sInput = TranslateInputSelecton(Mid(sStr, 3))
              If sInput = "" Then
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown input selection response")
              Else
                PioneerSetValue("Input", sInput)
                UpdateDeviceValue(1, "INPUT", sInput)
              Endif
            Case "ZV" 'Volume level zone 2
              sTemp = Mid(sStr, 3)
              iVolume_2 = Round((Val(sTemp) / 0.81), 0)
              PioneerSetValue("Volume_2", iVolume_2)
              UpdateDeviceValue(2, "VOLUME", iVolume_2)
            Case "PR" 'Tuner preset
            Case "FR" 'Tuner frequency
            Case "SR" 'Listening mode
            Case "LM" 'Playing listening mode
            Case Else
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Not implemented yet!")
          End Select
      End Select
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return input selection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function TranslateInputSelecton(InputID As String) As String

  Select Case InputID
    Case "00"
      Return "PHONO"
    Case "01"
      Return "CD"
    Case "02"
      Return "TUNER"
    Case "03"
      Return "CD-R/TAPE"
    Case "04"
      Return "DVD"
    Case "05"
      Return "TV/SAT"
    Case "10"
      Return "VIDEO1"
    Case "14"
      Return "VIDEO2"
    Case "15"
      Return "DVR/BDR"
    Case "17"
      Return "IPOD/USB"
    Case "18"
      Return "XMRadio"
    Case "19"
      Return "HDMI1"
    Case "20"
      Return "HDMI2"
    Case "21"
      Return "HDMI3"
    Case "22"
      Return "HDMI4"
    Case "23"
      Return "HDMI5"
    Case "25"
      Return "BD"
    Case "26"
      Return "HomeMedia"
    Case "27"
      Return "SIRIUS"
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub PioneerSetValue(sItem As String, vValue As Variant)

  Main.SetGlobalVar("Pioneer_" & sItem, vValue)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Saved global variable; Item:Pioneer_" & sItem & ", Value:" & vValue)

End

Private Sub UpdateDeviceValue(iAddress As Integer, sValueType As String, vValue As Variant)

  Dim iDeviceId As Integer

  ' try to find device with address, and correct interface type.
  iDeviceId = Devices.Find(Instance, iAddress, InterfaceId, "Pioneer")
  ' if found then update it's value
  If iDeviceId Then
    Select Case UCase(sValueType)
      Case "POWER"
        Devices.ValueUpdate(iDeviceId, 1, vValue)
      Case "VOLUME"
        Devices.ValueUpdate(iDeviceId, 2, vValue)
      Case "INPUT"
        Devices.ValueUpdate(iDeviceId, 3, vValue)
    End Select
  Endif

End
