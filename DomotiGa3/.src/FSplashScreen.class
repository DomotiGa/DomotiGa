' Gambas class file

' Description:
' FSplashScreen.class

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public tStartup As Timer
Private bAuthOk As Boolean
Private iCountLogin As Integer
Private bInstallWizard As Boolean = False
Private bCancel As Boolean = False
Private bDBReconnected As Boolean
Private iDBReconnect As Integer
Public tDBReconnect As Timer

Public Sub _new()

  tStartup = New Timer As "tStartup"
  tStartup.Delay = 100
  tStartup.Start

End

Public Sub Form_Open()

  lblVersion.Text = "version " & Main.sProgramVersion
  Me.Height = 200
  Panel1.Height = 188
  prbStatus.Y = 120
  lblStatus.Y = 152
  txtCopyright.Text = "Copyright (C) 2008-" & Year(Now) & " by Ron Klinkien"

End

Public Sub tStartup_Timer()

  tStartup.Stop
  If Main.bLogout Then
    Login()
  Else
    StartProgram()

    ' don't continue if clicked on close/abort during database setup
    If Not Main.ConnectedDatabase() Then
      bAuthOk = True
      Me.Close
    Endif

  Endif

End

Public Sub tDBReconnect_Timer()

  ' Stop timer, preventing triggering it during the reconnect
  tDBReconnect.Stop

  ' Check if the database is available
  bDBReconnected = Main.ConnectDatabase()

  ' If still not connected, start 5 sec timer again
  If Not bDBReconnected Then
    iDBReconnect += 1
    tDBReconnect.Start
  Endif

End

Private Sub StartProgram()

  SetProgressValue(0, ("Init ..."))
  Wait 0.01

  SetProgressValue(20, ("Checking logfiles and directory structure ..."))
  Wait 0.05

  Main.Setup_Logfiles()

  ' Check directory structure and create if required
  Main.CreateDirectoryTree()

  Main.DisplayProgramInfo()

  'lblStatus.Text = ("Loading configuration ...")

  SetProgressValue(40, ("Connecting to database ..."))
  Wait 0.05

  If Not Main.ConnectDatabase(True) Then

    ' If db is already initialized, then wait until connected or ask for the wizard
    If Main.bSQLInitialized Then
      Me.Height = 264
      Panel1.Height = 252
      lblDbInitWarning.Visible = True
      btnStartDbInstallWizard.Visible = True
      btnCancel.Visible = True
      lblDbInitWarning.Y = 184
      btnStartDbInstallWizard.Y = 216
      btnCancel.Y = 223

      bDBReconnected = False
      iDBReconnect = 1
      tDBReconnect = New Timer As "tDBReconnect"
      tDBReconnect.Delay = 5000
      tDBReconnect.Start

      Repeat
        ' Errors we are going to handle are:
        'Error 1045(28000): Access denied For user 'domouser'@'localhost' (using password: YES)
        'Error 2003(HY000): Can't connect to MySQL server on '192.168.2.1' (111)\n
        'Error 2002(HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)\n
        lblDbInitWarning.Text = ""
        lblDbInitWarning.Alignment = 3
        If InStr(Main.sSQLConnError, "' (2)") Or InStr(Main.sSQLConnError, "' (111)") Then
          lblDbInitWarning.Text = "Can't connect MySQL, retry in 5 sec (" & iDBReconnect & ")"
        Else If InStr(Main.sSQLConnError, "2002(HY000)") Then
          lblDbInitWarning.Text = "Access denied, retry in 5 sec (" & iDBReconnect & ")"
        Else
          lblDbInitWarning.Alignment = 1
          If Main.sSQLConnError Then
            lblDbInitWarning.Text = Main.sSQLConnError
          Else
            lblDbInitWarning.Text = "Unknown MSQL error, retry in 5 sec (" & iDBReconnect & ")"
          Endif
        Endif
 
        Wait 0.2

      Until bInstallWizard Or bCancel Or bDBReconnected

      ' Reset some form parameters
      Me.Height = 200
      Panel1.Height = 188
      lblDbInitWarning.Visible = False
      btnStartDbInstallWizard.Visible = False
      btnCancel.Visible = False

      If bCancel Then Return

      If bInstallWizard Then  
        FInstallDBWizard.ShowModal
        ' Exit if the database connection is not available
        If Not Main.ConnectedDatabase() Then Return
      Endif
    Else
      FInstallDBWizard.ShowModal
      ' Exit if the database connection is not available
      If Not Main.ConnectedDatabase() Then Return
    Endif
  Endif

  ' update database
  SetProgressValue(50, ("Updating database ..."))
  Wait 0.05

  SetProgressValue(60, ("Loading plugins ..."))
  Wait 0.05

  Main.Setup()

  SetProgressValue(80, ("Starting main program ..."))

  ' update house status
  If Main.bServer Then
    If Not Main.GetGlobalVar("House_Mode") Then Main.SetGlobalVar("House_Mode", "normal")
    Main.ChangeHouseMode(Main.GetGlobalVar("House_Mode"))
    Main.ChangeMuteMode(Main.GetGlobalVar("Mute"))
  Endif

  If Main.GetGlobalVar("EmailCount") Then Main.iNewMails = Main.GetGlobalVar("EmailCount")
  If Main.GetGlobalVar("CallCount") Then Main.iNewCalls = Main.GetGlobalVar("CallCount")
  If Main.GetGlobalVar("VoiceMailCount") Then Main.iNewVoicemails = Main.GetGlobalVar("VoiceMailCount")

  Main.WriteLog("[Main] Entering main program loop.")

  SetProgressValue(100, "Entering main program loop ...")
  Wait 0.05

  ' program startup
  If Main.bServer Then ' ' only do it in server mode
    Main.UpdateGlobalVars()
  Else
    FMain.UpdateStatusPanel()
  Endif

  Main.Check_for_Action()
  Main.SetupTimers() ' start timers
  FMain.txtTime.Text = Format$(Now(), "d mmmm h:nn")

  If Main.bAuthEnabled Then
    Login()
  Else
    bAuthOk = True
    Me.Close
  Endif

End

Public Sub Login()

  Me.Height = 260
  Panel1.Height = 246
  lblStatus.Y = 215
  Label1.Visible = True
  Label2.Visible = True
  txtUser.Visible = True
  txtPassword.Visible = True
  btnLogin.Visible = True
  prbStatus.Visible = False
  btnLogin.Enabled = True
  lblTFA.Visible = True
  vbTFCode.Visible = True
  iCountLogin = 0
  txtUser.SetFocus
  lblStatus.Text = ("Please authenticate yourself.")

  If Main.GetGlobalVar("Last_User") Then
    txtUser.Text = Main.GetGlobalVar("Last_User")
    txtPassword.SetFocus()
  Endif

End

Public Sub SetProgressValue(iValue As Integer, sStatus As String)

  If iValue > 100 Then iValue = 100
  If iValue < 0 Then iValue = 0

  prbStatus.Value = iValue / 100
  lblStatus.Text = sStatus

End

Public Sub btnLogin_Click()

  Enter()

End

Private Sub Enter()

  If Not txtUser.Text Then
    lblStatus.Text = ("Please specify your username.")
  Else
    If CheckAuth() Then
      bAuthOk = True
      Me.Close
    Else
      lblStatus.Text = ("Sorry wrong username and/or password!")
      txtPassword.Text = ""
      ' and only allow three failures to login
    Endif
  Endif

End

Private Sub CheckAuth() As Boolean

  Dim rResult As Result
  Dim sStr As String

  ' All password should have a valid MD5/SHA256/SHA512 encryption
  Try rResult = Main.hDB.Exec("SELECT * FROM users WHERE username = &1", txtUser.Text)
  If rResult And If rResult.Available Then

    If Util.PasswordVerify(txtPassword.Text, rResult!password) Then
      If rResult!tfaenabled Then
        ''check tfa setup
          If Not (rResult!tfasecret = Null) Then
            ''verify tfa code

              'Dim sStr As String
              If Len(vbTFCode.Text) = 6 Then
                sStr = Util.TFAVerify(rResult!tfasecret, CInt(vbTFCode.Text))
                'sStr = "True"
                If sStr = "True" Then
                  AuthOk()
                  Return True
                Else If sStr = "False" Then
                Else 'should never happen
                  'tbd catch the error'
                Endif
              Endif 'length tbtfacode = 6

          Else 'setup TFA
            '' setup tfa
            FEditUsers.btTFA.Text = "Setup TFA"
            FEditUsers.sUsersName = rResult!username
            If (Ftfasetup.Showmodal()) Then
             'btTFA.Text = "Delete secret"

            '' verfiy tfa code
              'Dim sStr As String
              If Len(vbTFCode.Text) = 6 Then
                '' reload secret
                rResult = Main.hDB.Exec("SELECT * FROM users WHERE username = &1", txtUser.Text)

                sStr = Util.TFAVerify(rResult!tfasecret, CInt(vbTFCode.Value))
                If sStr = "True" Then
                  AuthOk()
                  Return True
                Else If sStr = "False" Then
                  iCountLogin = iCountLogin - 1
                Else 'should never happen
                  'tbd catch the error'
                Endif
              Endif 'length tbtfacode = 6
               iCountLogin = iCountLogin - 1
            Else 'setup tfa
              ' No setup of tfa completed succesfully
              Balloon("TFA not setup correctly", vbTFCode)

            Endif
          Endif 'rResult.tfasecret
      Else ' TFA not enabled
        AuthOk()
        Return True
      Endif ' TFA enabled/disabled
      'Return True
    Endif 'pwd ok
  Endif 'result.count

  Inc iCountLogin
  If iCountLogin > 3 Then
     Main.WriteLog("[Main] User '" & txtUser.Text & "' entered invalid password too many times, exiting program.")
     Message(("Invalid username and/or password, too many retries, exiting program!"))

     Main.CloseAll()

     Quit
  Endif

  Return False

End
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'if authentication (pwd and or tfa) is ok, authok is executed to set coockie, admin/user settings,...
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Private Sub AuthOk()

  Dim rResult As Result

  ' All password should have a valid MD5/SHA256/SHA512 encryption
  Try rResult = Main.hDB.Exec("SELECT * FROM users WHERE username = &1", txtUser.Text)
  If rResult And If rResult.Available Then

    If Util.PasswordVerify(txtPassword.Text, rResult!password) Then
      Main.SetGlobalVar("Last_User", txtUser.Text)
      Main.sActiveUser = txtUser.Text
      Main.sActiveUserID = rResult!id
      If Len(rResult!cookie) < 1 Then
        ' we have to init the cookie; the decrypted cookie will never change
        ' in DB the cookie is encrypted with MD5 (MD5 hash seed) hash of current password
        ' we avoid sending user password over to DB, but the crypt key is however communicated in clear!
        ' the cookie will protect private user info within the DB
        Try Main.hDB.Exec("UPDATE users SET cookie = AES_ENCRYPT(&1,&2) WHERE username = &3", rResult!password, Right(rResult!password, 8), txtUser.Text)
      Endif
      Try rResult = Main.hDB.Exec("SELECT AES_DECRYPT(cookie,&1) AS cookie, admin FROM users WHERE username = &2", Right(rResult!password, 8), txtUser.Text)
      Main.sActiveUserCookie = rResult!cookie ' the crypt key for private user info in the DB

      If rResult!admin Then
        Main.WriteLog("[Main] " & ("Logged in as '") & txtUser.Text & ("' (Administrator)."))
        Main.bUserisAdmin = True  ' hide non admin menu's
        FMain.MenuEdit.Visible = True
        FMain.MenuDevices.Visible = True
        FMain.MenuSetup.Visible = True
        FMain.MenuModules.Visible = True
        FMain.MenuInterfaces.Visible = True
        FMain.MenuTools.Visible = True
        FMain.MenuThermostats.Visible = True
        FMain.MenuEvents.Visible = True
      Else
        Main.WriteLog("[Main] " & ("Logged in as '") & txtUser.Text & ("' (User)."))
        Main.bUserisAdmin = False
        FMain.MenuEdit.Visible = False
        FMain.MenuDevices.Visible = False
        FMain.MenuSetup.Visible = False
        FMain.MenuModules.Visible = False
        FMain.MenuInterfaces.Visible = False
        FMain.MenuTools.Visible = False
        FMain.MenuThermostats.Visible = False
        FMain.MenuEvents.Visible = False
      Endif
      FMain.pbUser.Visible = True
      FMain.txtUser.Text = LCase$(txtUser.Text)
      rResult = Main.hDB.Exec("UPDATE users SET lastlogin = &1 WHERE username = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), txtUser.Text)
      FMain.MenuLogout.Visible = True
      FMain.MenuEditUser.Visible = True
      'Return True
    Endif
  Endif

End

Public Sub Form_Close()

  If bAuthOk = False Then Stop Event

End

Public Sub vbTFCode_GotFocus()

  vbTFCode.Value = ""

End


Public Sub btnCancel_Click()

  bCancel = True

End

Public Sub btnStartDbInstallWizard_Click()

  bInstallWizard = True

End
