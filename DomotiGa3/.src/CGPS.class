' Gambas class file

' Description:
' CGPS.class
' u-blox AG MS1E GPS module (NMEA) support to get GPS time, precise position, and altitude
' GPS module version: $Version 1.3.4P00283 uBlx308

' Development Status:
' Reads serial data, needs parsing to be implemented.
' Wrote it for fun, no serious purpose for a non mobile server.

' Links:
' http://aprs.gids.nl/nmea/

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Module additions by Timo Sariwating in 2009.

' Read file called COPYING for license details.

' Notes:
' NMEA sentences: 
' $GPBOD - Bearing, origin TO destination
' $GPBWC - Bearing AND distance TO waypoint, great circle
' $GPGGA - Global Positioning System Fix Data
' $GPGLL - Geographic position, latitude / longitude
' $GPGSA - GPS DOP AND active satellites
' $GPGSV - GPS Satellites IN view
' $GPHDT - Heading, TRUE
' $GPR00 - List OF waypoints IN currently active route
' $GPRMA - Recommended minimum specific Loran - C data
' $GPRMB - Recommended minimum navigation info
' $GPRMC - Recommended minimum specific GPS / Transit data
' $GPRTE - Routes
' $GPTRF - Transit Fix Data
' $GPSTN - Multiple Data ID
' $GPVBW - Dual Ground / Water Speed
' $GPVTG - Track made good AND ground speed
' $GPWPL - Waypoint location
' $GPXTE - Cross - track ERROR , Measured
' $GPZDA - Date & Time

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "GPS"
Public PluginFriendlyName As String = "GPS Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[GPS] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean

Public hGPS As New SerialPort

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hGPS.Close

  ' get a new one
  hGPS = New Serialport As "GPS"
  With hGPS
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hGPS.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data input
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GPS_Read()

  Dim sData As String

  Line Input #hGPS, sData
  Select Case Mid$(sdata, 2, 5)
    Case "GPGLL" ' position
      Main.WriteDebugLog(LogLabel & "Position: " & sData)
    Case "GPZDA" ' date & time
      Main.WriteDebugLog(LogLabel & "Date & Time: " & sData)
    Case "GPGGA" ' fix data
      GPSFix(sData)
    Case "GPGSV" ' satellites in view
    'Main.WriteDebugLog(LogLabel & "Satellites in view: " & sData)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse fix data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GPSFix(sValue As String)

  Dim sGPSFix As String[]
  Dim sB, sC As String
  Dim iCounter As Integer = 1

  sGPSFix = Split(sValue, ",")

  For Each sB In sGPSFix
    Select Case (iCounter)
      Case 1
        Inc iCounter
      Case 2
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Time: " & sB)
        Inc iCounter
      Case 3
        sC = sB
        Inc iCounter
      Case 4
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Latitude: " & sC & " " & sB)
        sC = ""
        Inc iCounter
      Case 5
        sC = sB
        Inc iCounter
      Case 6
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Longitude: " & sC & " " & sB)
        sC = ""
        Inc iCounter
      Case 7
      If $bDebug Then
        Select Case (sB)
        Case 0
          Main.WriteDebugLog(LogLabel & "Fix Quality: Invalid")
          Inc iCounter
        Case 1
          Main.WriteDebugLog(LogLabel & "Fix Quality: GPS Fix")
          Inc iCounter
        Case 2
          Main.WriteDebugLog(LogLabel & "Fix Quality: DGPS Fix")
          Inc iCounter
        End Select
        Else
          Inc iCounter
        Endif
      Case 8
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Number of Satellites: " & sB)
        Inc iCounter
      Case 9
        If $bDebug Then Main.WriteDebugLog(LogLabel & "HDOP: " & sB)
        Inc iCounter
      Case 10
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Altitude: " & sB)
        Inc iCounter
      Case 11
        Inc iCounter
      Case 12
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Heigh above WGS84: " & sB)
        Inc iCounter
      Case 13
        Inc iCounter
      Case 14
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Time since last DGPS update: " & sB)
        Inc iCounter
      Case 15
        If $bDebug Then
          Main.WriteDebugLog(LogLabel & "DGPS Station ID: " & Left$(sB, 4))
          Main.WriteDebugLog(LogLabel & "CheckSum: " & Right$(sB, -4))
        Endif
    End Select
  Next

End

