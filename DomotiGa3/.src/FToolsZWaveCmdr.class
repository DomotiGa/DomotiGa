' Gambas class file

' Description:
' FToolsZWaveCmdr.class
' Test some basic Z-Wave functionality.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public iSelectedNode As Integer
Public tControllerCancel As Timer

Public Sub Form_Open()
  Dim jCount As Integer

  Me.Move(FMain.X + 50, FMain.Y + 70)
  With tbvNodes
    .Columns.Count = 12
    .Columns[0].Title = ("Node")
    .Columns[1].Title = ("Basic Type")
    .Columns[2].Title = ("Generic Type")
    .Columns[3].Title = ("Value")
    .Columns[4].Title = ("Value2")
    .Columns[5].Title = ("Value3")
    .Columns[6].Title = ("Value4")
    .Columns[7].Title = ("Status")
    .Columns[8].Title = ("Manufacturer")
    .Columns[9].Title = ("Product")
    .Columns[10].Title = ("Neighbors")
    .Columns[11].Title = ("Supported Classes")
    For jCount = 0 To 11
      ' [GB2:FNTW] .Columns[jCount].Width = tbvNodes.Font.Width(tbvNodes.Columns[jCount].Title) + .Font.Size
      .Columns[jCount].Width = tbvNodes.Font.TextWidth(tbvNodes.Columns[jCount].Title) + .Font.Size
    Next
  End With

  If Not Main.bServer Then
    Message.Info(("Z-Wave Commander will only work in Server-Mode"))
    Me.Close
    Return
  Endif

  If Not Main.bZWaveEnabled Or If Not Main.hZWave Then
    Message.Info(("Z-Wave interface is not enabled\nor couldn't open port!"))
    Me.Close
    Return
  Endif

  If Not Main.hZWave.bOZWInitialized Then
    Message.Info(("The Open Z-Wave library isn't fully initialized\nSome information and functions are not available (yet)\nIt can take up to 1 minute per 10 devices to initialize"))
  Endif

  FillScreenInfo()
  FillNodeTable()

End

Public Sub FillScreenInfo()

  ' Set On/Off/Slide off as default
  tbvNodes.Enabled = False
  btnNodeOn.Enabled = False
  btnNodeOff.Enabled = False
  slDim.Enabled = False

  ' Disable all nodes, because we don't know the node YET
  btnRequestBasicReport.Enabled = False
  btnRequestDynamicReport.Enabled = False
  btnRequestNodeNeighborUpdate.Enabled = False
  btnRefreshNodeInfo.Enabled = False
  btnRequestVersionReport.Enabled = False
  btnRequestMeterReport.Enabled = False
  spInstance.Enabled = False
  btnRequestAllConfigParams.Enabled = False
  btnRequestConfigParam.Enabled = False
  btnSetConfigParam.Enabled = False
  btnAddAssociation.Enabled = False
  btnRemoveAssociation.Enabled = False
  btnRemoveFailedNode.Enabled = False
  btnReplaceFailedNode.Enabled = False

  ' Disallow the controller commands if we don't have a homeid
  If Main.hZWave.iHomeID = 0 Then
    txtHomeID.Text = "Unknown"
    btnAddDevice.Enabled = False
    btnRemoveDevice.Enabled = False
    btnCancelControllerCommand.Enabled = False
    btnSoftResetController.Enabled = False
    btnHardResetController.Enabled = False
    btnRequestBasicReportAll.Enabled = False
    btnRequestDynamicReportAll.Enabled = False
    btnRequestHealNetwork.Enabled = False
  Else
    txtHomeID.Text = Main.hZWave.iHomeID
    btnAddDevice.Enabled = True
    btnRemoveDevice.Enabled = True
    btnCancelControllerCommand.Enabled = True
    btnSoftResetController.Enabled = True
    btnHardResetController.Enabled = True
    btnRequestBasicReportAll.Enabled = True
    btnRequestDynamicReportAll.Enabled = True
    btnRequestHealNetwork.Enabled = True
  Endif

  txtControllerID.Text = Main.hZWave.iControllerID
  txtZWaveAPIVersion.Text = Main.hZWave.sZWaveAPIVersion
  txtZWaveZDKVersion.Text = Main.hZWave.sZWaveZDKVersion
  txtControllerType.text = Main.hZWave.sControllerType

End

Public Sub FillNodeTable()

  Dim rResult As Result
  Dim iRows, iCount, jCount As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices_zwave ORDER BY length(substring_index(nodeid,\":\",1)),substring_index(nodeid,\":\",1), nodeid")
  If Not rResult Then
    Message.Info(("Error: table 'devices_zwave' not found!"))
    Return
  End If
  iRows = rResult.Count
  If iRows > 0 Then
    tbvNodes.Enabled = True
    tbvNodes.Rows.Count = iRows
    For iCount = 0 To rResult.Max
      tbvNodes[iCount, 0].Text = rResult!nodeid
      tbvNodes[iCount, 1].Text = Main.hZWave.BasicTypeName(rResult!typebasic)
      tbvNodes[iCount, 2].Text = Main.hZWave.GenericTypeName(rResult!typegeneric)
      tbvNodes[iCount, 3].Text = rResult!value
      tbvNodes[iCount, 4].Text = rResult!value2
      tbvNodes[iCount, 5].Text = rResult!value3
      tbvNodes[iCount, 6].Text = rResult!value4
      tbvNodes[iCount, 7].Text = IIf(rResult!sleeping, "Sleeping", "Listening")
      tbvNodes[iCount, 8].Text = Main.hZWave.GetNodeManufacturerName(rResult!nodeid)
      tbvNodes[iCount, 9].Text = Main.hZWave.GetNodeProductName(rResult!nodeid)
      tbvNodes[iCount, 10].Text = Main.hZWave.GetNodeNeighborsList(rResult!nodeid)
      tbvNodes[iCount, 11].Text = Main.hZWave.GetNodeCommandClassList(rResult!nodeid)

      ' Make column widther if needed
      For jCount = 0 To 11

        ' [GB2:FNTW] IF (tbvNodes.Font.Width(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size) > tbvNodes.Columns[jCount].Width THEN
        If (tbvNodes.Font.TextWidth(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size) > tbvNodes.Columns[jCount].Width Then
          ' [GB2:FNTW] tbvNodes.Columns[jCount].Width = tbvNodes.Font.Width(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size
          tbvNodes.Columns[jCount].Width = tbvNodes.Font.TextWidth(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size
        End If

      Next
 
      rResult.MoveNext
    Next
  End If

End

Public Sub tbvNodes_Click()

  EnableControls(tbvNodes.Row)

End

Public Sub tbvNodes_Change()

  EnableControls(tbvNodes.Row)

End

Public Sub EnableControls(iRow As Integer)

  iSelectedNode = tbvNodes[iRow, 0].Text

  ' Don't allow anything if the homeid is empty
  If Main.hZWave.iHomeID = 0 Then
    Return
  Endif

  Select tbvNodes[iRow, 2].Text
    Case "Generic Controller", "Static Controller"
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = False
      btnRequestDynamicReport.Enabled = False
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = False
      btnRequestMeterReport.Enabled = False
      spInstance.Enabled = False
      btnRequestAllConfigParams.Enabled = False
      btnRequestConfigParam.Enabled = False
      btnSetConfigParam.Enabled = False
      btnAddAssociation.Enabled = False
      btnRemoveAssociation.Enabled = False

    Case "Multilevel Switch"
      btnNodeOn.Enabled = True
      btnNodeOff.Enabled = True
      Try slDim.Value = Main.hZWave.GetCurrentValueNode(iSelectedNode)
      slDim.Enabled = True
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = True
      btnRequestAllConfigParams.Enabled = True
      btnRequestConfigParam.Enabled = True
      btnSetConfigParam.Enabled = True
      btnAddAssociation.Enabled = True
      btnRemoveAssociation.Enabled = True

    Case "Binary Switch"
      btnNodeOff.Enabled = True
      btnNodeOn.Enabled = True
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = True
      btnRequestAllConfigParams.Enabled = True
      btnRequestConfigParam.Enabled = True
      btnSetConfigParam.Enabled = True
      btnAddAssociation.Enabled = True
      btnRemoveAssociation.Enabled = True

    Case "Semi Interoperable", "Non Interoperable"
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = False
      btnRequestDynamicReport.Enabled = False
      btnRequestNodeNeighborUpdate.Enabled = False
      btnRefreshNodeInfo.Enabled = False
      btnRequestVersionReport.Enabled = False
      btnRequestMeterReport.Enabled = False
      spInstance.Enabled = False
      btnRequestAllConfigParams.Enabled = False
      btnRequestConfigParam.Enabled = False
      btnSetConfigParam.Enabled = False
      btnAddAssociation.Enabled = False
      btnRemoveAssociation.Enabled = False

    Default
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = False
      btnRequestAllConfigParams.Enabled = True
      btnRequestConfigParam.Enabled = True
      btnSetConfigParam.Enabled = True
      btnAddAssociation.Enabled = True
      btnRemoveAssociation.Enabled = True

  End Select

  btnRemoveFailedNode.Enabled = True
  btnReplaceFailedNode.Enabled = True

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub btnNodeOn_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "On command send to node " & iSelectedNode & ", instance " & spInstance.Value
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, &HFF)
  Endif

End

Public Sub btnNodeOff_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Off command send to node " & iSelectedNode & ", instance " & spInstance.Value
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, &H0)
  Endif

End

Public Sub slDim_MouseUp()

  If slDim.Enabled And iSelectedNode >= 1 Then
    txtMessage.Text = "Dim=" & slDim.Value & " request send to node " & iSelectedNode
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, slDim.Value)
  Endif
  
End

Public Sub btnRequestBasicReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested basic report for node " & iSelectedNode
    Main.hZWave.RequestBasicReport(iSelectedNode)
  Endif

End

Public Sub btnRequestCapabilities_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested capabilities for node " & iSelectedNode
    Main.hZWave.RequestNodeCapabilities(iSelectedNode)
  Endif

End

Public Sub btnRefresh_Click()

  FillScreenInfo()
  FillNodeTable()

End

Public Sub btnCancelControllerCommand_Click()

  If Main.hZWave.CancelControllerCommand() Then
    txtMessage.Text = "Cancelled controller command"

    ' Try to stop the timer, if configured
    Try tControllerCancel.Stop

  Else
    txtMessage.Text = "Controller was already in normal operation mode"
  Endif

End

Public Sub btnAddDevice_Click()

  If Main.hZWave.AddDevice() Then
    txtMessage.Text = "Press button on device to add!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCancel = New Timer As "tControllerCancel"
    tControllerCancel.Delay = 30000
    tControllerCancel.Start

  Else
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  Endif

End

Public Sub btnRemoveDevice_Click()

  If Main.hZWave.RemoveDevice() Then
    txtMessage.Text = "Press button on device to remove!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCancel = New Timer As "tControllerCancel"
    tControllerCancel.Delay = 30000
    tControllerCancel.Start

  Else
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  Endif

End

Public Sub btnRequestNodeNeighborUpdate_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting neighborhood update for node " & iSelectedNode
    Main.hZWave.RequestNodeNeighborUpdate(iSelectedNode)
  Endif

End

Public Sub btnSetConfigParam_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Setting config parm " & vbConfigParam.Value & " for node " & iSelectedNode & " to " & vbConfigParam.Value
    Main.hZWave.SetConfigParam(iSelectedNode, vbConfigParam.Value, vbConfigValue.Value)
  Endif

End

Public Sub btnRequestAllConfigParams_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested all config parms for node " & iSelectedNode
    Main.hZWave.RequestAllConfigParams(iSelectedNode)
  Endif

End

Public Sub btnAddAssociation_Click()

  If iSelectedNode >= 1 Then
    If vbAssociationGroup.Value >= 1 And vbAssociationGroup.Value <= 9 Then

      If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 254 Then
      txtMessage.Text = "Adding association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
      Main.hZWave.AddAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      Else
        txtMessage.Text = "ERROR: Requested to associate node is not between 1-254"
      Endif

    Else
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    Endif
  Endif

End

Public Sub btnRemoveAssociation_Click()

  If iSelectedNode >= 1 Then
    If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 9 Then

      If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 254 Then
        txtMessage.Text = "Removing association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
        Main.hZWave.RemoveAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      Else
        txtMessage.Text = "ERROR: Requested to be removed associate node is not between 1-254"
      Endif

    Else
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    Endif
  Endif

End

Public Sub btnRequestConfigParam_Click()

  If iSelectedNode >= 1 Then
    If vbConfigParam.Value >= 1 And vbConfigParam.Value <= 255 Then
      txtMessage.Text = "Requesting config parm " & vbConfigParam.Value & " for node " & iSelectedNode
      Main.hZWave.RequestConfigParam(iSelectedNode, vbConfigParam.Value)
    Else
      txtMessage.Text = "ERROR: Requested config is not between 1-255"
    Endif
  Endif

End

Public Sub btnRequestDynamicReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting dynamic update for node " & iSelectedNode
    Main.hZWave.RequestNodeDynamicReport(iSelectedNode)
  Endif

End

Public Sub btnRefreshNodeInfo_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting RefreshInfo for node " & iSelectedNode
    Main.hZWave.RefreshNodeInfo(iSelectedNode)
  Endif

End

Public Sub btnRequestVersionReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting version report for node " & iSelectedNode
    Main.hZWave.RequestNodeVersionReport(iSelectedNode)
  Endif

End

Public Sub btnRequestMeterReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting meter report for node " & iSelectedNode
    Main.hZWave.RequestNodeMeterReport(iSelectedNode)
  Endif

End

Public Sub btnSoftResetController_Click()

  If Message.Question("Are you sure that you want to SOFT Reset the Z-Wave controller?", (" Yes "), (" No ")) = 1 Then
    txtMessage.Text = "Controller is beeing Soft Reset (Reboot)"
    Main.hZWave.ControllerSoftReset()
  Endif

End

Public Sub btnHardResetController_Click()

  If Message.Question("Are you sure that you want to HARD Reset the Z-Wave controller?\n*** *ALL* the data will be erased from the controller ***", ("Yes"), ("No")) = 1 Then
    txtMessage.Text = "Controller is beeing HARD Reset (*ALL* data erased)"
    Main.hZWave.ControllerHardReset()
  Endif

End

Public Sub btnRequestBasicReportAll_Click()

  txtMessage.Text = "Requested basic report for all nodes"
  Main.hZWave.RequestBasicReport(0)

End

Public Sub btnRequestDynamicReportAll_Click()

  txtMessage.Text = "Requested dynamic report for all nodes"
  Main.hZWave.RequestNodeDynamicReport(0)

End

Public Sub tControllerCancel_Timer()

  txtMessage.Text = "30 seconds have expired, cancelling controller command"
  Main.hZWave.CancelControllerCommand()

End

Public Sub btnRemoveFailedNode_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Trying to remove failed node " & iSelectedNode
    Main.hZWave.RemoveFailedNode(iSelectedNode)
  Endif

End

Public Sub btnReplaceFailedNode_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Trying to replace failed node " & iSelectedNode
    Main.hZWave.ReplaceFailedNode(iSelectedNode)
  Endif

End

Public Sub btnRequestHealNetwork_Click()

  Main.hZWave.HealNetwork()
  txtMessage.Text = "Healing the Z-Wave network"

End
