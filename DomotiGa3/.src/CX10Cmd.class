' Gambas class file

' Description:
' X10Cmd.module
' Use Heyu or other command to control X10 devices.

' Development Status:
' Writing is working, maybe better error checking is needed.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Reading device status code was written by Renaud.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "X10Cmd"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "X10Cmd"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Renaud"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[X10Cmd] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sCommand As String
Private $bMonitor As Boolean
Private $bGlobalX10 As Boolean
Private $iType As Integer
Private $bX10CmdDebug As Boolean

Private sOutput As String
Private sMonitorBuffer As String
Private pMonitor As Process
Private cQueue As New Collection  ' command buffer
Private bX10CmdBusy As Boolean  ' waiting for command to finish

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const Type_cm11a As Integer = 0 ' cm11a heyu
Public Const Type_cma15a As Integer = 1 ' cma15a cm15ademo
Public Const Type_cm17a As Integer = 2  ' cm17a heyu

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  Dim sTemp As String
   
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sCommand = cPl.Settings["command"]
  $bMonitor = cPl.Settings["monitor"]
  $bGlobalX10 = cPl.Settings["globalx10"]
  $iType = cPl.Settings["type"]
  $bX10CmdDebug = cPl.Settings["debug"]

  ' Initialize
  IsRunning = True

  If Main.ProgramExist($sCommand) Then
    If $iType = Type_cm11a Then
      Exec [$sCommand, "version"] To sTemp
      sTemp = Replace$(sTemp, "\n", "")
      Main.WriteLog(LogLabel & "Found Heyu executable " & sTemp)
      If $bMonitor Then
        Main.WriteLog(LogLabel & "Heyu monitor enabled.")
        Monitor
      Else
        Main.WriteLog(LogLabel & "Heyu monitor disabled.")
      Endif
    Else If $iType = Type_cma15a Then
      If $bMonitor Then
        Main.WriteLog(LogLabel & "monitor enabled.")
        Monitor
      Else
        Main.WriteLog(LogLabel & "monitor disabled.")
      Endif
    Endif
  Else
    Main.WriteLog(LogLabel & "ERROR: command '" & $sCommand & "' not found, did you install it?")
    IsRunning = False
    Main.WriteLog("[Plugin] X10Cmd interface disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Dim sProcList As String
  Dim aProcList As String[]
  Dim sProc As String

  ' There is a possible the "heyu_relay" is started, we need to kill it first
  If pMonitor.Running Then

    ' Find all child processes of our heyu
    Exec ["ps", "-o", "pid", "--no-headers", "--ppid", pMonitor.Handle] To sProcList

    ' Go through the list and kill -TERM them
    If sProcList Then
      aProcList = Split(sProcList, "\n")
      For Each sProc In aProcList
        If sProc Then Exec ["kill", sProc]
      Next
    Endif

  Endif

  Try pMonitor.Kill
  IsRunning = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command with heyu or other command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sDevice As String, sCmd As String)

  Dim sCommand As String
  Dim aDim As String[]
  Dim iDim As Integer

  sCmd = UCase(sCmd)

  If InStr(sCmd, "ON") Or InStr(sCmd, "OFF") Then
    Select $iType
      Case Type_cm11a
        sCommand = LCase(sCmd) & " " & sDevice
      Case Type_cma15a
        sCommand = LCase(sDevice) & " " & LCase(sCmd)
      Case Type_cm17a
        sCommand = "f" & LCase(sCmd) & " " & sDevice
    End Select
  Else If InStr(sCmd, "DIM ") Then ' DIM 1 - 99
    aDim = Split(sCmd, " ")
    If aDim.Count = 2 Then
      iDim = Val(aDim[1])
      Select $iType
        Case Type_cm11a
          If iDim > 0 Then iDim = Round(0.32 * iDim) ' 32 steps
          sCommand = "preset " & sDevice & " " & iDim
        Case Type_cma15a
          sCommand = LCase(sDevice) & " " & "xDim " & iDim
      End Select
    Else
      Main.WriteDebugLog(LogLabel & "Invalid dim command format '" & sCmd & "'")
      Return
    Endif
  Else If InStr(sCmd, "DIM") Or InStr(sCmd, "BRIGHT") Then
    Select $iType
      Case Type_cm11a
        sCommand = LCase(sCmd) & " " & sDevice & " 2"
      Case Type_cma15a
        sCommand = LCase(sDevice) & " " & LCase(sCmd)
    End Select
  Else If InStr(sCmd, "STOP")
    ' ignore
  Else
    Main.WriteDebugLog(LogLabel & "Unsupported command '" & $sCommand & " " & sCmd & "'")
    Return
  Endif
  QueueCommand(sCommand)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sCmd As String)

  ' add command to queue
  cQueue.Add(sCmd, Rnd)

  ' if interface is not busy process it
  If bX10CmdBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim sCmd As String

  For Each sCmd In cQueue
    RunCommand(sCmd, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunCommand(sCmd As String, sKey As String)

  If $iType = Type_cma15a And $bMonitor = True Then
     If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "Run: " & sCmd)
     Print #pMonitor, "x " & sCmd
  Else  
    If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "Run: " & $sCommand & " " & sCmd)
    Shell $sCommand & " " & sCmd & " 2>&1" For Read As "X10Cmd"
    If bX10CmdBusy = False Then bX10CmdBusy = True
  Endif
  
  ' remove command from queue
    cQueue.Remove(sKey)
    
Catch
  Main.WriteDebugLog(LogLabel & "Error executing: '" & $sCommand & " " & sCmd & "' " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10Cmd_Read()

  Dim sLine As String

  sLine = Read #Last, -256
  sOutput &= sLine

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' command has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10Cmd_Kill()

  If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "Result: " & sOutput)
  sOutput = Null

  bX10CmdBusy = False
  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "Sending next command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start heyu monitor
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Monitor()

  Select $iType
    Case Type_cm11a
      pMonitor = Exec [$sCommand, "monitor"] For Read As "X10CmdMonitor"
    Case Type_cma15a
      pMonitor = Exec [$sCommand] For Read Write As "X10CmdMonitor"
    Case Type_cm17a
      Main.WriteDebugLog(LogLabel & "Monitor not avaliable")
  End Select

Catch
  Main.WriteDebugLog(LogLabel & "Error executing: '" & $sCommand & " monitor' " & Error.Text & " at " & Error.Where)
  IsRunning = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read monitor output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10CmdMonitor_Read()

  Dim sLine As String

  Try sLine = Read #Last, -256
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from monitor output-> " & Error.Text)
  If Len(sLine) > 0 Then
    sMonitorBuffer &= sLine
    
    
    If InStr(sMonitorBuffer, "func") > 0 And $iType = 0 Then  ' heyu
      ParseMonitorMessageHeyu(sMonitorBuffer)
      sMonitorBuffer = Null
    Endif
    
    If InStr(sMonitorBuffer, "PLC-") > 0 And $iType = 1 Then  ' cm15demo
      ParseMonitorMessageCm15demo(sMonitorBuffer)
      sMonitorBuffer = Null
    Endif
    
    
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse monitor output for heyu
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseMonitorMessageHeyu(sMessage As String)

  Dim iDeviceId, iCnt As Integer
  Dim aFirstLine, aSecondLine As String[]
  Dim sAddress, sOrder, sHouseCode As String

  If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "[X10Cmd] Monitor get: " & sMessage)

  ' Message sample :
  ' 1 line : 09/19 18:44:53  rcvi addr unit       4 : hu I4  (_no_alias_)
  ' 2 line : 09/19 18:44:53  rcvi func          Off : hc I

  aFirstLine = Scan(sMessage, "*addr unit* : hu*(*")
  aSecondLine = Scan(sMessage, "*func*: hc*")

  If aFirstLine.Count = 4 And aSecondLine.Count = 3 Then
    sAddress = Trim(aFirstLine[2])

    If Len(sAddress) = 2 Then
      sAddress = Left(sAddress, 1) & "0" & Right(sAddress, 1)
    Endif
    sOrder = Trim(aSecondLine[1])

    If $bGlobalX10 Then
      iDeviceId = Devices.FindAll(sAddress, 9999, "X10")
    Else
      iDeviceId = Devices.Find(Instance, sAddress, Devices.FindInterface("X10Cmd Interface"), "X10")
    Endif

    ' if found then update it's value
    If iDeviceId Then Devices.ValueUpdateExt(iDeviceId, 1, sOrder)
  Else ' support for AllOff
    If aSecondLine.Count = 3 And Trim(aSecondLine[1]) = "AllOff" Then
      sHouseCode = Trim(aSecondLine[2])
      If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "AllOff command detected for HouseCode: " & sHouseCode)
      For iCnt = 1 To 16 Step 1
        sAddress = sHouseCode & Format(iCnt, "0#")
        If $bGlobalX10 Then
          iDeviceId = Devices.FindAll(sAddress, 9999, "X10")
        Else
          iDeviceId = Devices.Find(Instance, sAddress, Devices.FindInterface("X10Cmd Interface"), "X10")
        Endif
        If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "Switching device " & sHouseCode & icnt & " Off")
        If iDeviceId Then Devices.ValueUpdateExt(iDeviceId, 1, "Off")
      Next
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse monitor output for cm15demo
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseMonitorMessageCm15demo(sMessage As String)

  Dim iDeviceId As Integer
  Dim data As String[]
  Dim sAddress, sOrder, sCurrentValue As String

  If $bX10CmdDebug Then Main.WriteDebugLog(LogLabel & "Monitor get: " & sMessage)

  ' Message sample :
  ' date X PLC-R: C-1  Off        ?

  data = Scan(sMessage, "*PLC-R: * * *")
 
  If data.Count = 4
    sAddress = Trim(data[1])
    sAddress = Replace$(sAddress, "-", "")
    If Len(sAddress) = 2 Then
      sAddress = Left(sAddress, 1) & "0" & Right(sAddress, 1)
    Endif
    
    sOrder = Trim(data[2])

    If $bGlobalX10 Then
       iDeviceId = Devices.FindAll(sAddress, 9999, "X10")
    Else
       iDeviceId = Devices.Find(Instance, sAddress, Devices.FindInterface("X10Cmd Interface"), "X10")
    Endif
  
    If iDeviceId > 0 Then ' if found then update it's value
      sCurrentValue = Devices.GetCurrentValueForDevice(iDeviceId, 1)
      If Not (sCurrentValue Like sOrder) Then 
        Devices.ValueUpdateExt(iDeviceId, 1, sOrder)
      Endif
    Endif
  Endif

End
