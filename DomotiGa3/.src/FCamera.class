' Gambas class file

' Description:
' FCameraControl.class
' Support for VISCA, Axis and Foscam/Watchbot PT(Z) camera control, see CVISCA.class for more.

' Development Status:
' GUI design and code finished, needs better error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public bPowerState As Boolean = True
Public bBacklight As Boolean = False

Private rCamera As Result
Private hProcess As Process
Private oObject As Object
Public hFetch As HttpClient

Private hVISCA As Object

Public Sub Form_Close()

  If hProcess Then Print #hProcess, "quit"

End

Public Sub Form_Open()

  If Plugin.IsPluginEnabled("VISCA", 0) Then
    rbPresetRecall.Value = True
    rbPresetSet.Value = False
    rbPresetReset.Value = False
    Try hVISCA = Plugin.GetPluginObject("VISCA", 1).Interface
    hVISCA.AddressSet()
  Else
    DisableControls()
  Endif

  FillCameraCombo()

End

Private Sub DisableControls()

  frameIO.Hide
  ' no connection to camera, or disabled so disable control buttons
  For Each oObject In Me.Children
    oObject.Enabled = False
  Next
  frameStream.Enabled = True
  For Each oObject In frameStream.Children
    oObject.Enabled = True
  Next
  frameCamera.Enabled = True
  For Each oObject In frameCamera.Children
    oObject.Enabled = True
  Next

End

Public Sub cmbCameras_Click()

  Try rCamera = Main.hDB.Exec("SELECT * FROM devices_camera WHERE name = &1", cmbCameras.Text)
  If rCamera.Available Then lblView.Text = rCamera!viewstring

End

Private Sub FillCameraCombo()

  Dim iCount As Integer
  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT * FROM devices_camera WHERE enabled is TRUE")
  If rResult.Available Then
    For iCount = 0 To rResult.Max
      cmbCameras.Add(rResult!name)
      rResult.MoveNext
    Next
  Else
    btnOpen.Enabled = False
  Endif
  cmbCameras_Click()

End

Public Sub btnOpen_Click()

  Dim sCmd, sUrl As String
  Dim aHttp As String[]

  If Not Util.ProgramExist("cvlc") Then
    lblStatus.Text = ("Couldn't find the cvlc command, did you install vlc?")
    Return
  Endif

  If hProcess Then
    Print #hProcess, "quit"
    btnOpen.Text = ("View")
    lblMoviePlayer.Hide
    cmbCameras.Enabled = True
    Return
  Endif
  btnOpen.Text = ("Stop")
  lblStatus.Text = ("Opening stream ...")
  cmbCameras.Enabled = False

  ' enable PTZ functions if needed
  Select Case rCamera!ptztype
    Case "Watchbot API"
      DisableControls()
      frameDirection.Enabled = True
      For Each oObject In frameDirection.Children
        oObject.Enabled = True
      Next
      framePresets.Enabled = True
      For Each oObject In framePresets.Children
        oObject.Enabled = True
      Next
      rbPresetReset.Enabled = False
      frameIO.Enabled = True
      For Each oObject In frameIO.Children
        oObject.Enabled = True
      Next
      frameIO.X = 539
      frameIO.Show
    Case "AXIS API"
      DisableControls()
      frameDirection.Enabled = True
      For Each oObject In frameDirection.Children
        oObject.Enabled = True
      Next
      frameZoom.Enabled = True
      For Each oObject In frameZoom.Children
        oObject.Enabled = True
      Next
      frameBacklight.Enabled = True
      For Each oObject In frameBacklight.Children
        oObject.Enabled = True
      Next
      frameSpeed.Enabled = True
      For Each oObject In frameSpeed.Children
        oObject.Enabled = True
      Next
      slZoom.MaxValue = 9999
      slZoom.Step = 500
      slPan.MaxValue = 180
      slPan.MinValue = -180
      slPan.Step = 20
      slPan.Value = 0
      slTilt.MaxValue = 180
      slTilt.MinValue = -180
      slTilt.Step = 20
      slTilt.Value = 0
      slTilt.Enabled = True
      slPan.Enabled = True
      slPanSpeed.MaxValue = 100
      slPanSpeed.MinValue = 1
      slPanSpeed.Step = 10
      slTiltSpeed.Enabled = False
    Case "Sony VISCA"
      slZoom.MaxValue = 8
      slZoom.Step = 1
      slPan.MaxValue = 18
      slPan.MinValue = 1
      slPan.Step = 1
      slTilt.MaxValue = 14
      slTilt.MinValue = 1
      slTilt.Step = 1
      slTilt.Enabled = True
      slPan.Enabled = True
      btnTele.Text = "Tele"
      btnWide.Text = "Wide"
    Case Else
      DisableControls()
  End Select

  lblMoviePlayer.Show
  lblMoviePlayer.Enabled = False

  Select Case rCamera!type
    Case "Video4Linux"
      sCmd = "cvlc -q --embedded-video -I rc --drawable-xid " & lblMoviePlayer.Handle & " " & rCamera!cmdoptions
      hProcess = Shell sCmd For Read Write As "PlayerProcess"
    Case "Stream MJPEG"
      If Len(rCamera!username) Then
        aHttp = Scan(rCamera!viewstring, "*://*")
        If aHttp.Count = 2 Then
          sUrl = aHttp[0] & "://" & rCamera!username & ":" & rCamera!passwd & "@" & aHttp[1]
        Else
          sUrl = rCamera!viewstring
        Endif
      Else
        sUrl = rCamera!viewstring
      Endif
      sCmd = "cvlc -q --embedded-video -I rc --drawable-xid " & lblMoviePlayer.Handle & " " & rCamera!cmdoptions & " " & sUrl
      hProcess = Shell sCmd For Read Write As "PlayerProcess"
    Case Else
      lblStatus.Text = ("Unknown camera type!")
      btnOpen.Text = ("View")
      cmbCameras.Enabled = True
      Return
  End Select
  Main.WriteDebugLog("[Cameras] " & sCmd)

End

Private Sub PTZControl(sCmd As String) As Boolean

  If rCamera!ptztype = "Sony VISCA" And If Plugin.IsPluginEnabled("VISCA", 0) Then
    Select Case LCase(sCmd)
      Case "up"
        hVISCA.Direction("up", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "down"
        hVISCA.Direction("down", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "left"
        hVISCA.Direction("left", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "right"
        hVISCA.Direction("right", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "upleft"
        hVISCA.Direction("upleft", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "upright"
        hVISCA.Direction("upright", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "downleft"
        hVISCA.Direction("downleft", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "downright"
        hVISCA.Direction("downright", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "home"
        hVISCA.Home()
      Case "tele"
        hVISCA.Zoom("tele", FCamera.slZoom.Value)
      Case "wide"
        hVISCA.Zoom("wide", FCamera.slZoom.Value)
      Case "backlight=off"
        hVISCA.Backlight("off")
      Case "backlight=on"
        hVISCA.Backlight("on")
      Case "power=on"
        hVISCA.Power("on")
      Case "power=off"
        hVISCA.Power("off")
      Case "stop"
        hVISCA.Direction("stop", FCamera.slPanSpeed.Value, FCamera.slTiltSpeed.Value)
      Case "autofocus=on"
        hVISCA.Focus("auto")
      Case "autofocus=off"
        hVISCA.Focus("manual")
      Case "preset=0"
        hVISCA.Memory("0", FCamera.rbPresetRecall.Value, FCamera.rbPresetSet.Value)
      Case "preset=1"
        hVISCA.Memory("1", FCamera.rbPresetRecall.Value, FCamera.rbPresetSet.Value)
      Case "preset=2"
        hVISCA.Memory("2", FCamera.rbPresetRecall.Value, FCamera.rbPresetSet.Value)
      Case "preset=3"
        hVISCA.Memory("3", FCamera.rbPresetRecall.Value, FCamera.rbPresetSet.Value)
      Case "preset=4"
        hVISCA.Memory("4", FCamera.rbPresetRecall.Value, FCamera.rbPresetSet.Value)
      Case "preset=5"
        hVISCA.Memory("5", FCamera.rbPresetRecall.Value, FCamera.rbPresetSet.Value)
    End Select
  Else If rCamera!ptztype = "Watchbot API" Then
    Select Case sCmd
      Case "up"
        FetchPTZUrl("decoder_control.cgi?command=0")
      Case "down"
        FetchPTZUrl("decoder_control.cgi?command=2")
      Case "left"
        FetchPTZUrl("decoder_control.cgi?command=4")
      Case "right"
        FetchPTZUrl("decoder_control.cgi?command=6")
      Case "upleft"
        FetchPTZUrl("decoder_control.cgi?command=90")
      Case "upright"
        FetchPTZUrl("decoder_control.cgi?command=91")
      Case "downleft"
        FetchPTZUrl("decoder_control.cgi?command=92")
      Case "downright"
        FetchPTZUrl("decoder_control.cgi?command=93")
      Case "home"
        FetchPTZUrl("decoder_control.cgi?command=25")
      Case "preset=0"
        If FCamera.rbPresetSet.Value Then
          FetchPTZUrl("decoder_control.cgi?command=30")
        Else
          FetchPTZUrl("decoder_control.cgi?command=31")
        Endif
      Case "preset=1"
        If FCamera.rbPresetSet.Value Then
          FetchPTZUrl("decoder_control.cgi?command=32")
        Else
          FetchPTZUrl("decoder_control.cgi?command=33")
        Endif
      Case "preset=2"
        If FCamera.rbPresetSet.Value Then
          FetchPTZUrl("decoder_control.cgi?command=34")
        Else
          FetchPTZUrl("decoder_control.cgi?command=35")
        Endif
      Case "preset=3"
        If FCamera.rbPresetSet.Value Then
          FetchPTZUrl("decoder_control.cgi?command=36")
        Else
          FetchPTZUrl("decoder_control.cgi?command=37")
        Endif
      Case "preset=4"
        If FCamera.rbPresetSet.Value Then
          FetchPTZUrl("decoder_control.cgi?command=38")
        Else
          FetchPTZUrl("decoder_control.cgi?command=39")
        Endif
      Case "preset=5"
        If FCamera.rbPresetSet.Value Then
          FetchPTZUrl("decoder_control.cgi?command=40")
        Else
          FetchPTZUrl("decoder_control.cgi?command=41")
        Endif
      Case "tele"
        FetchPTZUrl("decoder_control.cgi?command=28")
      Case "wide"
        FetchPTZUrl("decoder_control.cgi?command=26")
      Case "stop"
        FetchPTZUrl("decoder_control.cgi?command=1")
      Case "io1-high"
        FetchPTZUrl("decoder_control.cgi?command=94")
      Case "io1-low"
        FetchPTZUrl("decoder_control.cgi?command=95")
    End Select
  Else If rCamera!ptztype = "AXIS API" Then
    Select Case sCmd
      Case "up"
        FetchPTZUrl("move=up")
      Case "down"
        FetchPTZUrl("move=down")
      Case "left"
        FetchPTZUrl("move=left")
      Case "right"
        FetchPTZUrl("move=right")
      Case "upleft"
        FetchPTZUrl("move=upleft")
      Case "upright"
        FetchPTZUrl("move=upright")
      Case "downleft"
        FetchPTZUrl("move=downleft")
      Case "downright"
        FetchPTZUrl("move=downright")
      Case "home"
        FetchPTZUrl("move=home")
      Case "tele"
        FetchPTZUrl("zoom=9999")
      Case "wide"
        FetchPTZUrl("zoom=1")
      Case "zoom"
        FetchPTZUrl("zoom=" & slZoom.Value)
      Case "backlight=off"
        FetchPTZUrl("backlight=off")
      Case "backlight=on"
        FetchPTZUrl("backlight=on")
      Case "pan"
        FetchPTZUrl("pan=" & slPan.Value)
      Case "tilt"
        FetchPTZUrl("tilt=" & slTilt.Value)
      Case "speed"
        FetchPTZUrl("speed=" & slPanSpeed.Value)
      Case "autofocus=on"
        FetchPTZUrl("autofocus=on")
      Case "autofocus=off"
        FetchPTZUrl("autofocus=off")
      Case "preset=0"
        FetchPTZUrl("gotodevicepreset=0")
      Case "preset=1"
        FetchPTZUrl("gotodevicepreset=1")
      Case "preset=2"
        FetchPTZUrl("gotodevicepreset=2")
      Case "preset=3"
        FetchPTZUrl("gotodevicepreset=3")
      Case "preset=4"
        FetchPTZUrl("gotodevicepreset=4")
      Case "preset=5"
        FetchPTZUrl("gotodevicepreset=5")
    End Select
  Endif

End

Public Sub FetchPTZUrl(sCmd As String) As Boolean

  Dim sUrl As String
  Dim aHttp As String[]

  If Len(rCamera!username) Then
    aHttp = Scan(rCamera!ptzbaseurl, "*://*")
    If aHttp.Count = 2 Then
      sUrl = aHttp[0] & "://" & rCamera!username & ":" & rCamera!passwd & "@" & aHttp[1]
    Else
      sUrl = rCamera!ptzbaseurl
    Endif
  Else
    sUrl = rCamera!ptzbaseurl
  Endif

  hFetch = New HttpClient As "hFetchUrl"
  hFetch.URL = sUrl & sCmd
  hFetch.TimeOut = 5
  ' IF Len(rCamera!username) THEN
  '     hFetch.User = rCamera!username
  '     hFetch.Password = rCamera!passwd
  ' END IF
  hFetch.Async = True
  hFetch.Get()

End

Public Sub hFetchUrl_Finished()

  Select hFetch.Code
    Case 0, 200
      lblStatus.Text = (hFetch.Headers[0])
    Case 401
      lblStatus.Text = ("Error authenticating!")
    Case 404
      lblStatus.Text = ("Error page not found!")
    Case Else
      lblStatus.Text = ("Unknown error occured!")
  End Select

Catch

End

Public Sub PlayerProcess_Read()

  Dim sData As String

  sData = Read #Last, -255

  If InStr(sData, "format detected") Then
    lblStatus.Text = ("Stream format detected ...")
  Else If InStr(sData, "Cache")
    lblStatus.Text = ("Building cache ...")
  Else If InStr(sData, "Connecting")
    lblStatus.Text = ("Connecting ...")
  Endif

End

Public Sub PlayerProcess_Kill()

  Dim iRc As Integer

  iRc = Last.Value
  hProcess = Null
  lblMoviePlayer.Hide
  btnOpen.Text = ("View")
  cmbCameras.Enabled = True
  lblstatus.Text = ("Stopped ...") & IIf(iRc, (" Return code = ") & iRc, "")

End

Public Sub btnBL_Click()

  If bBackLight Then
    PTZControl("backlight=off")
    btnBL.Text = "On"
    bBackLight = False
  Else
    PTZControl("backlight=on")
    btnBL.Text = "Off"
    bBackLight = True
  Endif

End

Public Sub btnWBAuto_Click()

  FCamera.btnWBIndoor.Enabled = True
  FCamera.btnWBOutdoor.Enabled = True
  FCamera.btnWBOnePush.Enabled = True
  FCamera.btnWBTrigger.Enabled = True
  hVISCA.WhiteBalance("auto")
  FCamera.btnWBAuto.Enabled = False

End

Public Sub btnWBIndoor_Click()

  FCamera.btnWBAuto.Enabled = True
  FCamera.btnWBOutdoor.Enabled = True
  FCamera.btnWBOnePush.Enabled = True
  FCamera.btnWBTrigger.Enabled = True
  hVISCA.WhiteBalance("indoor")
  FCamera.btnWBIndoor.Enabled = False

End

Public Sub btnWBOutdoor_Click()

  FCamera.btnWBAuto.Enabled = True
  FCamera.btnWBIndoor.Enabled = True
  FCamera.btnWBOnePush.Enabled = True
  FCamera.btnWBTrigger.Enabled = True
  hVISCA.WhiteBalance("outdoor")
  FCamera.btnWBOutdoor.Enabled = False

End

Public Sub btnWBOnePush_Click()

  FCamera.btnWBAuto.Enabled = True
  FCamera.btnWBIndoor.Enabled = True
  FCamera.btnWBOutdoor.Enabled = True
  FCamera.btnWBTrigger.Enabled = True
  hVISCA.WhiteBalance("onepush")
  FCamera.btnWBOnePush.Enabled = False

End

Public Sub btnWBTrigger_Click()

  FCamera.btnWBAuto.Enabled = True
  FCamera.btnWBIndoor.Enabled = True
  FCamera.btnWBOutdoor.Enabled = True
  FCamera.btnWBTrigger.Enabled = True
  FCamera.btnWBOnePush.Enabled = True
  hVISCA.WhiteBalance("trigger")
  FCamera.btnWBTrigger.Enabled = False

End

Public Sub btnAEAuto_Click()

  hVISCA.AutoExposure("auto")
  btnAEAuto.Enabled = False
  btnAEShutter.Enabled = True
  btnAEBright.Enabled = True
  btnAEManual.Enabled = True
  btnAEIris.Enabled = True
  btnAEGain.Enabled = True
  btnMin.Enabled = False
  btnPlus.Enabled = False
  btnReset.Enabled = False

End

Public Sub btnAEManual_Click()

  hVISCA.AutoExposure("manual")
  btnAEManual.Enabled = False
  btnAEShutter.Enabled = True
  btnAEBright.Enabled = True
  btnAEIris.Enabled = True
  btnAEGain.Enabled = True
  btnMin.Enabled = True
  btnPlus.Enabled = True
  btnReset.Enabled = True

End

Public Sub btnAEShutter_Click()

  hVISCA.AutoExposure("shutter")
  btnAEShutter.Enabled = False
  btnAEManual.Enabled = False
  btnAEBright.Enabled = True
  btnAEIris.Enabled = True
  btnAEGain.Enabled = True
  btnMin.Enabled = True
  btnPlus.Enabled = True
  btnReset.Enabled = True

End

Public Sub btnAEIris_Click()

  hVISCA.AutoExposure("iris")
  btnAEIris.Enabled = False
  btnAEManual.Enabled = False
  btnAEShutter.Enabled = True
  btnAEBright.Enabled = True
  btnAEGain.Enabled = True
  btnMin.Enabled = True
  btnPlus.Enabled = True
  btnReset.Enabled = True

End

Public Sub btnAEBright_Click()

  hVISCA.AutoExposure("bright")
  btnAEBright.Enabled = False
  btnAEManual.Enabled = False
  btnAEShutter.Enabled = True
  btnAEIris.Enabled = True
  btnAEGain.Enabled = True
  btnMin.Enabled = True
  btnPlus.Enabled = True
  btnReset.Enabled = True

End

Public Sub btnAEGain_Click()

  btnAEGain.Enabled = False
  btnAEManual.Enabled = False
  btnAEShutter.Enabled = True
  btnAEIris.Enabled = True
  btnAEBright.Enabled = True
  btnMin.Enabled = True
  btnPlus.Enabled = True
  btnReset.Enabled = True

End

Public Sub btnPower_Click()

  If bPowerState Then
    PTZControl("power=off")
    btnPower.Text = "On"
    bPowerState = False
  Else
    PTZControl("power=on")
    btnPower.Text = "Off"
    bPowerState = True
  Endif

End

Public Sub btnUp_MouseDown()

  PTZControl("up")

End

Public Sub btnDown_MouseDown()

  PTZControl("down")

End

Public Sub btnRight_MouseDown()

  PTZControl("right")

End

Public Sub btnLeft_MouseDown()

  PTZControl("left")

End

Public Sub btnHome_MouseDown()

  PTZControl("home")

End

Public Sub btnUpLeft_MouseDown()

  PTZControl("upleft")

End

Public Sub btnUpRight_MouseDown()

  PTZControl("upright")

End

Public Sub btnDownRight_MouseDown()

  PTZControl("downright")

End

Public Sub btnDownLeft_MouseDown()

  PTZControl("downleft")

End

Public Sub slPan_MouseUp()

  PTZControl("pan")

End

Public Sub slTilt_MouseUp()

  PTZControl("tilt")

End

Public Sub slPanSpeed_MouseUp()

  PTZControl("speed")

End

Public Sub slTiltSpeed_MouseUp()

  PTZControl("speed")

End

Public Sub rbPresetRecall_Click()

  rbPresetRecall.Value = True
  rbPresetSet.Value = False
  rbPresetReset.Value = False

End

Public Sub rbPresetSet_Click()

  rbPresetRecall.Value = False
  rbPresetSet.Value = True
  rbPresetReset.Value = False

End

Public Sub rbPresetReset_Click()

  rbPresetRecall.Value = False
  rbPresetSet.Value = False
  rbPresetReset.Value = True

End

Public Sub btnPreset1_Click()

  PTZControl("preset=0")

End

Public Sub btnPreset2_Click()

  PTZControl("preset=1")

End

Public Sub btnPreset3_Click()

  PTZControl("preset=2")

End

Public Sub btnPreset4_Click()

  PTZControl("preset=3")

End

Public Sub btnPreset5_Click()

  PTZControl("preset=4")

End

Public Sub btnPreset6_Click()

  PTZControl("preset=5")

End

Public Sub btnUp_MouseUp()

  PTZControl("stop")

End

Public Sub btnDown_MouseUp()

  PTZControl("stop")

End

Public Sub btnLeft_MouseUp()

  PTZControl("stop")

End

Public Sub btnRight_MouseUp()

  PTZControl("stop")

End

Public Sub btnUpLeft_MouseUp()

  PTZControl("stop")

End

Public Sub btnUpRight_MouseUp()

  PTZControl("stop")

End

Public Sub btnDownLeft_MouseUp()

  PTZControl("stop")

End

Public Sub btnDownRight_MouseUp()

  PTZControl("stop")

End

Public Sub btnPlus_Click()

  Dim sMode As String

  If btnAEShutter.Enabled = False Then
    sMode = "shutter"
  Else If btnAEIris.Enabled = False Then
    sMode = "iris"
  Else If btnAEBright.Enabled = False Then
    sMode = "bright"
  Else If btnAEGain.Enabled = False Then
    sMode = "gain"
  Endif
  hVISCA.ManualExposure(sMode, "+")

End

Public Sub btnMin_Click()

  Dim sMode As String

  If btnAEShutter.Enabled = False Then
    sMode = "shutter"
  Else If btnAEIris.Enabled = False Then
    sMode = "iris"
  Else If btnAEBright.Enabled = False Then
    sMode = "bright"
  Else If btnAEGain.Enabled = False Then
    sMode = "gain"
  Endif
  hVISCA.ManualExposure(sMode, "-")

End

Public Sub btnReset_Click()

  Dim sMode As String

  If btnAEShutter.Enabled = False Then
    sMode = "shutter"
  Else If btnAEIris.Enabled = False Then
    sMode = "iris"
  Else If btnAEBright.Enabled = False Then
    sMode = "bright"
  Else If btnAEGain.Enabled = False Then
    sMode = "gain"
  Endif
  hVISCA.ManualExposure(sMode, "reset")

End

Public Sub btnFocusAuto_Click()

  btnFocusAuto.Enabled = False
  btnFocusManual.Enabled = True
  btnFocusNear.Enabled = False
  btnFocusFar.Enabled = False
  PTZControl("autofocus=on")

End

Public Sub btnFocusManual_Click()

  btnFocusManual.Enabled = False
  btnFocusAuto.Enabled = True
  btnFocusNear.Enabled = True
  btnFocusFar.Enabled = True
  PTZControl("autofocus=off")

End

Public Sub btnFocusNear_Click()

  btnFocusNear.Enabled = False
  btnFocusManual.Enabled = False
  btnFocusAuto.Enabled = True
  btnFocusFar.Enabled = True
  hVISCA.Focus("near")

End

Public Sub btnFocusFar_Click()

  btnFocusFar.Enabled = False
  btnFocusManual.Enabled = False
  btnFocusNear.Enabled = True
  btnFocusAuto.Enabled = True
  hVISCA.Focus("far")

End

Public Sub btnTele_Click()

  PTZControl("tele")

End

Public Sub btnWide_Click()

  PTZControl("wide")

End

Public Sub slZoom_Change()

  PTZControl("zoom")

End

Public Sub btnTele_MouseUp()

  PTZControl("stop")

End

Public Sub btnWide_MouseUp()

  PTZControl("stop")

End

Public Sub btnEditCameras_Click()

  FSettingsCameras.Show

End

Public Sub rbIOPinOn_Click()

  PTZControl("io1-high")

End

Public Sub rbIOPinOff_Click()

  PTZControl("io1-low")

End
