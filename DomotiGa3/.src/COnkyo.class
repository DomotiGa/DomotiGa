' Gambas class file

' Description:
' COnkyo.class
' Support for Onkyo/Integra receiver control.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Onkyo"
Public PluginFriendlyName As String = "Onkyo/Integra Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Onkyo] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As String
Private $bDebug As Boolean
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String

Public hOnkyo As New Socket
Public hOnkyoSer As New SerialPort

Public sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hOnkyo.Close

  ' get a new one
  hOnkyo = New Socket As "Onkyo"
  hOnkyo.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  ' try to close the connection
  Try hOnkyoSer.Close

  ' get a new one
  hOnkyoSer = New Serialport As "OnkyoSer"
  With hOnkyoSer
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Onkyo_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Onkyo_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hOnkyo.Close
  Try hOnkyoSer.Close

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Onkyo_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendCmd(sCmd As String)

  Dim sStr As String = "ISCP\x00\x00\x00\x10\x00\x00\x00" & Chr(Len(sCmd)) & "\x01\x00\x00\x00!1" & sCmd & "\n"

  ' IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Sending '") & sCmd & ("' to Receiver."))

  If $sInterface = "tcp" Then
    Try Print #hOnkyo, sStr
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the TCP port! -> " & Error.Text)
  Else
    Try Print #hOnkyoSer, sStr
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the serial port! -> " & Error.Text)
  Endif
  If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & sCmd)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' to switch unit with device control
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim aCmd As String[]

  ' ignore sAddress, only fixed unit 1?
  Select Case LCase(sValue)
    Case "on"
      SetCommand("power", "on", sAddress)
    Case "off"
      SetCommand("power", "off", sAddress)
    Case Else
      aCmd = Split(sValue, " ")
      If aCmd.Count = 2 Then
        SetCommand(aCmd[0], aCmd[1], sAddress)
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sValue)
      Endif
      SetCommand(sValue, sAddress)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' to control from json-rpc or music page buttons
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetCommand(sCmd As String, sValue As String, sAddress As String)

  Dim sTmp As String

  ' commands here are for Integra DTR-40.1
  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "power"
      ' 00 - Off, 01 - On
      SendCmd(IIf(sValue == "on", "PWR01", "PWR00"))
    Case "volume"
      Select Case LCase(sValue)
        Case "up"
          SendCmd("MVLUP")
        Case "down"
          SendCmd("MVLDOWN")
        Case "up1"
          SendCmd("MVLUP1")
        Case "down1"
          SendCmd("MVLDOWN1")
        Case Else
          ' 0-100 (0-64 Hex)
          SendCmd("MVL" & Hex(Val(sValue)))
      End Select
    Case "mute"
      ' 00 - Off, 01 - On, TG - Toggle
      Select Case LCase(sValue)
        Case "on"
          SendCmd("AMT01")
        Case "off"
          SendCmd("AMT00")
        Case "toggle"
          SendCmd("AMTTG")
      End Select
    Case "input", "z2input"
      sTmp = IIf(sCmd == "input", "SLI", "SLZ")
      Select Case LCase(sValue)
        Case "vcr", "dvr", "video1"
          SendCmd(sTmp & "00")
        Case "cbl/sat", "video2"
          SendCmd(sTmp & "01")
        Case "game/tv", "game", "video3"
          SendCmd(sTmp & "02")
        Case "aux1", "aux", "video4"
          SendCmd(sTmp & "03")
        Case "aux2", "video5"
          SendCmd(sTmp & "04")
        Case "video6"
          SendCmd(sTmp & "05")
        Case "video7"
          SendCmd(sTmp & "06")
        Case "dvd"
          SendCmd(sTmp & "10")
        Case "tv/tape", "tape", "tape1"
          SendCmd(sTmp & "20")
        Case "tape2"
          SendCmd(sTmp & "21")
        Case "phono"
          SendCmd(sTmp & "22")
        Case "cd"
          SendCmd(sTmp & "23")
        Case "fm"
          SendCmd(sTmp & "24")
        Case "am"
          SendCmd(sTmp & "25")
        Case "tuner"
          SendCmd(sTmp & "26")
        Case "net", "server"
          SendCmd(sTmp & "27")
        Case "inet radio"
          SendCmd(sTmp & "28")
        Case "usb front"
          SendCmd(sTmp & "29")
        Case "usb rear"
          SendCmd(sTmp & "2A")
        Case "port"
          SendCmd(sTmp & "40")
        Case "up"
          SendCmd(sTmp & "UP")
        Case "down"
          SendCmd(sTmp & "DOWN")
        Case "off"
          SendCmd(sTmp & "7F")
      End Select
    Case "cli"
      SendCmd(sValue)
    Case "z2power"
      ' 00 - Off, 01 - On
      SendCmd(IIf(sValue == "on", "ZPW01", "ZPW00"))
    Case "z2mute"
      ' 00 - Off, 01 - On, TG - Toggle
      Select Case LCase(sValue)
        Case "on"
          SendCmd("ZMT01")
        Case "off"
          SendCmd("ZMT00")
        Case "toggle"
          SendCmd("ZMTTG")
      End Select
    Case "z2volume"
      Select Case LCase(sValue)
        Case "up"
          SendCmd("ZVLUP")
        Case "down"
          SendCmd("ZVLDOWN")
        Case "up1"
          SendCmd("ZVLUP1")
        Case "down1"
          SendCmd("ZVLDOWN1")
        Case Else
          ' 0-100 (0-64 Hex)
          SendCmd("ZVL" & Hex(Val(sValue)))
      End Select
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported set command received: " & sCmd & " " & sValue)
  End Select

End

Public Sub GetCommand(sCmd As String, sAddress As String)

  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "power"
      SendCmd("QSTN")
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported get value received: " & sCmd)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Onkyo_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Onkyo_Read()

  Dim sData As String

  Try sData = Read #hOnkyo, 1
  If Error Then
    Main.WriteDebugLog(LogLabel & "Error reading data from the TCP port! -> " & Error.Text)
  Else
    If sData = Chr$(26) Then ' buffer until linefeed then parse
      If Len(sBuffer) > 1 Then ParseLine(sBuffer)
      sBuffer = Null
    Else
      sBuffer &= sData
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub OnkyoSer_Read()

  Dim sData As String

  Try sData = Read #hOnkyoSer, 1
  If Error Then
    Main.WriteDebugLog(LogLabel & "Error reading data from the serial port! -> " & Error.Text)
  Else
    If sData = Chr$(26) Then ' buffer until linefeed then parse
      If Len(sBuffer) > 1 Then ParseLine(sBuffer)
      sBuffer = Null
    Else
      sBuffer &= sData
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sBuf As String)

  Dim sStr, sCat, sItem, sValue As String

  If InStr(sBuf, "ISCP", 1) Then
    sStr = Mid(sBuf, InStr(sBuf, "!") + 2, 5)
    sCat = Left(sStr, 3)
    If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sStr)

    Select Case sCat
      Case "PWR"
        ' main power
        sItem = "Power"
        If sStr = "PWR01" Then sValue = "On"
        If sStr = "PWR00" Then sValue = "Off"
        OnkyoSetValue(sItem, sValue)
    End Select
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub OnkyoSetValue(sItem As String, vValue As Variant)

  Main.SetGlobalVar("Onkyo_" & sItem, vValue)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received Item: " & sItem & " Value: " & vValue)

End

