' Gambas module file

' Description:
' Sounds.module
' Play sound files on events.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Sounds"
Public PluginFriendlyName As String = "Sounds"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Sounds] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $bSoundDebug As Boolean
Private $iVolume As Integer

Private sDefaultSoundDirectory As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance 
  
  ' Copy configuration items locally
 $bEnabled = cPl.Settings["enabled"]
 $bSoundDebug = cPl.Settings["debug"]
 $iVolume = cPl.Settings["volume"]

  ' Initialize 

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()



End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' just a function to list available sounds
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LoadSounds()

  Dim sSound As String
  Dim sSoundFiles As String[]

  sDefaultSoundDirectory = Main.sBaseDir &/ "sounds"

  ' fill array with available sounds
  sSoundFiles = Dir(sDefaultSoundDirectory, "*.wav")

  ' mp3/ogg don't seem to be supported
  'sSoundFiles.Insert(Dir(sDefaultSoundDirectory, "*.mp3"))
  'sSoundFiles.Insert(Dir(sDefaultSoundDirectory, "*.ogg"))

  If Main.bSoundDebug Then
    For Each sSound In sSoundFiles
      Main.WriteDebugLog(LogLabel & "Found " & sSound)
    Next
  Endif

  Main.WriteLog(LogLabel & sSoundFiles.Count & If(sSoundFiles.Count <> 1, " soundfiles", " soundfile") & " found.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' play sound with selected volume
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PlaySnd(sFile As String, Optional iVol As Integer) As Boolean

  Dim iVolume As Float
  Dim sSnd As String
  Dim bReturn As Boolean = False

  ' sound not enabled, return
  If Not Main.bSoundEnabled Then Return True

  sSnd = sDefaultSoundDirectory &/ sFile

  If ivol Then ' custom volume
    iVolume = iVol
  Else ' default volume
    iVolume = Main.iSoundVolume
  Endif

  If Exist(sSnd) Then
    If Not Error Then
      Shell "amixer -q sset Master playback " & iVolume & "%" Wait
      If Not Main.GetGlobalVar("Mute") Then
        Shell "aplay -q " & sSnd
        If Error Then
          Main.WriteDebugLog(LogLabel & "Error playing soundfile " & sSnd)
        Else
          Main.WriteLog(LogLabel & "Playing sound " & sFile & ".")
          If Main.bSoundDebug Then Main.WriteDebugLog(LogLabel & "Playing sound " & sSnd & " at volume " & iVolume)
          bReturn = True
        Endif
      Else
        Main.WriteLog(LogLabel & "[Muted] Playing sound " & sFile & ".")
        bReturn = True
      Endif
    Else
      Main.WriteDebugLog(LogLabel & "ERROR: " & ERROR.text & " " & sSnd)
    Endif
  Else
    Main.WriteDebugLog(LogLabel & "The soundfile " & sSnd & " doesn't exist!")
  Endif

  Return bReturn

End
