' Gambas class file

' Description:
' FDevices.class
' Display all devices.

' Development Status:
' Finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public iCurRow As Integer
Public bAutoRefresh As Boolean

Private bExpand As Boolean
Private bExpandValues As Boolean
Private mDevice As Menu
Private mToggle As Menu
Private iSortColumn As Integer = 2 ' Default on name
Private bSortColumn As Boolean = True

Public Sub Form_Open()

  CreateDeviceMenu()
  GetDeviceList()

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then GetDeviceList()

End

Public Sub GetDeviceList()

  Dim iCount As Integer
  Dim iColumValueNum, iColumPrefix, iColumSuffix As Integer
  Dim iLoop As Integer
  Dim rResult, rResultValuenum As Result
  Dim sSql, sSqlValuenum As String

  Application.Busy = True

  If bExpand Then
    sSql = "SELECT devices.*,locations.name AS 'locationname',plugins.interface AS 'interfacename',devicetypes.name AS 'devicetypename',floors.name AS 'floorplanname' FROM devices LEFT JOIN locations ON locations.id = devices.location LEFT JOIN plugins ON plugins.id = devices.interface LEFT JOIN devicetypes ON devicetypes.id = devices.devicetype_id LEFT JOIN floors ON floors.floor = devices.floorplan"
  Else
    sSql = "SELECT devices.*,locations.name AS 'locationname' FROM devices LEFT JOIN locations ON locations.id = devices.location"
  Endif
  ' toggle enabled/disabled devices
  sSql &= IIf(chkDisabled.Value, " WHERE enabled IS FALSE", " WHERE enabled IS TRUE")
  ' hide hidden devices
  sSql &= IIf(chkHidden.Value, " AND hide IS TRUE ORDER BY name", " AND hide IS FALSE ORDER BY name")

  rResult = Main.hDB.Exec(sSql)
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  Endif

  ' Columns size calculation
  If bExpandValues Then
    sSqlValuenum = "SELECT MAX(valuenum) as valuenumcount FROM device_values"
  Else
    sSqlValuenum = "SELECT ROUND(AVG(valuenum)) as valuenumcount FROM device_values"
  Endif

  rResultValuenum = Main.hDB.Exec(sSqlValuenum)
  If rResultValuenum.Count Then
    Try iColumValueNum = rResultValuenum!valuenumcount
    If Error Then iColumValueNum = 1
  Endif

  iColumPrefix = 3
  ' suffix depend on expand or not
  iColumSuffix = IIf(bExpand, 16, 2)

  With tbvDevices
    .Font.Size = "9"
    .Columns.Count = iColumPrefix + iColumValueNum + iColumSuffix
    .Rows.Count = rResult.Count
    ' Prefix
    .Columns[0].Title = ("Id")
    .Columns[0].Width = 30
    .Columns[1].Title = ""
    .Columns[1].Width = 20
    .Columns[2].Title = ("Device")
    .Columns[2].Width = .Font.TextWidth(.Columns[2].Title) + .Font.Size

    For iLoop = 0 To (iColumValueNum - 1)
      .Columns[iColumPrefix + iLoop].Title = ("Value") & " " & (iLoop + 1)
      .Columns[iColumPrefix + iLoop].Width = .Font.TextWidth(.Columns[iColumPrefix + iLoop].Title) + .Font.Size
    Next

    ' Suffix
    .Columns[iColumPrefix + iColumValueNum].Title = ("Location")
    .Columns[iColumPrefix + iColumValueNum].Width = 100
    .Columns[iColumPrefix + iColumValueNum + 1].Title = ("Last Seen")
    .Columns[iColumPrefix + iColumValueNum + 1].Width = 140
    If bExpand Then
      ' SuffixExpand
      .Columns[iColumPrefix + iColumValueNum + 2].Title = ("DeviceType")
      .Columns[iColumPrefix + iColumValueNum + 2].Width = 138
      .Columns[iColumPrefix + iColumValueNum + 3].Title = ("Address")
      .Columns[iColumPrefix + iColumValueNum + 3].Width = 98
      .Columns[iColumPrefix + iColumValueNum + 4].Title = ("Interface")
      .Columns[iColumPrefix + iColumValueNum + 4].Width = 125
      .Columns[iColumPrefix + iColumValueNum + 5].Title = ("First Seen")
      .Columns[iColumPrefix + iColumValueNum + 5].Width = 140
      .Columns[iColumPrefix + iColumValueNum + 6].Title = ("Last Changed")
      .Columns[iColumPrefix + iColumValueNum + 6].Width = 140
      .Columns[iColumPrefix + iColumValueNum + 7].Title = ("Enabled")
      .Columns[iColumPrefix + iColumValueNum + 7].Width = 58
      .Columns[iColumPrefix + iColumValueNum + 8].Title = ("Hide")
      .Columns[iColumPrefix + iColumValueNum + 8].Width = 55
      .Columns[iColumPrefix + iColumValueNum + 9].Title = ("On Icon")
      .Columns[iColumPrefix + iColumValueNum + 9].Width = 75
      .Columns[iColumPrefix + iColumValueNum + 10].Title = ("Off Icon")
      .Columns[iColumPrefix + iColumValueNum + 10].Width = 75
      .Columns[iColumPrefix + iColumValueNum + 11].Title = ("Battery")
      .Columns[iColumPrefix + iColumValueNum + 11].Width = 55
      .Columns[iColumPrefix + iColumValueNum + 12].Title = ("Groups")
      .Columns[iColumPrefix + iColumValueNum + 12].Width = 204
      .Columns[iColumPrefix + iColumValueNum + 13].Title = ("X")
      .Columns[iColumPrefix + iColumValueNum + 13].Width = 25
      .Columns[iColumPrefix + iColumValueNum + 14].Title = ("Y")
      .Columns[iColumPrefix + iColumValueNum + 14].Width = 25
      .Columns[iColumPrefix + iColumValueNum + 15].Title = ("Floorplan")
      .Columns[iColumPrefix + iColumValueNum + 15].Width = 94
    Endif
  End With

  For iCount = 0 To rResult.Max
    tbvDevices[iCount, 0].Text = rResult!id
    tbvDevices[iCount, 1].Picture = Picture[Main.sBaseDir &/ "icons" &/ Devices.GetStatusIcon(Devices.GetValueForDevice(rResult!id, 1), rResult!onicon, rResult!officon, rResult!dimicon)]
    tbvDevices[iCount, 2].Text = rResult!name

    ' Dynamically re-size name
    If (tbvDevices.Font.TextWidth(tbvDevices[iCount, 2].Text) + tbvDevices.Font.Size) > tbvDevices.Columns[2].Width Then
      tbvDevices.Columns[2].Width = tbvDevices.Font.TextWidth(tbvDevices[iCount, 2].Text) + tbvDevices.Font.Size
      If tbvDevices.Columns[2].Width > 205 Then tbvDevices.Columns[2].Width = 205
    Endif

    For iLoop = 0 To iColumValueNum - 1 Step 1
      tbvDevices[iCount, iColumPrefix + iLoop].Text = Devices.GetCurrentValueForDevice(rResult!id, iLoop + 1) & " " & Devices.GetCurrentUnitsForDevice(rResult!id, iLoop + 1)

      ' Dynamically re-size value 1-3
      If (tbvDevices.Font.TextWidth(tbvDevices[iCount, iColumPrefix + iLoop].Text) + tbvDevices.Font.Size) > tbvDevices.Columns[iColumPrefix + iLoop].Width Then
        tbvDevices.Columns[iColumPrefix + iLoop].Width = tbvDevices.Font.TextWidth(tbvDevices[iCount, iColumPrefix + iLoop].Text) + tbvDevices.Font.Size
        If tbvDevices.Columns[iColumPrefix + iLoop].Width > 125 Then tbvDevices.Columns[iColumPrefix + iLoop].Width = 125
      Endif
    Next

    Try tbvDevices[iCount, iColumPrefix + iColumValueNum].Text = rResult!locationname
    If rResult!lastseen Then
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 1].Text = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    Else
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 1].Text = ("Never")
    Endif

    If bExpand Then
      Try tbvDevices[iCount, iColumPrefix + iColumValueNum + 2].Text = rResult!devicetypename
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 3].Text = rResult!address
      Try tbvDevices[iCount, iColumPrefix + iColumValueNum + 4].Text = rResult!interfacename
      If rResult!firstseen Then tbvDevices[iCount, iColumPrefix + iColumValueNum + 5].Text = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      If rResult!lastchanged Then tbvDevices[iCount, iColumPrefix + iColumValueNum + 6].Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 7].Text = Main.DisplayBool(rResult!enabled)
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 8].Text = Main.DisplayBool(rResult!hide)
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 9].Text = rResult!onicon
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 10].Text = rResult!officon
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 11].Text = rResult!batterystatus
      Try tbvDevices[iCount, iColumPrefix + iColumValueNum + 12].Text = LTrim$(Replace$(rResult!groups, "|", " "))
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 13].Text = rResult!x
      tbvDevices[iCount, iColumPrefix + iColumValueNum + 14].Text = rResult!y
      Try tbvDevices[iCount, iColumPrefix + iColumValueNum + 15].Text = rResult!floorplanname
    Endif

    rResult.MoveNext
  Next

  ' If the sort order isn't name, resort now 
  If iSortColumn <> 2 Or If Not bSortColumn Then
    FMain.SortTableView(FDevices.tbvDevices, iSortColumn, bSortColumn)
  Endif

Finally
  Application.Busy = False

End

Public Sub tbvDevices_ColumnClick(Column As Integer)

  If iSortColumn = Column Then
    bSortColumn = Not bSortColumn
  Else
    bSortColumn = True
  Endif

  iSortColumn = Column
  FMain.SortTableView(FDevices.tbvDevices, Column, bSortColumn)

End

Public Sub Form_Resize()

  tbvDevices.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Public Sub tbvDevices_DblClick()

  ' only continue if Row <> -1, which normally happens when DblClick on column and gambas3
  ' with gambas2 the first DblClick is unpredictable 
  If tbvDevices.Row = -1 Then Return

  ' open device editor window
  iCurRow = tbvDevices.Row
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceEditor.Show()
  Else
    Message(("Sorry, editing devices is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnRefresh_Click()

  GetDeviceList()

End

Public Sub tbtnExpand_Click()

  If tbtnExpand.Value = True Then
    bExpand = True
    tbtnExpand.Text = ("Shrink")
  Else
    bExpand = False
    tbtnExpand.Text = ("Expand")
  Endif
  GetDeviceList()

End

Public Sub tbtnExpandValues_Click()

  If tbtnExpandValues.Value = True Then
    bExpandValues = True
    tbtnExpandValues.Text = ("Shrink Values")
  Else
    bExpandValues = False
    tbtnExpandValues.Text = ("Expand Values")
  Endif
  GetDeviceList()

End

Public Sub chkDisabled_Click()

  GetDeviceList()

End

Public Sub chkHidden_Click()

  GetDeviceList()

End

Public Sub CreateDeviceMenu()

  Dim mDelete, mHide, mEdit As Menu

  mDevice = New Menu(FDevices)

  mEdit = New Menu(mDevice)
  mEdit.Text = "Edit"
  mEdit.Action = "edit"

  mDelete = New Menu(mDevice)
  mDelete.Text = "Delete"
  mDelete.Action = "delete"

  mHide = New Menu(mDevice)
  mHide.Text = "Hide"
  mHide.Action = "hide"

  mToggle = New Menu(mDevice)
  mtoggle.Text = "Toggle device state"
  mtoggle.Action = "toggle"
  mtoggle.Hide

  mDevice.Hide

End

Public Sub tbvDevices_Menu()

  Dim rResult As Result
  Dim iId As Integer

  If tbvDevices.Row = -1 Then Return
  iId = tbvDevices[tbvDevices.Row, 0].Text
  rResult = Main.hDB.Exec("SELECT switchable FROM devices WHERE id = &1", iId)
  If rResult!switchable Then
    mToggle.Show
  Else
    mToggle.Hide
  Endif
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then mDevice.Popup()

End

Public Sub Action_Activate(key As String) As Boolean

  Dim iId As Integer
  Dim sToggle As String

  If tbvDevices.Row = -1 Then Return
  iCurRow = tbvDevices.Row

  iId = Devices.FindIdForDevice(tbvDevices[iCurRow, 2].Text)
  If iId Then
    Select Case key
      Case "hide"
        Devices.HideDevice(iId)
        GetDeviceList()
      Case "edit"
        FDeviceEditor.Show()
      Case "delete"
        Select Message.Question(("Are you sure that you want to delete device '" & tbvDevices[iCurRow, 2].Text & "'?"), ("Yes"), ("No"))
          Case "1"
            Devices.DeleteDevice(iId)
            GetDeviceList()
        End Select
      Case "toggle"
        sToggle = Devices.ToggleDeviceValue(iId)
        If sToggle Then
          If Main.bServer Then
            Try Devices.SetDevice(iId, sToggle) 
          Else
            Client.DeviceSetDevice(iId, sToggle)
          Endif

          Wait 1
          GetDeviceList()
        Endif
    End Select
  Endif

End

Public Sub tbvDevices_MouseDown()

  tbvDevices.Row = tbvDevices.RowAt(Mouse.y)

End
