' Gambas class file

' Description:
' FDevices.class
' Display all devices.

' Development Status:
' Finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public iCurRow As Integer
Public bAutoRefresh As Boolean
Private bExpand As Boolean
Private mDevice As Menu
Private mToggle As Menu

Public Sub Form_Open()

  CreateDeviceMenu()
  GetDeviceList()

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then GetDeviceList()

End

Public Sub GetDeviceList()

  Dim iCount As Integer
  Dim rResult As Result
  Dim sSql As String

  Application.Busy = True

  If bExpand Then
    sSql = "SELECT devices.*,locations.name AS 'locationname',interfaces.name AS 'interfacename',devicetypes.name AS 'devicetypename',floors.name AS 'floorplanname' FROM devices LEFT JOIN locations ON locations.id = devices.location LEFT JOIN interfaces ON interfaces.id = devices.interface LEFT JOIN devicetypes ON devicetypes.id = devices.module LEFT JOIN floors ON floors.floor = devices.floorplan"
  Else
    sSql = "SELECT devices.*,locations.name AS 'locationname' FROM devices LEFT JOIN locations ON locations.id = devices.location"
  Endif
  ' toggle enabled/disabled devices
  sSql &= IIf(chkDisabled.Value, " WHERE enabled IS FALSE", " WHERE enabled IS TRUE")
  ' hide hidden devices
  sSql &= IIf(chkHidden.Value, " AND hide IS TRUE ORDER BY name", " AND hide IS FALSE ORDER BY name")

  rResult = Main.hDB.Exec(sSql)
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  Endif

  With tbvDevices
    .Font.Size = "9"
    .Columns.Count = IIf(bExpand, 19, 5)
    .Rows.Count = rResult.Count
    .Columns[0].Width = 30
    .Columns[0].Title = ("Id")
    .Columns[1].Width = 20
    .Columns[2].Title = ("Device")
    .Columns[2].Width = 205
    .Columns[3].Title = ("Location")
    .Columns[3].Width = 100
    .Columns[4].Title = ("Last Seen")
    If bExpand Then
      .Columns[5].Title = ("DeviceType")
      .Columns[5].Width = 138
      .Columns[6].Title = ("Address")
      .Columns[6].Width = 98
      .Columns[7].Title = ("Interface")
      .Columns[7].Width = 125
      .Columns[8].Title = ("First Seen")
      .Columns[8].Width = 140
      .Columns[9].Title = ("Last Changed")
      .Columns[9].Width = 140
      .Columns[10].Title = ("Enabled")
      .Columns[10].Width = 58
      .Columns[11].Title = ("Hide")
      .Columns[11].Width = 55
      .Columns[12].Title = ("On Icon")
      .Columns[12].Width = 75
      .Columns[13].Title = ("Off Icon")
      .Columns[13].Width = 75
      .Columns[14].Title = ("Battery")
      .Columns[14].Width = 55
      .Columns[15].Title = ("Groups")
      .Columns[15].Width = 204
      .Columns[16].Title = ("X")
      .Columns[16].Width = 25
      .Columns[17].Title = ("Y")
      .Columns[17].Width = 25
      .Columns[18].Title = ("Floorplan")
      .Columns[18].Width = 94
    Endif
  End With

  For iCount = 0 To rResult.Max
    tbvDevices[iCount, 0].Text = rResult!id
    tbvDevices[iCount, 1].Picture = Picture[FMain.GetStatusIcon(Devices.GetValueForDevice(rResult!id, 1), rResult!onicon, rResult!officon, rResult!dimicon)]

    tbvDevices[iCount, 2].Text = rResult!name
    
    Try tbvDevices[iCount, 3].Text = rResult!locationname
    If rResult!lastseen Then
      tbvDevices[iCount, 4].Text = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    Else
      tbvDevices[iCount, 4].Text = ("Never")
    Endif
    If bExpand Then
      Try tbvDevices[iCount, 5].Text = rResult!devicetypename
      tbvDevices[iCount, 6].Text = rResult!address
      Try tbvDevices[iCount, 7].Text = rResult!interfacename
      If rResult!firstseen Then tbvDevices[iCount, 8].Text = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      If rResult!lastchanged Then tbvDevices[iCount, 9].Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      tbvDevices[iCount, 10].Text = Main.DisplayBool(rResult!enabled)
      tbvDevices[iCount, 11].Text = Main.DisplayBool(rResult!hide)
      tbvDevices[iCount, 12].Text = rResult!onicon
      tbvDevices[iCount, 13].Text = rResult!officon
      tbvDevices[iCount, 14].Text = rResult!batterystatus
      Try tbvDevices[iCount, 15].Text = LTrim$(Replace$(rResult!groups, "|", " "))
      tbvDevices[iCount, 16].Text = rResult!x
      tbvDevices[iCount, 17].Text = rResult!y
      Try tbvDevices[iCount, 18].Text = rResult!floorplanname
    Endif
    rResult.MoveNext
  Next

Finally
  Application.Busy = False

End

Public Sub tbvDevices_ColumnClick(Column As Integer)

  FMain.SortTableView(FDevices.tbvDevices, Column, True)

End

Public Sub Form_Resize()

  tbvDevices.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Public Sub tbvDevices_DblClick()

  ' only continue if Row <> -1, which normally happens when DblClick on column and gambas3
  ' with gambas2 the first DblClick is unpredictable 
  If tbvDevices.Row = -1 Then Return

  ' open device editor window
  iCurRow = tbvDevices.Row
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceEditor.Show()
  Else
    Message(("Sorry, editing devices is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnRefresh_Click()

  GetDeviceList()

End

Public Sub tbtnExpand_Click()

  If tbtnExpand.Value = True Then
    bExpand = True
    tbtnExpand.Text = ("Shrink")
  Else
    bExpand = False
    tbtnExpand.Text = ("Expand")
  Endif
  GetDeviceList()

End

Public Sub chkDisabled_Click()

  GetDeviceList()

End

Public Sub chkHidden_Click()

  GetDeviceList()

End

Public Sub CreateDeviceMenu()

  Dim mDelete, mHide, mEdit As Menu

  mDevice = New Menu(FDevices)

  mEdit = New Menu(mDevice)
  mEdit.Text = "Edit"
  mEdit.Action = "edit"

  mDelete = New Menu(mDevice)
  mDelete.Text = "Delete"
  mDelete.Action = "delete"

  mHide = New Menu(mDevice)
  mHide.Text = "Hide"
  mHide.Action = "hide"

  mToggle = New Menu(mDevice)
  mtoggle.Text = "Toggle device state"
  mtoggle.Action = "toggle"
  mtoggle.Hide

  mDevice.Hide

End

Public Sub tbvDevices_Menu()

  Dim rResult As Result
  Dim iId As Integer 
  
  If tbvDevices.Row = -1 Then Return
  iId = tbvDevices[tbvDevices.Row, 0].Text
  rResult = Main.hDB.Exec("SELECT switchable FROM devices WHERE id = &1", iId)
  If rResult!switchable Then 
    mToggle.Show
  Else 
    mToggle.Hide
  Endif 
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then mDevice.Popup()

End

Public Sub Action_Activate(key As String) As Boolean

  Dim iId As Integer
  Dim sToggle As String

  If tbvDevices.Row = -1 Then Return
  iCurRow = tbvDevices.Row

  iId = Devices.FindIdForDevice(tbvDevices[iCurRow, 2].Text)
  If iId Then
    Select Case key
      Case "hide"
        Devices.HideDevice(iId)
        GetDeviceList()
      Case "edit"
        FDeviceEditor.Show()
      Case "delete"
        Select Message.Question(("Are you sure that you want to delete device '" & tbvDevices[iCurRow, 2].Text & "'?"), ("Yes"), ("No"))
          Case "1"
            Devices.DeleteDevice(iId)
            GetDeviceList()
        End Select
      Case "toggle"
        sToggle = Devices.ToggleDeviceValue(iId)
        If sToggle Then
          If Main.bServer Then
            Try Devices.SetDevice(iId, sToggle) 
          Else
            XMLClient.DeviceSetDevice(iId, sToggle)
          Endif

          Wait 1
          GetDeviceList()
        Endif
    End Select
  Endif
End

Public Sub tbvDevices_MouseDown()

  tbvDevices.Row = tbvDevices.RowAt(Mouse.y)
  
End
