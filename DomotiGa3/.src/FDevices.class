' Gambas class file

' Description:
' FDevices.class
' Display all devices.

' Development Status:
' Finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public iCurRow As Integer
Public bAutoRefresh As Boolean

Private bExpand As Boolean
Private bExpandValues As Boolean
Private mDevice As Menu
Private mToggle As Menu
Private iSortColumn As Integer = 2 ' Default on name
Private bSortColumn As Boolean = True
Private bFormOpen As Boolean
Private bRefreshOnly As Boolean = False

Public Sub Form_Open()

  bFormOpen = False

  CreateDeviceMenu()
  GetDeviceList()

  bFormOpen = True

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then GetDeviceList()

End

Public Sub GetDeviceList()

  Dim iCount, iColumValueNum, iColumPrefix, iColumSuffix, iLoop As Integer
  Dim rResult, rResultValuenum As Result
  Dim sSql, sSqlValuenum As String

  Application.Busy = True

  If bExpand Then
    sSql = "SELECT devices.*,locations.name AS 'locationname',plugins.interface AS 'interfacename',devicetypes.name AS 'devicetypename',floors.name AS 'floorplanname' FROM devices LEFT JOIN locations ON locations.id = devices.location_id LEFT JOIN plugins ON plugins.id = devices.interface_id LEFT JOIN devicetypes ON devicetypes.id = devices.devicetype_id LEFT JOIN floors ON floors.floor = devices.floorplan_id"
  Else
    sSql = "SELECT devices.*,locations.name AS 'locationname' FROM devices LEFT JOIN locations ON locations.id = devices.location_id"
  Endif

  Select cmbDeviceView.Index
    Case 0 ' Standard
      sSql &= " WHERE enabled IS TRUE AND hide IS FALSE ORDER BY name"
    Case 1 ' All
      sSql &= " ORDER BY name"
    Case 2 ' Only Enabled
      sSql &= " WHERE enabled IS TRUE ORDER BY name"
    Case 3 ' Only Disabled
      sSql &= " WHERE enabled IS FALSE ORDER BY name"
    Case 4 ' Only Hidden
      sSql &= " WHERE hide IS TRUE ORDER BY name"
    Case 5 ' Only Disabled/Hidden
      sSql &= " WHERE enabled IS FALSE AND hide IS TRUE ORDER BY name"
  End Select

  rResult = Main.hDB.Exec(sSql)
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  Endif

  ' columns size calculation
  If bExpandValues Then
    sSqlValuenum = "SELECT MAX(valuenum) as valuenumcount FROM device_values"
  Else
    sSqlValuenum = "SELECT ROUND(AVG(valuenum)) as valuenumcount FROM device_values"
  Endif

  rResultValuenum = Main.hDB.Exec(sSqlValuenum)
  If rResultValuenum.Count Then
    Try iColumValueNum = rResultValuenum!valuenumcount + 2
    If Error Then iColumValueNum = 1
  Endif

  iColumPrefix = 3

  ' suffix depend on expand or not
  iColumSuffix = IIf(bExpand, 18, 3)

  With gvDevices
    .Font.Size = "9"
    .Columns.Count = iColumPrefix + iColumValueNum + iColumSuffix
    .Rows.Count = rResult.Count

    ' Prefix
    .Columns[0].Title = ("Id")
    .Columns[1].Title = ""
    .Columns[2].Title = ("Device")

    ' Only set width on form open, otherwise leave it
    If bFormOpen = False Then
      .Columns[0].Width = 30
      .Columns[1].Width = 20
      .Columns[2].Width = .Font.TextWidth(.Columns[2].Title) + .Font.Size
    Endif

    For iLoop = 0 To (iColumValueNum - 1)
      .Columns[iColumPrefix + iLoop].Title = ("Value") & " " & (iLoop + 1)
      If bFormOpen = False Or bRefreshOnly = False Then
        .Columns[iColumPrefix + iLoop].Width = .Font.TextWidth(.Columns[iColumPrefix + iLoop].Title) + .Font.Size
      Endif
    Next

    ' Suffix
    .Columns[iColumPrefix + iColumValueNum].Title = ("Location")
    If bFormOpen = False Or bRefreshOnly = False Then .Columns[iColumPrefix + iColumValueNum].Width = 100
    .Columns[iColumPrefix + iColumValueNum + 1].Title = ("Last Seen")
    If bFormOpen = False Or bRefreshOnly = False Then .Columns[iColumPrefix + iColumValueNum + 1].Width = 140
    .Columns[iColumPrefix + iColumValueNum + 2].Title = ("Description")

    If bExpand Then
      ' SuffixExpand
      .Columns[iColumPrefix + iColumValueNum + 3].Title = ("DeviceType")
      .Columns[iColumPrefix + iColumValueNum + 3].Width = 138
      .Columns[iColumPrefix + iColumValueNum + 4].Title = ("Address")
      .Columns[iColumPrefix + iColumValueNum + 4].Width = 98
      .Columns[iColumPrefix + iColumValueNum + 5].Title = ("Interface")
      .Columns[iColumPrefix + iColumValueNum + 5].Width = 125
      .Columns[iColumPrefix + iColumValueNum + 6].Title = ("#")
      .Columns[iColumPrefix + iColumValueNum + 6].Width = 15
      .Columns[iColumPrefix + iColumValueNum + 7].Title = ("First Seen")
      .Columns[iColumPrefix + iColumValueNum + 7].Width = 140
      .Columns[iColumPrefix + iColumValueNum + 8].Title = ("Last Changed")
      .Columns[iColumPrefix + iColumValueNum + 8].Width = 140
      .Columns[iColumPrefix + iColumValueNum + 9].Title = ("Enabled")
      .Columns[iColumPrefix + iColumValueNum + 9].Width = 58
      .Columns[iColumPrefix + iColumValueNum + 10].Title = ("Hide")
      .Columns[iColumPrefix + iColumValueNum + 10].Width = 55
      .Columns[iColumPrefix + iColumValueNum + 11].Title = ("On Icon")
      .Columns[iColumPrefix + iColumValueNum + 11].Width = 75
      .Columns[iColumPrefix + iColumValueNum + 12].Title = ("Off Icon")
      .Columns[iColumPrefix + iColumValueNum + 12].Width = 75
      .Columns[iColumPrefix + iColumValueNum + 13].Title = ("Battery")
      .Columns[iColumPrefix + iColumValueNum + 13].Width = 55
      .Columns[iColumPrefix + iColumValueNum + 14].Title = ("Groups")
      .Columns[iColumPrefix + iColumValueNum + 14].Width = 204
      .Columns[iColumPrefix + iColumValueNum + 15].Title = ("X")
      .Columns[iColumPrefix + iColumValueNum + 15].Width = 25
      .Columns[iColumPrefix + iColumValueNum + 16].Title = ("Y")
      .Columns[iColumPrefix + iColumValueNum + 16].Width = 25
      .Columns[iColumPrefix + iColumValueNum + 17].Title = ("Floorplan")
      .Columns[iColumPrefix + iColumValueNum + 17].Width = 94
    Endif
  End With

  For iCount = 0 To rResult.Max
    gvDevices[iCount, 0].Text = rResult!id
    gvDevices[iCount, 1].Picture = Picture[Main.sBaseDir &/ "icons" &/ Devices.GetStatusIcon(Devices.GetValueForDevice(rResult!id, 1), rResult!onicon, rResult!officon, rResult!dimicon)]
    gvDevices[iCount, 2].Text = rResult!name

    ' Dynamically re-size name if form hasn't be opened before
    If bFormOpen = False Then
      If (gvDevices.Font.TextWidth(gvDevices[iCount, 2].Text) + gvDevices.Font.Size) > gvDevices.Columns[2].Width Then
        gvDevices.Columns[2].Width = gvDevices.Font.TextWidth(gvDevices[iCount, 2].Text) + gvDevices.Font.Size
        If gvDevices.Columns[2].Width > 205 Then gvDevices.Columns[2].Width = 205
      Endif
    Endif

    For iLoop = 0 To iColumValueNum - 1 Step 1
      gvDevices[iCount, iColumPrefix + iLoop].Text = Devices.GetCurrentValueForDevice(rResult!id, iLoop + 1) & " " & Devices.GetCurrentUnitsForDevice(rResult!id, iLoop + 1)

      ' Dynamically re-size value 1-3, only on form open or none-refresh like expand
      If bFormOpen = False Or bRefreshOnly = False Then
        If (gvDevices.Font.TextWidth(gvDevices[iCount, iColumPrefix + iLoop].Text) + gvDevices.Font.Size) > gvDevices.Columns[iColumPrefix + iLoop].Width Then
          gvDevices.Columns[iColumPrefix + iLoop].Width = gvDevices.Font.TextWidth(gvDevices[iCount, iColumPrefix + iLoop].Text) + gvDevices.Font.Size
          If gvDevices.Columns[iColumPrefix + iLoop].Width > 125 Then gvDevices.Columns[iColumPrefix + iLoop].Width = 125
        Endif
      Endif
    Next

    Try gvDevices[iCount, iColumPrefix + iColumValueNum].Text = rResult!locationname
    If rResult!lastseen Then
      gvDevices[iCount, iColumPrefix + iColumValueNum + 1].Text = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
    Else
      gvDevices[iCount, iColumPrefix + iColumValueNum + 1].Text = ("Never")
    Endif

    gvDevices[iCount, iColumPrefix + iColumValueNum + 2].Text = rResult!comments

    If bExpand Then
      Try gvDevices[iCount, iColumPrefix + iColumValueNum + 3].Text = rResult!devicetypename
      gvDevices[iCount, iColumPrefix + iColumValueNum + 4].Text = rResult!address
      Try gvDevices[iCount, iColumPrefix + iColumValueNum + 5].Text = rResult!interfacename
      Try gvDevices[iCount, iColumPrefix + iColumValueNum + 6].Text = rResult!instance_id
      If rResult!firstseen Then gvDevices[iCount, iColumPrefix + iColumValueNum + 7].Text = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      If rResult!lastchanged Then gvDevices[iCount, iColumPrefix + iColumValueNum + 8].Text = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      gvDevices[iCount, iColumPrefix + iColumValueNum + 9].Text = Main.DisplayBool(rResult!enabled)
      gvDevices[iCount, iColumPrefix + iColumValueNum + 10].Text = Main.DisplayBool(rResult!hide)
      gvDevices[iCount, iColumPrefix + iColumValueNum + 11].Text = rResult!onicon
      gvDevices[iCount, iColumPrefix + iColumValueNum + 12].Text = rResult!officon
      gvDevices[iCount, iColumPrefix + iColumValueNum + 13].Text = rResult!batterystatus
      Try gvDevices[iCount, iColumPrefix + iColumValueNum + 14].Text = LTrim$(Replace$(rResult!groups, "|", " "))
      gvDevices[iCount, iColumPrefix + iColumValueNum + 15].Text = rResult!x
      gvDevices[iCount, iColumPrefix + iColumValueNum + 16].Text = rResult!y
      Try gvDevices[iCount, iColumPrefix + iColumValueNum + 17].Text = rResult!floorplanname
    Endif

    rResult.MoveNext
  Next

  ' If the sort order isn't name, resort now 
  If iSortColumn <> 2 Or If Not bSortColumn Then
    FMain.SortGridView(FDevices.gvDevices, iSortColumn, bSortColumn)
  Endif

Finally
  Application.Busy = False

End

Public Sub gvDevices_ColumnClick(Column As Integer)

  If iSortColumn = Column Then
    bSortColumn = Not bSortColumn
  Else
    bSortColumn = True
  Endif

  iSortColumn = Column
  FMain.SortGridView(FDevices.gvDevices, Column, bSortColumn)

End

Public Sub Form_Resize()

  gvDevices.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  HBox1.Width = Me.ClientWidth - 15

End

Public Sub gvDevices_DblClick()

  ' don't continue if dblclicked on header
  If gvDevices.Row = -1 Then Return

  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    FDeviceEditor.Run(gvDevices[FDevices.gvDevices.Row, 0].Text)
  Else
    Message(("Sorry, editing devices is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub btnRefresh_Click()

  bRefreshOnly = True

  GetDeviceList()

  bRefreshOnly = False

End

Public Sub tbtnExpand_Click()

  If tbtnExpand.Value = True Then
    bExpand = True
    tbtnExpand.Text = ("Shrink")
  Else
    bExpand = False
    tbtnExpand.Text = ("Expand")
  Endif
  GetDeviceList()

End

Public Sub tbtnExpandValues_Click()

  If tbtnExpandValues.Value = True Then
    bExpandValues = True
    tbtnExpandValues.Text = ("Shrink Values")
  Else
    bExpandValues = False
    tbtnExpandValues.Text = ("Expand Values")
  Endif
  GetDeviceList()

End

Public Sub cmbDeviceView_Click()

  GetDeviceList()

End

Public Sub CreateDeviceMenu()

  Dim mDelete, mHide, mEdit As Menu

  mDevice = New Menu(FDevices)

  mEdit = New Menu(mDevice)
  mEdit.Text = "Edit"
  mEdit.Action = "edit"

  mDelete = New Menu(mDevice)
  mDelete.Text = "Delete"
  mDelete.Action = "delete"

  mHide = New Menu(mDevice)
  mHide.Text = "Hide"
  mHide.Action = "hide"

  mHide = New Menu(mDevice)
  mHide.Text = "UnHide"
  mHide.Action = "unhide"

  mToggle = New Menu(mDevice)
  mtoggle.Text = "Toggle state"
  mtoggle.Action = "toggle"
  mtoggle.Hide

  mDevice.Hide

End

Public Sub gvDevices_Menu()

  Dim rResult As Result
  Dim iId As Integer

  If gvDevices.Row = -1 Then Return
  iId = gvDevices[gvDevices.Row, 0].Text
  rResult = Main.hDB.Exec("SELECT switchable FROM devices WHERE id = &1", iId)
  If rResult!switchable Then
    mToggle.Show
  Else
    mToggle.Hide
  Endif
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then mDevice.Popup()

End

Public Sub Action_Activate(sKey As String) As Boolean

  Dim iId, iSelect As Integer
  Dim sToggle, sDevices As String

  If gvDevices.Row = -1 Then Return
  iCurRow = gvDevices.Row

  ' one row selected
  If gvDevices.Rows.Selection.Count = 1 Then
    iId = gvDevices[iCurRow, 0].Text
    If iId Then
      Select Case sKey
        Case "hide"
          Devices.HideDevice(iId)
          GetDeviceList()
        Case "unhide"
          Devices.UnHideDevice(iId)
          GetDeviceList()
        Case "edit"
          FDeviceEditor.Run(iId)
        Case "delete"
          Select Message.Question(("Are you sure that you want to delete device '" & gvDevices[iCurRow, 2].Text & "'?"), ("Yes"), ("No"))
            Case "1"
              Devices.DeleteDevice(iId)
              GetDeviceList()
          End Select
        Case "toggle"
          sToggle = Devices.ToggleDeviceValue(iId)
          If sToggle Then
            If Main.bServer Then
              Try Devices.SetDevice(iId, sToggle)
            Else
              Client.DeviceSetDevice(iId, sToggle)
            Endif

            Wait 1
            GetDeviceList()
          Endif
      End Select
    Endif
  ' more than one row selected
  Else If gvDevices.Rows.Selection.Count > 1 Then

    Select Case sKey
      Case "hide"
        For Each iSelect In gvDevices.Rows.Selection
          iId = gvDevices[iSelect, 0].Text
          If iId Then Devices.HideDevice(iId)
        Next
        GetDeviceList()
      Case "unhide"
        For Each iSelect In gvDevices.Rows.Selection
          iId = gvDevices[iSelect, 0].Text
          If iId Then Devices.UnHideDevice(iId)
        Next
        GetDeviceList()
      Case "delete"
        For Each iSelect In gvDevices.Rows.Selection
          If iSelect < gvDevices.Rows.Count Then
            sDevices &= "'" & gvDevices[iSelect, 2].Text & "'\n"
          Endif
        Next
        Select Message.Question(("Are you sure that you want to delete all these devices?\n" & sDevices), ("Yes"), ("No"))
          Case "1"
            For Each iSelect In gvDevices.Rows.Selection
              If iSelect < gvDevices.Rows.Count Then
                iId = gvDevices[iSelect, 0].Text
                Devices.DeleteDevice(iId)
              Endif
            Next
            GetDeviceList()
        End Select
    End Select

  Endif

End

Public Sub gvDevices_MouseDown()

  gvDevices.Row = gvDevices.RowAt(Mouse.y)

End
