' Gambas class file

' Description:
' FDeviceEditorValue.class
' Support for creating and edit all device values parameters.

' Development Status:
' Starting ...

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public rResult As Result
Public bAddDeviceValue As Boolean
Private sRRDValueType As String
Private sValueDS As String
Private bDeletedRRD As Boolean

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)
  LoadDevice()
  FillLog()

End

Private Sub FillLog()

  If Not bAddDeviceValue Then
    DataSourceLog.Filter = "device_id = " & FDeviceValues.tbvDeviceValues[FDeviceValues.iCurRow, 0].Text & " AND valuenum = " & FDeviceValues.tbvDeviceValues[FDeviceValues.iCurRow, 2].Text
  Else
    DataSourceLog.Filter = "device_id = -1"
  Endif

  With DataBrowserLog.View
    .Columns[0].Text = ("Changed")
    .Columns[0].Width = 170
    .Columns[1].Text = ("Value")
    .Columns[1].Width = 60
  End With

End

Public Sub LoadDevice()

  Dim cDeviceType As New Collection
  Dim sDeviceType As String

  
  If Not bAddDeviceValue Then
    ' get selected device values
    rResult = Devices.GetDevicesAndValues(["device_id": FDeviceValues.tbvDeviceValues[FDeviceValues.iCurRow, 0].Text, "value_valuenum": FDeviceValues.tbvDeviceValues[FDeviceValues.iCurRow, 2].Text])
    If rResult.Count >= 1 Then
      tbDeviceId.Text = rResult!device_id
      tbValuenum.Text = rResult!device_value_valuenum
      tbName.Text = rResult!device_name
      FDeviceValueEditor.Title = "Edit Device(" & tbName.Text & ") Value: " & tbValuenum.Text
      
      Try tbLastSeen.Text = Replace$(Str$(Format(rResult!device_value_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Try tbFirstSeen.Text = Replace$(Str$(Format(rResult!device_value_firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Try tbLastChanged.Text = Replace$(Str$(Format(rResult!device_value_lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      
      cmbUnits.Text = rResult!device_value_units
      tbValue.Text = rResult!device_value_value
      tbCorrection.Text = rResult!device_value_correction
      
      FillCorrectionFields()

      Try chkLog.Value = rResult!device_value_log
      Try chkLogDisplay.Value = rResult!device_value_logdisplay
      Try chkLogSpeak.Value = rResult!device_value_logspeak

      ' rrdtool graph stuff
      Try chkRRD.Value = rResult!device_value_rrd
      chkRRD_Click()
      Try chkGraph.Value = rResult!device_value_graph
      tbValueDS.Text = rResult!device_value_valuerrddsname
      cmbValueType.Text = rResult!device_value_valuerrdtype
      sRRDValueType = rResult!device_value_valuerrdtype
      sValueDS = rResult!device_value_valuerrddsname
    Else
      Message(("Couldn't load device value record!"))
      Me.Close
    Endif
  Endif

End

Public Sub FillCorrectionFields()

  If Not bAddDeviceValue Then
    tbResult.Text = Devices.CorrectValue(rResult!device_value_value, tbCorrection.Text, rResult!device_id)
  Else
     Message("Correction will execute only if device is saved")
  Endif


End


Public Sub tbName_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbInterface_Click()

  btnSave.Enabled = True

End

Public Sub cmbHouseCode_Click()

  btnSave.Enabled = True

End

Public Sub spDeviceCode_Click()

  btnSave.Enabled = True

End

Public Sub tbOtherAddress_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbLocation_Click()

  btnSave.Enabled = True

End

Public Sub tbLabel_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel2_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel3_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel4_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbValue_KeyPress()

  btnSave.Enabled = True

End

Public Sub btnCancel_Click()

  bAddDeviceValue = False
  Me.Close

End


Public Sub btnDeleteDevice_Click()
  ' TODO: Migtrate to devicevalues
  Select Message.Question(("Are you sure that you want to delete this device value?"), ("Yes"), ("No"))
    Case 1
      
      Me.Close
      FDeviceValues.GetDeviceList()
  End Select

End


Public Sub btnNewDevice_Click()

  Dim iId As Integer

  Main.hDB.Begin()
  rResult = Main.hDB.Create("device_values")
  rResult!label = cmbUnits.Text
  rResult!correction = tbCorrection.Text
  rResult!log = chkLog.Value
  rResult!logdisplay = chkLogDisplay.Value
  rResult!logspeak = chkLogSpeak.Value
  rResult!valuerrddsname = LCase(tbValueDS.Text)
  rResult!valuerrdtype = cmbValueType.Text
  rResult!rrd = chkRRD.Value
  rResult!graph = chkGraph.Value
  rResult.Update()
  Main.hDB.Commit()

  FDevices.GetDeviceList()
  If chkRRD.Value Then
    rResult = Main.hDB.Exec("SELECT MAX(id) AS lastid, deviceid FROM device_values")
    iId = rResult!deviceid
    If Main.bServer Then
      RRDTool.CreateRRD(iId)
    Else
      XMLClient.CreateRRDs(iId)
    Endif
  Endif
  If FControl.Visible Then FControl.ReloadPage()
  bAddDeviceValue = False

  Me.Close

End

Public Sub btnSave_Click()
 
   Dim rResultUpdate As Result
   Dim sSql As String

  If Main.bRRDToolEnabled = False And If chkRRD.Value = True Then
    Message(("You also need to enable the RRDTool module!"))
  Endif

  If bAddDeviceValue Then
    btnNewDevice_Click()
    Return
  Endif
  
  ' check if one or more datasource names are specified if RRD is enabled
  If chkRRD.Value Then
    If Not tbValueDS.Text Then
      tabDevice.Index = 2
      Balloon(("Please define Source name!"), Frame8)
      Return
    Endif
  Endif

  If Not bDeletedRRD Then
    ' check for changed RRD datasource types
    If (Len(sRRDValueType) And sRRDValueType <> cmbValueType.Text) Or (Len(tbValueDS.Text) And sValueDS <> tbValueDS.Text) Then
      tabDevice.Index = 2
      Select Message.Question(("Because you change the Value RRD DS type or name,\nthe RRD database has to be deleted."), ("Delete"), ("Cancel"), ("Ignore"))
        Case 1
          btnDeleteRRD_Click()
        Case 2
          Return
        Case 3
      End Select
    Endif
  Endif
  ' check for valid RRD datasource names
  If Len(tbValueDS.Text) And If Len(CheckValidDSName(tbValueDS.Text)) Then
  'If InStr(tbValueDS.Text, " ") Or If InStr(tbValueDS.Text, "/") Then
    tabDevice.Index = 2
    Balloon.Warning("A ds-name must be 1 to 19 characters long using only the characters [a-zA-Z0-9_].", tbValueDS)
    Return
  Endif
  
  sSql = "UPDATE device_values SET value = &1, correction = &2, units = &3, log = &4, logdisplay = &5, logspeak = &6, rrd = &7, "
  sSql &= "graph = &8, valuerrddsname = &9, valuerrdtype = &{10} "
  sSql &= "WHERE deviceid = &{11} AND valuenum = &{12}"

  rResultUpdate = Main.hDB.Exec(sSql, tbValue.Text, tbCorrection.Text, cmbUnits.Text, chkLog.Value, chkLogDisplay.Value, chkLogSpeak.Value, chkRRD.Value, chkGraph.Value, LCase(tbValueDS.Text), cmbValueType.Text, rResult!device_id, rResult!device_value_valuenum)

  FDevices.GetDeviceList()
  If chkRRD.Value Then
    If Main.bServer Then
      RRDTool.CreateRRD(rResult!device_id)
    Else
      XMLClient.CreateRRDs(rResult!device_id)
    Endif
  Endif
  If FControl.Visible Then FControl.ReloadPage()
  bAddDeviceValue = False
  Me.Close

End

Private Sub CheckValidDSName(sText As String) As String

  Dim iCnt, iCheck As Integer
  Dim sCheck As String

  For iCnt = 1 To Len(sText)
    sCheck = Mid(sText, iCnt, 1)
    iCheck = Asc(sCheck)
    If iCheck > 47 And If iCheck < 58 Then
      Continue
    Else If iCheck > 64 And If iCheck < 91 Then
      Continue
    Else If iCheck > 96 And If iCheck < 123 Then
      Continue
    Else If iCheck = 95 Then
      Continue
    Else
      Return sCheck
    Endif
  Next

End

Public Sub chkHide_Click()

  btnSave.Enabled = True

End

Public Sub chkLog_Click()

  btnSave.Enabled = True

End

Public Sub chkGraph_Click()

  btnSave.Enabled = True

End

Public Sub tbValueDS_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbValueType_Click()

  btnSave.Enabled = True

End

Public Sub chkLogSpeak_Click()

  btnSave.Enabled = True

End

Public Sub chkLogDisplay_Click()

  btnSave.Enabled = True

End

Public Sub cmbUnits_Click()

  btnSave.Enabled = True

End

Public Sub btnDeleteRRD_Click()

  RRDTool.DeleteRRD(rResult!device_id)
  bDeletedRRD = True

End

Public Sub chkExtended_Click()

  btnSave.Enabled = True

End

Public Sub Corr_Change()

  FillCorrectionFields()

End

Public Sub chkRRD_Click()

  chkGraph.Enabled = chkRRD.Value

End

Public Sub btnDeleteLog_Click()

  Select Message.Question(("Are you sure that you want to delete all logged values for this device?"), ("Yes"), ("No"))
    Case 1
      Devices.EraseLog(rResult!device_id)
      DataSourceLog.Refresh
      DataBrowserLog.Refresh
  End Select

End
