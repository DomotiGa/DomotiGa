' Gambas class file

' Description:
' FDeviceEditorValue.class
' Support for creating and edit all device values parameters.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public rResult As Result
Private sRRDValueType As String
Private sValueDS As String
Private bDeletedRRD As Boolean
Private $iDeviceId As Integer
Private $iValueNum As Integer

Public Sub Edit(iDeviceId As Integer, iValueNum As Integer)

  $iDeviceId = iDeviceId
  $iValueNum = iValueNum
  Me.Show

End

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)
  LoadDevice()
  FillLog()

End

Private Sub FillLog()

  If $iValueNum Then DataSourceLog.Filter = "device_id = " & $iDeviceId & " AND valuenum = " & $iValueNum
  With DataBrowserLog.View
    .Columns[0].Text = ("Changed")
    .Columns[0].Width = 170
    .Columns[1].Text = ("Value")
    .Columns[1].Width = 60
  End With

End

Public Sub LoadDevice()

  If $iValueNum >= 1 Then
    rResult = Devices.GetDevicesAndValues(["device_id": $iDeviceId, "value_valuenum": $iValueNum])

    If rResult And If rResult.Available Then
      tbDeviceId.Text = $iDeviceId
      vbValueNum.Text = $iValueNum
      vbValueNum.ReadOnly = True
      tbName.Text = rResult!device_name
      Me.Title = "Edit Device: " & tbName.Text & ", Value: " & vbValueNum.Text

      Try tbLastSeen.Text = Replace$(Str$(Format(rResult!device_value_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Try tbLastChanged.Text = Replace$(Str$(Format(rResult!device_value_lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")

      cmbUnits.Text = rResult!device_value_units
      tbValue.Text = rResult!device_value_value
      tbCorrection.Text = rResult!device_value_correction

      FillCorrectionFields()

      Try chkLog.Value = rResult!device_value_log
      Try chkLogDisplay.Value = rResult!device_value_logdisplay
      Try chkLogSpeak.Value = rResult!device_value_logspeak

      Try tbDescription.Text = rResult!device_value_description

      ' control settings
      Try chkControllable.Value = rResult!device_value_control
      Try chkFeedback.Value = rResult!device_value_feedback

      ' rrdtool graph stuff
      Try chkRRD.Value = rResult!device_value_rrd
      chkRRD_Click()
      Try chkGraph.Value = rResult!device_value_graph
      tbValueDS.Text = rResult!device_value_valuerrddsname
      cmbValueType.Text = rResult!device_value_valuerrdtype
      sRRDValueType = rResult!device_value_valuerrdtype
      sValueDS = rResult!device_value_valuerrddsname
    Else
      Message("Error occurred loading device value record!")
      Me.Close
    Endif
  Else
    rResult = Devices.GetDevicesAndValues(["device_id": $iDeviceId, "inc_device_values": False])
    If rResult And If rResult.Available Then
      tbDeviceId.Text = rResult!device_id
      tbName.Text = rResult!device_name
    Endif
    vbValueNum.ReadOnly = False
    vbValueNum.Text = 1
    Me.Title = "Edit Device: " & tbName.Text & ", Adding a Value"
  Endif

End

Public Sub FillCorrectionFields()

  tbResult.Text = Devices.CorrectValue(rResult!device_value_value, tbCorrection.Text, rResult!device_id)

End

Public Sub btnDeleteDevice_Click()

  Select Message.Question(("Are you sure that you want to delete this device value?"), ("Yes"), ("No"))
    Case 1
      Devices.DeleteDeviceValue($iDeviceId, $iValueNum)
      Me.Close
      FDeviceValues.GetDeviceValueList()
  End Select

End

Public Sub btnNewValue_Click()

  Dim rValue As Result

  ' check for valid valuenum
  If Not Len(vbValueNum.Text) Then
    Balloon.Warning("Please specify device value number.", vbValueNum)
    Return
  Else
    rValue = Devices.GetDevicesAndValues(["device_id": $iDeviceId, "value_valuenum": vbValueNum.Text])
    If rValue.Count >= 1 Then
      Balloon(("This valuenum already exists for this device!"), vbValueNum)
      Return
    Endif
  Endif

  ' create new device value
  Main.hDB.Begin()
  rResult = Main.hDB.Create("device_values")
  rResult!device_id = $iDeviceId
  rResult!valuenum = vbValueNum.Text
  rResult!value = tbValue.Text
  rResult!correction = tbCorrection.Text
  rResult!units = cmbUnits.Text
  rResult!log = chkLog.Value
  rResult!logdisplay = chkLogDisplay.Value
  rResult!logspeak = chkLogSpeak.Value
  rResult!rrd = chkRRD.Value
  rResult!graph = chkGraph.Value
  rResult!control = chkControllable.Value
  rResult!feedback = chkFeedback.Value
  rResult!valuerrddsname = LCase(tbValueDS.Text)
  rResult!valuerrdtype = cmbValueType.Text
  rResult!description = tbDescription.Text
  rResult.Update()
  Main.hDB.Commit()

  ' create RRDs if needed
  If chkRRD.Value Then CreateRRDs($iDeviceId)

  RefreshStuff()
  Me.Close

End

Private Sub RefreshStuff()

  ' update views
  If FDevices.Visible Then FDevices.GetDeviceList()
  If FControl.Visible Then FControl.ReloadPage()
  If FDeviceValues.Visible Then FDeviceValues.GetDeviceValueList()
  If FDeviceEditor.Visible Then FDeviceEditor.GetValueList()

End

Private Sub CreateRRDs(iId As Integer)

  If Main.bServer Then
    RRDTool.CreateRRD(iId)
  Else
    Client.CreateRRDs(iId)
  Endif

End

Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim sSql As String

  ' Check if we got a valid device id
  If Not $iDeviceId Then
    Message(("No valid device id supplied!"))
    Return
  Endif

  If Main.bRRDToolEnabled = False And If chkRRD.Value = True Then
    Message(("You also need to enable the RRDTool module!"))
  Endif

  ' check if one or more datasource names are specified if RRD is enabled
  If chkRRD.Value Then
    If Not tbValueDS.Text Then
      tabPanelDeviceValue.Index = 2
      Balloon(("Please define Source name!"), Frame8)
      Return
    Endif
  Endif

  If Not bDeletedRRD Then
    ' check for changed RRD datasource types
    If (Len(sRRDValueType) And sRRDValueType <> cmbValueType.Text) Or (Len(tbValueDS.Text) And sValueDS <> tbValueDS.Text) Then
      tabPanelDeviceValue.Index = 2
      Select Message.Question(("Because you change the Value RRD DS type or name,\nthe RRD database has to be deleted."), ("Delete"), ("Cancel"), ("Ignore"))
        Case 1
          btnDeleteRRD_Click()
        Case 2
          Return
        Case 3
      End Select
    Endif
  Endif

  ' check for valid RRD datasource names
  If chkRRD.Value And If Not CheckValidDSName(tbValueDS.Text) Then
    tabPanelDeviceValue.Index = 2
    Balloon.Warning("A ds-name must be 1 to 19 characters long using only the characters [a-zA-Z0-9_].", tbValueDS)
    Return
  Endif

  If $iValueNum = -1 Then
    btnNewValue_Click()
    Return
  Endif

  ' update value
  sSql = "UPDATE device_values SET value = &1, correction = &2, units = &3, log = &4, logdisplay = &5, logspeak = &6, rrd = &7, "
  sSql &= "graph = &8, valuerrddsname = &9, valuerrdtype = &{10}, control = &{11}, feedback = &{12}, description = &{13} WHERE device_id = &{14} And valuenum = &{15}"

  rResultUpdate = Main.hDB.Exec(sSql, tbValue.Text, tbCorrection.Text, cmbUnits.Text, chkLog.Value, chkLogDisplay.Value, chkLogSpeak.Value, chkRRD.Value, chkGraph.Value, LCase(tbValueDS.Text), cmbValueType.Text, chkControllable.Value, chkFeedback.Value, tbDescription.Text, $iDeviceId, rResult!device_value_valuenum)

  ' create RRDs if needed
  If chkRRD.Value Then CreateRRDs($iDeviceId)

  RefreshStuff()
  Me.Close

End

Private Sub CheckValidDSName(sText As String) As Boolean

  ' A ds-name must be 1 to 19 characters long in the characters [a-zA-Z0-9_]
  If Len(sText) < 1 Or If Len(sText) > 19 Then
    Return False
  Endif

  If Regexp.Match(sText, "^[a-zA-Z0-9_]*$") Then
    Return True
  Else
    Return False
  Endif

End

Public Sub btnDeleteRRD_Click()

  If Main.bServer Then
    RRDTool.DeleteRRD(rResult!device_id)
  Else
    Client.DeleteRRD(rResult!device_id)
  Endif
  bDeletedRRD = True

End

Public Sub btnDeleteLogValue_Click()

  Select Message.Question(("Are you sure that you want to delete the selected value and for this device?"), ("Yes"), ("No"))
    Case 1
      Devices.EraseLog(rResult!device_id, $iValueNum)
      DataSourceLog.Refresh
      DataBrowserLog.Refresh
  End Select

End

Public Sub btnDeleteLog_Click()

  Select Message.Question(("Are you sure that you want to delete all logged values for this device?"), ("Yes"), ("No"))
    Case 1
      Devices.EraseLog(rResult!device_id)
      DataSourceLog.Refresh
      DataBrowserLog.Refresh
  End Select

End

Public Sub tbCorrection_Change()

  FillCorrectionFields()

End

Public Sub chkControllable_Click()

  btnSave.Enabled = True

End

Public Sub chkFeedback_Click()

  btnSave.Enabled = True

End

Public Sub tbName_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbInterface_Click()

  btnSave.Enabled = True

End

Public Sub cmbHouseCode_Click()

  btnSave.Enabled = True

End

Public Sub spDeviceCode_Click()

  btnSave.Enabled = True

End

Public Sub tbOtherAddress_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbLocation_Click()

  btnSave.Enabled = True

End

Public Sub tbLabel_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel2_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel3_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbLabel4_KeyPress()

  btnSave.Enabled = True

End

Public Sub tbValue_KeyPress()

  btnSave.Enabled = True

End

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub chkHide_Click()

  btnSave.Enabled = True

End

Public Sub chkLog_Click()

  btnSave.Enabled = True

End

Public Sub chkGraph_Click()

  btnSave.Enabled = True

End

Public Sub tbValueDS_KeyPress()

  btnSave.Enabled = True

End

Public Sub cmbValueType_Click()

  btnSave.Enabled = True

End

Public Sub chkLogSpeak_Click()

  btnSave.Enabled = True

End

Public Sub chkLogDisplay_Click()

  btnSave.Enabled = True

End

Public Sub cmbUnits_Click()

  btnSave.Enabled = True

End

Public Sub chkExtended_Click()

  btnSave.Enabled = True

End

Public Sub chkRRD_Click()

  chkGraph.Enabled = chkRRD.Value

End

Public Sub vbValueNum_KeyPress()

  btnSave.Enabled = True

End
