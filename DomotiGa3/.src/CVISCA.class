' Gambas class file

' Description:
' CVISCA.class
' Support for Sony VISCA protocol to control PTZ camera's

' Development Status:
' Working, a few bugs to fix.

' Links:
' http://www.vision.auc.dk/~tbm/Sony/EVID30.pdf
' http://animatlab.lip6.fr/~gouricho/SonyPTZCamEVID31/evidapplication.html
' http://www.j3soft.net/webcam/evi-d30.htm
' http://www.j3soft.net/webcam/evi-d31.htm
' http://f1chf.free.fr/SONY/

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "VISCA"
Public PluginFriendlyName As String = "Sony VISCA"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[VISCA] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $bDebug As Boolean
Private $bCamNum As Byte

Public hVISCA As New SerialPort

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $bDebug = cPl.Settings["debug"]
  $bCamNum = &H80 + Hex(cPl.Settings["cameraaddress"])
 
  ' Connect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  ' try to close the port
  Try hVISCA.Close

  ' get a new one
  hVISCA = New Serialport As "VISCA"
  With hVISCA
    .PortName = $sSerPort
    .Speed = 9600
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hVISCA.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the camera
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SendCommand(aCommand As Byte[])

  If $bDebug Then Main.WriteDebugLog("> " & Util.ByteToHex(aCommand))
  Try aCommand.Write(hVISCA)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data back from camera
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub VISCA_Read()

  Dim sData As Byte

  Try sData = Read #hVISCA As Byte
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from the serial port! ->" & ERROR.Text)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & Hex$(sData, 2))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send address set command to camera
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub AddressSet()

  Dim b As Byte[] = [&H88, &H30, &H01, &HFF]

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send clear command to camera
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IfClear()

  Dim b As Byte[] = [&H88, &H01, &H00, &H01, &HFF]

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' switch camera on and off (power save mode)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Power(sMode As String)

  Dim b As Byte[] = [CByte($bCamNum), &H1, &H04, &H00, IIf(sMode = "on", &H02, &H03), &HFF]

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change white balance setting
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WhiteBalance(sMode As String)

  Dim b As New Byte[6]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H35

  Select Case LCase(sMode)
    Case "auto"
      b[4] = &H0
    Case "indoor"
      b[4] = &H1
    Case "outdoor"
      b[4] = &H2
    Case "onepush"
      b[4] = &H3
    Case "trigger"
      b[4] = &H4
  End Select

  b[5] = &HFF
  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control autoexposure mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub AutoExposure(sMode As String)

  Dim b As New Byte[6]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H39

  Select Case LCase(sMode)
    Case "auto"
      b[4] = &H0
    Case "manual"
      b[4] = &H3
    Case "shutter"
      b[4] = &HA
    Case "iris"
      b[4] = &HB
    Case "bright"
      b[4] = &HD
  End Select

  b[5] = &HFF
  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control exposure modes (bright, shutter, iris and gain)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ManualExposure(sMode As String, sDo As String)

  Dim b As New Byte[7]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H0

  Select Case LCase(sMode)
    Case "bright"
      b[4] = &HD
    Case "shutter"
      b[4] = &HA
    Case "iris"
      b[4] = &HB
    Case "gain"
      b[4] = &HC
  End Select

  If sDo = "-" Then
    b[5] = &H2
  Else If sDo = "+" Then
    b[5] = &H3
  Else
    b[5] = &H0 ' reset
  Endif

  b[6] = &HFF
  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' switch backlight compensation on/off
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BackLight(sMode As String)

  Dim b As Byte[] = [CByte($bCamNum), &H01, &H04, &H33, IIf(sMode = "on", &H02, &H03), &HFF]

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tiltdrive
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Direction(sMode As String, iPanSpeed As Integer, iTiltSpeed As Integer)

  Dim b As New Byte[9]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H6
  b[3] = &H1
  b[4] = Format(Val("&H" & Hex(iPanSpeed)))
  b[5] = Format(Val("&H" & Hex(iTiltSpeed)))

  Select Case LCase(sMode)
    Case "up"
      b[6] = &H3
      b[7] = &H1
    Case "down"
      b[6] = &H3
      b[7] = &H2
    Case "left"
      b[6] = &H1
      b[7] = &H3
    Case "right"
      b[6] = &H2
      b[7] = &H3
    Case "upleft"
      b[6] = &H1
      b[7] = &H1
    Case "downleft"
      b[6] = &H1
      b[7] = &H2
    Case "upright"
      b[6] = &H2
      b[7] = &H1
    Case "downright"
      b[6] = &H2
      b[7] = &H2
    Case "stop"
      b[6] = &H3
      b[7] = &H3
  End Select

  b[8] = &HFF
  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stop whatever you are doing
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopCommand()

  Dim b As New Byte[9]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H6
  b[3] = &H1
  b[4] = &H10
  b[5] = &H10
  b[6] = &H3
  b[7] = &H3
  b[8] = &HFF

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' go home
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Home()

  Dim b As Byte[] = [CByte($bCamNum), &H01, &H06, &H04, &HFF]

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' memory reset, set and recall
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Memory(sPreset As String, bRecall As Boolean, bRecallSet As Boolean)

  Dim b As New Byte[7]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H4
  b[3] = &H3F

  If bRecall = True Then
    b[4] = &H2 ' recall
  Else If BRecallSet = True Then
    b[4] = &H1 ' set
  Else
    b[4] = &H0 ' reset
  Endif

  b[5] = sPreset
  b[6] = &HFF
  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' power inquiry
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PowerInq()

  Dim b As Byte[] = [CByte($bCamNum), &H09, &H04, &H00, &HFF]

  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control focus modes (stop, near, far, auto and manual)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Focus(sMode As String)

  Dim b As New Byte[6]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H4

  Select Case LCase(sMode)
    Case "stop"
      b[3] = &H8
      b[4] = &H0
    Case "far"
      b[3] = &H8
      b[4] = &H2
    Case "near"
      b[3] = &H8
      b[4] = &H3
    Case "auto"
      b[4] = &H38
      b[4] = &H2
    Case "manual"
      b[4] = &H38
      b[5] = &H3
  End Select

  b[5] = &HFF
  SendCommand(b)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control zoom (stop, direct, tele, wide, tele(var) and wide(var)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Zoom(sMode As String, iValue As Integer)

  Dim b As New Byte[6]

  b[0] = $bCamNum
  b[1] = &H1
  b[2] = &H4

  Select Case LCase(sMode)
    Case "stop"
      b[3] = &H7
      b[4] = &H0
    Case "tele"
      b[3] = &H7
      If iValue > 1 Then
        b[4] = &H2 + Hex(iValue)
      Else If iValue > 7 Then
        b[4] = &H2 + Hex(7)
      Else
        b[4] = &H2
      Endif
    Case "wide"
      b[3] = &H7
      If iValue > 1 Then
        b[4] = &H3 + Hex(iValue)
      Else If iValue > 7 Then
        b[4] = &H2 + Hex(7)
      Else
        b[4] = &H3
      Endif
      b[4] = &H3
  End Select

  b[5] = &HFF
  SendCommand(b)

End

