' Gambas class file

' Description:
' CIViewer.class
' Native support for CommandFusion's iViewer protocol.

' Development Status:
' Finished

' Links:
' http://www.commandfusion.com
' http://commandfusion.googlecode.com/svn/trunk/dotNet_control/iViewerControl

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "IViewer"
Public PluginFriendlyName As String = "CF iViewer"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[IViewer] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sPort As String
Private $bDebug As Boolean
Private $sPassword As String

Public hIViewer As ServerSocket

Private oClients As New Object[]
Private sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sPort = cPl.Settings["tcpport"]
  $sPassword = cPl.Settings["password"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("IViewer")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start our tcp server
Public Function Connect() As Boolean

  hIViewer = New ServerSocket As "IViewer"
  hIViewer.Type = Net.Internet
  hIViewer.Port = $sPort
  hIViewer.Listen(0)

  If hIViewer.Status = Net.Active Then
    ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " Server listening on Port " & $sPort)
    IsRunning = True
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $sPort)
    IsRunning = False
    ErrorText = "Net Not Active"
    Return False
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $sPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

' shutdown our tcp server
Public Sub Disconnect() As Boolean

  hIViewer.Close()

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub IViewer_Connection(sRemoteHostIP As String)

  Dim hSocket As Socket

  If hIViewer.Status <= Net.Active Then Return
  hSocket = hIViewer.Accept()
  oClients.Add(hSocket)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Got connect from client with IP " & sRemoteHostIP)

End

Public Sub IViewer_Error()

  Main.WriteLog(LogLabel & "ERROR: Unable to bind socket.")

End

Public Sub Socket_Read()

  Dim sData As String

  If Last.Status <> Net.Connected Then Return
  sData = Read #Last, 1
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Data from socket " & oClients.Find(Last) & " " & oClients[oClients.Find(Last)].RemoteHost & " :" & sData)
  If sData = "\x03" Then ' buffer until \x03 then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub ParseLine(sText As String)

  Dim aScan As String[]
  Dim iDeviceId As Integer

  If $bDebug Then Main.WriteDebugLog(LogLabel & sText)
  aScan = Scan(sText, "*=*")
  If aScan.Count = 2 Then
    Select Case Left(aScan[0], 1)
      Case "a", "d"
        ' analog (eg. a2=4000) or digital join (eg. d10=1)
        Events.CheckIViewerRemoteEvents("iviewer", aScan[0], aScan[1])
      Case "s"
        ' serial (eg. s4=this is text)
        If aScan[0] = "s10001" Then
          If $bDebug Then Main.WriteDebugLog(LogLabel & "< iViewer: " & aScan[1])
        Else If aScan[0] = "s10002" Then
           If $bDebug Then Main.WriteDebugLog(LogLabel & "< Device: " & aScan[1])
        Else
          Events.CheckIViewerRemoteEvents("iviewer", aScan[0], aScan[1])
        Endif
      Case "h"
        ' heartbeat message
        If $bDebug Then Main.WriteDebugLog(LogLabel & "< Heartbeat request.")
        Try Write #Last, "h=1\x03", 4
        If $bDebug Then Main.WriteDebugLog(LogLabel & "> Heartbeat reply.")
      Case "p"
        If $bDebug Then Main.WriteDebugLog(LogLabel & "< Password request.")
        ' password
        If aScan[1] = $sPassword Then
          Try Write #Last, "p=ok\x03", 5
          If $bDebug Then Main.WriteDebugLog(LogLabel & "> Password ok.")
        Else
          Try Write #Last, "p=bad\x03", 6
          If $bDebug Then Main.WriteDebugLog(LogLabel & "> Password bad.")
        Endif
      Case "m"
        ' orientation, (eg. m=landscape)
      Case "l"
        ' list event, (eg. l1:4:d1=1)
    End Select
  Endif
  If UCase(sText) = UCase("SendDeviceStatusAll") Then SendDeviceStatusAll()
  ' SendDeviceStatus(65) 
  aScan = Scan(sText, "*(*")
  If aScan.Count = 2 Then
    If UCase(aScan[0]) = UCase("SendDeviceStatus") Then 
      Try iDeviceId = Left(aScan[1], -1)
      If Not Error Then SendDeviceStatus(iDeviceId)
    Endif
  Endif
End

Private Sub SendDeviceStatusAll()

  Dim rResult As Result
  Dim sValue, sType As String

  rResult = Devices.GetDevicesAndValues()
  
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: table 'devices' not found!")
    Return
  Endif

  For Each rResult
    If Not rResult!device_hide Then

      ' Set correct type now
      sType = ""
      If rResult!device_switchable Then
        sType = "switch" 
      Else If rResult!device_dimable Then
        sType = "dimmer" 
      Endif

      Try sValue = Devices.CorrectValue(rResult!device_value_value, rResult!device_value_correction, rResult!device_id)
      If sValue = "Dim 100" Then sValue = "100"
      If sValue = "Dim 99" Then sValue = "100"
      If sValue = "Dim 0" Then sValue = "0"
      If sValue <> Null Then SendUpdateForDevice(rResult!device_id, sValue, "value" & rResult!device_value_valuenum, IIf(sType, sType, "value" & rResult!device_value_valuenum))
    Endif
  Next
End

Public Sub SendDeviceStatus(iDeviceId As Integer)

  Dim iInterface As Integer
  Dim sAddress As String
  Dim sValue, sType As String
  Dim rResult As Result

  iInterface = Devices.FindInterfaceForDevice(iDeviceId)
  If Not iInterface Then Return

  sAddress = Devices.FindAddressForDevice(iDeviceId)
  If Not sAddress Then Return

  sType = LCase(Devices.CheckControlDevice(sAddress, iInterface))

  rResult = Devices.GetDevicesAndValues(["device_id": iDeviceId])
  For Each rResult
    Try sValue = Devices.CorrectValue(rResult!device_value_value, rResult!device_value_correction, iDeviceId)
    If sValue = "Dim 100" Then sValue = "100"
    If sValue = "Dim 99" Then sValue = "100"
    If sValue = "Dim 0" Then sValue = "0"
    If sValue <> Null Then SendUpdateForDevice(iDeviceId, sValue, "value" & rResult!device_value_valuenum, IIf(sType, sType, "value" & rResult!device_value_valuenum))
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish data to iViewer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendUpdateForDevice(iDeviceId As Integer, sValue As String, sValueField As String, sType As String)

  Dim sDeviceTypePair As String = Replace(iDeviceId & "_" & sValueField, " ", "_")

  If oClients.Count = 0 Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "No clients connected, so aborting item updates.")
    Return ' no clients connected
  Endif

  Select LCase(sType)
    Case "value", "value1", "setpoint"
      UpdateIviewerClients(sDeviceTypePair, sValue)
    Case "value2"
      UpdateIviewerClients(sDeviceTypePair, sValue)
    Case "value3"
      UpdateIviewerClients(sDeviceTypePair, sValue)
    Case "value4"
      UpdateIviewerClients(sDeviceTypePair, sValue)
    Case "motion"
      UpdateIviewerClients(sDeviceTypePair, IIf(sValue == "Motion", 1, 0))
    Case "switch"
      If LCase(sValue) = "off" Then
        UpdateIviewerClients(sDeviceTypePair, "0")
      Else If LCase(sValue) = "on" Or If InStr(LCase(sValue), "dim") Then
          UpdateIviewerClients(sDeviceTypePair, "1")
          ' Add extra logic to cater for additional value fields for switches (value2, value3 etc) which may hold power readings etc.
        Else
          UpdateIviewerClients(sDeviceTypePair, sValue)
        Endif
    Case "battery"
      UpdateIviewerClients(sDeviceTypePair, sValue)
    Case "dimmer", "dim"
      Select LCase(sValue)
        Case "on"
          Return ' With my AeonLabs dimmer, openzwave DOES send setvalue notifcations as it ramps UP - so we do not want to send initial on command
                 ' as "on" command sets the dimmer to the last set value, not necessarily 100.
                 ' To change this so it sends the On, you would comment out the Return line above and uncomment the next line.
          'UpdateIviewerClients(sDeviceTypePair, "100")
        Case "off"
          'Return ' With my AeonLabs dimmer, openzwave DOES NOT send notifcations as it ramps DOWN - so we do want to send "0" as off command 
          UpdateIviewerClients(sDeviceTypePair, "0")
        Case Else
          UpdateIviewerClients(sDeviceTypePair, Replace(sValue, "dim ", "", gb.IgnoreCase))
      End Select
      ' Add CatchAll for anything that might not match above device types.
    Case Else
       If $bDebug Then Main.WriteDebugLog(LogLabel & "A device fell into the catch all...you should probably let the plugin author know so he can fix it.")
       UpdateIviewerClients(sDeviceTypePair, sValue)
   End Select

End

Public Sub UpdateIviewerClients(sDeviceTypePair As String, sValue As String)

  Dim sDataToSend As String
  Dim sIViewerTerminator As String = "\x03"  ' used by iViewer app when parsing to detect the end of a response
  Dim i As Integer

  sDataToSend = sDeviceTypePair & "=" & sValue & sIViewerTerminator

  i = 0
  While i < oClients.Count
    Try Write #oClients[i], sDataToSend, Len(sDataToSend)
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Client" & i & ": " & oClients[i].RemoteHost & " :" & sDataToSend)
    Inc i
  Wend

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub Socket_Closed()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Connection closed by client " & oClients.Find(Last))
  oClients.Remove(oClients.Find(Last))

End
