' Gambas class file

' Description:
' CIViewer.class
' Native support for CommandFusion's iViewer protocol.

' Development Status:
' Not working yet.

' Links:
' http://www.commandfusion.com
' http://commandfusion.googlecode.com/svn/trunk/dotNet_control/iViewerControl

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Property IViewerPort As String
Property IViewerDebug As Boolean
Property IViewerPassword As String

Private sIViewerPort As String
Private bIViewerDebug As Boolean
Private sIViewerPassword As String

Public hIViewer As ServerSocket

Private oClients As New Object[]
Private sBuffer As String

' start our tcp server
Public Function Connect() As Boolean

  hIViewer = New ServerSocket As "IViewer"
  hIViewer.Type = Net.Internet
  hIViewer.Port = sIViewerPort
  hIViewer.Listen(0)

  If hIViewer.Status = Net.Active Then Return True

  Return False

End

' shutdown our tcp server
Public Sub Disconnect()

  ' DO WHILE hSocket.Count > 0
  '   RemoveSocket(hSocket[0])
  ' LOOP

  hIViewer.Close()

End

Public Sub IViewer_Connection(sRemoteHostIP As String)

  Dim hSocket As Socket

  If hIViewer.Status <= Net.Active Then Return
  hSocket = hIViewer.Accept()
  oClients.Add(hSocket)
  If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] Got connect from client with IP ") & hSocket.RemoteHost)

End

Public Sub IViewer_Error()

  Main.WriteLog(("CF iViewer Error: Unable to bind socket."))

End

Public Sub Socket_Read()

  Dim sData As String

  If Last.Status <> Net.Connected Then Return
  sData = Read #Last, 1
  If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] Data from socket ") & oClients.Find(Last) & " " & oClients[oClients.Find(Last)].RemoteHost & " :" & sData)
  If sData = "\x03" Then ' buffer until \x03 then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub ParseLine(sText As String)

  Dim aScan As String[]

  If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] ") & sText)
  aScan = Scan(sText, "*=*")
  If aScan.Count = 2 Then
    Select Case Left(aScan[0], 1)
      Case "a", "d"
        ' analog (eg. a2=4000) or digital join (eg. d10=1)
        Events.CheckIViewerRemoteEvents("iviewer", aScan[0], aScan[1])
      Case "s"
        ' serial (eg. s4=this is text)
        If aScan[0] = "s10001" Then
          If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] < iViewer : ") & aScan[1])
        Else If aScan[0] = "s10002" Then
           If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] < Device : ") & aScan[1])
        Else
          Events.CheckIViewerRemoteEvents("iviewer", aScan[0], aScan[1])
        Endif
      Case "h"
        ' heartbeat message
        If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] < Heartbeat request."))
        Try Write #Last, "h=1\x03", 4
        If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] > Heartbeat reply."))
      Case "p"
        If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] < Password request."))
        ' password
        If aScan[1] = sIViewerPassword Then
          Try Write #Last, "p=ok\x03", 5
          If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] > Password ok."))
        Else
          Try Write #Last, "p=bad\x03", 6
          If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] > Password bad."))
        Endif
      Case "m"
        ' orientation, (eg. m=landscape)
      Case "l"
        ' list event, (eg. l1:4:d1=1)
    End Select
  Endif

End
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish data to iViewer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendUpdateDevice(sID As String, sDevice As String, sValue As String, sType As String)

  Dim sDeviceTypePair As String = Replace(sDevice & "_" & sType, " ", "_")


If Main.bIViewerDebug Then Main.WriteDebugLog("[iViewer] SendUpdateDevice: " & sDeviceTypePair & " :" & sValue)

  If oClients.Count = 0 Then
    If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] No clients connected, so aborting item updates."))
    Return ' no clients connected
  Endif

  Select LCase(sType)
     Case "value", "value1", "setpoint"
       UpdateIviewer(sID, sDeviceTypePair, sValue)
     Case "value2"
       UpdateIviewer(sID, sDeviceTypePair, sValue)
     Case "value3"
       UpdateIviewer(sID, sDeviceTypePair, sValue)
     Case "value4"
       UpdateIviewer(sID, sDeviceTypePair, sValue)
     Case "motion"
       UpdateIviewer(sID, sDeviceTypePair, IIf(sValue == "Motion", 1, 0))
     Case "switch"
       If LCase(sValue) = "off" Then
         UpdateIviewer(sID, sDeviceTypePair, "0")
       Else If LCase(sValue) = "on" Or If InStr(LCase(sValue), "dim") Then
         UpdateIviewer(sID, sDeviceTypePair, "1")
       Endif
     Case "dimmer", "dim"
       Select LCase(sValue)
         Case "on"
           Return ' With my AeonLabs dimmer, openzwave DOES send setvalue notifcations as it ramps UP - so we do not want to send initial on command
                  ' as "on" command sets the dimmer to the last set value, not necessarily 100.
           'UpdateIviewer(sID, sDeviceTypePair, "100")
         Case "off"
           'Return ' With my AeonLabs dimmer, openzwave DOES NOT send notifcations as it ramps DOWN - so we do want to send "0" as off command 
           UpdateIviewer(sID, sDeviceTypePair, "0")
         Case Else
           UpdateIviewer(sID, sDeviceTypePair, Replace(sValue, "dim ", "", gb.IgnoreCase))
       End Select
   End Select

End

Public Sub UpdateIviewer(sId As String, sDeviceTypePair As String, sValue As String)

  Dim sDataToSend As String
  Dim sIViewerTerminator As String = "\x03"  ' used by iViewer app when parsing to detect the end of a response
  Dim i As Integer
  
  sDataToSend = sDeviceTypePair & "=" & sValue & sIViewerTerminator
  
  i = 0
  While i < oClients.Count
    Try Write #oClients[i], sDataToSend, Len(sDataToSend)
    If Main.bIViewerDebug Then Main.WriteDebugLog("[iViewer] Client" & i & ": " & oClients[i].RemoteHost & " :" & sDataToSend)
    Inc i
  Wend
  Catch
    If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] Error: ") & Error.Text & (" at ") & Error.Where)

End

Public Sub Socket_Closed()

  If Main.bIViewerDebug Then Main.WriteDebugLog(("[iViewer] Connection closed by client ") & oClients.Find(Last))
  oClients.Remove(oClients.Find(Last))

End

Private Function IViewerPort_Read() As String

  Return sIViewerPort

End

Private Sub IViewerPort_Write(Value As String)

  sIViewerPort = Value

End

Private Function IViewerDebug_Read() As Boolean

  Return bIViewerDebug

End

Private Sub IViewerDebug_Write(Value As Boolean)

  bIViewerDebug = Value

End

Private Function IViewerPassword_Read() As String

  Return sIViewerPassword

End

Private Sub IViewerPassword_Write(Value As String)

  sIViewerPassword = Value

End
