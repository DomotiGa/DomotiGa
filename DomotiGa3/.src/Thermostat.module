' Gambas module file

' Description:
' Thermostat.module
' Support for thermostat functionality.

' Development Status:
' Started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public tThermostat As Timer
Public NO_TEMP As Integer = 1000
Private aDerogatedHeating As New Collection
Private aPreviousRequestedTemperature As New Collection

Public Sub Run()

  ' start poll timer for digitemp
  tThermostat = New Timer As "tThermostat"
  tThermostat.Delay = Main.iThermostatPollTime * 1000
  tThermostat.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tThermostat_Timer()

  ' do the job
  DoTheJob()

End

Public Sub DoTheJob()

  Dim dtCurrent As Date
  Dim iScen, iHeat As Integer
  Dim rSched, rHeat As Result
  Dim fRequestedTemp, fMeasuredTemp As Float
  Dim sStatusDev, sStatusReg, sDeviceName, sRegulatorName As String
  Dim sOnDev As String = "On"
  Dim sOffDev As String = "Off"
  Dim sOnReg As String = "On"
  Dim sOffReg As String = "Off"
  Dim bOutOfDeviceOffset As Boolean

  ' get current date/time
  dtCurrent = Now()
  ' get active scenario
  iScen = GetActiveScenario()
  ' get scenario's schedules
  rSched = Main.hDB.Exec("SELECT * FROM thermostat_schedule WHERE scenario=&1", iScen)
  If rSched Then
    If rSched.Count Then
    ' for each schedule
      For Each rSched
        ' get schedule's heating
        iHeat = rSched!heating
        rHeat = Main.hDB.Exec("SELECT * FROM thermostat_heating WHERE id=&1", iHeat)
        If rHeat Then
          If rHeat.Count Then
            If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Working on heating : " & rHeat!name)
            ' check for constant change
            fRequestedTemp = GetRequestedTempForHeating(iScen, iHeat)
            If aPreviousRequestedTemperature.Exist(iHeat) Then
              If aPreviousRequestedTemperature[iHeat] <> fRequestedTemp Then
                DeleteDerogateHeating(iHeat)
                If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Ending derogation for : " & rHeat!name)
              Endif
              aPreviousRequestedTemperature[iHeat] = fRequestedTemp
            Else
              aPreviousRequestedTemperature.Add(fRequestedTemp, iHeat)
            Endif
            ' get requested temp
            fRequestedTemp = GetDerogateHeating(iHeat)
            If fRequestedTemp = NO_TEMP Then
              fRequestedTemp = GetRequestedTempForHeating(iScen, iHeat)
            Endif
            ' get real temp
            fMeasuredTemp = CFloat(Replace(Devices.GetCurrentValueForDevice(rHeat!sensor, 1), ",", ".", gb.String))
            If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Requested temp is : " & fRequestedTemp & "/Measured temp is : " & fMeasuredTemp)
            sDeviceName = Devices.FindNameForDevice(rHeat!device)
            sStatusDev = Devices.GetValueForDevice(sDeviceName)
            If rHeat!regulator <> 0 Then
              sRegulatorName = Devices.FindNameForDevice(rHeat!regulator)
              If sRegulatorName Then
                  sStatusReg = Devices.GetValueForDevice(sRegulatorName)
              End If
            Else
              sRegulatorName = ""
            Endif
            If rHeat!deviceInverted = True Then
              sOnDev = "Off"
              sOffDev = "On"
            Else
              sOnDev = "On"
              sOffDev = "Off"
            Endif
            If rHeat!regulatorInverted = True Then
              sOnReg = "Off"
              sOffReg = "On"
            Else
              sOnReg = "On"
              sOffReg = "Off"
            Endif
            bOutOfDeviceOffset = False
            If Not (isInsideLatency(rHeat!device, rHeat!deviceLatency)) Then
              ' compare requested temp to sensor's one
              If fMeasuredTemp + rHeat!deviceOffsetBottom <= fRequestedTemp Then
              ' too cold
              bOutOfDeviceOffset = True
              
                ' [GB2:TEXT] IF String.Comp(sStatusDev, sOffDev, gb.text) = 0 THEN
                If String.Comp(sStatusDev, sOffDev, gb.IgnoreCase) = 0 Then
                  If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Too cold here. Switching On device : " & sDeviceName)
                  Devices.SetDevice(sDeviceName, sOnDev)
                  sStatusDev = sOnReg
                Endif
                If sRegulatorName Then
                  ' [GB2:TEXT] IF String.Comp(sStatusReg, sOffReg, gb.text) = 0 THEN
                  If String.Comp(sStatusReg, sOffReg, gb.IgnoreCase) = 0 Then
                    If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Too cold here. Switching On regulator : " & sRegulatorName)
                    Devices.SetDevice(sRegulatorName, sOnReg)
                    sStatusReg = sOnReg
                  Endif
                Endif
              Endif
              If fMeasuredTemp - rHeat!deviceOffsetTop >= fRequestedTemp Then
              ' too hot
                bOutOfDeviceOffset = True
                ' [GB2:TEXT] IF String.Comp(sStatusDev, sOnDev, gb.text) = 0 THEN
                If String.Comp(sStatusDev, sOnDev, gb.IgnoreCase) = 0 Then
                  If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Too hot here. Switching Off device : " & sDeviceName)
                  Devices.SetDevice(sDeviceName, sOffDev)
                  sStatusDev = sOffReg
                Endif
                If sRegulatorName Then
                  ' [GB2:TEXT] IF String.Comp(sStatusReg, sOnReg, gb.text) = 0 THEN
                  If String.Comp(sStatusReg, sOnReg, gb.IgnoreCase) = 0 Then
                    If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Too hot here. Switching Off regulator : " & sRegulatorName)
                    Devices.SetDevice(sRegulatorName, sOffReg)
                    sStatusReg = sOffReg
                  Endif
                Endif
              Endif
              ' [GB2:TEXT] IF NOT (bOutOfDeviceOffset) AND (String.Comp(sStatusDev, sOnDev, gb.text) = 0) THEN
              If Not (bOutOfDeviceOffset) And (String.Comp(sStatusDev, sOnDev, gb.IgnoreCase) = 0) Then
                If sRegulatorName Then
                  sStatusReg = Devices.GetValueForDevice(sRegulatorName)
                  If fMeasuredTemp + rHeat!regulatorOffsetBottom <= fRequestedTemp Then
                  ' little cold
                    ' [GB2:TEXT] IF String.Comp(sStatusReg, sOffReg, gb.text) = 0 THEN
                    If String.Comp(sStatusReg, sOffReg, gb.IgnoreCase) = 0 Then
                      If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Little cold here. Switching On regulator : " & sRegulatorName)
                      Devices.SetDevice(sRegulatorName, sOnReg)
                      sStatusReg = sOnReg
                    Endif
                  Endif
                  If fMeasuredTemp - rHeat!regulatorOffsetTop >= fRequestedTemp Then
                  ' little hot
                    ' [GB2:TEXT] IF String.Comp(sStatusReg, sOnReg, gb.text) = 0 THEN
                    If String.Comp(sStatusReg, sOnReg, gb.IgnoreCase) = 0 Then
                      If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Little hot here. Switching Off regulator : " & sRegulatorName)
                      Devices.SetDevice(sRegulatorName, sOffReg)
                      sStatusReg = sOffReg
                    Endif
                  Endif
                Endif
              Endif
            Endif
          Endif
        Endif
      Next
    Endif
  Endif

End

Private Function GetActiveScenario() As Integer

  Dim rResultScen As Result

  rResultScen = Main.hDB.Exec("SELECT id, name FROM thermostat_scenarii WHERE name=&1", Main.GlobalVar["Thermostat_Mode"])
  If rResultScen Then
    If rResultScen.Count >= 1 Then
      If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Active scenario is : " & Main.GlobalVar["Thermostat_Mode"])
      Return rResultScen!id
    Endif
  Endif
  Return 0

End

Public Function GetRequestedTempForHeating(iScenario As Integer, iHeating As Integer) As Float

  Dim sSql As String
  Dim rTemp As Result
  Dim fReturn As Float

  sSql = "SELECT curtime() as curtime, dayofweek(curdate()) as curday, day, time, value FROM `thermostat_schedule_entry` se , `thermostat_constant` "
  sSql &= " c , `thermostat_heating` h where c.id=se.constant AND se.secondary=h.secondary AND dayofweek(curdate()) = Day AND se.scenario = &1 AND se.heating = &2 AND h.id=&2 order by Day, Time "
  rTemp = Main.hDB.Exec(sSql, iScenario, iHeating)
  If rTemp Then
    If rTemp.Count Then
      For Each rTemp
        If rTemp!curtime >= rTemp!time And rTemp!curday >= rTemp!day Then
          fReturn = rTemp!value
        Else
          Break
        Endif
      Next
      Return fReturn
    ELSE 
      RETURN 0.0 'used when no secondary schedule is provided
    Endif
  Endif
  Return NO_TEMP

End

Public Function GetNextRequestedTempForHeating(iScenario As Integer, iHeating As Integer) As Float

  Dim sSql As String
  Dim rTemp As Result
  Dim fCurrentReq, fReturn As Float

  sSql = "SELECT curtime() as curtime,  time, value FROM `thermostat_schedule_entry` se , `thermostat_constant` "
  sSql &= " c , `thermostat_heating` h where c.id=se.constant  AND se.secondary=h.secondary AND dayofweek(curdate()) = Day AND se.scenario = &1 AND se.heating = &2 AND h.id=&2 order by Time "
  rTemp = Main.hDB.Exec(sSql, iScenario, iHeating)
  If rTemp Then
    If rTemp.Count Then
      For Each rTemp
        If rTemp!curtime >= rTemp!time Then
          ' before now
          fCurrentReq = rTemp!value
        Else
          fReturn = rTemp!value
          If fCurrentReq <> fReturn Then Return fReturn
        Endif
      Next
    Endif
  Endif
  Return NO_TEMP

End

Private Function isInsideLatency(iDevice As Integer, iLatency As Integer) As Boolean

  If DateDiff(Devices.GetLastChangedForDevice(iDevice), Now(), gb.Minute) <= iLatency Then
    If Main.bThermostatDebug Then Main.WriteDebugLog("[Thermostat] Inside latency, nothing to do here.")
      Return True
    Endif
  Return False

Catch ' used when heating device is new (never changed) which causes DateDiff to raises an overflow
  Return False

End

' OLD code with direct DB request.
'DIM rDev AS Result
'
'  rDev = Main.hDB.Exec("select * from devices where id=&1", iDevice)
'  IF rDev THEN
'    IF rDev.Count >= 1 THEN
'      IF rDev!lastchanged THEN
'        IF DateDiff(rDev!lastchanged, Now(), gb.Minute) <= iLatency THEN
'          IF Main.bThermostatDebug THEN Main.WriteDebugLog("[Thermostat] Inside latency, nothing to do here.")
'          RETURN TRUE
'        ENDIF
'      ENDIF
'    ENDIF
'  ENDIF
'  RETURN FALSE
'
'END

Public Sub SetDerogateHeating(iScen As Integer, iHeat As Integer, fTemp As Float)

  If aDerogatedHeating.Exist(iHeat) Then
    If GetRequestedTempForHeating(iscen, iheat) = fTemp Then
      aDerogatedHeating.Remove(iHeat)
    Else
      aDerogatedHeating[iHeat] = fTemp
    Endif
  Else
    ' not found
    aDerogatedHeating.Add(fTemp, iHeat)
  Endif

End

Public Function GetDerogateHeating(iHeat As Integer) As Float

  If aDerogatedHeating.Exist(iHeat) Then
    Return aDerogatedHeating[iHeat]
  Else
    Return NO_TEMP
  Endif

End

Public Sub DeleteAllDerogateHeating()

  If aDerogatedHeating.Count Then
    Main.WriteLog("[Thermostat] Ending all derogated temp.")
    aDerogatedHeating.Clear
  Endif

End

Public Sub DeleteDerogateHeating(iHeat As Integer)

  If aDerogatedHeating.Exist(iHeat) Then aDerogatedHeating.Remove(iHeat)

End

PUBLIC SUB SetIsSecondary(iHeat AS Integer, bFrostprotect AS Boolean) AS Boolean

  DIM rTemp AS Result

  rTemp = Main.hDB.Exec("UPDATE thermostat_heating SET secondary = &1 WHERE id = &2", bFrostprotect, iHeat)

  IF rTemp THEN 
    RETURN TRUE
  ELSE 
    RETURN FALSE
  ENDIF

END

PUBLIC SUB GetIsSecondary(iHeat AS Integer) AS Boolean

  DIM rResult AS Result

  rResult = Main.hDB.Exec("Select secondary from thermostat_heating WHERE id=&1", iHeat)
  RETURN rResult!secondary

END

