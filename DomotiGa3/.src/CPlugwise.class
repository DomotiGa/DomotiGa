' Gambas class file

' Description:
' CPlugwise.class
' Use Plugwise to control devices.

' Development Status:
' Working fine, only need to add support for reading logbuffers from plugs.

' Links:
' http://www.plugwise.nl
' http://mindprod.com/jgloss/crc.html
' http://www.maartendamen.com/?p=359

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Plugwise"
Public PluginFriendlyName As String = "Plugwise"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Plugwise] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $bDebug As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String
Private $iPollTime As Integer
Private $iBusyTime As Integer

Public hMySocket As CSocket
Public hMySerial As CSerialPort
Public tPlugwisePoll As New Timer
Public tPlugwiseBusy As New Timer

' calibration data
Private cGainA As New Collection
Private cGainB As New Collection
Private cOffNoise As New Collection
Private cOffTot As New Collection
Private cLogAddress As New Collection

' store outstanding communication
Private cCommQueue As New Collection
Private iCommRetry As Integer
Const iMaxCommRetry As Integer = 8

' queue and command buffer stuff
Private cQueue As New Collection    ' command buffer
Private $bStickBusy As Boolean       ' waiting for delay timer to finish
Private $bHeaderFound As Boolean = False
Private $bFooterFound As Boolean = False
Private $sRecBuf As String

' CRC-16(CCITT) table with Poly = 0x10210
Private aCRCTable As New Integer[256]
Private bTableInit As Boolean

Const STICKINITCODE As String = "000A"
Const COMMANDRESPONSECODE As String = "0011"
Const ACKRESPONSECODE As String = "0000"
Const POWERCHANGECODE As String = "0017"
Const DEVICEINFOCODE As String = "0023"
Const DEVICEINFORESPONSECODE As String = "0024"
Const CALIBRATIONCODE As String = "0026"
Const CALIBRATIONRESPONSECODE As String = "0027"
Const POWERINFOCODE As String = "0012"
Const POWERINFORESPONSECODE As String = "0013"
Const LOGINFOCODE As String = "0048"
Const LOGADDRESSOFFSET As Integer = 278528
Const POWERLOGRESPONSECODE As String = "0049"
Const SWITCHINFOCODE As String = "0056"

' TODO: code to build for
Const ADVERTISENODERESPONSE As String = "0006"
Const SETCLOCKCODE As String = "0016"
Const POPULATERESPONSE As String = "0019"
Const DATETIMEINFOCODE As String = "0029"
Const DATETIMEINFORESPONSE As String = "003A"
Const SENDSCHEDULERESPONSE As String = "003D"
Const CLOCKINFORCODE As String = "003E"
Const CLOCKINFORESPONSE As String = "003F"
Const FEATURESETCODE As String = "005F"
Const FEATURESETRESPONSE As String = "0060"
Const PINGRESPONSE As String = "000E"
Const QUERYCIRCLEPLUSRESPONSE As String = "0002"
Const QUERYCIRCLEPLUSENDRESPONSE As String = "0003"
Const CONNECTCIRCLEPLUSRESPONSE As String = "0005"
Const REMOVENODERESPONSE As String = "001D"
Const LOGINTERVALCODE As String = "0057"
Const CLEARGROUPMAC As String = "0058"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iPollTime = cPl.Settings["polltime"]
  $sSerPort = cPl.Settings["serialport"]
  $iBusyTime = cPl.Settings["busytime"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Plugwise Stick")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If $sInterface = "tcp" Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP() As Boolean

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = &HFF + gb.Byte
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial() As Boolean

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = &HFF + gb.Byte
    .PortName = $sSerPort
    .Speed = 115200
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  Run()

  ' All went ok
  Return True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect() As Boolean

  ' try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close

  ' try stop running timers
  StopTimers()

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

  Try tPlugwisePoll.Stop
  Try tPlugwiseBusy.Stop

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")
  StopTimers()

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read data char for char
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run/Init
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' start poll timer for power usage check
  tPlugwisePoll.Stop
  tPlugwisePoll = New Timer As "tPlugwisePoll"
  tPlugwisePoll.Delay = $iPollTime * 1000 ' multiply for seconds
  tPlugwisePoll.Start

  ' define timer for Plugwise stick busy
  tPlugwiseBusy.Stop
  tPlugwiseBusy = New Timer As "tPlugwiseBusy"
  tPlugwiseBusy.Delay = $iBusyTime
  tPlugwiseBusy.Stop

  InitStick()
  CheckPlugs()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPlugwisePoll_Timer()

  CheckPlugs()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StoreCircle(sMAC As String, fGainA As Float, fGainB As Float, fOffTot As Float, fOffNoise As Float)

  ' simple try to add it
  Try cGainA.Add(fGainA, sMAC)
  Try cGainB.Add(fGainB, sMAC)
  Try cOffTot.Add(fOffTot, sMAC)
  Try cOffNoise.Add(fOffNoise, sMAC)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetPackets(sRaw As String) As String[]

  Dim rReg As New Regexp
  Dim aMatches As New String[]
  Dim iCnt As Integer

  rReg.Compile("\x03\x03(\\w+)\r\n")
  rReg.Exec(sRaw)

  For iCnt = 0 To rReg.Count - 1
    aMatches.Add(rReg[iCnt].Text)
  Next
  Return aMatches

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sInput As String)

  Dim sType, sPacket, sCRC As String
  Dim iBegin As Integer

  ' reset for next data
  $sRecBuf = ""
  $bHeaderFound = False
  $bFooterFound = False

  For Each sPacket In GetPackets(sInput)

    ' find and store header position
    iBegin = InStr(sPacket, Chr(3) & Chr(3))

    ' get response type from packet
    sType = Mid(sPacket, iBegin + 2, 4)

    ' checksum check
    sCRC = Mid(sPacket, Len(sPacket) - 5, 4)
    If sCRC = CalculateCRC(Mid(sPacket, iBegin + 2, Len(sPacket) - iBegin - 7)) Then
      If $bDebug Then WriteDebugLog("< " & Mid(sPacket, 5, Len(sPacket) - 6) & " (CRC OK)")
    Else
      If $bDebug Then WriteDebugLog("< " & Mid(sPacket, 5, Len(sPacket) - 6) & " (CRC Error, discarding data)")
      Return
    Endif

    ' strip header and type
    sPacket = Mid(sPacket, iBegin + 6, Len(sPacket) - 8)
    Select sType
      Case CALIBRATIONRESPONSECODE
        ProcessCalibrationResponse(sPacket)

      Case POWERINFORESPONSECODE
        ProcessPowerInfoResponse(sPacket)

      Case DEVICEINFORESPONSECODE
        ProcessDeviceInfoResponse(sPacket)

      Case ACKRESPONSECODE
        ProcessAckResponse(sPacket)

      Case COMMANDRESPONSECODE
        ProcessCommandResponse(sPacket)

      Case POWERLOGRESPONSECODE
        ProcessPowerLogResponse(sPacket)

      Case SWITCHINFOCODE
        ProcessSwitchResponse(sPacket)

      ' TODO: these are not tested yet
      Case CLOCKINFORESPONSE
        ProcessClockInfoResponse(sPacket)

      Case Else
        WriteLog("ERROR: Received unknown response type! (" & sType & ")")
     End Select
  Next

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedChar(bTemp As Byte)

  If bTemp = &H05 Then $bHeaderFound = True
  If bTemp = &H0A Then $bFooterFound = True
  $sRecBuf &= Chr(bTemp)
  If $bFooterFound = True And If $bHeaderFound = True Then ProcessReceivedPacket($sRecbuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CalculateLogHistory(sPulses As String, sMAC As String) As String

  Dim iPulses As Integer
  Dim fCorrectedPulses, fkWh As Float

  ' no valid data
  If sPulses = "FFFFFFFF" Then Return "?"

  ' calculate actual usage in Watt
  iPulses = Val("&H" & sPulses) / 1.0
  fCorrectedPulses = CorrectPulses(iPulses, sMAC)
  fkWh = (fCorrectedPulses / 3600) / 468.9385193

  Return Format(CStr(fkWh), "0.000")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessClockInfoResponse(sResult As String)

  Dim sSeq As String = Mid(sResult, 1, 4)
  Dim sMAC As String = Mid(sResult, 5, 16)
  Dim sHour, sMin, sSec, sWeekday, sRest, sRest2 As String

  sHour = Mid(sResult, 21, 2)
  sMin = Mid(sResult, 23, 2)
  sSec = Mid(sResult, 25, 2)
  sWeekday = Mid(sResult, 27, 2)
  sRest = Mid(sResult, 29, 2)
  sRest2 = Mid(sResult, 31, 4)

  If Not $bDebug Then Return
  WriteDebugLog("Received Clock Info response!")
  WriteDebugLog("Sequence Number: " & sSeq)
  WriteDebugLog("MAC Address: " & sMAC)
  WriteDebugLog("Time: " & sHour & ":" & sMin & ":" & sSec)
  WriteDebugLog("Weekday: " & sWeekday)
  WriteDebugLog("Rest: " & sRest)
  WriteDebugLog("Rest2: " & sRest2)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessPowerLogResponse(sResult As String)

  Dim sLogDate1, sLogDate2, sLogDate3, sLogDate4, sMAC As String = Mid(sResult, 5, 16)
  Dim sLogPulse1, sLogPulse2, sLogPulse3, sLogPulse4 As String

  sLogDate1 = TimeSinceLastMonth(Mid(sResult, 21, 8))
  sLogPulse1 = CalculateLogHistory(Mid(sResult, 29, 8), sMAC)
  sLogDate2 = TimeSinceLastMonth(Mid(sResult, 37, 8))
  sLogPulse2 = CalculateLogHistory(Mid(sResult, 45, 8), sMAC)
  sLogDate3 = TimeSinceLastMonth(Mid(sResult, 53, 8))
  sLogPulse3 = CalculateLogHistory(Mid(sResult, 61, 8), sMAC)
  sLogDate4 = TimeSinceLastMonth(Mid(sResult, 69, 8))
  sLogPulse4 = CalculateLogHistory(Mid(sResult, 77, 8), sMAC)

  If Not $bDebug Then Return
  WriteDebugLog("MAC Address: " & sMAC)
  WriteDebugLog("Received Power Log response!")
  WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
  ' firstbuf=00004224  (First buffer - Hours passed since 1 jun 2007 02:00)
  WriteDebugLog("Log1: " & sLogPulse1 & " kWh at " & sLogDate1)
  WriteDebugLog("Log2: " & sLogPulse2 & " kWh at " & sLogDate2)
  WriteDebugLog("Log3: " & sLogPulse3 & " kWh at " & sLogDate3)
  WriteDebugLog("Log4: " & sLogPulse4 & " kWh at " & sLogDate4)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessDeviceInfoResponse(sResult As String)

  Dim sMAC, sRelay, sState, sLogAddress, sType, sHW, sTime As String
  Dim iLogAddress, iDeviceId As Integer

  sMAC = Mid(sResult, 5, 16)
  sRelay = Mid(sResult, 37, 2)
  sState = IIf(sRelay = "01", "On", "Off")
  sTime = Mid(sResult, 21, 8)
  sLogAddress = Mid(sResult, 29, 8)
  iLogAddress = (Val("&H" & sLogAddress & "&") - LOGADDRESSOFFSET) / 32
  sType = Mid(sResult, 61, 2)

  ' remove entry from commqueue
  Try cCommQueue.Remove(sMAC)

  ' store logaddress
  cLogAddress.Add(iLogAddress, sMAC)

  If $bDebug Then
    WriteDebugLog("Received Device Info response!")
    WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
    WriteDebugLog("MAC Address: " & sMAC)
    WriteDebugLog("Relay State: " & sRelay & " " & sState)
    WriteDebugLog("Time in Circle: " & TimeSinceLastMonth(sTime))
    WriteDebugLog("Log Address: " & iLogAddress & " Hex: " & sLogAddress)
    WriteDebugLog("Frequency: " & GetFreq(Mid(sResult, 39, 2)) & "Hz")
    WriteDebugLog("Hardware version: " & Mid(sResult, 41, 4) & "-" & Mid(sResult, 45, 4) & "-" & Mid(sResult, 49, 4))
    WriteDebugLog("Firmware: " & TimeSinceEpoch(Mid(sResult, 53, 8)))
    Select sType
      Case "00"
        sHW = "Stick"
      Case "01"
        sHW = "Circle+"
      Case "02"
        sHW = "Circle"
    End Select
    WriteDebugLog("Hardware Type: " & sHW)
  Endif

  ' update device state
  iDeviceId = Devices.Find(Instance, sMAC, InterfaceId, "Plugwise Circle")
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sState, Devices.ValueType_Switch)

  'If $bDebug Then WriteDebugLog("Checking power logs of device with address '" & sMAC & "'")
  ' now that the logaddress is known get the power logs too
  'GetPowerLogs(sMAC)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessSwitchResponse(sResult As String)

  Dim sMAC, sState, sButton As String
  Dim iDeviceId As Integer

  sMAC = Mid(sResult, 5, 16)
  sButton = Mid(sResult, 21, 2)
  sState = IIf(Mid(sResult, 23, 2) = "01", "On", "Off")

  If $bDebug Then
    WriteDebugLog("Received Switch response!")
    WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
    WriteDebugLog("MAC Address: " & sMAC)
    WriteDebugLog("Button:  " & sButton)
    WriteDebugLog("State:  " & sState)
  Endif

  ' update device state
  iDeviceId = Devices.Find(Instance, sMAC & ":" & sButton, InterfaceId, "Plugwise Switch")
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sState, Devices.ValueType_Switch)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessCommandResponse(sResult As String)

  Dim sMAC, sOnline, sID, sSID As String

  If $bDebug Then
    WriteDebugLog("Received Command response!")
    sMAC = Mid(sResult, 5, 16)
    sOnline = Mid(sResult, 23, 2)
    sID = Mid(sResult, 25, 16)
    sSID = Mid(sResult, 41, 4)
    WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
    WriteDebugLog("MAC Address Stick: " & sMAC)
    WriteDebugLog("Network is: " & IIf(sOnline = "01", "Online", "Offline"))
    WriteDebugLog("Unique Network ID: " & sID)
    WriteDebugLog("Short Network ID: " & sSID)
  Endif

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessAckResponse(sResult As String)

  Dim sMsg, sAckCode As String = Mid(sResult, 5, 4)

  Select Case sAckCode
    Case "00C1"
      sMsg = "OK"
    Case "00C2"
      sMsg = "Error, Re-Init"
    Case "00E1"
      sMsg = "NAK/Timeout"
    Case Else
      sMsg = "Unknown"
  End Select

  If $bDebug Then
    WriteDebugLog("Received Ack response!")
    WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
    WriteDebugLog("Acknowledgement: " & sAckCode & " (" & sMsg & ")")
  Endif
  If sAckCode = "00C2" Then InitStick()

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessCalibrationResponse(sResult As String)

  Dim sMAC As String = Mid(sResult, 5, 16)
  Dim fGainA, fGainB, fOffTot, fOffNoise As Float

  fGainA = HexToFloat(Mid(sResult, 21, 8))
  fGainB = HexToFloat(Mid(sResult, 29, 8))
  fOffTot = HexToFloat(Mid(sResult, 37, 8))
  fOffNoise = HexToFloat(Mid(sResult, 45, 8))

  ' remove entry from commqueue
  Try cCommQueue.Remove(sMAC)

  ' store calibration data
  StoreCircle(sMAC, fGainA, fGainB, fOffTot, fOffNoise)

  ' get power info now calibration data is known
  GetPowerInfo(sMAC)

  If Not $bDebug Then Return
  WriteDebugLog("Received Calibration response!")
  WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
  WriteDebugLog("MAC Address: " & sMAC)
  WriteDebugLog("GainA: " & Str(fGainA))
  WriteDebugLog("GainB: " & Str(fGainB))
  WriteDebugLog("OffTot: " & Str(fOffTot))
  WriteDebugLog("OffNoise: " & Str(fOffNoise))

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessPowerInfoResponse(sResult As String)

  Dim sMAC, sPulses, sPulses8s, sWatt, skW As String
  Dim iPulses, iDeviceId As Integer
  Dim fCorrectedPulses, fkW As Float

  sMAC = Mid(sResult, 5, 16)
  sPulses = Mid(sResult, 21, 4)
  sPulses8s = Mid(sResult, 25, 4)

  ' Check if MAC address is known, else there is a problem
  If Not cOffNoise.Exist(sMac) Then
    WriteLog("ERROR: MAC Address: " & sMAC & " is not registered with the call 'ProcessCalibrationResponse'")
  Endif

  ' remove entry from commqueue
  Try cCommQueue.Remove(sMAC)

  ' calculate actual usage in Watt
  iPulses = Val("&H" & sPulses) / 1.0
  fCorrectedPulses = CorrectPulses(iPulses, sMAC)
  fkW = (fCorrectedPulses / 1) / 468.9385193
  skW = Format(CStr(fkW), "0.00")
  sWatt = Format(CStr(fkW * 1000), "0.00")

  If $bDebug Then
    WriteDebugLog("Received Power Info response!")
    WriteDebugLog("Sequence Number: " & Mid(sResult, 1, 4))
    WriteDebugLog("MAC Address: " & sMAC)
    WriteDebugLog("Pulses: " & iPulses & " Hex: " & sPulses & " (Corrected: " & fCorrectedPulses & ")")
    WriteDebugLog("Usage: " & sWatt & " Watt (" & skW & " kW)")
  Endif

  ' update device state
  iDeviceId = Devices.Find(Instance, sMAC, InterfaceId, "Plugwise Circle")
  If iDeviceId Then
    Devices.ValueUpdate(iDeviceId, 2, sWatt, Devices.ValueType_Energy_kWh)
    Devices.ValueUpdate(iDeviceId, 3, skW, Devices.ValueType_Power_Watt)
  Endif

  If $bDebug Then WriteDebugLog("Checking relay state of device with address '" & sMAC & "'")
  GetDeviceInfo(sMAC)

Catch ' some errors
  WriteDebugLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CorrectPulses(iPulses As Integer, sMAC As String) As Float

  Dim fTemp, fCorrectedPulses As Float

  fTemp = iPulses + cOffNoise[sMAC]
  If iPulses Then fCorrectedPulses = 1.0 * ((((fTemp) ^ 2.0 * cGainB[sMAC]) + ((fTemp) * cGainA[sMAC])) + cOffTot[sMAC])

  Return fCorrectedPulses

End

Private Sub InitStick()

  Dim sPacket, sCmd, sCRC As String
  Dim sHeader As String = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  Dim sFooter As String = Chr(13) & Chr(10)

  If hMySerial.Status <> Net.Active Then Return

  ' <ENQ><ENQ><ETX><ETX>000AB43C<CR><LF>
  sCmd = STICKINITCODE
  sCRC = CalculateCRC(sCmd)
  sPacket = sHeader & sCmd & sCRC & sFooter
  QueueCommand(sPacket)

  If Not $bDebug Then Return
  WriteDebugLog("Initializing Stick")
  WriteDebugLog("Cmd: " & sCmd & " CRC: " & sCRC)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub QueueCommand(sPacket As String)

  ' add command to queue
  cQueue.Add(sPacket, Rnd)

  ' if stick is not busy process it
  If $bStickBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DoQueue()

  Dim sPacket As String

  For Each sPacket In cQueue
    WriteCommand(sPacket, cQueue.Key)
    Break ' only do first one
  Next

  If cQueue.Count = 1 Then
    ' clear queue at max retries
    If iCommRetry > iMaxCommRetry Then
      cCommQueue.Clear
      iCommRetry = 0
      Return
    Endif

    ' empty queue, return
    If Not cCommQueue.Count Then Return

    For Each cCommQueue
      If $bDebug Then WriteDebugLog("CommQueue Retry #" & iCommRetry & ": " & cCommQueue.Key & "-" & cCommQueue[cCommQueue.Key])
      Select Case cCommQueue[cCommQueue.Key]
        Case "P", "C"
          GetPowerInfo(cCommQueue.Key)
        Case "L"
          GetPowerLogs(cCommQueue.Key)
      End Select
    Next
    Inc iCommRetry
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send packet to plugwise stick
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteCommand(sBuffer As String, sKey As String)

  If $bDebug Then WriteDebugLog("> " & Mid(sBuffer, 5, Len(sBuffer) - 6))

  ' Write to serial, but we read as byte[] and write as string
  If $sInterface = "tcp" Then
    hMySocket.Write(sBuffer, gb.String)
  Else
    hMySerial.Write(sBuffer, gb.String)
  Endif

  ' remove sent command from queue
  cQueue.Remove(sKey)

  ' start timer to wait before sending next command
  tPlugwiseBusy.Delay = $iBusyTime
  tPlugwiseBusy.Start
  $bStickBusy = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stick busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPlugwiseBusy_Timer()

  $bStickBusy = False
  tPlugwiseBusy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then WriteDebugLog("Sending command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' loop through plugwise devices in database and collect their data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckPlugs()

  Dim rResult As Result

  rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
  If rResult And If rResult.Available Then
    For Each rResult
      If CheckAddress(rResult!address) Then
        If $bDebug Then WriteDebugLog("Getting power info for device '" & rResult!name & "' with address '" & rResult!address & "'")
        GetPowerInfo(UCase(rResult!address))
      Else
        WriteDebugLog("Address for device called '" & rResult!name & "' with address '" & rResult!address & "' has wrong length!")
        WriteDebugLog("It must be 16 chars long for a Circle, or 19 for a Switch.")
      Endif
    Next
  Else
    WriteDebugLog("No Circles found in the database, please add them.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check/convert address before usage
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckAddress(sAddress As String) As Boolean

  If Len(sAddress) <> 16 And If Len(sAddress) <> 19 Then
    Return False
  Endif
  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control plugs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sPacket, sCommand, sFunc, sCRC, sMAC As String = UCase(sAddress)
  Dim sHeader As String = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  Dim sFooter As String = Chr(13) & Chr(10)

  If Not CheckAddress(sMAC) Then Return

  sFunc = IIf(UCase(sCmd) = "ON", "01", "00")

  ' <ENQ><ENQ><ETX><ETX>0017000A1100003111AB01AC92<CR><LF>
  sHeader = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  sCommand = POWERCHANGECODE & sMAC & sFunc
  sCRC = CalculateCRC(sCommand)
  sPacket = sHeader & sCommand & sCRC & sFooter
  QueueCommand(sPacket)

  If Not $bDebug Then Return
  WriteDebugLog("Queue Power Change:")
  WriteDebugLog("MAC Address: " & sMAC)
  WriteDebugLog("Cmd String: " & sCommand & " CRC: " & sCRC)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control plugs
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetPowerLogs(sAddress As String)

  Dim sPacket, sCmd, sCRC, sMAC, sLogAddress As String
  Dim sHeader As String = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  Dim sFooter As String = Chr(13) & Chr(10)
  Dim iLogAddress As Integer

  sMAC = Replace(sAddress, ":", "")

  If cLogAddress.Exist(sMAC) Then
    iLogAddress = LOGADDRESSOFFSET + (32 * cLogAddress[sMAC] - 1)
    sLogAddress = Hex(ilogaddress, 8)
    sCmd = LOGINFOCODE & sMAC & sLogAddress
    sCRC = CalculateCRC(sCmd)
    sPacket = sHeader & sCmd & sCRC & sFooter

    QueueCommand(sPacket)

    ' add entry to commqueue
    cCommQueue.Add("L", sMAC)

    If Not $bDebug Then Return
    WriteDebugLog("Queue Power Logs:")
    WriteDebugLog("MAC Address: " & sMAC)
    WriteDebugLog("Log Address: " & iLogAddress & " Hex: " & sLogAddress)
    WriteDebugLog("Cmd String: " & sCmd & " CRC: " & sCRC)
  Else
    If Not $bDebug Then Return
    WriteDebugLog("Queue Power Logs:")
    WriteDebugLog("Log Address: Unknown, skipping.")
  Endif

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetDeviceInfo(sAddress As String)

  Dim sPacket, sCmd, sCRC, sMAC As String
  Dim sHeader As String = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  Dim sFooter As String = Chr(13) & Chr(10)

  sMAC = Replace(sAddress, ":", "")

  sCmd = DEVICEINFOCODE & sMAC
  sCRC = CalculateCRC(sCmd)
  sPacket = sHeader & sCmd & sCRC & sFooter
  QueueCommand(sPacket)

  ' add entry to commqueue
  cCommQueue.Add("D", sMAC)

  If Not $bDebug Then Return
  WriteDebugLog("Queue Device Info:")
  WriteDebugLog("MAC Address: " & sMAC)
  WriteDebugLog("Cmd String: " & sCmd & " CRC: " & sCRC)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetPowerInfo(sAddress As String)

  Dim sPacket, sCmd, sCRC, sMAC As String = Replace(sAddress, ":", "")
  Dim sHeader As String = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  Dim sFooter As String = Chr(13) & Chr(10)

  If Not cGainA.Exist(sMAC) Then ' get calibration info first
    ' <ENQ><ENQ><ETX><ETX>0026000D6F00002366BB7071<CR><LF>
    sCmd = CALIBRATIONCODE & sMAC
    If $bDebug Then WriteDebugLog("Queue Calibration Request:")

    ' add entry to commqueue
    cCommQueue.Add("C", sMAC)
  Else
    ' <ENQ><ENQ><ETX><ETX>0012000D6F00002366BB338B<CR><LF>
    sCmd = POWERINFOCODE & sMAC
    If $bDebug Then WriteDebugLog("Queue Power Info Request:")

  ' add entry to commqueue
    cCommQueue.Add("P", sMAC)
  Endif

  sCRC = CalculateCRC(sCmd)
  sPacket = sHeader & sCmd & sCRC & sFooter
  QueueCommand(sPacket)

  If Not $bDebug Then Return
  WriteDebugLog("MAC Address: " & sMAC)
  WriteDebugLog("Cmd String: " & sCmd & " CRC: " & sCRC)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetFreq(sByte As String) As String

  If sByte = "85" Then
    Return "50"
  Else If sByte = "C5" Then
    Return "60"
  Else
    Return "??"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub TimeSinceLastMonth(sTime As String) As String

  Dim gTime As Date
  Dim iYear, iMonth, iMinutes As Integer

  ' check for valid data
  If Len(sTime) <> 8 Then Return
  If sTime = "FFFFFFFF" Then Return "?"

  iYear = 2000 + Val("&H" & Left(sTime, 2))
  iMonth = Val("&H" & Mid(sTime, 3, 2))
  iMinutes = Val("&H" & Mid(sTime, 5, 4))

  ' add minutes to year/month values
  gTime = DateAdd(Date(iYear, iMonth, 1, 1, 0, 0), gb.Minute, iMinutes)

  Return Format$(gTime, "yyyy/mm/dd hh:nn:ss")

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub TimeSinceEpoch(sTime As String) As String

  Dim gTime As Date

  If Len(sTime) <> 8 Then Return

  ' calculate time since epoch
  gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val("&H" & sTime & "&"))

  Return Format$(gTime, "yyyy/mm/dd hh:nn:ss")

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub HexToFloat(sHex As String) As Float

  Dim iSign As Integer
  Dim fExponent, fMant As Float

  If sHex Then
    ' sign
    iSign = IIf((Val("&H" & Mid(sHex, 1, 2)) And &H80) = 128, -1, 1)
    ' exponent
    fExponent = (Val("&H" & Mid(sHex, 1, 3)) And &H7F8) / 2 ^ 3 - 127
    ' mantissa
    fMant = (Val("&H" & Mid(sHex, 3, 6)) And &H7FFFFF) / 2 ^ 23 + 1
  Endif
  Return iSign * fMant * 2 ^ fExponent

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "' sHex = '" & sHex & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CalculateCRC(sbuf As String) As String

  Dim iWork, iCnt As Integer

  If Not bTableInit Then InitCrcTable()

  iWork = &H0
  For iCnt = 1 To Len(sbuf)
    iWork = (aCRCTable[(Asc(Mid(sBuf, iCnt, 1)) Xor (Lsr(iWork, 8))) And &HFF] Xor (Lsl(iWork, 8))) And &HFFFF&
  Next
  Return Hex(iWork, 4)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub InitCRCTable()

  Dim iTableIndex, iIndex, iAccumulator, iMask As Integer

  For iTableIndex = 0 To 255
    iMask = Lsl(iTableIndex, 8)
    iAccumulator = 0
    For iIndex = 0 To 7
      If ((iMask Xor iAccumulator) And &H8000&) Then
        iAccumulator = Lsl(iAccumulator, 1) Xor &H1021&
      Else
        iAccumulator = Lsl(iAccumulator, 1)
      Endif
      iMask = Lsl(iMask, 1)
    Next
    aCRCTable[iTableIndex] = iAccumulator And &HFFFF&
  Next
  bTableInit = True

End
