' Gambas class file

' Description:
' FSettingsPVoutput.class
' Settings form for PVoutput upload.

' Development Status:
' Development just started.

' Links:
' http://www.pvoutput.org

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Pieter Blom in 2013.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private iDeviceId As Integer
Private sDeviceValue As String
Private iUsageDeviceId As Integer
Private sUsageDeviceValue As String
Private iTempDeviceId As Integer
Private sTempDeviceValue As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize buttons and fill in current values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' TODO: add more instances
  If LoadSettings(1) = False Then
    ' TODO: Handle problems
    Try Me.Close
    Return
  Endif

  EnableDisableSettings()
  btnSave.Enabled = False

  FillDevices()
  FillValue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' fill comboboxes with available devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FillDevices()

  Dim rResult, rDevice As Result
  Dim iCount As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is true ORDER BY name")
  If Not rResult Then
    Message.Info(("Error: table 'devices' not found!"))
    Return
  Endif

  cmbValue.Add("", 0)
  cmbValue.Add("Value", 1)
  cmbValue.Add("Value2", 2)
  cmbValue.Add("Value3", 3)
  cmbValue.Add("Value4", 4)

  cmbUsageValue.Add("", 0)
  cmbUsageValue.Add("Value", 1)
  cmbUsageValue.Add("Value2", 2)
  cmbUsageValue.Add("Value3", 3)
  cmbUsageValue.Add("Value4", 4)

  cmbTempValue.Add("", 0)
  cmbTempValue.Add("Value", 1)
  cmbTempValue.Add("Value2", 2)
  cmbTempValue.Add("Value3", 3)
  cmbTempValue.Add("Value4", 4)

  For iCount = 0 To rResult.Max
    cmbSensor.Add(rResult!name)
    cmbUsageSensor.Add(rResult!name)
    cmbTempSensor.Add(rResult!name)
    rResult.MoveNext
  Next

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iDeviceId)
  cmbSensor.Add("", 0)
  If rDevice.Count Then
    cmbSensor.Text = Devices.FindNameForDevice(iDeviceId)
    cmbValue.Index = sDeviceValue
  Endif

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iUsageDeviceId)
  cmbUsageSensor.Add("", 0)
  If rDevice.Count Then
    cmbUsageSensor.Text = Devices.FindNameForDevice(iUsageDeviceId)
    cmbUsageValue.Index = sUsageDeviceValue
  Endif

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iTempDeviceId)
  cmbTempSensor.Add("", 0)
  If rDevice.Count Then
    cmbTempSensor.Text = Devices.FindNameForDevice(iTempDeviceId)
    cmbTempValue.Index = sTempDeviceValue
  Endif

End

Public Sub FillValue()

  If cmbSensor.Text Then txtValue.Text = Devices.GetCurrentValueForDevice(Devices.FindIdForDevice(cmbSensor.Text), cmbValue.Index)
  If cmbUsageSensor.Text Then txtUsageValue.Text = Devices.GetCurrentValueForDevice(Devices.FindIdForDevice(cmbUsageSensor.Text), cmbUsageValue.Index)
  If cmbTempSensor.Text Then txtTempValue.Text = Devices.GetCurrentValueForDevice(Devices.FindIdForDevice(cmbTempSensor.Text), cmbTempValue.Index)

End

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub chkEnabled_Click()

  EnableDisableSettings()
  btnSave.Enabled = True

End

Public Sub cmbValue_Click()

  btnSave.Enabled = True
  FillValue()

End

Public Sub cmbUsageValue_Click()

  btnSave.Enabled = True
  FillValue()

End

Public Sub cmbTempValue_Click()

  btnSave.Enabled = True
  FillValue()

End

Public Sub btnWeb_Click()

  Desktop.Open("http://www.pvoutput.org/list.jsp?sid=" & Main.sPVoutputId)

End

Public Sub btnUpload_Click()

  Dim cPl As New CPluginEntry
  Dim hPVoutput As New CPVoutput
  Dim iTempDeviceId, iUsageDeviceId As Integer

  ' Only validate if it is enabled
  If chkEnabled.Value Then
    If Not ValidInput() Then Return
  Endif

  ' check if optional sensor data is used
  If cmbTempSensor.Text Then iTempDeviceId = Devices.FindIdForDevice(cmbTempSensor.Text)
  If cmbUsageSensor.Text Then iUsageDeviceId = Devices.FindIdForDevice(cmbUsageSensor.Text)

  cPl.Settings["enabled"] = chkEnabled.Value
  cPl.Settings["pvoutputid"] = txtId.Text
  cPl.Settings["api"] = txtApi.Text
  cPl.Settings["debug"] = txtPushTime.Text
  cPl.Settings["pushtime"] = txtPushTime.Text
  cPl.Settings["deviceid"] = Devices.FindIdForDevice(cmbSensor.Text)
  cPl.Settings["devicevalue"] = cmbValue.Index
  cPl.Settings["usagedeviceid"] = iUsageDeviceId
  cPl.Settings["usagedevicevalue"] = cmbUsageValue.Index
  cPl.Settings["tempdeviceid"] = iTempDeviceId
  cPl.Settings["tempdevicevalue"] = cmbTempValue.Index

  hPVoutput.StartPlugin(cPl, False)
  hPVoutput.UploadPVoutputData()

End

Private Sub ValidInput() As Boolean

  If Not txtApi.Text Then
    Balloon(("Please enter your Api Key!"), txtApi)
    Return False
  Endif

  If Not txtId.Text Then
    Balloon(("Please enter your SytemID!"), txtId)
    Return False
  Endif

  If Not cmbSensor.Text And If Not cmbUsageSensor.Text And If Not cmbTempSensor.Text Then
    Balloon(("Please define at least one device!"), cmbSensor)
    Return False
  Endif

  If Not cmbValue.Text And If Not cmbUsageValue.Text And If Not cmbTempValue.Text Then
    Balloon(("Please select a value field for device(s) selected!"), cmbValue)
    Return False
  Endif

  Return True

End

Public Sub btnSave_Click()

  Dim iTempDeviceId, iUsageDeviceId As Integer

  ' Only validate if it is enabled
  If chkEnabled.Value Then
    If Not ValidInput() Then Return
  Endif

  ' check if optional sensor data is used
  If cmbTempSensor.Text Then iTempDeviceId = Devices.FindIdForDevice(cmbTempSensor.Text)
  If cmbUsageSensor.Text Then iUsageDeviceId = Devices.FindIdForDevice(cmbUsageSensor.Text)

  ' save new PVoutput settings
  Main.hDB.Exec("UPDATE settings_pvoutput SET debug = &1, pvoutputid = &2, pushtime = &3, enabled = &4, api = &5, deviceid = &6, devicevalue = &7, usagedeviceid = &8, usagedevicevalue = &9, tempdeviceid = &{10}, tempdevicevalue = &{11} WHERE id = 1", chkDebug.Value, txtId.Text, txtPushTime.Text, chkEnabled.Value, txtApi.Text, Devices.FindIdForDevice(cmbSensor.Text), cmbValue.Index, iUsageDeviceId, cmbUsageValue.Index, iTempDeviceId, cmbTempValue.Index)

  If Main.bServer Then
    Plugin.Restart("PVoutput", 1)
  Else
    Client.ModuleRestart("PVoutput")
  Endif

  Me.Close

End

Public Sub btnDefaults_Click()

  LoadSettings(0)
  btnSave.Enabled = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Load table row
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LoadSettings(iRow As Integer) As Boolean

  Dim rResult As Result

  rResult = Plugin.GetSettingsTable("settings_pvoutput", iRow)

  If rResult.Count Then
    chkEnabled.Value = rResult!enabled
    txtApi.Text = rResult!api
    txtId.Text = rResult!pvoutputid
    chkDebug.Value = rResult!debug
    txtPushTime.Text = rResult!pushtime
    iDeviceId = rResult!deviceid
    sDeviceValue = rResult!devicevalue
    iUsageDeviceId = rResult!usagedeviceid
    sUsageDeviceValue = rResult!usagedevicevalue
    iTempDeviceId = rResult!tempdeviceid
    sTempDeviceValue = rResult!tempdevicevalue
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Enable/Disable all input fields depending on enable value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EnableDisableSettings()

  txtApi.Enabled = chkEnabled.Value
  txtId.Enabled = chkEnabled.Value
  chkDebug.Enabled = chkEnabled.Value
  btnUpload.Enabled = chkEnabled.Value
  txtPushTime.Enabled = chkEnabled.Value
  cmbSensor.Enabled = chkEnabled.Value
  cmbValue.Enabled = chkEnabled.Value
  txtValue.Enabled = chkEnabled.Value
  cmbUsageSensor.Enabled = chkEnabled.Value
  cmbUsageValue.Enabled = chkEnabled.Value
  cmbTempSensor.Enabled = chkEnabled.Value
  cmbTempValue.Enabled = chkEnabled.Value

End

