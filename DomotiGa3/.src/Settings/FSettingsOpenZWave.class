' Gambas class file

' Description:
' FSettingsZWave.class
' Settings form for Z-Wave support.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)

  GetInstances()

  If LoadSettings(1) = False Then
    Message.Error("Couldn't load settings for instance #1!")
    Try Me.Close
    Return
  Endif

  EnableDisableSettings()
  btnSave.Enabled = False

  If txtPolltimeListening.Text = "" Then txtPolltimeListening.Text = "*/30 * * * *"
  If txtPolltimeSleeping.Text = "" Then txtPolltimeSleeping.Text = "*/30 * * * *"

End

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub txtSerialPort_KeyPress()

  btnSave.Enabled = True

End

Public Sub chkDebug_Click()

  btnSave.Enabled = True

End

Public Sub chkEnabledPollListening_Click()

  txtPolltimeListening.Enabled = chkEnablePollListening.Value
  btnSave.Enabled = True

End

Public Sub chkEnabledPollSleeping_Click()

  txtPolltimeSleeping.Enabled = chkEnablePollSleeping.Value
  btnSave.Enabled = True

End

Public Sub chkUpdateNeighbor_Click()

  txtUpdateNeighbor.Enabled = chkEnableUpdateNeighbor.Value
  btnSave.Enabled = True

End

Public Sub btnSave_Click()

  Dim rSettings As Result
  Dim iInstance As Integer = cmbInstance.Index + 1
  Dim bZWaveRestart As Boolean = False

  bZWaveRestart = True

  ' test if instance is already present
  rSettings = Main.hDB.Exec("SELECT * from settings_openzwave WHERE id = &1", iInstance)

  ' save new Z-Wave settings
  If rSettings.Count = 1 Then
    Main.hDB.Exec("UPDATE settings_openzwave SET debug = &1, serialport = &2,  enabled = &3, polltime = &4, polltimesleeping = &5, updateneighbor = &6, enablepollsleeping = &7, enableupdateneighbor = &8, polltimelistening = &9, enablepolllistening = &{10}  WHERE id = &{11}", chkDebug.Value, txtSerialPort.Text, chkEnabled.Value, vbPolltime.Value, txtPolltimeSleeping.Text, txtUpdateNeighbor.Text, chkEnablePollSleeping.Value, chkEnableUpdateNeighbor.Value, txtPolltimeListening.Text, chkEnablePollListening.Value, iInstance)
  Else
    Main.hDB.Exec("INSERT INTO settings_openzwave (debug, serialport,  enabled, polltime, polltimesleeping, updateneighbor, enablepollsleeping, enableupdateneighbor, polltimelistening, enablepolllistening, id) values (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", chkDebug.Value, txtSerialPort.Text, chkEnabled.Value, vbPolltime.Value, txtPolltimeSleeping.Text, txtUpdateNeighbor.Text, chkEnablePollSleeping.Value, chkEnableUpdateNeighbor.Value, txtPolltimeListening.Text, chkEnablePollListening.Value, iInstance)
  Endif

  If Main.bServer Then
    If bZWaveRestart Then
      Plugin.Restart("OpenZWave", iInstance)
    Endif
  Else
    Client.Plugin_Restart("OpenZWave", iInstance)
  Endif

  FMain.UpdateStatusPanel()
  Me.Close

End

Public Sub btnDefaults_Click()

  LoadSettings(0)
  btnSave.Enabled = True

End

Public Sub chkEnabled_Click()

  EnableDisableSettings()
  btnSave.Enabled = True

End

Public Sub vbPolltime_KeyPress()

  btnSave.Enabled = True

End

Public Sub txtPolltimeListening_Change()

  btnSave.Enabled = True

End

Public Sub txtPolltimeSleeping_Change()

  btnSave.Enabled = True

End

Public Sub txtUpdateNeighbor_Change()

  btnSave.Enabled = True

End

Public Sub chkEnablePollListening_Click()

  btnSave.Enabled = True
  txtPolltimeListening.Enabled = chkEnablePollListening.Value

End

Public Sub chkEnablePollSleeping_Click()

  btnSave.Enabled = True
  txtPolltimeSleeping.Enabled = chkEnablePollSleeping.Value

End

Public Sub chkEnableUpdateNeighbor_Click()

  btnSave.Enabled = True
  txtUpdateNeighbor.Enabled = chkEnableUpdateNeighbor.Value

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Load table row
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LoadSettings(iRow As Integer) As Boolean

  Dim rResult As Result

  rResult = Plugin.GetSettingsTable("settings_openzwave", iRow)

  If rResult.Count Then
    chkEnabled.Value = rResult!enabled
    txtSerialPort.text = rResult!serialport
    chkDebug.Value = rResult!debug
    vbPolltime.Value = rResult!polltime
    txtPolltimeListening.Text = rResult!polltimelistening
    txtPolltimeSleeping.Text = rResult!polltimesleeping
    txtUpdateNeighbor.Text = rResult!updateneighbor

    If rResult!enablepolllistening <> Null Then
      chkEnablePollListening.Value = rResult!enablepolllistening
    Else
      chkEnablePollListening.Value = False
    Endif

    chkEnablePollSleeping.Value = rResult!enablepollsleeping
    chkEnableUpdateNeighbor.Value = rResult!enableupdateneighbor

    If txtPolltimeListening.Text = "" Then txtPolltimeListening.Text = "*/30 * * * *"
    If txtPolltimeSleeping.Text = "" Then txtPolltimeSleeping.Text = "*/30 * * * *"

    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Enable/Disable all input fields depending on enable value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EnableDisableSettings()

  txtSerialPort.Enabled = chkEnabled.Value
  chkDebug.Enabled = chkEnabled.Value
  vbPolltime.Enabled = chkEnabled.Value
  txtPolltimeListening.Enabled = chkEnablePollListening.Value And chkEnabled.Value
  txtPolltimeSleeping.Enabled = chkEnablePollSleeping.Value And chkEnabled.Value
  txtUpdateNeighbor.Enabled = chkEnableUpdateNeighbor.Value And chkEnabled.Value
  chkEnablePollListening.Enabled = chkEnabled.Value
  chkEnablePollSleeping.Enabled = chkEnabled.Value
  chkEnableUpdateNeighbor.Enabled = chkEnabled.Value
  btnSerial.Enabled = chkEnabled.Value

End

Public Sub btnSerial_Click()

  Dim sSerialPort As String

  sSerialPort = FToolsSerialPorts.Run()
  If sSerialPort Then txtSerialPort.Text = sSerialPort
  btnSave.Enabled = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get instance information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetInstances()

  Dim iMax As Integer = GetMaxInstanceforPlugin("OpenZWave")
  Dim iInstance As Integer

  cmbInstance.Clear
  If iMax Then
    For iInstance = 1 To iMax
      cmbInstance.Add("Instance #" & iInstance)
    Next
  Else
    Message.Error("Couldn't find MaxInstances value for this plugin!")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get the maximum instance for this plugin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetMaxInstanceforPlugin(sPluginName As String) As Integer

  If Main.bServer Then
    Return Plugin.GetPluginMaxInstances(sPluginName)
  Else
    ' FIXME: We are running in client/server mode - call json
    Return 9
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle multi-instance support
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub cmbInstance_Click()

  ' load selected instance, if not available load defaults
  If LoadSettings(cmbInstance.Index + 1) = False Then
    LoadSettings(0)
  Endif

  EnableDisableSettings()
  btnSave.Enabled = False

End

