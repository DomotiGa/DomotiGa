' Gambas class file

' Description:
' FSettingsZWave.class
' Settings form for Z-Wave support.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' TODO: add more instances
  If LoadSettings(1) = False Then
    ' TODO: Handle problems
    Try Me.Close
    Return
  Endif

  EnableDisableSettings()
  btnSave.Enabled = False

  If txtPolltimeListening.Text = "" Then txtPolltimeListening.Text = "*/30 * * * *"
  If txtPolltimeSleeping.Text = "" Then txtPolltimeSleeping.Text = "*/30 * * * *"

End

Public Sub btnCancel_Click()

  Me.Close

End

Public Sub txtSerialPort_KeyPress()

  btnSave.Enabled = True

End

Public Sub chkDebug_Click()

  btnSave.Enabled = True

End

Public Sub chkEnabledPollListening_Click()

  txtPolltimeListening.Enabled = chkEnablePollListening.Value
  btnSave.Enabled = True

End

Public Sub chkEnabledPollSleeping_Click()

  txtPolltimeSleeping.Enabled = chkEnablePollSleeping.Value
  btnSave.Enabled = True

End

Public Sub chkUpdateNeighbor_Click()

  txtUpdateNeighbor.Enabled = chkEnableUpdateNeighbor.Value
  btnSave.Enabled = True

End

Public Sub btnSave_Click()

  Dim rResult As Result
  Dim bZWaveRestart As Boolean = False

  ' Check if we require to restart Open Z-Wave, we prefer not to do it ofcourse
  'If (txtSerialPort.Text <> Main.sZWaveSerialPort) Or
  '   (chkDebug.Value <> Main.bZWaveDebug) Or
  '   (chkEnabled.Value <> Main.bZWaveEnabled) Or
  '   (vbPolltime.Value <> Main.iZWavePollTime) Then
  '  bZWaveRestart = True
  'Endif
  bZWaveRestart = True

  ' Only do this when we are running as server
  'If chkEnabled.Value And Main.bServer Then
  '
    ' Only do it if the hZWave object doesn't exist
  '  If Main.hZWave = Null Then
  '  
  '    Main.hZWave = New CZWave
  '    If Main.hZWave.Version() = "" Then
  '      Main.hZWave = Null
  '      Message.Error(("Z-Wave interface cannot be enabled, because the open-zwave library cannot be loaded or is an invalid format"))
  '      Return
  '    Endif
  '
  '    Main.hZWave = Null
  '  Endif
  '
  'Endif

  ' save new Z-Wave settings
  rResult = Main.hDB.Exec("UPDATE settings_openzwave SET debug = &1, serialport = &2,  enabled = &3, polltime = &4, polltimesleeping = &5, updateneighbor = &6, enablepollsleeping = &7, enableupdateneighbor = &8, polltimelistening = &9, enablepolllistening = &{10}  WHERE id = 1", chkDebug.Value, txtSerialPort.Text, chkEnabled.Value, vbPolltime.Value, txtPolltimeSleeping.Text, txtUpdateNeighbor.Text, chkEnablePollSleeping.Value, chkEnableUpdateNeighbor.Value, txtPolltimeListening.Text, chkEnablePollListening.Value)

  If Main.bServer Then
    If bZWaveRestart Then
      Plugin.Restart("OpenZWave", 1)
    Endif
  Else
      XMLClient.ModuleRestart("OpenZWave")
  Endif

  FMain.UpdateStatusPanel()
  Me.Close

End

Public Sub btnDefaults_Click()

  LoadSettings(0)
  btnSave.Enabled = True

End

Public Sub chkEnabled_Click()

  EnableDisableSettings()
  btnSave.Enabled = True

End

Public Sub vbPolltime_Change()

  btnSave.Enabled = True

End

Public Sub txtPolltimeListening_Change()

  btnSave.Enabled = True

End

Public Sub txtPolltimeSleeping_Change()

  btnSave.Enabled = True

End

Public Sub txtUpdateNeighbor_Change()

  btnSave.Enabled = True

End

Public Sub chkEnablePollListening_Click()

  btnSave.Enabled = True
  txtPolltimeListening.Enabled = chkEnablePollListening.Value

End

Public Sub chkEnablePollSleeping_Click()

  btnSave.Enabled = True
  txtPolltimeSleeping.Enabled = chkEnablePollSleeping.Value

End

Public Sub chkEnableUpdateNeighbor_Click()

  btnSave.Enabled = True
  txtUpdateNeighbor.Enabled = chkEnableUpdateNeighbor.Value

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Load table row
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LoadSettings(iRow As Integer) As Boolean

  Dim rResult As Result

  rResult = Plugin.GetSettingsTable("settings_openzwave", iRow)

  If rResult.Count Then
    chkEnabled.Value = rResult!enabled
    txtSerialPort.text = rResult!serialport
    chkDebug.Value = rResult!debug
    vbPolltime.Value = rResult!polltime
    txtPolltimeListening.Text = rResult!polltimelistening
    txtPolltimeSleeping.Text = rResult!polltimesleeping
    txtUpdateNeighbor.Text = rResult!updateneighbor

    If rResult!enablepolllistening <> Null Then
      chkEnablePollListening.Value = rResult!enablepolllistening
    Else
      chkEnablePollListening.Value = False
    Endif

    chkEnablePollSleeping.Value = rResult!enablepollsleeping
    chkEnableUpdateNeighbor.Value = rResult!enableupdateneighbor

    If txtPolltimeListening.Text = "" Then txtPolltimeListening.Text = "*/30 * * * *"
    If txtPolltimeSleeping.Text = "" Then txtPolltimeSleeping.Text = "*/30 * * * *"

    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Enable/Disable all input fields depending on enable value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EnableDisableSettings()

  txtSerialPort.Enabled = chkEnabled.Value
  chkDebug.Enabled = chkEnabled.Value
  vbPolltime.Enabled = chkEnabled.Value
  txtPolltimeListening.Enabled = chkEnablePollListening.Value And chkEnabled.Value
  txtPolltimeSleeping.Enabled = chkEnablePollSleeping.Value And chkEnabled.Value
  txtUpdateNeighbor.Enabled = chkEnableUpdateNeighbor.Value And chkEnabled.Value
  chkEnablePollListening.Enabled = chkEnabled.Value
  chkEnablePollSleeping.Enabled = chkEnabled.Value
  chkEnableUpdateNeighbor.Enabled = chkEnabled.Value

End

