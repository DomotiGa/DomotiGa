' Gambas module file

' Description:
' XMLParser.module
' XML parse routines.

' Development Status:
' Imported from Kris's own project, needs testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Kris Wauters on February, 13th - 2010
' For more info or help, mailto: kris@digitalplayground.be

' Read file called COPYING for license details.

'--- converts a URL with an XML stream to a "workable" file :-) ---
'--- StrUrl = URL where to download the XML structure, returns a file in PML format (with parsetags between parents, collected on one line ---
Public Function ParseXML(StrUrl As String) As String

  '--- declare variables ---
  Dim hHttpC As HttpClient
  Dim StrBuffer, StrFile As String

  hHttpC = New HttpClient As "hHttpC"
  hHttpC.URL = StrUrl
  hHttpC.Async = False
  hHttpC.Timeout = 10
  hHttpC.Get()

  '--- check if succesfull ---
  If hHttpC.Status < 0 Then
    '--- something went wrong ---
    Main.WriteDebugLog("ERROR: XMLParser.ParseXML couldn't download. Error code = " & CStr(hHttpC.Status), False)
    StrBuffer = ""
    hHttpC.Close
    hHttpC = Null
    Return
  Else
    '--- success - read the data ---
    If Lof(hHttpC) Then StrBuffer = Read #hHttpC, Lof(hHttpC)
  Endif
  hHttpC.Close
  hHttpC = Null
  '--- do a final check (especially for WeatherBug) ---
  If Trim(UCase(strBuffer)) = "ACCESS DENIED" Then
    Message.Error(Main.Translate("Access Denied to given URL!\nYou need to register at WeatherBug, and enter your ID in setup!\nBrowse to http://weather.weatherbug.com/desktop-weather/api-register.html"))
    Main.WriteDebugLog("ERROR: XMLParser.ParseXML access denied to " & StrUrl, False)
    Return ""
  Else
    StrFile = ConvertXMLtoPML(StrBuffer, False)
    Return StrFile
  Endif

End

'--- make a workable file out of the XML stream ---
'--- StrBuffer = input XML data, Boolfile FALSE=String,TRUE=File, returns a path/filename to a .PML file
Public Function ConvertXMLtoPML(StrBuffer As String, BoolFile As Boolean) As String

  '--- declare variables ---
   Dim XmlR As New XmlReader
   Dim StrName, StrFile, StrNewBuffer As String
   Dim StrHeader As New String[10]
   Dim IntI As Integer
   Dim fFile As File

   XmlR = New XmlReader
   If BoolFile = False Then
     XmlR.FromString(StrBuffer)
   Else
     XmlR.Open(StrBuffer)
   Endif
   StrFile = Temp() & ".PML"
   fFile = Open (StrFile) For Create
   '--- loop trough the while XML buffer ---
   While Not XmlR.Eof
      '--- make a difference between regular values and sub-elements ---
      If CStr(XmlR.Node.name) = "#text" Then
        '--- put all headers onto one line, so by reading a line, we always know the "parent names" easy ---

        For IntI = 0 To XmlR.Node.depth - 1
          StrNewBuffer = StrNewBuffer & StrHeader[IntI] & "|"
        Next

        StrNewBuffer = StrNewBuffer & StrName & "|=|" & Replace(XmlR.Node.value, "&deg;", "°")
        Print #fFile, StrNewBuffer
        StrNewBuffer = ""
      Else
        StrName = XmlR.Node.name
      Endif
      '--- keep track of headers ---
      
      If XmlR.State = XmlReaderNodeType.Element Then
        StrHeader[XmlR.Node.depth] = XmlR.Node.name
      Endif

      '--- here we have an XML node with subelements, split it up in different lines ---
      Select Case XmlR.Node.Type
        Case XmlReaderNodeType.Element
          If XmlR.Node.Attributes.count > 0 Then
            For Each XmlR.Node.Attributes
              For IntI = 0 To XmlR.Node.depth - 1
                StrNewBuffer = StrNewBuffer & StrHeader[IntI] & "|"
              Next
              StrNewBuffer = StrNewBuffer & XmlR.Node.name & "|=|" & Replace(XmlR.Node.value, "&deg;", "°")
              Print #fFile, StrNewBuffer
              StrNewBuffer = ""
            Next
          Endif
      End Select
      XmlR.Read()
   Wend
  '--- put everyting in a "parseable markup language" file (hey, I made this fileformat up myself, lol)
  fFile.Close
  fFile = Null
  Return StrFile

Catch
  Main.WriteDebugLog("ERROR: XMLParser.ParseXML '" & Error.Text & "' at '" & Error.Where & "'")

End

'--- function returns a path to the correspondig GIF files ---
'--- StrDirection = WindDirection(N, E, S, W, NNE, SSE, NNW, SSW)
Public Sub ReturnWindDirectionPic(StrDirection As String) As String

  '--- declare variables ---
  Dim StrDir As String

  '--- reduce string to 2 characters ---
  StrDir = Left(StrDirection, 1) & Right(StrDirection, 1)
  '--- if characters are the same, then leave only one character! ---
  If Right(StrDir, 1) = Mid(StrDir, 2, 1) Then
    StrDir = Left(StrDir, 1)
  Endif

  Return (Main.sBaseDir &/ "icons/weather" &/ UCase(strdir) & ".gif")

End
