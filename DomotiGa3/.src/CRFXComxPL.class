' Gambas class file

' Description:
' CRFXComxPL.class
' Connect to RFXCom xPL interface via xPL protocol.

' Development Status:
' Works, needs some more testing.

' Credits:
' Thanks to Bert Weijenberg from RFXCom for all the support.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "RFXComxPL"
Public PluginFriendlyName As String = "RFXCom xPL"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[RFXComxPL] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property RXAddress As String
Property TXAddress As String
Property GlobalX10 As Boolean
Property OldAddrFmt As Boolean
Property RFXComDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sRXAddress As String
Private $sTXAddress As String
Private $bGlobalX10 As Boolean
Private $bOldAddrFmt As Boolean
Private $bDebug As Boolean

Private Const VENDOR As String = "domotiga-xpl"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sRXAddress = cPl.Settings["rxaddress"]
  $sTXAddress = cPl.Settings["txaddress"]
  $bOldAddrFmt = cPl.Settings["oldaddrfmt"]
  $bGlobalX10 = cPl.Settings["globalx10"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("RFXCom xPL")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif
  ' Connect/Initialize connection

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ProcessxPLMsg(oxPLMsg As Object)

  Dim sDevice, sDeviceType, sType, sAddressType, sAddress, sValue, sValue2, sValue3, sValue4, sBattery, sCurrent, sLog, sMsgType As String
  Dim iDeviceId As Integer
  Dim aAddress As String[]

  Main.ControlLed("RFXCom", "On")
  Select oxPLMsg.Schema
    Case "hbeat.app", "hbeat.basic"
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Got heartbeat msg of type '" & oxPLMsg.Schema & " from '" & oxPLMsg.Source & "'")
      sValue = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "info")
      If Len(sValue) Then Main.WriteDebugLog(LogLabel & "Got heartbeat msg from RFXCom xPL interface with info '" & sValue & "'")
    Case "log.basic"
      sLog = "LOG: " & Main.hxPL.GetBodyValueFromKey(oxPLMsg, "type") & " [" & Main.hxPL.GetBodyValueFromKey(oxPLMsg, "text") & "]" & Main.hxPL.GetBodyValueFromKey(oxPLMsg, "code")
    Case "datetime.basic"
      sValue = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "time")
      sValue2 = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "date")
      sValue3 = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "datetime")
      sType = "DT1"
    Case "ac.basic"
      sAddress = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "address") & " " & Main.hxPL.GetBodyValueFromKey(oxPLMsg, "unit")
      sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      sType = "AC"
      If sValue = "Preset" Then
        sValue = "Dim " & Str(Round(Val(Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "level"))) * 6.25))
      Endif
    Case "x10.basic"
      sAddress = ConvertX10Address(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "device"))
      sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      sType = "X10"
    Case "x10.security"
      sDevice = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "device")
      sAddress = ConvertAddress("secure " & sDevice, True)
      sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      sValue3 = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "delay"))
      sAddressType = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "type")
      ' cn is a Chacon, Avidsen, NEXA smoke detector
      ' mct and mcw are Visonic PowerCode sensors other types are X10
      Select Case sAddressType
        Case "cn", "sd18,c018" ' smoke alarm
          sAddress = ConvertAddress("smoke " & sDevice, True)
          sType = "SMOKE"
        Case "ms10,ms20,ms90,mcw", "mcw", "ms10,mcw", "ms20", "ms90,mcw", "dm10" ' motion sensor
          sAddress = ConvertAddress("motion " & sDevice, True)
          Select Case sValue
            Case "Normal"
              sValue = "No Motion"
            Case "Alert"
              sValue = "Motion"
          End Select
          sType = "X10SecMotion"
        Case "ds10,ds90", "ds10,ds90,sd90,mct302,mct550", "ds90", "ds90,mct302,mct550" ' door/window sensor OR sd90 smoke alarm, OR mct550 water sensor
          sAddress = ConvertAddress("dws " & sDevice, True)
          iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "DWS")
          If iDeviceId Then
            Select Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId)
              Case "Smoke Detector", "Water Sensor" ' sd90, mct550
              Case Else ' real door/window sensor
                Select Case sValue
                  Case "Normal"
                    sValue = "Closed"
                  Case "Alert"
                    sValue = "Open"
                End Select
            End Select
          Endif
        Case "sh624,mct234", "sh624", "kr10", "kr10,sd90,mct234", "hp564" ' remote control/keyfob
          sAddress = ConvertAddress("remote " & sDevice, True)
          sType = "X10SecRemote"
          Select Case sValue
            Case "Arm-away"
              sValue = "Arm Away"
            Case "Arm-home"
              sValue = "Arm Home"
            Case "Lights-on2"
              sValue = "Lights On"
          End Select
      End Select
      If sValue3 = "" Then sValue3 = "Min"
      If Main.hxPL.GetBodyValueFromKey(oxPLMsg, "tamper") = "true" Then
        sValue2 = "Tamper"
      Else
        sValue2 = "Secure"
      Endif
      sBattery = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "low-battery")
      If sBattery = "true" Then
        sBattery = "Low"
      Else
        sBattery = "OK"
      Endif
    Case "remote.basic"
      sDevice = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "device")
      sAddress = ConvertAddress(sDevice)
      sValue = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "keys")
      sType = "REMOTE"
    Case "sensor.basic"
      sDevice = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "device")
      sAddress = ConvertAddress(sDevice)
      aAddress = Split(sDevice, " ")
      If aAddress.Count = 2 Then
        sDeviceType = UCase(aAddress[0])
      Else
        sDeviceType = UCase(sDevice)
      Endif
      sCurrent = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "current")
      sMsgType = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "type")
      sType = sDeviceType
      Select sDeviceType
        Case "TH1", "TH2", "TH3", "TH4", "TH5", "TH6", "THB1", "THB2"
          If sMsgType = "temp" Then sValue = sCurrent
          If sMsgType = "humidity" Then
            sValue2 = sCurrent
            sValue3 = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "description"))
          Endif
          If sMsgType = "status" Then sValue3 = Main.Caps(sCurrent)
          If sMsgType = "pressure" Then
            sValue4 = sCurrent
            sValue3 = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "forecast")) ' to check
          Endif
          If sMsgType = "battery" Then sBattery = Main.Caps(sCurrent)
        Case "UV1", "UV2"
          If sMsgType = "uv" Then sValue = sCurrent
          If sMsgType = "battery" Then sBattery = Main.Caps(sCurrent)
          sValue2 = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "description"))
        Case "RAIN1", "RAIN2"
          If sMsgType = "rainrate" Then sValue = sCurrent
          If sMsgType = "raintotal" Then sValue2 = sCurrent
          If sMsgType = "battery" Then sBattery = Main.Caps(sCurrent)
        Case "TEMP1", "TEMP2", "TEMP3", "TEMP4"
          If sMsgType = "temp" Then sValue = sCurrent
          If sMsgType = "battery" Then sBattery = Main.Caps(sCurrent)
        Case "WIND1", "WIND2", "WIND3"
          If sMsgType = "average_speed" Then sValue = sCurrent
          If sMsgType = "gust" Then sValue2 = sCurrent
          If sMsgType = "direction" Then sValue3 = sCurrent
          If sMsgType = "battery" Then sBattery = Main.Caps(sCurrent)
        Case "RFXMETER"
          sValue = sCurrent
        Case "RFXSENSOR"
          If sMsgType = "temp" Then sValue = sCurrent
          If sMsgType = "voltage" Then sValue2 = sCurrent
        Case "WEIGHT1", "WEIGHT2"
          If sMsgType = "weight" Then sValue = sCurrent
        Case "ELEC1_1", "ELEC1_2", "ELEC1_3"
          If sMsgType = "current" Then
            Select Right(sDeviceType, 1)
              Case "1"
                sValue = sCurrent
              Case "2"
                sValue2 = sCurrent
              Case "3"
                sValue3 = sCurrent
            End Select
          Endif
        Case "ELEC2"
          If sMsgType = "power" Then sValue = sCurrent
          If sMsgType = "energy" Then sValue2 = sCurrent
        Case "DIGIMAX"
          If sMsgType = "temp" Then sValue = sCurrent
          If sMsgType = "setpoint" Then sValue2 = sCurrent
          If sMsgType = "demand" Then sValue3 = sCurrent
        Case "IO0", "IO1", "IO2", "IO3", "IO4", "IO5", "IO6", "IO7"
          sAddress = sDevice
          Select sCurrent
            Case "low"
              sValue = "Off"
            Case "high"
              sValue = "On"
          End Select
        Case Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Received unsupported devicetype '" & sDeviceType & "'")
    End Select
  Case Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Received unsupported message schema '" & oxPLMsg.Schema & "'")
  End Select

  If oxPLMsg.Schema = "log.basic" Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)
  Else If oxPLMsg.Schema = "hbeat.app" Or If oxPLMsg.Schema = "hbeat.basic" Or If oxPLMsg.Schema = "hbeat.end" Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Got heartbeat msg of type '" & oxPLMsg.Schema & "' from '" & oxPLMsg.Source & "'")
  Else
    ' find device id
    iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
    ' update device
    If iDeviceId Then
      Devices.ValueUpdate(iDeviceId, 1, sValue)
      Devices.ValueUpdate(iDeviceId, 2, sValue2)
      Devices.ValueUpdate(iDeviceId, 3, sValue3)
      Devices.ValueUpdate(iDeviceId, 4, sValue4)
      If sBattery Then Devices.Battery(iDeviceId, sBattery)
    Endif
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Device with address '" & sAddress & "' reported" & IIf(sValue, " value1 = '" & sValue & "'", "") & IIf(sValue2, " value2 = '" & sValue2 & "'", "") & IIf(sValue3, " value3 = '" & sValue3 & "'", "") & IIf(sValue4, " value4 = '" & sValue4 & "'", "") & IIf(sBattery, " battery Level = '" & sBattery & "'", ""))
  Endif
  Main.ControlLed("RFXCom", "Off")
  oxPLMsg = Null

End

' convert A1 to A01, leave A10+ alone
Private Sub ConvertX10Address(sAddress As String) As String

  If Len(sAddress) = 3 Then
    Return sAddress
  Else
    Try Return Left(sAddress, 1) & Format(Right(sAddress, 1), "0#")
    If Error Then Return sAddress ' must be a lights on/off
  Endif

End

Private Sub ConvertAddress(sAddr As String, Optional bNotHex As Boolean) As String

  Dim aAddress As String[]

  If $bOldAddrFmt Then
    aAddress = Split(sAddr, " ")
    If bNotHex = False Then
      Try Return UCase(aAddress[0] & "[" & Val("&H" & Replace(aAddress[1], "0x", "") & "&") & "]")
      If Error Then Return sAddr
    Else
      Try Return UCase(aAddress[0] & "[" & Replace(aAddress[1], "0x", "") & "]")
      If Error Then Return sAddr
    Endif
  Else
    Return sAddr
  Endif

End

Public Sub SendX10Basic(sTarget As String, sAddress As String, sCommand As String, Optional sProtocol As String, Optional sLevel As String)

  Dim sCmndMsg As String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  Dim sX10BasicMsg As String = "x10.basic\n{\ndevice=" & sAddress & "\ncommand=" & sCommand

  If sLevel Then sX10BasicMsg &= "\nlevel=" & sLevel
  If sProtocol Then sX10BasicMsg &= "\nprotocol=" & sProtocol ' default is X10
  sX10BasicMsg &= "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' x10.basic
  ' {
  ' device=<house code[device code]>
  ' command=on|off|dim|bright|all_lights_on|all_lights_off
  ' [level=(0-100)]
  ' [protocol=arc|flamingo|koppla|waveman|harrison|he105|rts10]
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sX10BasicMsg)

End

Public Sub SendControlBasic(sTarget As String, sDevice As String, sType As String, sCurrent As String)

  Dim sCmndMsg As String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  Dim sControlBasicMsg As String = "control.basic\n{\ndevice=" & sDevice & "\ntype=" & sType & "\ncurrent=" & sCurrent & "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' control.basic
  ' {
  ' device=(io0-io7)
  ' type=output
  ' current=high|low|toggle
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sControlBasicMsg)

End

Public Sub SendACBasic(sTarget As String, sAddress As String, sUnit As String, sCommand As String, bEU As Boolean, Optional sLevel As String)

  Dim sCmndMsg As String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  Dim sACBasicMsg As String = "ac.basic\n{\naddress=" & sAddress & "\nunit=" & sUnit & "\ncommand=" & sCommand

  If bEU Then sACBasicMsg &= "\neu=true"
  If sLevel Then sACBasicMsg &= "\nlevel=" & sLevel

  sACBasicMsg &= "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' ac.basic
  ' {
  ' address=(0x1-0x3ffffff)
  ' unit=(1-16)|group
  ' command=on|off|preset
  ' [level=(0-15)]
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sACBasicMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub SendCommand(sAddress As String, sCommand As String)

  Dim iDeviceId, iDim As Integer
  Dim sType, sLevel, sX10 As String
  Dim sCmd As String = UCase(sCommand)
  Dim aAddress As String[]

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  If InStr(sCmd, "DIM ") Then
    iDim = Val(Replace(sCmd, "DIM ", ""))
    sCmd = "DIM"
  Endif

  Select sType
    Case "X10" ' X10
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF", "DIM", "BRIGHT"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "x10")
          Case "ALL_LIGHTS_ON", "ALL_LIGHTS_OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, Left(sX10, 1), LCase(sCmd), "x10")
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for X10!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a X10 device!")
      Endif
    Case "ARC", "KAKU" ' KAKU, Chacon, HomeEasy, Nexa
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF", "DIM", "BRIGHT"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "arc")
          Case "ALL_LIGHTS_ON", "ALL_LIGHTS_OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, Left(sX10, 1), LCase(sCmd), "arc")
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for ARC!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a ARC device!")
      Endif
    Case "Flamingo" ' Flamingo
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "flamingo")
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for Flamingo!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a Flamingo device!")
      Endif
    Case "Koppla" ' Koppla
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF", "BRIGHT"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "koppla")
          Case "ALL_LIGHTS_ON", "ALL_LIGHTS_OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, Left(sX10, 1), LCase(sCmd), "koppla")
          Case "DIM"
            sLevel = CInt(iDim / 10)
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "koppla", sLevel)
          Case Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for Koppla!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a Koppla device!")
      Endif
    Case "Waveman" ' Waveman
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "waveman")
          Case "ALL_LIGHTS_ON", "ALL_LIGHTS_OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, Left(sX10, 1), LCase(sCmd), "waveman")
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for Waveman!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a Waveman device!")
      Endif
    Case "HE105" ' HomeEasy Heating HE105
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "he105")
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for HE105!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a HE105 device!")
      Endif
    Case "RTS10" ' Digimax RTS10
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF", "ALL_LIGHTS_ON", "ALL_LIGHTS_OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "rts10")
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for RTS10!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a RTS10 device!")
      Endif
    Case "Harrison" ' Harrison Curtain Control
      sX10 = MakeX10Address(sAddress)
      If Len(sX10) Then
        Select Case sCmd
          Case "ON", "OFF", "DIM", "BRIGHT", "ALL_LIGHTS_ON", "ALL_LIGHTS_OFF"
            SendX10Basic(Main.hRFXComxPL.TXAddress, sX10, LCase(sCmd), "harrison")
          Case Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for Harrison!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sX10 & "' given for a Harrison device!")
      Endif
    Case "AC", "HEUK" ' AC protocol, for units with program learn button, Chacon, KAKU, Nexa, Proove, Intertechno, Duwi , HEUK
      aAddress = Split(sAddress, " ")
      If aAddress.Count = 2 And Left(aAddress[0], 2) = "0x" Then
        Select Case sCmd
          Case "ON", "OFF"
            SendACBasic(Main.hRFXComxPL.TXAddress, aAddress[0], aAddress[1], LCase(sCmd), False)
          Case "DIM"
            sLevel = CInt(iDim / 10)
            SendACBasic(Main.hRFXComxPL.TXAddress, aAddress[0], aAddress[1], "preset", False, sLevel)
          Case Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for AC!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sAddress & "' given for a AC device!")
      Endif
    Case "HEEU" ' AC protocol, for HEEU
      aAddress = Split(sAddress, " ")
      If aAddress.Count = 2 And Left(aAddress[0], 2) = "0x" Then
        Select Case sCmd
          Case "ON", "OFF"
            SendACBasic(Main.hRFXComxPL.TXAddress, aAddress[0], aAddress[1], LCase(sCmd), True)
          Case "DIM"
            sLevel = CInt(iDim / 10)
            SendACBasic(Main.hRFXComxPL.TXAddress, aAddress[0], aAddress[1], "preset", True, sLevel)
          Case Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for AC!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sAddress & "' given for a HEEU AC device!")
      Endif
    Case "RFXLanIO"
      If Left$(sAddress, 2) = "io" And If Right$(sAddress, 1) Like "[0-7]" Then
        Select sCmd
          Case "ON"
            SendControlBasic(Main.hRFXComxPL.TXAddress, sAddress, "output", "high")
          Case "OFF"
            SendControlBasic(Main.hRFXComxPL.TXAddress, sAddress, "output", "low")
          Case "TOGGLE"
            SendControlBasic(Main.hRFXComxPL.TXAddress, sAddress, "output", "toggle")
          Case Else
            Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for RFXLanIO!")
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address '" & sAddress & "' given for a RFXLanIO device!")
      Endif
    Case "Mertik"
      Select sCmd
        Case "ON", "OFF", "STEP_UP", "STEP_DOWN", "RUN_UP", "RUN_DOWN", "STOP"
          SendControlBasic(Main.hRFXComxPL.TXAddress, sAddress, "mertik", LCase(sCmd))
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for Mertik!")
      End Select
    Case "Ninja"
      Select sCmd
        Case "LEFT", "RIGHT", "UP", "DOWN", "P1", "PROG_P1", "P2", "PROG_P2", "P3", "PROG_P3", "P4", "PROG_P4", "CENTER", "PROG_CENTER", "SWEEP", "PROG_SWEEP"
          SendControlBasic(Main.hRFXComxPL.TXAddress, sAddress, "ninja", LCase(sCmd))
        Case Else
          Main.WriteDebugLog(LogLabel & "The '" & sCmd & "' command is invalid for X10 Ninja!")
      End Select
    Default
      Main.WriteDebugLog(LogLabel & "The '" & sType & "' protocol is not supported by RFXCom xPL code!")
      Return
  End Select

End

Private Sub MakeX10Address(sAddress As String, Optional bAB As Boolean) As String

  If Len(sAddress) = 3 And If Left$(sAddress, 1) Like IIf(bAB, "[A-B]", "[A-P]") And Right$(sAddress, 1) Like "[0-9]" Then
    If Mid$(sAddress, 2, 1) = "0" Then
      Return Left$(sAddress, 1) & Right$(sAddress, 1)
    Else
      Return sAddress
    Endif
  Else
    Return ""
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' implement properties
Private Function RXAddress_Read() As String

  Return $sRXAddress

End

Private Sub RXAddress_Write(Value As String)

  $sRXAddress = Value

End

Private Function TXAddress_Read() As String

  Return $sTXAddress

End

Private Sub TXAddress_Write(Value As String)

  $sTXAddress = Value

End

Private Function GlobalX10_Read() As Boolean

  Return $bGlobalX10

End

Private Sub GlobalX10_Write(Value As Boolean)

  $bGlobalX10 = Value

End

Private Function OldAddrFmt_Read() As Boolean

  Return $bOldAddrFmt

End

Private Sub OldAddrFmt_Write(Value As Boolean)

  $bOldAddrFmt = Value

End

Private Function RFXComDebug_Read() As Boolean

  Return $bDebug

End

Private Sub RFXComDebug_Write(Value As Boolean)

  $bDebug = Value

End
