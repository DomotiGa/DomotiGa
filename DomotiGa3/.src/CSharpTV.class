' Gambas class file

' Description:
' CSharpTV.class
' Support for Sharp TV control.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Daniel Keller in 2010.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "SharpTV"
Public PluginFriendlyName As String = "Sharp TV Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Daniel Keller"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[SharpTV] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bDebug As Boolean
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String

Public hSharpTV As New Socket
Public hSharpTVSer As New SerialPort

Public sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hSharpTV.Close

  ' get a new one
  hSharpTV = New Socket As "SharpTV"
  hSharpTV.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  ' try to close the connection
  Try hSharpTVSer.Close

  ' get a new one
  hSharpTVSer = New Serialport As "SharpTVSer"
  With hSharpTVSer
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SharpTV_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SharpTV_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hSharpTV.Close
  Try hSharpTVSer.Close

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SharpTV_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SharpTV_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command via serial port or tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendCmd(sCmd As String) As String

  Select Case Len(sCmd)
    Case 4
      sCmd = sCmd & "    "
    Case 5
      sCmd = sCmd & "   "
    Case 6
      sCmd = sCmd & "  "
    Case 7
      sCmd = sCmd & " "
    Case 8
      ' ok
    Case Else
      Main.WriteLog(LogLabel & "Error in sending command, lenght of string is wrong " & sCmd)
  End Select

  If $bDebug Then Main.WriteLog(LogLabel & "Sending " & sCmd & " to Receiver.")
  If $sInterface = "tcp" Then
    Try Write #hSharpTV, sCmd & Chr$(13), Len(sCmd) + 1
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the TCP port! -> " & Error.Text)
  Else
    Try Write #hSharpTVSer, sCmd & Chr$(13), Len(sCmd) + 1
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the serial port! -> " & Error.Text)
  Endif

  ' needs a short break otherwise not all data are correct
  Sleep 0.1
  Return ReceiveData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get the response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ReceiveData() As String

  Dim iTries As Integer = 30
  Dim sData As String

  ' see if we got some data
  While iTries > 0
    Try Line Input #hSharpTV, sData
    If Error Then
      ' not yet
      Sleep 0.01
    Else
      ' got it
      Break
    Endif
    Dec iTries
  Wend
  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sData)

  'PRINT "ReceiveData: " & Trim(sData)
  Return Trim(sData)

End

Private Sub SendCheckResponse(sCmd As String) As Integer

  ' send command like "POWR1   " and returns TRUE if "OK" or FALSE when something else
  ' just to see if sending command is correct

  If InStr(SendCmd(sCmd), "OK") Then
    Return True
  Else
    Return False
  Endif

End

Private Sub Power(sState As String) As Variant
  ' ON/OFF (returns TRUE) or ? (returns the state)
  ' command = POWR
  ' argument 1 = On, 0 = Off, ? = actual state (send ????)

  Dim sReceive As String
  Dim sItem As String = "Power"

  Select Case LCase(sState)
    Case "on"
      If SendCheckResponse("POWR1") Then
        SharpTVSetValue(sItem, "On")
        Return "On"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Power ON to TV")
      Endif
   Case "off"
      If SendCheckResponse("POWR0") Then
        SharpTVSetValue(sItem, "Off")
        Return "Off"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Power Off to TV")
      Endif
   Case "?"
    sReceive = SendCmd("POWR????")
    If sReceive = "1" Then
      SharpTVSetValue(sItem, "On")
      Return "On"
    Else If sReceive = "0" Then
      SharpTVSetValue(sItem, "Off")
      Return "Off"
    Else
      If $bDebug Then Main.WriteLog(LogLabel & "Received wrong answer for command Power(?) (" & sReceive & ")")
    Endif
  End Select

End

Private Sub AVMode(sState As String) As Variant
  ' command: AVMD
  ' parameter: 0 = Toggle, 1 = Standard, 2 = Movie, 3 = Game, 4 = User, 5 = Dynamic konstant, 6 = Dynamic, 7 = PC, 100 = Auto, ? = actual state (send ????)

  Dim sReceive As String
  Dim sItem As String = "AVMode"

  Select Case sState
    Case "1" To "7"
      If SendCheckResponse("AVMD" & sState) Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending AVMD-Command (TV Mode) to TV!")
      Endif
    Case "100"
      If SendCheckResponse("AVMD" & sState) Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending AVMD-Command (TV Mode) to TV!")
      Endif
    Case "?"
    sReceive = SendCmd("AVMD????")
    SharpTVSetValue(sItem, sReceive)
  End Select

End

Private Sub Wide(sState As String) As Variant
  ' command: WIDE
  ' parameter: 0 = Toggle (AV), 1 = Normal (AV), 2 = Zoom 14:9 (AV), 3 = Panorama (AV), 4 = Full (AV), 5 = Cinema 16:9 (AV)
  '            6 = Cinema 14:9 (AV), 7 = Normal (PC), 8 = Cinema (PC), 9 = Full (PC), 10 = Each Point (AV/PC)
  '            11 = underscan (AV), ? = actual state (send ????)

  Dim sReceive As String
  Dim sItem As String = "WideModus"

  Select Case sState
    Case "1" To "11"
      If SendCheckResponse("WIDE" & sState) Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending WIDE-Command to TV!")
      Endif
    Case "?"
      sReceive = SendCmd("WIDE????")
      SharpTVSetValue(sItem, sReceive)
  End Select

End

Private Sub Volume(sState As String) As Variant
  ' command: VOLM
  ' parameter: 0 - 60, ? = actual state (send ????)

  Dim sReceive As String
  Dim sItem As String = "Volume"

  Select Case sState
    Case "0" To "60"
      If SendCheckResponse("VOLM" & sState) Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending VOLM-Command to TV!")
      Endif
    Case "?"
      sReceive = SendCmd("VOLM????")
      SharpTVSetValue(sItem, sReceive)
  End Select

End

' command: CHUP/CHDW, DCCH (1-99) for TV channel
' call with TVChannel Up/Down or 1-99
Private Sub TVChannel(sState As String) As Variant

  Select Case LCase(sState)
    Case "1" To "99"
      If SendCheckResponse("DCCH" & sState) Then
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending TV-Channel-Command to TV!")
        Return False
      Endif
    Case "up"
      If SendCheckResponse("CHUP") Then
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending TV-Channel-UP-Command to TV!")
        Return False
      Endif
    Case "down"
      If SendCheckResponse("CHDW") Then
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending TV-Channel-DOWN-Command to TV!")
        Return False
      Endif
  End Select

End

' command: CHUP/CHDW, DCCH (1-999 or 1-9999) for Digital TV channel
' call with TVChannel Up/Down or 1-999 or 1-9999
Private Sub DTVChannel(sState As String) As Variant

  Select Case LCase(sState)
    Case "1" To "9999"
      If SendCheckResponse("DTVD" & sState) Then
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending DTV-Channel-Command to TV!")
        Return False
      Endif
    Case "up"
      If SendCheckResponse("DTUP") Then
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending DTV-Channel-UP-Command to TV!")
        Return False
      Endif
   Case "down"
      If SendCheckResponse("DTDW") Then
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending DTV-Channel-DOWN-Command to TV!")
        Return False
      Endif
  End Select

End

Private Sub Input(sState As String) As Variant
  ' command: see in code

  Dim sReceive As String
  Dim sItem As String = "Input"

  Select Case LCase(sState)
    Case "tv"
      ' switch to fixed TV Channel
      If SendCheckResponse("ITVD") Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending ITVD-Command to TV!")
      Endif
    Case "dtv"
      ' switch to fixed Digital-TV Channel
      If SendCheckResponse("IDTV") Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending IDTV-Command to TV!")
      Endif
    Case "1" To "9"
      If SendCheckResponse("IAVD" & sState) Then
        SharpTVSetValue(sItem, sState)
        Return sState
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending IAVD-Command to TV!")
      Endif
    Case "?"
      sReceive = SendCmd("IAVD????")
      SharpTVSetValue(sItem, sReceive)
  End Select

End

Private Sub Mute(sState As String) As Variant
  ' ON/OFF (returns TRUE) or ? (returns the state)
  ' command = MUTE
  ' argument 1 = On, 2 = Off, ? = actual state (send ????), 0 = toggle (not implemented)

  Dim sReceive As String
  Dim sItem As String = "Mute"

  Select Case LCase(sState)
    Case "on"
      If SendCheckResponse("MUTE1") Then
        SharpTVSetValue(sItem, "On")
        Return "On"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Mute ON to TV!")
      Endif
    Case "off"
      If SendCheckResponse("MUTE2") Then
        SharpTVSetValue(sItem, "Off")
        Return "Off"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Mute OFF to TV!")
      Endif
    Case "?"
    sReceive = SendCmd("MUTE????")
    If sReceive = "1" Then
      SharpTVSetValue(sItem, "On")
      Return "On"
    Else If sReceive = "2" Then
      SharpTVSetValue(sItem, "Off")
      Return "Off"
    Else
      If $bDebug Then Main.WriteLog(LogLabel & "Received wrong answer for command Mute(?) (" & sReceive & ")")
    Endif
  End Select

End

Private Sub Surround(sState As String) As Variant
  ' ON/OFF (returns TRUE) or ? (returns the state ON or OFF)
  ' command = ACSU
  ' argument 1 = On, 2 = Off, ? = actual state (send ????), 0 = toggle (not implemented)

  Dim sReceive As String
  Dim sItem As String = "Surround"

  Select Case LCase(sState)
    Case "on"
      If SendCheckResponse("ACSU1") Then
        SharpTVSetValue(sItem, "On")
        Return "On"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Surround ON to TV!")
      Endif
    Case "off"
      If SendCheckResponse("ACSU2") Then
        SharpTVSetValue(sItem, "Off")
        Return "Off"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Surround OFF to TV!")
      Endif
    Case "?"
        sReceive = SendCmd("ACSU????")
      If sReceive = "1" Then
        SharpTVSetValue(sItem, "On")
        Return "On"
      Else If sReceive = "2" Then
        SharpTVSetValue(sItem, "Off")
        Return "Off"
      Else
        If $bDebug Then Main.WriteLog(LogLabel & "Received wrong answer for command Surround(?) (" & sReceive & ")")
      Endif
  End Select

End

' command: TEXT for Teletext
' parameter: 1000 - 899 for page, 0 for off, 1 for on
Private Sub Text(sState As String) As Variant

  Dim sItem As String = "Text"

  Select Case LCase(sState)
    Case "on"
      If SendCheckResponse("TEXT1") Then
        SharpTVSetValue(sItem, "On")
        Return "On"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Text ON to TV!")
      Endif
    Case "off"
      If SendCheckResponse("TEXT0") Then
        SharpTVSetValue(sItem, "Off")
        Return "Off"
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Text OFF to TV!")
      Endif
    Case "100" To "899"
      If SendCheckResponse("DCPG" & sState) Then
        SharpTVSetValue(sItem, sState)
        Return True
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Text-Command to TV!")
        Return False
      Endif
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' to control from json-rpc or music page buttons
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetCommand(sCmd As String, sValue As String, sAddress As String)

  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "power"
      ' on,off
      Power(sValue)
    Case "volume"
      ' 0-60
      Volume(sValue)
    Case "mute"
      ' on,off
      Mute(sValue)
    Case "avmode"
      ' 1-7,100
      AVMode(sValue)
    Case "wide"
      ' 1-11
      Wide(sValue)
    Case "input"
      ' tv,dtv,1-9
      Input(sValue)
    Case "tvchannel"
      ' 1-99,up,down
      TVChannel(sValue)
    Case "dtvchannel"
      ' 1-9999,up,down
      DTVChannel(sValue)
    Case "surround"
      ' on,off
      Surround(sValue)
    Case "text"
      ' on,off,100-899
      Text(sValue)
    Case "cli"
      SendCmd(sValue)
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported command received: " & sValue)
  End Select

End

Public Sub GetCommand(sCmd As String, sAddress As String) As String

  ' ignore sAddress, only fixed unit
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "power"
      Return Power("?")
    Case "volume"
      Return Volume("?")
    Case "mute"
      Return Mute("?")
    Case "avmode"
      Return AVMode("?")
    Case "wide"
      Return Wide("?")
    Case "input"
      Return Input("?")
    Case "surround"
      Return Surround("?")
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported get value received: " & sCmd)
      Return ""
  End Select

End

Private Sub SharpTVSetValue(sItem As String, vValue As Variant)

  Main.SetGlobalVar("SharpTV_" & sItem, vValue)
  If $bDebug Then Main.WriteLog(LogLabel & "Received Item: " & sItem & " Value: " & vValue)

End

