' Gambas class file

' Description:
' FActionScriptEditor.class
' Support for creating and editing action scripts.

' Development Status:
' Just started, not working 100% yet.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public tMessage As New Timer
Private sScript As String
Private sScriptOrg As String

Public Sub Run(sEval As String) As String

  sScript = sEval
  sScriptOrg = sEval
  If Not Me.ShowModal() Then Return sScriptOrg
  Return sScript

End

Public Sub Form_Open()

  ' give focus to first field
  txtScript.SetFocus

  LoadTreeView()

  If Not Len(sScript) Then Me.Text = ("Create Script")
  txtScript.Text = sScript

  Me.Move(FMain.X + 50, FMain.Y + 70)

  tMessage = New Timer As "tMessage"
  tMessage.Delay = 3000 ' 3 seconds
  tMessage.Stop

End

Public Sub btnCancel_Click()

  sScript = sScriptOrg
  Me.Close(True)

End

Public Sub btnSave_Click()

  sScript = txtScript.Text
  Me.Close(True)

End

Public Sub txtScript_Change()

  btnSave.Enabled = True

End

Public Sub LoadVariables(sParent As String)

  Dim cGV As CGlobalVarEntry

  tvVariables.Add(Left(sParent, 3), sParent)
  For Each cGV In Main.GlobalVar
    LoadItem(Main.GlobalVar.Key, Main.GlobalVar.Key, Left(sParent, 3))
  Next

End

Public Sub LoadDevices(sParent As String)

  Dim rResult As Result
  Dim sKey As String

  tvVariables.Add(Left(sParent, 3), sParent)

  rResult = Devices.GetDevicesAndValues(["sortOrder": "name"])

  If Not rResult Then
    LoadItem("ERROR", "Error: table 'devices' not found!", Left(sParent, 3))
    Return
  Endif

  For Each rResult
    sKey = Left(sParent, 3) & "_" & rResult!device_id
    If Not tvVariables.Exist(sKey) Then
      tvVariables.Add(sKey, rResult!device_name & " (" & rResult!device_id & ")",, Left(sParent, 3))
      LoadItem("LastChanged", "LastChanged", sKey)
      LoadItem("LastSeen", "LastSeen", sKey)
      LoadItem("BatteryStatus", "BatteryStatus", sKey)
    Endif
    LoadItem("Value" & rResult!device_value_valuenum, "Value" & rResult!device_value_valuenum, sKey)
  Next

End

Public Sub LoadEvents(sParent As String)

  Dim iCount As Integer
  Dim rResult As Result

  tvVariables.Add(Left(sParent, 3), sParent)

  rResult = Main.hDB.Exec("SELECT * FROM events  ORDER BY name")
  If Not rResult Then
    LoadItem("ERROR", "Error: table 'events' not found!", Left(sParent, 3))
    Return
  Endif

  For iCount = 0 To rResult.Max
    LoadItem(rResult!id, rResult!name, Left(sParent, 3))
    rResult.MoveNext
  Next

End

Public Sub LoadMacros(sParent As String)

  Dim iCount As Integer
  Dim rResult As Result
  Dim sSql As String
  
  tvVariables.Add(Left(sParent, 3), sParent)
  
  sSql = "SELECT * FROM macros"
  rResult = Main.hDB.Exec(sSql)
  If Not rResult Then
    LoadItem("ERROR", "Error: table 'macro' not found!", Left(sParent, 3))
    Return
  Endif

  For iCount = 0 To rResult.Max
    tvVariables.Add("Macro_" & rResult!name, "Macro_" & rResult!name,, Left(sParent, 3))
    rResult.MoveNext
  Next

Catch

End

Public Sub LoadThermostats()

  Dim sSubText, sSubKey, sParent As String
  Dim iCount As Integer
  Dim rResult As Result
  Dim sSql As String
   
  sParent = "Thermostats"

  tvVariables.Add(Left(sParent, 3), sParent)

  sSubText = "Heatings"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
 
  sSql = "SELECT * FROM thermostat_heating"
  rResult = Main.hDB.Exec(sSql)
  If Not rResult Then
    LoadItem("ERROR", "Error: table 'thermostat_heating' not found!", Left(sParent, 3))
    Return
  Endif

  For iCount = 0 To rResult.Max
    tvVariables.Add("Hea_" & rResult!id, rResult!name,, sSubKey)
    rResult.MoveNext
  Next

End

Public Sub LoadFunctions(sParent As String)

  Dim sSubText, sSubKey As String

  tvVariables.Add(Left(sParent, 3), sParent)

  LoadItem("if", "If(<Cond>, <TrueExpr>, <FalseExpr>)", Left(sParent, 3))

  sSubText = "Math"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("max", "Max(<Expr>, <Expr>)", sSubKey)
  LoadItem("min", "Min(<Expr>, <Expr>)", sSubKey)
  LoadItem("abs", "Abs(<Expr>)", sSubKey)
  LoadItem("frac", "Frac(<Expr>)", sSubKey)
  LoadItem("int", "Int(<Expr>)", sSubKey)
  LoadItem("sgn", "Sgn(<Expr>)", sSubKey)
  LoadItem("round", "Round(<Expr>)", sSubKey)
  LoadItem("rnd", "Rnd([<Min>], [<Max>])", sSubKey)

  sSubText = "Date"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("time", "Time(<Hours>, <Minutes>, <Seconds>)", sSubKey)
  LoadItem("date", "Date(<Year>, <Month>, <Day>)", sSubKey)
  LoadItem("now", "Now()", sSubKey)
  LoadItem("second", "Second(<Date>)", sSubKey)
  LoadItem("minute", "Minute(<Date>)", sSubKey)
  LoadItem("hour", "Hour(<Date>)", sSubKey)
  LoadItem("day", "Day(<Date>)", sSubKey)
  LoadItem("week", "Week(<Date>)", sSubKey)
  LoadItem("weekday", "WeekDay(<Date>)", sSubKey)
  LoadItem("month", "Month(<Date>)", sSubKey)
  LoadItem("quarter", "Quarter(<Date>)", sSubKey)
  LoadItem("year", "Year(<Date>)", sSubKey)
  LoadItem("datediff", "DateDiff(<Date1>, <Date2>, <Period>)", sSubKey)
  LoadItem("dateadd", "DateAdd(<Date>, <Period>, <Count>)", sSubKey)

  sSubText = "Period"
  tvVariables.Add(sSubKey & "_" & sSubText, sSubText,, sSubKey)
  sSubKey = sSubKey & "_" & sSubText
  LoadItem("gbsecond", "gb.Second", sSubKey)
  LoadItem("gbminute", "gb.Minute", sSubKey)
  LoadItem("gbhour", "gb.Hour", sSubKey)
  LoadItem("gbday", "gb.Day", sSubKey)
  LoadItem("gbweek", "gb.Week", sSubKey)
  LoadItem("gbweekday", "gb.WeekDay", sSubKey)
  LoadItem("gbmonth", "gb.Month", sSubKey)
  LoadItem("gbquarter", "gb.Quarter", sSubKey)
  LoadItem("gbyear", "gb.Year", sSubKey)

  sSubText = "String"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("left", "Left(<Expr>, <Length>)", sSubKey)
  LoadItem("right", "Right(<Expr>, <Length>)", sSubKey)
  LoadItem("mid", "Mid(<Expr>, <Start>, <Length>)", sSubKey)
  LoadItem("trim", "Trim(<Expr>)", sSubKey)
  LoadItem("replace", "Replace(<Expr>, <Pattern>, <ReplaceString>)", sSubKey)
  LoadItem("len", "Len(<Expr>)", sSubKey)
  LoadItem("format", "Format(<Expr>, [<Format>])", sSubKey)

  sSubText = "Conversion"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("cfloat2", "CFloat(Replace(<Expr>, \", \", \".\", gb.String))", sSubKey)
  LoadItem("cbool", "CBool(<Expr>)", sSubKey)
  LoadItem("cdate", "CDate(<Expr>)", sSubKey)
  LoadItem("cfloat", "CFloat(<Expr>)", sSubKey)
  LoadItem("cint", "CInt(<Expr>)", sSubKey)
  LoadItem("cstr", "CStr(<Expr>)", sSubKey)

End

Public Sub LoadOperators(sParent As String)

  tvVariables.Add(Left(sParent, 3), sParent)
  LoadItem("=", "=", Left(sParent, 3))
  LoadItem("<=", "<=", Left(sParent, 3))
  LoadItem(">=", ">=", Left(sParent, 3))
  LoadItem("<>", "<>", Left(sParent, 3))
  LoadItem("==", "==", Left(sParent, 3))
  LoadItem("(", "(", Left(sParent, 3))
  LoadItem(")", ")", Left(sParent, 3))
  LoadItem("And", "And", Left(sParent, 3))
  LoadItem("Or", "Or", Left(sParent, 3))
  LoadItem("Not", "Not", Left(sParent, 3))

End

Public Sub LoadItem(sKey As String, sText As String, sParent As String)

  tvVariables.Add(sParent & "_" & sKey, sText,, sParent)

End

Public Sub LoadActions(sParent As String)

  Dim sSubText, sSubKey As String

  tvVariables.Add(Left(sParent, 3), sParent)

  sSubText = "Devices"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("devices.valueupdate", "Devices.ValueUpdate(<DeviceId>, <ValueNum>, <Value>)", sSubKey)
  LoadItem("devices.setdevice", "Devices.SetDevice(<DeviceId>, <Value>)", sSubKey)

  sSubText = "Events"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("events.changeeventstate", "Events.ChangeEventState(<Id>, <State>)", sSubKey)

  sSubText = "Messaging"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("twitter.posttweet", "Twitter.PostTweet(\"<Msg>\")", sSubKey)
  LoadItem("mail", "Mail.SendMail(\"<Subject>\", \"<Body>\", OPTIONAL \"<To>\")", sSubKey)

  sSubText = "Status"
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("devices.mailbatterystatus", "Devices.MailBatteryStatus([\"all\"|\"empty\"])", sSubKey)

  sSubText = "Misc."
  sSubKey = Left(sParent, 3) & "_" & sSubText
  tvVariables.Add(sSubKey, sSubText,, Left(sParent, 3))
  LoadItem("main.setglobalvar", "Main.SetGlobalVar(<Name>,<Value>,OPTIONAL <Broadcast>)", sSubKey)

End

Public Sub LoadTreeView()

  tvVariables.Clear
  LoadVariables("Variables")
  LoadDevices("Devices")
  LoadEvents("Events")
  LoadFunctions("Functions")
  LoadOperators("Operators")
  LoadActions("Actions")
  LoadMacros("Macros")
  LoadThermostats()

End

Public Sub btnAdd_Click()

  tvVariables_DblClick

End

Public Sub tvVariables_Click()

  Dim vVal As Variant
  Dim sVal As String
  Dim aScan As String[]

  If tvVariables.Current.Children = 0 Then
    If Left(tvVariables.Current.Key, 3) = "Var" Then
      ' here the variable value is fetched
      Try vVal = Main.GetGlobalVar(Right(tvVariables.Current.Key, Len(tvVariables.Current.Key) - 4))
      If gb.Boolean = TypeOf(vVal) Then
        sVal = Main.DisplayBool(vVal)
      Else
        sVal = vVal
      Endif
      txtCurrentValue.Text = sVal
    Else If Left(tvVariables.Current.Key, 3) = "Dev" Then
      ' here the device value is fetched
      aScan = Split(tvVariables.Current.Key, "_")
      If aScan.Count = 3 Then
        Try txtCurrentValue.Text = Devices.GetValueForDevice(aScan[1], aScan[2])
      Endif
    Else If Left(tvVariables.Current.Key, 3) = "Eve" Then
      txtCurrentValue.Text = ""
    Else If Left(tvVariables.Current.Key, 3) = "The" Then
      txtCurrentValue.Text = ""
    Endif
  Endif

End

Public Sub tvVariables_DblClick()

  Dim sVal As String

  If tvVariables.Current.Children = 0 Then
    If Left(tvVariables.Current.Key, 3) = "Var" Then
      ' here a Variable is added to the formula
      sVal = tvVariables.Current.Key
    Else If Left(tvVariables.Current.Key, 3) = "Dev" Then
      ' here a Device value is added to the formula
      sVal = tvVariables.Current.Key
    Else If Left(tvVariables.Current.Key, 3) = "Eve" Then
     ' here a Event id is added to the formula
      sVal = Mid(tvVariables.Current.key, 5)
    Else If Left(tvVariables.Current.Key, 3) = "Hea" Then
     ' here a  Heating id is added to the formula
      sVal = Mid(tvVariables.Current.key, 5)
    Else
      sval = tvVariables.Current.Text
    Endif
    txtScript.Insert(sVal)
  Endif

End

Public Sub btnEval_Click()

  Dim sToEval As String

  ' if a part of the formula is selected, we only elvaluate this part
  If txtScript.Selection.Length = 0 Then
    sToEval = txtScript.Text
  Else
    sToEval = txtScript.Selection.Text
  Endif

  txtEvalResult.Text = Events.EvalFormula(sToEval)
  tMessage.Start

End

Public Sub btnClear_Click()

  txtScript.Clear

End

Public Sub tMessage_Timer()

  txtEvalResult.Text = ""
  tMessage.Stop

End
