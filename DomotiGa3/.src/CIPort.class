' Gambas class file

' Description:
' CIPort.class
' Provide basic support for iPort dock.

' Development Status:
' Just started developing this one, not complete yet.

' Links:
' http://www.iportmusic.com

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "IPort"
Public PluginFriendlyName As String = "iPort Dock"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[IPort] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bDebug As Boolean
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String

Public hIPort As New Socket
Public hIPortSer As New SerialPort

Private bFirstByte As Boolean = True
Private iLength As Integer
Private iByteCount As Integer
Private RecBuf As New Byte[255]

' packets defines
Private Const START_CHAR As Byte = &H2A

' device types
Private Const DEVICE_TYPE_IPORT As Byte = &H49
Private Const DEVICE_TYPE_LED As Byte = &H4D

' command types
Private Const CMD_TYPE_TWO_WAY As Byte = &H38
Private Const CMD_TYPE_GENERAL As Byte = &H3C
Private Const CMD_TYPE_LED_CONTROL As Byte = &H01

' packet command type = &H38: TWO WAY
Private Const TWO_WAY_COMMAND_HIGH_BYTE As Byte = &H3C

Private Const TWO_WAY_SELECT_SORT_DB_RECORD As Byte = &H04
Private Const TWO_WAY_GET_NUM_PLAYING_SONGS As Byte = &H09
Private Const TWO_WAY_RETURN_NUM_PLAYING_SONGS As Byte = &H0A
Private Const TWO_WAY_SET_CURRENT_PLAYING_SONG As Byte = &H0B
Private Const TWO_WAY_RETURN_REPEAT As Byte = &H0C
Private Const TWO_WAY_SET_REPEAT As Byte = &H0D
Private Const TWO_WAY_GET_SHUFFLE As Byte = &H10
Private Const TWO_WAY_RETURN_SHUFFLE As Byte = &H11
Private Const TWO_WAY_SET_SHUFFLE As Byte = &H12
Private Const TWO_WAY_GET_REPEAT As Byte = &H13
Private Const TWO_WAY_PLAY_CURRENT_SELECTION As Byte = &H14
Private Const TWO_WAY_PLAY_CONTROL As Byte = &H15
Private Const TWO_WAY_GET_INDEXED_PLAYING_SONG_ALBUM_NAME As Byte = &H18
Private Const TWO_WAY_RETURN_INDEXED_PLAYING_SONG_ALBUM_NAME As Byte = &H19
Private Const TWO_WAY_SET_PLAY_STATUS_CHANGE_NOTIFICATION As Byte = &H1A
Private Const TWO_WAY_RETURN_PLAY_STATUS_CHANGE_NOTIFICATION As Byte = &H1B
Private Const TWO_WAY_GET_INDEXED_PLAYING_SONG_TITLE As Byte = &H1C
Private Const TWO_WAY_RETURN_INDEXED_PLAYING_SONG_TITLE As Byte = &H1D
Private Const TWO_WAY_GET_INDEXED_PLAYING_SONG_ARTIST_NAME As Byte = &H1E
Private Const TWO_WAY_RETURN_INDEXED_PLAYING_SONG_ARTIST_NAME As Byte = &H1F
Private Const TWO_WAY_GET_PLAY_STATUS As Byte = &H20
Private Const TWO_WAY_RETURN_PLAY_STATUS As Byte = &H21
Private Const TWO_WAY_GET_CURRENT_PLAYING_SONG_INDEX As Byte = &H22
Private Const TWO_WAY_RETURN_CURRENT_PLAYING_SONG_INDEX As Byte = &H23
Private Const TWO_WAY_GET_NUMBER_CATEGORIZED_DB_RECORDS As Byte = &H24
Private Const TWO_WAY_RETURN_NUMBER_CATEGORIZED_DB_RECORDS As Byte = &H25
Private Const TWO_WAY_RETRIEVE_CATEGORIZED_DB_RECORDS As Byte = &H26
Private Const TWO_WAY_RETURN_CATEGORIZED_DB_RECORDS As Byte = &H27
Private Const TWO_WAY_REQUEST_IPOD_NAME As Byte = &H28
Private Const TWO_WAY_RETURN_IPOD_NAME As Byte = &H29
Private Const TWO_WAY_RESET_DB_SELECTION As Byte = &H2A
Private Const TWO_WAY_SELECT_DB_RECORD As Byte = &H2B
Private Const TWO_WAY_ACKNOWLEDGE As Byte = &H3D

' packet command type =  &H3C: GENERAL
Private Const GENERAL_COMMAND_HIGH_BYTE As Byte = &H3C

Private Const GENERAL_RETURN_REMOTE_UI_MODE As Byte = &H38
Private Const GENERAL_ENTER_REMOTE_UI_MODE As Byte = &H39
Private Const GENERAL_EXIT_REMOTE_UI_MODE As Byte = &H3A
Private Const GENERAL_ACKNOWLEDGE As Byte = &H3E
Private Const GENERAL_REQUEST_REMOTE_UI_MODE As Byte = &H3F

' packet command type =  &H01: LED
Private Const LED_COMMAND_HIGH_BYTE As Byte = &H00

Private Const LED_ON_OFF_DOCKED As Byte = &H01
Private Const LED_ON_OFF_UNDOCKED As Byte = &H02
Private Const LED_BRIGHTNESS_DOCKED As Byte = &H03
Private Const LED_BRIGHTNESS_UNDOCKED As Byte = &H04
Private Const LED_IPOD_DOCKED As Byte = &H06

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sinterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hIPort.Close

  ' get a new one
  hIPort = New Socket As "IPort"
  hIPort.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  ' try to close the port
  Try hIPortSer.Close

  ' get a new one
  hIPortSer = New Serialport As "IPortSer"

  With hIPortSer
    .PortName = $sSerPort
    .Speed = 19200
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IPort_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IPort_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IPort_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect the serialport or close tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hIPort.Close
  Try hIPortSer.Close

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IPort_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' to control from json-rpc or music page buttons
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetCommand(sCmd As String, sValue As String, sAddress As String)

  ' commands here are for IW-21/IW-22
  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case "requestipodname"
      RequestiPodName()
    Case "playctrl", "play"
      Select Case (sValue)
        Case "play", "next", "stop", "prev", "startff", "startrew", "endffrew"
          PlayControl(sValue)
      End Select
    Case "ledctrl", "leddocked"
      Select Case LCase(sValue)
        Case "on", "off"
          LEDControlDocked(sValue)
        Case "dim", "medium", "bright"
          LEDBrightnessDocked(sValue)
      End Select
    Case "ledundocked"
      Select Case LCase(sValue)
        Case "on", "off"
          LEDControlDocked(sValue)
        Case "dim", "medium", "bright"
          LEDBrightnessUnDocked(sValue)
      End Select
    Case "requestplayingsongindex"
      RequestCurrentPlayingSongIndex()
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported set command received: " & sCmd & " " & sValue)
  End Select

End

Public Sub GetCommand(sCmd As String, sAddress As String)

  ' ignore sAddress, only fixed unit 1
  sAddress = sAddress
  Select Case LCase(sCmd)
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unsupported get value received: " & sCmd)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send requestipodname command to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub RequestiPodName()

  Dim bBuf As New Byte[8]

  bBuf[0] = START_CHAR
  bBuf[1] = DEVICE_TYPE_IPORT
  bBuf[2] = &H00
  bBuf[3] = &H03
  bBuf[4] = CMD_TYPE_TWO_WAY
  bBuf[5] = TWO_WAY_COMMAND_HIGH_BYTE
  bBuf[6] = TWO_WAY_REQUEST_IPOD_NAME
  bBuf[7] = CheckSum(bBuf)

  Print SendCmd(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send request current playing song index
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub RequestCurrentPlayingSongIndex()

  Dim bBuf As New Byte[8]

  bBuf[0] = START_CHAR
  bBuf[1] = DEVICE_TYPE_IPORT
  bBuf[2] = &H00
  bBuf[3] = &H03
  bBuf[4] = CMD_TYPE_TWO_WAY
  bBuf[5] = TWO_WAY_COMMAND_HIGH_BYTE
  bBuf[6] = TWO_WAY_GET_CURRENT_PLAYING_SONG_INDEX
  bBuf[7] = CheckSum(bBuf)

  Print SendCmd(bBuf)

End

' '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ' send request playing songs
' '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' PRIVATE SUB RequestiPodName()
'
'   DIM bBuf AS Byte[8]
'
'   bBuf[0] = START_CHAR
'   bBuf[1] = DEVICE_TYPE_IPORT
'   bBuf[2] = &H00
'   bBuf[3] = &H03
'   bBuf[4] = CMD_TYPE_TWO_WAY
'   bBuf[5] = TWO_WAY_COMMAND_HIGH_BYTE
'   bBuf[6] = TWO_WAY_REQUEST_IPOD_NAME
'   bBuf[7] = CheckSum(bBuf)
'
'   PRINT SendCmd(bBuf)
'
' END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send playcontrol type commands to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub PlayControl(sCmd As String)

  Dim bBuf As New Byte[9]

  bBuf[0] = START_CHAR
  bBuf[1] = DEVICE_TYPE_IPORT
  bBuf[2] = &H00
  bBuf[3] = &H04
  bBuf[4] = CMD_TYPE_TWO_WAY
  bBuf[5] = TWO_WAY_COMMAND_HIGH_BYTE
  bBuf[6] = TWO_WAY_PLAY_CONTROL ' playcontrol
  Select Case LCase(sCmd) ' cmd
    Case "play"
      bBuf[7] = &H01
    Case "stop"
      bBuf[7] = &H02
    Case "next"
      bBuf[7] = &H03
    Case "prev"
      bBuf[7] = &H04
    Case "startff"
      bBuf[7] = &H05
    Case "startrew"
      bBuf[7] = &H06
    Case "endffrew"
      bBuf[7] = &H07
  End Select
  bBuf[8] = CheckSum(bBuf)

  SendCmd(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send ledcontrol type commands to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LEDControlDocked(sLed As String)

  Dim bBuf As New Byte[9]

  bBuf[0] = START_CHAR ' start char
  bBuf[1] = DEVICE_TYPE_LED ' device type
  bBuf[2] = &H00 ' packet length high byte
  bBuf[3] = &H04 ' low byte
  bBuf[4] = CMD_TYPE_LED_CONTROL ' packet command type
  bBuf[5] = LED_COMMAND_HIGH_BYTE ' packet command high byte
  bBuf[6] = LED_ON_OFF_DOCKED ' packet command low byte
  bBuf[7] = IIf(sLed == "on", &H01, &H00) ' led mode
  bBuf[8] = CheckSum(bBuf)

  SendCmd(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send ledcontrol type commands to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LEDControlUnDocked(sLed As String)

  Dim bBuf As New Byte[9]

  bBuf[0] = START_CHAR ' start char
  bBuf[1] = DEVICE_TYPE_LED ' device type
  bBuf[2] = &H00 ' packet length high byte
  bBuf[3] = &H04 ' low byte
  bBuf[4] = CMD_TYPE_LED_CONTROL ' packet command type
  bBuf[5] = LED_COMMAND_HIGH_BYTE ' packet command high byte
  bBuf[6] = LED_ON_OFF_UNDOCKED ' packet command low byte
  bBuf[7] = IIf(sLed == "on", &H01, &H00) ' led mode
  bBuf[8] = CheckSum(bBuf)

  SendCmd(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send ledbrightness docked type commands to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LEDBrightnessDocked(sLed As String)

  Dim bBuf As New Byte[9]

  bBuf[0] = START_CHAR ' start char
  bBuf[1] = DEVICE_TYPE_LED ' device type
  bBuf[2] = &H00 ' packet length high byte
  bBuf[3] = &H04 ' low byte
  bBuf[4] = CMD_TYPE_LED_CONTROL ' packet command type
  bBuf[5] = LED_COMMAND_HIGH_BYTE ' packet command high byte
  bBuf[6] = LED_BRIGHTNESS_DOCKED ' packet command low byte
  Select Case LCase(sLed)
    Case "dim"
      bBuf[7] = &H01
    Case "medium"
      bBuf[7] = &H02
    Case "bright"
      bBuf[7] = &H03
  End Select

  bBuf[8] = CheckSum(bBuf)

  SendCmd(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send ledbrightness undocked type commands to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LEDBrightnessUnDocked(sLed As String)

  Dim bBuf As New Byte[9]

  bBuf[0] = START_CHAR ' start char
  bBuf[1] = DEVICE_TYPE_LED ' device type
  bBuf[2] = &H00 ' packet length high byte
  bBuf[3] = &H04 ' low byte
  bBuf[4] = CMD_TYPE_LED_CONTROL ' packet command type
  bBuf[5] = LED_COMMAND_HIGH_BYTE ' packet command high byte
  bBuf[6] = LED_BRIGHTNESS_UNDOCKED ' packet command low byte
  Select Case LCase(sLed)
    Case "dim"
      bBuf[7] = &H01
    Case "medium"
      bBuf[7] = &H02
    Case "bright"
      bBuf[7] = &H03
  End Select

  bBuf[8] = CheckSum(bBuf)

  SendCmd(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' requests the database index of the currently playing song
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetCurrentPlayingSongIndex()

  Dim bBuf As New Byte[8]

  bBuf[0] = START_CHAR ' start char
  bBuf[1] = DEVICE_TYPE_IPORT ' device type
  bBuf[2] = &H00 ' packet length high byte
  bBuf[3] = &H04 ' low byte
  bBuf[4] = CMD_TYPE_TWO_WAY ' packet command type
  bBuf[5] = TWO_WAY_COMMAND_HIGH_BYTE ' packet command high byte
  bBuf[6] = TWO_WAY_GET_CURRENT_PLAYING_SONG_INDEX ' packet command low byte
  bBuf[7] = CheckSum(bBuf)

  Print SendCmd(bBuf)

End

Private Sub CheckSum(bBuf As Byte[]) As Byte

  Dim iCnt As Integer
  Dim bChk As Byte

  For iCnt = 1 To bBuf.Count - 2
    bChk = bchk + Not (bBuf[iCnt]) + 1
  Next
  Return bChk

End

Private Sub ChkCheckSum(bBuf As Byte[], iLen As Integer) As Byte

  Dim iCnt As Integer
  Dim bChk As Byte

  For iCnt = 1 To iLen - 1
    bChk = bchk + Not (bBuf[iCnt]) + 1
  Next
  Return bChk

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle incoming data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ReceiveData() As String

  Dim iLoop As Integer
  Dim bTemp As Byte
  Dim sReturn As String

  While iLoop < 1024
    Try bTemp = Read #hIPortSer As Byte
    If Not Error Then
      If bFirstByte = True And If bTemp = START_CHAR Then
        bFirstByte = False
        iByteCount = 0
      Endif

      RecBuf[iByteCount] = bTemp

      If iByteCount = 3 Then ' got length byte
        iLength = CInt(RecBuf[2]) * 256 + CInt(RecBuf[3]) + 4
        Print "type: " & Hex(RecBuf[1]) & " ilength: " & iLength;
      Endif
      ' got whole packet, parse it
      If iByteCount = iLength Then sReturn = ParsePacket()
      Inc iByteCount
    Endif
    Inc iLoop
  Wend
  Return sReturn

End

Private Sub ParsePacket() As String

  Dim iCnt, iDataLen As Integer
  Dim bCmdType, bCmdHB, bCmdLB As Byte
  Dim bData As New Byte[iLength]
  Dim sReturn As String

  ' check if the checksum is correct
  If ChkCheckSum(RecBuf, iLength) = RecBuf[iLength] Then

    ' store some useful information
    bCmdType = RecBuf[4] ' the command type
    bCmdHB = RecBuf[5] ' the command high byte
    bCmdLB = RecBuf[6] 'the command low byte
    For iCnt = 7 To iLength - 2
      bData[iCnt - 7] = RecBuf[iCnt] ' the packet data
    Next
    iDataLen = iCnt - 8
    ' based on the command, call the corresponding function
    Select Case bCmdType
      Case CMD_TYPE_TWO_WAY
        If bCmdHB = TWO_WAY_COMMAND_HIGH_BYTE Then
          Select Case bCmdLB
            Case TWO_WAY_RETURN_NUM_PLAYING_SONGS
              'ReturnNumPlayingSongs(data)
            Case TWO_WAY_RETURN_REPEAT
              'ReturnRepeat(data)
            Case TWO_WAY_RETURN_SHUFFLE
              'ReturnShuffle(data)
            Case TWO_WAY_RETURN_INDEXED_PLAYING_SONG_ALBUM_NAME
              'ReturnIndexedPlayingSongAlbumName(data)
            Case TWO_WAY_RETURN_PLAY_STATUS_CHANGE_NOTIFICATION
              'PlayStatusChangeNotification(data)
            Case TWO_WAY_RETURN_INDEXED_PLAYING_SONG_TITLE
              'ReturnIndexedPlayingSongTitle(data)
            Case TWO_WAY_RETURN_INDEXED_PLAYING_SONG_ARTIST_NAME
              'ReturnIndexedPlayingArtistName(data)
            Case TWO_WAY_RETURN_PLAY_STATUS
              ReturnPlayStatus(bData)
            Case TWO_WAY_RETURN_CURRENT_PLAYING_SONG_INDEX
              sReturn = ReturnCurrentPlayingSongIndex(bData)
            Case TWO_WAY_RETURN_NUMBER_CATEGORIZED_DB_RECORDS
              'ReturnNumberedCategorizedDBRecords(data)
            Case TWO_WAY_RETURN_CATEGORIZED_DB_RECORDS
              'ReturnCategorizedDBRecord(data)
            Case TWO_WAY_RETURN_IPOD_NAME
              sReturn = ReturniPodName(bData, iDataLen)
            Case TWO_WAY_ACKNOWLEDGE
              'TwoWay_Acknowledge(data)
          End Select
        Endif
      Case CMD_TYPE_GENERAL
        Print "general"
      Case CMD_TYPE_LED_CONTROL
        Print "led control"
      Case Else
        ' wrong command type
    End Select

    ' print debug
    ' PRINT "Chks ok"
    ' FOR iCnt = 0 TO iLength
    '   PRINT iCnt & " = " & Hex(RecBuf[iCnt], 2) & " ";
    ' NEXT
  Else
    ' packet checksum failed
  Endif

  ' reset for next packet
  bFirstByte = True
  iLength = 0

  Return sReturn

End

Private Sub ReturnCurrentPlayingSongIndex(bData As Byte[]) As Integer

  Print ParseNumber(bData)

End

Private Sub ReturnPlayStatus(bData As Byte[]) As Integer

  ' PRINT ParseNumber(bData)

End

Private Sub ParseNumber(bData As Byte[]) As Integer

  Dim iNum As Integer

  iNum = bData[0] * 256
  iNum += bData[1] * 256
  iNum += bData[2] * 256
  iNum += bData[3]
  Return iNum

End
Private Sub ReturniPodName(bData As Byte[], iDataLen As Integer) As String

  Print DecodeUTF8(bData, iDataLen)

End

Private Sub DecodeUTF8(bData As Byte[], iDataLen As Integer) As String

  Dim iCnt As Integer
  Dim sReturn As String

  ' PRINT iDataLen & "<- datalen"
  For iCnt = 0 To iDataLen
    sReturn &= Chr(bData[iCnt])
  Next
  Return sReturn

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendCmd(bBuf As Byte[]) As String

  If $sInterface = "tcp" Then
    Try bBuf.Write(hIPort, 0)
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the TCP port! -> " & Error.Text)
  Else
    Try bBuf.Write(hIPortSer, 0)
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the serial port! -> " & Error.Text)
  Endif
  Sleep 0.1
  Return ReceiveData()

End

