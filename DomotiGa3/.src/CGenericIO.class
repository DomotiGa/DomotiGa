' Gambas class file

' Description:
' CGenericIO.class
' Support for generic two way serial and IP devices using configurable regular expressions (regex) to determine the device identifier and values.

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This code is written by 'thechad' in 2013.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "GenericIO"
Public PluginFriendlyName As String = "GenericIO Receiver"
Public PluginVersion As String = "2.00"
Public PluginAuthor As String = "thecad"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 9

Public KeyName As String
Public LogLabel As String = "[GenericIO] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sInterface As String
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean
Private $sGenericIORegex As String
Private $sGenericIODelimiter As String

' Interface objects
Public hMySocket As CSocket
Public hMySerial As CSerialPort

Private $sMsgData As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sInterface = cPl.Settings["type"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
  $sGenericIORegex = cPl.Settings["regex"]
  $sGenericIODelimiter = cPl.Settings["delimiter"]

  InterfaceId = Devices.FindInterface("GenericIO Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.XWriteLog(LogLabel & sLog)
  If $bDebug Then Main.XWriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.XWriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                        TCP and SERIAL HANDLING
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = &HFF + gb.Byte
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect - if first start
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = &HFF + gb.Byte
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  Flush #hMySerial ' Start with a clean buffer

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' Initialize variables
  Run()

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close

  ' try stop running timers
  StopTimers()

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run after succesfull connect
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' Empty internal buffer
  $sMsgData = ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port. vVar is gb.String
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read data char for char
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                                PARSE/HANDLE INPUT DATA RECEIVED FROM SERIAL/TCP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedChar(bTemp As Byte)

  If bTemp = 10 Or bTemp = 13 Then ' buffer until carriage return or linefeed
    If Len($sMsgData) > 1 Then ProcessReceivedPacket($sMsgData) ' Parse the text
    $sMsgData = ""
  Else
    $sMsgData &= Chr(bTemp)
  Endif


End

Private Sub ProcessReceivedPacket(sData As String)

  Dim aScan, aValueToUpdate As String[]
  Dim sLine, sAddress, sRegexExpression, sAddressToChange, sValueFields As String
  Dim iDeviceId, iValueToUpdate, iAddressPosition As Integer
  Dim rRegex As Regexp

  If $bDebug Then WriteDebugLog("Raw Data read '" & sData & "'")
  'If sData = "." Then Return ' A single "." is a heartbeat message sent every few seconds and does not have any action at the moment.
  For Each sLine In Split(sData, "\n")
    sRegexExpression = Replace$($sGenericIORegex, "\\", "\\")  ' Gambas needs the " \ " character in a regex to be doubled to be recognised"
    ' parse each line
    ' parse sensor data using the regex for the interface to get the Address field to change
    rRegex = New Regexp(sLine, sRegexExpression)
    sAddressToChange = rRegex.text
    If $bDebug Then WriteDebugLog("Data read ('" & sLine & "') with regex ('" & sRegexExpression & "') applied gives AddressToChange of : '" & sAddressToChange & "'")

    ' try to find device with the address from the parsed input data as part of it's address field, and correct interface type.
    iDeviceId = Devices.FindRegExp("|" & sAddressToChange & "|", InterfaceId, Instance, "GenericIO", "\"", "\"")

    If Error Then WriteDebugLog("Could not find a matching device for incomming address :  Looking for '" & sAddressToChange & "' in DeviceId '" & iDeviceId & "'")
    If iDeviceId Then
      ' if we have found the device, then retrieve the full address field and then work out the index number of the match
      ' this is the value field we need to update. ie. if address we are looking for is "temp" and address field in device is |R1|R2|temp|litres|, the we are updating value field 3 in this device.
      sAddress = Devices.FindAddressForDevice(iDeviceId)
      aScan = Split(sAddress, "|")
      iValueToUpdate = aScan.Find(sAddressToChange)
      iAddressPosition = String.InStr(sLine, sAddressToChange)
      sValueFields = Mid(sLine, iAddressPosition + Len(sAddressToChange))
      If $bDebug Then WriteDebugLog("Updating iDeviceId '" & iDeviceId & "' Address '" & sAddressToChange & "' to '" & sValueFields & "'")

      aValueToUpdate = Split(sValueFields, $sGenericIODelimiter)

      Select aValueToUpdate.Count
        Case 1
          Select iValueToUpdate
            Case 1
              Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
              If $bDebug Then WriteDebugLog("Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 2
              Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[0]))
              If $bDebug Then WriteDebugLog("Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 3
              Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[0]))
              If $bDebug Then WriteDebugLog("Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 4
              Devices.ValueUpdate(iDeviceId, 4, Trim(aValueToUpdate[0]))
              If $bDebug Then WriteDebugLog("Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Default
              WriteDebugLog("Unknown value to update :" & iValueToUpdate)
        End Select
        Case 2
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          If $bDebug Then WriteDebugLog("Update Value1:'" & Trim(aValueToUpdate[0]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "'")
        Case 3
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[2]))
          If $bDebug Then WriteDebugLog("Update Value1:'" & Trim(aValueToUpdate[0]) & "' Value2:" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "'")
        Case 4
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[2]))
          Devices.ValueUpdate(iDeviceId, 4, Trim(aValueToUpdate[3]))
          If $bDebug Then WriteDebugLog("Update Value1:'" & Trim(aValueToUpdate[1]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "' Value4:'" & Trim(aValueToUpdate[3]) & "'")
        Case 5
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[2]))
          Devices.ValueUpdate(iDeviceId, 4, Trim(aValueToUpdate[3]))
          If $bDebug Then WriteDebugLog("Update Value1:'" & Trim(aValueToUpdate[1]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "' Value4:'" & Trim(aValueToUpdate[3]) & "'")
          If $bDebug Then WriteDebugLog("Update Battery:'" & Trim(aValueToUpdate[4]) & "'")
          Devices.Battery(iDeviceId, Trim(aValueToUpdate[4]))
        Default
          If $bDebug Then WriteDebugLog("Unknown value to update :" & aValueToUpdate.Count)
          Return
      End Select
    Endif
  Next

Catch
  If $bDebug Then WriteDebugLog("ERROR: Parsing data packet: '" & sLine & "' '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module to send a command to serial/TCP interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sRawCmd As String

  ' Ignore sAddress, not used
  sAddress = sAddress

  ' Replace control characters in the string if present with actual values
  sRawCmd = Replace$(sCmd, "\\r", Chr$(13))
  sRawCmd = Replace$(sRawCmd, "\\n", Chr$(10))
  sRawCmd = sRawCmd & "\r\n"

  ' Write the complete string - not byte-for-byte
  If InStr($sInterface, "tcp") Then
    If $bDebug Then WriteDebugLog("SendCommand '" & sCmd & "' to " & $sTCPHost & ":" & $iTCPPort & " as '" & sRawCmd & "'")
    hMySocket.Write(sRawCmd, gb.String)
  Else
    If $bDebug Then WriteDebugLog("SendCommand '" & sCmd & "' to " & $sSerPort & " as '" & sRawCmd & "'")
    hMySerial.Write(sRawCmd, gb.String)
  Endif

End

