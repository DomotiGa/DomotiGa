' Gambas class file

' Description:
' CGenericIO.class
' Support for generic two way serial and IP devices using configurable regular expressions (regex) to determine the device identifier and values.

' Development Status:
' Beta.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This code is written by 'thechad' in 2013.

' Read file called COPYING for license details.

Property Interface As String
Property TCPHost As String
Property TCPPort As Integer
Property SerPort As String
Property Baud As String
Property GenericIODebug As Boolean
Property GenericIORegex As String
Property GenericIODelimiter As String

Public hGenericIOSer As New SerialPort
Public hGenericIOTCP As New Socket
Public tGenericIOTCPConnect As Timer

Private sInterface As String
Private sTCPHost As String
Private iTCPPort As Integer
Private sSerPort As String
Private sBaud As String
Private bGenericIODebug As Boolean
Private sGenericIORegex As String
Private sGenericIODelimiter As String
Private sBuffer As String
Private iConnectRetry As Integer = 0 ' retries
Private iConnectDelay As Integer = 60000 ' 1 minute

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                                      TCP HANDLING
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hGenericIOTCP.Close

  ' get a new one
  hGenericIOTCP = New Socket As "GenericIOTCP"
  hGenericIOTCP.Connect(sTCPHost, iTCPPort)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("GenericIO Error: ") & sInterface & (" Error: ") & Error.Text)
  Return False

End

Public Sub GenericIOTCP_Ready()

  Main.WriteLog(("GenericIO transceiver TCP socket connected."))

  ' define timer for GenericIO reconnect
  tGenericIOTCPConnect = New Timer As "tGenericIOTCPConnect"
  tGenericIOTCPConnect.Delay = iConnectRetry
  tGenericIOTCPConnect.Stop

End

Public Sub GenericIOTCP_Closed()

  Main.WriteDebugLog(("[GenericIO] ERROR: TCP socket closed by peer."))
  If iConnectRetry < 6 Then
    Main.WriteDebugLog(("[GenericIO] Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", ".")))
    tGenericIOTCPConnect.Start
  Endif

End

Public Sub GenericIOTCP_Error()

  Dim sString As String = "GenericIOTCP transceiver: "

  ' handle error
  Select Case hGenericIOTCP.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tGenericIOTCPConnect_Timer()

  If Not ConnectTCP() Then
    Inc iConnectRetry
    iConnectDelay *= iConnectRetry
    tGenericIOTCPConnect.Delay = iConnectDelay
  Endif

End

Public Sub GenericIOTCP_Read()

  Dim sData As String

  If Last.Status <> Net.Connected Then Return
  sData = Read #Last, 1
  If sData = Chr(10) Then ' buffer until carriage return (hex 10)
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1)) ' Parse the text - first remove the /r (new line)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                                      SERIAL PORT HANDLING
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hGenericIOSer.Close

  ' get a new one
  hGenericIOSer = New Serialport As "GenericIOSer"

  With hGenericIOSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  Flush #hGenericIOSer  ' Start with a clean buffer

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("GenericIO Error: ") & sInterface & (" Error: ") & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hGenericIOSer.Close
  Main.WriteLog(("GenericIO serial port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("GenericIO Error: ") & ERROR.Text)
  Return False

End

Public Sub GenericIOSer_Read()

  Dim sData As String

  Try sData = Read #hGenericIOSer, 1
  If Error Then Main.WriteDebugLog(("[GenericIO] Error reading data from serial port! -> ") & Error.Text)
  If sData = Chr(10) Then ' buffer until carriage return (hex 10) 
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1)) ' Parse the text - first remove the /r (new line)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                                PARSE/HANDLE INPUT DATA RECEIVED FROM SERIAL/TCP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sData As String)

  Dim aScan, aValueToUpdate As String[]
  Dim sLine, sSingleAddress, sAddress, sRegexExpression, sAddressToChange, sValueFields As String
  Dim iDeviceId, iLowBat, iIndexCount, iValueToUpdate As Integer
  Dim rRegex As Regexp
  Dim iAddressPosition As Integer
  Dim sAddressToFind As String

  If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Raw Data read '" & sData & "'")
  'If sData = "." Then Return ' A single "." is a heartbeat message sent every few seconds and does not have any action at the moment.
  For Each sLine In Split(sData, "\n")
    sRegexExpression = Replace$(sGenericIORegex, "\\", "\\")  ' Gambas needs the " \ " character in a regex to be doubled to be recognised"
    ' parse each line
    ' parse sensor data using the regex for the interface to get the Address field to change
    rRegex = New Regexp(sLine, sRegexExpression)
    sAddressToChange = rRegex.text
    If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Data read ('" & sLine & "') with regex ('" & sRegexExpression & "') applied gives AddressToChange of : '" & sAddressToChange & "'")

    ' try to find device with the address from the parsed input data as part of it's address field, and correct interface type.
    ' Try iDeviceId = Devices.FindRegExp(sAddressToChange, Devices.FindInterface("GenericIO Interface"), "GenericIO", "[|]", "[|]")
    iDeviceId = Devices.FindRegExp("|" & sAddressToChange & "|", Devices.FindInterface("GenericIO Interface"), "GenericIO", "\"", "\"")

    If Error Then Main.WriteDebugLog(("[GenericIO] Could not find a matching device for incomming address :  Looking for '") & sAddressToChange & "' in DeviceId '" & iDeviceId & "'")
    If iDeviceId Then
      ' if we have found the device, then retrieve the full address field and then work out the index number of the match
      ' this is the value field we need to update. ie. if address we are looking for is "temp" and address field in device is |R1|R2|temp|litres|, the we are updating value field 3 in this device.
      sAddress = Devices.FindAddressForDeviceId(iDeviceId)
      aScan = Split(sAddress, "|")
      iValueToUpdate = aScan.Find(sAddressToChange)
      iAddressPosition = String.InStr(sLine, sAddressToChange)
      sValueFields = Mid(sLine, iAddressPosition + Len(sAddressToChange))
      If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Updating iDeviceId '" & iDeviceId & "' Address '" & sAddressToChange & "' to '" & sValueFields & "'")

      aValueToUpdate = Split(sValueFields, sGenericIODelimiter)

      Select aValueToUpdate.Count
        Case 1
          Select iValueToUpdate
            Case 1
              Devices.ValueUpdate(iDeviceId, Trim(aValueToUpdate[0]), "", "", "")
              If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 2
              Devices.ValueUpdate(iDeviceId, "", Trim(aValueToUpdate[0]), "", "")
              If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 3
              Devices.ValueUpdate(iDeviceId, "", "", Trim(aValueToUpdate[0]), "")
              If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 4
              Devices.ValueUpdate(iDeviceId, "", "", "", Trim(aValueToUpdate[0]))
              If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Default
              Main.WriteDebugLog(("[GenericIO] Unknown value to update :") & iValueToUpdate)
        End Select
        Case 2
          Devices.ValueUpdate(iDeviceId, Trim(aValueToUpdate[0]), Trim(aValueToUpdate[1]), "", "")
          If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value1:'" & Trim(aValueToUpdate[0]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "'")
        Case 3
          Devices.ValueUpdate(iDeviceId, Trim(aValueToUpdate[0]), Trim(aValueToUpdate[1]), Trim(aValueToUpdate[2]), "")
          If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value1:'" & Trim(aValueToUpdate[0]) & "' Value2:" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "'")
        Case 4
          Devices.ValueUpdate(iDeviceId, Trim(aValueToUpdate[0]), Trim(aValueToUpdate[1]), Trim(aValueToUpdate[2]), Trim(aValueToUpdate[3]))
          If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value1:'" & Trim(aValueToUpdate[1]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "' Value4:'" & Trim(aValueToUpdate[3]) & "'")
        Case 5
          Devices.ValueUpdate(iDeviceId, Trim(aValueToUpdate[0]), Trim(aValueToUpdate[1]), Trim(aValueToUpdate[2]), Trim(aValueToUpdate[3]))
          If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Value1:'" & Trim(aValueToUpdate[1]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "' Value4:'" & Trim(aValueToUpdate[3]) & "'")
          If Main.bGenericIODebug Then Main.WriteDebugLog("[GenericIO] Update Battery:'" & Trim(aValueToUpdate[4]) & "'")
          Devices.Battery(iDeviceId, Trim(aValueToUpdate[4]))
        Default
          If Main.bGenericIODebug Then Main.WriteDebugLog(("[GenericIO] Unknown value to update :") & aValueToUpdate.Count)
          Return
      End Select
   Endif

Catch
  If Main.bGenericIODebug Then Main.WriteDebugLog(("ERROR: Parsing GenericIO data packet: '") & sLine & "' " & Error.Text & " at " & Error.Where)
Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module to send a command to serial/TCP interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String

  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("GenericIO Interface"))
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  If sInterface = "tcp" Then
    ' send the message to the tcp stream
    If Main.bGenericIODebug Then Main.WriteDebugLog(("[GenericIO] SendCommand '" & sCmd & "' to " & sTCPHost & ":" & iTCPPort))
    Try Write #hGenericIOTCP, sCmd, Len(sCmd)
    If Error Then Main.WriteDebugLog(("[GenericIO] Unable to write to TCP port! -> ") & Error.Text)
  Else
    ' send the message to the serial port
    If Main.bGenericIODebug Then Main.WriteDebugLog(("[GenericIO] SendCommand '" & sCmd & "' to " & sSerPort))
    Try Print #hGenericIOSer, sCmd
    If Error Then Main.WriteDebugLog(("[GenericIO] Error writing data to the serial port! -> ") & Error.Text)
  Endif

End

' implement properties
Private Function Interface_Read() As String

  Return sInterface

End

Private Sub Interface_Write(Value As String)

  sInterface = Value

End

Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function TCPPort_Read() As Integer

  Return iTCPPort

End

Private Sub TCPPort_Write(Value As Integer)

  iTCPPort = Value

End

Private Function SerPort_Read() As String

  Return sSerPort

End

Private Sub SerPort_Write(Value As String)

  sSerPort = Value

End

Private Function Baud_Read() As String

  Return sBaud

End

Private Sub Baud_Write(Value As String)

  sBaud = Value

End

Private Function GenericIODebug_Read() As Boolean

  Return bGenericIODebug

End

Private Sub GenericIODebug_Write(Value As Boolean)

  bGenericIODebug = Value

End

Private Function GenericIORegex_Read() As String

  Return sGenericIORegex

End

Private Sub GenericIORegex_Write(Value As String)

  sGenericIORegex = Value

End

Private Function GenericIODelimiter_Read() As String

  Return sGenericIODelimiter

End

Private Sub GenericIODelimiter_Write(Value As String)

  sGenericIODelimiter = Value

End