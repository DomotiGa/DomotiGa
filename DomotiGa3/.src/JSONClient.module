' Gambas module file

' Description:
' JSONClient.module
' Support for client/server setup via JSON-RPC interface.

' Development Status:
' Working

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public LogLabel As String = "[JSONClient] "
Public $bDebug As Boolean = True
Public $sURL As String = "localhost:9090"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts empty string to Chr(1), because Gambas doesn't
' support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONToEmptyString(sValue As String) As String

  If sValue Then
    Return sValue
  Else
    Return Chr(1)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts Chr(1) to empty string, because Gambas doesn't
' support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONFromEmptyString(sValue As String) As String

  If sValue = Chr(1) Then
    Return ""
  Else
    Return sValue
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generic JSON RPC Client procedure
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Call_JsonRpcClient(sMethod As String, bAsync As Boolean, cData As Collection) As Variant

  Dim cRpc As JsonRpcClient
  Dim bOk As Boolean

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Method=" & sMethod)

  cRpc = New JsonRpcClient(sMethod) As "cRpc"
  cRpc.URL = $sURL
  cRpc.Async = bAsync
  bOk = cRpc.Call(cData)

  ' If Async = True then just check we got bOk, then the call start successfully
  ' If Async = False then we need to check bOk and then the Reply variable for the information
  If bAsync Then
    If Not bOk Then
      Main.WriteLog(LogLabel & "ERROR: Method: '" & cRpc.Method & "' returned '" & cRpc.ErrorMsg & "'.")
      Return
    Endif
  Else
    If bOk Then
      Return Process_JsonRpc_Reply(cRpc, cRpc.Reply)
    Else
      Main.WriteLog(LogLabel & "ERROR: '" & cRpc.ErrorMsg & "' when posting to URL '" & cRpc.URL & "'. Method: '" & cRpc.Method & "'.")
      Return Null
    Endif 
  Endif

Catch
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' when posting to URL '" & cRpc.URL & "'. Method: '" & cRpc.Method & "'")

End

Public Sub cRpc_Reply(vReply As Variant)

  Process_JsonRpc_Reply(Last, vReply)

End

Public Sub cRpc_BadReply(sText As String)

  Main.WriteLog(LogLabel & "ERROR: '" & sText & "' when posting to URL '" & Last.URL & "'. Method: '" & Last.Method & "'.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process response for almost all methods
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Process_JsonRpc_Reply(cRpc As Object, vReply As Variant) As Variant

  Dim vValue As Variant

  Select cRpc.Method
    Case "domotiga.version"
      FMain.CheckServerVersion(vReply)

    Case "plugin.restart"
      If vReply Then
      Main.WriteLog("Successfully (re)started plugin on server.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem (re)starting plugin on server, check it's log.")
      Endif

    Case "globalvar.list"

      ' Reset the GlobalVars before we start filling it again
      Main.RestoreGlobalVars(False)

      If vReply Then
        For Each vValue In vReply
          If vValue = "<EMPTY>" Then vValue = ""
          Main.SetGlobalVar(vReply.Key, vValue)
        Next
      Endif

    Case "globalvar.set"
      If vReply Then
        If TypeOf(cRpc.Params["value"]) = gb.Boolean Then
          Main.WriteLog(LogLabel & "Successfully set '" & cRpc.Params["name"] & "' to '" & IIf(cRpc.Params["value"], "True", "False") & "'.")
        Else
          Main.WriteLog(LogLabel & "Successfully set '" & cRpc.Params["name"] & "' to '" & cRpc.Params["value"] & "'.")
        Endif
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem setting '" & cRpc.Params["name"] & "', message '" & cRpc.ErrorMsg & "'.")
      Endif

    Case "housemode.set"
      If vReply Then
        If cRpc.Params["mode"] Then
          Main.WriteLog(LogLabel & "Successfully set House mode to '" & cRpc.Params["mode"] & "'.")
        Else
          Main.WriteLog(LogLabel & "Successfully set Mute mode to '" & IIf(cRpc.Params["mute"], "Audio Disabled", "Audio Enabled") & "'.")
        Endif
      Else
        If cRpc.Params["mode"] Then
          Main.WriteLog(LogLabel & "ERROR: There was a problem setting House mode to '" & cRpc.Params["mode"] & "'.")
        Else
          Main.WriteLog(LogLabel & "ERROR: There was a problem setting Mute mode to '" & cRpc.Params["mute"] & "'.")
        Endif
      Endif

    Case "email.send"
      If vReply Then
        Main.WriteLog(LogLabel & "Successfully sent e-mail to '" & cRpc.Params["to"] & "'.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem sending e-mail to " & cRpc.Params["to"] & ".")
      Endif

    Case "twitter.send"
      If vReply Then
        Main.WriteLog(LogLabel & "Successfully sent tweet.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem sending tweet.")
      Endif

    Case "sms.send"
      If vReply Then
        Main.WriteLog(LogLabel & "Successfully sent SMS to '" & cRpc.Params["to"] & "'.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem sending SMS to '" & cRpc.Params["to"] & "'.")
      Endif

    Case "device.set"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem setting value of device!")

    Case "sound.play"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem playing sound.")

    Case "voicetext.play"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem speaking voicetext.")

    Case "serverstat.update"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem updating serverstats graphs.")

    Case "rrdtool.create"
        If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem creating rrdtool databases.")
    Case "rrdtool.update"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem updating rrdtool graphs.")

    Case "dsc.setpin"
      If vReply Then
        Main.WriteLog(LogLabel & "Successfully set DSC Alarm pin.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem setting DSC Alarm pin.")
      Endif
    Case "dsc.setalarm"
      If vReply Then
        Main.WriteLog(LogLabel & "Successfully set DSC Alarm mode.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem setting DSC Alarm mode.")
      Endif

    Case "ledmatrix.display"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem displaying LEDMatrix message.")

    Case "avcontrol.get"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem controlling audio/video device '" & cRpc.Params["model"] & "' with '" & cRpc.Params["cmd"] & "'.")

    Case "avcontrol.set"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem getting audio/video device settngs '" & cRpc.Params["model"] & "' with '" & cRpc.Params["cmd"] & "'.")

    Case "cul.simulate"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem simulating CUL packet '" & cRpc.Params["data"] & "'.")

    Case "cul.queuecommand"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem queueing CUL command '" & cRpc.Params["cmd"] & "'.")

    Case "calendar.get"
      Calendar.dPlanning.Clear()
      If vReply Then
        For Each vValue In vReply
          Try Calendar.dPlanning.Add(CDate(vValue))
        Next
      Endif

    Case "calender.set"
      If vReply Then
        Main.WriteLog("Successfully set occupancy planning.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem setting ocupancy planning.")
      Endif

    Case "event.run"
      If vReply Then
        Main.WriteLog("Successfully executed actions from event with id '" & cRpc.Params["event_id"] & "'.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem executing actions from event with id '" & cRpc.Params["event_id"] & "'.")
      Endif

    Case "action.run"
      If vReply Then
        Main.WriteLog("Successfully executed action with id '" & cRpc.Params["action_id"] & "'.")
      Else
        Main.WriteLog(LogLabel & "ERROR: There was a problem executing action with id '" & cRpc.Params["action_id"] & "'.")
      Endif

    Case "squeezebox.set"
      If vReply Then
        Select cRpc.Params["function"]
          Case "volume"
            Main.WriteLog("Successfully set volume player '" & cRpc.Params["player"] & "'.")
          Case "startplayer"
            Main.WriteLog("Successfully set play player '" & cRpc.Params["player"] & "'.")
          Case "stopplayer"
            Main.WriteLog("Successfully set stop player '" & cRpc.Params["player"] & "'.")
          Case "nextnumber"
            Main.WriteLog("Successfully set next number player '" & cRpc.Params["player"] & "'.")
          Case "prevnumber"
            Main.WriteLog("Successfully set prev number player '" & cRpc.Params["player"] & "'.")
          Case "clearplaylist"
            Main.WriteLog("Successfully set clear playlist player '" & cRpc.Params["player"] & "'.")
          Case "addalbumtoplaylist"
            Main.WriteLog("Successfully set add album to playlist player '" & cRpc.Params["player"] & "'.")
        End Select
      Else
        Select cRpc.Params["function"]
          Case "volume"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to set volume player '" & cRpc.Params["player"] & "'.")
          Case "startplayer"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to set play player '" & cRpc.Params["player"] & "'.")
          Case "stopplayer"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to set stop player '" & cRpc.Params["player"] & "'.")
          Case "nextnumber"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to set next number player '" & cRpc.Params["player"] & "'.")
          Case "prevnumber"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to set prev number player '" & cRpc.Params["player"] & "'.")
          Case "clearplaylist"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to clear playlistplayer '" & cRpc.Params["player"] & "'.")
          Case "addalbumtoplaylist"
            Main.WriteLog(LogLabel & "ERROR: There was a problem to add a ablum to playlist player '" & cRpc.Params["player"] & "'.")
        End Select
      Endif
    Case "squeezebox.get"
    'Main.WriteLog(LogLabel & "Successfully get current artist player '" & sPlayerId & "'.")
    'Main.WriteLog(LogLabel & "ERROR: There was a problem to get current artist player '" & sPlayerId & "'.")
    'Main.WriteLog(LogLabel & "Successfully player is connected to server player id '" & sPlayerId & "'.")
    'Main.WriteLog(LogLabel & "ERROR: There was a problem to get player is connected to server player id '" & sPlayerId & "'.")

    Case "thermostat.derogateheating"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem derogating heating.")

    Case "cmdr.plcbus.txcommand"
      If Not vReply Then Main.WriteLog(LogLabel & "ERROR: There was a problem sending PLCBUS command for '" & cRpc.Params["address"] & "'.")

  End Select

  Return vReply

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve program version from the server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetProgramVersion()

  Call_JsonRpcClient("domotiga.version", True, Null)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Restart Plugin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ModuleRestart(sPlugin As String)

  Dim cData As New Collection

  cData["name"] = sPlugin
  Call_JsonRpcClient("plugin.restart", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get all global variables
' True=Call was successfull, False=An error occured
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetGlobalVars() As Boolean

  If Call_JsonRpcClient("globalvar.list", False, Null) Then
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Change or add a GlobalVar variable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SetGlobalVar(sVar As String, sValue As String, vValue As Variant, sDataType As String)

  Dim cData As New Collection

  cData["name"] = sVar
  cData["value"] = vValue
  cData["datatype"] = sDataType
  Call_JsonRpcClient("globalvar.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Delete a GlobalVar variable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function DelGlobalVar(sVar As String)

  Dim cData As New Collection

  cData["name"] = sVar
  Call_JsonRpcClient("globalvar.del", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send an email
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SendEmail(sTo As String, sSubject As String, sBody As String)

  Dim cData As New Collection

  cData["msg"] = sBody
  cData["subject"] = sSubject
  cData["to"] = sTo
  Call_JsonRpcClient("email.send", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post a Tweet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SendTweet(sText As String)

  Dim cData As New Collection

  cData["msg"] = sText
  Call_JsonRpcClient("twitter.send", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send a SMS
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SendSMS(sTo As String, sText As String)

  Dim cData As New Collection

  cData["to"] = sTo
  cData["msg"] = sText
  Call_JsonRpcClient("sms.send", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Set housemode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SetHouseMode(sMode As String)

  Dim cData As New Collection

  cData["mode"] = sMode
  Call_JsonRpcClient("housemode.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Set mute on/off
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SetMuteMode(bMode As Boolean)

  Dim cData As New Collection

  cData["mute"] = bMode
  Call_JsonRpcClient("housemode.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Set the device state. On/Off/Dim xyz
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function DeviceSetDevice(sDevice As String, sValue As String)

  Dim cData As New Collection
  Dim iDeviceId As Integer
  
  iDeviceId = Devices.FindDeviceId(sDevice)

  cData["device_id"] = iDeviceId
  cData["value"] = JSONToEmptyString(sValue)
  Call_JsonRpcClient("device.set", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Update the ServerStats RRD Graph(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function UpdateServerStatsGraphs(sRange As String)

  Dim cData As New Collection

  cData["time"] = JSONToEmptyString(sRange)
  Call_JsonRpcClient("serverstat.update", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Create a RRD Graph(s) for a device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CreateRRDs(iId As Integer)

  Dim cData As New Collection

  cData["device_id"] = iId
  Call_JsonRpcClient("rrdtool.create", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Update the RRD Graph(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function UpdateRRDGraphs(sGroup As String, sRange As String)

  Dim cData As New Collection

  cData["group"] = JSONToEmptyString(sGroup)
  cData["time"] = JSONToEmptyString(sRange)
  Call_JsonRpcClient("rrdtool.update", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Sets the pin on a DSC security system
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SetAlarmPin(sPin As String)

  Dim cData As New Collection

  cData["pin"] = JSONToEmptyString(sPin)
  Call_JsonRpcClient("dsc.setpin", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Sets the alarm mode of a DSC security system
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SetAlarmMode(sMode As String)

  Dim cData As New Collection

  cData["mode"] = JSONToEmptyString(sMode)
  Call_JsonRpcClient("dsc.setalarm", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Plays the sound file, the file needs to be on the server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function PlaySound(sSound As String, iVolume As Integer)

  Dim cData As New Collection

  cData["file"] = JSONToEmptyString(sSound)
  cData["volume"] = iVolume
  Call_JsonRpcClient("sound.play", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Speak the text
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function VoiceTextSpeak(sText As String, sVoice As String)

  Dim cData As New Collection

  cData["text"] = JSONToEmptyString(sText)
  cData["voice"] = JSONToEmptyString(sVoice)
  Call_JsonRpcClient("voicetext.speak", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Display the LEDMatrix message. iId=0-255 and the Message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function DisplayLEDMessage(iId As Integer, sText As String)

  Dim cData As New Collection

  cData["displayid"] = iId
  cData["msg"] = JSONToEmptyString(sText)
  Call_JsonRpcClient("ledmatrix.display", True, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function AVSetControl(sModel As String, sCmd As String, sValue As String, sAddress As String)

  Dim cData As New Collection

  cData["model"] = JSONToEmptyString(sModel)
  cData["cmd"] = JSONToEmptyString(sCmd)
  cData["value"] = JSONToEmptyString(sValue)
  cData["address"] = JSONToEmptyString(sAddress)
  Call_JsonRpcClient("avcontrol.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function AVGetControl(sModel As String, sCmd As String, sAddress As String)

  Dim cData As New Collection

  cData["model"] = JSONToEmptyString(sModel)
  cData["cmd"] = JSONToEmptyString(sCmd)
  cData["address"] = JSONToEmptyString(sAddress)
  Call_JsonRpcClient("avcontrol.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CULSimulate(sPacket As String)

  Dim cData As New Collection

  cData["data"] = JSONToEmptyString(sPacket)
  Call_JsonRpcClient("cul.simulate", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CULQueueCommand(sPacket As String)

  Dim cData As New Collection

  cData["cmd"] = JSONToEmptyString(sPacket)
  Call_JsonRpcClient("cul.queuecommand", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function PLCBUSTXCommand(sAddress As String, sCmd As String, bAck As Boolean, bData As Byte)

  Dim cData As New Collection

  cData["cmd"] = JSONToEmptyString(sCmd)
  cData["address"] = JSONToEmptyString(sAddress)
  cData["ack"] = bAck
  cData["data"] = bData
  Call_JsonRpcClient("cmdr.plcbus.txcommand", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run event actions from the database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function RunActions(iEventId As Integer)

  Dim cData As New Collection

  cData["event_id"] = iEventId
  Call_JsonRpcClient("event.run", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run action from the database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function RunAction(iActionId As Integer)

  Dim cData As New Collection

  cData["action_id"] = iActionId
  Call_JsonRpcClient("action.run", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetPlanning()

  Call_JsonRpcClient("calendar.get", False, Null)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SetPlanning()

  Dim d As Date
  Dim aStr As New String[]
  Dim cData As New Collection

  For Each d In Calendar.dPlanning
    aStr.Add(d)
  Next
  cData["planning"] = aStr
  Call_JsonRpcClient("calendar.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxSetVolumePlayer(sPlayerId As String, sVolume As String)

  Dim cData As New Collection

  cData["function"] = "volume"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Try cData["volume"] = CInt(sVolume)
  If Error Then cData["volume"] = 0
  Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetVolumePlayer(sPlayerId As String) As String

  Dim cData As New Collection

  cData["function"] = "volume"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxStopPlayer(sPlayerId As String)

  Dim cData As New Collection

  cData["function"] = "stopplayer"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxPlayPlayer(sPlayerId As String)

  Dim cData As New Collection

  cData["function"] = "startplayer"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxNextNumberPlayer(sPlayerId As String)

  Dim cData As New Collection

  cData["function"] = "nextnumber"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxPrevNumberPlayer(sPlayerId As String)

  Dim cData As New Collection

  cData["function"] = "prevnumber"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetCurrentTitlePlayer(sPlayerId As String) As String

  Dim cData As New Collection

  cData["function"] = "currentnumber"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetModePlayer(sPlayerId As String) As String

  Dim cData As New Collection

  cData["function"] = "mode"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetPlayerId(sPlayerIndex As String) As String

  Dim cData As New Collection

  cData["function"] = "playerid"
  cData["player"] = JSONToEmptyString(sPlayerIndex)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetPlayerName(sPlayerIndex As String) As String

  Dim cData As New Collection

  cData["function"] = "playername"
  cData["player"] = JSONToEmptyString(sPlayerIndex)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetIsPlayer(sPlayerIndex As String) As String

  Dim cData As New Collection

  cData["function"] = "playertype"
  cData["player"] = JSONToEmptyString(sPlayerIndex)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetAlbums() As String[]

  Dim cData As New Collection

  cData["function"] = "albums"
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxClearPlaylistPlayer(sPlayerId As String) As Boolean

  Dim cData As New Collection

  cData["function"] = "clearplaylist"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Return Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxAddAlbumToPlaylistPlayer(sPlayerId As String, sAlbumName As String) As Boolean

  Dim cData As New Collection

  cData["function"] = "addalbumtoplaylist"
  cData["player"] = JSONToEmptyString(sPlayerId)
  cData["album"] = JSONToEmptyString(sAlbumName)
  Return Call_JsonRpcClient("squeezebox.set", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetCurrentArtistPlayer(sPlayerId As String) As String

  Dim cData As New Collection

  cData["function"] = "currentartist"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SqueezeboxGetIsPlayerConnectedToServer(sPlayerId As String) As Boolean

  Dim cData As New Collection

  cData["function"] = "isconnected"
  cData["player"] = JSONToEmptyString(sPlayerId)
  Return Call_JsonRpcClient("squeezebox.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ThermostatDerogateHeating(iScenarioId As String, iHeatingId As String, sOperator As String) As Boolean

  Dim cData As New Collection

  cData["scenario_id"] = CInt(iScenarioId)
  cData["heating_id"] = CInt(iHeatingId)
  cData["operator"] = JSONToEmptyString(sOperator)
  Return Call_JsonRpcClient("thermostat.derogateheating", False, cData)

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ThermostatGetDerogateHeating(iHeatingId As String) As Float

  Dim cData As New Collection

  cData["heating_id"] = CInt(iHeatingId)
  Return Call_JsonRpcClient("thermostat.getderogateheating", False, cData)

Catch
  Return 0.0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Tools: OpenZWave Commander Get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ToolsOpenZWaveGet(sCommand As String, Optional iInstance As Integer = 0) As Variant

  Dim cData As New Collection

  cData["command"] = sCommand
  If iInstance <> 0 Then cData["instance_id"] = iInstance

  Return Call_JsonRpcClient("tools.openzwave.get", False, cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Tools: OpenZWave Commander Set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ToolsOpenZWaveSet(cData As Collection) As Variant

  Return Call_JsonRpcClient("tools.openzwave.set", False, cData)

End
