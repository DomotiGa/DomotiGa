' Gambas class file

' Description:
' FSystemStats.class
' Display all server related rrdtool graphs.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PRIVATE tRefresh AS NEW Timer
PRIVATE bAutoRefresh AS Boolean
PRIVATE sRange AS String = "1h"

PUBLIC SUB Form_Open()

  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

  ' create refresh timer
  tRefresh = NEW Timer AS "tRefresh"
  tRefresh.Delay = 30000 ' 30 seconds

END

PUBLIC SUB Form_Resize()

  svGraphs.Move(4, 30, ME.ClientWidth - 8, ME.ClientHeight - 31)
  ' vpnlGraphs.Move(5, 31, ME.ClientWidth - 10, ME.ClientHeight - 33)

END

PUBLIC SUB Form_Close()

  tRefresh.Stop

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRefresh_Timer()

  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnOverview_Click()

  sRange = "1h"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnGraphs2h_Click()

  sRange = "2h"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnGraphs1d_Click()

  sRange = "1d"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnGraphs2d_Click()

  sRange = "2d"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
END

PUBLIC SUB btnGraphs1w_Click()

  sRange = "1w"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnGraphs2w_Click()

  sRange = "2w"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnGraphs1m_Click()

  sRange = "1m"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnGraphs1y_Click()

  sRange = "1y"
  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB btnRefresh_Click()

  FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)

END

PUBLIC SUB tbtnRefresh_Click()

  IF tbtnRefresh.Value = TRUE THEN
    tRefresh.Start
    bAutoRefresh = TRUE
    btnRefresh.Enabled = FALSE
  ELSE
    tRefresh.Stop
    bAutoRefresh = FALSE
    btnRefresh.Enabled = TRUE
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display graph images
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB DisplayGraphs(sRange AS String, sGroup AS String, oPanel AS Object, OPTIONAL bAppend AS Boolean)

  DIM pGraph AS Picture
  DIM sGraphs AS String[]
  DIM sGraph, sGraphPic, sGraphUrl AS String
  DIM hPictureBox AS PictureBox
  DIM oObject AS Object
  DIM iHeight AS Integer

  IF NOT bAppend THEN
    ' delete previous graphs first
    FOR EACH oObject IN oPanel.Children
      oObject.Delete()
    NEXT
  ENDIF

  sGraphs = Split(ServerStats.Graphs(), "|")
  IF sGraphs.Count THEN
    FMain.DisplayHeader(sGroup & (" Performance - Last ") & sRange, oPanel)
    IF Main.bServer THEN
      ServerStats.CreateGraphs(sRange)
    ELSE
      XMLClient.UpdateServerStatsGraphs(sRange)
    ENDIF
    FOR EACH sGraph IN sGraphs
      IF sGraph THEN
        IF Main.bServer THEN
          sGraphPic = Main.sBaseDir & "/rrd/graphs/" & sGraph & "-" & sRange & ".png"
          TRY pGraph = Picture.Load(sGraphPic)
        ELSE
          sGraphUrl = Main.sGraphsUrl &/ sGraph & "-" & sRange & ".png"
          sGraphPic = FMain.GetGraph(sGraphUrl)
          IF Len(sGraphPic) THEN
            IF Main.bServerStatsDebug THEN Main.WriteDebugLog("[ServerStats] Downloaded graph '" & sGraphUrl & "'")
            TRY pGraph = Picture.Load(sGraphPic)
          ELSE
            IF Main.bServerStatsDebug THEN Main.WriteDebugLog("[ServerStats] Failed to download graph '" & sGraphUrl & "'")
          ENDIF
        ENDIF
        IF pGraph THEN
          hPictureBox = NEW PictureBox(oPanel) AS "Graph"
          WITH hPictureBox
            .Picture = pGraph
            .Height = pGraph.Height + 5
            .Width = pGraph.Width
            .Tag = sGraph
          END WITH
        ENDIF
      ENDIF
      ' erase previous image
      IF Main.bServer = FALSE THEN
        IF Exist(sGraphPic) THEN KILL sGraphPic
      ENDIF
    NEXT
    iHeight = 0
    ' calculate needed scrollview and panel height
    FOR EACH oObject IN oPanel.Children
      iHeight += oObject.Height
    NEXT
    oPanel.Resize(oPanel.Width, iHeight)
  ENDIF

END


PUBLIC SUB btnShow_Click()

  IF Len(txtRange.Text) >= 2 THEN
    sRange = txtRange.Text
    FMain.DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
    DisplayGraphs(sRange, "Server", FServerStats.vpnlGraphs)
  ENDIF

END
