' Gambas class file

' Description:
' CRFXComTX.class
' Connect to RFXCom transmitter or xmitter interface via tcp socket or serial port.

' Development Status:
' Works, needs some more testing.

' Credits:
' Thanks to Bert Weijenberg of RFXCOM for all the support.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "RFXComTX"
Public PluginFriendlyName As String = "RFXCom Transmitter"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[RFXComTX] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String
Private $bHandshake As Boolean
Private $bDebug As Boolean
Private $iRelayPort As Integer
Private $bDisableX10 As Boolean
Private $bEnableARC As Boolean
Private $bEnableHarrison As Boolean
Private $bEnableKoppla As Boolean
Private $bRFXmitter As Boolean
Private $sInterfaceType As String
Private $bRelayEnabled As Boolean

Public hMySocket As CSocket
Public hMySerial As CSerialPort
Public hRFXComTXRelay As New ServerSocket
Public hRelayTXClient As Object[]
Public hRelayTXSocket As New Socket

Public tRFXComTXBusy As Timer
Private cQueue As New Collection    ' command buffer
Private bInterfaceBusy As Boolean   ' waiting for delay timer to finish
Private iByteCount As Integer
Private bFirstByte As Boolean = True

Const GETSW As Byte = &H30
Const MODERFXCOM As Byte = &H33
Const MODERFXCOMNOREC As Byte = &H37

Private bProtocol As Byte = MODERFXCOM

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bHandshake = cPl.Settings["handshake"]
  $bRelayEnabled = cPl.Settings["relayenabled"]
  $iRelayPort = cPl.Settings["relayport"]
  $bDisableX10 = cPl.Settings["disablex10"]
  $bEnableARC = cPl.Settings["enablearc"]
  $bEnableHarrison = cPl.Settings["enableharrison"]
  $bEnableKoppla = cPl.Settings["enablekoppla"]
  $bRFXmitter = cPl.Settings["rfxmitter"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("RFXCom Transmitter")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

  ' Start RFXCom Relaying
  If $bRelayEnabled Then
    If StartRelay() Then
      WriteLog("Relay listening for client on port " & $iRelayPort)
    Else
      WriteLog("ERROR: Relay FAILED to listen on port " & $iRelayPort)
    Endif
  Else
    WriteLog("Relay disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  WriteLog(sLog)
  If $bDebug Then WriteDebugLog(sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then WriteDebugLog(sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close
  Try hRFXComTXRelay.Close

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

  Try tRFXComTXBusy.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = &HFF + gb.Byte
  hMySocket.Connect($sTCPHost, $iTCPPort)

  WriteLog(PluginFriendlyName & " (" & DisplayTransmitterType() & ") TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " (" & DisplayTransmitterType() & ") TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one - but store the retry counter between new instances
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = &HFF + gb.Byte ' Byte[]
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 2
    .FlowControl = 0
    .Open()
  End With

  ' define timer for interface busy
  tRFXComTXBusy = New Timer As "tRFXComTXBusy"
  tRFXComTXBusy.Stop

  DoInit()

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " (" & DisplayTransmitterType() & ") serial interface connected to port " & $sSerPort)
  IsRunning = True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " (" & DisplayTransmitterType() & ") serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Socket closed by remote
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  ' define timer for Interface busy
  tRFXComTXBusy = New Timer As "tRFXComTXBusy"
  tRFXComTXBusy.Stop

  DoInit()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteDebugLog("ERROR: " & sMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data from serialport
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return "transmitter" or "xmitter"
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DisplayTransmitterType() As String

  If $bRFXmitter Then
    Return "xmitter"
  Else
    Return "transmitter"
  Endif

End

Private Sub ProcessReceivedChar(bTemp As Byte)

  ' relay incoming data to relay port
  If $bRelayEnabled Then Try Write #hRelayTXSocket, bTemp As Byte

  If bFirstByte = True Then
    bFirstByte = False
    iByteCount = 0
  Endif

  Main.ControlLed("RFXCom", "On")
  If bTemp = bProtocol Then
    If $bDebug Then WriteDebugLog("< ACK " & Hex(bTemp, 2))
  Else If bTemp = &H5A Then
    If $bDebug Then WriteDebugLog("< NAK " & Hex(bTemp, 2))
  Endif
  Inc iBytecount

  If iByteCount = 1 Then bFirstByte = True

  Main.ControlLed("RFXCom", "Off")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' interface busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRFXComTXBusy_Timer()

  bInterfaceBusy = False
  tRFXComTXBusy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then WriteDebugLog("Sending command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

Private Sub DoInit()

  SetInitMode() ' set 48 bits
  GetVersion()  ' get transmitter version and enable X10

  If Not $bRFXmitter Then
    If $bDisableX10 Then DisableX10TX()
    If $bEnableARC Then EnableARCTX()
    If $bEnableHarrison Then EnableHarrisonTX()
    If $bEnableKoppla Then EnableKopplaTX()
  Endif

End

Public Sub StartRelay() As Boolean

  hRFXComTXRelay = New ServerSocket As "RFXComTXRelay"
  hRFXComTXRelay.Type = Net.Internet
  hRFXComTXRelay.Port = $iRelayPort
  ' we start listening for max 1 connection
  hRFXComTXRelay.Listen(1)

  If hRFXComTXRelay.Status = Net.Active Then
    hRelayTXClient = New Object[]
    ' all ok
    Return True
  Else
    Return False
  Endif

End

Public Sub RFXComTXRelay_Connection(sHost As String)

  hRelayTXSocket = New Socket As "RelayTXSocket"
  ' accept client
  If hRFXComTXRelay.Status <= Net.Inactive Then Return
  If $bDebug Then WriteDebugLog("Relay connection request from " & sHost)

  hRelayTXSocket = hRFXComTXRelay.Accept()
  hRelayTXClient.Add(hRelayTXSocket)
  If $bDebug Then
    If hRelayTXSocket.Status = Net.Connected Then WriteLog($sInterfaceType & " Relay client connection from ip address " & hRelayTXSocket.RemoteHost & " " & DNS.ResolveHost(hRelayTXSocket.RemoteHost) & " ) accepted.")
  Endif

End

Public Sub RFXComTXRelay_Error()

  ' handle error
  Select Case hRFXComTXRelay.Status
    Case Net.CannotCreateSocket
      WriteDebugLog("Relay the system does not allow to create a socket.")
    Case Net.CannotBindSocket
      WriteDebugLog("Relay cannot bind socket.")
    Case Net.CannotListen
      WriteDebugLog("Relay cannot listen on port.")
  End Select

End

Public Sub Socket_Closed()

  WriteLog(" Relay client connection closed.")
  hRelayTXClient.Remove(hRelayTXClient.Find(Last))

End

Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String

  If $sInterface = "serial" And If hMySerial.Status <> Net.Active Then
    WriteDebugLog("Serial port not opened, unable to control device!")
    Return
  Endif

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If Not iDeviceId Then Return

  sType = Devices.FindTypeForDevice(iDeviceId)
  If Not sType Then Return

  If Not $bRFXmitter Then
    Select sType
      Case "ARC", "X10", "KAKU" ' X10, KAKU with CodeWheel, NEXA, DomiaLite
        If sType = "X10" And If $bDisableX10 Then
          WriteDebugLog("You have disabled the X10 protocol, unable to control device!")
          Return
        Endif
        If sType = "ARC" Or sType = "KAKU" And If Not $bEnableARC Then
          WriteDebugLog("You have not enabled the KAKU/ARC protocol, unable to control device!")
          Return
        Endif
        If Left$(sAddress, 1) Like "[A-Z]" Then
          X10(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid X10, ARC or KAKU address '" & sAddress & "' given!")
        Endif
      Case "AC", "HEUK" ' AC protocol, KAKU without CodeWheel, HomeEasy UK, Chacon.
        If CheckACAddress(sAddress) = True Then
          AC(sAddress, sCmd, False)
        Else
          WriteDebugLog("Invalid AC or HE address '" & sAddress & "' given!")
        Endif
      Case "Harrison" ' Harrison
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          Harrison(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid Harrison address '" & sAddress & "' given!")
        Endif
      Default
        WriteDebugLog("" & sType & " protocol is not supported by RFXtransmitter code!")
        Return
    End Select
  Else
    Select sType
      Case "X10" ' X10 lightning
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          X10(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid X10 address '" & sAddress & "' given!")
        Endif
      Case "ARC", "KAKU" ' KlikAanKlikUit with CodeWheel, NEXA, Domia Lite, Proove, ByeByeStandby, ELRO AB600, Intertechno, Duwi
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          ARC(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid ARC or KAKU address '" & sAddress & "' given!")
        Endif
      Case "AC", "HEUK" ' AC and HomeEasy UK/KAKU without codewheel
        If CheckACAddress(sAddress) = True Then
          AC(sAddress, sCmd, False)
        Else
          WriteDebugLog("Invalid AC or HE address '" & sAddress & "' given!")
        Return
        Endif
      Case "HEEU" ' HomeEasy EU protocol
        If CheckACAddress(sAddress) = True Then
          AC(sAddress, sCmd, True)
        Else
          WriteDebugLog("Invalid HEEU address '" & sAddress & "' given!")
        Return
        Endif
      Case "Digimax" ' RTS10 control
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          Digimax(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid Digimax address '" & sAddress & "' given!")
        Endif
      Case "Harrison" ' Harrison
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          Harrison(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid Harrison address '" & sAddress & "' given!")
        Endif
      Case "Koppla" ' IKEA Koppla
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          Koppla(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid Koppla address '" & sAddress & "' given!")
        Endif
      Case "Waveman" ' Waveman
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          Waveman(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid Waveman address '" & sAddress & "' given!")
        Endif
      Case "Flamingo" ' Flamingo
        If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
          Flamingo(sAddress, sCmd)
        Else
          WriteDebugLog("Invalid Flamingo address '" & sAddress & "' given!")
        Endif
      Default
        WriteDebugLog("" & sType & " protocol is not supported by RFXmitter code!")
        Return
    End Select
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteCommand(bBuffer As Byte[], sKey As String)

  If $bDebug Then WriteDebugLog("> " & Util.ByteToHex(bBuffer))

  ' Write the complete string - not byte-for-byte
  If $sInterface = "tcp" Then
    hMySocket.Write(bBuffer)
  Else
    hMySerial.Write(bBuffer)
  Endif

  ' remove sent command from queue
  cQueue.Remove(sKey)

  tRFXComTXBusy.Delay = 50 ' 50mS (initial test value)
  tRFXComTXBusy.Start
  bInterfaceBusy = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(aPacket As Byte[])

  ' add command to queue
  cQueue.Add(aPacket, Rnd)

  ' if controller is not busy process it
  If bInterfaceBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim aPacket As Byte[] = Null

  For Each aPacket In cQueue
    WriteCommand(aPacket, cQueue.Key)
    Break ' only do first one
  Next

End

Private Function CheckACAddress(sAddress As String) As Boolean

  Dim aAddr As String[]

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    Return True
  Else
    Return False
  Endif

End

' set interface mode
Public Sub SetInitMode()

  Dim bBuf1 As Byte[] = [CByte(&HF0), CByte(MODERFXCOM), &HF0, MODERFXCOM] ' handshake
  Dim bBuf2 As Byte[] = [CByte(&HF0), CByte(MODERFXCOMNOREC), &HF0, MODERFXCOMNOREC] ' no handshake

  If $bHandshake Then
    If $bDebug Then WriteDebugLog("Initialized " & $sInterfaceType & " for Handshake usage with => " & Hex(bBuf1[0], 2) & Hex(bBuf1[1], 2) & Hex(bBuf1[2], 2) & Hex(bBuf1[3], 2))
    bProtocol = MODERFXCOM
    QueueCommand(bBuf1)
  Else
    If $bDebug Then WriteDebugLog("Initialized " & $sInterfaceType & " for No Handshake usage with => " & Hex(bBuf2[0], 2) & Hex(bBuf2[1], 2) & Hex(bBuf2[2], 2) & Hex(bBuf2[3], 2))
    bProtocol = MODERFXCOMNOREC
    QueueCommand(bBuf2)
  Endif

End

' disable X10 protocol
Public Sub DisableX10TX()

  Dim bBuf As Byte[] = [&HF0, &H3F, &HF0, &H3F]

  If $bDebug Then
    WriteDebugLog("Cmd to " & $sInterfaceType & " => " & Util.ByteToHex(bBuf))
    WriteDebugLog("Disable X10 RF")
  Endif
  QueueCommand(bBuf)

End Sub

' enable ARC aka KAKU
Public Sub EnableARCTX()

  Dim bBuf As Byte[] = [&HF0, &H3D, &HF0, &H3D]

  If $bDebug Then
    WriteDebugLog("Cmd to " & $sInterfaceType & " => " & Util.ByteToHex(bBuf))
    WriteDebugLog("Enable KlikAan-KlikUit RF")
  Endif
  QueueCommand(bBuf)

End

' enable harrison protocol
Public Sub EnableHarrisonTX()

  Dim bBuf As Byte[] = [CByte(&HF0), CByte(&H3C), &HF0, &H3C]

  If $bDebug Then
    WriteDebugLog("Cmd to " & $sInterfaceType & " => " & Util.ByteToHex(bBuf))
    WriteDebugLog("Enable Harrison RF")
  Endif
  QueueCommand(bBuf)

End

' enable koppla protocol
Public Sub EnableKopplaTX()

  Dim bBuf As Byte[] = [CByte(&HF0), CByte(&H3E), &HF0, &H3E]

  If $bDebug Then
    WriteDebugLog("Cmd to " & $sInterfaceType & " => " & Util.ByteToHex(bBuf))
    WriteDebugLog("Enable Flamingo / Koppla RF")
  Endif
  QueueCommand(bBuf)

End

' ask for firmware version
Public Sub GetVersion()

  Dim bBuf As Byte[] = [&HF0, GETSW, &HF0, GETSW]

  If $bDebug Then
    WriteDebugLog("Cmd to " & $sInterfaceType & " => " & Util.ByteToHex(bBuf))
    If Not $bRFXmitter Then WriteDebugLog("RF Modes are reset to: X10 enabled and all other modes are disabled")
    WriteDebugLog($sInterfaceType & " has Firmware Version (next line): ")
  Endif
  QueueCommand(bBuf)

End

Private Function ToHouse(sHouse As String) As Byte

  Select Case UCase(sHouse)
    Case "A"
      Return &H60 'A
    Case "B"
      Return &H70 'B
    Case "C"
      Return &H40 'C
    Case "D"
      Return &H50 'D
    Case "E"
      Return &H80 'E
    Case "F"
      Return &H90 'F
    Case "G"
      Return &HA0 'G
    Case "H"
      Return &HB0 'H
    Case "I"
      Return &HE0 'I
    Case "J"
      Return &HF0 'J
    Case "K"
      Return &HC0 'K
    Case "L"
      Return &HD0 'L
    Case "M"
      Return &H0 'M
    Case "N"
      Return &H10 'N
    Case "O"
      Return &H20 'O
    Case "P"
      Return &H30 'P
  End Select

End

Public Sub GetHouse(sHouse As String, iUnit As Integer) As Byte

  Dim bTemp As Byte

  Select Case sHouse
    Case "A"
      bTemp = &H60
    Case "B"
      bTemp = &H70
    Case "C"
      bTemp = &H40
    Case "D"
      bTemp = &H50
    Case "E"
      bTemp = &H80
    Case "F"
      bTemp = &H90
    Case "G"
      bTemp = &HA0
    Case "H"
      bTemp = &HB0
    Case "I"
      bTemp = &HE0
    Case "J"
      bTemp = &HF0
    Case "K"
      bTemp = &HC0
    Case "L"
      bTemp = &HD0
    Case "M"
      bTemp = &H0
    Case "N"
      bTemp = &H10
    Case "O"
      bTemp = &H20
    Case "P"
      bTemp = &H30
    Case Else
      bTemp = &H60
  End Select
  If iUnit > 8 Then bTemp = bTemp Or &H4
  Return bTemp

End

' Digimax RTS10 control with X10 commands for RFXmitter
Public Sub Digimax(sAddress As String, sCmd As String)

  Dim sData, sHouse, sDevice As String
  Dim iDevice, iHouse As Integer

  sHouse = Left$(sAddress, 1)
  sDevice = Right$(sAddress, 2)
  sData = Chr(44) & sHouse & sDevice
  iHouse = Asc(sHouse)
  iDevice = Asc(sDevice)

  Select Case UCase(sCmd)
    Case "ON"
      sData &= Chr(&H10 Or (&HF - (Lsr(iHouse, 4) + iHouse + Lsr(iDevice, 4) + iDevice + &H1) And &HF))
      sData &= Chr(&H19) & Chr(&H20) & Chr(&HFF - (Lsl(12, 4)) And &HF0)
    Case "OFF"
      sData &= Chr(&H20 Or (&HF - (Lsr(iHouse, 4) + iHouse + Lsr(iDevice, 4) + iDevice + &H2) And &HF))
      sData &= Chr(&H21) & Chr(&H20) & Chr(&HFF - (Lsl(5, 4)) And &HF0)
    Case "LEARN"
      sData &= Chr(&H30 Or (&HF - (Lsr(iHouse, 4) + iHouse + Lsr(iDevice, 4) + iDevice + &H3) And &HF))
      sData &= Chr(&H21) & Chr(&H20) & Chr(&HFF - (Lsl(5, 4)) And &HF0)
  End Select

End

' ARC/KAKU for RFXmitter
Public Sub ARC(sAddress As String, sCmd As String)

  Dim bBuf As New Byte[4]
  Dim iDevice, iUnit As Integer

  iUnit = Asc(Left$(sAddress, 1)) - &H41
  iDevice = Right$(sAddress, 2) - 1

  bBuf[0] = 24

  Select UCase(sCmd)
    Case "ON"
      bBuf[1] = &H54
    Case "OFF"
      bBuf[1] = &H14
    Default
      WriteLog("ERROR: Unknown command '" & UCase(sCmd) & "' given!")
      Return
  End Select

  bBuf[2] = Lsl((iDevice And &H8), 3) Or Lsl((iDevice And &H4), 2) Or Lsl((iDevice And &H2), 1) Or (iDevice And &H1)
  bBuf[3] = Lsl((iUnit And &H8), 3) Or Lsl((iUnit And &H4), 2) Or Lsl((iUnit And &H2), 1) Or (iUnit And &H1)

  QueueCommand(bBuf)

  bBuf[1] = &H55
  bBuf[2] = &H80 Or Lsl((iDevice And &H8), 3) Or Lsl((iDevice And &H4), 2) Or &H7
  bBuf[3] = Lsl((iUnit And &H8), 3) Or Lsl((iUnit And &H4), 2) Or Lsl((iUnit And &H2), 1) Or (iUnit And &H1)

  QueueCommand(bBuf)

End

' X10 for RFXmitter/transmitter
Public Sub X10(sAddress As String, sCommand As String)

  Dim bBuf As New Byte[5]
  Dim bHouse, bUnit As Byte
  Dim iUnit, iDc, iUnithl As Integer
  Dim sCmd As String = UCase(sCommand)

  bHouse = GetHouse(Left$(sAddress, 1), Right$(sAddress, 2))
  bUnit = Val(Right$(sAddress, 2))

  Select sCmd
    Case "ON"
      iUnit = 0
    Case "OFF"
      iUnit = &H20
    Case "BRIGHT"
      iUnit = &H88
    Case "DIM"
      iUnit = &H98
    Case "ALL_LIGHTS_ON"
      iUnit = &H90
    Case "ALL_LIGHTS_OFF", "ALL_UNITS_OFF"
      iUnit = &H80
    Default
      WriteLog("ERROR: Unknown command '" & UCase(sCmd) & "' given!")
      Return
  End Select

  If sCmd = "OFF" Or sCmd = "ON" Then
    If bUnit > 8 Then
      iUnithl = &H4 ' UNITS 9 TO 16
      iDc = bUnit - 8
    Else
      iUnithl = &H0 ' UNITS 1 TO 8
      iDc = bUnit
    Endif
    Select Case iDc
      Case 1
        iUnit = &H0 Or iUnit '1 OR 9
      Case 2
        iUnit = &H10 Or iUnit '2 OR 10
      Case 3
        iUnit = &H8 Or iUnit '3 OR 11
      Case 4
        iUnit = &H18 Or iUnit '4 OR 12
      Case 5
        iUnit = &H40 Or iUnit '5 OR 13
      Case 6
        iUnit = &H50 Or iUnit '6 OR 14
      Case 7
        iUnit = &H48 Or iUnit '7 OR 15
      Case 8
        iUnit = &H58 Or iUnit '8 OR 16
    End Select
  Endif

  bBuf[0] = &H20
  bBuf[1] = bHouse
  bBuf[2] = (Not bHouse) And &HFF
  bBuf[3] = iUnit
  bBuf[4] = (Not iUnit) And &HFF
  QueueCommand(bBuf)

End

' AC and HomeEasy UK for RFXtransmitter, and HomeEasy EU for RFXmitter
Public Sub AC(sAddress As String, sCmd As String, bHEEU As Boolean, Optional bGroup As Boolean)

  Dim bLength As Byte = 33
  Dim bBuf As New Byte[6]
  Dim sUnit As String
  Dim iDim, iBrightness As Integer
  Dim aAddr As String[]

  If bHEEU Then bLength = 34

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    sAddress = aAddr[0]
    sUnit = aAddr[1]
    If sUnit == "group" Then
      bGroup = True
      sUnit = 0
    Endif
  Else
    WriteLog("ERROR: Address has wrong format, use '<Device> <Unit>'!")
    Return
  Endif

  If Len(sAddress) = 9 And If Left(sAddress, 2) = "0x" Then
    sAddress = Right(sAddress, 7)
  Else If Len(sAddress) <> 7 Then
    WriteLog("ERROR: Device address length must be 7 characters!")
    Return
  Endif

  bBuf[1] = Lsl(CByte(Left(sAddress, 1)), 6)
  bBuf[1] = bBuf[1] Or Lsr(CByte(Val("&H" & Mid(sAddress, 2, 2))), 2)
  bBuf[2] = Lsl(CByte(Val("&H" & Mid(sAddress, 2, 2))), 6)
  bBuf[2] = bBuf[2] Or Lsr(CByte(Val("&H" & Mid(sAddress, 4, 2))), 2)
  bBuf[3] = Lsl(CByte(Val("&H" & Mid(sAddress, 4, 2))), 6)
  bBuf[3] = bBuf[3] Or Lsr(CByte(Val("&H" & Mid(sAddress, 6, 2))), 2)
  bBuf[4] = Lsl(CByte(Val("&H" & Mid(sAddress, 6, 2))), 6)
  If bGroup = False Then bBuf[4] = bBuf[4] Or CByte(Val(sUnit) - 1)

  sCmd = UCase(sCmd)

  If InStr(sCmd, "ON") Or If InStr(sCmd, "DIM 100") Then
    If bGroup = True Then
      bBuf[4] = CByte(bBuf[4] Or &H30)
    Else
      bBuf[4] = CByte(bBuf[4] Or &H10)
    Endif
  Else If InStr(sCmd, "OFF") Or If InStr(sCmd, "DIM 0") Then
    If bGroup = True Then bBuf[4] = CByte(bBuf[4] Or &H20)
  Else If InStr(sCmd, "DIM ") Then ' DIM 1 - 99
    iBrightness = Val(Replace(sCmd, "DIM ", ""))
    If iBrightness > 0 Then
      iDim = Round(0.16 * iBrightness) ' 16 steps
      bBuf[5] = Lsl(CByte(iDim), 4)
    Endif
    If bHEEU Then
      bLength = 37
    Else
      bLength = 36
    Endif
    If bGroup Then bBuf[4] = CByte(bBuf[4] Or &H20)
  Else
    WriteLog("ERROR: Unknown command '" & UCase(sCmd) & "' given!")
  Endif
  bBuf[0] = bLength
  QueueCommand(bBuf)

End

' Koppla for RFXmitter
Public Sub Koppla(sAddress As String, sCmd As String)

  Dim bBuf As New Byte[5]
  Dim sHouse, sDevice As String
  Dim iBrightness, iLevel As Integer

  sHouse = Left$(sAddress, 1)
  sDevice = Right$(sAddress, 2)

  bBuf[0] = 26
  bBuf[2] = 0
  bBuf[3] = Asc(sHouse) - Asc("A")
  bBuf[4] = 0

  Select Case CInt(sDevice)
    Case 1
      bBuf[3] = bBuf[3] Or &H20
    Case 2
      bBuf[3] = bBuf[3] Or &H40
    Case 3
      bBuf[3] = bBuf[3] Or &H80
    Case 4
      bBuf[2] = &H1
    Case 5
      bBuf[2] = &H2
    Case 6
      bBuf[2] = &H4
    Case 7
      bBuf[2] = &H8
    Case 8
      bBuf[2] = &H10
    Case 9
      bBuf[2] = &H20
    Case 10
      bBuf[3] = bBuf[3] Or &H10
    Case Else
      Return
  End Select

  If InStr(sCmd, "DIM") Then
    iBrightness = Val(Replace(sCmd, "DIM ", ""))
    sCmd = "DIM"
  Endif

  Select Case UCase(sCmd)
    Case "ALL_LIGHTS_OFF", "ALL_UNITS_OFF"
      bBuf[1] = &H9A ' off
      bBuf[2] = &H3F
      bBuf[3] = bBuf[3] Or &HF0
    Case "ALL_LIGHTS_ON"
      bBuf[1] = &H90 ' on
      bBuf[2] = &H3F
      bBuf[3] = bBuf[3] Or &HF0
    Case "DIM"
      If iBrightness = 0 Then
        bBuf[1] = &H9A
      Else
        iLevel = CInt(iBrightness / 3)
        Select Case iLevel
          Case 0
            bBuf[1] = &H9A ' off
          Case 1
            bBuf[1] = &HD1
          Case 2
            bBuf[1] = &H12
          Case 3
            bBuf[1] = &H53
          Case 4
            bBuf[1] = &HD4
          Case 5
            bBuf[1] = &H95
          Case 6
            bBuf[1] = &H56
          Case 7
            bBuf[1] = &H17
          Case 8
            bBuf[1] = &H18
          Case 9
            bBuf[1] = &H59
          Case Else
            bBuf[1] = &H90 ' on
        End Select
      Endif
    Case "OFF"
      bBuf[1] = &H9A
    Case "ON"
      bBuf[1] = &H90
    Case Else
      Return
  End Select

  bBuf[2] = CalcIkeaParity(bBuf[2], bBuf[3])
  QueueCommand(bBuf)

End

' calulate parity for koppla
Private Function CalcIkeaParity(bBuf1 As Byte, bBuf2 As Byte) As Byte

  Dim iParity, iTemp, iIndex As Integer
  Dim bReturn As Byte

  bReturn = bBuf1
  iTemp = (bBuf1 * 256) + bBuf2
  iParity = 1
  For iIndex = 1 To 7
    iParity = iParity + (iTemp And &H1)
    iTemp = Lsr(iTemp, 2)
  Next
  If (iParity And &H1) = 1 Then bReturn = bReturn Or &H40

  iTemp = (bReturn * 256) + bBuf2
  iParity = 0
  For iIndex = 1 To 15
    iParity = iParity + (iTemp And &H1)
    iTemp = Lsr(iTemp, 1)
  Next
  If (iParity And &H1) = 1 Then bReturn = bReturn Or &H80

End

' Flamingo for RFXmitter
Public Sub Flamingo(sAddress As String, sCmd As String)

  Dim bBuf As New Byte[3]
  Dim sHouse, sDevice As String

  sHouse = Left$(sAddress, 1)
  sDevice = Right$(sAddress, 2)

  bBuf[0] = 11
  bBuf[1] = ToHouse(sHouse)
  bBuf[2] = 0

  Select Case CInt(sDevice)
    Case 1
      bBuf[1] = bBuf[1] Or &H40
    Case 2
      bBuf[1] = bBuf[1] Or &H20
    Case 3
      bBuf[1] = bBuf[1] Or &H10
    Case 4
      bBuf[2] = &H80
    Case 5
      bBuf[2] = &H40
    Case 6
      bBuf[1] = bBuf[1] Or &HC0
    Case 7
      bBuf[1] = bBuf[1] Or &HA0
    Case 8
      bBuf[1] = bBuf[1] Or &H90
    Case 9
      bBuf[1] = bBuf[1] Or &H80
      bBuf[2] = &H80
    Case 10
      bBuf[1] = bBuf[1] Or &H80
      bBuf[2] = &H40
    Case Else
      Return
  End Select

  Select Case UCase(sCmd)
    Case "OFF"
      'nothing to do
    Case "ON"
    bBuf[2] = bBuf[2] Or &H20
  End Select
  QueueCommand(bBuf)

End

' Waveman for RFXmitter
Public Sub Waveman(sAddress As String, sCmd As String)

  Dim bBuf As New Byte[4]
  Dim xLate As Byte[] = [&H00, &H01, &H04, &H05, &H10, &H11, &H14, &H15, &H40, &H41, &H44, &H45, &H50, &H51, &H54, &H55]
  Dim sHouse, sDevice As String

  sHouse = Left$(sAddress, 1)
  sDevice = Right$(sAddress, 2)

  bBuf[0] = 24

  Select Case UCase(sCmd)
    Case "ON"
      bBuf[1] = &H54
    Case "OFF"
      bBuf[1] = &H00
    Case Else
      Return
  End Select

  bBuf[2] = xLate[CInt(sDevice) - 1]
  bBuf[3] = xLate[Asc(sHouse) - &H41]
  QueueCommand(bBuf)

End

' Harrison for RFXmitter
Public Sub Harrison(sAddress As String, sCmd As String)

  Dim bBuf As New Byte[5]
  Dim sHouse As String = Left$(sAddress, 1)
  Dim iDevice As Integer = CInt(Right$(sAddress, 2))

  bBuf[0] = 25
  Select Case sHouse
    Case "A"
      bBuf[1] = &H3C
    Case "B"
      bBuf[1] = &H3F
    Case "C"
      bBuf[1] = &H30
    Case "D"
      bBuf[1] = &H33
    Case "E"
      bBuf[1] = &HC0
    Case "F"
      bBuf[1] = &HC3
    Case "G"
      bBuf[1] = &HCC
    Case "H"
      bBuf[1] = &HCF
    Case "I"
      bBuf[1] = &HFC
    Case "J"
      bBuf[1] = &HFF
    Case "K"
      bBuf[1] = &HF0
    Case "L"
      bBuf[1] = &HF3
    Case "M"
      bBuf[1] = &H0
    Case "N"
      bBuf[1] = &H3
    Case "O"
      bBuf[1] = &HC
    Case "P"
      bBuf[1] = &HF
  End Select

  Select Case iDevice
    Case 1
      bBuf[2] = &H0
    Case 2
      bBuf[2] = &H3
    Case 3
      bBuf[2] = &HC
    Case 4
      bBuf[2] = &HF
    Case 5
      bBuf[2] = &H30
    Case 6
      bBuf[2] = &H33
    Case 7
      bBuf[2] = &H3C
    Case 8
      bBuf[2] = &H3F
    Case 9
      bBuf[2] = &HC0
    Case 10
      bBuf[2] = &HC3
    Case 11
      bBuf[2] = &HCC
    Case 12
      bBuf[2] = &HCF
    Case 13
      bBuf[2] = &HF0
    Case 14
      bBuf[2] = &HF3
    Case 15
      bBuf[2] = &HFC
    Case 16
      bBuf[2] = &HFF
  End Select

  Select Case UCase(sCmd)
    Case "OFF" ' open
      bBuf[3] = &HCF
    Case "ON" ' close
      bBuf[3] = &HF3
    Case "STOP" ' stop
      bBuf[3] = &HFC
    Case Else
      Return
  End Select

  bBuf[4] = &H80
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieves the RFXComTX instance information for JSON-RPC and RFXCom Commander
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JsonRpc_Tools_RFXCom_Get(cData As JSONCollection) As JSONCollection

  Dim cResult As New JSONCollection

  If cData = Null Then Return Null

  Select cData["command"]

    ' Get controller information
    Case "controller"
      cResult.Add(Instance, "instance_id")
      cResult.Add(IsRunning, "running")
      If Not IsRunning Then
        cResult.Add(ErrorText, "errortext")
      Endif

      cResult.Add("rfxcomtx", "rfxcom")
      cResult.Add(IIf($bRFXmitter, "xmitter", "transmitter"), "txtype")

    Case Else
      Return Null

  End Select

  Return cResult

End

