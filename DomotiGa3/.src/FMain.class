' Gambas class file

' Description:
' FMain.class
' Main GUI window

' DomotiGa - an open source home automation program
' Copyright (C) Ron Klinkien, The Netherlands.

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the
' GNU General PUBLIC License for more details.

' You should have received a copy of the GNU General PUBLIC License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

Public hToolButton As ToolButton

Public Sub Form_Open()

  ' open splash/login screen
  FSplashScreen.ShowModal

  ' Check if we have stop now, this will give a gracefull shutdown of gambas
  ' Normally if we click on close/abort during database setup or MySQL is unavailable
  If Not Main.ConnectedDatabase() Then
    Main.bServer = False
    FMain.Close
    Return
  Endif

  Me.Text = "DomotiGa " & IIf(Main.bServer, "Server ", "Client ") & Main.sProgramVersion & " - Open Source Home Automation" & " - (" & Main.sSQLHost & ":" & Main.sSQLDatabase & ")"
  If Main.bMainDebug Then Main.WriteLog("[Main] " & ("Main Debug enabled."))

  ' Only generate tagline in server mode
  If Main.bServer Then Main.SetGlobalVar("Tagline", Main.Random_Text("remarks_tags"))

  ' restore saved position and size
  Me.Move(Main.iWindowX, Main.iWindowY, Main.iWindowWidth, Main.iWindowHeight)

  RefreshMenu()

  OpenMenu(Main.sStartpage)

  If Main.bSoundEnabled Then Sounds.PlaySnd("click.wav")

  ' check if json-rpc service can be reached, versions match, or xmlrpc is disabled
  CheckClientServerConnect()

End

Public Sub CheckClientServerConnect()

  Dim rRPCSettings As Result

  If Not Main.bServer Then
    rRPCSettings = Main.GetSettingTable("jsonrpc")
    If rRPCSettings!enabled = False Then
      Error.Raise("You have disabled the JSON-RPC plugin")
    Endif
    If Main.iJSONRPCPort <> rRPCSettings!httpport Then
      Error.Raise("Client JSON-RPC port (" & Main.iJSONRPCPort & ") does not match server port (" & rRPCSettings!httpport & ")")
    Endif

    ' All fine
    Client.GetProgramVersion()
  Endif

Catch
  Message.Warning(Error.Text & ", so communication\nbetween client & server is not possible!\n")

End

Public Sub CheckServerVersion(sServerVersion As String)

  If Len(sServerVersion) = 0 Then
    Message.Warning("Couldn't connect to JSON-RPC service\nlocated at http://" & Main.sJSONRPCHost & ":" & Main.iJSONRPCHost & "\nIs DomotiGaServer running?")
  Else
    If sServerVersion <> Main.sProgramVersion Then
      Message.Warning("The server runs version " & sServerVersion & " and\nthis client runs version " & Main.sProgramVersion & "\nPlease fix!")
    Endif
  Endif

End

Public Sub GetGraph(sUrl As String) As String

  Dim hClient As HttpClient
  Dim sBuffer As String
  Dim sTempFile As String = Temp() & ".png"

  hClient = New HttpClient As "hClient"
  hClient.URL = sUrl
  hClient.Async = False
  hClient.Timeout = 5
  hClient.Get

  If hClient.Status < 0 Then
    Return ""
  Else
    If hClient.Code <> 200 Then Return ""
    ' success - read the data
    If Lof(hClient) Then sBuffer = Read #hClient, Lof(hClient)
    File.Save(sTempFile, sBuffer)
    Return sTempFile
  Endif

End

Public Sub RefreshMenu()

  Dim rResult, rResultMenu As Result
  Dim iCount, iPanel As Integer
  Dim oObject As Object
  Dim sName As String

  VBoxMenu1.Height = 0
  VBoxMenu2.Height = 0
  VBoxMenu3.Height = 0
  VBoxMenu4.Height = 0

  ' fill toolpanel with enabled menu items
  rResultMenu = Main.hDB.Exec("SELECT * FROM menu_names")
  If rResultMenu Then
    If (rResultMenu.Count >= 1) Then
      For Each rResultMenu
        rResult = Main.hDB.Exec("SELECT * FROM menu WHERE menu = &1 ORDER BY position", rResultMenu!id)
        If Not rResult Then
          Message.Info(("Error: table 'menu' not found!"))
          Return
        Endif
        tpnMain[iPanel].Text = rResultMenu!name
        For iCount = 0 To rResult.Max
          If rResult!enabled = True Then
            If rResult!menu = 1 Then
              hToolButton = New ToolButton(VBoxMenu1) As "MenuToolButton"
              VBoxMenu1.Height = VBoxMenu1.Height + 42
              VBoxMenu1.Width = 130
            Else If rResult!menu = 2 Then
              hToolButton = New ToolButton(VBoxMenu2) As "MenuToolButton"
              VBoxMenu2.Height = VBoxMenu2.Height + 42
              VBoxMenu2.Width = 130
            Else If rResult!menu = 3 Then
              hToolButton = New ToolButton(VBoxMenu3) As "MenuToolButton"
              VBoxMenu3.Height = VBoxMenu3.Height + 42
              VBoxMenu3.Width = 130
            Else
              hToolButton = New ToolButton(VBoxMenu4) As "MenuToolButton"
              VBoxMenu4.Height = VBoxMenu4.Height + 42
              VBoxMenu4.Width = 130
            Endif

            ' Try to load the Form to be displayed, to get the translated form name
            Try oObject = Object.New(rResult!item)
            If Not Error Then
              sName = oObject.Text
            Else
              sName = rResult!name
            Endif

            With hToolButton
              .Name = rResult!id
              .Text = sName
              .Background = Color.TextBackground
              .Font = Font["-1"]
              .Height = 42
              .Width = 119
              .Picture = Picture["images" &/ rResult!icon]
              .Tag = rResult!item
            End With
          Endif
          rResult.MoveNext
        Next
        Inc iPanel
      Next
    Else
      Message(("No menu names found!"))
    Endif
  Else
    Message.Info(("Error: table 'menu_names' not found!"))
  Endif

End

Public Sub OpenMenu(sStart As String)

  Select Case sStart
    Case "FHome"
      OpenPage(FHome)
    Case "FControl"
      OpenPage(FControl)
    Case "FFloorplans"
      OpenPage(FFloorplans)
    Case "FLocations"
      OpenPage(FLocations)
    Case "FDevices"
      OpenPage(FDevices)
    Case "FDeviceValues"
      OpenPage(FDeviceValues)
    Case "FSecurity"
      OpenPage(FSecurity)
    Case "FClimate"
      OpenPage(FClimate)
    Case "FHVAC"
      OpenPage(FHVAC)
    Case "FEnergy"
      OpenPage(FEnergy)
    Case "FEmail"
      OpenPage(FEmail)
    Case "FEvents"
      OpenPage(FEvents)
    Case "FPhone"
      OpenPage(FPhone)
    Case "FCaptures"
      OpenPage(FCaptures)
    Case "FBarcodes"
      OpenPage(Fbarcodes)
    Case "FCamera"
      OpenPage(FCamera)
    Case "FNews"
      OpenPage(Fnews)
    Case "FTVGuide"
      OpenPage(FTVGuide)
    Case "FWeather"
      OpenPage(FWeather)
    Case "FLogfiles"
      OpenPage(FLogfiles)
    Case "FDebug"
      OpenPage(FDebug)
    Case "FServerStats"
      OpenPage(FServerStats)
    Case "FDSC"
      OpenPage(FDSC)
    Case "FMusic"
      OpenPage(FMusic)
    Case "FThermostat"
      OpenPage(FThermostat)
    Case "FNetwork"
      OpenPage(FNetwork)
    Case Else
      OpenPage(FHome)
  End Select

End

Public Sub UpdateStatusPanel()

  ' display correct modes
  If Main.GetGlobalVar("Mute") = True Then
    FHome.btnMute.Text = "UnMute"
    Try pbMute.Picture = Picture["icons/mute.png"]
  Else
    FHome.btnMute.Text = "Mute"
    Try pbMute.Picture = Picture["icons/sound.png"]
  Endif

  txtMode.Text = Main.Caps(Main.GetGlobalVar("House_Mode"))
  FHome.btnMode.Text = Main.Caps(Main.GetGlobalVar("House_Mode"))
  txtSunRise.Text = Main.GetGlobalVar("Sunrise")
  txtSunSet.Text = Main.GetGlobalVar("Sunset")
  ' update e-mail/voice counters
  Main.UpdateCounters()

  ' hide leds and menus of disabled interfaces
  If Plugin.IsPluginEnabled("Bluetooth", 0) Then
    FMain.MenuToolsBluetoothBrowser.Enabled = True
  Else
    FMain.MenuToolsBluetoothBrowser.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("Temp08", 0) Then
    FMain.tbOneWire.Visible = True
    FMain.pbOneWire.Visible = True
  Else
    FMain.tbOneWire.Visible = False
    FMain.pbOneWire.Visible = False
  Endif

  If Plugin.IsPluginEnabled("OpenTherm", 0) Then
    FMain.tbOT.Visible = True
    FMain.pbOT.Visible = True
  Else
    FMain.tbOT.Visible = False
    FMain.pbOT.Visible = False
  Endif
  If Plugin.IsPluginEnabled("Velbus", 0) Then
    FMain.tbVelbus.Visible = True
    FMain.pbVelbus.Visible = True
  Else
    FMain.tbVelbus.Visible = False
    FMain.pbVelbus.Visible = False
  Endif
  If Plugin.IsPluginEnabled("DSC", 0) Then
    FMain.tbDSC.Visible = True
    FMain.pbDSC.Visible = True
    FMain.MenuToolsDSCPanel.Enabled = True
  Else
    FMain.tbDSC.Visible = False
    FMain.pbDSC.Visible = False
    FMain.MenuToolsDSCPanel.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("Toon", 0) Then
    FMain.MenuToolsToonCmdr.Enabled = True
  Else
    FMain.MenuToolsToonCmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("KNX", 0) Then
    FMain.MenuToolsKNXCmdr.Enabled = True
  Else
    FMain.MenuToolsKNXCmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("RFXComRX", 0) Or Plugin.IsPluginEnabled("RFXComTX", 0) Or Main.bRFXComxPLEnabled Or Plugin.IsPluginEnabled("RFXComTRX", 0) Then
    FMain.tbRFXCom.Visible = True
    FMain.pbRFXCom.Visible = True
    FMain.MenuToolsRFXComCmdr.Enabled = True
  Else
    FMain.tbRFXCom.Visible = False
    FMain.pbRFXCom.Visible = False
    FMain.MenuToolsRFXComCmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("CTX35", 0) Or If Plugin.IsPluginEnabled("X10Cmd", 0) Or If Plugin.IsPluginEnabled("RFXComTX", 0) Then
    FMain.tbX10.Visible = True
    FMain.pbX10.Visible = True
    FMain.MenuToolsX10Cmdr.Enabled = True
  Else
    FMain.tbX10.Visible = False
    FMain.pbX10.Visible = False
    FMain.MenuToolsX10Cmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("KNX", 0) Then
    FMain.tbKNX.Visible = True
    FMain.pbKNX.Visible = True
  Else
    FMain.tbKNX.Visible = False
    FMain.pbKNX.Visible = False
  Endif

  If Plugin.IsPluginEnabled("PLCBUS", 0) Then
    FMain.tbPLCBUS.Visible = True
    FMain.pbPLCBUS.Visible = True
    FMain.MenuToolsPLCBUSCmdr.Enabled = True
  Else
    FMain.tbPLCBUS.Visible = False
    FMain.pbPLCBUS.Visible = False
    FMain.MenuToolsPLCBUSCmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("OpenZWave", 0) Then
    FMain.tbZWave.Visible = True
    FMain.pbZWave.Visible = True
    FMain.MenuToolsOpenZWaveCmdr.Enabled = True
  Else
    FMain.tbZWave.Visible = False
    FMain.pbZWave.Visible = False
    FMain.MenuToolsOpenZWaveCmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("CUL", 0) Then
    FMain.tbCUL.Visible = True
    FMain.pbCUL.Visible = True
    FMain.MenuToolsCULCmdr.Enabled = True
  Else
    FMain.tbCUL.Visible = False
    FMain.pbCUL.Visible = False
    FMain.MenuToolsCULCmdr.Enabled = False
  Endif

  If Plugin.IsPluginEnabled("HomeMatic", 0) Then
    FMain.tbHM.Visible = True
    FMain.pbHM.Visible = True
    FMain.MenuToolsHomeMaticQuickSet.Enabled = True
  Else
    FMain.tbHM.Visible = False
    FMain.pbHM.Visible = False
    FMain.MenuToolsHomeMaticQuickSet.Enabled = False
  Endif

  ' todo
  If Not Main.bServer Then
    FMain.MenuToolsX10Cmdr.Enabled = False
    FMain.MenuToolsDSCPanel.Enabled = False
  Endif

End

Public Sub Form_Resize()

  ' sidepanel
  If spnMain.Hidden Then
    spnMain.Move(1, 1, 8, Me.ClientHeight - 38)
  Else
    spnMain.Move(1, 1, 155, Me.ClientHeight - 38)
  Endif
  ' toolpanel
  tpnMain.Move(1, 1, 148, Me.ClientHeight - 39)
  ScrollViewMenu1.Move(0, 1, 144, Me.ClientHeight - 120)
  ScrollViewMenu2.Move(0, 1, 144, Me.ClientHeight - 120)
  ScrollViewMenu3.Move(0, 1, 144, Me.ClientHeight - 120)
  ScrollViewMenu4.Move(0, 1, 144, Me.ClientHeight - 120)
  ' status panel & bar
  pnlStatus.Move(2, Me.ClientHeight - 34, Me.ClientWidth - 4, 32)
  hbStatus.Move(4, 1, Me.ClientWidth - 12, 32)

End

Public Sub DisplayGraphs(sRange As String, sGroup As String, oPanel As Object, Optional bAppend As Boolean)

  Dim pGraph As Picture
  Dim sGraphs As String[]
  Dim sGraph, sGraphPic, sGraphUrl As String
  Dim hPictureBox As PictureBox
  Dim oObject As Object
  Dim iHeight As Integer

  If Not bAppend Then
    ' delete previous graphs first
    For Each oObject In oPanel.Children
      oObject.Delete()
    Next
  Endif

  If sRange = "1h" Then
    DisplayHeader(sGroup & (" Sensors"), oPanel)
    DisplaySensors(sGroup, oPanel, sGroup)
  Endif

  If Main.bRRDToolEnabled Then
    sGraphs = Split(RRDTool.Graphs(sGroup), "|")
    If sGraphs.Count Then
      DisplayHeader(sGroup & (" Statistics - Last ") & sRange, oPanel)
      If Main.bServer Then
        RRDTool.CreateGraphs(sGroup, sRange)
        RRDTool.CreateExtGraphs(sGroup, sRange)
      Else
        Client.UpdateRRDGraphs(sGroup, sRange)
      Endif
      For Each sGraph In sGraphs
        If sGraph Then
          If Main.bServer Then
            sGraphPic = Main.sBaseDir & "/rrd/graphs/" & sGraph & "-" & sRange & ".png"
            Try pGraph = Picture.Load(sGraphPic)
          Else
            sGraphUrl = Main.sGraphsUrl &/ sGraph & "-" & sRange & ".png"
            sGraphPic = GetGraph(sGraphUrl)
            If Len(sGraphPic) Then
              If Main.bRRDToolDebug Then Main.WriteDebugLog("[RRDTool] Downloaded graph '" & sGraphUrl & "'")
              Try pGraph = Picture.Load(sGraphPic)
            Else
              If Main.bRRDToolDebug Then Main.WriteDebugLog("[RRDTool] Failed to download graph '" & sGraphUrl & "'")
              pGraph = Null
            Endif
          Endif
          If pGraph Then
            hPictureBox = New PictureBox(oPanel) As "Graph"
            With hPictureBox
              .Picture = pGraph
              .Height = pGraph.Height + 5
              .Width = pGraph.Width
              .Border = 0
              .Tag = sGraph
            End With
          Endif
        Endif
        ' erase previous image
        If Main.bServer = False Then
          If Exist(sGraphPic) Then Kill sGraphPic
        Endif
      Next
      iHeight = 0

      ' calculate needed scrollview and panel height
      For Each oObject In oPanel.Children
        iHeight += oObject.Height
      Next
      oPanel.Resize(oPanel.Width, iHeight)
    Endif
  Endif

End

Public Sub DisplaySecurity(sGroup As String, oPanel As Object)

  Dim oObject As Object

  ' delete previous graphs first
  For Each oObject In oPanel.Children
    oObject.Delete()
  Next

  DisplaySensors(sGroup, oPanel, "Virtual")
  DisplaySensors(sGroup, oPanel, "Doors")
  DisplaySensors(sGroup, oPanel, "Windows")
  DisplaySensors(sGroup, oPanel, "Motion")

End

Public Sub DisplayHeader(sText As String, oPanel As Object)

  Dim hText As TextBox

  hText = New TextBox(oPanel) As "Header"
  With hText
    .Border = False
    .Text = sText
    .Height = 32
    .Width = Me.ClientW - 20
    .Font = Font["Sans Serif, 12"]
    .Tag = sText
  End With

End

Public Sub DisplayMessage(sText As String, oPanel As Object)

  Dim hText As TextBox

  hText = New TextBox(oPanel) As "Message"
  With hText
    .Border = False
    .Text = sText
    .Height = 32
    .Width = Me.ClientW - 20
    .Tag = sText
  End With

End

Public Sub FillCombo(oObject As Object, sRange As String)

  Dim iCnt As Integer
  Dim fCnt As Float

  oObject.Clear
  Select sRange
    Case "FF"
      For iCnt = 0 To 255
        oObject.Add(Hex(iCnt, 2))
      Next
    Case "3F"
      For iCnt = 0 To 31
        oObject.Add(Hex(iCnt, 2))
      Next
    Case "1F"
      For iCnt = 0 To 31
        oObject.Add(Hex(iCnt, 2))
      Next
    Case "7F"
      For iCnt = 0 To 127
        oObject.Add(Hex(iCnt, 2))
      Next
    Case "16"
      For iCnt = 1 To 16
        oObject.Add(Format(iCnt, "0"))
      Next
    Case "32"
      For iCnt = 1 To 32
        oObject.Add(iCnt)
      Next
    Case "05"
      For iCnt = 0 To 5
        oObject.Add(Format(iCnt, "00"))
      Next
    Case "06"
      For iCnt = 1 To 6
        oObject.Add(Format(iCnt, "00"))
      Next
    Case "F"
      For iCnt = 0 To 15
        oObject.Add(Hex(iCnt, 1))
      Next 
    Case "0F"
      For iCnt = 0 To 15
        oObject.Add(Hex(iCnt, 2))
      Next
    Case "7"
      For iCnt = 0 To 7
        oObject.Add(Format(iCnt, "00"))
      Next
    Case "4"
      For iCnt = 0 To 3
        oObject.Add(Hex(iCnt, 1))
      Next
    Case "28"
      For fCnt = 5 To 28 Step 0.5
        oObject.Add(Format(fCnt, "#0.0"))
      Next
  End Select

End

Public Sub DisplaySensors(sGroup As String, oPanel As Object, sGroup2 As String)

  Dim hText As TextLabel
  Dim rDevice, rType, rDeviceValue As Result
  Dim hPanel As Panel
  Dim sText, sValue, sLabel As String
  Dim bPrintHeader, bDisplayHeader As Boolean
  Dim hMovieBox As MovieBox

  Try rDevice = Devices.GetDevicesAndValues(["enabled": True, "groups": ["%" & sGroup & "%", "%" & sGroup2 & "%"], "inc_device_values": False])
  If rDevice Then
    If rDevice.Count Then
      For Each rDevice

        If Not bDisplayHeader Then
          Select sGroup2
            Case "Virtual"
              DisplayHeader(sGroup & (" Sensors"), oPanel)
            Case "Doors"
              DisplayHeader(("Door Sensors"), oPanel)
            Case "Windows"
              DisplayHeader(("Window Sensors"), oPanel)
            Case "Motion"
              DisplayHeader(("Motion Sensors"), oPanel)
          End Select
          bDisplayHeader = True
        Endif
        ' create panel for sensor info
        If Not bPrintHeader Then
          hPanel = New Panel(oPanel) As "Panel"
          With hPanel
            .X = 10
            .Y = 0
            .Height = 32
            .Width = Me.ClientW - 20
          End With
          ' name
          hText = New TextLabel(hPanel) As "Sensors"
          With hText
            .Text = ("Name")
            .X = 30
            .Y = 0
            .Height = 32
            .Width = 150
          End With
          ' value 1 name
          If InStr(sGroup, "Climate") Or InStr(sGroup, "HVAC") Then
            sText = ("Temp")
          Else If InStr(sGroup, "Energy") Then
            sText = ("Power")
          Else If InStr(sGroup, "Security") Then
            sText = ("Status")
          Endif
          ' value 1
          hText = New TextLabel(hPanel) As "Sensors"
          With hText
            .Text = sText
            .X = 185
            .Y = 0
            .Height = 32
            .Width = 50
          End With
          sText = ""
          ' value2 if set
          If InStr(sGroup, "Climate") Then
            sText = ("Humid")
          Else If InStr(sGroup, "Energy") Then
            sText = ("Usage")
          Else If InStr(sGroup, "Security") Then
            sText = ("Tamper")
          Endif
          If InStr(sGroup2, "Motion") Then
            sText = ""
          Endif
          If sText Then
            ' value2
            hText = New TextLabel(hPanel) As "Sensors"
            With hText
              .Text = sText
              .X = 270
              .Y = 0
              .Height = 32
              .Width = 90
            End With
          Endif
          If sGroup <> "Security" Then
            sText = ""
            ' value3 if set
            If InStr(sGroup, "Climate") Then
              sText = ("Level")
            Else If InStr(sGroup, "Energy") Then
              sText = ("Usage/Hour")
            Endif
            If sText Then
              ' value3
              hText = New TextLabel(hPanel) As "Sensors"
              With hText
                .Text = sText
                .X = 355
                .Y = 0
                .Height = 32
                .Width = 90
              End With
            Endif
            ' value4
            sText = ""
            If InStr(sGroup, "Climate") Then
              sText = ("Extra")
            Endif
            If sText Then
              hText = New TextLabel(hPanel) As "Sensors"
              With hText
                .Text = ("Extra")
                .X = 440
                .Width = 90
                .Y = 0
                .Height = 32
              End With
            Endif
          Endif
          ' last seen time
          hText = New TextLabel(hPanel) As "Sensors"
          With hText
            .Text = ("Last Seen")
            If sGroup = "Security" Then
              .X = 355
            Else
              .X = 525
            Endif
            .Y = 0
            .Height = 32
            .Width = 150
          End With

          bPrintheader = True
        Endif

        ' fetch devicetype values
        Try rType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rDevice!devicetype_id)

        hPanel = New Panel(oPanel) As "Panel"
        With hPanel
          .X = 10
          .Y = 0
          .Height = 32
          .Width = oPanel.Width - 10
        End With

        ' device name
        hText = New TextLabel(hPanel) As "Sensors"
        With hText
          .Text = rDevice!device_name
          .X = 30
          .Y = 0
          .Height = 32
          .Width = 150
        End With

        Try rDeviceValue = Devices.GetValues(["device_id": rDevice!device_id, "valuenum": [1, 2, 3, 4]])
        If rDeviceValue Then
          If rDeviceValue.Count Then
            For Each rDeviceValue

              If rDeviceValue!valuenum == 1 Then
                hMovieBox = New MovieBox(hPanel) As "Icon"
                With hMovieBox
                Try .Path = Main.sBaseDir &/ "icons" &/ Devices.GetStatusIcon(rDeviceValue!value, rDevice!device_onicon, rDevice!device_officon, rDevice!device_dimicon)
                .Height = 32
                .Width = 32
                .X = 10
                .Y = 0
                .Playing = True
                End With
              Endif

              sValue = Devices.CorrectValue(rDeviceValue!value, rDeviceValue!correction, rDevice!device_id)
              sLabel = rDeviceValue!units

              ' value
              hText = New TextLabel(hPanel) As "Sensors"
              With hText
                .Text = sValue & " " & sLabel
                .X = 185 + (rDeviceValue!valuenum * 80 - 80) 
                .Y = 0
                .Height = 32
                .Width = 90
              End With
            Next
          Endif
        Endif

        ' last seen time
        If rDevice!device_lastseen Then
          sText = Replace$(Str$(Format(rDevice!device_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        Else
          sText = ""
        Endif
        hText = New TextLabel(hPanel) As "Sensors"
        With hText
          .Text = sText
          If sGroup = "Security" Then
            .X = 355
          Else
            .X = 525
          Endif
          .Y = 0
          .Height = 32
          .Width = 180
        End With
      Next

      ' blank space
      hPanel = New Panel(oPanel) As "Panel"
      With hPanel
        .X = 35
        .Y = 0
        .Height = 32
        .Width = oPanel.Width - 10
      End With
    Else
      If sGroup = "Security" Then
        Select sGroup2
          Case "Doors"
            DisplayHeader(("Door Sensors"), oPanel)
          Case "Windows"
            DisplayHeader(("Window Sensors"), oPanel)
          Case "Motion"
            DisplayHeader(("Motion Sensors"), oPanel)
        End Select
        DisplayMessage(("No devices found in groups ") & sGroup & (" and ") & sGroup2 & ".", oPanel)
      Else
        DisplayMessage(("No devices in group ") & sGroup & (" found."), oPanel)
      Endif
    Endif
  Endif

End

Public Sub DisplaySensorsforLocation(iLocationId As Integer, oPanel As Object)

  Dim hText As TextLabel
  Dim rDevice, rType As Result
  Dim hMovieBox As MovieBox
  Dim hPanel As Panel
  Dim sText, sValue, sLabel As String
  Dim bPrintHeader As Boolean
  Dim iHeight As Integer
  Dim oObject As Object

  Try rDevice = Devices.GetDevicesAndValues(["location_id": iLocationId])
  If rDevice.Count Then
    For Each rDevice
      sValue = Devices.CorrectValue(rDevice!device_value_value, rDevice!device_value_correction, rDevice!device_id)
      sLabel = rDevice!device_value_units

      ' create panel for sensor info
      If Not bPrintHeader Then
        hPanel = New Panel(oPanel) As "Panel"
        With hPanel
          .X = 25
          .Y = 0
          .Height = 32
          .Width = oPanel.Width - 10
        End With

        ' name
        hText = New TextLabel(hPanel) As "Sensors"
        With hText
          .Foreground = Color.Gray
          .Text = ("Name")
          .X = 30
          .Y = 0
          .Height = 32
          .Width = 150
        End With

        ' last change time
        hText = New TextLabel(hPanel) As "Sensors"
        With hText
          .Foreground = Color.Gray
          .Text = ("Last Seen")
          .X = 490
          .Y = 0
          .Height = 32
          .Width = 140
        End With
        bPrintheader = True
      Endif

      ' fetch devicetype values
      Try rType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE id = &1", rDevice!device_devicetype_id)

      hPanel = New Panel(oPanel) As "Panel"
      With hPanel
        .X = 35
        .Y = 0
        .Height = 32
        .Width = oPanel.Width - 10
      End With

      ' device icon
      hMovieBox = New MovieBox(hPanel) As "Icon"
      With hMovieBox
        .Path = Main.sBaseDir &/ "icons" &/ Devices.GetStatusIcon(rDevice!device_value_value, rDevice!device_onicon, rDevice!device_officon, rDevice!device_dimicon)
        .Height = 32
        .Width = 20
        .X = 10
        .Y = 0
        .Playing = True
      End With

      ' device name
      hText = New TextLabel(hPanel) As "Sensors"
      With hText
        .Text = rDevice!device_name
        .X = 30
        .Y = 0
        .Height = 32
        .Width = 150
      End With

      ' value
      hText = New TextLabel(hPanel) As "Sensors"
      With hText
        .Text = sValue & " " & sLabel
        .X = 180
        .Y = 0
        .Height = 32
        .Width = 90
      End With

      ' last seen time
      If rDevice!device_lastseen Then
        sText = Replace$(Str$(Format(rDevice!device_lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Else
        sText = "Never"
      Endif
      hText = New TextLabel(hPanel) As "Sensors"
      With hText
        .Text = sText
        .X = 490
        .Y = 0
        .Height = 32
        .Width = 120
      End With
    Next

    ' blank space
    hPanel = New Panel(oPanel) As "Panel"
    With hPanel
      .X = 35
      .Y = 0
      .Height = 32
      .Width = oPanel.Width - 10
    End With
  Endif
  iHeight = 0

  ' calculated needed scrollview height
  For Each oObject In oPanel.Children
    iHeight += oObject.Height
  Next
  oPanel.Height = iHeight

End

Public Sub DisplayLocation(sLocation As String, oPanel As Object)

  Dim oObject As Object
  Dim iLocationId As Integer
  Dim rLocation As Result

  ' delete previous graphs first
  For Each oObject In oPanel.Children
    oObject.Delete()
  Next

  ' fetch location name
  rLocation = Main.hDB.Exec("SELECT * FROM locations WHERE name LIKE &1", sLocation)
  If (rLocation.Count >= 1) Then
    iLocationId = rLocation!id
  Else
    Message(("No locations found!"))
    Return
  Endif

  DisplayHeader(sLocation, oPanel)
  DisplaySensorsforLocation(iLocationId, oPanel)

End

Public Sub DisplayNotImplemented(sText As String, oPanel As Object)

  Dim hFrame As Frame
  Dim hTextLabel As TextLabel

  sText = Subst(("This form is a placeholder for things to come, read the comments in the source of form &1 for more details."), sText)

  hFrame = New Frame(oPanel) As "FrameNI"
  With hFrame
    .X = 5
    .Y = 5
    .Height = 70
    .Width = 378
    .Text = ("Information")
  End With

  hTextLabel = New TextLabel(hFrame) As "TextLabelNI"
  With hTextLabel
    .X = 7
    .Y = 21
    .Text = sText
    .Width = 364
    .Height = 32
  End With

End

Public Sub spnMain_Arrange()

  ' resize workspace
  wrkMain.Move(spnMain.Width + 2, 3, Me.ClientWidth - spnMain.Width - 4, Me.ClientHeight - 40)

End

Public Sub MenuToolButton_Click()

  OpenMenu(Last.Tag)

End

' load a page onto the workspace, or give already loaded page focus.
Public Sub OpenPage(hForm As Form)

  wrkMain.Add(hForm)
  wrkMain.ActiveWindow = hForm

End

Public Sub Form_Close()

  Dim wWindow As Window
  Dim hSettings As Settings

  If Main.bServer Then
    If Message.Question(("Are you sure that you want to close the server?"), ("Yes"), ("No")) = 2 Then
      Stop Event
      Return
    Endif
  Endif

  ' save window size and position
  hSettings = New Settings(Main.sBaseDir &/ Main.sSettings)
  hSettings["GUI/WindowX"] = Me.X 
  hSettings["GUI/WindowY"] = Me.Y 
  hSettings["GUI/WindowHeight"] = Me.Height
  hSettings["GUI/WindowWidth"] = Me.Width
  hSettings["MySQL/Initialized"] = Main.bSQLInitialized

  Try hSettings.Save
  If Error Then
    Message.Error("Unable to write to file '" & Main.sBaseDir &/ Main.sSettings & "'\nPlease check the file permissions")
  Endif

  ' exit program
  Main.CloseAll()

  For Each wWindow In Windows
    Try wWindow.Close
  Next

End

Public Function Search(tv As TableView, i As Integer, col As Integer, Mode As Integer) As Integer

  Dim k, pos As Integer
  Dim v1, v2 As Variant

  pos = i

  For k = i To tv.Rows.Count - 1
    v1 = tv[k, col].Text
    v2 = tv[pos, col].Text
    If Len(v1) <> Len(v2) And If v1 And If RegExp.Match(v1, "\\d\\d:\\d\\d:\\d\\d$") Then
      ' time versus date-time: 07:43:12 versus 2014/11/23 16:26:34 (other time/dates can be sorted as string)
      If mode = 0 Then ' min
        If Len(v1) > Len(v2) Then
          pos = k
        Endif
      Else ' max
        If Len(v1) < Len(v2) Then
          pos = k
        Endif
      Endif
    Else If TypeOf(Val(tv[k, col].Text)) <= gb.Float Then
      ' behaves like number
      v1 = Val(v1)
      v2 = Val(v2)

      If v1 = Null Then
        v1 = 0
      Endif

      If v2 = Null Then
        v2 = 0
      Endif

      If mode = 0 Then ' min
        If CFloat(v1) < CFloat(v2) Then
          pos = k
        Endif
      Else ' max
        If CFloat(v1) > CFloat(v2) Then
          pos = k
        Endif
      Endif
    Else
      ' behaves like string
      If v1 = Null Then
        v1 = " "
      Endif

      If v2 = Null Then
        v2 = " "
      Endif

      If mode = 0 Then ' min
        If v1 < v2 Then
          pos = k
        Endif
      Else ' max
        If v1 > v2 Then
          pos = k
        Endif
      Endif
    Endif
  Next

  Return pos

End

Public Sub Change(tv As TableView, i As Integer, pos As Integer)

  Dim k As Integer
  Dim row As New String[]
  Dim rowPic As New Variant[]

  ' load first data into row
  For k = 0 To tv.Columns.Count - 1
    row.Add(tv[i, k].Text)
    rowPic.Add(tv[i, k].Picture)
  Next

  ' put second row into first
  For k = 0 To tv.Columns.Count - 1
    tv[i, k].Text = tv[pos, k].Text
    tv[i, k].Picture = tv[pos, k].Picture
  Next

  ' finally, save temporary data
  For k = 0 To tv.Columns.Count - 1
    tv[pos, k].Text = row[k]
    tv[pos, k].Picture = rowPic[k]
  Next

End

Public Sub SortTableView(tv As TableView, col As Integer, A As Boolean)

  Dim i, MinRes, MaxRes As Integer

  tv.Cancel()

  For i = 0 To tv.Rows.Count - 1
    If A Then
      MinRes = Search(tv, i, col, 0)
      Change(tv, i, MinRes)
    Else
      MaxRes = Search(tv, i, col, 1)
      Change(tv, i, MaxRes)
    Endif
  Next

  tv.Refresh

End

Public Sub SortGridView(gv As GridView, col As Integer, A As Boolean)

  Dim i, MinRes, MaxRes As Integer

  For i = 0 To gv.Rows.Count - 1
    If A Then
      MinRes = SearchGrid(gv, i, col, 0)
      ChangeGrid(gv, i, MinRes)
    Else
      MaxRes = SearchGrid(gv, i, col, 1)
      ChangeGrid(gv, i, MaxRes)
    Endif
  Next

  gv.Refresh

End

Public Function SearchGrid(gv As GridView, i As Integer, col As Integer, Mode As Integer) As Integer

  Dim k, pos As Integer
  Dim v1, v2 As Variant

  pos = i

  For k = i To gv.Rows.Count - 1
    v1 = gv[k, col].Text
    v2 = gv[pos, col].Text

    If Len(v1) <> Len(v2) And If v1 And If RegExp.Match(v1, "\\d\\d:\\d\\d:\\d\\d$") Then
      ' time versus date-time: 07:43:12 versus 2014/11/23 16:26:34 (other time/dates can be sorted as string)
      If mode = 0 Then ' min
        If Len(v1) > Len(v2) Then
          pos = k
        Endif
      Else ' max
        If Len(v1) < Len(v2) Then
          pos = k
        Endif
      Endif
    Else If TypeOf(Val(gv[k, col].Text)) <= gb.Float Then
      ' behaves like number
      v1 = Val(gv[k, col].Text)
      v2 = Val(gv[pos, col].Text)

      If v1 = Null Then
        v1 = 0
      Endif

      If v2 = Null Then
        v2 = 0
      Endif

      If mode = 0 Then ' min
        If CFloat(v1) < CFloat(v2) Then
          pos = k
        Endif
      Else ' max
        If CFloat(v1) > CFloat(v2) Then
          pos = k
        Endif
      Endif
    Else
      ' behaves like string
      v1 = gv[k, col].Text
      v2 = gv[pos, col].Text

      If v1 = Null Then
        v1 = " "
      Endif

      If v2 = Null Then
        v2 = " "
      Endif

      If mode = 0 Then ' min
        If v1 < v2 Then
          pos = k
        Endif
      Else ' max
        If v1 > v2 Then
          pos = k
        Endif
      Endif
    Endif
  Next

  Return pos

Catch

End

Public Sub ChangeGrid(gv As GridView, i As Integer, pos As Integer)

  Dim k As Integer

  For k = 0 To gv.Columns.Count - 1
    If gv[i, k].Text Or If gv[pos, k].Text Then
      Swap gv[i, k].Text, gv[pos, k].Text
    Else If gv[i, k].RichText Or If gv[pos, k].RichText Then
      Swap gv[i, k].RichText, gv[pos, k].RichText
    Else If gv[i, k].Picture Or If gv[pos, k].Picture Then
      Swap gv[i, k].Picture, gv[pos, k].Picture
    Endif
  Next

End

Public Sub MenuLogout_Click()

  Main.WriteLog("[Main] " & ("Logged out '") & txtUser.Text & ("'"))

  Main.bLogOut = True
  ' show splash screen, load program
  FSplashScreen.ShowModal

End

Public Sub MenuQuit_Click()

  FMain.Close

End

' about menu entry
Public Sub MenuAbout_Click()

  FAbout.Show

End

' device menu entries
Public Sub MenuDeviceTypesGroups_Click()

  FEditDeviceTypesGroups.Show

End

Public Sub MenuEditDevices_Click()

  FDeviceEditor.Run()

End

Public Sub MenuDevicesList_Click()

  OpenPage(FDevices)

End

Public Sub MenuDeviceValuesList_Click()

  OpenPage(FDeviceValues)

End

Public Sub MenuEditEvents_Click()

  FEventEditor.bAddEvent = True
  FEventEditor.Show

End

Public Sub MenuEventsList_Click()

  OpenPage(FEvents)

End

Public Sub MenuEditTriggers_Click()

  FTriggerEditor.bAddTrigger = True
  FTriggerEditor.Show()

End

Public Sub MenuEditConditions_Click()

  FConditionEditor.bAddCondition = True
  FConditionEditor.Show()

End

Public Sub MenuEditActions_Click()

  FActionEditor.bAddAction = True
  FActionEditor.Show()

End

' tools menu entries
Public Sub MenuToolsX10Cmdr_Click()

  FToolsX10Cmdr.Show

End

Public Sub MenuToolsSerialMonitor_Click()

  FToolsSerialMon.Show

End

Public Sub MenuToolsSerialPorts_Click()

  FToolsSerialPorts.Show

End

Public Sub MenuToolsRFXComCmdr_Click()

  FToolsRFXComCmdr.Show

End

Public Sub MenuToolsDatabaseAdmin_Click()

  FToolsDatabaseAdmin.Show

End

Public Sub MenuToolsBluetoothBrowser_Click()

  FToolsBluetoothBrowser.Show

End

Public Sub MenuToolsDSCPanel_Click()

  OpenPage(FDSC)

End

Public Sub MenuToolsDomoCmdr_Click()

  ' FToolsDomoCmdr.Show

End

Public Sub MenuToolsOpenZWaveCmdr_Click()

  FToolsOpenZWaveCmdr.Show

End

Public Sub MenuToolsPLCBUSCmdr_Click()

  FToolsPLCBUSCmdr.Show

End

' setup menu entries
Public Sub MenuSettingsMySQL_Click()

  FSettingsMySQL.Show

End

Public Sub MenuSettingsGUI_Click()

  FSettingsGUI.Show

End

Public Sub MenuSettingsMain_Click()

  FSettingsMain.Show

End

Public Sub MenuSettingsAstro_Click()

  FSettingsAstro.Show

End

Public Sub MenuSettingsDeviceDiscover_Click()

  FSettingsDeviceDiscover.Show

End

Public Sub MenuSettingsEmail_Click()

  FSettingsEmail.Show

End

Public Sub MenuSettingsGMail_Click()

  FSettingsGMail.Show

End

Public Sub MenuSettingsTVGuide_Click()

  FSettingsTVGuide.Show

End

Public Sub MenuSettingsXMLRPC_Click()

  FSettingsXMLRPC.Show

End

Public Sub MenuSettingsSound_Click()

  FSettingsSound.Show

End

Public Sub MenuSettingsVoiceText_Click()

  FSettingsVoiceText.Show

End

Public Sub MenuSettingsCTX35_Click()

  FSettingsCTX35.Show

End

Public Sub MenuSettingsTemp08_Click()

  FSettingsTemp08.Show

End

Public Sub MenuSettingsSMS_Click()

  FSettingsSMS.Show

End

Public Sub MenuSettingsDSC_Click()

  FSettingsDSC.Show

End

Public Sub MenuSettingsVisonic_Click()

  FSettingsVisonic.Show

End


Public Sub MenuSettingsGPS_Click()

  FSettingsGPS.Show

End

Public Sub MenuSettingsX10Cmd_Click()

  FSettingsX10Cmd.Show

End

Public Sub MenuSettingsMochad_Click()

  FSettingsMochad.Show
End

Public Sub MenuSettingsRFXComRX_Click()

  FSettingsRFXComRX.Show

End

Public Sub MenuSettingsRFXComTX_Click()

  FSettingsRFXComTX.Show

End

Public Sub MenuSettingsUPS_Click()

  FSettingsUPS.Show

End

Public Sub MenuSettingsVelbus_Click()

  FSettingsVelbus.Show

End

Public Sub MenuSettingsWirelessTags_Click()

  FSettingsWirelessTags.Show

End

Public Sub MenuSettingsHDDTemp_Click()

  FSettingsHDDTemp.Show

End

Public Sub MenuSettingsCamVisca_Click()

  FSettingsCamVisca.Show

End

Public Sub MenuSettingsVideoServer_Click()

  FSettingsVideoServer.Show

End

Public Sub MenuSettingsBwiredMap_Click()

  FSettingsBwiredMap.Show

End

Public Sub MenuSettingsRRDTool_Click()

  FSettingsRRDTool.Show

End

Public Sub MenuSettingsAsterisk_Click()

  FSettingsAsterisk.Show

End

Public Sub MenuSettingsBluetooth_Click()

  FSettingsBluetooth.Show

End

Public Sub MenuSettingsWeeder_Click()

  FSettingsWeeder.Show

End

Public Sub MenuSettingsOpenZWave_Click()

  FSettingsOpenZWave.Show

End

Public Sub MenuSettingsEZcontrol_Click()

  FSettingsEZcontrol.Show

End

Public Sub MenuSettingsServerStats_Click()

  FSettingsServerStats.Show

End

Public Sub MenuSettingsKNX_Click()

  FSettingsKNX.Show

End

Public Sub MenuSettingsIRMan_Click()

  FSettingsIRMan.Show

End

Public Sub MenuSettingsDenon_Click()

  FSettingsDenon.Show

End

Public Sub MenuSettingsIRTrans_Click()

  FSettingsIRTrans.Show

End

Public Sub MenuSettingsIViewer_Click()

  FSettingsIViewer.Show

End


Public Sub MenuSettingsPwrCtrl_Click()

  FSettingsPwrCtrl.Show

End

Public Sub MenuSettingsOnkyo_Click()

  FSettingsOnkyo.Show

End

Public Sub MenuSettingsSharpTV_Click()

  FSettingsSharpTV.Show

End

Public Sub MenuSettingsCurrentCost_Click()

  FSettingsCurrentCost.Show

End

Public Sub MenuSettingsPlugwise_Click()

  FSettingsPlugwise.Show

End

Public Sub MenuSettingsFritzBox_Click()

  FSettingsFritzBox.Show()

End


Public Sub MenuSettingsDigitemp_Click()

  FSettingsDigitemp.Show()

End

Public Sub MenuSettingsTwitter_Click()

  FSettingsTwitter.Show

End

' edit menu entries
Public Sub MenuEditUser_Click()

  FEditUsers.Show

End

Public Sub MenuEditUsers_Click()

  FEditUsers.Show

End

Public Sub MenuEditContacts_Click()

  FEditContacts.Show

End

Public Sub MenuEditNewsWeather_Click()

  FEditNewsWeather.Show

End

Public Sub MenuEditNotify_Click()

  FEditNotify.Show

End

Public Sub MenuEditMenus_Click()

  FEditMenus.Show

End

Public Sub MenuSettingsCameras_Click()

  FSettingsCameras.Show

End

Public Sub MinValue(oObject As Object, iMinValue As Integer) As Boolean

  If oObject.Value < iMinValue Then
    Balloon(("Minimal value is ") & iMinValue, oObject)
    Return False
  Else
    Return True
  Endif

End

Public Sub MenuSettingsOww_Click()

  FSettingsOww.Show

End

Public Sub MenuSettingsLIRC_Click()

  FSettingsLIRC.Show

End

Public Sub MenuSettingsXively_Click()

  FSettingsXively.Show

End

Public Sub MenuSettingsJeeLabs_Click()

  FSettingsJeeLabs.Show

End

Public Sub MenuSettingsGenericIO_Click()

  FSettingsGenericIO.Show

End

Public Sub MenuSettingsPhilipsHue_Click()

  FSettingsPhilipsHue.Show

End


Public Sub MenuSettingsPLCBUS_Click()

  FSettingsPLCBUS.Show

End

Public Sub MenuSettingsCallerID_Click()

  FSettingsCallerID.Show

End

Public Sub MenuSettingsTemperaturNu_Click()

  FSettingsTemperaturNu.Show

End

Public Sub MenuSettingsLEDMatrix_Click()

  FSettingsLEDMatrix.Show

End

Public Sub MenuSettingsSqueezeServer_Click()

  FSettingsSqueezeServer.Show

End

Public Sub MenuSettingsTVGuideChannels_Click()

  FEditTVChannels.Show

End

Public Sub MenuSettingsTVGuideCategories_Click()

  FEditTVProgramCategories.Show

End

Public Sub MenuSettingsDictionary_Click()

  FEditDictionary.Show

End

Public Sub MenuEditGraphs_Click()

  FEditGraphs.Show

End

Public Sub MenuSettingsIPort_Click()

  FSettingsIPort.Show

End

Public Sub MenuSettingsLGTV_Click()

  FSettingsLGTV.Show

End

Public Sub MenuEditMarkers_Click()

  FEditMarkers.Show

End

Public Sub MenuSettingsOWFS_Click()

  FSettingsOWFS.Show

End

Public Sub MenuSettingsK8055_Click()

  FSettingsK8055.Show

End

Public Sub MenuThermostat_Click()

  FSettingsThermostat.Show

End

Public Sub MenuEditScenario_Click()

  FScenarioEditor.bAddScenario = True
  FScenarioEditor.Show

End

Public Sub MenuEditConstant_Click()

  FConstantEditor.bAddConstant = True
  FConstantEditor.Show

End

Public Sub MenuScenariiList_Click()

  OpenPage(FThermostat)

End

Public Sub MenuEditSchedule_Click()

  FScheduleEditor.bAddSchedule = True
  FScheduleEditor.Show

End

Public Sub MenuEditHeating_Click()

  FHeatingEditor.bAddHeating = True
  FHeatingEditor.Show

End

Public Sub MenuSettingsHome_Click()

  FSettingsHome.Show

End

Public Sub MenuSettingsCUL_Click()

  FSettingsCUL.Show

End

Public Sub MenuToolsCULCmdr_Click()

  FToolsCULCmdr.Show

End

Public Sub MenuEditCategories_Click()

  FEditCategories.Show

End

Public Sub MenuSettingsxPL_Click()

  FSettingsxPL.Show

End

Public Sub MenuSettingsRFXComxPL_Click()

  FSettingsRFXComxPL.Show

End

Public Sub MenuSettingsShell_Click()

  FSettingsShell.Show

End

Public Sub MenuSettingsTelnetServer_Click()

  FSettingsTelnetServer.Show

End

Public Sub MenuEventThermostat_Click()

  FEventThermostat.Show

End

Public Sub MenuEditEventThermostatProfiles_Click()

  FEditEventThermostatProfiles.Show

End

Public Sub MenuEditGlobalVars_Click()

  FEditGlobalVars.Show

End

Public Sub MenuSettingsRFXComTRX_Click()

  FSettingsRFXComTRX.Show

End

Public Sub MenuPlanning_Click()

  FCalendar.Show

End

Public Sub MenuEditMacro_Click()

  FEditMacro.Show

End

Public Sub MenuSettingsNcid_Click()

  FSettingsNcid.Show

End

Public Sub MenuSettingsHomeMatic_Click()

  FSettingsHomeMatic.Show

End

Public Sub MenuToolsHomeMaticQuickSet_Click()

  FToolsHomeMaticQuickSet.Show

End

Public Sub MenuSettingsOpenTherm_Click()

  FSettingsOpenTherm.Show

End

Public Sub MenuSettingsSmartMeter_Click()

  FSettingsSmartMeter.Show

End

Public Sub MenuSettingsPioneer_Click()

  FSettingsPioneer.Show

End

Public Sub MenuSettingsXBMCxPL_Click()

  FSettingsXBMCxPL.Show

End

Public Sub MenuSettingsMQTT_Click()

  FSettingsMQTT.Show

End

Public Sub MenuSettingsMeteohub_Click()

  FSettingsMeteohub.Show

End

Public Sub MenuSettingsELVMAX_Click()

  FSettingsELVMAX.Show

End

Public Sub MenuSettingsYouLess_Click()

  FSettingsYouLess.Show

End

Public Sub MenuSettingsPVoutput_Click()

  FSettingsPVoutput.Show

End

Public Sub MenuSettingsSmartVISUServer_Click()

  FSettingsSmartVisuServer.Show

End

Public Sub MenuSettingsProwl_Click()

  FSettingsProwl.Show

End

Public Sub MenuSettingsPushover_Click()

  FSettingsPushover.Show

End

Public Sub MenuSettingsNMA_Click()

  FSettingsNMA.Show

End

Public Sub MenuSettingsSmartVISU_Click()

  FSettingsSmartVisuServer.Show

End

Public Sub MenuSettingsKMTronicUDP_Click()

  FSettingsKMTronicUDP.Show

End

Public Sub MenuSettingsWeatherUnderground_Click()

  FSettingsWeatherUnderground.Show

End

Public Sub MenuSettingsP2000_Click()

  FSettingsP2000.Show

End

Public Sub MenuSettingsDMXPlayer_Click()

  FSettingsDMXPlayer.Show

End

Public Sub MenuSettingsRaZberry_Click()

  FSettingsRaZberry.Show

End

Public Sub MenuSettingsJSONRPC_Click()

  FSettingsJSONRPC.Show

End

Public Sub MenuSettingsViera_Click()

  FSettingsViera.Show

End

Public Sub MenuSettingsToon_Click()

  FSettingsToon.Show

End

Public Sub MenuSettingsJerome_Click()

  FSettingsJerome.Show

End

Public Sub MenuSettingsPushbullet_Click()

  FSettingsPushbullet.Show

End

Public Sub MenuSettingsWiringPi_Click()

  FSettingsWiringPi.Show

End

Public Sub MenuToolsToonCmdr_Click()

  FToolsToonCmdr.Show

End

Public Sub MenuToolsKNXCmdr_Click()

  FToolsKNXCmdr.Show

End

Public Sub MenuSettingsOpenWeatherMap_Click()

  FSettingsOpenWeatherMap.Show

End

Public Sub MenuSettingsForecastIo_Click()

  FSettingsForecastIo.Show

End

Public Sub MenuSettingsMySensors_Click()

  FSettingsMySensors.Show

End

Public Sub MenuSettingsOmniksol_Click()

  FSettingsOmniksol.Show

End

' open urls in browser
Public Sub MenuGooglePlus_Click()

  Try Desktop.Open("https://plus.google.com/u/0/communities/109060776024494564180")
  If Error Then Message.Error("No internet connection available?")

End

Public Sub MenuGitHub_Click()

  Try Desktop.Open("https:/github.com/DomotiGa")
  If Error Then Message.Error("No internet connection available?")

End

Public Sub MenuProject_Click()

  Try Desktop.Open("https://www.domotiga.nl")
  If Error Then Message.Error("No internet connection available?")

End

Public Sub MenuDonateProject_Click()

  Try Desktop.Open("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=NT48KZRT7F3FA&lc=US&item_name=DomotiGa%20Open%20Source%20Project&item_number=domotiga&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted")
  If Error Then Message.Error("No internet connection available?")

End

Public Sub Ipx800_Click()

  FSettingsIpx800.Show

End

Public Sub MenuSettingsConrad8Relay_Click()

  FSettingsConrad8Relay.Show

End

Public Sub MenuSettingsBroadcastUDP_Click()

  FSettingsBroadcastUDP.Show

End

Public Sub MenuSettingsNetworkDetect_Click()

  FSettingsNetworkDetect.Show

End

Public Sub MenuSettingsBuienradar_Click()

  FSettingsBuienradar.Show()

End

Public Sub MenuSettingsRFLink_Click()

  FSettingsRFLink.Show()

End

Public Sub UniPi_Click()

  FSettingsUniPi.Show()

End

Public Sub MenuSSLCertificates_Click()

  FEditSSLCertificates.Show()

End

Public Sub MenuSettingsModbus_Click()

  FSettingsModbus.Show()

End

Public Sub MenuToolsVelbusCmdr_Click()

  FToolsVelbusCmdr.Show()

End
