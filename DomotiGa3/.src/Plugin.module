' Gambas module file

' Description:
' Plugin.module
' This module stores all the interface information
'
' Development Status:
' Initial testing build

' Credits:
' Based on an idea of Teun Hagen, coded by Alexander Kuiper

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

' TODO:
' Main, Astro, etc - special settings_* aren't supported YET

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public $bDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginList contain all the modules/interfaces available on the system
' Key format is "<pluginname#<instance>". E.g. Key=ups#1
' NOTE: E.g. Key=ups#0 is a special key, this one always exists and 
'       defines that the Class is available
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginList As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginEnabled contains the shortlist of classes,
' should only be used by FMain.class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginEnabled As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginRunTask contains the modules/classes list which 
' have to be called every minute for crontab check. This
' only applies for OpenZWave and DSC.
' NOTE: The module/class will have "PluginRunTask=True"
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginRunTask As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const Type_Unknown As Integer = 0
Public Const Type_Module As Integer = 1
Public Const Type_Class As Integer = 2
Public Const SubType_OpenZWave As Integer = 1

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Init - Register all known plugins
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Init()

  Register("Asterisk", "CAsterisk")
  Register("Bluetooth", "CBluetooth")
  Register("BwiredMap", "CBwiredMap")
  Register("CTX35", "CCTX35")
  Register("CUL", "CCUL")
  Register("CurrentCost", "CCurrentCost")
  Register("Denon", "CDenon")
  Register("Digitemp", "CDigitemp")
  Register("DMXPlayer", "CDMXPlayer")
  Register("Domotica", "CDomotica")
  Register("DSC", "CDSC")
  Register("EIB", "CEIB")
  Register("ELVMAX", "CELVMAX")
  Register("EZcontrol", "CEZcontrol")
  Register("FritzBox", "CFritzBox")
  Register("GenericIO", "CGenericIO")
  Register("GMail", "CGMail")
  Register("GPS", "CGPS")
  Register("HDDTemp", "CHDDTemp")
  Register("HomeMatic", "CHomeMatic")
  Register("IPort", "CIPort")
  Register("IRMan", "CIRMan")
  Register("IRTrans", "CIRTrans")
  Register("IViewer", "CIViewer")
  Register("JeeLabs", "CJeeLabs")
  Register("JSONRPC", "CJSONRPC")
  Register("K8055", "CK8055")
  Register("KMTronicUDP", "CKMTronicUDP")
  Register("LEDMatrix", "CLEDMatrix")
  Register("LGTV", "CLGTV")
  Register("LIRC", "CLIRC")
  Register("Meteohub", "CMeteohub")
  Register("Mochad", "CMochad")
  Register("MQTT", "CMQTT")
  Register("Ncid", "CNcid")
  Register("NMA", "CNMA")
  Register("Onkyo", "COnkyo")
  Register("OpenTherm", "COpenTherm")
  Register("OpenZWave", "COpenZWave", SubType_OpenZWave)
  Register("OWFS", "COWFS")
  Register("OWW", "COWW")
  Register("P2000", "CP2000")
  Register("Pachube", "CPachube")
  Register("Ping", "CPing")
  Register("Pioneer", "CPioneer")
  Register("PLCBUS", "CPLCBUS")
  Register("Plugwise", "CPlugwise")
  Register("Prowl", "CProwl")
  Register("PVoutput", "CPVoutput")
  Register("Pushover", "CPushover")
  Register("PwrCtrl", "CPwrCtrl")
  Register("RaZberry", "CRaZberry")
  'Register("RRDTool", "RRDTool", RRDTool)
  Register("RFXComRX", "CRFXComRX")
  Register("RFXComTRX", "CRFXComTRX")
  Register("RFXComTX", "CRFXComTX")
  'Register("RFXComxPL", "CRFXComxPL")
  'Register("ServerStats", "ServerStats", ServerStats)
  Register("SharpTV", "CSharpTV")
  'Register("Shell", "Shell", Shell)
  Register("SmartMeter", "CSmartMeter")
  Register("SmartVISUServer", "CSmartVISUServer")
  Register("SMS", "CSMS")
  'Register("Sounds", "Sounds", Sounds)
  Register("SqueezeServer", "CSqueezeServer")
  Register("TelnetServer", "CTelnetServer")
  Register("Temp08", "CTemp08")
  'Register("TemperaturNu", "TemperaturNu", TemperaturNu)
  'Register("Thermostat", "Thermostat", Thermostat)
  'Register("TVGuide", "TVGuide", TVGuide)
  Register("Twitter", "CTwitter")
  Register("UPS", "CUPS")
  'Register("VideoServer", "VideoServer", VideoServer)
  Register("Viera", "CViera")
  Register("VISCA", "CVISCA")
  Register("Visonic", "CVisonic")
  'Register("VoiceText", "VoiceText", VoiceText)
  'Register("WeatherUG", "WeatherUG", WeatherUG)
  Register("Weeder", "CWeeder")
  Register("X10Cmd", "CX10Cmd")
  'Register("XBMCxPL", "CXBMCxPL")
  'Register("XMLRPC", "CXMLRPC")
  'Register("xPL", "CxPL")
  Register("YouLess", "CYouLess")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Register interfaces/modules
' sPluginName = Displayname like UPS, Twitter, Visonic
' sClassName = Class name, will loaded during Setup. Normally C<sPluginName>
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Register(sPluginName As String, sClassName As String, Optional iSubType As Integer = 0)

  Dim rResult As Result
  Dim cPl, cPlZero As CPluginEntry
  Dim hField As ResultField
  Dim oTemp As Object
  Dim sTemp As String
  Dim cTemp As String[]
  Dim iTemp As Integer
  Dim sTableName As String = "settings_" & LCase(sPluginName)

  ' --------------------------------------------------------------
  ' This client mode is temporary until we switch over to JSON-RPC
  ' --------------------------------------------------------------

  ' In Client mode do basic stuff to register the plugin
  If Not Main.bServer Then

    ' Check if settings_<sPluginName> exists
    If TableExists(sTableName) = False Then
      Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' doesn't exist in the database")
      Return
    Endif

    ' Get the first row of the settings_<sPluginName>
    rResult = GetSettingsTable(sTableName, 0)

    If rResult = Null Then
      Main.WriteLog("[Plugin] ERROR: Unable to retrieve data from the table '" & sTableName & "' (id=0)")
      Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
      Return
    Endif

    If rResult.Count = 0 Then
      Main.WriteLog("[Plugin] ERROR: No data retrieved from the table '" & sTableName & "' (id=0)")
      Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
      Return
    Endif

    cPlZero = New CPluginEntry
    cPlZero.Name = sPluginName
    cPlZero.KeyName = LCase(sPluginName) & "#0"
    cPlZero.Instance = 0
    cPlZero.ClassName = sClassName

    ' All initialized, put it in the collection
    cPluginList[LCase(sPluginName) & "#0"] = cPlZero

    rResult = GetSettingsTable(sTableName)

    If rResult = Null Or rResult.Count = 0 Then
      Return
    Endif

    For Each rResult
      cPl = New CPluginEntry
      cPl.Name = sPluginName
      cPl.KeyName = LCase(sPluginName) & "#" & rResult!id
      cPl.Instance = rResult!id
      cPl.ClassName = sClassName

      For Each hField In rResult.Fields
        cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
      Next

      If cPl.Settings["enabled"] Then
        cPluginEnabled[LCase(sPluginName)] = "enabled"
      Endif

      ' All initialized, put it in the collection
      cPluginList[LCase(sPluginName) & "#" & rResult!id] = cPl

    Next

    Return

  Endif

  ' In Server mode do the real deal for registering the plugin 

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & " Register - Started")

  ' Plugin name can't contain a "#" character
  If InStr(LCase(sPluginName), "#") Then
    Main.WriteLog("[Plugin] ERROR: Plugin '" & sClassName & "' name can't contain a '#' character")
    Return
  Endif

  ' Try to load the class first. If it fails, don't continue
  Try Class.Load(sClassName)
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Failed to load Plugin '" & sClassName & "'")
    Return
  Endif

  ' Assign the Module to the oTemp or create the Class temporary
  ' NOTE: We need to *only* cleanup the class at the end
  oTemp = Object.New(sClassName)

  ' Try to get the PluginName, don't continue if it fails. Most likely an invalid Module/Class
  Try sTemp = oTemp.PluginName
  If Error Then
    Main.WriteLog("Plugin] ERROR: Plugin '" & sPluginName & "' looks to be invalid, the 'PluginName' is missing")
    Return
  Endif

  ' Try to get the PluginFriendlyName, don't continue if it fails. Most likely an invalid Module/Class
  Try sTemp = oTemp.PluginFriendlyName
  If Error Then
    Main.WriteLog("Plugin] ERROR: Plugin '" & sPluginName & "' looks to be invalid, the 'PluginFriendlyName' is missing")
    Return
  Endif

  ' Safety check: that Class matches loaded module
  If LCase(sPluginName) <> LCase(oTemp.PluginName) Then
    Main.WriteLog("[Plugin] ERROR: Plugin Mismatch Name='" & sPluginName & "', Plugin='" & oTemp.PluginName & "'")
    Return
  Endif

  ' Report plugin information
  If Main.bDebugPlugin Then
    Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & " Information:")
    Try Main.WriteDebugLog("[Plugin]     Class=" & sClassName)
    Try Main.WriteDebugLog("[Plugin]     FriendlyName=" & oTemp.PluginFriendlyName)
    Try Main.WriteDebugLog("[Plugin]     Version=" & oTemp.PluginVersion)
    Try Main.WriteDebugLog("[Plugin]     Author=" & oTemp.PluginAuthor)
    Try Main.WriteDebugLog("[Plugin]     MaxInstances=" & oTemp.PluginMaxInstances)
    Try cTemp = oTemp.PluginProtocols
    If cTemp Then 
      For Each sTemp In cTemp
        Main.WriteDebugLog("[Plugin]   Protocols=" & sTemp)
      Next
    Endif
  Endif

  ' Check if settings_<sPluginName> exists
  If TableExists(sTableName) = False Then
    Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' doesn't exist in the database")
    Return
  Endif

  ' Get the first row of the settings_<sPluginName>
  rResult = GetSettingsTable(sTableName, 0)

  If rResult = Null Then
    Main.WriteLog("[Plugin] ERROR: Unable to retrieve data from the table '" & sTableName & "' (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
    Return
  Endif

  If rResult.Count = 0 Then
    Main.WriteLog("[Plugin] ERROR: No data retrieved from the table '" & sTableName & "' (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
    Return
  Endif

  cPlZero = New CPluginEntry
  cPlZero.SubType = iSubType
  cPlZero.Name = sPluginName
  cPlZero.KeyName = LCase(sPluginName) & "#0"
  cPlZero.Instance = 0
  cPlZero.ClassName = sClassName

  Try cPlZero.MaxInstances = oTemp.PluginMaxInstances
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' looks to be invalid, the 'PluginMaxInstances' is missing")
    Return
  Endif

  ' All initialized, put it in the collection
  cPluginList[LCase(sPluginName) & "#0"] = cPlZero

  rResult = GetSettingsTable(sTableName)

  If rResult = Null Or rResult.Count = 0 Then
    Return
  Endif

  For Each rResult
    cPl = New CPluginEntry
    cPl.SubType = iSubType
    cPl.Name = sPluginName
    cPl.KeyName = LCase(sPluginName) & "#" & rResult!id
    cPl.Instance = rResult!id
    cPl.MaxInstances = oTemp.PluginMaxInstances
    cPl.ClassName = sClassName

    For Each hField In rResult.Fields
      cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

   If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & ", Instance=" & rResult!id & ", Settings=" & JSON.Encode(cPl.Settings))

    ' All initialized, put it in the collection
    cPluginList[LCase(sPluginName) & "#" & rResult!id] = cPl

    ' Do special things for e.g. OpenZWave
    Select iSubType
      Case SubType_OpenZWave
        If cPlZero.Settings.Exist("debug") Then
          If cPl.Settings["debug"] Then
            cPlZero.Settings["debug"] = True
          Endif
        Else
          cPlZero.Settings["debug"] = cPl.Settings["debug"]
        Endif
    End Select

  Next

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & " Register - Finished")

' Don't crash DomotiGa if we hit an error
Catch
  Main.WriteLog("[Plugin] ERROR: '" & Error.Text & "' while registering Plugin '" & sPluginName & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start All modules/classes in cPluginList
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartAll()

  Dim cPl As CPluginEntry
  Dim cReported As New Collection
  Dim bRunTask As Boolean

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StartAll - Started")

  ' Loop through all inteface and start them
  For Each cPl In cPluginList

    ' Skip the #0 entries, these can't be started
    If InStr(cPl.KeyName, "#0") = 0 Then

      ' Also only start enabled modules/classes
      If cPl.Settings["enabled"] Then

        If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & cPl.Name & ", Instance=" & cPl.Instance & " - ENABLED")

        ' Put this plugin in the enabled list
        cPluginEnabled[LCase(cPl.Name)] = "enabled"

        ' Create the new Object
        cPl.Interface = Object.New(cPl.ClassName)

        ' Print module enabled information - only once
        ' We don't do it in the module/class, because that isn't reliable enough
        If cReported.Exist(cPl.Name) = False Then 
          Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & " enabled.")
          cReported[cPl.Name] = True
        Endif

        ' Do special things for SubTypes. Normally we store it in Settings, gives us most flexiblity
        Select cPl.SubType
          Case SubType_OpenZWave
            Try cPl.Settings["libdebug"] = cPluginList[Mid$(cPl.KeyName, 1, InStr(cPl.KeyName, "#")) & "0"].Settings["debug"]
            If Error Then
              cPl.Settings["libdebug"] = False
            Endif
        End Select

        Try Object.Call(cPl.Interface, "StartPlugin", [cPl])
        If Error Then
          Main.WriteLog("[Plugin] ERROR: Plugin '" & cPl.Name & "' doesn't have a StartPlugin Function. ERROR: '" & Error.Text & "' at " & Error.Where)
          Continue
        Endif

        ' Check if the PluginRunTask exist, then we need to call it every minute
        Try bRunTask = cPl.Interface.PluginRunTask
        If Not Error Then
          If bRunTask Then
            cPluginRunTask[cPl.KeyName] = "active"
          Endif
        Endif
      Else
        If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & cPl.Name & ", Instance=" & cPl.Instance & " - DISABLED")
      Endif
    Endif
  Next

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StartAll - Finished")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop All modules/classes in cPluginList
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopAll()

  Dim cPl As CPluginEntry
  Dim cReported As New Collection

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StopAll - Started")

  ' Destroy all objects
  For Each cPl In cPluginList

    ' Skip the #0 entries, these can't be stopped
    If InStr(cPl.KeyName, "#0") = 0 Then

      If cPl.Settings["enabled"] Then
        If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & cPl.Name & ", Instance=" & cPl.Instance & " - STOPPING")
      Endif

      Try Object.Call(cPl.Interface, "StopPlugin")

      ' Destroy the object
      cPl.Interface = Null

      ' Remove possible RunTask
      If cPluginRunTask.Exist(cPl.KeyName) Then
        cPluginRunTask.Remove(cPl.KeyName)
      Endif

    Endif
  Next

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StopAll - Finished")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Restart Interface & Instance after FSettings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart(sPluginName As String, Optional iInstance As Integer = 1)

  Dim rResult As Result
  Dim cPl As CPluginEntry
  Dim cPlNew As CPluginEntry
  Dim hField As ResultField
  Dim bRunTask As Boolean
  Dim sTableName As String = "settings_" & LCase(sPluginName)

  If Not Main.bServer Then

    ' Check if settings_<sPluginName> exists
    If TableExists(sTableName) = False Then
      Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' doesn't exist in the database")
      Return
    Endif

    rResult = GetSettingsTable(sTableName, iInstance)

    ' Row doesn't exist anymore, stop interface/instance and remove from list
    If rResult = Null Or rResult.Count = 0 Then
      cPluginList.Remove(LCase(sPluginName) & "#" & iInstance)
      Return
    Else
      ' Get a local copy
      cPl = cPluginList[LCase(sPluginName) & "#" & iInstance]

      ' Empty the collection and fill it again
      cPl.Settings.Clear()
      For Each hField In rResult.Fields
        cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
      Next
    Endif

    ' Update the cPluginEnabled list now
    If cPluginEnabled.Exist(LCase(sPluginName)) Then
      cPluginEnabled.Remove(LCase(sPluginName))
    Endif

    ' Loop through all plugins and tag enabled modules/classes
    For Each cPl In cPluginList
      If LCase(cPl.Name) = LCase(sPluginName) Then
        If cPl.Instance >= 1 Then
          If cPl.Settings["enabled"] Then cPluginEnabled[LCase(sPluginName)] = "enabled"
        Endif
      Endif
    Next

    Return
  Endif

  ' First instance *has* to exist
  If cPluginList.Exist(LCase(sPluginName) & "#0") = False Then
    ' Load settings from database first
    Main.GetSettings()
    ' Temporary workaround to allow restart of none managed modules
    Try Object.Call(Main, "Restart_" & sPluginName)
    If Error Then
      Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' isn't properly initialized")
    Endif

    Return
  Endif 

  ' Check if settings_<sPluginName> exists
  If TableExists(sTableName) = False Then
    Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' doesn't exist in the database")
    Return
  Endif

  rResult = GetSettingsTable(sTableName, iInstance)

  ' Remove possible RunTask
  If cPluginRunTask.Exist(LCase(sPluginName) & "#" & iInstance) Then
    cPluginRunTask.Remove(LCase(sPluginName) & "#" & iInstance)
  Endif

  ' Module/Class exists - if something changed we need to restart
  ' Covers an interface removed or modified
  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then

    ' Get a local copy
    cPl = cPluginList[LCase(sPluginName) & "#" & iInstance]

    ' Stop the interface/instance
    If cPl.Interface <> Null Then
      Try Object.Call(cPl.Interface, "StopPlugin")
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' doesn't have a StopPlugin Function. ERROR: '" & Error.Text & "' at " & Error.Where)
      Endif
    Endif

    ' Report for enabled ones, that it is disabled now
    If cPl.Settings["enabled"] Then
      Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & ", Instance #" & iInstance & " disabled.")
    Endif

    ' Destroy the object
    cPl.Interface = Null

    ' Row doesn't exist anymore, stop interface/instance and remove from list
    If rResult = Null Or rResult.Count = 0 Then
      cPluginList.Remove(LCase(sPluginName) & "#" & iInstance)
      Return
    Else

      ' Empty the collection and fill it again
      cPl.Settings.Clear()
      For Each hField In rResult.Fields
        cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
      Next

      ' If the module is enabled (or still is) start now
      If cPl.Settings["enabled"] Then

        ' Create object first
        cPl.Interface = Object.New(cPl.ClassName)

        ' Report that it is enabled
        Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & ", Instance #" & iInstance & " enabled.")

        Try Object.Call(cPl.Interface, "StartPlugin", [cPl])
        If Error Then
          Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' doesn't have a StartPlugin Function. ERROR: '" & Error.Text & "' at " & Error.Where)
        Else
          ' Check if the PluginRunTask exist, then we need to call it every minute
          Try bRunTask = cPl.Interface.PluginRunTask
          If Not Error Then
            If bRunTask Then
              cPluginRunTask[LCase(sPluginName) & "#" & iInstance] = "active"
            Endif
          Endif
        Endif

      Endif

    Endif

  Else

    ' Instance doesn't exist yet, we need to initialize it
    cPl = cPluginList[LCase(sPluginName) & "#0"]

    ' Copy information from instance 0
    cPlNew = New CPluginEntry
    cPlNew.Type = cPl.Type
    cPlNew.Name = cPl.Name
    cPlNew.KeyName = LCase(sPluginName) & "#" & iInstance
    cPlNew.Instance = iInstance
    cPlNew.ClassName = cPl.sClassName
    cPlNew.Interface = Null
    For Each hField In rResult.Fields
      cPlNew.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

    cPluginList[LCase(sPluginName) & "#" & iInstance] = cPlNew

    ' If the module is enabled start now
    If cPlNew.Settings["enabled"] Then

      ' Create object first
      cPlNew.Interface = Object.New(cPl.ClassName)

      Try Object.Call(cPlNew.Interface, "StartPlugin", [cPlNew])
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' doesn't have a StartPlugin Function. ERROR: '" & Error.Text & "' at " & Error.Where)
      Endif

      ' Check if the PluginRunTask exist, then we need to call it every minute
      Try bRunTask = cPlNew.Interface.PluginRunTask
      If Not Error Then
        If bRunTask Then
          cPluginRunTask[LCase(sPluginName) & "#" & iInstance] = "active"
        Endif
      Endif

    Endif

  Endif

  ' Update the cPluginEnabled list now
  If cPluginEnabled.Exist(LCase(sPluginName)) Then
    cPluginEnabled.Remove(LCase(sPluginName))
  Endif

  ' Loop through all plugins and tag enabled modules/classes
  For Each cPl In cPluginList
    If LCase(cPl.Name) = LCase(sPluginName) Then
      If cPl.Instance >= 1 Then
        If cPl.Settings["enabled"] Then cPluginEnabled[LCase(sPluginName)] = "enabled"
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return if plugin is registered
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsPluginRegistered(sPluginName As String, Optional iInstance As Integer = 1) As Boolean

  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then
    Return True
  Else
    ' If the Instance doesn't exist, check for #0 and error if not existing
    If cPluginList.Exist(LCase(sPluginName) & "#0") = False Then
      Main.WriteLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' isn't properly initialized")
    Endif

    Return False
  Endif

End 

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return True if plugin is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsPluginEnabled(sPluginName As String, Optional iInstance As Integer = 1) As Boolean

  Dim bEnabled As Boolean

  If iInstance = 0 Then
    Return cPluginEnabled.Exist(LCase(sPluginName))
  Else

    ' First check if the Plugin & Instance do exist in our Plugin list
    If IsPluginRegistered(sPluginName, iInstance) Then

      ' First check if the module/interface is enabled
      Try bEnabled = GetPluginObject(sPluginName, iInstance).Settings["enabled"]

      ' Check for errors, it is possible the Object doesn't have a valid "Settings[enabled]" (faulty module/interface)
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' looks to be invalid, the 'Settings[enabled]' is missing")
        bEnabled = False
      Endif
    Else
      bEnabled = False
    Endif
  Endif

  Return bEnabled

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return if plugin is enabled and running
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsPluginRunning(sPluginName As String, Optional iInstance As Integer = 1) As Boolean

  Dim bRunning As Boolean

  ' First check if the Plugin & Instance do exist in our Plugin list
  If IsPluginRegistered(sPluginName, iInstance) Then

    ' First check/try IsRunning variable
    Try bRunning = GetPluginObject(sPluginName, iInstance).Interface.IsRunning

    ' Check for errors, it is possible the Object doesn't have an "IsRunning" (faulty module/interface)
    If Error Then
      Main.WriteLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' looks to be invalid, the 'IsRunning' is missing")
      bRunning = False
    Endif
  Else
    bRunning = False
  Endif

  Return bRunning

End 

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve the list of enabled instances of a certain plugin 
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPluginEnabledList(sPluginName As String) As Integer[]

  Dim cPl As CPluginEntry
  Dim AValue As New Integer[]

  ' Loop through all inteface and start them
  For Each cPl In cPluginList

    ' Skip #0 entries
    If InStr(cPl.KeyName, "#0") = 0 Then

      ' Now match the requested plugin
      If InStr(cPl.KeyName, LCase(sPluginName) & "#") >= 1 Then

        If cPl.Settings["enabled"] Then
          aValue.Add(cPl.Instance)
        Endif
      Endif
    Endif
  Next

  ' Return a sort instance list
  Return aValue.Sort()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Pointer to the Object ... Don't modify data !
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPluginObject(sPluginName As String, Optional iInstance As Integer = 1) As Object

  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then
    Try Return cPluginList[LCase(sPluginName) & "#" & iInstance]
  Else
    Return Null
  Endif
End 

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send command to plugin. The "SendCommand" routine is a
' fixed name, but doesn't have to exist
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sPluginName As String, iInstance As Integer, sAddress As String, sCmd As String) As Boolean

  ' The Plugin needs to be enabled
  If isPluginEnabled(sPluginName, iInstance) Then

    ' The Plugin needs to be in IsRunning state
    If isPluginRunning(sPluginName, iInstance) Then

      ' Send the command to the right interface/instance
      Try GetPluginObject(sPluginName, iInstance).Interface.SendCommand(sAddress, sCmd)

      ' Throw an error, because we are sending a SendCommand to a plugin without the routine
      If Not Error Then
        Return True
      Else
        Main.WriteDebugLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' doesn't have a 'SendCommand' function, most likely you are trying to control a ReadOnly interface")
        Return False
      Endif
    Else
      Main.WriteLog("[Plugin] ERROR: Can't control device because '" & sPluginName & "' is error state!")
      Return False 
    Endif

  Else
    Main.WriteLog("[Plugin] ERROR: Can't control device because '" & sPluginName & "' is disabled!")
    Return False 
  Endif
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if settings_* table exists in the database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub TableExists(sTableName As String) As Boolean

  Dim rResult As Result

  If Not sTableName Then Return False
  sTableName = LCase(sTableName)

  Try rResult = Main.hDB.Exec("SHOW TABLES")
  If Error Or rResult = Null Then
    Main.WriteLog("[Plugin] ERROR: Can't retrieve table list from the database")
    Return False
  Endif

  If rResult.Count Then
    For Each rResult
      If rResult["Tables_in_" & Main.sSQLDatabase] = sTableName Then Return True
    Next
  Endif

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get the configuration from the settings table
' If iRow = -1 give all the rows back (except row=0, this is default)
' If iRow >= 0 give only the requested row back
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetSettingsTable(sTableName As String, Optional iRow As Integer = -1) As Result

  sTableName = LCase(sTableName)

  If iRow >= 0 Then
    Try Return Main.hDB.Exec("SELECT * FROM " & sTableName & " WHERE id = &1", iRow)
  Else
    Try Return Main.hDB.Exec("SELECT * FROM " & sTableName & " WHERE id >= 1 ORDER BY id")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' The RunTask will be called every minute by EventLoop
' In registered, it should only do crontab alike checks
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunTask()

  Dim vValue As Variant

  ' Go through the whole list, and try to start RunTask
  For Each vValue In cPluginRunTask
    If cPluginList.Exist(cPluginRunTask.Key) Then
      Try Object.Call(cPluginList[cPluginRunTask.Key].Interface, "RunTask")

      If Error Then
        Main.WriteLog("[Plugin] ERROR: Module/Class '" & cPluginRunTask.Key & "' doesn't have a RunTask Function, but it has the 'PluginRunTask=True'. ERROR: '" & Error.Text & "' at " & Error.Where)

        ' Remove the entry, because it isn't usefull to run it in the next minute
        ' NOTE: After a restart it will show up again, this is per design
        cPluginRunTask.Remove(cPluginRunTask.Key)
      Endif
    Endif
  Next

End

