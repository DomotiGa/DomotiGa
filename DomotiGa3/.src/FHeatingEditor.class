' Gambas class file

' Description:
' FScenarioEditor.class
' Support for creating and editing of all thermostat constants.

' Development Status:
' Works for 99%.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public rResultDevices As Result
Public rResultSensors As Result

Private rResult As Result
Public bAddHeating As Boolean

Public Sub Form_Open()

  If bAddHeating Then
    Me.Text = ("Create Heating")
    btnDelete.Visible = False
  Endif

  Me.Move(FMain.X + 50, FMain.Y + 70)

  vbRegTemp.Value = 20

  GetDevices()
  GetSensors()
  LoadHeating()

End

Public Sub LoadHeating()

  If Not bAddHeating Then
    ' get selected event values
    rResult = Main.hDB.Exec("SELECT * FROM thermostat_heating WHERE id = &1 ", FThermostat.txtCurTherm)
    If rResult And If rResult.Available Then
      txtName.Text = rResult!name
      cmbSensor.Text = Devices.FindNameForDevice(rResult!sensor)
      cmbDevice.Text = Devices.FindNameForDevice(rResult!device)
      Try cbxInvertedDevice.Value = rResult!deviceInverted
      If rResult!regulator > 0 Then
        cmbRegulator.Text = Devices.FindNameForDevice(rResult!regulator)
      Else
        cmbRegulator.Text = ""
      Endif
      Try cbxInvertedRegulator.Value = rResult!regulatorInverted
      txtDescription.Text = rResult!description
      vbDeviceOffsetBottom.Value = rResult!deviceOffsetBottom
      vbDeviceOffsetTop.Value = rResult!deviceOffsetTop
      vbDeviceLatency.Value = rResult!deviceLatency
      vbRegulatorOffsetBottom.Value = rResult!regulatorOffsetBottom
      vbRegulatorOffsetTop.Value = rResult!regulatorOffsetTop
      cbxSecondary.Value = rResult!secondary
      Display_OffsetControl
    Else
      Message(("Couldn't load heating record!"))
      Me.Close
    Endif
  Endif

End

Public Sub btnCancel_Click()

  bAddHeating = False
  Me.Close

End

Public Sub btnDelete_Click()

  Select Message.Question(("Are you sure that you want to delete this heating ?"), ("Yes"), ("No"))
    Case 1
      Main.hDB.Exec("DELETE FROM thermostat_heating WHERE id = &1", rResult!id)
      Me.Close
      FThermostat.GetThermList()
  End Select

End

Public Sub btnNew_Click()

  bAddHeating = True
  btnSave_Click()

End

Public Sub btnSave_Click()

  Dim rResultUpdate As Result
  Dim sSql As String
  Dim iRegulator As Integer

  If Not txtName.Text Then
    Balloon(("Please enter a name for this heating !"), txtName)
    Return
  Endif
  If Not cmbSensor.Text Then
    Balloon(("Please select a sensor for this heating !"), cmbSensor)
    Return
  Endif
  If Not cmbDevice.Text Then
    Balloon(("Please select a device for this heating !"), cmbDevice)
    Return
  Endif
  If Not vbDeviceOffsetTop.Text Then
    Balloon(("Please enter a value !"), vbDeviceOffsetTop)
    Return
  Endif
  If Not vbDeviceOffsetBottom.Text Then
    Balloon(("Please enter a value !"), vbDeviceOffsetBottom)
    Return
  Endif
  If cmbRegulator.Text Then
    If Not vbRegulatorOffsetTop.Text Then
      Balloon(("Please enter a value !"), vbRegulatorOffsetTop)
      Return
    Endif
    If Not vbRegulatorOffsetBottom.Text Then
      Balloon(("Please enter a value !"), vbRegulatorOffsetBottom)
      Return
    Endif
    If vbRegulatorOffsetTop.Value >= vbDeviceOffsetTop.value Then
      Balloon(("Device offset must be greater than Regulator offset !"), vbRegulatorOffsetTop)
      Return
    Endif
    If vbRegulatorOffsetBottom.Value >= vbDeviceOffsetBottom.value Then
      Balloon(("Device offset must be greater than Regulator offset !"), vbRegulatorOffsetBottom)
      Return
    Endif
  Endif

  ' Only try to find the regulator id if the name is known
  If cmbRegulator.Text Then
    iRegulator = Devices.FindIdForDevice(cmbRegulator.Text)
  Else
    iRegulator = 0
  Endif

  If bAddHeating Then
    ' create new scenario row
    sSql = "INSERT INTO thermostat_heating SET name = &1, sensor = &2, device= &3, deviceInverted=&4, deviceLatency=&5, regulator=&6, regulatorInverted=&7, description=&8, deviceOffsetTop=&9, regulatorOffsetTop=&{10}, deviceOffsetBottom=&{11}, regulatorOffsetBottom=&{12}, secondary=&{13}"
    rResultUpdate = Main.hDB.Exec(sSql, txtName.Text, Devices.FindIdForDevice(cmbSensor.Text), Devices.FindIdForDevice(cmbDevice.Text), cbxInvertedDevice.Value, vbDeviceLatency.Value, iRegulator, cbxInvertedRegulator.Value, txtDescription.Text, vbDeviceOffsetTop.Value, vbRegulatorOffsetTop.Value, vbDeviceOffsetBottom.Value, vbRegulatorOffsetBottom.Value, cbxSecondary.Value)
  Else
    ' update new event details
    sSql = "UPDATE thermostat_heating SET name = &1, sensor = &2, device= &3, deviceInverted=&4, deviceLatency=&5, regulator=&6, regulatorInverted=&7, description=&8, deviceOffsetTop=&9, regulatorOffsetTop=&{10}, deviceOffsetBottom=&{11}, regulatorOffsetBottom=&{12}, secondary=&{13} WHERE id = &{14}"
    rResultUpdate = Main.hDB.Exec(sSql, txtName.Text, Devices.FindIdForDevice(cmbSensor.Text), Devices.FindIdForDevice(cmbDevice.Text), cbxInvertedDevice.Value, vbDeviceLatency.Value, iRegulator, cbxInvertedRegulator.Value, txtDescription.Text, vbDeviceOffsetTop.Value, vbRegulatorOffsetTop.Value, vbDeviceOffsetBottom.Value, vbRegulatorOffsetBottom.Value, cbxSecondary.Value, rResult!id)
  Endif

  FThermostat.GetThermList()
  bAddHeating = False
  Me.Close

End

Public Sub GetDevices()

  cmbDevice.Clear
  cmbRegulator.Clear
  cmbDevice.Add("")
  cmbRegulator.Add("")
  rResultDevices = Devices.GetDevicesAndValues(["enabled": True, "switchable": True, "sortOrder": "name", "inc_device_values": False])
  If rResultDevices Then
    If rResultDevices.Count Then
      For Each rResultDevices
        cmbDevice.Add(rResultDevices!device_name)
        cmbRegulator.Add(rResultDevices!device_name)
      Next
    Endif
  Else
    Message.Info(("Error: couldn't find devices table!"))
    Return
  Endif

End

Public Sub GetSensors()

  cmbSensor.Clear
  cmbSensor.Add("")
  rResultSensors = Devices.GetDevicesAndValues(["enabled": True, "switchable": False, "sortOrder": "name", "inc_device_values": False])
  If rResultSensors Then
    If rResultSensors.Count Then
      For Each rResultSensors
        cmbSensor.Add(rResultSensors!device_name)
      Next
    Endif
  Else
    Message.Info(("Error: couldn't find devices table!"))
    Return
  Endif

End

Public Sub cbxInvertedDevice_Click()

  btnSave.Enabled = True

End

Public Sub cbxInvertedRegulator_Click()

  btnSave.Enabled = True

End

Public Sub cmbSensor_Click()

  btnSave.Enabled = True

End

Public Sub cmbDevice_Click()

  btnSave.Enabled = True

End

Public Sub cmbRegulator_Click()

  btnSave.Enabled = True

End

Public Sub txtDescription_KeyPress()

  btnSave.Enabled = True

End

Public Sub txtName_KeyPress()

  btnSave.Enabled = True

End

Public Sub vbDeviceOffsetTop_KeyPress()

  btnSave.Enabled = True
  Display_OffsetControl

End

Public Sub vbDeviceOffsetBottom_KeyPress()

  btnSave.Enabled = True
  Display_OffsetControl

End

Public Sub vbRegulatorOffsetTop_KeyPress()

  btnSave.Enabled = True
  Display_OffsetControl

End

Public Sub vbRegulatorOffsetBottom_KeyPress()

  btnSave.Enabled = True
  Display_OffsetControl

End

Public Sub vbDeviceLatency_KeyPress()

  btnSave.Enabled = True

End

Public Sub vbRegTemp_KeyPress()

  Display_OffsetControl

End

Public Sub Display_OffsetControl()

  Try lblDevMin.Text = vbRegTemp.Value - vbDeviceOffsetBottom.Value
  Try lblDevMax.Text = vbRegTemp.Value + vbDeviceOffsetTop.Value
  Try lblRegMin.Text = vbRegTemp.Value - vbRegulatorOffsetBottom.Value
  Try lblRegMax.Text = vbRegTemp.Value + vbRegulatorOffsetTop.Value

End

Public Sub CbxSecondary_Click()

  btnSave.Enabled = True

End
