' Gambas class file

' Description:
' CSMS.class
' Support for SMS modem for outgoing SMS text messages
' Tested with Siemens MC35i and Nokia 6300

' Development Status:
' Modem init and sending SMS text messages works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "SMS"
Public PluginFriendlyName As String = "SMS Modem"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[SMS] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $sPIN As String
Private $sServiceCentre As String
Private $sContact As String
Private $bDebug As Boolean

Public hSMS As New SerialPort
Private sManufacturer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  'iPollTime = cPl.Settings["polltime"]
  $sPIN = cPl.Settings["pin"]
  $sServiceCentre = cPl.Settings["servicecentre"]
  $sContact = cPl.Settings["contact"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  If Connect() Then
    If Not InitModem() Then
      Main.WriteLog(LogLabel & "ERROR: SMS modem interface FAILED to initialize")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hSMS.Close

  ' get a new one
  hSMS = New Serialport As "SMS"
  With hSMS
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize SMS modem, enter PIN if needed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub InitModem() As Boolean

  Dim sResult As String

  ' a few possible commands strings
  ' sCmd = "AT+CGMI" ' get manufacturer info
  ' sCmd = "AT+CPIN=0000" ' enter PIN
  ' sCmd = "AT+CPIN?" ' ask PIN status
  ' sCmd = "AT+CREG?" ' network status
  ' sCmd = "AT+COPS=?" ' show network(s)
  ' sCmd = "AT+CSQ" ' show network field strength
  ' sCmd = "AT+CGSN" ' show IMEI number
  ' init
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Send init AT:")
  If InStr(SendCmd("AT"), "OK") Then
    sManufacturer = SendCmd("AT+GMI")
    ' ask PIN status
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Ask PIN status:")
    sResult = SendCmd("AT+CPIN?")
    If InStr(sResult, "OK") Then
      ' no PIN needed
      If InStr(sResult, "READY") Then
        If SetServiceCenter() Then Return True
      Endif
      ' modem ask for PIN
      If InStr(sResult, "SIM PIN") Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Send PIN:")
        SendCmd("AT+CPIN=" & $sPIN)
        ' ask for PIN status again
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Ask PIN status:")
        ' PIN ok
        If InStr(SendCmd("AT+CPIN?"), "READY") Then
          If SetServiceCenter() Then Return True
        Endif
      Endif
    Endif
  Endif
  ' something went wrong
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set or get SMS service center
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SetServiceCenter() As Boolean

  Dim sResult, sNetwork As String

  ' check manufacturer
  If InStr(sManufacturer, "Nokia") Then
    ' get service center
    sResult = SendCmd("AT+CSCA?")
    If $bDebug Then Try Main.WriteLog(LogLabel & "SMS ServiceCenter is " & Mid(sResult, InStr(sResult, Chr(34)), RInStr(sResult, Chr(34)) - InStr(sResult, Chr(34)) + 1))
  Else
    ' set service center
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Set ServiceCenter:")
    sResult = SendCmd("AT+CSCA=" & $sServiceCentre)
  Endif
  If InStr(sResult, "OK") Then
    sResult = SendCmd("AT+COPS?")
    Try sNetwork = Mid(sResult, InStr(sResult, Chr(34)), RInStr(sResult, Chr(34)) - InStr(sResult, Chr(34)) + 1)
    If InStr(sManufacturer, "Nokia") Then
      Select Mid$(sNetwork, 2, 5)
        Case 20404
          sNetwork = "Vodafone NL" 'Libertel
        Case 20408
          sNetwork = "KPN NL"
        Case 20412
          sNetwork = "Telfort NL"
        Case 20416
          sNetwork = "T-Mobile NL" 'Ben
        Case 20420
          sNetwork = "T-Mobile NL" 'Orange, Dutchtone?
        Case Else
          sNetwork = "??"
      End Select
    Endif
    Main.WriteLog(LogLabel & "SMS modem is initialized and registered at " & sNetwork & " network.")
    Return True
  Endif
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create SMS message and send it to modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendSMS(sText As String, sTo As String) As Boolean

  Dim sTemp, sData, sResult As String
  Dim iTries As Integer = 32

  ' send message
  If $bDebug Then Main.WriteDebugLog(LogLabel & "SendSMS:")
  sResult = SendCmd("AT+CMGF=1")
  If InStr(sResult, "OK") Then
    If hSMS.Status <> Net.Active Then Return
    If $bDebug Then Main.WriteDebugLog(LogLabel & "> AT+CMGS=" & Chr(34) & sTo & Chr(34))
    Print #hSMS, "AT+CMGS=" & Chr(34) & sTo & Chr(34) & Chr(13)

    While (iTries > 0)
      ' see if we got some data.
      Try sTemp = Read #hSMS, Lof(hSMS)
      ' wait a bit and read response.
      Sleep 0.01
      sData &= sTemp
      If InStr(sData, ">") Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "got '>' at try #" & iTries)
        If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & sText & "CTRL-Z")
        Print #hSMS, sText & Chr(26);
        Main.WriteLog(LogLabel & "I have just sent an SMS message to " & sTo & ".")
        Break
      Endif
      Dec iTries
    Wend
  Endif
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read SMS messages
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ReadSMS() As String

  Dim sCmd, sResult As String

  sCmd = "AT+CMGL" ' read messages
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ReadSMS:")
  sResult = SendCmd(sCmd, 1)

  Return sResult

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send AT command string to modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCmd(sCmd As String, Optional bFlag As Boolean) As String

  Dim sData, sTemp, sOutput As String
  Dim iTries As Integer = 80

  If hSMS.Status <> Net.Active Then Return

  If bFlag Then
    Print #hSMS, sCmd;
  Else
    Print #hSMS, sCmd; Chr$(13); Chr$(10);
  Endif
  If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & sCmd)

  While (iTries > 0)
    ' see if we got some data.
    Try sTemp = Read #hSMS, Lof(hSMS)
    ' wait a bit and read response.
    Sleep 0.01
    sData &= sTemp
    If Right(sData, 2) = Chr(13) & Chr(10) Then
      If $bDebug Then Main.WriteDebugLog(LogLabel & "got response at try #" & iTries)
      Break
    Endif
    Dec iTries
  Wend
  sOutput = Replace(sData, "\r", "")
  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sOutput)

  Return sOutput

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hSMS.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

