' Gambas class file

' Description:
' FThermostat.class
' Thermostat management functions.

' Development Status:
' Beta.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private tRefresh As New Timer
Private bAutoRefresh As Boolean
Private iTable As Integer = 1
Public txtCurTherm As String
Public txtCurThermAux As String

Private bCmbSCenarioLoading As Boolean = False

Public Sub Form_Open()

  btnOverview.Enabled = False
  GetThermList()

  ' create refresh timer
  tRefresh = New Timer As "tRefresh"
  tRefresh.Delay = 3000 ' 3 seconds

End

Public Sub tbvTherm_ColumnClick(Column As Integer)

  FMain.SortTableView(FThermostat.tbvTherm, Column, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRefresh_Timer()

  GetThermList()

End

Public Sub Form_Close()

  tRefresh.Stop

End

Public Sub Form_LostFocus()

  tRefresh.Stop

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then tRefresh.Enabled = True

End

Public Sub GetThermList()

  Dim iRows, iCount, i As Integer
  Dim fTemp As Float
  Dim rResult, rResultDetail As Result
  Dim hObj, hSubObj As Object

  Application.Busy = True

  Form_Resize()

  tbvTherm.Clear
  tbvTherm.Rows.Count = 0
  Select Case iTable
    Case 1 ' display overview
      GetScenarii()
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_schedule, thermostat_heating where heating=id and scenario=&1 ORDER BY name", FScheduleEditor.GetScenarioId(cmbScenario.text))
      If rResult Then
        For iCount = 0 To vbxHeating.Children.Count - 1
          vbxHeating.Children[0].Delete
        Next
        iRows = rResult.Count
        For iCount = 0 To iRows - 1
          hObj = New Frame(vbxHeating) As "frmHeating"
          hObj.Text = rResult!name
          hObj.Resize(553, 110)

          hSubObj = New Label(hObj) As "currentTemp"
          hSubObj.Text = "Current Temperature"
          hSubObj.Move(7, 21, 140, 21)

          hSubObj = New TextBox(hObj) As "txtCurrTemp"
          hSubObj.Text = Devices.GetCurrentValueForDevice(rResult!sensor, 1)
          hSubObj.ReadOnly = True
          hSubObj.Move(161, 21, 77, 21)

          hSubObj = New Button(hObj) As "btnEditSchedule"
          hSubObj.Text = "Edit Schedule"
          hSubObj.Tag = rResult!scenario & " " & rResult!heating
          hSubObj.Move(252, 21, 98, 21)

          hSubObj = New Button(hObj) As "btnEditHeating"
          hSubObj.Text = "Edit Heating"
          hSubObj.Tag = rResult!heating
          hSubObj.Move(366, 21, 98, 21)

          hSubObj = New Label(hObj) As "reqTemp"
          hSubObj.Text = "Requested Temperature"
          hSubObj.Move(7, 49, 154, 21)

          hSubObj = New Label(hObj) As "derog"
          hSubObj.Text = "(Derogated)"
          hSubObj.Move(364, 49, 154, 21)
          If Main.bServer = False Then
            fTemp = XMLClient.ThermostatGetDerogateHeating(rResult!id)
          Else
            fTemp = Thermostat.GetDerogateHeating(rResult!id)
          Endif
          If fTemp = Thermostat.NO_TEMP Then
            fTemp = Thermostat.GetRequestedTempForHeating(rResult!scenario, rResult!id)
            hSubObj.Text = "(Scheduled)"
          End If

          hSubObj = New TextBox(hObj) As "txtReqTemp"
          hSubObj.Text = fTemp
          hSubObj.ReadOnly = True
          hSubObj.Move(161, 49, 77, 21)

          hSubObj = New Button(hObj) As "btnMore"
          hSubObj.Text = "+"
          hSubObj.Tag = rResult!id & " " & fTemp
          hSubObj.Move(252, 49, 42, 21)

          hSubObj = New Button(hObj) As "btnLess"
          hSubObj.Text = "-"
          hSubObj.Tag = rResult!id & " " & fTemp
          hSubObj.Move(308, 49, 42, 21)

          hSubObj = New Label(hObj) As "sched"
          hSubObj.Text = "Daily Schedule"
          hSubObj.Move(7, 77, 154, 21)

          hSubObj = New TableView(hObj) As "tvPlanning"
          hSubObj.ScrollBar = Scroll.None
          hSubObj.Move(161, 77, 384, 21)

          With hSubObj
            .Font.Size = "9"
            .Columns.Count = FScheduleEditor.nbCol + 1
            For i = 0 To FScheduleEditor.nbCol
              .Columns[i].Title = " "
              .Columns[i].Width = .Width / FScheduleEditor.nbCol
            Next
            .Rows.Count = 1
            .Rows[0].Title = " "
          End With
          rResultDetail = Main.hDB.Exec("SELECT curtime() as curtime, e.* FROM thermostat_schedule_entry e WHERE scenario = &1 and heating=&2 and dayofweek(curdate()) = Day ORDER BY day, time", FScheduleEditor.GetScenarioId(cmbScenario.text), rResult!id)
          i = 0
          If rResultDetail Then
            If rResultDetail.Count Then
              For Each rResultDetail
                hSubObj[0, i].Background = FScheduleEditor.GetConstantColor(rResultDetail!constant)
                If rResultDetail!curtime >= rResultDetail!time Then hSubObj[0, i].text = "I"
                Inc i
              Next
            Endif
          Else
            Message.Info(("Error: couldn't find thermostat_schedule_entry table!"))
          End If
          rResult.MoveNext
        Next
      End If
      If iRows > 0 Then GetContants()
    Case 2 ' display schedules
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_schedule ORDER BY scenario, heating")

      If Not rResult Then
        Message.Info(("Error: table 'thermostat_schedule' not found!"))
        Return
      End If
      iRows = rResult.Count

      With tbvTherm
        .Font.Size = "9"
        .Columns.Count = 3
        .Rows.Count = iRows
        .Columns[0].Title = ("Scenario")
        .Columns[0].Width = 200
        .Columns[1].Title = ("Heating")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
      End With

      For iCount = 0 To iRows - 1
        tbvTherm[iCount, 0].Text = FScheduleEditor.GetScenarioName(rResult!scenario)
        tbvTherm[iCount, 1].Text = FScheduleEditor.GetHeatingName(rResult!heating)
        tbvTherm[iCount, 2].Text = rResult!description
        rResult.MoveNext
      Next
    Case 3 ' display scenario
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_scenarii ORDER BY name")

      If Not rResult Then
        Message.Info(("Error: table 'thermostat_scenarii' not found!"))
        Return
      End If
      iRows = rResult.Count

      With tbvTherm
        .Font.Size = "9"
        .Columns.Count = 4
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Enabled")
        .Columns[2].Width = 60
        .Columns[3].Title = ("Description")
        .Columns[3].Width = 250
      End With

      For iCount = 0 To iRows - 1
        tbvTherm[iCount, 0].Text = rResult!id
        tbvTherm[iCount, 1].Text = rResult!name
        tbvTherm[iCount, 2].Text = Main.DisplayBool(rResult!name = Main.GlobalVar["Thermostat_Mode"])
        tbvTherm[iCount, 3].Text = rResult!description

        rResult.MoveNext
      Next
    Case 4 ' display heatings
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_heating ORDER BY name")

      If Not rResult Then
        Message.Info(("Error: table 'thermostat_heating' not found!"))
        Return
      End If
      iRows = rResult.Count

      With tbvTherm
        .Font.Size = "9"
        .Columns.Count = 5
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Sensor")
        .Columns[2].Width = 200
        .Columns[3].Title = ("Device")
        .Columns[3].Width = 200
        .Columns[4].Title = ("Description")
        .Columns[4].Width = 250
      End With

      For iCount = 0 To iRows - 1
        tbvTherm[iCount, 0].Text = rResult!id
        tbvTherm[iCount, 1].Text = rResult!name
        tbvTherm[iCount, 2].Text = Devices.FindNameForDevice(rResult!sensor)
        tbvTherm[iCount, 3].Text = Devices.FindNameForDevice(rResult!device)
        tbvTherm[iCount, 4].Text = rResult!description

        rResult.MoveNext
      Next
    Case 5 ' display constants
      rResult = Main.hDB.Exec("SELECT * FROM thermostat_constant ORDER BY name")

      If Not rResult Then
        Message.Info(("Error: table 'thermostat_constant' not found!"))
        Return
      End If
      iRows = rResult.Count

      With tbvTherm
        .Font.Size = "9"
        .Columns.Count = 4
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Value")
        .Columns[2].Width = 60
        .Columns[3].Title = ("Description")
        .Columns[3].Width = 250
      End With

      For iCount = 0 To iRows - 1
        tbvTherm[iCount, 0].Text = rResult!id
        tbvTherm[iCount, 1].Text = rResult!name
        tbvTherm[iCount, 2].Text = rResult!value
        tbvTherm[iCount, 2].Background = rResult!color
        tbvTherm[iCount, 3].Text = rResult!description
        rResult.MoveNext
      Next
  End Select

Finally
  Application.Busy = False

End

Public Sub GetContants()

  Dim hObj, hObj2 As Object
  Dim rConstant As Result
  Dim icount As Integer

  hObj2 = New Frame(vbxHeating) As "frmTemperature"
  hObj2.Text = "Temperatures"
  hObj2.Resize(553, 60)
  hObj = New HBox(hObj2) As "hboxTemperature"
  hObj.AutoResize = True
  hObj.Move(4, 20, 500, 36)
  hObj.Spacing = 6

  Try rConstant = Main.hDB.Exec("SELECT * FROM thermostat_constant order by value desc")
  If Not Error Then
    For iCount = 0 To rConstant.Count - 1
      hObj2 = New Button(hObj) As "ConstantButton"
      With hObj2
        .Name = rConstant!id
        .Text = rConstant!value
        .ToolTip = rConstant!name
        .Background = rConstant!color
        .Height = 36
        .Width = 77
      End With
      rConstant.MoveNext
    Next
  Else
    Message(("Couldn't load constants!"))
    Me.Close
  End If

End

Public Sub ConstantButton_DblClick()

  txtCurTherm = Last.Name
  FConstantEditor.Show()

End

Public Sub GetScenarii()

  Dim rResultScenarii As Result

  ' fill combos with available triggers
  bCmbSCenarioLoading = True
  Try rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii")
  cmbScenario.Clear
  cmbScenario.Add("")
  cmbScenario.Text = ""
  btnEditScenario.Text = "Create"
  If rResultScenarii Then
    If (rResultScenarii.Count >= 1) Then
      For Each rResultScenarii
        cmbScenario.Add(rResultScenarii!name)
        If rResultScenarii!name = Main.GlobalVar["Thermostat_Mode"] Then
          cmbScenario.Text = rResultScenarii!name
          btnEditScenario.Text = "Edit"
        End If
      Next
    Endif
  Else
    Message(("No thermostat_scenarii database table found!"))
  Endif
  bCmbSCenarioLoading = False

End

Public Sub Form_Resize()

  If iTable = 1 Then
    frmOverview.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 35)
    ScrollView1.Move(4, 63, frmOverview.Width - 8, frmOverview.Height - 8)
    vbxHeating.Move(0, 0, frmOverview.Width - 4, vbxHeating.Height)
    tbvTherm.Visible = False
    frmOverview.Visible = True
  Else
    tbvTherm.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 35)
    tbvTherm.Visible = True
    frmOverview.Visible = False
  End If

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    tRefresh.Start
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    tRefresh.Stop
    bAutoRefresh = False
    btnRefresh.Enabled = True
  End If

End

Public Sub btnRefresh_Click()

  GetThermList()

End

Public Sub btnOverview_Click()

  iTable = 1
  btnOverview.enabled = False
  btnScenarii.Enabled = True
  btnConstants.Enabled = True
  btnSchedules.Enabled = True
  btnHeatings.Enabled = True
  GetThermList()

End

Public Sub btnScenarii_Click()

  iTable = 3
  btnOverview.enabled = True
  btnScenarii.Enabled = False
  btnConstants.Enabled = True
  btnSchedules.Enabled = True
  btnHeatings.Enabled = True
  GetThermList()

End

Public Sub btnConstants_Click()

  iTable = 5
  btnOverview.enabled = True
  btnScenarii.Enabled = True
  btnConstants.Enabled = False
  btnSchedules.Enabled = True
  btnHeatings.Enabled = True
  GetThermList()

End

Public Sub btnSchedules_Click()

  iTable = 2
  btnOverview.enabled = True
  btnScenarii.Enabled = True
  btnConstants.Enabled = True
  btnSchedules.Enabled = False
  btnHeatings.Enabled = True
  GetThermList()

End

Public Sub tbvTherm_DblClick()

  ' open event editor window
  Try txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
  If Not Error
    If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
      Select Case iTable
        Case 2
          txtCurTherm = FScheduleEditor.GetScenarioId(tbvTherm[tbvTherm.Row, 0].Text)
          txtCurThermAux = FScheduleEditor.GetHeatingId(tbvTherm[tbvTherm.Row, 1].Text)
          FScheduleEditor.Show()
        Case 3
          txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
          FScenarioEditor.Show()
        Case 4
          txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
          FHeatingEditor.Show()
        Case 5
          'FConstantEditor.bConstantEdit = TRUE
          txtCurTherm = tbvTherm[tbvTherm.Row, 0].Text
          FConstantEditor.Show()
       End Select
    Else
      Message(("Sorry, editing thermostat is not enabled for users.\nLogin as an admin."))
    End If
  End If

End

Public Sub btnHeatings_Click()

  iTable = 4
  btnOverview.enabled = True
  btnScenarii.Enabled = True
  btnConstants.Enabled = True
  btnSchedules.Enabled = True
  btnHeatings.Enabled = False
  GetThermList()

End

Public Sub cmbScenario_Change()

  If Not bCmbSCenarioLoading Then
    'Main.GlobalVar["Thermostat_Mode"] = cmbScenario.Text
    Main.SetGlobalVar("Thermostat_Mode", cmbScenario.Text, True)
    Thermostat.DeleteAllDerogateHeating()
    GetThermList()
  End If

End

Public Sub btnMore_Click()

  Dim fNewVal As Float
  Dim scanned As String[]

  scanned = Scan(Last.Tag, "* *")
  If scanned.count = 2 Then
    If Main.bServer = False Then
      XMLClient.ThermostatDerogateHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0], "+")
    Endif
    If Thermostat.GetDerogateHeating(scanned[0]) = Thermostat.NO_TEMP Then
      fNewVal = Thermostat.GetNextRequestedTempForHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0])
      If fNewVal <> Thermostat.NO_TEMP Then
        If fNewVal < CFloat(scanned[1]) Then
          fNewVal = CFloat(scanned[1]) + 0.5
        End If
      Else
        fNewVal = CFloat(scanned[1]) + 0.5
      End If
    Else
      fNewVal = CFloat(scanned[1]) + 0.5
    End If
    Thermostat.SetDerogateHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0], fNewVal)
    GetThermList()
  End If

End

Public Sub btnLess_Click()

  Dim fNewVal As Float
  Dim scanned As String[]

  scanned = Scan(Last.Tag, "* *")
  If scanned.count = 2 Then
    If Main.bServer = False Then
      XMLClient.ThermostatDerogateHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0], "-")
    Endif
    If Thermostat.GetDerogateHeating(scanned[0]) = Thermostat.NO_TEMP Then
      fNewVal = Thermostat.GetNextRequestedTempForHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0])
      If fNewVal <> Thermostat.NO_TEMP Then
        If fNewVal > CFloat(scanned[1]) Then
          fNewVal = CFloat(scanned[1]) - 0.5
        End If
      Else
        fNewVal = CFloat(scanned[1]) - 0.5
      End If
    Else
      fNewVal = CFloat(scanned[1]) - 0.5
    End If
    Thermostat.SetDerogateHeating(FScheduleEditor.GetScenarioId(cmbScenario.text), scanned[0], fNewVal)
    GetThermList()
  End If

End

Public Sub btnEditScenario_Click()

  If btnEditScenario.Text = "Create" Then
    FScenarioEditor.bAddScenario = True
  Else
    txtCurTherm = FScheduleEditor.GetScenarioId(cmbScenario.Text)
  End If
  FScenarioEditor.Show()

End

Public Sub btnEditSchedule_Click()

  Dim scanned As String[]

  scanned = Scan(Last.Tag, "* *")
  If scanned.count = 2 Then
    txtCurTherm = scanned[0]
    txtCurThermAux = scanned[1]
    FScheduleEditor.Show()
  End If

End

Public Sub btnEditHeating_Click()

  txtCurTherm = Last.Tag
  FHeatingEditor.Show()

End
