' Gambas class file

' Description:
' CSmartVISUServer.class
' Built-in SmartVISU server support.

' Development Status:
' Working, minimal tested, some SmartVISU options missing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "SmartVisuServer"
Public PluginFriendlyName As String = "SmartVISU Server"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[SmartVISU] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iPort As String
Private $bDebug As Boolean

Public hWebSocketServer As ServerSocket
Public client As CWebSocket

Private oClients As New CWebSocket[]
Private cMonitors As New Collection

Private hFetch As Process
Private cOutput As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iPort = cPl.Settings["tcpport"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("SmartVISUServer")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  hWebSocketServer = New ServerSocket As "WebSocketServer"
  hWebSocketServer.Port = $iPort
  hWebSocketServer.Listen(0)

  If hWebSocketServer.Status = Net.Active Then 
  ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " listening on Port " & $iPort)
    IsRunning = True
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " FAILED listen on Port " & $iPort)
    IsRunning = False
    ErrorText = "Net Not Active"
    Return False
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " FAILED listen on Port " & $iPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

Public Sub WebSocketServer_Connection(sRemoteHost As String)

  client = New CWebSocket(hWebSocketServer.Accept()) As "VisuClient"
  oClients.Add(client)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Got a connection from client with IP address '" & sRemoteHost & "'")

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub WebSocketServer_Error()

  ' handle error
  Select Case hWebSocketServer.Status
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(LogLabel & "The system does not allow to create a socket.")
    Case Net.CannotBindSocket
      Main.WriteDebugLog(LogLabel & "Cannot bind socket.")
    Case Net.CannotListen
      Main.WriteDebugLog(LogLabel & "Cannot listen on port.")
  End Select

End

' shutdown our websocket server
Public Sub Disconnect() As Boolean

  hWebSocketServer.Close()

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return False

End

Private Sub SendProtoVersion(iVersion As String, socks As Object)

  Dim cCmd As New Collection
  Dim sData As String

  ' create json data
  cCmd.Add("proto", "cmd")
  cCmd.Add(iVersion, "ver")
  sData = JSON.Encode(cCmd)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
  If socks Then socks.Send(sData)

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Private Sub SendItemUpdate(cUpdate As String[])

  Dim cCmd As New Collection
  Dim socks As CWebSocket
  Dim sData As String

  ' create json data
  cCmd.Add("item", "cmd")
  cCmd.Add(cUpdate, "items")
  sData = JSON.Encode(cCmd)

  ' send cmd to each connected client
  For Each socks In oClients
    If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
    If socks Then socks.Send(sData)
  Next

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub UpdateItem(sItem As String, sValue As String)

  Dim aCmd As New String[]

  aCmd.Add(Replace(sItem, " ", "_"))
  aCmd.Add(sValue)
  SendItemUpdate(aCmd)
  aCmd.Clear

End

Private Sub SendSeriesUpdate(cSeriesData As Collection)

  Dim cCmd As New Collection
  Dim socks As CWebSocket
  Dim sData As String

  ' create json data
  cCmd.Add("series", "cmd")
  cCmd.Add(cSeriesData, "items")
  sData = JSON.Encode(cCmd)

  ' send cmd to each connected client
  For Each socks In oClients
    If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
    If socks Then socks.Send(sData)
  Next

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & " 'at '" & Error.Where & "'")

End

Private Sub UpdateSeries(sItem As String, sSeries As String, sMode As String, vValueData As Variant[][])

  Dim aCmd As New Collection

  If vValueData Then
    aCmd.Add(Replace(sItem, " ", "_") & "." & sSeries & "." & sMode & ".0", "ID")
    aCmd.Add(vValueData, "plotdata")
    SendSeriesUpdate(aCmd)
    aCmd.Clear
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & " UpdateSeries: No data !")
  Endif

End

Private Sub SendDialog(sHeader As String, sContent As String)

  Dim cCmd As New Collection
  Dim socks As CWebSocket
  Dim sData As String

  ' create json data
  cCmd.Add("dialog", "cmd")
  cCmd.Add(sHeader, "header")
  cCmd.Add(sContent, "content")
  sData = JSON.Encode(cCmd)

  ' send cmd to each connected client
  For Each socks In oClients
    If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
    If socks Then socks.Send(sData)
  Next

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub SendUpdateDevice(sDevice As String, sValue As String, sType As String)

  Dim sItem, sMonitorDevice As String = Replace(sDevice & "_" & sType, " ", "_")
  Dim aItems As Variant[]

  If cMonitors.Count = 0 Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "No clients connected, so aborting item updates.")
    Return ' no clients connected
  Endif

  ' check if it's in a monitors collection of a client
  For Each aItems In cMonitors
    For Each sItem In aItems
      If sMonitorDevice == sItem Then ' send update
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Monitored item found, updating: " & sMonitorDevice)
        Select LCase(sType)
          Case "value", "value1", "setpoint"
            UpdateItem(sMonitorDevice, sValue)
          Case "value2"
            UpdateItem(sMonitorDevice, sValue)
          Case "value3"
            UpdateItem(sMonitorDevice, sValue)
          Case "value4"
            UpdateItem(sMonitorDevice, sValue)
          Case "motion"
            UpdateItem(sMonitorDevice, IIf(sValue == "Motion", 1, 0))
          Case "switch"
            If LCase(sValue) = "off" Then
              UpdateItem(sMonitorDevice, "0")
            Else If LCase(sValue) = "on" Or If InStr(LCase(sValue), "dim") Then
              UpdateItem(sMonitorDevice, "1")
            Endif
          Case "dimmer", "dim"
            Select LCase(sValue)
              Case "on"
                UpdateItem(sMonitorDevice, "100")
              Case "off"
                UpdateItem(sMonitorDevice, "0")
              Case Else
                UpdateItem(sMonitorDevice, Replace(sValue, "dim ", "", gb.IgnoreCase))
            End Select
        End Select
        Return
      Endif
    Next
  Next
  ' not found
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Device '" & sMonitorDevice & "' not found in monitored items.")

End

Public Sub VisuClient_Ready()

  SendProtoVersion("0.3", Last)

End

Public Sub VisuClient_Read(sMsg As String)

  Dim cData As New Collection
  Dim vPlotData As New Variant[][]
  Dim sItem, sDevice, sDeviceName, sValue, sVersion, sCmd, sType, sMonitorDevice, sVar, sMode, sSeries, sValNum, sInterval As String
  Dim sDuration As String[]
  Dim iUnder, iBrightness, iDim, iDeviceId, iValue, iValueNum, iId As Integer
  Dim aMonitor As Variant[]
  Dim dStart, dEnd As Date

  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sMsg)

  cData = JSON.Decode(sMsg)
  Select cData["cmd"]
    Case "item"
      sItem = cData["id"]
      sValue = cData["val"]
      iUnder = RInStr(sItem, "_")

      If iUnder Then
        sDevice = Replace(Mid(sItem, 1, iUnder - 1), "_", " ")
        ' TODO: deprecated
        iDeviceId = Devices.FindIdForDevice(sDevice)
        sType = Mid(sItem, iUnder + 1, Len(sItem) - iUnder)
        sCmd = sValue

        ' extract valuenumber
        If Left(LCase(sType), 5) = "value" Then
          If Len(sType) = 5 Then
            iValueNum = 1
            sType = "value"
          Else
            Try iValueNum = Right(sType, Len(sType) - 5)
            If Error Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid value given for '" & sDevice & "', must be in format 'value1-value99'!")
              Return
            Endif
            sType = "value"
          Endif
        Endif

        ' do action
        Select LCase(sType)
          Case "switch"
            ' convert 0/1 to Off/On
            sCmd = IIf(sCmd = 0, "Off", "On")
            ' update other connected clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(iDeviceId, sCmd)
          Case "dimmer", "dim"
            ' convert 1-100
            Try iBrightness = Val(sCmd)
            If Not Error Then
              If iBrightness > 100 Then
                iDim = Round(0.39 * iBrightness)
                sCmd = "Dim " & iDim
              Else
                sCmd = "Dim " & sCmd
              Endif
            Else
              Return
            Endif
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(iDeviceId, sCmd)
          Case "thermostat", "setpoint"
            If sCmd = "NaN" Then Return
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(iDeviceId, sCmd)
          Case "value"
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.ValueUpdate(iDeviceId, iValueNum, sCmd)
          Case "shutter"
             ' convert 0/1 to Stop/Start
            sCmd = IIf(sCmd = 0, "Up", "Down")
            ' update other connected clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(iDeviceId, sCmd)
          Case Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown device type or value '" & sType & "' specified after _ in device name!")
        End Select
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "No Device type specified after _ in name!")
      Endif
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received Device Update: '" & sDevice & "' Value: '" & sCmd & "'")

    Case "monitor"
      aMonitor = cData["items"]
      ' save monitor items
      cMonitors.Add(aMonitor, Last.sock.RemoteHost & ":" & Last.sock.RemotePort)
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Monitor Count: " & aMonitor.Count)

      For Each sMonitorDevice In cData["items"]
        sItem = sMonitorDevice
        iUnder = RInStr(sItem, "_")

        If iUnder Then
          sType = Mid(sItem, iUnder + 1, Len(sItem) - iUnder)

          If sType == "var" Then ' globalvar,  not a device value
            sVar = Mid(sItem, 1, iUnder - 1)
            UpdateItem(sMonitorDevice, Main.GetGlobalVar(sVar))
          Else ' device value
            sDevice = Replace(Mid(sItem, 1, iUnder - 1), "_", " ")

            ' extract valuenumber
            If Left(LCase(sType), 5) = "value" Then
              If Len(sType) = 5 Then
                iValueNum = 1
                sType = "value"
              Else
                Try iValueNum = Right(sType, Len(sType) - 5)
                If Error Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid value given for '" & sDevice & "', must be in format 'value1-value99'!")
                  Return
                Endif
                sType = "value"
              Endif
            Endif

            iDeviceId = Devices.FindIdForDevice(sDevice)
            If iDeviceId Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Monitor Item: '" & sDevice & "' Type: '" & sType & "'")
              Select LCase(sType)
                Case "value"
                  UpdateItem(sMonitorDevice, Devices.GetCurrentValueForDevice(iDeviceId, iValueNum))
                Case "setpoint"
                  UpdateItem(sMonitorDevice, Devices.GetCurrentValueForDevice(iDeviceId, 1))
                Case "motion"
                  UpdateItem(sMonitorDevice, IIf(Devices.GetCurrentValueForDevice(iDeviceId, 1) == "Motion", 1, 0))
                Case "switch"
                  sValue = LCase(Devices.GetCurrentValueForDevice(iDeviceId, 1))
                  If sValue = "off" Then
                    UpdateItem(sMonitorDevice, "0")
                  Else If sValue = "on" Or If InStr(sValue, "dim") Then
                    UpdateItem(sMonitorDevice, "1")
                  Endif
                Case "dimmer", "dim"
                  sValue = Devices.GetCurrentValueForDevice(iDeviceId, 1)
                  Select LCase(sValue)
                    Case "on"
                      UpdateItem(sMonitorDevice, "100")
                    Case "off"
                      UpdateItem(sMonitorDevice, "0")
                    Case Else
                      UpdateItem(sMonitorDevice, Replace(sValue, "dim ", "", gb.IgnoreCase))
                  End Select
              End Select
            Endif

          Endif
        Endif
      Next
    Case "series"
      sDevice = cData["item"]
      sMode = cData["mode"]
      sSeries = cData["series"]
      If $bDebug Then Main.WriteDebugLog(LogLabel & "start series: item:" & sDevice & ", mode:" & sMode & ", series:" & sSeries)

      iUnder = RInStr(sDevice, "_")
      If iUnder > 0 Then
        sDeviceName = Replace(Mid(sDevice, 1, iUnder - 1), "_", " ")
        sType = Mid(sDevice, iUnder + 1, Len(sDevice) - iUnder)

        iDeviceId = Devices.FindIdForDevice(sDeviceName)
        If iDeviceId Then
          sDuration = Split(sMode, " ")
          dEnd = Now()
          dStart = dEnd
          For Each sItem In sDuration
            iValue = CInt(Left(sItem, Len(sItem) - 1)) * -1
            Select Case UCase(Right(sItem, 1))
              Case "S"  'Seconds
                dStart = DateAdd(dStart, gb.Second, iValue)
              Case "I"  'Minutes
                dStart = DateAdd(dStart, gb.Minute, iValue)
              Case "H"  'hours
                dStart = DateAdd(dStart, gb.Hour, iValue)
              Case "D"  'Day
                dStart = DateAdd(dStart, gb.Day, iValue)
              Case "W"  'Week
                dStart = DateAdd(dStart, gb.Week, iValue)
              Case "M"  'Month
                dStart = DateAdd(dStart, gb.Month, iValue)
              Case "Y"  'Year
                dStart = DateAdd(dStart, gb.Year, iValue)
              Case Else
                If $bDebug Then main.WriteDebugLog(LogLabel & "Invalid duration format: " & sItem)
            End Select
          Next
          If DateDiff(dStart, dEnd, gb.Hour) <= 2 Then
            sInterval = "MINUTE"
          Else
            If DateDiff(dStart, dEnd, gb.Day) <= 2 Then
              sInterval = "HOUR"
            Else
              If DateDiff(dStart, dEnd, gb.Month) <= 2 Then
                sInterval = "DAY"
              Else
                If DateDiff(dStart, dEnd, gb.Year) <= 1 Then
                  sInterval = "WEEK"
                Else
                  sInterval = "MONTH"
                Endif
              Endif
            Endif
          Endif
          If sType == "value" Then
            sValNum = 1
          Else
            sValNum = Right(sType, Len(sType) - IIf(InStr(sType, "value"), 5, 4))
          Endif
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Graph info")
            Main.WriteDebugLog(LogLabel & " - Start date = " & dStart)
            Main.WriteDebugLog(LogLabel & " - End date = " & dEnd)
            Main.WriteDebugLog(LogLabel & " - Interval = " & sInterval)
            Main.WriteDebugLog(LogLabel & " - Device id = " & iDeviceId)
            Main.WriteDebugLog(LogLabel & " - Value number = " & sValNum)
            Main.WriteDebugLog(LogLabel & " - Graph type = " & sSeries)
          Endif

          If CInt(sValNum) > 0 Then
            vPlotData = GetPlotData(iDeviceId, sSeries, sInterval, sValNum, dStart, dEnd)
            UpdateSeries(sDevice, sSeries, sMode, vPlotData)
          Else
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid plot value " & sValNum)
          Endif

        Else
          If $bDebug Then main.WriteDebugLog(LogLabel & "Device not found for: " & sItem)
        Endif
      Else
        If $bDebug Then main.WriteDebugLog(LogLabel & "Invalid series item received: " & sItem)
      Endif
    Case "trigger"
      iId = cData["id"]
      sType = cData["type"]
      Select LCase(sType)
        Case "event"
          Events.RunActions(iId)
        Case "action"
          Events.RunAction(iId, 0, 0)
      End Select
    Case "proto"
      sVersion = cData["ver"]
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Protocol Version: '" & sVersion & "'")

    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown Cmd received: '" & cData["cmd"] & "'")
  End Select

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Report WebSocket error(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub VisuClient_Error(sMsg As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: " & sMsg)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get log values of device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GetPlotData(iDeviceId As Integer, sType As String, sInterval As String, sValueNum As String, dStartTime As Date, dEndTime As Date) As Variant[][]

  Dim rDevice As Result
  Dim vPlotData As New Variant[][]
  Dim record As Variant[]
  Dim sSQL, sStartTime, sEndTime, sSQL_Pre, sSQL_Post As String
  Dim bSkip As Boolean

  sStartTime = Format(dStartTime, "yyyy-mm-dd hh:nn:ss")
  sEndTime = Format(dEndTime, "yyyy-mm-dd hh:nn:ss")

  Select Case UCase(sType)
    Case "AVG"
      bSkip = False
      sSQL = "SELECT lastchanged, unix_timestamp(lastchanged) * 1000 AS unixtime, value FROM device_values_log "
      sSQL &= "WHERE device_id='" & iDeviceId & "' AND valuenum = '" & sValueNum & "' AND lastchanged between '" & sStartTime & "' AND '" & sEndTime & "' "
      sSQL &= "ORDER BY lastchanged"
    Case "SUM"
      bSkip = True
      sSQL = "SELECT lastchanged, unix_timestamp("
      Select Case sInterval
        Case "MINUTE"
          sSQL_Pre = "CONCAT(Date(lastchanged), ' ', maketime(HOUR(lastchanged), MINUTE(lastchanged), 0))) * 1000 AS unixtime, SUM(calc_value) AS 'value'from ( "
          sSQL_Post = "GROUP BY EXTRACT(MONTH FROM lastchanged), EXTRACT(DAY FROM lastchanged), EXTRACT(HOUR FROM lastchanged), EXTRACT(MINUTE FROM lastchanged) "
        Case "HOUR"
          sSQL_Pre = "CONCAT(date(lastchanged), ' ', maketime(HOUR(lastchanged),0,0))) * 1000 AS unixtime, SUM(calc_value) AS 'value' FROM ( "
          sSQL_Post = "GROUP BY EXTRACT(MONTH FROM lastchanged), EXTRACT(DAY FROM lastchanged), EXTRACT(HOUR FROM lastchanged) "
        Case "DAY"
          sSQL_Pre = "date(lastchanged)) * 1000 AS unixtime, SUM(calc_value) AS 'value' FROM ( "
          sSQL_Post = "GROUP BY EXTRACT(MONTH FROM lastchanged), EXTRACT(DAY FROM lastchanged) "
        Case "WEEK"
          sSQL_Pre = "date(lastchanged)) * 1000 AS unixtime, WEEKOFYEAR(lastchanged) as weekofyear, SUM(calc_value) AS 'value' FROM ( "
          sSQL_Post = "GROUP BY weekofyear "
        Case "MONTH"
          sSQL_Pre = "CONCAT(YEAR(lastchanged), '-', MONTH(lastchanged), '-', DAY(lastchanged))) * 1000 as unixtime, SUM(calc_value) AS 'value' FROM ( "
          sSQL_Post = "GROUP BY EXTRACT(MONTH FROM lastchanged) "
        Case Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & " Invalid interval for plot query: " & sInterval)
      End Select
      sSQL &= sSQL_Pre
      sSQL &= "SELECT lastchanged, value, round(value-@tempvalue, 3) as calc_value, @tempvalue:=value "
      sSQL &= "FROM device_values_log, (select @tempvalue:=0) as dummytable "
      sSQL &= "WHERE device_id='" & iDeviceId & "' AND valuenum='" & sValueNum & "' AND lastchanged between '" & sStartTime & "' AND '" & sEndTime & "' "
      sSQL &= "ORDER by lastchanged "
      sSQL &= ") AS TempTable "
      sSQL &= sSQL_Post
      sSQL &= "ORDER by unixtime"
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & " Received invalid sType '" & sType & "' in GetPlotData()")
  End Select

  If $bDebug Then Main.WriteDebugLog(LogLabel & " GetPlotData query: " & sSQL)

  Try rDevice = Main.hDB.Exec(sSQL)
  If rDevice = Null Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & " No record found!")
  Else
    For Each rDevice
      If bSkip Then
        bSkip = False   'Skip first record
      Else
        record = [CLong(rDevice!unixtime), CFloat(rDevice!value)]
        vPlotData.push(record)
      Endif
    Next
    Return vPlotData
  Endif

Catch
  If $bDebug Then main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read rrdtool fetch output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Fetch_Read()

  Dim sBuffer As String
  Dim iId As Integer

  sBuffer = Read #Last, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and return value, 0 means ok, anything else is not reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Fetch_Kill()

  Dim iId, iRc As Integer
  Dim sLine, sOutput As String
  Dim aData As String[]
  Dim cData As New Collection

  iId = Last.Tag
  iRc = Last.Value

  If iId Then
    If iRc = 0 Then
      ' save output
      sOutput = cOutput[iId]
      cOutput.Remove(iId)

      For Each sLine In Split(sOutput, "\n")
        ' 1369479300: 2,2600000000e+01
        If InStr(sLine, "-nan") Then Continue

        aData = Scan(sLine, "*:*")
        If aData.Count = 2 Then
          Print aData[0]
          Print aData[1]
          cData.Add(Trim(aData[1]), aData[0])
        Endif

      Next
      UpdateSeries("bath_plot3.avg.1h.0", cData)
    Else
      Print (("[Fetch] Returned error!"))
    Endif
  Else
    Print (("[Fetch] Returned invalid device id!"))
  Endif

Catch
  Print (("ERROR: Parsing Fetch Result: ") & "'" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub VisuClient_Closed()

  ' remove client's socket and monitors array
  cMonitors.Remove(Last.sock.Host & ":" & Last.sock.Port)
  oClients.Remove(oClients.Find(Last))
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Client with IP address '" & Last.Sock.Host & ("' closed connection."))

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

