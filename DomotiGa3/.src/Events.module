' Gambas module file

' Description:
' Events.module
' This module provides support for events, triggers, actions and conditions.

' Development Status:
' Works 99.99% ok now. Partly rewritten by Geert-Jan van den Hurk.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private oDelayTimers As New Object[]
Public tDelayTimer As CTimerDelay

Public hReadJson As HttpClient
Public hPostJson As HttpClient
Public cJsonData As New Collection

Private oSoftDimmingTimers As New Object[]
Public tSoftDimmingTimer As CTimerSoftDimming

' trigger database table
' description          | type | param1   | param2  | param3  | param4 | param5  | param6 | param7
' time now             |   1  | crontab
' globalvar change     |   2  | variable | operand | value
' device change        |   3  | id       | fieldno | operand | value
' ir remote received   |   4  | remote   | button  | repeat
' iviewer remote       |   5  | remote   | join    | value
' multi-trigger        |   6  |
' scene, manual trigger|   7  |
' device lastseen      |   8  |  id      | operand | value

' condition database table
' description          | type | param1   | param2  | param3  | param4 | param5  | param6 | param7
' time now             |   1  | crontab
' globalvar value      |   2  | variable | operand | value
' device value         |   3  | id       | fieldno | operand | value

' called every new minute from EventLoop.Run()
Public Sub CheckTimeNowEvents()

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND triggers.type = 1 AND events.enabled is TRUE"
  Dim aCron As String[]
  Dim iCnt As Integer

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running TimeNow query '") & sSql & "'")
  Try rResult = Main.hDB.Exec(sSql)
  If rResult.Available Then
    If rResult.Count Then
      DoEvent(rResult)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Endif

  sSql = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND triggers.type = 6 AND events.enabled is TRUE AND triggers.param1 REGEXP '[[:<:]]TimeCron(.*)[[:>:]]'"
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running TimeNow query '") & sSql & "'")
  rResult = Main.hDB.Exec(sSql)
  If rResult Then
    If rResult.Count Then
      For iCnt = 1 To rResult.Count ' search for cron events
        aCron = Scan(rResult["triggers.param1"], "*(*)*")
        If aCron.Count = 3 Then
          If TimeCron(aCron[1]) = True Then DoTimeEvent(rResult)
        Else
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] TimeCron multi-trigger has invalid format '") & rResult["triggers.param1"] & "'")
        Endif
        rResult.MoveNext()
      Next
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Endif

End

' called when a value of a device is set, and is different from last one from Devices.ValueUpdate()
' iID = id of device, iValueNum = the field number that has changed, sValue = the new value it's set to
Public Sub CheckDeviceChangeEvents(iId As Integer, iValueNum As Integer, sValue As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND ((triggers.type = 3 AND triggers.param1 = &1 AND triggers.param2 = &2) OR (triggers.type = 6 AND triggers.param1 REGEXP '[[:<:]]Dev_" & iId & "_Value" & iValueNum & "[[:>:]]')) AND events.enabled is TRUE"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running DeviceChange query '") & Subst(sSql, iId, iValueNum) & "'")
  rResult = Main.hDB.Exec(sSql, iId, iValueNum)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, sValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckDeviceChangeEvents query!"))
    Return
  Endif

End

' called when a lastseen of a device is updated
' iID = id of device, sValue = the new value it's set to
Public Sub CheckDeviceLastseenChangeEvents(iId As Integer, sValue As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND ((triggers.type = 8 AND triggers.param1 = &1) OR (triggers.type = 6 AND triggers.param1 REGEXP '[[:<:]]Dev_" & iId & "_LastSeen[[:>:]]')) AND events.enabled is TRUE"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running DeviceLastseenChange query '") & Subst(sSql, iId) & "'")
  rResult = Main.hDB.Exec(sSql, iId)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, sValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckDeviceLastseenChangeEvents query!"))
    Return
  Endif

End

' called when a IR signal is received from CLIRC.ParseLine(), CIRMan.ParseLine() or CIRTrans.ParseLine()
Public Sub CheckIRRemoteEvents(sRemote As String, sButton As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND triggers.type = 4 AND events.enabled is TRUE AND triggers.param1 = &1 AND triggers.param2 = &2"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running IRRemote query '") & Subst(sSql, sRemote, sButton) & "'")
  rResult = Main.hDB.Exec(sSql, sRemote, sButton)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult)
     Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
     Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckIRRemoteEvents query!"))
    Return
  Endif

End

' called when a iViewer string is received from CIViewer.ParseLine()
Public Sub CheckIViewerRemoteEvents(sRemote As String, sJoin As String, sValue As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND triggers.type = 5 AND events.enabled is TRUE AND triggers.param2 = &1 AND triggers.param3 = &2"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running IViewerRemote query '") & Subst(sSql, sJoin, sValue) & "'")
  rResult = Main.hDB.Exec(sSql, sJoin, sValue)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult)
     Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
     Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckIViewerRemoteEvents query!"))
    Return
  Endif

End

' called when a globalvar value has changed from Main.SetGlobalVar()
Public Sub CheckGlobalVarEvents(sVar As String, vValue As Variant)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger_id = triggers.id AND ((triggers.type = 2 AND triggers.param1 = &1) OR (triggers.type = 6 AND triggers.param1 REGEXP '[[:<:]]Var_" & sVar & "[[:>:]]')) AND events.enabled is TRUE"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running GlobalVar query '") & Subst(sSql, sVar) & "'")
  rResult = Main.hDB.Exec(sSql, sVar)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, vValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckGlobalVarEvents query!"))
    Return
  Endif

End

Private Sub DoEvent(rResult As Result, Optional sValue As Variant)

  If rResult.Count Then
    If Main.bEventsDebug Then main.WriteDebugLog(("[Events] 1b. Got ") & rResult.Count & (" result(s)."))
    For Each rResult
      ' check if event is allowed to get triggered again
      If rResult!rerunenabled = True And If TypeOf(rResult!lastrun) = gb.Date Then
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2a. ReRun condition set for event id ") & rResult!id & (" named '") & rResult!name & "'")
        If Not CheckReRunCondition(rResult!lastrun, rResult!reruntype, rResult!rerunvalue) Then
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2b. Event id ") & rResult!id & (" named '") & rResult!name & ("' already ran in the last ") & rResult!rerunvalue & " " & rResult!reruntype & (" so discarding!"))
          Continue
        Endif
      Endif

      Select rResult["triggers.type"]
        Case 1
          ' timenow trigger
          If TimeCron(rResult["triggers.param1"]) = False Then
            If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. TimeNow trigger check TimeCron() for event id ") & rResult!id & (" and trigger condition '") & rResult["triggers.param1"] & ("' returned False"))
            Continue
          Else
            If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. TimeNow trigger check TimeCron() for event id ") & rResult!id & (" and trigger condition '") & rResult["triggers.param1"] & ("' returned True"))
          Endif
        Case 2
          ' check globalvar change trigger
          If Not CheckCondition(sValue, rResult["triggers.param2"], rResult["triggers.param3"]) Then Continue
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. GlobalVar Change trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with trigger condition '") & rResult["triggers.param1"] & " " & rResult["triggers.param2"] & " " & rResult["triggers.param3"] & "'")
        Case 3
          ' check device change trigger
          If Not CheckCondition(sValue, rResult["triggers.param3"], rResult["triggers.param4"]) Then Continue
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Device Change trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with trigger condition '") & rResult["triggers.param2"] & "' " & sValue & " " & rResult["triggers.param3"] & " " & rResult["triggers.param4"])
        Case 4
          ' irremote trigger
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. IRRemote trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with Remote name '") & rResult["triggers.param1"] & "' and Button '" & rResult["triggers.param2"] & "'")
        Case 5
          ' iviewer trigger
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. IViewerRemote trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with Remote name '") & rResult["triggers.param1"] & "' with Join '" & rResult["triggers.param2"] & " and Value " & rResult["triggers.param3"] & "'")
        Case 7
          ' manually trigger
        Case 8
          ' device lastseen
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Device Lastseen trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with trigger condition '") & sValue & " " & rResult["triggers.param2"] & " " & rResult["triggers.param3"])
        Case Else
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Event with id ") & rResult!id & (" named '") & rResult!name & ("' has unknown trigger type ") & rResult["triggers.type"])
      End Select

      ' check optional conditions
      If CheckConditions(rResult!condition1_id, rResult!condition2_id, rResult!operand) = True Then
        ' run action(s)
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' is validated, running action(s)."))
        RunActions(rResult!id)
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' has failed CheckConditions, discarding."))
      Endif
    Next
  Endif

End

Private Sub DoTimeEvent(rResult As Result, Optional sValue As Variant)

  ' check if event is allowed to get triggered again
  If rResult!rerunenabled = True And If TypeOf(rResult!lastrun) = gb.Date Then
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2a. ReRun condition set for event id ") & rResult!id & (" named '") & rResult!name & "'")
    If Not CheckReRunCondition(rResult!lastrun, rResult!reruntype, rResult!rerunvalue) Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2b. Event id ") & rResult!id & (" named '") & rResult!name & ("' already ran in the last ") & rResult!rerunvalue & " " & rResult!reruntype & (" so discarding!"))
      Return
    Endif
  Endif

  ' check optional conditions
  If CheckConditions(rResult!condition1_id, rResult!condition2_id, rResult!operand) = True Then
    ' run action(s)
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' is validated, running action(s)."))
    If Main.bEventsDebug Then Main.WriteDebugLog("Running '" & rResult!name & "' event")
    RunActions(rResult!id)
  Else
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' has failed CheckConditions, discarding."))
  Endif

End

Public Sub CheckCondition(sValue As Variant, sOperand As String, sCond As Variant, Optional bMute As Boolean) As Boolean

  Dim bReturn As Boolean

  If TypeOf(sValue) = gb.Boolean Then sValue = Main.DisplayBool(sValue)
  If TypeOf(sCond) = gb.Boolean Then sCond = Main.DisplayBool(sCond)

  Select sOperand
    Case "="
      If Comp(sValue, sCond, gb.IgnoreCase) = 0 Then bReturn = True
    Case "<>"
      If sValue <> sCond Then bReturn = True
    Case ">"
      If CFloat(Replace(CString(sValue), ",", ".", gb.String)) > CFloat(Replace(CString(sCond), ",", ".", gb.String)) Then bReturn = True
    Case "<"
      If CFloat(Replace(CString(sValue), ",", ".", gb.String)) < CFloat(Replace(CString(sCond), ",", ".", gb.String)) Then bReturn = True
    Case Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Unsupported operand '" & sOperand & "' found!"))
  End Select
  If Main.bEventsDebug And If Not bMute Then Main.WriteDebugLog(("[Events] 2c. Check condition '") & sValue & " " & sOperand & " " & sCond & "' = " & Main.DisplayBool(bReturn))
  Return bReturn

Catch
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Invalid comparison in CheckCondition() routine!"))
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Add Global Variables to a Collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub AddVariablesToContext(cContext As Collection)

  Dim cGV As CGlobalVarEntry

  For Each cGV In Main.GlobalVar
    cContext["Var_" & Main.GlobalVar.Key] = cGV.Value
  Next

End

Private Sub AddDevicesToContext(cContext As Collection)

  Dim rResult As Result

  rResult = Devices.GetDevicesAndValues(["sortOrder": "name"])
  If Not rResult Then Return

  For Each rResult
    cContext["Dev_" & rResult!device_id & "_Value" & rResult!device_value_valuenum & "_LastChanged"] = rResult!device_value_lastchanged
    cContext["Dev_" & rResult!device_id & "_Value" & rResult!device_value_valuenum] = rResult!device_value_value
    cContext["Dev_" & rResult!device_id & "_LastChanged"] = rResult!device_lastchanged
    cContext["Dev_" & rResult!device_id & "_LastSeen"] = rResult!device_lastseen
    cContext["Dev_" & rResult!device_id & "_BatteryStatus"] = rResult!device_batterystatus
  Next

End

Private Sub ReplaceMacro(sFormula As String) As String

  Dim iCount As Integer
  Dim rResult As Result
  Dim sSql As String

  sSql = "SELECT * FROM macros"
  rResult = Main.hDB.Exec(sSql)

  For iCount = 0 To rResult.Max
    sFormula = Replace(sFormula, "Macro_" & rResult!name, rResult!formula)
    rResult.MoveNext
  Next
  Return sFormula

End

Public Function EvalFormula(sFormula As String) As String

  Dim sToEval, sResult As String
  Dim cContext As New Collection
  Dim vResult As Variant

  sFormula = ReplaceMacro(sFormula)
  sToEval = Replace(sFormula, "\n", " ")

  ' here we replace variables & devices by their values
  AddVariablesToContext(cContext)
  AddDevicesToContext(cContext)

  ' here the formula is evaluated
  Try vResult = Eval(sToEval, cContext)
  If Error Then
    sResult = ("Error: ") & Error.Text
    If Main.bEventsDebug Then Main.WriteDebugLog("[Events] Formula evaluation failed. sFormula = " & sToEval & ".Message = " & sResult)
  Else If TypeOf(vResult) = gb.Boolean Then
    sResult = Main.DisplayBool(vResult)
  Else
    sResult = vResult
  Endif
  Return sResult

Catch
  Return Error.Text

End

Public Sub CheckSingleCondition(iCondition As Integer) As Boolean

  Dim bResult As Boolean
  Dim rResultCondition As Result

  rResultCondition = Main.hDB.Exec("SELECT * FROM conditions WHERE id = " & iCondition)
  If rResultCondition Then
    If EvalFormula(rResultCondition!formula) = "True" Then bResult = True
  Endif
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2d. Condition with id ") & iCondition & (" and formula '") & rResultCondition!formula & ("' returned ") & Main.DisplayBool(bResult))
  Return bResult

End

' check the optional conditions 1 and 2
Private Sub CheckConditions(iCondition1 As Integer, iCondition2 As Integer, sOperand As String) As Boolean

  Dim bCondition1, bCondition2 As Boolean

  If iCondition1 Then
      bCondition1 = CheckSingleCondition(iCondition1)
      If iCondition2 Then
        bCondition2 = CheckSingleCondition(iCondition2)
      Else
        sOperand = ""
      Endif

      ' check the OR and AND clause
      Select Case UCase(sOperand)
        Case ""
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2e. CheckConditions checking only iCondition1 with id ") & iCondition1)
          If bCondition1 Then Return True
        Case "OR"
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2e. CheckConditions checking iCondition1 with id ") & iCondition1 & (" OR iCondition2 with id ") & iCondition2)
          If bCondition1 Or If bCondition2 Then Return True
        Case "AND"
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2e. CheckConditions checking iCondition1 with id ") & iCondition1 & (" AND iCondition2 with id ") & iCondition2)
          If bCondition1 And If bCondition2 Then Return True
        Case Else
      End Select

  Else ' no conditions defined so return true
    Return True
  Endif
  Return False

End

Private Sub CheckReRunCondition(dDate As Date, sPeriod As String, iValue As Integer) As Boolean

  Dim iResult As Integer

  Try iResult = DateDiff(dDate, Now(), Eval(sPeriod))
  If Error Then
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] Event Rerun condition failed. Error message: ") & Error.Text)
    Return False
  Else If iResult > iValue Then
    Return True
  Else
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] Event Rerun condition ") & iValue & " " & sPeriod & (" is false."))
    Return False
  Endif

End

' action database table
' description          | rResultAction!type | rResultAction!param1      | rResultAction!param2 | rResultAction!param3 | rResultAction!param4 | rResultAction!param5
' set device value     | 1                  | deviceid                  | value fieldname      | value
' set globalvar        | 2                  | globalvar name            | value
' send e-mail          | 3                  | to address                | subject              | body
' speak text           | 4                  | voice or 'female', 'male' | text
' execute command      | 5                  | shell command to run
' send tweet           | 6                  | tweet message to send
' send SMS message     | 8                  | command string
' play sound           | 9                  | sound file                | volume
' write log entry      | 10                 | log text
' display led msg      | 11                 | message to display        | display id           | color                | speed
' av control           | 12                 | model                     | command              | value                | address
' timer delay          | 13                 | delay in secs or rnd min  | random max seconds   | mode fixed or random
' notify-send          | 14                 | title                     | text
' script               | 15                 | script
' JSON                 | 16                 | deviceid                  | post/get             | url
' send Prowl           | 17                 | prowl message to send
' send NMA             | 18                 | nma message to send
' send Pushover        | 19                 | pushover message to send  | optional priority    | optional sound       | Devices list
' send Pushbullet      | 20                 | pushbullet message to send| optional title (default 'DomotiGa') | optional deviceid ('all' for all devices)
' soft dimming         | 21                 | deviceid                  | seconds              | value
' send udp message     | 22                 | address                   | udp port             | message
' publish mqtt message | 23                 | topic                     | message              | rawtopic boolean (use base topic string or not)

' Action to be run. If iAction=0 then cData has to be applied and it will be a "manual" action.
' Returns action type and raises Error if something goes wrong
Public Sub RunAction(iAction As Integer, iOrder As Integer, iEventId As Integer, Optional cData As JSONCollection) As Integer

  Dim rResultAction As Result
  Dim bOk As Boolean
  Dim sResult, sName, sParam1, sParam2, sParam3, sParam4, sDev As String
  Dim iType As Integer
  Dim iValueNum As Integer

  ' When action is zero, we get the type, param1, etc passed in the cData
  If iAction = 0 Then
    If Not cData Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. No action parameters supplied in manual mode!"))
      Error.Raise("No action parameters supplied in manual mode!")
    Endif

    If Not cData.Exist("type") Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. No action type supplied in manual mode!"))
      Error.Raise("No action type supplied in manual mode!")
    Endif

    Try iType = cData["type"]
    sParam1 = cData["param1"]
    sParam2 = cData["param2"]
    sParam3 = cData["param3"]
    sParam4 = cData["param4"]
  Else
    rResultAction = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1 ", iAction)
    If Not rResultAction.Available Then
      If Main.bEventsDebug Then Main.WriteDebugLog("[Events] 3b. Action with id " & iAction & " not found!")
      Error.Raise("Action with id " & iAction & " not found!")
    Endif

    iType = rResultAction!type
    sName = rResultAction!name
    sParam1 = rResultAction!param1
    sParam2 = rResultAction!param2
    sParam3 = rResultAction!param3
    sParam4 = rResultAction!param4
  Endif

  ' TODO: Convert all functions called below to raise an Error when something is wrong, this way we also do not have to check if the plugin is enabled
  Select iType
    Case 1 ' set device value
      ' only changing field Value will trigger interface code, and Value2-Value4 will only set field value
      If sParam1 And If sParam2 And If sParam3 Then
        If Devices.CheckIfDeviceExists(sParam1) Then
          Try iValueNum = CInt(sParam2)
          If Error Then Error.Raise("Invalid set device value field " & sParam2 & " given!")

          If sParam2 = 1 Then
            bOk = Devices.SetDevice(sParam1, ParseText(sParam3))
          Else
            bOk = Devices.ValueUpdate(sParam1, iValueNum, ParseText(sParam3))
          Endif

          If Not bOk Then
            ' TODO: Would be good to change Devices.SetDevice and Devices.ValueUpdate to return an Error so we do not need this code
            Error.Raise("SetDevice/ValueUpdate returned error!")
          Endif
        Else
          Error.Raise("Device with id " & sParam1 & " doesn't exists!")
        Endif
      Endif
    Case 2 ' set globalvar value
      ' if globalvar doesn't exist it will be created
      If sParam1 And If sParam2 Then
        Main.SetGlobalVar(sParam1, ParseText(sParam2), True)
      Else
        Error.Raise("Missing GlobalVar name and/or value!")
      Endif
    Case 3 ' send e-mail
      If Main.bEmailEnabled Then
        Mail.SendMail(ParseText(sParam2), ParseText(sParam3), sParam1)
      Else
        Error.Raise("e-mail support is disabled!")
      Endif
    Case 4 ' speak text
      If Main.bVoiceTextEnabled Then
        VoiceText.Speak(ParseText(sParam2), sParam1)
      Else
        Error.Raise("VoiceText support is disabled!")
      Endif
    Case 5 ' execute command
      Shell ParseText(sParam1)
    Case 6 ' send tweet
      If Plugin.IsPluginEnabled("Twitter", 0) Then
        Plugin.GetPluginObject("Twitter", 1).Interface.PostTweet(ParseText(sParam1))
      Else
        Error.Raise("Twitter support is disabled!")
      Endif
    Case 7 ' send SMS message
      If Plugin.IsPluginEnabled("SMS", 0) Then
        Plugin.GetPluginObject("SMS", 1).Interface.SendSMS(ParseText(sParam2), sParam1)
      Else
        Error.Raise("SMS support is disabled!")
      Endif
    Case 8 ' send IRTrans IR
      If Plugin.IsPluginEnabled("IRTrans", 0) Then
        Plugin.GetPluginObject("IRTrans", 1).Interface.SendIRCommand(sParam1)
      Else
        Error.Raise("IRTrans support is disabled!")
      Endif
    Case 9 ' play sound
      If Main.bSoundEnabled Then
        Sounds.PlaySnd(sParam1, sParam2)
      Else
        Error.Raise("Sound support is disabled!")
      Endif
    Case 10 ' write log entry
      Main.WriteLog(ParseText(sParam1))
    Case 11 ' display message on led matrix display
      If Plugin.IsPluginEnabled("LEDMatrix", 0) Then
        Plugin.GetPluginObject("LEDMatrix", 1).Interface.DisplayMessage(sParam2, ParseText(sParam1), sParam3, sParam4)
      Else
        Error.Raise("LED Matrix support is disabled!")
      Endif
    Case 12 ' av control command
      AVControl.Set(sParam1, sParam2, sParam3, sParam4)
    Case 13 ' timer delay
      If iAction >= 1 Then
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & iAction & (" named '") & sName & ("' is a delay timer!"))
        StartDelayTimer(iEventId, iOrder + 1, sParam1, sParam2, sParam3)
      Else
        Error.Raise("Delay action cannot be executed in manual mode!")
      Endif
    Case 14 ' notify-send
      Main.NotifySend(ParseText(sParam1), ParseText(sParam2))
    Case 15 ' script
      sResult = EvalFormula(sParam1)
      If iAction >= 1 Then
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & iAction & (" named '") & sName & ("' returned '") & sResult & "'")
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Manual action ' returned '") & sResult & "'")
      Endif
    Case 16 ' json
      If Devices.CheckIfDeviceExists(sParam1) Then
        ProcessJson(sParam1, sParam2, sParam3)
        If iAction >= 1 Then
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & iAction & (" started JSON request"))
        Else
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Manual action started JSON request"))
        Endif
      Else
        Error.Raise("Device with id " & sParam1 & " doesn't exists!")
      Endif
    Case 17 ' send Prowl
      If Plugin.IsPluginEnabled("Prowl", 0) Then
        Plugin.GetPluginObject("Prowl", 1).Interface.PostProwl("", "", ParseText(sParam1), sParam2)
      Else
        Error.Raise("Prowl support is disabled!")
      Endif
    Case 18 ' send Notify My Android - Service is stopped
        Error.Raise("Notify My Android support is deprecated!")
    Case 19 ' send Pushover
      ' TODO: Select instance
      If Plugin.IsPluginEnabled("Pushover", 0) Then
        If InStr(sParam4, ",")
          For Each sDev In Split(sParam4, ",")
            Plugin.GetPluginObject("Pushover", 1).Interface.PostPushover(LTrim(sDev), ParseText(sParam1), sParam2, sParam3)
          Next
        Else
          Plugin.GetPluginObject("Pushover", 1).Interface.PostPushover(sParam4, ParseText(sParam1), sParam2, sParam3)
        Endif
      Else
        Error.Raise("Pushover support is disabled!")
      Endif
    Case 20 ' send Pushbullet
      ' TODO: Select instance
      If Plugin.IsPluginEnabled("Pushbullet", 0) Then
        Plugin.GetPluginObject("Pushbullet", 1).Interface.PostPushBullet(sParam3, ParseText(sParam1), sParam2)
      Else
        Error.Raise("Pushover support is disabled!")
      Endif
    Case 21 ' soft dimming
       If Devices.CheckIfDeviceExists(sParam1) Then
        SoftDimming(sParam1, sParam2, sParam3)
        If iAction >= 1 Then
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & iAction & (" started soft dimming"))
        Else
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Manual action started soft dimming"))
        Endif
      Else
        Error.Raise("Device with id " & sParam1 & " doesn't exists!")
      Endif
    Case 22 ' send udp message
      Try Main.SendUDP(sParam1, sParam2, ParseText(sParam3))
      If Error Then Error.Raise("Send UDP message failed!")
    Case 23 ' publish mqtt message
      If Plugin.IsPluginEnabled("MQTT", 0) Then
        Plugin.GetPluginObject("MQTT", 1).Interface.PublishMsg(sParam1, ParseText(sParam2), Val(sParam3))
      Else
        Error.Raise("MQTT support is disabled!")
      Endif
    Case Else
      Error.Raise("Unsupported action type " & iType & "!")
  End Select

  ' This code will only be executed if there was no error
  If Main.bEventsDebug Then
    If iAction >= 1 Then
      Main.WriteDebugLog("[Events] 3b. Action with id " & iAction & " named '" & sName & "' executed!")
    Else
      Main.WriteDebugLog("[Events] 3b. Manual action executed!")
    Endif
  Endif

  Return iType

  Catch
    ' This code is executed if there is an error raised
    If iAction >= 1 Then
      Main.WriteDebugLog("[Events] 3b. Action with id " & iAction & " named '" & sName & "' failed to execute: '" & Error.Text & "' at '" & Error.Where & "'")
    Else
      Main.WriteDebugLog("[Events] 3b. Manual action failed to execute: '" & Error.Text & "' at '" & Error.Where & "'")
    Endif
    Error.Propagate()

End

' run all configured actions for this event
Public Sub RunActions(iEventId As Integer, Optional iFrom As Integer) As Boolean

  Dim rActions As Result
  Dim iActionType As Integer

  UpdateEvent(iEventId)
  rActions = Main.hDB.Exec("SELECT * FROM events_actions WHERE event = &1 ORDER BY events_actions.order", iEventId)
  If rActions Then
     If Main.bEventsDebug Then
       Main.WriteDebugLog("[Events] 3d. Action count: " & rActions.Count)
       Main.WriteDebugLog("[Events] 3d. Action run from: " & iFrom)
     Endif

    For Each rActions
      If Main.bEventsDebug Then
        Main.WriteDebugLog("[Events] 3d. Action id: " & rActions!action & " order: " & rActions!order)
      Endif
      If rActions!order < iFrom Then Continue
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3a. Running action with id ") & rActions!action & (" for event with id ") & iEventId)
      Try iActionType = RunAction(rActions!action, rActions!order, iEventId)
      If iActionType = 13 Then
        'delay action, remaining actions will be executed when the timer goes off
        If Main.bEventsDebug Then
          Main.WriteDebugLog("[Events] 3d. Action id: " & rActions!action & " pause further execution, timer started to resume further execution")
        Endif
        Break
      Endif
    Next
    Return True
  Endif

  Return False

End

' update event timestamps
Private Sub UpdateEvent(iId As Integer)

  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT * FROM events where id = &1", iId)
  If rResult.Available Then
    If rResult.Count = 1 Then
      If rResult!firstrun = "00:00:00" Or rResult!firstrun = "" Then
        rResult = Main.hDB.Exec("UPDATE events SET firstrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
      Endif
    Endif
    rResult = Main.hDB.Exec("UPDATE events SET lastrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  Endif

End

' replace templates with their values in text
' <%global var%> - insert globalvar value
' <$device id|field$> - insert value field number 'field' from device with 'device id'
Private Sub ParseText(sText As String) As String

  Dim sTag As String
  Dim sReplace As String
  Dim rMatch As New RegExp
  Dim iLimit As Integer = 10

  ' Replace global vars
  rMatch.Compile("<%([^>]+)%>")
  Do While True
    rMatch.Exec(sText)
    If rMatch.Count > 0 Then

      ' If the RegEx did match check for global var
      sTag = rMatch[1].Text
      Try sReplace = Main.GetGlobalVar(sTag)
      If IsNull(sReplace) Then
        If Main.bEventsDebug Then Main.WriteLog("[Events] ERROR: Could not find global variable for <%" & sTag & "%>")
        sReplace = "<Unknown global var " & sTag & ">"
      Endif

      ' Replace the template; rMatch[0] is the whole match
      sText = Left(sText, rMatch[0].Offset) & sReplace & Mid(sText, rMatch[0].Offset + Len(rMatch[0].Text) + 1)
    Else
      ' No Match
      Break
    Endif

    ' Should never happen but better check instead of hang
    iLimit -= 1
    If iLimit <= 0 Then
      Main.WriteDebugLog("ERROR: Broke loop in Events.ParseText parsing '" & sText & "'")
      Break
    Endif
  Loop

  Return ReplaceDeviceVar(sText)

End

Private Sub ReplaceDeviceVar(sText As String) As String

  Dim sTag As String
  Dim iDeviceId As Integer
  Dim sReplace As String
  Dim rMatch As New RegExp
  Dim sElt As String[]
  Dim iLimit As Integer = 999

  ' Replace device values
  rMatch.Compile("<\\$([^>]+)\\$>")
  Do While True
    rMatch.Exec(sText)
    If rMatch.Count > 0 Then
      sTag = rMatch[1].Text
      If RegExp.Match(sTag, "^(\\d+)|(.*)$") Then
        ' <$67|1$>, <$5|lastseen$> etc.
        sElt = Split(sTag, "|")
        iDeviceId = CInt(sElt[0])
        sReplace = Devices.GetValueForDevice(iDeviceId, sElt[1])
      Else
        ' <$17$> etc.
        iDeviceId = CInt(sTag)
        sReplace = Devices.GetCurrentValueForDevice(iDeviceId, 1)
      Endif

      ' Replace the template; rMatch[0] is the whole match
      sText = Left(sText, rMatch[0].Offset) & sReplace & Mid(sText, rMatch[0].Offset + Len(rMatch[0].Text) + 1)
    Else
      ' No match
      Break
    Endif

    ' Should never happen but better check instead of hang
    iLimit -= 1
    If iLimit <= 0 Then
      Main.WriteDebugLog("ERROR: Broke loop in Events.ReplaceDeviceVar parsing '" & sText & "'")
      Break
    Endif
  Loop

  Return sText

Catch
  If Main.bEventsDebug Then Main.WriteLog("[Events] ERROR: Could not find device value variable for <$" & sTag & "$>")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse cron function
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function TimeCron(sTimeDate As String) As Boolean

  Dim aCron, aMore, aCron_Now, aLowHigh, aDivide As String[]
  Dim sField As String
  Dim iField As Integer
  Dim sTag As Boolean

  ' * * * * *
  ' - - - - -
  ' | | | | |
  ' | | | | +----- day of week (0 - 6) (Sunday=0)
  ' | | | +------- month (1 - 12)
  ' | | +--------- day of month (1 - 31)
  ' | +----------- hour (0 - 23)
  ' +------------- min(0 - 59)

  'sTimeDate = Regexp.Replace(sTimeDate, "[0]{1}([0-9]{1})", "&1")
  aCron = Split(sTimeDate, " ")

  If aCron.Count <> 5 Then
    Main.WriteDebugLog(("[Cron] Bad TimeCron() format (needs 5 fields): ") & sTimeDate)
    Return False
  Endif

  aCron_Now = [Str(Main.GetGlobalVar("Minute")), Str(Main.GetGlobalVar("Hour")), Str(Main.GetGlobalVar("Day")), Str(Main.GetGlobalVar("Month")), Str(Main.GetGlobalVar("Weekday"))]
  For iField = 0 To 4
    ' wildcard used
    sTag = False
    If aCron[iField] = "*" Then
      If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & ("' | * so Continue"))
      Continue
    ' normal value
    Else If aCron[iField] = aCron_Now[iField] Then
      If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | aCron[" & iField & "] " & aCron[iField] & " = aCron_Now[" & iField & "] " & aCron_Now[iField] & " so Continue")
      Continue
    ' more values given
    Else If InStr(aCron[iField], ",") Then
      aMore = Split(aCron[iField], ",")
      For Each sField In aMore
          If sField = aCron_Now[iField] Then
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | sField " & sField & " = aCron_Now[" & iField & "] " & aCron_Now[iField] & (" so tag=True"))
            sTag = True
          Else
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | sField " & sField & " <> aCron_Now[" & iField & "] " & aCron_Now[iField])
          Endif
      Next
      If sTag Then
        Continue
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & ("' | none of , sFields match so return False"))
        Return False
      Endif
    ' / value given
    Else If InStr(aCron[iField], "/") Then
      aDivide = Scan(aCron[iField], "*/*")
      If aDivide.Count = 2 Then
        ' 5-30/5
        If InStr(aDivide[0], "-") Then
          aLowHigh = Scan(aDivide[0], "*-*")
          If Val(aCron_Now[iField]) >= Val(aLowHigh[0]) And If Val(aCron_Now[iField]) <= Val(aLowHigh[1]) Then
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | *-*/* within range so Continue")
          Else
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | *-*/* not within range so return False")
            Return False
          Endif
        Endif
        ' */10
        If Val(aCron_Now[iField]) Mod Val(aDivide[1]) = 0 Then
          If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | /* has no remainder so Continue")
          Continue
        Else
          If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | /* has remainder so return False")
          Return False
        Endif
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | invalid / entry so return False")
        Return False
      Endif
    ' range given
    Else If InStr(aCron[iField], "-") Then
      aLowHigh = Scan(aCron[iField], "*-*")
      If Val(aCron_Now[iField]) >= Val(aLowHigh[0]) And If Val(aCron_Now[iField]) <= Val(aLowHigh[1]) Then
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | within range so Continue")
        Continue
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | not within range so return False")
        Return False
      Endif
    Endif
    If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | aCron[" & iField & "] " & aCron[iField] & " <> aCron_Now[" & iField & "] " & aCron_Now[iField] & (" so return False"))
    Return False ' not all of the entries qualified
    sTag = False
  Next
  If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | return True")
  Return True

End

' start delay timer for iEventId and iOrder with param1-3
Private Sub StartDelayTimer(iEventId As Integer, iOrder As Integer, sParam1 As String, sParam2 As String, sParam3 As String)

  Dim iDelay As Integer

  ' sParam3 contains timer mode
  ' "fixed" sParam1 is timer delay in seconds
  ' "random" sParam1 is min value, sParam2 is max value for rnd
  If LCase(sParam3) = "random" Then
    iDelay = Rnd(Val(sParam1), Val(sParam2))
  Else
    iDelay = Val(sParam1)
  Endif

  If FindTimer(iEventId, iOrder, iDelay) = False Then
    tDelayTimer = New CTimerDelay As "tDelayTimer"
    oDelayTimers.Add(tDelayTimer)
    tDelayTimer.Delay = iDelay * 1000
    tDelayTimer.Dur = iDelay
    tDelayTimer.EventId = iEventId
    tDelayTimer.Order = iOrder
    tDelayTimer.Started = Now()
    tDelayTimer.Start
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3c. Started delay timer for event id ") & iEventId & (", delay for ") & iDelay & (" second(s)"))
  Endif

End

' looks if there is a timer running for iEventId and iOrder
Private Sub FindTimer(iEventId As Integer, iOrder As Integer, iDelay As Integer) As Boolean

  Dim oObject As Object

  For Each oObject In oDelayTimers
    If oObject.EventId = iEventId And If oObject.Order = iOrder And If oObject.Dur = iDelay Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3c. Delay timer for event id ") & iEventId & (" and order# ") & iOrder & (" with delay of ") & iDelay & (" second(s) already runs, restarted it."))
      oObject.Delay = iDelay * 1000
      Return True
    Endif
  Next
  Return False

End

' timer is finished, run remaining action(s)
Public Sub tDelayTimer_Timer()

  Dim iEventId, iOrder As Integer

  iEventId = Last.EventId
  iOrder = Last.Order
  Last.Stop
  oDelayTimers.Remove(oDelayTimers.Find(Last))
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3d. Delay timer finished for event id ") & tDelayTimer.EventId & (", continue running it's actions from order# ") & tDelayTimer.Order)
  RunActions(iEventId, iOrder)

End

' disable an event
Public Sub ChangeEventState(iId As Integer, bStatus As Boolean) As Boolean

  Try Main.hDB.Exec("UPDATE events SET enabled = &1 WHERE id = &2", bStatus, iId)
  Return True

Catch
  Return False

End

Public Function ProcessJson(deviceId As Integer, methodeName As String, linkUrl As String) As String

 Dim cContent, cValueContent As Collection
 Dim aValuesContent As Collection[]
 Dim rResult As Result

  If methodeName And If linkUrl Then
    Select Case methodeName
      Case "Post"

        rResult = Devices.GetValues(["device_id": deviceId])
        aValuesContent = New Collection[]
        For Each rResult
          cValueContent = New Collection

          cValueContent.Add(rResult!valuenum, "valuenum")
          cValueContent.Add(Devices.CorrectValue(rResult!value, rResult!correction, deviceId), "value")
          aValuesContent.Add(cValueContent)
        Next

        cContent = New Collection
        cContent.Add(deviceId, "device_id")
        cContent.Add(aValuesContent, "values")

        ' use httpclient to post json
        hPostJson = New HttpClient As "hPostJson"
        hPostJson.URL = linkUrl
        hPostJson.TimeOut = 10
        hPostJson.Async = True
        hPostJson.Post("application/json", JSON.Encode(cContent))

      Case "Get"
        hReadJson = New HttpClient As "hReadJson"
        hReadJson.URL = linkUrl
        hReadJson.Tag = deviceId
        hReadJson.TimeOut = 8
        hReadJson.Async = True
        hReadJson.Get()
        If Main.bEventsDebug Then Main.WriteDebugLog("[Events] Fetching reverse JSON data with " & linkUrl)
      Case Else
        Main.WriteDebugLog(("[Events] 3b. Invalid JSON methode given ") & methodeName & "!")
      End Select
   Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hReadJson_Read()

  Dim sData, sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    sData = cJsonData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cJsonData[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse and save json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hReadJson_Finished()

  Dim sBuffer As String
  Dim deviceId As Integer
  Dim cData As Collection
  Dim cValue As Collection

  Select Last.Code
    Case 200
      deviceId = Last.Tag
      sBuffer = cJsonData[deviceId]
      cJsonData.Remove(deviceId)
      If Len(sBuffer) Then
        Try cData = JSON.Decode(sBuffer)
        If Error And If Main.bEventsDebug Then Main.WriteLog("[Events] " & ("Unknown error occured while trying to get JSON data!"))
        If cData.Exist("values") Then
          For Each cValue In cData["values"]
            If cValue.Exist("valuenum") And If cValue.Exist("value") Then
              Devices.ValueUpdate(deviceId, cValue["valuenum"], cValue["value"])
            Endif
          Next
        Else
          If Main.bEventsDebug Then Main.WriteLog("[Events] " & ("No values in JSON data!"))
        Endif
      Endif
    Case Else
      If Main.bEventsDebug Then Main.WriteLog("[Events] " & ("Unknown error occured while trying to get JSON data!"))
  End Select
  Last.Close

End

Public Sub hReadJson_Error()
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] Error fetching JSON data: ") & Last.Status)
   Last.Close
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if json post ok
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostJson_Finished()

  Select Last.Code
    Case 200
      If Main.bEventsDebug Then Main.WriteLog("[Events] " & ("JSON data posted!"))
    Case Else
      If Main.bEventsDebug Then Main.WriteLog("[Events] " & ("Unknown error occured while trying to get JSON data!"))
  End Select
  Last.Close

End

Public Sub hPostJson_Error()

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] Error fetching JSON data: ") & Last.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve all events
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetEventList() As Result

  Dim rEvent As Result

  Try rEvent = Main.hDB.Exec("SELECT * FROM events")
  If Error Then
    Main.WriteDebugLog("[Events] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif

  Return rEvent

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve all actions for an event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetEventActionList(iEvent As Integer) As Result

  Dim rEventAction As Result

  Try rEventAction = Main.hDB.Exec("SELECT * FROM events_actions WHERE event = &1 ORDER BY events_actions.order", iEvent)
  If Error Then
    Main.WriteDebugLog("[Events] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif

  Return rEventAction

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve all actions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetActionList() As Result

  Dim rAction As Result

  Try rAction = Main.hDB.Exec("SELECT * FROM actions")
  If Error Then
    Main.WriteDebugLog("[Events] ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Endif

  Return rAction

End

Public Function SoftDimming(iDeviceId As Integer, iSeconds As Integer, iResultValue As Integer) As String

  Dim oObject As Object

  If Not Devices.CheckIfDimable(iDeviceId) Then
     If Main.bEventsDebug Then Main.WriteDebugLog("[Events] 3b. soft dimming, device is not dimable!")
     Return
  Endif

  If iSeconds <= 0 Then
     If Main.bEventsDebug Then Main.WriteDebugLog("[Events] 3b. soft dimming, amount of seconds is invalid!")
     Return
  Endif

  For Each oObject In oSoftDimmingTimers
    If oObject.DeviceId = iDeviceId Then
      If Main.bEventsDebug Then Main.WriteDebugLog("[Events] 3b. Soft dimming timer for device id " & iDeviceId & ", canceling previous one.")
      oObject.Stop
      oSoftDimmingTimers.Remove(oSoftDimmingTimers.Find(oObject))
      Break
    Endif
  Next

  tSoftDimmingTimer = New CTimerSoftDimming As "tSoftDimmerTimer"
  oSoftDimmingTimers.Add(tSoftDimmingTimer)
  tSoftDimmingTimer.Delay = 1000
  tSoftDimmingTimer.DeviceId = iDeviceId
  tSoftDimmingTimer.ResultValue = iResultValue
  tSoftDimmingTimer.Ended = DateAdd(Now(), gb.Second, iSeconds)
  tSoftDimmingTimer.Start

  If Main.bEventsDebug Then Main.WriteDebugLog("[Events] 3b. soft dimming, started!")

End

' timer is finished, run next soft dim step
Public Sub tSoftDimmerTimer_Timer()

  Dim stepValue As Integer = 1
  Dim sValue As String
  Dim iDim, iDiff, iDeviceId, iResultValue, iSecondsLeft, iDelay As Integer
  Dim aDim As String[]
  Dim dEnded As Date

  iDeviceId = Last.DeviceId
  iResultValue = Last.ResultValue
  dEnded = Last.Ended
  Last.Stop

  sValue = Devices.GetCurrentValueForDevice(iDeviceId, 1)
  sValue = UCase(sValue)
  If InStr(sValue, "DIM ") Then
    aDim = Split(sValue, " ")
    If aDim.Count = 2 Then
      iDim = Val(aDim[1])
    Endif
  Else If InStr(sValue, "ON") Then
    iDim = 100
  Else
    iDim = 0
  Endif

  ' Calculate next step
  iDiff = Abs(iResultValue - iDim)
  iSecondsLeft = DateDiff(Now(), dEnded, gb.Second)

  If iDiff <= 0 Or If iSecondsLeft <= 0 Then
    Devices.SetDevice(iDeviceId, "Dim " & iResultValue)
    oSoftDimmingTimers.Remove(oSoftDimmingTimers.Find(Last))
    Return
  Endif

  If iSecondsLeft > iDiff Then
    iDelay = (iSecondsLeft / iDiff) * 1000
  Else
    iDelay = 1000
    stepValue = iDiff / iSecondsLeft
  Endif

  If iDim < iResultValue Then
    iDim += stepValue
    If iDim > iResultValue Then iDim = iResultValue
  Else
    iDim -= stepValue
    If iDim < iResultValue Then iDim = iResultValue
  Endif

  Devices.SetDevice(iDeviceId, "Dim " & iDim)

  If Not (iDim = iResultValue) Then
    Last.Delay = iDelay
    Last.Start
  Endif

End
