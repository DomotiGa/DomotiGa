' Gambas module file

' Description:
' Events.module
' This module provides support for events, triggers, actions and conditions.

' Development Status:
' Works 99.99% ok now. Partly rewritten by Geert-Jan van den Hurk.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private oDelayTimers As New Object[]
Public tDelayTimer As CTimerDelay

Public hReadJson As HttpClient
Public hPostJson As HttpClient
Public cJsonData As New Collection

' trigger database table
' description        | type | param1   | param2  | param3  | param4 | param5  | param6 | param7
' time now           |   1  | crontab
' globalvar change   |   2  | variable | operand | value
' device change      |   3  | id       | fieldno | operand | value
' ir remote received |   4  | remote   | button  | repeat
' iviewer remote     |   5  | remote   | join    | value
' multi-trigger      |   6  |

' condition database table
' description        | type | param1   | param2  | param3  | param4 | param5  | param6 | param7
' time now           |   1  | crontab
' globalvar value    |   2  | variable | operand | value
' device value       |   3  | id       | fieldno | operand | value

' called every new minute from EventLoop.Run()
Public Sub CheckTimeNowEvents()

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 1 AND events.enabled"
  Dim aCron As String[]
  Dim iCnt As Integer

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running TimeNow query '") & sSql & "'")
  Try rResult = Main.hDB.Exec(sSql)
  If rResult.Available Then
    If rResult.Count Then
      DoEvent(rResult)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    End If
  Endif

  sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 6 AND events.enabled AND triggers.param1 REGEXP '[[:<:]]TimeCron(.*)[[:>:]]'"
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running TimeNow query '") & sSql & "'")
  rResult = Main.hDB.Exec(sSql)
  If rResult Then
    If rResult.Count Then
      For iCnt = 1 To rResult.Count ' search for cron events
        aCron = Scan(rResult["triggers.param1"], "*(*)*")
        If aCron.Count = 3 Then
          If TimeCron(aCron[1]) = True Then DoTimeEvent(rResult)
        Else
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] TimeCron multi-trigger has invalid format '") & rResult["triggers.param1"] & "'")
        Endif
        rResult.MoveNext()
      Next
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Endif

End

' called when a value of a device is set, and is different from last one from EventLoop.DeviceChanged()
' iID = id of device, sField = the field that has changed, sValue = the new value it's set to
Public Sub CheckDeviceChangeEvents(iId As Integer, sField As String, sValue As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 3 AND events.enabled AND triggers.param1 = &1 AND triggers.param2 = &2"
  Dim aFieldNo As String[] = ["", "Value", "Value2", "Value3", "Value4", "LastSeen"]

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running DeviceChange query '") & Subst(sSql, iId, aFieldNo[sField]) & "'")
  rResult = Main.hDB.Exec(sSql, iId, sField)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, sValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    End If
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckDeviceChangeEvents query!"))
    Return
  Endif

  sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 6 AND events.enabled AND triggers.param1 REGEXP '[[:<:]]Dev_" & iId & "_" & aFieldNo[sField] & "[[:>:]]'"
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running DeviceChange query '") & sSql & "'")
  rResult = Main.hDB.Exec(sSql, iId, sField)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, sValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    End If
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckDeviceChangeEvents query!"))
    Return
  Endif

End

' called when a IR signal is received from CLIRC.ParseLine(), CIRMan.ParseLine() or CIRTrans.ParseLine()
Public Sub CheckIRRemoteEvents(sRemote As String, sButton As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 4 AND events.enabled AND triggers.param1 = &1 AND triggers.param2 = &2"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running IRRemote query '") & Subst(sSql, sRemote, sButton) & "'")
  rResult = Main.hDB.Exec(sSql, sRemote, sButton)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult)
     Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
     Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckIRRemoteEvents query!"))
    Return
  Endif

End

' called when a iViewer string is received from CIViewer.ParseLine()
Public Sub CheckIViewerRemoteEvents(sRemote As String, sJoin As String, sValue As String)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 5 AND events.enabled AND triggers.param2 = &1 AND triggers.param3 = &2"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running IViewerRemote query '") & Subst(sSql, sJoin, sValue) & "'")
  rResult = Main.hDB.Exec(sSql, sJoin, sValue)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult)
     Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
     Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckIViewerRemoteEvents query!"))
    Return
  Endif

End

' called when a globalvar value has changed from Main.SetGlobalVar()
Public Sub CheckGlobalVarEvents(sVar As String, vValue As Variant)

  Dim rResult As Result
  Dim sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 2 AND events.enabled AND triggers.param1 = &1"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running GlobalVar query '") & Subst(sSql, sVar) & "'")
  rResult = Main.hDB.Exec(sSql, sVar)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, vValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckGlobalVarEvents query!"))
    Return
  Endif

  sSql As String = "SELECT * FROM events, triggers WHERE events.trigger1 = triggers.id AND triggers.type = 6 AND events.enabled AND triggers.param1 REGEXP '[[:<:]]Var_" & sVar & "[[:>:]]'"

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1a. Running GlobalVar query '") & sSql & "'")
  rResult = Main.hDB.Exec(sSql, sVar)
  If rResult Then
    If rResult.Count Then
      DoEvent(rResult, vValue)
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 1b. No result."))
    Endif
  Else
    Main.WriteDebugLog(("[Events] Error while running CheckGlobalVarEvents query!"))
    Return
  Endif

End

Private Sub DoEvent(rResult As Result, Optional sValue As Variant)

  If rResult.Count Then
    If Main.bEventsDebug Then main.WriteDebugLog(("[Events] 1b. Got ") & rResult.Count & (" result(s)."))
    For Each rResult
      ' check if event is allowed to get triggered again
      If rResult!rerunenabled = True And If TypeOf(rResult!lastrun) = gb.Date Then
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2a. ReRun condition set for event id ") & rResult!id & (" named '") & rResult!name & "'")
        If Not CheckReRunCondition(rResult!lastrun, rResult!reruntype, rResult!rerunvalue) Then
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2b. Event id ") & rResult!id & (" named '") & rResult!name & ("' already ran in the last ") & rResult!rerunvalue & " " & rResult!reruntype & (" so discarding!"))
          Continue
        Endif
      Endif

      Select rResult["triggers.type"]
        Case 1
          ' timenow trigger
          If TimeCron(rResult["triggers.param1"]) = False Then
            If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. TimeNow trigger check TimeCron() for event id ") & rResult!id & (" and trigger condition '") & rResult["triggers.param1"] & ("' returned False"))
            Continue
          Else
            If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. TimeNow trigger check TimeCron() for event id ") & rResult!id & (" and trigger condition '") & rResult["triggers.param1"] & ("' returned True"))
          Endif
        Case 2
          ' check globalvar change trigger
          If Not CheckCondition(sValue, rResult["triggers.param2"], rResult["triggers.param3"]) Then Continue
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. GlobalVar Change trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with trigger condition '") & rResult["triggers.param1"] & " " & rResult["triggers.param2"] & " " & rResult["triggers.param3"] & "'")
        Case 3
          ' check device change trigger
          If Not CheckCondition(sValue, rResult["triggers.param3"], rResult["triggers.param4"]) Then Continue
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Device Change trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with trigger condition '") & rResult["triggers.param2"] & "' " & sValue & " " & rResult["triggers.param3"] & " " & rResult["triggers.param4"])
        Case 4
          ' irremote trigger
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. IRRemote trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with Remote name '") & rResult["triggers.param1"] & "' and Button '" & rResult["triggers.param2"] & "'")
        Case 5
          ' iviewer trigger
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. IViewerRemote trigger on event id ") & rResult!id & (" named '") & rResult!name & ("' with Remote name '") & rResult["triggers.param1"] & "' with Join '" & rResult["triggers.param2"] & " and Value " & rResult["triggers.param3"] & "'")
        Case Else
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Event with id ") & rResult!id & (" named '") & rResult!name & ("' has unknown trigger type ") & rResult["triggers.type"])
      End Select

      ' check optional conditions
      If CheckConditions(rResult!condition1, rResult!condition2, rResult!operand) = True Then
        ' run action(s)
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' is validated, running action(s)."))
        RunActions(rResult!id)
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' has failed CheckConditions, discarding."))
      Endif
    Next
  Endif

End

Private Sub DoTimeEvent(rResult As Result, Optional sValue As Variant)

  ' check if event is allowed to get triggered again
  If rResult!rerunenabled = True And If TypeOf(rResult!lastrun) = gb.Date Then
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2a. ReRun condition set for event id ") & rResult!id & (" named '") & rResult!name & "'")
    If Not CheckReRunCondition(rResult!lastrun, rResult!reruntype, rResult!rerunvalue) Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2b. Event id ") & rResult!id & (" named '") & rResult!name & ("' already ran in the last ") & rResult!rerunvalue & " " & rResult!reruntype & (" so discarding!"))
      Return
    Endif
  Endif

  ' check optional conditions
  If CheckConditions(rResult!condition1, rResult!condition2, rResult!operand) = True Then
    ' run action(s)
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' is validated, running action(s)."))
    If Main.bEventsDebug Then Main.WriteDebugLog("Running '" & rResult!name & "' event")
    RunActions(rResult!id)
  Else
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2f. Event id " & rResult!id & " named '") & rResult["events.name"] & ("' has failed CheckConditions, discarding."))
  Endif

End

Public Sub CheckCondition(sValue As Variant, sOperand As String, sCond As Variant, Optional bMute As Boolean) As Boolean

  Dim bReturn As Boolean

  If TypeOf(sValue) = gb.Boolean Then sValue = Main.DisplayBool(sValue)
  If TypeOf(sCond) = gb.Boolean Then sCond = Main.DisplayBool(sCond)

  Select sOperand
    Case "="
      If Comp(sValue, sCond, gb.IgnoreCase) = 0 Then bReturn = True
    Case "<>"
      If sValue <> sCond Then bReturn = True
    Case ">"
      If CFloat(Replace(CString(sValue), ",", ".", gb.String)) > CFloat(Replace(CString(sCond), ",", ".", gb.String)) Then bReturn = True
    Case "<"
      If CFloat(Replace(CString(sValue), ",", ".", gb.String)) < CFloat(Replace(CString(sCond), ",", ".", gb.String)) Then bReturn = True
    Case Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Unsupported operand '" & sOperand & "' found!"))
  End Select
  If Main.bEventsDebug And If Not bMute Then Main.WriteDebugLog(("[Events] 2c. Check condition '") & sValue & " " & sOperand & " " & sCond & "' = " & Main.DisplayBool(bReturn))
  Return bReturn

Catch
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2c. Invalid comparison in CheckCondition() routine!"))
  Return False

End

Private Sub AddVariablesToContext(cContext As Collection)

  Dim vValue As Variant

  For Each vValue In Main.GlobalVar
    cContext["Var_" & Main.GlobalVar.Key] = vValue
  Next

End

Private Sub AddDevicesToContext(cContext As Collection)

  Dim iCount As Integer
  Dim rResult As Result

  rResult = Devices.FindAllEnabledDevices("name")
  For iCount = 0 To rResult.Max
    cContext["Dev_" & rResult!id & "_Value"] = rResult!value
    cContext["Dev_" & rResult!id & "_Value2"] = rResult!value2
    cContext["Dev_" & rResult!id & "_Value3"] = rResult!value3
    cContext["Dev_" & rResult!id & "_Value4"] = rResult!value4
    cContext["Dev_" & rResult!id & "_LastChanged"] = rResult!lastchanged
    cContext["Dev_" & rResult!id & "_LastSeen"] = rResult!lastseen
    cContext["Dev_" & rResult!id & "_BatteryStatus"] = rResult!batterystatus
    rResult.MoveNext
  Next

End

Private Sub ReplaceMacro(sFormula As String) As String

  Dim iCount As Integer
  Dim rResult As Result
  Dim sSql As String

  sSql = "SELECT * FROM macros"
  rResult = Main.hDB.Exec(sSql)

  For iCount = 0 To rResult.Max
    sFormula = Replace(sFormula, "Macro_" & rResult!name, rResult!formula)
    rResult.MoveNext
  Next
  Return sFormula

End

Public Function EvalFormula(sFormula As String) As String

  Dim sToEval, sResult As String 
  Dim cContext As New Collection
  Dim vResult As Variant

  sFormula = ReplaceMacro(sFormula)
  sToEval = Replace(sFormula, "\n", " ")
  ' here we replace variables & devices by their values
  AddVariablesToContext(cContext)
  AddDevicesToContext(cContext)
  ' here the formula is evaluated
  Try vResult = Eval(sToEval, cContext)
  If Error Then
    sResult = ("Error: ") & Error.Text
  Else If TypeOf(vResult) = gb.Boolean Then
    sResult = Main.DisplayBool(vResult)
  Else
    sResult = vResult
  Endif
  Return sResult

Catch
  Return Error.Text

End

Public Sub CheckSingleCondition(iCondition As Integer) As Boolean

  Dim bResult As Boolean
  Dim rResultCondition As Result

  rResultCondition = Main.hDB.Exec("SELECT * FROM conditions WHERE id = " & iCondition)
  If rResultCondition Then
    If EvalFormula(rResultCondition!formula) = "True" Then bResult = True
  Endif
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2d. Condition with id ") & iCondition & (" and formula '") & rResultCondition!formula & ("' returned ") & Main.DisplayBool(bResult))
  Return bResult

End

' check the optional conditions 1 and 2
Private Sub CheckConditions(iCondition1 As Integer, iCondition2 As Integer, sOperand As String) As Boolean

  Dim bCondition1, bCondition2 As Boolean

  If iCondition1 Then
      bCondition1 = CheckSingleCondition(iCondition1)
      If iCondition2 Then
        bCondition2 = CheckSingleCondition(iCondition2)
      Else
        sOperand = ""
      Endif

      ' check the OR and AND clause
      Select Case UCase(sOperand)
        Case ""
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2e. CheckConditions checking only iCondition1 with id ") & iCondition1)
          If bCondition1 Then Return True
        Case "OR"
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2e. CheckConditions checking iCondition1 with id ") & iCondition1 & (" OR iCondition2 with id ") & iCondition2)
          If bCondition1 Or If bCondition2 Then Return True
        Case "AND"
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 2e. CheckConditions checking iCondition1 with id ") & iCondition1 & (" AND iCondition2 with id ") & iCondition2)
          If bCondition1 And If bCondition2 Then Return True
        Case Else
      End Select

  Else ' no conditions defined so return true
    Return True
  Endif
  Return False

End

' run all configured actions for this event
Public Sub RunActions(iEventId As Integer, Optional iFrom As Integer) As Boolean

  Dim rActions As Result

  UpdateEvent(iEventId)
  rActions = Main.hDB.Exec("SELECT * FROM events_actions WHERE event = &1 ORDER BY events_actions.order", iEventId)
  If rActions Then
    For Each rActions
      If rActions!order < iFrom Then Continue
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3a. Running action with id ") & rActions!action & (" for event with id ") & iEventId)
      If RunAction(rActions!action, rActions!order, iEventId) Then Return True
    Next
  Endif
  Return False

End

Private Sub CheckReRunCondition(dDate As Date, sPeriod As String, iValue As Integer) As Boolean

  If DateDiff(dDate, Now(), Eval(sPeriod)) > iValue Then
    Return True
  Else
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] Event Rerun condition ") & iValue & " " & sPeriod & (" is false."))
    Return False
  Endif

End

' action database table
' description       | rResultAction!type | rResultAction!param1      | rResultAction!param2 | rResultAction!param3 | rResultAction!param4 | rResultAction!param5
' set device value  | 1                  | deviceid                  | value fieldname      | value
' set globalvar     | 2                  | globalvar name            | value
' send e-mail       | 3                  | to address                | subject              | body
' speak text        | 4                  | voice or 'female', 'male' | text
' execute command   | 5                  | shell command to run
' send tweet        | 6                  | tweet message to send
' send SMS message  | 7                  | to SMS number             | message
' send IRTrans IR   | 8                  | command string
' play sound        | 9                  | sound file                | volume
' write log entry   | 10                 | log text
' display led msg   | 11                 | message to display        | display id           | color                | speed
' av control        | 12                 | model                     | command              | value                | address
' timer delay       | 13                 | delay in secs or rnd min  | random max seconds   | mode fixed or random
' notify-send       | 14                 | title                     | text
' script            | 15                 | script
' JSON              | 16                 | deviceid                  | post/get             | url
' send Prowl        | 17                 | Prowl message to send
' send NMA          | 18                 | Notify My Android message to send
' send Pushover     | 19                 | Pushover message to send

Public Sub RunAction(iAction As Integer, iOrder As Integer, iEventId As Integer) As Boolean

  Dim rResultAction As Result
  Dim bOk As Boolean
  Dim sDeviceName, sResult As String

  rResultAction = Main.hDB.Exec("SELECT * FROM actions WHERE id = &1 ", iAction)
  If rResultAction.Available Then
    Select rResultAction!type
      Case 1 ' set device value
        ' only changing field Value will trigger interface code, and Value2-Value4 will only set field value
        If rResultAction!param1 And If rResultAction!param2 And If rResultAction!param3 Then
          sDeviceName = Devices.FindNameForDevice(rResultAction!param1)
          If Len(sDeviceName) Then
            Select Case rResultAction!param2
              Case 1
                bOk = Devices.SetDevice(sDeviceName, ParseText(rResultAction!param3))
              Case 2
                bOk = Devices.ValueUpdate(rResultAction!param1, "", ParseText(rResultAction!param3), "", "")
              Case 3
                bOk = Devices.ValueUpdate(rResultAction!param1, "", "", ParseText(rResultAction!param3), "")
              Case 4
                bOk = Devices.ValueUpdate(rResultAction!param1, "", "", "", ParseText(rResultAction!param3))
              Case Else
                Main.WriteDebugLog(("[Events] 3b. Invalid value field given ") & rResultAction!param2 & "!")
                bOk = False
            End Select
          Else
            Main.WriteDebugLog(("[Events] 3b. Device with id ") & rResultAction!param1 & (" doesn't exists!"))
            bOk = False
          Endif
        Endif
      Case 2 ' set globalvar value
        ' if globalvar doesn't exist it will be created
        If rResultAction!param1 And If rResultAction!param2 Then
          Try Main.SetGlobalVar(rResultAction!param1, ParseText(rResultAction!param2), True)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Endif
      Case 3 ' send e-mail
        If Main.bEmailEnabled Then
          Try Mail.SendMail(ParseText(rResultAction!param2), ParseText(rResultAction!param3), rResultAction!param1)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. e-mail support is disabled!"))
        Endif
      Case 4 ' speak text
        If Main.bVoiceTextEnabled Then
          Try VoiceText.Speak(ParseText(rResultAction!param2), rResultAction!param1)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. VoiceText support is disabled!"))
        Endif
      Case 5 ' execute command
        Try Shell ParseText(rResultAction!param1)
        If Error Then
          bOk = False
        Else
          bOk = True
        Endif
      Case 6 ' send tweet
        If Main.bTwitterEnabled Then
          Try Twitter.PostTweet(ParseText(rResultAction!param1))
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. Twitter support is disabled!"))
        Endif
      Case 7 ' send SMS message
        If Main.bSMSEnabled Then
          Try Main.hSMS.SendSMS(ParseText(rResultAction!param2), rResultAction!param1)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. SMS support is disabled!"))
        Endif
      Case 8 ' send IRTrans IR
        If Main.bIRTransEnabled Then
          Try Main.hIRTrans.SendIRCommand(rResultAction!param1)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. IRTrans support is disabled!"))
        Endif
      Case 9 ' play sound
        If Main.bSoundEnabled Then
          Try Sounds.PlaySnd(rResultAction!param1, rResultAction!param2)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. Sound support is disabled!"))
        Endif
      Case 10 ' write log entry
        Try Main.WriteLog(ParseText(rResultAction!param1))
        If Error Then
          bOk = False
        Else
          bOk = True
        Endif
      Case 11 ' display message on led matrix display
        If Main.bLEDMatrixEnabled Then
          Try Main.hLEDMatrix.DisplayMessage(rResultAction!param2, ParseText(rResultAction!param1), rResultAction!param3, rResultAction!param4)
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. LED Matrix support is disabled!"))
        Endif
      Case 12 ' av control command
        Try AVControl.Set(rResultAction!param1, rResultAction!param2, rResultAction!param3, rResultAction!param4)
        If Error Then
          bOk = False
        Else
          bOk = True
        Endif
      Case 13 ' timer delay
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & rResultAction!id & (" named '") & rResultAction!name & ("' is a delay timer!"))
        StartDelayTimer(iEventId, iOrder + 1, rResultAction!param1, rResultAction!param2, rResultAction!param3)
        Return True
      Case 14 ' notify-send
        Main.NotifySend(ParseText(rResultAction!param1), ParseText(rResultAction!param2))
        bOk = True
      Case 15 ' script
        sResult = EvalFormula(rResultAction!param1)
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & rResultAction!id & (" named '") & rResultAction!name & ("' returned '") & sResult & "'")
        bOk = True
      Case 16 ' json
        sDeviceName = Devices.FindNameForDevice(rResultAction!param1)
        If Len(sDeviceName) Then
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & rResultAction!id & (" started JSON request '"))
          ProcessJson(rResultAction!param1, rResultAction!param2, rResultAction!param3)     
          bOk = True ' TODO
        Else
          Main.WriteDebugLog(("[Events] 3b. Device with id ") & rResultAction!param1 & (" doesn't exists!"))
          bOk = False
        Endif
      Case 17 ' send Prowl
        If Main.bProwlEnabled Then
          Try Prowl.PostProwl("", "", ParseText(rResultAction!param1))
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. Prowl support is disabled!"))
        Endif
      Case 18 ' send Notify My Android
        If Main.bNMAEnabled Then
          Try NMA.PostNMA("", "", ParseText(rResultAction!param1))
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. Notify My Android support is disabled!"))
        Endif
      Case 19 ' send Pushover
        If Main.bPushoverEnabled Then
          Try Pushover.PostPushover("", ParseText(rResultAction!param1))
          If Error Then
            bOk = False
          Else
            bOk = True
          Endif
        Else
          Main.WriteDebugLog(("[Events] 3b. Pushover support is disabled!"))
        Endif

      Case Else
        bOk = False
    End Select

    If bOk Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & rResultAction!id & (" named '") & rResultAction!name & ("' executed!"))
      Return False
    Else
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & rResultAction!id & (" named '") & rResultAction!name & ("' failed to execute!"))
      Return False
    Endif
  Else
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3b. Action with id ") & iAction & (" not found!"))
  Endif

End

' update event timestamps
Private Sub UpdateEvent(iId As Integer)

  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT * FROM events where id = &1", iId)
  If rResult.Available Then
    If rResult.Count = 1 Then
      If rResult!firstrun = "00:00:00" Or rResult!firstrun = "" Then
        rResult = Main.hDB.Exec("UPDATE events SET firstrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
      Endif
    Endif
    rResult = Main.hDB.Exec("UPDATE events SET lastrun = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  Endif

End

' replace templates with their values in text
' <%global var%> - insert globalvar value
' <#device name|field#> - insert value field number 'field' from device with name 'device name'
' <$device id|field$> - insert value field number 'field' from device with 'device id'
Private Sub ParseText(sText As String) As String

  Dim iPos1, iPos2, iPos3 As Integer
  Dim sTag As String

  If InStr(stext, "<") And If InStr(stext, ">") Then
    iPos1 = InStr(sText, "<")
    Do While iPos1 > 0
      iPos2 = InStr(sText, ">", iPos1 + 1)
      If iPos2 > 0 Then ' tags found
        sTag = Mid(sText, iPos1 + 1, iPos2 - iPos1 - 1)
        If Left(sTag, 1) = "%" And If Right(sTag, 1) = "%" Then ' globalvar tag
          sText = Replace(sText, "<" & sTag & ">", InsertGlobalVar(sTag))
        Endif
        If Left(sTag, 1) = "#" And If Right(sTag, 1) = "#" Then ' devicename tag
          sText = Replace(sText, "<" & sTag & ">", InsertDeviceValue(sTag))
        Endif
        If Left(sTag, 1) = "$" And If Right(sTag, 1) = "$" Then ' deviceid tag
          sText = Replace(sText, "<" & sTag & ">", InsertDeviceValue(sTag, True))
        Endif
      Endif
      iPos3 = InStr(sText, "<")
      If iPos3 <= iPos1 Then
        Break
      Else
        iPos1 = iPos3
      Endif
    Loop
  Endif
  Return sText

End

' return value of %global var%
Private Sub InsertGlobalVar(sTag As String) As String

  Try Return Main.GlobalVar[Mid(sTag, 2, Len(sTag) - 2)]
  If Error Then Return ("ERROR!")

End

' return value of <#device name|field#> or <$device id|field$>
Private Sub InsertDeviceValue(sTag As String, Optional bUseId As Boolean) As String

  Dim aScan As String[]
  Dim sValue As String

  If InStr(sTag, "|") Then
    If bUseId Then
      aScan = Scan(sTag, "$*|*$")
    Else
      aScan = Scan(sTag, "#*|*#")
    Endif
    If aScan.Count = 2 Then
      If bUseId Then aScan[0] = Devices.FindNameForDevice(aScan[0])
      Select Case LCase(aScan[1])
        Case "value", "value2", "value3", "value4", "1", "2", "3", "4", "lastseen"
          sValue = Devices.GetValueForDevice(aScan[0], aScan[1])
        Case Else
          sValue = Devices.GetValueForDevice(aScan[0])
      End Select
    Endif
  Else
    sValue = Devices.GetValueForDevice(Mid(sTag, 2, Len(sTag) - 2))
  Endif
  Return sValue

Catch
  Return ("ERROR: Tag '" & sTag & "' is invalid!")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse cron function
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function TimeCron(sTimeDate As String) As Boolean

  Dim aCron, aMore, aCron_Now, aLowHigh, aDivide As String[]
  Dim sField As String
  Dim iField As Integer
  Dim sTag As Boolean

  ' * * * * *
  ' - - - - -
  ' | | | | |
  ' | | | | +----- day of week (0 - 6) (Sunday=0)
  ' | | | +------- month (1 - 12)
  ' | | +--------- day of month (1 - 31)
  ' | +----------- hour (0 - 23)
  ' +------------- min(0 - 59)

  aCron = Split(sTimeDate, " ")

  If aCron.Count <> 5 Then
    Main.WriteDebugLog(("[Cron] Bad TimeCron() format (needs 5 fields): ") & sTimeDate)
    Return False
  End If

  aCron_Now = [Str(Main.GlobalVar["Minute"]), Str(Main.GlobalVar["Hour"]), Str(Main.GlobalVar["Day"]), Str(Main.GlobalVar["Month"]), Str(Main.GlobalVar["Weekday"])]
  For iField = 0 To 4
    ' wildcard used
    sTag = False
    If aCron[iField] = "*" Then
      If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & ("' | * so Continue"))
      Continue
    ' normal value
    Else If aCron[iField] = aCron_Now[iField] Then
      If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | aCron[" & iField & "] " & aCron[iField] & " = aCron_Now[" & iField & "] " & aCron_Now[iField] & " so Continue")
      Continue
    ' more values given
    Else If InStr(aCron[iField], ",") Then
      aMore = Split(aCron[iField], ",")
      For Each sField In aMore
          If sField = aCron_Now[iField] Then
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | sField " & sField & " = aCron_Now[" & iField & "] " & aCron_Now[iField] & (" so tag=True"))
            sTag = True
          Else
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | sField " & sField & " <> aCron_Now[" & iField & "] " & aCron_Now[iField])
          End If
      Next
      If sTag Then
        Continue
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & ("' | none of , sFields match so return False"))
        Return False
      End If
    ' / value given
    Else If InStr(aCron[iField], "/") Then
      aDivide = Scan(aCron[iField], "*/*")
      If aDivide.Count = 2 Then
        ' 5-30/5
        If InStr(aDivide[0], "-") Then
          aLowHigh = Scan(aDivide[0], "*-*")
          If Val(aCron_Now[iField]) >= Val(aLowHigh[0]) And If Val(aCron_Now[iField]) <= Val(aLowHigh[1]) Then
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | *-*/* within range so Continue")
          Else
            If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | *-*/* not within range so return False")
            Return False
          End If
        End If
        ' */10
        If Val(aCron_Now[iField]) Mod Val(aDivide[1]) = 0 Then
          If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | /* has no remainder so Continue")
          Continue
        Else
          If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | /* has remainder so return False")
          Return False
        Endif
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | invalid / entry so return False")
        Return False
      Endif
    ' range given
    Else If InStr(aCron[iField], "-") Then
      aLowHigh = Scan(aCron[iField], "*-*")
      If Val(aCron_Now[iField]) >= Val(aLowHigh[0]) And If Val(aCron_Now[iField]) <= Val(aLowHigh[1]) Then
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | within range so Continue")
        Continue
      Else
        If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | not within range so return False")
        Return False
      End If
    End If
    If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | aCron[" & iField & "] " & aCron[iField] & " <> aCron_Now[" & iField & "] " & aCron_Now[iField] & (" so return False"))
    Return False ' not all of the entries qualified
    sTag = False
  Next
  If Main.bEventsDebug Then Main.WriteDebugLog("[Cron] '" & sTimeDate & "' | return True")
  Return True

End

' start delay timer for iEventId and iOrder with param1-3
Private Sub StartDelayTimer(iEventId As Integer, iOrder As Integer, sParam1 As String, sParam2 As String, sParam3 As String)

  Dim iDelay As Integer

  ' sParam3 contains timer mode
  ' "fixed" sParam1 is timer delay in seconds
  ' "random" sParam1 is min value, sParam2 is max value for rnd
  If LCase(sParam3) = "random" Then
    iDelay = Rnd(Val(sParam1), Val(sParam2))
  Else
    iDelay = Val(sParam1)
  Endif

  If FindTimer(iEventId, iOrder, iDelay) = False Then
    tDelayTimer = New CTimerDelay As "tDelayTimer"
    oDelayTimers.Add(tDelayTimer)
    tDelayTimer.Delay = iDelay * 1000
    tDelayTimer.Dur = iDelay
    tDelayTimer.EventId = iEventId
    tDelayTimer.Order = iOrder
    tDelayTimer.Started = Now()
    tDelayTimer.Start
    If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3c. Started delay timer for event id ") & iEventId & (", delay for ") & iDelay & (" second(s)"))
  Endif

End

' looks if there is a timer running for iEventId and iOrder
Private Sub FindTimer(iEventId As Integer, iOrder As Integer, iDelay As Integer) As Boolean

  Dim oObject As Object

  For Each oObject In oDelayTimers
    If oObject.EventId = iEventId And If oObject.Order = iOrder And If oObject.Dur = iDelay Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3c. Delay timer for event id ") & iEventId & (" and order# ") & iOrder & (" with delay of ") & iDelay & (" second(s) already runs, restarted it."))
      oObject.Delay = iDelay * 1000
      Return True
    Endif
  Next
  Return False

End

' timer is finished, run remaining action(s)
Public Sub tDelayTimer_Timer()

  Dim iEventId, iOrder As Integer

  iEventId = Last.EventId
  iOrder = Last.Order
  Last.Stop
  oDelayTimers.Remove(oDelayTimers.Find(Last))
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Events] 3d. Delay timer finished for event id ") & tDelayTimer.EventId & (", continue running it's actions from order# ") & tDelayTimer.Order)
  RunActions(iEventId, iOrder)

End

' disable an event
Public Sub ChangeEventState(iId As Integer, bStatus As Boolean) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT * FROM events where id = &1", iId)
  If rResult.Available Then
    If rResult.Count = 1 Then
      If bStatus = True Then
        rResult = Main.hDB.Exec("UPDATE events SET enabled = &1 WHERE id = &2", -1, iId)
      Else
        rResult = Main.hDB.Exec("UPDATE events SET enabled = &1 WHERE id = &2", 0, iId)
      Endif
    Endif
  Endif
  Return True

End

Public Function ProcessJson(deviceId As Integer, methodeName As String, linkUrl As String) As String
 Dim sContent As String
 
  If methodeName And If linkUrl Then
    Select Case methodeName
      Case "Post"
      
        sContent = "{"
        sContent &= "\"result1\": \"" & Devices.GetCurrentValueForDevice(deviceId, 1) & "\","
        sContent &= "\"result2\": \"" & Devices.GetCurrentValueForDevice(deviceId, 2) & "\","
        sContent &= "\"result3\": \"" & Devices.GetCurrentValueForDevice(deviceId, 3) & "\","
        sContent &= "\"result4\": \"" & Devices.GetCurrentValueForDevice(deviceId, 4) & "\""
        sContent &= "}\n"
        
        ' use httpclient to post json
        hPostJson = New HttpClient As "hPostJson"
        hPostJson.URL = linkUrl
        hPostJson.TimeOut = 10
        hPostJson.Async = True
        hPostJson.Post("application/json", sContent)
        
      Case "Get"
        hReadJson = New HttpClient As "hReadJson"
        hReadJson.URL = linkUrl
        hReadJson.Tag = deviceId
        hReadJson.TimeOut = 8
        hReadJson.Async = True
        hReadJson.Get()
        If Main.bEventsDebug Then Main.WriteDebugLog("[Event] Fetching reverse JSON data with " & linkUrl)      
      Case Else
        Main.WriteDebugLog(("[Events] 3b. Invalid JSON methode given ") & methodeName & "!")
      End Select      
   Endif


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hReadJson_Read()

  Dim sData, sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    sData = cJsonData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cJsonData[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse and save json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hReadJson_Finished()

  Dim sBuffer As String
  Dim deviceId As Integer
  Dim cData As Collection

  Select Last.Code
    Case 200
      deviceId = Last.Tag
      sBuffer = cJsonData[deviceId] 
      cJsonData.Remove(deviceId)
      If Len(sBuffer) Then
          cData = JSON.Decode(sBuffer)
          If cData.Exist("result1") Then
            Devices.ValueUpdate(deviceId, ParseText(cData!result1), "", "", "")
          Endif
          If cData.Exist("result2") Then
            Devices.ValueUpdate(deviceId, "", ParseText(cData!result2), "", "")
          Endif
          If cData.Exist("result3") Then
            Devices.ValueUpdate(deviceId, "", "", ParseText(cData!result3), "")
          Endif
          If cData.Exist("result4") Then
            Devices.ValueUpdate(deviceId, "", "", "", ParseText(cData!result4))
          Endif    
      Endif
    Case Else
      If Main.bEventsDebug Then Main.WriteLog(("Unknown error occured while trying to get JSON data!"))
  End Select
  Last.Close

End

Public Sub hReadJson_Error()
  If Main.bEventsDebug Then Main.WriteDebugLog(("[Event] Error fetching JSON data: ") & Last.Status)
   Last.Close
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if json post ok
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostJson_Finished()

  Select Last.Code
    Case 200
      If Main.bEventsDebug Then Main.WriteLog(("[Event] JSON data posted!"))
    Case Else
      If Main.bEventsDebug Then Main.WriteLog(("Unknown error occured while trying to get JSON data!"))
  End Select
  Last.Close

End

Public Sub hPostJson_Error()

  If Main.bEventsDebug Then Main.WriteDebugLog(("[Event] Error fetching JSON data: ") & Last.Status)

End