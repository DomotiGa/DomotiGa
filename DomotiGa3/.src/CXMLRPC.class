' Gambas class file

' Description:
' CXMLRPC.class
' Built-in XML-RPC server.

' Development Status:
' Finished, but DEPRECATED

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "XMLRPC"
Public PluginFriendlyName As String = "XML-RPC"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[XMLRPC] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iHTTPPort As Integer
Private $iMaxConn As Integer
Private $bDebug As Boolean

Public hXMLRPC As RpcServer
Private APIVersion As String = "0.18"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iMaxConn = cPl.Settings["maxconn"]
  $iHTTPPort = cPl.Settings["httpport"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  Dim hRpcFunc As RpcFunction

  hXMLRPC = New RpcServer As "hXMLRPC"

  ' start method definitions
  ' system methods
  hRpcFunc = New RpcFunction("system.program_uptime", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the program uptime.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.program_version", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the program version.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.hostname", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the hostname.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.pid", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the process id.")
  hXMLRPC.Register(hRpcFunc)
  ' xmlrpc
  hRpcFunc = New RpcFunction("api.version", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the api version.")
  hXMLRPC.Register(hRpcFunc)
  ' misc info
  hRpcFunc = New RpcFunction("data.newmessages", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns new mails, calls and voicemails.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("data.sunmoon", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns sun and moon data.")
  hXMLRPC.Register(hRpcFunc)
  ' mode
  hRpcFunc = New RpcFunction("mode.get_housemode", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the house mode.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("mode.get_mutemode", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("returns the mute mode.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.housemode", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set house mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.mutemode", [XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set mute mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  ' globalvar
  hRpcFunc = New RpcFunction("globalvar.list", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns a list of global variables.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.save", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("saves global variables to database.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.get", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns a list of global variables with values.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.set", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set global variable param1 to param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.del", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("delete global variable param1")
  hXMLRPC.Register(hRpcFunc)
  ' device
  hRpcFunc = New RpcFunction("device.list", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.listswitch", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices which can be switched.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.listdim", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices which can be dimmed.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.setdevice", [XmlRpc.xInteger, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set device param1 with value param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.updatedevice", [XmlRpc.xInteger, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("update device param1 in value field param2 with value param3")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.getstate", [XmlRpc.xInteger, XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get device state from device with name param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("location.list", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns list of locations")
  hXMLRPC.Register(hRpcFunc)
  ' send stuff
  hRpcFunc = New RpcFunction("send.email", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send email to param1, with subject param2 and body param3.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.tweet", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send tweet with param1 as contents.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.sms", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send sms to param1, with param2 as contents.")
  hXMLRPC.Register(hRpcFunc)
  ' alarm
  hRpcFunc = New RpcFunction("set.alarmpin", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set alarm pin to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.alarmmode", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set alarm mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  ' misc
  hRpcFunc = New RpcFunction("module.restart", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("reload config and restart module param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("play.sound", [XmlRpc.xString, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("play sound param1 with volume param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("voicetext.speak", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("speak text param1 with voice param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("display.ledmessage", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("display message param2 on display with id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("xively.list", Null, XmlRpc.xString)
  hRpcFunc.Help = ("get xively device list in eeml.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("serverstats.updategraphs", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("update serverstats graph images for range param1.")
  hXMLRPC.Register(hRpcFunc)
  ' rrdtool
  hRpcFunc = New RpcFunction("rrdtool.createrrds", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("create rrdtool database for device id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.listgraphs", Null, XmlRpc.xString)
  hRpcFunc.Help = ("get list of rrdtool graph images in group param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.updategraphs", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("update rrdtool graph images in group param1 for range param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.updategraph", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("update rrdtool graph images for device with id param1 and range param2.")
  hXMLRPC.Register(hRpcFunc)
  ' audio video control
  hRpcFunc = New RpcFunction("av.setcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set audio/video param1 with command param2, value param3, address param4.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("av.getcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("get audio/video param1 setting param2, address param3.")
  hXMLRPC.Register(hRpcFunc)
  ' squeezebox
  hRpcFunc = New RpcFunction("squeezebox.setvolumeplayer", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set volume with player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getvolumeplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get volume with player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.stopplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("stop player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.playplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("start player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.nextnumberplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("next number.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.prevnumberplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("prev number.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getcurrentnumberplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get current number.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getalbums", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("get albums.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getmodeplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get mode player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getplayerid", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get player id.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getplayername", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get player name.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getisplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get is player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.clearplaylistplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("clear playlist player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.addalbumtoplaylistplayer", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("add album to playlist for player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getcurrentartistplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get current artist for player.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getplayerisconnectedtoserver", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("is player connected to server.")
  hXMLRPC.Register(hRpcFunc)
  ' zwave
  hRpcFunc = New RpcFunction("zwave.removenodes", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave remove all nodes.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.createnode", [XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave create node.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.setids", [XmlRpc.xInteger, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave set ids.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.setvalue", [XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave set device value.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.allqueried", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave all queried.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.removenode", [XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave remove node.")
  hXMLRPC.Register(hRpcFunc)
  ' razberry
  hRpcFunc = New RpcFunction("razberry.updatesready", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("trigger from z-way-server that updates are ready to be fetched")
  hXMLRPC.Register(hRpcFunc)
  ' commander
  hRpcFunc = New RpcFunction("cmdr.culsimulate", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("cmdr inject cul packet in simulator.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("cmdr.culqueuecommand", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("cmdr cul queue command.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("cmdr.plcbustxcommand", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xBoolean, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("cmdr plcbus queue command.")
  hXMLRPC.Register(hRpcFunc)
  ' thermostat
  hRpcFunc = New RpcFunction("thermostat.listscenario", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("list all scenarios.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.getscenario", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("get active scenario.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.getscenarios", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("get all scenarios and their heatings.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.getheating", [XmlRpc.xString], XmlRpc.xStruct)
  hRpcFunc.Help = ("get heating with the id of one scenario.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.setscenario", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set thermostat scenario.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.createheating", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("create heating.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.derogateheating", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("change requested temperature for a heating.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.getderogateheating", [XmlRpc.xString], XmlRpc.xDouble)
  hRpcFunc.Help = ("thermostat get derogate temperature for a heating.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.setsecondary", [XmlRpc.xInteger, XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("thermostat set secondary state for a heating.")
  hXMLRPC.Register(hRpcFunc)
  ' events
  hRpcFunc = New RpcFunction("events.list", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns all the events.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("events.runactions", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("run all actions from event with id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("events.runaction", [XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("run action with id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("events.changestate", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("change the state of event with id param1 to state param2.")
  hXMLRPC.Register(hRpcFunc)
  ' calendar
  hRpcFunc = New RpcFunction("calendar.setplanning", [XmlRpc.xArray], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set occupancy planning.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("calendar.getplanning", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("get occupancy planning.")
  hXMLRPC.Register(hRpcFunc)

  Try hXMLRPC.Listen($iHTTPPort, $iMaxConn)
  If hXMLRPC.Listening Then
    ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " Server listening on Port " & $iHTTPPort)
    IsRunning = True
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
    IsRunning = False
    ErrorText = "Net Not Active"
    Return False
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

' shutdown our xmlrpc server
Public Sub Disconnect()

  hXMLRPC.Stop()

End

Public Sub hXMLRPC_RemoteCall(sName As String, sData As Variant[])

  Dim aArray As New RpcArray
  Dim sParam As String
  Dim iParam As Integer
  Dim cGV As CGlobalVarEntry

  If $bDebug Then
    Main.WriteDebugLog(LogLabel & "Got a RemoteCall for method '" & sName & "'")
    For Each sParam In sData
      Main.WriteDebugLog(LogLabel & "Param[" & iParam & "] = '" & HtmlDecode(sParam) & "'")
      Inc iParam
    Next
  Endif

  Select Case sName
    ' system methods
    Case "system.program_uptime"
      hXMLRPC.SetReply(HtmlEncode(Main.GetGlobalVar("Program_Uptime")))
    Case "system.program_version"
      hXMLRPC.SetReply(Main.sProgramVersion)
    Case "system.pid"
      hXMLRPC.SetReply(Application.Id)
    Case "system.hostname"
      hXMLRPC.SetReply(System.Host)
    ' xmlrpc
    Case "api.version"
      hXMLRPC.SetReply(APIVersion)
    ' modes
    Case "mode.get_housemode"
      hXMLRPC.SetReply(HtmlEncode(Main.GetGlobalVar("House_Mode")))
    Case "mode.get_mutemode"
      hXMLRPC.SetReply(HtmlEncode(Main.GetGlobalVar("Mute")))
    Case "set.housemode"
      SetHouseMode(sData)
    Case "set.mutemode"
      SetMuteMode(sData)
    ' globalvar
    Case "globalvar.list"
      For Each cGV In Main.GlobalVar
        aArray.Add(HtmlEncode(Main.GlobalVar.Key), XmlRpc.xString)
      Next
      hXMLRPC.SetReply(aArray)
    Case "globalvar.get"
      GetGlobalVars()
    Case "globalvar.set"
      SetGlobalVar(sData)
    Case "globalvar.save"
      hXMLRPC.SetReply(True)
    Case "globalvar.del"
      DelGlobalVar(sData)
    ' misc methods
    Case "data.sunmoon"
      aArray.Add(HtmlEncode(Main.GetGlobalVar("Sunrise")), XmlRpc.xString)
      aArray.Add(HtmlEncode(Main.GetGlobalVar("Sunset")), XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    Case "data.newmessages"
      aArray.Add(Main.iNewMails, XmlRpc.xString)
      aArray.Add(Main.iNewCalls, XmlRpc.xString)
      aArray.Add(Main.iNewVoicemails, XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    Case "set.alarmpin"
      SetAlarmPin(sData)
    Case "set.alarmmode"
      SetAlarmMode(sData)
    ' device
    Case "device.list"
      ReturnDeviceList()
    Case "device.listswitch"
      ReturnDeviceListDimSwitch("switchable")
    Case "device.listdim"
      ReturnDeviceListDimSwitch("dimable")
    Case "device.setdevice"
      DeviceSetDevice(sData)
    Case "device.updatedevice"
      DeviceUpdateDevice(sData)
    Case "device.getstate"
      DeviceGetState(sData)
    Case "location.list"
      ReturnLocations()
    Case "module.restart"
      ModuleRestart(sData)
    ' send stuff
    Case "send.email"
      SendEmail(sData)
    Case "send.tweet"
      SendTweet(sData)
    Case "send.sms"
      SendSMS(sData)
    ' misc
    Case "play.sound"
      PlaySound(sData)
    Case "voicetext.speak"
      VoiceTextSpeak(sData)
    Case "xively.list"
      Try Plugin.GetPluginObject("Xively", 1).interface.CreateXivelyData()
      If Not Error Then
        hXMLRPC.SetReply(True)
      Else
        hXMLRPC.SetReply(False)
      Endif
    ' rrdtool
    Case "rrdtool.listgraphs"
      RRDToolListGraphs(sData)
    Case "rrdtool.updategraphs"
      RRDToolUpdateGraphs(sData)
    Case "rrdtool.updategraph"
      RRDToolUpdateGraph(sData)
    Case "rrdtool.createrrds"
      RRDToolCreateRRDs(sData)
    Case "serverstats.updategraphs"
      ServerStatsUpdateGraphs(sData)
    Case "display.ledmessage"
      DisplayLEDMessage(sData)
    ' audio / video
    Case "av.setcontrol"
      SetAVControl(sData)
    Case "av.getcontrol"
      GetAVControl(sData)
    ' zwave
    Case "zwave.removenodes", "zwave.createnode", "zwave.setids", "zwave.setvalue", "zwave.allqueried", "zwave.removenode"
      hXMLRPC.SetReply(True)
    ' razberry
    Case "razberry.updatesready"
      ' TODO add more instances
      Try Plugin.GetPluginObject("RazBerry", 1).interface.GetUpdates()
      hXMLRPC.SetReply(True)
    ' commander
    Case "cmdr.culsimulate"
      CULSimulate(sData)
    Case "cmdr.culqueuecommand"
      CULqueuecommand(sData)
    Case "cmdr.plcbustxcommand"
      PLCBUSTXcommand(sData)
    ' thermostat
    Case "thermostat.listscenario"
      ThermostatListScenarii()
    Case "thermostat.getscenario"
      ThermostatGetScenario()
    Case "thermostat.getscenarios"
      ThermostatGetScenarios()
    Case "thermostat.getheating"
      ThermostatGetHeating(sData)
    Case "thermostat.setscenario"
      ThermostatSetScenario(sData)
    Case "thermostat.derogateheating"
      ThermostatDerogateHeating(sData)
    Case "thermostat.getderogateheating"
      ThermostatGetDerogateHeating(sData)
    Case "thermostat.createheating"
      ThermostatCreateHeating(sData)
    Case "thermostat.setsecondary"
      ThermostatSetSecondary(sData)
    ' events
    Case "events.list"
      EventsGetList()
    Case "events.runactions"
      EventsRunActions(sData)
    Case "events.runaction"
      EventsRunAction(sData)
    Case "events.changeeventstate"
      EventsChangeState(sData)
    ' calendar
    Case "calendar.setplanning"
      hXMLRPC.SetReply(Calendar.SetPlanning(sData))
    Case "calendar.getplanning"
      hXMLRPC.SetReply(Calendar.GetPlanning())
    ' squeezebox
    Case "squeezebox.setvolumeplayer"
      SqueezeboxSetVolumePlayer(sData)
    Case "squeezebox.getvolumeplayer"
      SqueezeboxGetVolumePlayer(sData)
    Case "squeezebox.stopplayer"
      SqueezeboxStopPlayer(sData)
    Case "squeezebox.playplayer"
      SqueezeboxPlayPlayer(sData)
    Case "squeezebox.nextnumberplayer"
      SqueezeboxNextNumberPlayer(sData)
    Case "squeezebox.prevnumberplayer"
      SqueezeboxPrevNumberPlayer(sData)
    Case "squeezebox.getcurrentnumberplayer"
      SqueezeboxCurrentTitlePlayer(sData)
    Case "squeezebox.getmodeplayer"
      SqueezeboxModePlayer(sData)
    Case "squeezebox.getplayerid"
      SqueezeboxPlayerId(sData)
    Case "squeezebox.getplayername"
      SqueezeboxPlayerName(sData)
    Case "squeezebox.getisplayer"
      SqueezeboxIsPlayer(sData)
    Case "squeezebox.getalbums"
      SqueezeboxGetAlbums()
    Case "squeezebox.clearplaylistplayer"
      SqueezeboxClearPlaylistPlayer(sData)
    Case "squeezebox.addalbumtoplaylistplayer"
      SqueezeboxAddAlbumToPlaylistPlayer(sData)
    Case "squeezebox.getcurrentartistplayer"
      SqueezeboxGetCurrentArtistPlayer(sData)
    Case "squeezebox.getplayerisconnectedtoserver"
      SqueezeboxGetIsPlayerConnectedToServer(sData)
    Default
      Return
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ReturnDeviceListDimSwitch(sType As String)

  Dim rResult As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim sStatusIcon As String
  Dim iCnt As Integer
  Dim sValue As String

  rResult = Devices.FindAllEnabledDevices()

  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: table 'devices' not found!")
    Return
  Endif

  For iCnt = 0 To rResult.Max
    If Not rResult!hide Then
      If (sType = "switchable" And rResult!switchable) Or (sType = "dimable" And rResult!dimable) Then
        Try sValue = Devices.GetCurrentValueForDevice(rResult!id, 1)
        If Not sValue Then sValue = " "
        ' status icon
        sStatusIcon = Devices.GetStatusIcon(sValue, rResult!onicon, rResult!officon, rResult!dimicon)
        sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & sValue
        sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
      Endif
    Endif
    rResult.MoveNext
  Next
  hXMLRPC.SetReply(sList)

End

Private Sub ModuleRestart(sParams As Variant[])

  If sParams.Count = 1 Then
    If Plugin.cPluginList.Exist(LCase(sParams[0]) & "#1") Then
      Try Plugin.Restart(sParams[0], 1)
      If Error Then
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif      
    Else
      Main.GetSettings()
      Try Object.Call(Main, "Restart_" & sParams[0])
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when restarting module!")
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Endif
    
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SendEmail(sParams As Variant[])

  If sParams.Count = 3 Then
    Try Mail.SendMail(sParams[1], sParams[2], sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when sending an e-mail!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SendTweet(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("Twitter", 1).Interface.PostTweet(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when sending an Tweet!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SendSMS(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Plugin.GetPluginObject("SMS", 1).Interface.SendSMS(sParams[1], sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when sending an SMS!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetHouseMode(sParams As Variant[])

  If sParams.Count = 1 Then
    If InStr("normal away vacation work", sParams[0]) Then
      Try Main.ChangeHouseMode(sParams[0])
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting House mode!")
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetAlarmMode(sParams As Variant[])

  If sParams.Count = 1 Then
    If InStr("0311 0301", sParams[0]) Then
      Try Plugin.GetPluginObject("DSC", 1).Interface.TX(sParams[0])
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting Alarm mode!")
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetAlarmPin(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("DSC", 1).Interface.TX("0401" & sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting Alarm pin!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetMuteMode(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.ChangeMuteMode(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting Mute mode!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub DeviceSetDevice(sParams As Variant[])
  Dim iDeviceId As Integer
  
  If sParams.Count = 2 Then
    Try iDeviceId = CInt(sParams[0])
    If Not Error And If iDeviceId And If Devices.SetDevice(iDeviceId, sParams[1]) Then
      hXMLRPC.SetReply(True)
      Return
    Endif
  Endif

  If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting device value!")
  hXMLRPC.SetReply(False)

End

Private Sub DeviceUpdateDevice(sParams As Variant[])

  Dim iDeviceId, iValuenum As Integer
  Dim vValue As Variant

  If sParams.Count = 3 Then
    Try iDeviceId = CInt(sParams[0])
    Try iValuenum = CInt(sParams[1])
    vValue = sParams[2]
    If Not Error And If iDeviceId And If Devices.ValueUpdate(iDeviceId, iValuenum, vValue) Then
      hXMLRPC.SetReply(True)
      Return
    Endif
  Endif

  If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when updating device value!")
  hXMLRPC.SetReply(False)

End

Private Sub DeviceGetState(sParams As Variant[])
  Dim iDeviceId As Integer
  Dim sValue As String

  If sParams.Count = 1 Then
    Try iDeviceId = CInt(sParams[0])
    Try sValue = Devices.GetCurrentValueForDevice(iDeviceId, 1)
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when getting device state!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(sValue)
    Endif
  Else If sParams.Count = 2 Then
    Try iDeviceId = CInt(sParams[0])
    Try sValue = Devices.GetValueForDevice(iDeviceId, sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when getting device state!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(sValue)
    Endif
  Else  
     hXMLRPC.SetReply(False)
   Endif

End

Private Sub ReturnDeviceList()

  Dim rResult, rResult3 As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sStatusIcon, sLastseen, sValue, sValue2, sValue3, sValue4, sLocation As String
  Dim sLabel, sLabel2, sLabel3, sLabel4 As String

  rResult = Devices.FindAllEnabledDevices()

  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: table 'devices' not found!")
    hXMLRPC.SetReply(sList)
    Return
  Endif

  For iCnt = 0 To rResult.Max
    If Not rResult!hide Then
      ' location
      Try rResult3 = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResult!location_id)
      If Error Then
        sLocation = ""
      Else If rResult3.Available Then
        sLocation = rResult3!name
      Endif
      ' last seen
      Try sLastseen = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      If Error Then
        sLastSeen = "Never"
      Endif

      Try sValue = Devices.GetCurrentValueForDevice(rResult!id, 1)
      Try sValue2 = Devices.GetCurrentValueForDevice(rResult!id, 2)
      Try sValue3 = Devices.GetCurrentValueForDevice(rResult!id, 3)
      Try sValue4 = Devices.GetCurrentValueForDevice(rResult!id, 4)

      Try sLabel = Devices.GetCurrentUnitsForDevice(rResult!id, 1)
      Try sLabel2 = Devices.GetCurrentUnitsForDevice(rResult!id, 2)
      Try sLabel3 = Devices.GetCurrentUnitsForDevice(rResult!id, 3)
      Try sLabel4 = Devices.GetCurrentUnitsForDevice(rResult!id, 4)

      ' status icon
      sStatusIcon = Devices.GetStatusIcon(sValue, rResult!onicon, rResult!officon, rResult!dimicon)
      sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & sLocation & ";;" & HtmlEncode(sValue, True) & ";;" & sLabel & ";;" & HtmlEncode(sValue2, True) & ";;" & sLabel2 & ";;" & HtmlEncode(sValue3, True) & ";;" & sLabel3 & ";;" & HtmlEncode(sValue4, True) & ";;" & sLabel4 & ";;" & sLastSeen & ";;" & rResult!dimable & ";;" & rResult!switchable & ";;" & rResult!batterystatus
      sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
    Endif
    rResult.MoveNext
  Next
  hXMLRPC.SetReply(sList)

End

Private Sub ReturnLocations()

  Dim rResultLocation As Result
  Dim sList As New RpcStruct
  Dim sString As New Collection
  Dim iCnt As Integer

  rResultLocation = Main.hDB.Exec("SELECT * FROM locations ")
  If Not rResultLocation.Available Then
    Main.WriteLog(LogLabel & "ERROR: table 'locations' not found!")
    Return
  Endif

  For iCnt = 0 To rResultLocation.Max
    sString[iCnt] = rResultLocation!id & ";;" & rResultLocation!name
    sList.Add(rResultLocation!name, sString[iCnt], XmlRpc.xString)
    rResultLocation.MoveNext
  Next
  hXMLRPC.SetReply(sList)

End

Private Sub PlaySound(sParams As Variant[])

  If sParams.Count > 1 And If sParams.Count < 3 Then
    Try Sounds.PlaySnd(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when playing sound!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub VoiceTextSpeak(sParams As Variant[])

  If sParams.Count > 1 And If sParams.Count < 3 Then
    Try VoiceText.Speak(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when speaking voicetext!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ServerStatsUpdateGraphs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try ServerStats.CreateGraphs(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when updating serverstats graphs!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub RRDToolListGraphs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try RRDTool.Graphs(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when listing rrdtool graphs!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub RRDToolUpdateGraphs(sParams As Variant[])

  If sParams.Count = 2 Then
    Try RRDTool.CreateGraphs(sParams[0], sParams[1])
    Try RRDTool.CreateExtGraphs(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when updating rrdtool graphs!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

' update graphs for device id with param1, and time param1 (1h, 2h ...)
Private Sub RRDToolUpdateGraph(sParams As Variant[])

  If sParams.Count = 2 Then
    Try RRDTool.CreateGraph(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when updating rrdtool graph!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub RRDToolCreateRRDs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try RRDTool.CreateRRDs(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when creating rrdtool database!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub DisplayLEDMessage(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Plugin.GetPluginObject("LEDMatrix", 1).Interface.DisplayMessage(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & ERROR.Text & "' at '" & Error.Where & "' when displaying a message!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetAVControl(sParams As Variant[])

  If sParams.Count = 4 Then
    Try AVControl.Set(sParams[0], sParams[1], sParams[2], sParams[3])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting audio/video control!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub GetAVControl(sParams As Variant[])

  If sParams.Count = 3 Then
    Try AVControl.Get(sParams[0], sParams[1], sParams[2])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when getting audio/video control!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub GetGlobalVars()

  Dim vValue As Variant
  Dim aArray As New RpcArray
  Dim cGV As CGlobalVarEntry

  For Each cGV In Main.GlobalVar
    aArray.Add(HtmlEncode(Main.GlobalVar.Key), XmlRpc.xString)
    vValue = cGV.Value

    ' convert booleans to strings
    If TypeOf(vValue) = gb.Boolean Then vValue = IIf(vValue = True, "True", "False")

    ' Set the value to <empty>, "" isn't supported by XML-RPC
    If vValue = Null Then vValue = "<EMPTY>"

    aArray.Add(HtmlEncode(vValue), XmlRpc.xString)
  Next
  hXMLRPC.SetReply(aArray)

End

Private Sub SetGlobalVar(sParams As Variant[])

  Dim sVar As String

  If sParams.Count = 2 Then

    sVar = HtmlDecode(sParams[0])

    ' Check if somebody wants to set a ReadOnly variable
    If Main.GlobalVar.Exist(sVar) Then
      If Main.GlobalVar[sVar].ReadOnly Then
        Main.WriteDebugLog(LogLabel & "ERROR: Trying to set a read-only variable '" & sVar & "'!")
        hXMLRPC.SetReply(False)
        Return
      Endif
    Endif

    Try Main.SetGlobalVar(sVar, PrepareValue(HtmlDecode(sParams[1])), False)
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' when setting globalvar '" & sVar & "'!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub EventsRunActions(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Events.RunActions(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running event actions!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub EventsRunAction(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Events.RunAction(sParams[0], 0, 0)
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running action!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub CULSimulate(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("CUL", 1).Interface.Simulate(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when injecting CUL packet!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub CULqueuecommand(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("CUL", 1).Interface.QueueCommand(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when queueing CUL command!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub PLCBUSTXcommand(sParams As Variant[])

  If sParams.Count = 4 Then
    Try Plugin.GetPluginObject("PLCBus", 1).Interface.PLCBUSTXCommand(sParams[0], sParams[1], sParams[2], sParams[3])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when queueing PLCBUS command!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ThermostatListScenarii()

  Dim rResultScenarii As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer

  Try rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii")
  If rResultScenarii Then
    For Each rResultScenarii
    iCnt = iCnt + 1
      sString[iCnt] = rResultScenarii!id & ";;" & rResultScenarii!name & ";;" & rResultScenarii!description
      sList.Add(rResultScenarii!name, sString[iCnt], XmlRpc.xString) 
    Next
    hXMLRPC.SetReply(sList)
  Endif

End

' return the heatings from the scenario with param = id scenario
Private Sub ThermostatGetHeating(sParams As Variant[])

  Dim rResultHeatings As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sCurrTemp, sReqTemp As String
  Dim fTemp As Float

  ' param 0 = scenario id
  rResultHeatings = Main.hDB.Exec("SELECT * FROM thermostat_schedule, thermostat_heating where heating_id=id and scenario_id=&1", Val(sParams[0]))
  If rResultHeatings.Count > 0 Then
    iCnt = 0
    For Each rResultHeatings
      Inc iCnt
      sCurrTemp = Devices.GetCurrentValueForDevice(rResultHeatings!sensor, 1)
      fTemp = Thermostat.GetDerogateHeating(rResultHeatings!id)
      If fTemp = Thermostat.NO_TEMP Then fTemp = Thermostat.GetRequestedTempForHeating(rResultHeatings!scenario_id, rResultHeatings!id)
      sReqTemp = fTemp
      sString[iCnt] = rResultHeatings!id & ";;" & rResultHeatings!name & ";;" & sCurrTemp & ";;" & sReqTemp
      sList.Add(rResultHeatings!name, sString[iCnt], XmlRpc.xString)
    Next
  Endif
  hXMLRPC.SetReply(sList)

End

Private Sub ThermostatGetScenario()

  Dim rResultScenarii, rResultHeatings As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sCurrTemp, sReqTemp As String
  Dim fTemp As Float

  Try rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii where name=&1", Main.GetGlobalVar("Thermostat_Mode"))
  If rResultScenarii.Count > 0 Then
    iCnt = 1
    sString[iCnt] = rResultScenarii!id & ";;" & rResultScenarii!name & ";;" & rResultScenarii!description
    sList.Add(rResultScenarii!name, sString[iCnt], XmlRpc.xString)

    rResultHeatings = Main.hDB.Exec("SELECT * FROM thermostat_schedule, thermostat_heating where heating_id=id and scenario_id=&1 ORDER BY name", rResultScenarii!id)
    For Each rResultHeatings
      Inc iCnt
      sCurrTemp = Devices.GetCurrentValueForDevice(rResultHeatings!sensor, 1)
      fTemp = Thermostat.GetDerogateHeating(rResultHeatings!id)
      If fTemp = Thermostat.NO_TEMP Then fTemp = Thermostat.GetRequestedTempForHeating(rResultHeatings!scenario_id, rResultHeatings!id)
      sReqTemp = fTemp
      sString[iCnt] = rResultHeatings!id & ";;" & rResultHeatings!name & ";;" & sCurrTemp & ";;" & sReqTemp
      sList.Add(rResultHeatings!name, sString[iCnt], XmlRpc.xString)
    Next
  Endif
  hXMLRPC.SetReply(sList)

End

' return all the scenarios and the heatings
Private Sub ThermostatGetScenarios()

  Dim rResultScenarii, rResultHeatings As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sCurrTemp, sReqTemp As String
  Dim fTemp As Float

  rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii")
  If rResultScenarii.Count > 0 Then
  iCnt = 0
  For Each rResultScenarii
  iCnt = iCnt + 1
  sString[iCnt] = rResultScenarii!id & ";;" & rResultScenarii!name & ";;" & rResultScenarii!description
  sList.Add("", sString[iCnt], XmlRpc.xString)

  rResultHeatings = Main.hDB.Exec("SELECT * FROM thermostat_schedule, thermostat_heating where heating_id=id and scenario_id=&1", rResultScenarii!id)
    For Each rResultHeatings
      Inc iCnt
      sCurrTemp = Devices.GetCurrentValueForDevice(rResultHeatings!sensor, 1)
      fTemp = Thermostat.GetDerogateHeating(rResultHeatings!id)
      If fTemp = Thermostat.NO_TEMP Then fTemp = Thermostat.GetRequestedTempForHeating(rResultHeatings!scenario_id, rResultHeatings!id)
      sReqTemp = fTemp
      sString[iCnt] = rResultHeatings!id & ";;" & rResultHeatings!name & ";;" & sCurrTemp & ";;" & sReqTemp
      sList.Add("", sString[iCnt], XmlRpc.xString)
    Next
  Next
  Endif
  hXMLRPC.SetReply(sList)

End

Private Sub ThermostatSetScenario(sParams As Variant[])

  ' param0 must be the scenario name
  If sParams.Count = 1 Then
    Try Main.SetGlobalVar("Thermostat_Mode", sParams[0])
    Thermostat.DeleteAllDerogateHeating()
    hXMLRPC.SetReply(True)
  Else
    hXMLRPC.SetReply(False)
  Endif

End

' param 0 : scenario id
' param 1 : heating id
' param 2 : '+' or '-'
Private Sub ThermostatDerogateHeating(sParams As Variant[])

  Dim fNewVal, fVal, fDerVal As Float
  Dim scenarioId, heatingId As Integer

  If sParams.Count = 3 Then
    scenarioId = CInt(sParams[0])
    heatingId = CInt(sParams[1])
    fVal = Thermostat.GetRequestedTempForHeating(scenarioId, heatingId)
    fDerVal = Thermostat.GetDerogateHeating(heatingId)
    If fDerVal <> Thermostat.NO_TEMP Then
      fval = fderval
    Endif
    If sParams[2] = "+" Then
      If fDerVal = Thermostat.NO_TEMP Then
        fNewVal = Thermostat.GetNextRequestedTempForHeating(scenarioId, heatingId)
        If fNewVal <> Thermostat.NO_TEMP Then
          If fNewVal < fval Then
            fNewVal = fval + 0.5
          Endif
        Else
          If fVal = Thermostat.NO_TEMP Then
            Try fVal = Devices.GetCurrentValueForDevice(Thermostat.GetHeatSensor(heatingId), 1)
          Endif

          fNewVal = fval + 0.5
        Endif
      Else
        fNewVal = fval + 0.5
      Endif
    Else
      If fDerVal = Thermostat.NO_TEMP Then
        fNewVal = Thermostat.GetNextRequestedTempForHeating(scenarioId, heatingId)
        If fNewVal <> Thermostat.NO_TEMP Then
          If fNewVal > fval Then
            fNewVal = fval - 0.5
          Endif
        Else
          If fVal = Thermostat.NO_TEMP Then
            Try fVal = Devices.GetCurrentValueForDevice(Thermostat.GetHeatSensor(heatingId), 1)
          Endif

          fNewVal = fval - 0.5
        Endif
      Else
        fNewVal = fval - 0.5
      Endif
    Endif

    Thermostat.SetDerogateHeating(scenarioId, heatingId, fNewVal)
    hXMLRPC.SetReply(True)
  Else
    hXMLRPC.SetReply(False)
  Endif

End

' param 0 : heating id
Private Sub ThermostatGetDerogateHeating(sParams As Variant[])

  Dim fDerVal As Float
  Dim heatingId As Integer

  heatingId = CInt(sParams[0])
  fDerVal = Thermostat.GetDerogateHeating(heatingId)

  hXMLRPC.SetReply(fDerVal)

End

Private Sub ThermostatSetSecondary(sParams As Variant[])

  Dim iHeat As Integer
  Dim bIsSeconday As Boolean

  iHeat = CInt(sParams[0])
  bIsSeconday = CBool(sParams[1])

  hXMLRPC.SetReply(Thermostat.SetIsSecondary(iHeat, bIsSeconday))
End


Private Sub SqueezeboxSetVolumePlayer(sParams As Variant[])

  If sParams.Count = 2 Then
    If Val(sParams[1]) >= 0 Or If Val(sParams[1]) <= 100 Then
      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.SetVolumePlayer(sParams[0], sParams[1])
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when changing volume")
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Else 
      hXMLRPC.SetReply(False)
    Endif 
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxGetVolumePlayer(sParams As Variant[])

  Dim sVolume As String = "0"
  If sParams.Count = 1 Then
    Try sVolume = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetVolumePlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when prev number player")
      hXMLRPC.SetReply(sVolume)
    Else
      hXMLRPC.SetReply(sVolume)
    Endif
  Else
    hXMLRPC.SetReply(sVolume)
  Endif

End

Private Sub SqueezeboxStopPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.StopPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running stop player")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxPlayPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running play player")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxNextNumberPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.NextNumberPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running next number player")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxPrevNumberPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.PrevNumberPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running prev number player")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxCurrentTitlePlayer(sParams As Variant[])

  Dim sCurrentTitle As String = "No title"
  If sParams.Count = 1 Then
    Try sCurrentTitle = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentTitle(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running current title player")
      hXMLRPC.SetReply(sCurrentTitle)
    Else
      hXMLRPC.SetReply(sCurrentTitle)
    Endif
  Else
    hXMLRPC.SetReply(sCurrentTitle)
  Endif

End

Private Sub SqueezeboxModePlayer(sParams As Variant[])

  Dim sStatus As String = "Unknown status"
  If sParams.Count = 1 Then
    Try sStatus = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetModePlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running mode player")
      hXMLRPC.SetReply(sStatus)
    Else
      hXMLRPC.SetReply(sStatus)
    Endif
  Else
    hXMLRPC.SetReply(sStatus)
  Endif

End

Private Sub SqueezeboxPlayerId(sParams As Variant[])

  Dim sId As String = "Unknown id"
  If sParams.Count = 1 Then
    Try sId = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetPlayerId(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player id")
      hXMLRPC.SetReply(sId)
    Else
      hXMLRPC.SetReply(sId)
    Endif
  Else
    hXMLRPC.SetReply(sId)
  Endif

End

Private Sub SqueezeboxPlayerName(sParams As Variant[])

  Dim sName As String = "Unknown name"
  If sParams.Count = 1 Then
    Try sName = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetPlayerName(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player name")
      hXMLRPC.SetReply(sName)
    Else
      hXMLRPC.SetReply(sName)
    Endif
  Else
    hXMLRPC.SetReply(sName)
  Endif

End

Private Sub SqueezeboxIsPlayer(sParams As Variant[])

  Dim sStatus As String = "Unknown status"
  If sParams.Count = 1 Then
    Try sStatus = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetIsPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running is player command")
      hXMLRPC.SetReply(sStatus)
    Else
      hXMLRPC.SetReply(sStatus)
    Endif
  Else
    hXMLRPC.SetReply(sStatus)
  Endif

End

Public Sub SqueezeboxGetAlbums()

  Dim aAlbums As New RpcArray
  Dim asAlbums As New String[]
  Dim s As String
  Try asAlbums = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetAlbums()
  If Error Then
    Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get albums command")
    'hXMLRPC.SetReply(aAlbums)
  Else
    For Each s In asAlbums
      aAlbums.Add(s, XmlRpc.xString)
    Next
    hXMLRPC.SetReply(aAlbums)
  Endif

End

Public Sub SqueezeboxClearPlaylistPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.ClearPlaylistPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running clear playlist player")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Public Sub SqueezeboxAddAlbumToPlaylistPlayer(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.AddAlbumToPlaylistPlayer(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running add album to playlist player")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxGetCurrentArtistPlayer(sParams As Variant[])

  Dim sName As String = "Unknown artist"

  If sParams.Count = 1 Then
    Try sName = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentArtist(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player name")
      hXMLRPC.SetReply(sName)
    Else
      hXMLRPC.SetReply(sName)
    Endif
  Else
    hXMLRPC.SetReply(sName)
  Endif

End

Private Sub SqueezeboxGetIsPlayerConnectedToServer(sParams As Variant[])

  Dim bConnected As Boolean

  If sParams.Count = 1 Then
    Try bConnected = Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayerConnectedToServer(sParams[0])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player name")
      hXMLRPC.SetReply(bConnected)
    Else
      hXMLRPC.SetReply(bConnected)
    Endif
  Else
    hXMLRPC.SetReply(bConnected)
  Endif

End


Private Sub ThermostatCreateHeating(sParams As Variant[])

  Dim rResultUpdate, rResult As Result
  Dim ok As Float
  Dim sSql As String
  Dim heatingId As Integer

  Try rResult = Main.hDB.Exec("SELECT * FROM thermostat_heating ORDER BY name")

  For Each rResult
    If sParams[0] = rResult!name Then
      Inc ok
      heatingId = rResult!id
    Endif
  Next

  If ok = 0 Then
    sSql = "INSERT INTO thermostat_heating SET name = &1, sensor = &2, device= &3, deviceInverted=&4, deviceLatency=&5, regulator=&6, regulatorInverted=&7, description=&8, deviceOffsetTop=&9, regulatorOffsetTop=&{10}, deviceOffsetBottom=&{11}, regulatorOffsetBottom=&{12}"
    If sParams.Count = 12 Then
      Try rResultUpdate = Main.hDB.Exec(sSql, sParams[0], sParams[1], sParams[2], sParams[3], sParams[4], sParams[5], sParams[6], sParams[7], sParams[8], sParams[9], sParams[10], sParams[11])
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting device value!")
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Else
      hXMLRPC.SetReply(False)
    Endif
  Else
    sSql = "UPDATE thermostat_heating SET name = &1, sensor = &2, device= &3, deviceInverted=&4, deviceLatency=&5, regulator=&6, regulatorInverted=&7, description=&8, deviceOffsetTop=&9, regulatorOffsetTop=&{10}, deviceOffsetBottom=&{11}, regulatorOffsetBottom=&{12} WHERE id = &{13}"
    If sParams.Count = 12 Then
      Try rResultUpdate = Main.hDB.Exec(sSql, sParams[0], sParams[1], sParams[2], sParams[3], sParams[4], sParams[5], sParams[6], sParams[7], sParams[8], sParams[9], sParams[10], sParams[11], heatingId)
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when setting device value!")
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Else
      hXMLRPC.SetReply(False)
    Endif
  Endif

End

' list all events
Private Sub EventsGetList()

  Dim rResult As Result
  Dim iCnt As Integer
  Dim sList As New RpcStruct
  Dim sString As New Collection
  Dim sEnabled, sLastrun As String

  rResult = Main.hDB.Exec("SELECT * FROM events")
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: table 'events' not found!")
    Return
  Endif

  For iCnt = 0 To rResult.Max
      If rResult!enabled = "T" Then
        sEnabled = "True"
      Else
        sEnabled = "False"
      Endif
      Try sLastrun = Replace$(Str$(Format(rResult!lastrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      If Error Then
        sLastrun = "Never"
      Endif
      sString[iCnt] = rResult!id & ";;" & sEnabled & ";;" & rResult!name & ";;" & rResult!log & ";;" & rResult!firstrun & ";;" & sLastrun & ";;" & rResult!comments & ";;" & rResult!trigger_id & ";;" & rResult!condition1_id & ";;" & rResult!operand & ";;" & rResult!condition2_id & ";;" & rResult!rerunenabled & ";;" & rResult!rerunvalue & ";;" & rResult!reruntype & ";;" & rResult!category_id
      sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
      rResult.MoveNext
  Next
  hXMLRPC.SetReply(sList)

End

Private Sub EventsChangeState(sParams As Variant[])

  If sParams.Count = 2 Then
    If sParams[1] == "F" Then sParams[1] = ""

    Try Events.ChangeEventState(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running change event state!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub DelGlobalVar(sParams As Variant[])

  Dim sVar As String

  If sParams.Count = 1 Then

    sVar = HtmlDecode(sParams[0])

    ' Check if somebody wants to set a ReadOnly variable
    If Main.GlobalVar.Exist(sVar) Then
      If Main.GlobalVar[sVar].SystemVar Then
        Main.WriteDebugLog(LogLabel & "ERROR: Trying to set a system variable '" & sVar & "'!")
        hXMLRPC.SetReply(False)
        Return
      Endif
    Endif

    Try Main.DelGlobalVar(sVar)
    If Error Then
      Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' when deleting globalvar '" & sVar & "'!")
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub PrepareValue(sText As String) As Variant

  If sText == "true" Then
    Return True
  Else If sText == "false" Then
    Return False
  Else
    Return sText
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Encode String as Html, normally to be used with XML-RPC
' We support XML 1.0 Fith Edition and XML 1.1
' http://en.wikipedia.org/wiki/XML#Characters_and_escaping
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HtmlEncode(sStr As String, Optional sOnlyFirstLine As Boolean = False) As String

  ' In certain scenarios we only want the first line in the Html string and remove the rest
  If sOnlyFirstLine Then
    ' Remove &H0A - line feed
    If String.InStr(sStr, Chr(10)) > 0 Then
      sStr = String.Left(sStr, String.InStr(sStr, Chr(10)) - 1)
    Endif

    ' Remove &H0D - carriage return
    If String.InStr(sStr, Chr(13)) > 0 Then
      sStr = String.Left(sStr, String.InStr(sStr, Chr(13)) - 1)
    Endif
  Endif

  sStr = Replace(sStr, "&", "&amp;")
  sStr = Replace(sStr, "<", "&lt;")
  sStr = Replace(sStr, ">", "&gt;")
  sStr = Replace(sStr, "'", "&apos;")
  sStr = Replace(sStr, "\"", "&quot;")

  Return sStr

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Decode String as Html, normally to be used with XML-RPC
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HtmlDecode(sStr As String) As String

  sStr = Replace(sStr, "&amp;", "&")
  sStr = Replace(sStr, "&lt;", "<")
  sStr = Replace(sStr, "&gt;", ">")
  sStr = Replace(sStr, "&apos;", "'")
  sStr = Replace(sStr, "&quot;", "\"")

  Return sStr

End

