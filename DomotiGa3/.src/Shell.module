' Gambas module file

' Description:
' Execute.module
' Support for getting shell script output in device values and calling scripts.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public tShell As Timer
Private hShell As Process
Private cOutput As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  If Main.iShellPollTime = 0 Then Return ' disabled

  ' start poll timer for Shell
  tShell = New Timer As "tShell"
  tShell.Delay = Main.iShellPollTime * 1000 ' multiply for seconds
  tShell.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tShell_Timer()

  CheckShell()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices of type Shell and run command to get value(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckShell()

  Dim rResult As Result

  ' get all devices with this devicetype
  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Shell Interface"))
  If rResult.Available Then
    If rResult.Count >= 1 Then
      For Each rResult
        If Main.bShellDebug Then Main.WriteDebugLog(("[Shell] Getting value(s) for device '") & rResult!name & ("' with command '") & rResult!address & "'.")
        RunShellCommand(rResult!id, rResult!address)
      Next
    Else
      Main.WriteLog(("Shell: No devices of type shell script found in device table!"))
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run command to get value(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunShellCommand(iId As Integer, sAddress As String, Optional sArgument As String)

  If Len(sArgument) Then
    hShell = Exec [sAddress, sArgument] For Read As "Shell" ' script.sh "on","off" etc.
  Else
    hShell = Exec [sAddress] For Read As "Shell"
  Endif
  hShell.Tag = iId
  cOutput.Add("", iId)

Catch
   If Main.bShellDebug Then Main.WriteDebugLog(("[Shell] Error when trying to run '") & sAddress & "' - " & Error.Text & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read command output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Shell_Read()

  Dim sBuffer As String
  Dim iId As Integer

  sBuffer = Read #Last, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and returned value(s) and store them
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Shell_Kill()

  Dim iDeviceId, iRc, iCnt As Integer
  Dim sOutput, sLine, sValue, sValue2, sValue3, sValue4 As String

  iDeviceId = Last.Tag
  iRc = Last.Value

  If iDeviceId Then
    ' save shell output
    sOutput = cOutput[iDeviceId]
    cOutput.Remove(iDeviceId)

    Select iRC
      Case 0
        For Each sLine In Split(sOutput, "\n")
          Select iCnt
            Case 0
              sValue = sLine
            Case 1
              sValue2 = sLine
            Case 2
              sValue3 = sLine
            Case 3
              sValue4 = sLine
          End Select
          Inc iCnt
        Next
        ' debug output
        If Main.bShellDebug Then
          Main.WriteDebugLog("[Shell] < '" & sOutput & "'")
          Main.WriteDebugLog(("[Shell] Device with id '") & iDeviceId & ("' returned value(s)") & IIf(sValue, " '" & sValue & "'", "") & IIf(sValue2, " '" & sValue2 & "'", "") & IIf(sValue3, " '" & sValue3 & "'", "") & IIf(sValue4, " '" & sValue4 & "'", "") & ".")
        Endif
        ' find and update device
        Devices.CheckFirstSeen(iDeviceId)
        Devices.ValueUpdate(iDeviceId, sValue, sValue2, sValue3, sValue4)
      Case 127
        Main.WriteDebugLog(("[Shell] Command of device with id '") & iDeviceId & ("' not found!"))
      Case Else
        Main.WriteDebugLog(("[Shell] Device with id '") & iDeviceId & ("' returned unknown shell error '" & iRc & "'"))
      End Select
  Else
    Main.WriteDebugLog(("[Shell] Returned invalid device id!"))
  Endif

Catch
  Main.WriteDebugLog(("ERROR: Parsing Shell Result: ") & Error.Text & " at " & Error.Where)

End
