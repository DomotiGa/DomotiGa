' Gambas class file

' Description:
' FEditGraphs.class
' Support for creating and editing custom rrdtool graphs.

' Development Status:
' Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Minus in 2010.

' Read file called COPYING for license details.

PUBLIC rGraph AS Result

PUBLIC SUB Form_Open()

  ME.Move(FMain.X + 50, FMain.Y + 70)
  Reset_graph()
  Graph_list()
  PopulateGroups()

END

PUBLIC SUB ComboBoxGraph_name_Change()

  IF Len(ComboBoxGraph_name.Text) > 1 THEN
    TRY rGraph = Main.hDB.Exec("SELECT name FROM graphs WHERE name = &1", ComboBoxGraph_name.Text)
    IF rGraph.Count <> 0 THEN
      Load_graph(ComboBoxGraph_name.Text)
      FrameGraph_data.Enabled = TRUE
      FramePreview.Enabled = TRUE
      Load_graph_data(ComboBoxGraph_name.Tag, ComboBoxGraphList.Text)
      AssignGroups()
    ENDIF
  ELSE
    Populate_device_list()
    Reset_graph()
    Reset_graph_data()
  ENDIF

END

PUBLIC SUB ComboBoxGraph_device_Change() ' select device -> update ds

  DIM rDevice AS Result

  ComboBoxGraph_ds.Clear
  TRY rDevice = Main.hDB.Exec("SELECT name, valuerrddsname, value2rrddsname, value3rrddsname, value4rrddsname FROM devices WHERE name = &1", ComboBoxGraph_device.Text)
  IF rDevice THEN
    FOR EACH rDevice
      IF rDevice!valuerrddsname THEN
        ComboBoxGraph_ds.Add(rDevice!valuerrddsname)
      ENDIF
      IF rDevice!value2rrddsname THEN
        ComboBoxGraph_ds.Add(rDevice!value2rrddsname)
      ENDIF
      IF rDevice!value3rrddsname THEN
        ComboBoxGraph_ds.Add(rDevice!value3rrddsname)
      ENDIF
      IF rDevice!value4rrddsname THEN
        ComboBoxGraph_ds.Add(rDevice!value4rrddsname)
      ENDIF
    NEXT
  ENDIF

END

PUBLIC SUB Reset_graph()

  ComboBoxGraph_name.Tag = ""
  TGraphComment.Text = ""

  ' checkbox min/max/last/avg
  CheckBoxGraph_min.Value = 0
  CheckBoxGraph_max.Value = 0
  CheckBoxGraph_avg.Value = 0
  CheckBoxGraph_last.Value = 0

  ' title
  Graph_title.Text = ""
  Graph_unit.Text = ""

  ' grid
  ComboBoxGraph_gridtype.Text = "Default"

  ' general color
  ColorButtonGraph_background.Value = 16777215
  ColorButtonGraph_canvas.Value = 16777215
  ColorButtonGraph_shadea.Value = 16777215
  ColorButtonGraph_shadeb.Value = 16777215
  ColorButtonGraph_font.Value = 0
  ColorButtonGraph_grid.Value = 0
  ColorButtonGraph_majorgrid.Value = 0
  ColorButtonGraph_frame.Value = 0
  ColorButtonGraph_axis.Value = 0
  ColorButtonGraph_arrow.Value = 0

  ' size
  ComboBoxGraph_width.Text = "400"
  ComboBoxGraph_height.Text = "100"

  CheckBoxLogarithmicscale.Value = 0
  ComboBoxGraphList.Text = 1

END

PUBLIC SUB Reset_graph_data()

  TextBoxGraph_name.Clear
  ColorButtonGraph.Value = 65280

  ComboBoxGraph_device.Clear
  ComboBoxGraph_ds.Clear

  CheckBoxGraph_graphvalue_min.Value = 0
  CheckBoxGraph_graphvalue_max.Value = 0
  CheckBoxGraph_graphvalue_avg.Value = 0
  ColorButtonGraph_graphvalue_min_color.Value = 0
  ColorButtonGraph_graphvalue_max_color.Value = 0
  ColorButtonGraph_graphvalue_avg_color.Value = 0

  CheckBoxGraph_min.Value = 0
  CheckBoxGraph_max.Value = 0
  CheckBoxGraph_avg.Value = 0
  CheckBoxGraph_last.Value = 0

  ComboBoxGraphList.Tag = ""

  CheckBoxShift.Value = 0
  SpinBoxShift.Value = 0
  CheckBoxShift.Value = 0
  SpinBoxTrend.Value = 0

  CheckBoxOperation.Value = 0
  SpinBoxOperation.Value = 0
  ComboBoxOperation.Text = "+"

  FrameGraph_data.Enabled = FALSE
  FramePreview.Enabled = FALSE
  Populate_device_list()

END

PUBLIC SUB Graph_list()

  ComboBoxGraph_name.Clear
  ComboBoxGraph_name.Add("")
  TRY rGraph = Main.hDB.Exec("SELECT name, groups FROM graphs")
  IF rGraph THEN
    FOR EACH rGraph
      ComboBoxGraph_name.Add(rGraph!name)
    NEXT
  ENDIF

END

PUBLIC SUB Grid_type(grid_type_txt AS String) AS String

  DIM grid_type_rrdCmd AS String

  SELECT CASE grid_type_txt
    CASE "Default"
      grid_type_rrdCmd = "--grid-dash '1:1'"
      RETURN grid_type_rrdCmd
    CASE "Dot Grid"
      grid_type_rrdCmd = "--grid-dash '1:3'"
      RETURN grid_type_rrdCmd
    CASE "Full Grid"
      grid_type_rrdCmd = "--grid-dash '1:0'"
      RETURN grid_type_rrdCmd
  END SELECT

END

PUBLIC SUB Load_graph(Graph_name AS String) AS Boolean

  DIM Graph_id AS Integer

  TRY rGraph = Main.hDB.Exec("SELECT * FROM graphs WHERE name = &1", Graph_name)
  IF rGraph.Count <> 0 THEN
    Graph_id = rGraph!id
    ComboBoxGraph_name.Tag = rGraph!id

    ColorButtonGraph_background.Value = rGraph!color_background
    ColorButtonGraph_canvas.Value = rGraph!color_canvas
    ColorButtonGraph_shadea.Value = rGraph!color_shadea
    ColorButtonGraph_shadeb.Value = rGraph!color_shadeb
    ColorButtonGraph_font.Value = rGraph!color_font
    ColorButtonGraph_grid.Value = rGraph!color_grid
    ColorButtonGraph_majorgrid.Value = rGraph!color_majorgrid
    ColorButtonGraph_frame.Value = rGraph!color_frame
    ColorButtonGraph_axis.Value = rGraph!color_axis
    ColorButtonGraph_arrow.Value = rGraph!color_arrow

    Graph_title.Text = rGraph!graph_title
    Graph_unit.Text = rGraph!unit
    ComboBoxGraph_gridtype.Text = rGraph!grid_type
    TGraphComment.Text = rGraph!comments

    CheckBoxDate.Value = rGraph!date

    ' size
    ComboBoxGraph_width.Text = rGraph!graph_width
    ComboBoxGraph_height.Text = rGraph!graph_height

    CheckBoxLogarithmicscale.Value = rGraph!logarithmic_scale
    PopulateGroups()

  ENDIF

END

PUBLIC SUB Load_graph_data(graph_id AS Integer, ds_id AS Integer) AS Boolean

  DIM rGraph_data AS Result

  TRY rGraph_data = Main.hDB.Exec("SELECT * FROM graph_data WHERE graph_id = &1 AND ds_id = &2", graph_id, ds_id)

  IF rGraph_data.Count <> 0 THEN
    ComboBoxGraphList.Tag = rGraph_data!id

    ' checkbox min/max/last/avg
    TextBoxGraph_name.Text = rGraph_data!graph_name
    ComboBoxGraph_device.Text = rGraph_data!graph_devicename
    ComboBoxGraph_ds.Text = rGraph_data!graph_rrddsname
    CheckBoxGraph_graphvalue_min.Value = rGraph_data!graph_value_min
    CheckBoxGraph_graphvalue_max.Value = rGraph_data!graph_value_max
    CheckBoxGraph_graphvalue_avg.Value = rGraph_data!graph_value_avg
    ColorButtonGraph_graphvalue_min_color.Value = rGraph_data!graph_value_min_color
    ColorButtonGraph_graphvalue_max_color.Value = rGraph_data!graph_value_max_color
    ColorButtonGraph_graphvalue_avg_color.Value = rGraph_data!graph_value_avg_color
    ComboBoxGraph_type.Text = rGraph_data!graph_line_type
    CheckBoxGraph_min.Value = rGraph_data!graph_min
    CheckBoxGraph_max.Value = rGraph_data!graph_max
    CheckBoxGraph_avg.Value = rGraph_data!graph_avg
    CheckBoxGraph_last.Value = rGraph_data!graph_last
    ColorButtonGraph.Value = rGraph_data!graph_color
    CheckBoxTrend.Value = rGraph_data!graph_trend
    SpinBoxShift.Value = rGraph_data!graph_timeshift_value
    CheckBoxShift.Value = rGraph_data!graph_timeshift
    SpinBoxTrend.Value = rGraph_data!graph_trend_value
    ' operation
    CheckBoxOperation.Value = rGraph_data!graph_operation
    SpinBoxOperation.Value = rGraph_data!graph_operation_value
    ComboBoxOperation.Text = rGraph_data!graph_operation_operator
  ELSE
    Reset_graph_data()
    FrameGraph_data.Enabled = TRUE
    FramePreview.Enabled = TRUE
  ENDIF

END

PUBLIC SUB ButtonGraphClose_Click()

  ME.Close

END

PUBLIC SUB CheckMissingGraphName() AS Boolean

  IF Len(ComboBoxGraph_name.Text) = 0 THEN
    ComboBoxGraph_name.SetFocus
    Balloon("Graph name missing!", ComboBoxGraph_name,, 50, 10)
    RETURN FALSE
  ELSE
    RETURN TRUE
  ENDIF

END

PUBLIC SUB Populate_device_list()

  DIM rDevice AS Result

  ComboBoxGraph_device.Clear
  ComboBoxGraph_device.Add("")
  TRY rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE rrd IS TRUE ORDER BY name")
  IF rDevice THEN
    FOR EACH rDevice
      ComboBoxGraph_device.Add(rDevice!name)
    NEXT
  ENDIF

END

' PUBLIC SUB ComboBoxGraph_device_GotFocus()
' 
'   IF ComboBoxGraph_device.Count = 0 AND CheckMissingGraphName() = TRUE THEN
'     Populate_device_list()
'   ENDIF
' 
' END

PUBLIC SUB ComboBoxGraphList_Change()

  IF ComboBoxGraph_name.Tag <> "" THEN
    Load_graph_data(ComboBoxGraph_name.Tag, ComboBoxGraphList.Text)
  ENDIF

END

PUBLIC SUB ButtonGraphPreview_Click()

  DIM sRRDCmd AS String
  DIM sTempFile AS String = Temp()

  IF ComboBoxGraph_name.Tag THEN
    sRRDCmd = RRDTool.GenerateGraph(ComboBoxGraph_name.Tag, sTempFile, ComboBoxRange_Preview.Text)
    SHELL sRRDCmd WAIT
    IF Main.bRRDToolDebug THEN Main.WriteDebugLog("[Graph Editor] " & sRRDCmd)
    Display_Graph_Preview(sTempFile)
  ENDIF

END

PUBLIC SUB ButtonGraphPreviewUpdate(sRange AS String)

  DIM sRRDCmd AS String
  DIM sTempFile AS String = Temp()

  IF ComboBoxGraph_name.Tag THEN
    sRRDCmd = RRDTool.GenerateGraph(ComboBoxGraph_name.Tag, sTempFile, sRange)
    SHELL sRRDCmd WAIT
    IF Main.bRRDToolDebug THEN Main.WriteDebugLog("[Graph Editor] " & sRRDCmd)
    Display_Graph_Preview(sTempFile, TRUE)
  ENDIF

END

PUBLIC SUB Display_Graph_Preview(sFile AS String, OPTIONAL bUpdate AS Boolean)

  DIM pGraph AS Picture

  TRY pGraph = Picture.Load(sFile)
  IF pGraph THEN
    FGraphsPreview.PictureBoxGraphPreview.Picture = pGraph
    IF bUpdate THEN RETURN
    FGraphsPreview.Height = pGraph.Height + 80
    IF pGraph.Width >= 415 THEN
      FGraphsPreview.Width = pGraph.Width + 15
    ELSE
      FGraphsPreview.Width = 415
    END IF
    FGraphsPreview.X = (Desktop.W / 2) - (pGraph.Width / 2)
    FGraphsPreview.Y = (Desktop.H / 2) - (pGraph.Height / 2)
    FGraphsPreview.PictureBoxGraphPreview.H = pGraph.Height - 1
    FGraphsPreview.PictureBoxGraphPreview.W = pGraph.Width - 1
    FGraphsPreview.PictureBoxGraphPreview.Visible = TRUE
    FGraphsPreview.Show
  ENDIF

END

PUBLIC SUB DeleteGraphData_Button_Click()

  DIM rGraph AS Result

  TRY rGraph = Main.hDB.Exec("DELETE FROM graph_data WHERE id = &1", ComboBoxGraphList.Tag)
  IF rGraph THEN
    ComboBoxGraphList.Tag = ""
    Main.WriteDebugLog("[Graph Editor] DS deleted")
    Load_graph_data(ComboBoxGraph_name.Tag, ComboBoxGraphList.Text)
  ENDIF

END

PUBLIC SUB SaveGraphData_Button_Click()

  DIM rGraph AS Result

  IF Len(TextBoxGraph_name.Text) = 0 THEN
    Balloon.Warning("Please specify a name!", TextBoxGraph_name)
    RETURN
  ENDIF
  IF Len(ComboBoxGraph_device.Text) > 1 AND Len(ComboBoxGraph_ds.Text) > 1 THEN
    IF ComboBoxGraphList.Tag THEN
      TRY rGraph = Main.hDB.Exec("UPDATE graph_data SET graph_name = &1, graph_max = &2, graph_min = &3, graph_last = &4, graph_avg = &5, graph_value_max = &6, graph_value_avg = &7, graph_value_min = &8, graph_value_max_color = &9, graph_value_avg_color = &10, graph_value_min_color = &11, graph_line_type = &12, graph_rrddsname = &13, graph_color = &14, graph_trend = &15, graph_trend_value = &16, graph_timeshift = &17, graph_timeshift_value = &18, graph_operation = &19, graph_operation_operator = &20, graph_operation_value = &21, graph_devicename = &22 WHERE id = &23", TextBoxGraph_name.Text, Abs(CheckBoxGraph_max.Value), Abs(CheckBoxGraph_min.Value), Abs(CheckBoxGraph_last.Value), Abs(CheckBoxGraph_avg.Value), Abs(CheckBoxGraph_graphvalue_max.Value), Abs(CheckBoxGraph_graphvalue_avg.Value), Abs(CheckBoxGraph_graphvalue_min.Value), ColorButtonGraph_graphvalue_max_color.Value, ColorButtonGraph_graphvalue_avg_color.Value, ColorButtonGraph_graphvalue_min_color.Value, ComboBoxGraph_type.Text, ComboBoxGraph_ds.Text, ColorButtonGraph.Value, Abs(CheckBoxTrend.Value), SpinBoxTrend.Value, Abs(CheckBoxShift.Value), SpinBoxShift.Value, Abs(CheckBoxOperation.Value), ComboBoxOperation.Text, SpinBoxOperation.Value, ComboBoxGraph_device.Text, ComboBoxGraphList.Tag)
    ELSE
      TRY rGraph = Main.hDB.Exec("INSERT INTO graph_data (graph_id, graph_name, graph_max, graph_min, graph_last, graph_avg, graph_value_max, graph_value_avg, graph_value_min, graph_value_max_color, graph_value_avg_color, graph_value_min_color, graph_line_type, graph_rrddsname, graph_color, graph_trend, graph_trend_value, graph_timeshift, graph_timeshift_value, graph_operation, graph_operation_operator, graph_operation_value, graph_devicename, ds_id) values (&1,&2,&3,&4,&5,&6,&7,&8,&9,&10,&11,&12,&13,&14,&15,&16,&17,&18,&19,&20,&21,&22,&23,&24)", ComboBoxGraph_name.Tag, TextBoxGraph_name.Text, Abs(CheckBoxGraph_max.Value), Abs(CheckBoxGraph_min.Value), Abs(CheckBoxGraph_last.Value), Abs(CheckBoxGraph_avg.Value), Abs(CheckBoxGraph_graphvalue_max.Value), Abs(CheckBoxGraph_graphvalue_avg.Value), Abs(CheckBoxGraph_graphvalue_min.Value), ColorButtonGraph_graphvalue_max_color.Value, ColorButtonGraph_graphvalue_avg_color.Value, ColorButtonGraph_graphvalue_min_color.Value, ComboBoxGraph_type.Text, ComboBoxGraph_ds.Text, ColorButtonGraph.Value, Abs(CheckBoxTrend.Value), SpinBoxTrend.Value, Abs(CheckBoxShift.Value), SpinBoxShift.Value, Abs(CheckBoxOperation.Value), ComboBoxOperation.Text, SpinBoxOperation.Value, ComboBoxGraph_device.Text, ComboBoxGraphList.Text)
      Load_graph_data(ComboBoxGraph_name.Tag, ComboBoxGraphList.Text)
    ENDIF
  ELSE
    ComboBoxGraph_device.SetFocus
    Balloon.Warning("Device/DS Missing", ComboBoxGraph_device)
  ENDIF

END

PUBLIC SUB ButtonGraphSave2_Click()

  IF Len(TextBoxGraph_name.Text) > 1 THEN SaveGraphData_Button_Click()
  ButtonGraphSave_Click()

END

PUBLIC SUB ButtonGraphSave_Click()

  DIM rGraph AS Result

  IF Main.bRRDToolEnabled = FALSE THEN
    Message(("You also need to enable the RRDTool module!"))
  ENDIF

  IF ComboBoxGraph_name.Tag THEN
    TRY rGraph = Main.hDB.Exec("UPDATE graphs SET name = &1, enabled = &2, comments = &3, graph_title = &4, graph_height = &5, graph_width = &6, color_background = &7, color_canvas = &8, color_shadea = &9, color_shadeb = &10, color_font = &11, color_grid = &12, color_majorgrid = &13, color_frame = &14, color_axis = &15, color_arrow = &16, unit = &17, logarithmic_scale = &18, date = &19, grid_type = &20, groups = &21 WHERE id = &22", ComboBoxGraph_name.Text, Abs(CheckBoxGraph_enabled.Value), TGraphComment.Text, Graph_title.Text, ComboBoxGraph_height.Text, ComboBoxGraph_width.Text, ColorButtonGraph_background.Value, ColorButtonGraph_canvas.Value, ColorButtonGraph_shadea.Value, ColorButtonGraph_shadeb.Value, ColorButtonGraph_font.Value, ColorButtonGraph_grid.Value, ColorButtonGraph_majorgrid.Value, ColorButtonGraph_frame.Value, ColorButtonGraph_axis.Value, ColorButtonGraph_arrow.Value, Graph_unit.Text, Abs(CheckBoxLogarithmicscale.Value), CheckBoxDate.Value, ComboBoxGraph_gridtype.Text, GetGroups(), ComboBoxGraph_name.Tag)
  ELSE IF Len(ComboBoxGraph_name.Text) > 1 THEN
    TRY rGraph = Main.hDB.Exec("INSERT INTO graphs (name, enabled, comments, graph_title, graph_height, graph_width, color_background, color_canvas, color_shadea, color_shadeb, color_font, color_grid, color_majorgrid, color_frame, color_axis, color_arrow, logarithmic_scale, date, unit, grid_type, groups) values (&1,&2,&3,&4,&5,&6,&7,&8,&9,&10,&11,&12,&13,&14,&15,&16,&17,&18,&19,&20,&21)", ComboBoxGraph_name.Text, Abs(CheckBoxGraph_enabled.Value), TGraphComment.Text, Graph_title.Text, ComboBoxGraph_height.Text, ComboBoxGraph_width.Text, ColorButtonGraph_background.Value, ColorButtonGraph_canvas.Value, ColorButtonGraph_shadea.Value, ColorButtonGraph_shadeb.Value, ColorButtonGraph_font.Value, ColorButtonGraph_grid.Value, ColorButtonGraph_majorgrid.Value, ColorButtonGraph_frame.Value, ColorButtonGraph_axis.Value, ColorButtonGraph_arrow.Value, Abs(CheckBoxLogarithmicscale.Value), Abs(CheckBoxDate.Value), Graph_unit.Text, ComboBoxGraph_gridtype.Text, GetGroups())
    Graph_list()
    ComboBoxGraph_name.Select(ComboBoxGraph_name.Count, 1)
    Load_graph(ComboBoxGraph_name.Text)
  ENDIF

END

PUBLIC SUB ButtonGraphDelete_Click()

  DIM rGraph AS Result

  IF ComboBoxGraph_name.Tag THEN
    TRY rGraph = Main.hDB.Exec("DELETE from graph_data where graph_id = &1", ComboBoxGraph_name.Tag)
    TRY rGraph = Main.hDB.Exec("DELETE from graphs where id = &1", ComboBoxGraph_name.Tag)
    Reset_graph()
    Reset_graph_data()
    Graph_list()
  ENDIF

END

PUBLIC SUB PopulateGroups()

  DIM rResultGroups AS Result

  lvGroupAvail.Clear
  ' fill available groups list
  rResultGroups = Main.hDB.Exec("SELECT * FROM groups ORDER BY name")
  IF rResultGroups THEN
    IF rResultGroups.Count THEN
      FOR EACH rResultGroups
        lvGroupAvail.Add(rResultGroups!name, rResultGroups!name)
      NEXT
    ELSE
      Message(("No groups found!"))
    ENDIF
  ELSE
    Message(("No groups database table found!"))
  ENDIF

END

PUBLIC SUB AssignGroups()

  DIM rResultGroups AS Result

  lvGroupActive.Clear
  ' fill available groups list
  rResultGroups = Main.hDB.Exec("SELECT * FROM groups")
  IF (rResultGroups.Count >= 1) THEN
    FOR EACH rResultGroups
      IF InStr("|" & rGraph!groups & "|", "|" & rResultGroups!name & "|") THEN
        lvGroupActive.Add(rResultGroups!name, rResultGroups!name)
        lvGroupAvail.Remove(rResultGroups!name)
      ENDIF
    NEXT
  ELSE
    Message(("No groups found!"))
  ENDIF

END

PUBLIC SUB lvGroupAvail_Click()

  lvGroupActive.Add(lvGroupAvail.Key, lvGroupAvail.Key)
  lvGroupAvail.Remove(lvGroupAvail.Key)

END

PUBLIC SUB lvGroupActive_Click()

  lvGroupAvail.Add(lvGroupActive.Key, lvGroupActive.Key)
  lvGroupActive.Remove(lvGroupActive.Key)

END

PUBLIC SUB GetGroups() AS String

  DIM iCount AS Integer
  DIM sGroups AS String = "|"

  lvGroupActive.MoveFirst

  FOR iCount = 1 TO lvGroupActive.Count
    sGroups = sGroups & lvGroupActive.Item.Text & "|"
    lvGroupActive.MoveNext
  NEXT

  RETURN sGroups

END
