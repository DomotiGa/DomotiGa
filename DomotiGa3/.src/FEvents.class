' Gambas class file

' Description:
' FEvents.class
' Future event management functions.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public txtCurEvent As String
Private tRefresh As New Timer
Private bAutoRefresh As Boolean
Private bExpand As Boolean
Private iTable As Integer = 1
Private mEvents As Menu
Private mTriggers As Menu
Private mConditions As Menu
Private mActions As Menu

Public Sub Form_Open()

  btnEvents.Enabled = False
  GetEventList()
  GetCategories()
  CreateEventsMenu()
  CreateTriggersMenu()
  CreateConditionsMenu()
  CreateActionsMenu()

  ' create refresh timer
  tRefresh = New Timer As "tRefresh"
  tRefresh.Delay = 3000 ' 3 seconds

End

Public Sub GetCategories()

  Dim rCategory As Result

  ' fill combo with used categories
  Try rCategory = Main.hDB.Exec("SELECT DISTINCT category.name FROM category INNER JOIN events ON category.id = events.category_id ORDER BY category.name")
  cmbCategory.Clear
  cmbCategory.Add("All Categories")
  If rCategory Then
    If (rCategory.Count >= 1) Then
      For Each rCategory
        cmbCategory.Add(rCategory!name)
      Next
    Endif
  Else
    Message(("No category database table found!"))
  Endif

End

Public Sub gvEvents_ColumnClick(Column As Integer)

  FMain.SortGridView(FEvents.gvEvents, Column, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh tableview contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRefresh_Timer()

  btnRefresh_Click()

End

Public Sub Form_Close()

  tRefresh.Stop

End

Public Sub Form_LostFocus()

  tRefresh.Stop

End

Public Sub Form_GotFocus()

  If bAutoRefresh Then tRefresh.Enabled = True

End

Public Sub GetEventTree(Optional iCategory As Integer)

  Dim iCount, iAction As Integer
  Dim label As String
  Dim rResult, rTrigger, rCond, rAction As Result

  Application.Busy = True

  tvEvents.Clear
  tvEvents.Visible = True
  gvEvents.Visible = False

  If iCategory Then
    rResult = Main.hDB.Exec("SELECT * FROM events WHERE category_id = &1 ORDER BY name", iCategory)
  Else
    rResult = Main.hDB.Exec("SELECT * FROM events ORDER BY name")
  Endif
  If Not rResult Then
    Message.Info(("Error: table 'events' not found!"))
    Return
  Endif

  tvEvents.Font.Size = "9"
  tvEvents.Add("home", "Event Tree")

  For iCount = 0 To rResult.Max
    ' event node
    label = rResult!name
    If rResult!enabled = False Then label = "(" & label & ")"
    If rResult!comments <> "" Then label = label & " [" & rResult!comments & "]"
    tvEvents.Add("event-" & rResult!id, label, Picture[Main.sBaseDir &/ "icons/events.png"], "home")
    ' trigger node
    rTrigger = Main.hDB.Exec("SELECT * FROM triggers where id = &1", rResult!trigger_id)
    If rTrigger.Count Then
      label = rTrigger!name
      If rTrigger!description <> "" Then label = label & " [" & rTrigger!description & "]"
      tvEvents.Add("trigger-" & rTrigger!id & "-" & rResult!id & "-" & Rnd(), label, Picture[Main.sBaseDir &/ "icons/triggers.png"], "event-" & rResult!id)
    Endif
    ' condition node
    rCond = Main.hDB.Exec("SELECT * FROM conditions where id = &1", rResult!condition1_id)
    If rCond.Count Then
      label = rCond!name
      If rCond!description <> "" Then label = label & " [" & rCond!description & "]"
      tvEvents.Add("cond-" & rCond!id & "-" & rResult!id & "-" & Rnd(), label, Picture[Main.sBaseDir &/ "icons/conditions.png"], "event-" & rResult!id)
    Endif
    rCond = Main.hDB.Exec("SELECT * FROM conditions WHERE id = &1", rResult!condition2_id)
    If rCond.Count Then
      label = rCond!name
      If rCond!description <> "" Then label = label & " [" & rCond!description & "]"
      tvEvents.Add("cond-" & rCond!id & "-" & rResult!id & "-" & Rnd(), label, Picture[Main.sBaseDir &/ "icons/conditions.png"], "event-" & rResult!id)
    Endif
    ' action node
    rAction = Main.hDB.Exec("SELECT * FROM events_actions, actions WHERE id = action AND event = &1 ORDER BY `order`", rResult!id)
    For iAction = 0 To rAction.Max
      label = rAction!name
      If rAction!description <> "" Then label = label & " [" & rAction!description & "]"
      tvEvents.Add("action-" & rAction!id & "-" & rResult!id & "-" & Rnd(), label, Picture[Main.sBaseDir &/ "icons/actions.png"], "event-" & rResult!id)
      rAction.MoveNext
    Next
    rResult.MoveNext
  Next
  tvEvents["home"].Expanded = True

Finally
  Application.Busy = False

End

Public Sub GetEventList(Optional iCategory As Integer)

  Dim iRows, iCount, iLines As Integer
  Dim rResult, rSubResult As Result
  Dim aTriggerType As String[] = ["Time Now", "Variable Change", "Device Change", "IR Remote", "iViewer Remote", "Multi-Trigger", "Manually Trigger", "Device Lastseen Change"]
  Dim aActionType As String[] = ["Set Device Value", "Set GlobalVar Value", "Send e-mail", "Speak Text", "Execute Shell Command", "Send Tweet", "Send SMS Message", "Send IRTrans Code", "Play Sound", "Write Log Entry", "Display LED Message", "AV Control", "Delay Timer", "Notify-Send", "Script", "JSON", "Send Prowl", "Send NMA (Deprecated)", "Send Pushover", "Send Pushbullet", "Soft Dimming", "Send UDP Message", "Publish MQTT Message"]
  Dim sSql As String

  Application.Busy = True
  tvEvents.Visible = False
  gvEvents.Visible = True
  gvEvents.Clear
  gvEvents.Rows.Count = 0

  Select Case iTable
    Case 1 ' display events
      sSql = "SELECT * FROM events "
      If (chkDisabled.Value <> 0) And (iCategory <> 0) Then
        sSql &= " WHERE enabled IS TRUE AND category_id = " & iCategory
      Else If chkDisabled.Value <> 0 Then
        sSql &= " WHERE enabled IS TRUE"
      Else If iCategory <> 0 Then
        sSql &= " WHERE category_id = " & iCategory
      Endif
      sSql &= " ORDER BY name"

      rResult = Main.hDB.Exec(sSql)
      If Not rResult Then
        Message.Info(("Error: table 'events' not found!"))
        Return
      Endif
      iRows = rResult.Count

      With gvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 7, 5)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 250
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 300
        .Columns[3].Title = ("Last Run")
        .Columns[3].Width = 150
        .Columns[4].Title = ("Enabled")
        .Columns[4].Width = 90
        If bExpand Then
          .Columns[5].Title = ("First Run")
          .Columns[5].Width = 150
          .Columns[6].Title = ("Log")
        Endif
      End With

      For iCount = 0 To iRows - 1
        gvEvents[iCount, 0].Text = rResult!id
        gvEvents[iCount, 1].Text = rResult!name
        gvEvents[iCount, 2].Text = rResult!comments
        If rResult!lastrun Then gvEvents[iCount, 3].Text = Replace$(Str$(Format(rResult!lastrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        gvEvents[iCount, 4].Text = IIf(rResult!enabled, "True", "False")
        If bExpand Then
          If rResult!firstrun Then gvEvents[iCount, 5].Text = Replace$(Str$(Format(rResult!firstrun, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
          gvEvents[iCount, 6].Text = Main.DisplayBool(rResult!log)
        Endif
        rResult.MoveNext
      Next
    Case 2 ' display triggers
      rResult = Main.hDB.Exec("SELECT * FROM triggers ORDER BY name")
      If Not rResult Then
        Message.Info(("Error: table 'triggers' not found!"))
        Return
      Endif
      iRows = rResult.Count

      With gvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 5, 4)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 250
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 300
        .Columns[3].Title = ("Type")
        .Columns[3].Width = 240
        If bExpand Then .Columns[4].Title = ("Used")
      End With
      For iCount = 0 To iRows - 1
        gvEvents[iCount, 0].Text = rResult!id
        gvEvents[iCount, 1].Text = rResult!name
        gvEvents[iCount, 2].Text = rResult!description
        Try gvEvents[iCount, 3].Text = aTriggerType[rResult!type - 1]
        If bExpand Then
          rSubResult = Main.hDB.Exec("SELECT * FROM events WHERE trigger_id = &1", rResult!id)
          gvEvents[iCount, 4].Text = "False"
          If rSubResult Then
            If rSubResult.Count >= 1 Then
              gvEvents[iCount, 4].Text = "True"
            Endif
          Endif
        Endif
        rResult.MoveNext
      Next
    Case 3 ' display conditions
      rResult = Main.hDB.Exec("SELECT * FROM conditions ORDER BY name")
      If Not rResult Then
        Message.Info(("Error: table 'conditions' not found!"))
        Return
      Endif
      iRows = rResult.Count
      With gvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 5, 4)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 250
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 300
        .Columns[3].Title = ("Formula")
        .Columns[3].Width = 300
        If bExpand Then .Columns[4].Title = ("Used")

      End With
      For iCount = 0 To iRows - 1
        gvEvents[iCount, 0].Text = rResult!id
        gvEvents[iCount, 1].Text = rResult!name
        gvEvents[iCount, 2].Text = rResult!description
        iLines = CountLines(rResult!formula)
        If iLines > 1 Then gvEvents.Rows[iCount].Height = iLines * 12
        Try gvEvents[iCount, 3].Text = rResult!formula
        gvEvents[iCount, 3].Font = Font["-3"]
        If bExpand Then
          rSubResult = Main.hDB.Exec("SELECT * FROM events WHERE condition1_id = &1 OR condition2_id = &1 ", rResult!id)
          gvEvents[iCount, 4].Text = "False"
          If rSubResult Then
            If rSubResult.Count >= 1 Then
              gvEvents[iCount, 4].Text = "True"
            Endif
          Endif
        Endif
        rResult.MoveNext
      Next
    Case 4 ' display actions
      rResult = Main.hDB.Exec("SELECT * FROM actions ORDER BY name")
      If Not rResult Then
        Message.Info(("Error: table 'actions' not found!"))
        Return
      Endif
      iRows = rResult.Count
      With gvEvents
        .Font.Size = "9"
        .Columns.Count = IIf(bExpand, 6, 5)
        .Rows.Count = iRows
        .Columns[0].Title = ("Id")
        .Columns[0].Width = 20
        .Columns[1].Title = ("Name")
        .Columns[1].Width = 200
        .Columns[2].Title = ("Description")
        .Columns[2].Width = 250
        .Columns[3].Title = ("Type")
        .Columns[3].Width = 120
        .Columns[4].Title = ("Details")
        .Columns[4].Width = 300
        If bExpand Then .Columns[5].Title = ("Used")
      End With
      For iCount = 0 To iRows - 1
        gvEvents[iCount, 0].Text = rResult!id
        gvEvents[iCount, 1].Text = rResult!name
        gvEvents[iCount, 2].Text = rResult!description
        Try gvEvents[iCount, 3].Text = aActionType[rResult!type - 1]

        ' HTML Escape all RichText strings, otherwise we miss things like "<" and ">"
        Select Case rResult!type
          Case 1 ' set device value
            gvEvents[iCount, 4].RichText = Html("Device: " & rResult!param1 & " ValueNo: " & rResult!param2 & " Value: " & rResult!param3)
          Case 2 ' set global var
            gvEvents[iCount, 4].RichText = Html("GlobalVar: " & rResult!param1 & " Value: " & rResult!param2)
          Case 3 ' send e-mail
            gvEvents[iCount, 4].RichText = Html("To: " & rResult!param1 & " Subject: " & rResult!param2 & " Msg: " & rResult!param3)
          Case 4 ' speak text
            gvEvents[iCount, 4].RichText = Html("Voice: " & rResult!param1 & " Text: " & rResult!param2)
          Case 5 ' execute command
            gvEvents[iCount, 4].RichText = Html("Cmd: " & rResult!param1)
          Case 6 ' send tweet
            gvEvents[iCount, 4].RichText = Html("Tweet: " & rResult!param1)
          Case 7 ' send SMS
            gvEvents[iCount, 4].RichText = Html("To: " & rResult!param1 & " Msg: " & rResult!param2)
          Case 8 ' send IRTRans
            gvEvents[iCount, 4].RichText = Html("IR: " & rResult!param1)
          Case 9 ' play sound
            gvEvents[iCount, 4].RichText = Html("Sound: " & rResult!param1 & " Volume: " & rResult!param2)
          Case 10 ' write log
            gvEvents[iCount, 4].RichText = Html("Entry: " & rResult!param1)
          Case 11 ' display text on LED display
            gvEvents[iCount, 4].RichText = Html("Msg: " & rResult!param1)
          Case 12 ' av control command
            gvEvents[iCount, 4].RichText = Html("Model: " & rResult!param1 & " Cmd: " & rResult!param2 & " Val: " & rResult!param3 & " Adr: " & rResult!param4)
          Case 13 ' delay timer
            If rResult!param2 = "fixed" Then
              gvEvents[iCount, 4].RichText = Html("Delay: " & rResult!param1)
            Else
              gvEvents[iCount, 4].RichText = Html("Rnd Min: " & rResult!param1 & " Rnd Max: " & rResult!param2)
            Endif
          Case 14 ' notify-send desktop
            gvEvents[iCount, 4].RichText = Html("Title: " & rResult!param1 & " Msg: " & rResult!param2)
          Case 15 ' script
            gvEvents[iCount, 4].RichText = Html("Script: " & rResult!param1)
          Case 16 ' JSON
            gvEvents[iCount, 4].RichText = Html("Device: " & rResult!param1)
          Case 17 ' Prowl
            gvEvents[iCount, 4].RichText = Html("Msg: " & rResult!param1)
          Case 18 ' Notify My Android
            gvEvents[iCount, 4].RichText = Html("Msg: " & rResult!param1)
          Case 19 ' Pushover
            gvEvents[iCount, 4].RichText = Html("Msg: " & rResult!param1 & IIf(rResult!param2, " Prio: " & rResult!param2, "") & IIf(rResult!param3, " Snd: " & rResult!param3, ""))
          Case 20 ' Pushbullet
            gvEvents[iCount, 4].RichText = Html("Msg: " & rResult!param1 & IIf(rResult!param2, " Title: " & rResult!param2, "") & IIf(rResult!param3, " Device: " & rResult!param3, ""))
          Case 21 ' Soft dimming
            gvEvents[iCount, 4].RichText = Html("Device: " & rResult!param1 & " Minutes: " & rResult!param2 & " Value: " & rResult!param3)
          Case 22 ' Send UDP Message
            gvEvents[iCount, 4].RichText = Html("To: " & rResult!param1 & ":" & rResult!param2 & " Msg: " & rResult!param3)
          Case 23 ' Publish MQTT Message
            gvEvents[iCount, 4].RichText = Html("Topic: " & rResult!param1 & ", Msg: " & rResult!param2 & ", Raw: " & IIf(rResult!param3, "True", "False"))
        End Select

        gvEvents[iCount, 4].Font = Font["-3"]
        iLines = CountLines(rResult!param1)
        If iLines > 1 Then gvEvents.Rows[iCount].Height = iLines * 12
        If bExpand Then
          rSubResult = Main.hDB.Exec("SELECT * FROM events_actions WHERE action = &1", rResult!id)
          gvEvents[iCount, 5].Text = "False"
          If rSubResult Then
            If rSubResult.Count >= 1 Then
              gvEvents[iCount, 5].Text = "True"
            Endif
          Endif
        Endif
        rResult.MoveNext
      Next
  End Select

Finally
  Application.Busy = False

End

Private Sub CountLines(sString As String) As Integer

  Return Split(sString, "\n").Count

End

Public Sub Form_Resize()

  tbEvents.Width = Me.ClientWidth - 18
  hbEvents.Width = Me.ClientWidth - 18
  gvEvents.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  tvEvents.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)

End

Public Sub tvEvents_DblClick()

  Dim sKey As String
  Dim aScan As String[]

  ' open event editor window
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    sKey = tvEvents.Current.Key
    aScan = Scan(sKey, "*-*-*-*")
    If aScan.Count = 0 Then
      aScan = Scan(sKey, "*-*")
      If aScan.Count > 0 Then
        If aScan[0] = "event" Then
          txtCurEvent = aScan[1]
          FEventEditor.Show()
        Endif
      Endif
      Return
    Endif
    If aScan[0] = "trigger" Then
      txtCurEvent = aScan[1]
      FTriggerEditor.bTriggerEdit = True
      FTriggerEditor.Show()
    Endif
    If aScan[0] = "cond" Then
      txtCurEvent = aScan[1]
      FConditionEditor.bConditionEdit = True
      FConditionEditor.Show()
    Endif
    If aScan[0] = "action" Then
      txtCurEvent = aScan[1]
      FActionEditor.bActionEdit = True
      FActionEditor.Show()
    Endif
  Else
    Message(("Sorry, editing events is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub gvEvents_Activate()

  If gvEvents.Row = -1 Then Return

  ' open event editor window
  txtCurEvent = gvEvents[gvEvents.Row, 0].Text
  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    Select Case iTable
      Case 1
        FEventEditor.Show()
      Case 2
        FTriggerEditor.bTriggerEdit = True
        FTriggerEditor.Show()
      Case 3
        FConditionEditor.bConditionEdit = True
        FConditionEditor.Show()
      Case 4
        FActionEditor.bActionEdit = True
        FActionEditor.Show()
    End Select
  Else
    Message(("Sorry, editing events is not enabled for users.\nLogin as an admin."))
  Endif

End

Public Sub tbtnRefresh_Click()

  If tbtnRefresh.Value = True Then
    tRefresh.Start
    bAutoRefresh = True
    btnRefresh.Enabled = False
  Else
    tRefresh.Stop
    bAutoRefresh = False
    btnRefresh.Enabled = True
  Endif

End

Public Sub GetEvents()

  If btnTreeView.Enabled Then
    GetEventList()
  Else
    GetEventTree()
  Endif

End

Public Sub btnRefresh_Click()

  GetCategories()
  GetEvents()

End

Public Sub tbtnExpand_Click()

  If tbtnExpand.Value = True Then
    bExpand = True
    tbtnExpand.Text = ("Shrink")
  Else
    bExpand = False
    tbtnExpand.Text = ("Expand")
  Endif
  GetEventList()

End

Public Sub btnEvents_Click()

  iTable = 1
  btnEvents.Enabled = False
  btnTriggers.Enabled = True
  btnConditions.Enabled = True
  btnActions.Enabled = True
  btnTreeView.Enabled = True
  cmbCategory.Enabled = True
  UpdateEventView()

End

Public Sub btnTriggers_Click()

  iTable = 2
  btnEvents.Enabled = True
  btnTriggers.Enabled = False
  btnConditions.Enabled = True
  btnActions.Enabled = True
  btnTreeView.Enabled = True
  cmbCategory.Enabled = False
  UpdateEventView()

End

Public Sub btnConditions_Click()

  iTable = 3
  btnEvents.Enabled = True
  btnTriggers.Enabled = True
  btnConditions.Enabled = False
  btnActions.Enabled = True
  btnTreeView.Enabled = True
  cmbCategory.Enabled = False
  UpdateEventView()

End

Public Sub btnActions_Click()

  iTable = 4
  btnEvents.Enabled = True
  btnTriggers.Enabled = True
  btnConditions.Enabled = True
  btnActions.Enabled = False
  btnTreeView.Enabled = True
  cmbCategory.Enabled = False

  UpdateEventView()

End

Public Sub btnTreeView_Click()

  btnEvents.Enabled = True
  btnTriggers.Enabled = True
  btnConditions.Enabled = True
  btnActions.Enabled = True
  btnTreeView.Enabled = False
  cmbCategory.Enabled = True
  UpdateEventView()

End

Public Sub cmbCategory_Click()

  UpdateEventView()

End

Public Sub chkDisabled_Click()

  UpdateEventView()

End

Public Sub UpdateEventView()

  Dim rCat As Result
  Dim iCat As Integer

  rCat = Main.hDB.Exec("SELECT * FROM category where name = &1", cmbCategory.Text)
  If rCat.Count Then iCat = rCat!id
  If btnEvents.Enabled Then GetEventTree(iCat)
  If btnTreeView.Enabled Then GetEventList(iCat)

End

Public Sub CreateEventsMenu()

  Dim mDelete, mRun, mDisable, mEdit As Menu

  mEvents = New Menu(FEvents)

  mEdit = New Menu(mEvents)
  mEdit.Text = "Edit event"
  mEdit.Action = "edit event"

  mDisable = New Menu(mEvents)
  mDisable.Text = "Disable/enable event"
  mDisable.Action = "toggle event"

  mDelete = New Menu(mEvents)
  mDelete.Text = "Delete event"
  mDelete.Action = "delete event"

  mRun = New Menu(mEvents)
  mRun.Text = "Run action(s)"
  mRun.Action = "run event"

  mEvents.Hide

End

Public Sub CreateTriggersMenu()

  Dim mDelete, mEdit As Menu

  mTriggers = New Menu(FEvents)

  mEdit = New Menu(mTriggers)
  mEdit.Text = "Edit trigger"
  mEdit.Action = "edit trigger"

  mDelete = New Menu(mTriggers)
  mDelete.Text = "Delete trigger"
  mDelete.Action = "delete trigger"

  mTriggers.Hide

End

Public Sub CreateConditionsMenu()

  Dim mDelete, mEdit, mCheck As Menu

  mConditions = New Menu(FEvents)

  mEdit = New Menu(mConditions)
  mEdit.Text = "Edit condition"
  mEdit.Action = "edit condition"

  mDelete = New Menu(mConditions)
  mDelete.Text = "Delete condition"
  mDelete.Action = "delete condition"

  mCheck = New Menu(mConditions)
  mCheck.Text = "Check condition"
  mCheck.Action = "check condition"

  mConditions.Hide

End

Public Sub CreateActionsMenu()

  Dim mDelete, mEdit, mRun As Menu

  mActions = New Menu(FEvents)

  mEdit = New Menu(mActions)
  mEdit.Text = "Edit action"
  mEdit.Action = "edit action"

  mDelete = New Menu(mActions)
  mDelete.Text = "Delete action"
  mDelete.Action = "delete action"

  mRun = New Menu(mActions)
  mRun.Text = "Run action"
  mRun.Action = "run action"

  mActions.Hide

End

Public Sub gvEvents_Menu()

  If Main.bUserisAdmin Or Not Main.bAuthEnabled Then
    Select iTable
      Case 1
        mEvents.Popup()
      Case 2
        mTriggers.Popup()
      Case 3
        mConditions.Popup()
      Case 4
        mActions.Popup()
    End Select
  Endif

Catch ' some errors
  Main.WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

Public Sub Action_Activate(sKey As String) As Boolean

  Dim iId As Integer
  Dim rResult, rResult2 As Result
  Dim sMessage As String
  Dim cData As New JSONCollection

  If gvEvents.Row = -1 Then Return False 

  iId = gvEvents[gvEvents.Row, 0].Text
  txtCurEvent = iId
  If iId Then
    Select Case sKey
      Case "run event"
        If Main.bServer Then
          Events.RunActions(iId)
        Else
          Client.RunActions(iId)
        Endif
        Balloon("Action(s) executed", Me)
      Case "edit event"
        FEventEditor.Show()
      Case "delete event"
        Select Message.Question(("Are you sure that you want to delete event '" & gvEvents[gvEvents.Row, 1].Text & "'?"), ("Yes"), ("No"))
          Case "1"
            Main.hDB.Exec("DELETE FROM events WHERE id = &1", iId)
            Main.hDB.Exec("DELETE FROM events_actions WHERE event = &1", iId)
            UpdateEventView()
        End Select
      Case "toggle event"
        Events.ChangeEventState(iId, Not Val(gvEvents[gvEvents.Row, 4].Text))
        UpdateEventView()
      Case "edit trigger"
        gvEvents_Activate()
      Case "delete trigger"
        rResult = Main.hDB.Exec("SELECT * FROM events WHERE trigger_id = &1", iId)
        If rResult And If rResult.Available Then
          sMessage = "This trigger is used by these events:\n"
          For Each rResult
            sMessage = sMessage & "[" & rResult!id & "] : " & rResult!name & "(" & IIf(rResult!enabled = True, "enabled", "disabled") & ")\n"
          Next
        Endif
        Select Message.Question((sMessage & "Are you sure that you want to delete trigger '" & gvEvents[gvEvents.Row, 1].Text & "'?"), ("Yes"), ("No"))
          Case "1"
            Main.hDB.Exec("DELETE FROM triggers WHERE id = &1", iId)
            UpdateEventView()
        End Select
      Case "edit condition"
        gvEvents_Activate()
      Case "delete condition"
         rResult = Main.hDB.Exec("SELECT * FROM events WHERE condition1_id  =&1 OR condition2_id = &1", iId)
         If rResult And If rResult.Available Then
            sMessage = "This condition is used by these events:\n"
            For Each rResult
              sMessage = sMessage & "[" & rResult!id & "] : " & rResult!name & "(" & IIf(rResult!enabled = True, "enabled", "disabled") & ")\n"
            Next
         Endif
         Select Message.Question((sMessage & "Are you sure that you want to delete condition '" & gvEvents[gvEvents.Row, 1].Text & "'?"), ("Yes"), ("No"))
           Case "1"
             Main.hDB.Exec("DELETE FROM conditions WHERE id = &1", iId)
             UpdateEventView()
         End Select
       Case "check condition"
         Message.Info("Condition \"" & gvEvents[gvEvents.Row, 1].Text & "\" is " & If(Events.CheckSingleCondition(iId), "True", "False"))      
       Case "edit action"
         gvEvents_Activate()
       Case "delete action"
           rResult = Main.hDB.Exec("SELECT * FROM events_actions where action = &1", iId)
         If rResult And If rResult.Available Then
            sMessage = "This action is used by these events:\n"
            For Each rResult
              rResult2 = Main.hDB.Exec("SELECT * FROM events where id = &1", rResult!event)
              sMessage = sMessage & "[" & rResult!event & "] : " & rResult2!name & "\n"
            Next
         Endif
         Select Message.Question((sMessage & "Are you sure that you want to delete action '" & gvEvents[gvEvents.Row, 1].Text & "'?"), ("Yes"), ("No"))
           Case "1"
             Main.hDB.Exec("DELETE FROM actions WHERE id = &1", iId)
             UpdateEventView()
         End Select
       Case "run action"
         rResult = Main.hDB.Exec("SELECT * FROM actions where id=&1", iId)
         If rResult!type = 13 Then 'delay action cannot be executed
           Message.Info("Delay action cannot be executed stand-alone")
         Else
           If Main.bServer Then
             Try Events.RunAction(iId, 0, 0)
             If Error Then
               Message.Info("ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running action!")
             Endif
           Else
             cData.Add(iId, "action_id")
             Client.RunAction(cData)
           Endif
         Endif
    End Select
  Endif

End

Public Sub gvEvents_MouseDown()

  gvEvents.Row = gvEvents.RowAt(Mouse.y)

End
