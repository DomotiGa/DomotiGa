' Gambas class file

' Description:
' PwrCtrl.class
' Provide support for Anel PwrCtrl.

' Development Status:
' Just started developing this one.

' Links:
' http://www.anel-elektronik.de/index.html

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This is written by and Copyright(C) 2010 Daniel Keller.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "PwrCtrl"
Public PluginFriendlyName As String = "PwrCtrl"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Daniel Keller"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[PwrCtrl] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iUDPPortRead As String
Private $iUDPPortSend As String
Private $bDebug As Boolean
Private $sPwrCtrlUserPw As String

Public hPwrCtrlClient As Udpsocket
Public hBroadcastEvent As UdpSocket

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iUDPPortRead = cPl.Settings["udpread"]
  $iUDPPortSend = cPl.Settings["udpsend"]
  $sPwrCtrlUserPw = cPl.Settings["userpw"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("PwrCtrl Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ConnectUDP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectUDP()

  ' try to close the connection
  Try hPwrCtrlClient.Close

  hPwrCtrlClient = New UdpSocket As "PwrCtrlClient"
  Try hPwrCtrlClient.Bind($iUDPPortRead)

' test
'ParseLine("NET-PwrCtrl:NET-CONTROL    :192.168.1.6:255.255.255.0:192.168.1.1:0.4.163.10.4.36:Nr. 1,0:Nr. 2,1:Nr. 3,0:Nr. 4,0:Nr. 5,0:Nr. 6,0:Nr. 7,0:Nr. 8,0:248:80")

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " UDP Server listening on Port " & $iUDPPortRead)
  IsRunning = True

  ' Wrong place to do all states, when we run into an error?
  GetAllState()

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " UDP Server FAILED to listen on Port " & $iUDPPortRead)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

Public Sub PwrCtrlClient_Ready()

  Main.WriteLog(LogLabel & "UDP socket listening.")

End

Public Sub PwrCtrlClient_Closed()

  Main.WriteLog(LogLabel & "ERROR: UDP socket closed.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hPwrCtrlClient.Close
  Try hBroadcastEvent.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got broadcasted udp message from server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PwrCtrlClient_Read()

  Dim sString As String

  sString = Read #hPwrCtrlClient, Lof(hPwrCtrlClient)
  ' string from Anel PwrCtrl is always the same, doesn't matter which model
  ' NET-PwrCtrl:NET-CONTROL    :192.168.1.6:255.255.255.0:192.168.1.1:0.4.163.10.4.36:Nr. 1,0:Nr. 2,1:Nr. 3,0:Nr. 4,0:Nr. 5,0:Nr. 6,0:Nr. 7,0:Nr. 8,0:248:80
  ParseLine(sString)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received udp message from server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sData As String)

  Dim sScan As String[]
  Dim sDevice, sAddress As String
  Dim iDeviceId, iCnt As Integer

  sScan = Split(sData, ":")
  If Trim(sScan[0]) = "NET-PwrCtrl"
    sDevice = sScan[2]
    For iCnt = 1 To 8
      If $bDebug Then Main.WriteDebugLog(LogLabel & Subst("Device &1 1:&2 2:&3 3:&4 4:&5 5:&6 6:&7 7:&8 8:&9", sDevice, OnOff(sScan[6]), OnOff(sScan[7]), OnOff(sScan[8]), OnOff(sScan[9]), OnOff(sScan[10]), OnOff(sScan[11]), OnOff(sScan[12]), OnOff(sScan[13])))
      sAddress = sDevice & "|" & iCnt
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "PWRCTRL")
      ' if found then update it's value
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, OnOff(sScan[5 + iCnt]))
    Next
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Received other data: " & sData)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' translate on/off
' sState = "Nr. 1,0", return On or Off
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function OnOff(sState As String) As String

  If Split(sState, ",")[1] = "0" Then
    Return "Off"
  Endif
  If Split(sState, ",")[1] = "1" Then
    Return "On"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get the state of all devices in the network
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetAllState()

  Dim sMessage As String = "wer da?" & Chr(10)
  Dim sIp As String

  hBroadcastEvent = New UdpSocket As "BroadcastUDP"
  hBroadcastEvent.Broadcast = True
  hBroadcastEvent.Port = 0
  hBroadcastEvent.Bind()
  hBroadcastEvent.TargetPort = $iUDPPortSend

  For Each sIp In Main.aBroadcastAddrs
    hBroadcastEvent.TargetHost = sIp
    Try Write #hBroadcastEvent, sMessage, Len(sMessage)
    If Not Error Then
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Sent broadcast packet for GetAllState.")
    Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending broadcast packet for GetAllState.")
    Endif
  Next
  Try Close hBroadcastEvent

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' switch device
' sHost is ip of device, sDevice is number 1-8, sValue = on/off
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim sMessage As String
  Dim aScan As String[]

  aScan = Scan(sAddress, "*|*")
  If aScan.Count = 2 Then
    sMessage = "Sw_" & LCase(sValue) & aScan[1] & $sPwrCtrlUserPw ' Sw_off2user1user

    hBroadcastEvent = New UdpSocket As "BroadcastUDP"
    hBroadcastEvent.Broadcast = True
    hBroadcastEvent.Port = 0
    hBroadcastEvent.Bind()
    hBroadcastEvent.TargetPort = $iUDPPortSend
    hBroadcastEvent.TargetHost = aScan[0]

    If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending '" & sMessage & "' to device with address " & aScan[0])

    Try Write #hBroadcastEvent, sMessage, Len(sMessage)
    If Not Error Then
     If $bDebug Then Main.WriteDebugLog(LogLabel & "Sent command to device.")
    Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Error while sending command.")
    Endif
    Try Close hBroadcastEvent
  Else
    Main.WriteDebugLog(LogLabel & "Invalid address given: " & sAddress)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BroadcastUDP_Error()

  Select Case hBroadcastEvent.Status
    Case Net.CannotBindSocket
      Main.WriteDebugLog(LogLabel & "Unable to Bind to that port.")
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(LogLabel & "The system does not allow to create a socket")
    Case Net.CannotRead
      Main.WriteDebugLog(LogLabel & "Error reading data.")
    Case Net.CannotWrite
      Main.WriteDebugLog(LogLabel & "Error writing data.")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PwrCtrlClient_Error()

  ' handle error
  Select Case hPwrCtrlClient.Status
    Case Net.CannotBindSocket
      Main.WriteDebugLog(LogLabel & "Unable to Bind to that port")
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(LogLabel & "The system does not allow to create a socket.")
    Case Net.CannotRead
      Main.WriteDebugLog(LogLabel & "Error reading data.")
    Case Net.CannotWrite
      Main.WriteDebugLog(LogLabel & "Error writing data.")
  End Select

End
