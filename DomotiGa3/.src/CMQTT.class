' Gambas class file

' Description:
' CMQTT.class
' Connect to a MQTT broker to publish device data and listen for incoming data.

' Development Status:
' Working

' Resources:
' http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "MQTT"
Public PluginFriendlyName As String = "MQTT Client"
Public PluginVersion As String = "2.03"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[MQTT] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sClientname As String
Private $sUsername As String
Private $sPassword As String
Private $sPubTopic As String
Private $sSubTopic As String
Private $iHeartBeat As Integer
Private $bRetain As Boolean
Private $iQos As Integer
Private $bDebug As Boolean
Private $bEnablePublish As Boolean
Private $bEnableSubscribe As Boolean
Private $bSSL As Boolean
Private $iSSLCertificate As Integer
Private $bBirthLastWill As Boolean ' Publish Birth and Last Will message. Last will will be set during connect too
Private $sBirthLastWillTopic As String = "domotiga/status"
Private $sBirthMessage As String = "online"
Private $sLastWillMessage As String = "offline"
Private $bSendAllValues As Boolean ' Send all values to MQTT broker on start-up
Private $sPublishSeparator As String ' Separator to subscribe to multiple topics

' Interface objects
Public hMySocket As CSocket

Public tMQTTPing As Timer
Public tMQTTBusy As Timer
Private bRxBuf As New Byte[]      ' the received data
Private dRxStarted As Date        ' start of the (last) receive

' queue and command buffer stuff
Private cQueue As New Collection  ' command buffer
Private bBusy As Boolean          ' waiting for delay timer to finish
Private $bDisconnect As Boolean   ' Signal to disconnect client, prevent a disconnect error from server

' message types
Const MQTT_CONNECT As Integer = &H01
Const MQTT_CONNACK As Integer = &H02
Const MQTT_PUBLISH As Integer = &H03
Const MQTT_PUBACK As Integer = &H04
Const MQTT_PUBREC As Integer = &H05
Const MQTT_PUBREL As Integer = &H06
Const MQTT_PUBCOMP As Integer = &H07
Const MQTT_SUBSCRIBE As Integer = &H08
Const MQTT_SUBACK As Integer = &H09
'Const MQTT_UNSUBSCRIBE As Integer = &H0A ' 10
'Const MQTT_UNSUBACK As Integer = &H0B ' 11
Const MQTT_PINGREQ As Integer = &H0C ' 12
Const MQTT_PINGRESP As Integer = &H0D ' 13
Const MQTT_DISCONNECT As Integer = &H0E ' 14
'Const MQTT_RESERVED As Integer = &H0F ' 15

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sClientname = cPl.Settings["clientname"]
  $sUsername = cPl.Settings["username"]
  $sPassword = cPl.Settings["password"]
  $sPubTopic = cPl.Settings["pubtopic"]
  $sSubTopic = cPl.Settings["subtopic"]
  $iHeartbeat = cPl.Settings["heartbeat"]
  $bRetain = cPl.Settings["retain"]
  $iQoS = cPl.Settings["qos"]
  $bDebug = cPl.Settings["debug"]
  $bEnablePublish = cPl.Settings["enablepublish"]
  $bEnableSubscribe = cPl.Settings["enablesubscribe"]
  $bSSL = cPl.Settings["sslenabled"]
  $iSSLCertificate = cPl.Settings["sslcertificate_id"]
  $bBirthLastWill = cPl.Settings["birthlastwill"]
  $bSendAllValues = cPl.Settings["sendallvalues"]

  ' Hardcoded to "|" at this moment
  $sPublishSeparator = "|"

  InterfaceId = Devices.FindInterface("MQTT Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0
  Dim rResult As Result

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  ' Data is received in array of bytes
  hMySocket.DataType = &HFF + gb.Byte

  ' We support also SSL if required
  If $bSSL Then
    hMySocket.Encrypt = Net.SSL

    ' No Certificate is needed, this is optional
    If $iSSLCertificate >= 1 Then

      rResult = Main.hDB.Exec("SELECT * FROM sslcertificates WHERE id = " & $iSSLCertificate)

      If rResult And If rResult.Available And If rResult.Count = 1 Then
        hMySocket.SSLCertificate = IIf(rResult!certificate, Main.sBaseDir &/ "certificate" &/ rResult!certificate, "")
      Else
        Error.Raise("SSL enabled, but no SSL certificate found in the database")
      Endif
    Endif

  Endif

  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to broker " & $sTCPHost & ":" & $iTCPPort & IIf($bSSL, " (SSL)", ""))

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to broker " & $sTCPHost & ":" & $iTCPPort & IIf($bSSL, " (SSL)", ""))
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' Possible publish the offline topic for DomotiGa
  If $bBirthLastWill Then
    PublishMsg($sBirthLastWillTopic, $sLastWillMessage, True)
  Endif

  ' tell MQTT broker that we want to disconnect
  ClientDisconnect()

  ' try to close the connection
  Try hMySocket.Close

  ' try stop running timers
  StopTimers()

  WriteLog(PluginFriendlyName & " TCP connection closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

  Try tMQTTPing.Stop
  Try tMQTTBusy.Stop

  ' Set busy to false, otherwise with a reconnect nothing is send
  bBusy = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Run after succesfull connect
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  bRxBuf.Clear

  ' start ping timer
  tMQTTPing = New Timer As "tMQTTPing"
  tMQTTPing.Delay = $iHeartBeat * 500 ' take maximum idle time half of the heartbeat time in seconds
  tMQTTPing.Start

  ' define timer for busy
  tMQTTBusy = New Timer As "tMQTTBusy"
  tMQTTBusy.Stop

  ' Do a proper MQTT connect now the connection is up
  ClientConnect($sClientname)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  ' Only report an error, when we didn't send a disconnect ourselves
  If $bDisconnect Then
    ErrorText = ""
  Else
    WriteLog("ERROR: TCP socket closed by peer.")
    ErrorText = "TCP socket closed by peer"
  Endif

  IsRunning = False

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port. vVar is gb.String
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tMQTTPing_Timer()

  If DateDiff(Now(), dRxStarted, gb.Second) > 3 Then
    DumpMessage("<", bRxBuf)
    WriteDebugLog("ERROR: Timeout while receiving data, data flushed")
    bRxBuf.Clear()
  Endif

  ClientHeartBeat()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish generic commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim aDim As String[]

  ' dimmer
  If InStr(UCase(sValue), "DIM ") Or InStr(UCase(sValue), "SP ") ' DIM 1 - 99 or SP SetPoint
    aDim = Split(sValue, " ")
    If aDim.Count = 2 Then
      PublishMsg(sAddress, sValue, True)
    Else
      WriteDebugLog("Invalid dim/setpoint command '" & sValue & "'!")
      Return
    Endif
  ' switch
  Else If UCase(sValue) == "ON" Or If UCase(sValue) == "OFF" Then
    PublishMsg(sAddress, sValue, True)
  Else
    ' invalid
    WriteDebugLog("Invalid command '" & sValue & "'!")
    Return
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send connect message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ClientConnect(sId As String)

  Dim bBuf As New Byte[512]
  Dim iCnt As Integer
  Dim iOffset As Integer

  $bDisconnect = False

  ' fixed header
  bBuf[0] = Shl(MQTT_CONNECT, 4) ' MSB

  ' bBuf[1] = 12 + Len(sId) + 2 ' remaining length
  ' Required order: Id, Will Topic, Will Message, UserName, Password

  bBuf[1] = 12 + 2 + Len(sId) ' id is mandatory

  If $bBirthLastWill Then
    bBuf[1] = bBuf[1] + 2 + Len($sBirthLastWillTopic)
    bBuf[1] = bBuf[1] + 2 + Len($sLastWillMessage)
  Endif

  If Len($sUsername) Then
    bBuf[1] = bBuf[1] + 2 + Len($sUsername)
    bBuf[1] = bBuf[1] + 2 + Len($sPassword)
  Endif

  ' var header
  bBuf[2] = &H0   ' 0
  bBuf[3] = &H6   ' 6
  bBuf[4] = &H4D  ' M
  bBuf[5] = &H51  ' Q
  bBuf[6] = &H49  ' I
  bBuf[7] = &H73  ' s
  bBuf[8] = &H64  ' d
  bBuf[9] = &H70  ' p
  bBuf[10] = &H3  ' protocol version = 3

  ' connect flag
  bBuf[11] = &H2  ' clean session only

  If $sUsername Then bBuf[11] = BSet(bBuf[11], 7)
  If $sPassword And If Not $sUsername Then
    If $bDebug Then WriteDebugLog("ERROR: You cannot supply a password without a username!")
    Return
  Else
    bBuf[11] = BSet(bBuf[11], 6)
  Endif

  bBuf[12] = Shr($iHeartBeat, 8)   ' MSB keepalive
  bBuf[13] = $iHeartBeat And 255   ' LSB

  ' If Birth and Last Will is enabled, we publish a "domotiga/status" with "online" or "offline"
  If $bBirthLastWill Then
    bBuf[11] = BSet(bBuf[11], 2)

    ' Set retain if required
    If $bRetain Then BSet(bBuf[11], 5)

    ' Set Quality of Service if required
    Select $iQoS
      Case 0
        ' default
     Case 1
        bBuf[11] = BSet(bBuf[11], 3)
      Case 2
        bBuf[11] = BSet(bBuf[11], 4)
    End Select

  Endif

  ' id
  iOffset = 13 ' 13 (header+var)
  bBuf.Add(&H00, iOffset + 1) ' ID string length MSB
  bBuf.Add(Len(sId), iOffset + 2) ' ID string length LSB

  For iCnt = 1 To Len(sId)
    bBuf.Add(Asc(Mid(sId, iCnt, 1)), iOffset + 2 + iCnt)
  Next

  iOffset = iOffset + 2 + Len(sId)

  ' Topic + Last Will message
  If $bBirthLastWill Then
    ' Topic
    bBuf.Add(&H00, iOffset + 1)
    bBuf.Add(Len($sBirthLastWillTopic), iOffset + 2)

    For iCnt = 1 To Len($sBirthLastWillTopic)
      bBuf.Add(Asc(Mid($sBirthLastWillTopic, iCnt, 1)), iOffset + 2 + iCnt)
    Next

    iOffset = iOffset + 2 + Len($sBirthLastWillTopic)

    ' Last Will message
    bBuf.Add(&H00, iOffset + 1)
    bBuf.Add(Len($sLastWillMessage), iOffset + 2)

    For iCnt = 1 To Len($sLastWillMessage)
      bBuf.Add(Asc(Mid($sLastWillMessage, iCnt, 1)), iOffset + 2 + iCnt)
    Next

    iOffset = iOffset + 2 + Len($sLastWillMessage)

  Endif

  ' username + password
  If $sUsername Then
    ' username length MSB (0 since 255 chars is enough)
    bBuf.Add(&H00, iOffset + 1)
    bBuf.Add(Len($sUsername), iOffset + 2)

    For iCnt = 1 To Len($sUsername)
      bBuf.Add(Asc(Mid($sUsername, iCnt, 1)), iOffset + 2 + iCnt)
    Next

    iOffset = iOffset + 2 + Len($sUsername)
 
    ' password length MSB (0 since 255 chars is enough)
    bBuf.Add(&H00, iOffset + 1)
    bBuf.Add(Len($sPassword), iOffset + 2)

    For iCnt = 1 To Len($sPassword)
      bBuf.Add(Asc(Mid($sPassword, iCnt, 1)), iOffset + 2 + iCnt)
    Next

    iOffset = iOffset + 2 + Len($sPassword)
  Endif

  If $bDebug Then WriteDebugLog("Connecting to broker.")

  bBuf.Resize(2 + bBuf[1])
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send disconnect message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ClientDisconnect()

  Dim bBuf As New Byte[2]

  $bDisconnect = True

  bBuf[0] = Shl(MQTT_DISCONNECT, 4) ' MSB
  bBuf[1] = &H0

  If $bDebug Then WriteDebugLog("Disconnecting from broker.")
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send heartbeat message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ClientHeartBeat()

  Dim bBuf As New Byte[2]

  bBuf[0] = Shl(MQTT_PINGREQ, 4) ' MSB
  bBuf[1] = &H0

  If $bDebug Then WriteDebugLog("Sending heartbeat to broker.")
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' subscribe message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SubscribeTopic(sTopic As String)

  Dim bBuf As New Byte[255]
  Dim iCnt, iTopicLen As Integer

  iTopicLen = Len(sTopic)

  ' fixed header
  bBuf[0] = Shl(MQTT_SUBSCRIBE, 4) ' subscribe
  bBuf[1] = &H5 + Len(sTopic) ' remaining length
  bBuf[2] = &H0   ' MSB
  bBuf[3] = &HA   ' message id
  bBuf[4] = iTopicLen / 128   ' MSB
  bBuf[5] = iTopiclen Mod 128 ' # bytes of topic

  For iCnt = 1 To Len(sTopic)
    bBuf.Add(Asc(sTopic, iCnt), 5 + iCnt)
  Next
  bBuf.Add(&H0, 5 + Len(sTopic) + iCnt + 1)

  If $bDebug Then WriteDebugLog("Subscribing to Topic '" & sTopic & "'")
  bBuf.Resize(&H7 + Len(sTopic))
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PublishMsg(sTopic As String, sMsg As String, Optional bRawTopic As Boolean = False)

  Dim bBuf As New Byte[255]
  Dim iCnt, iTopicLen, iMsgLen As Integer
  Dim iRnd As Integer
  Dim iQoSLen As Integer

  If Not $bEnablePublish Then Return

  ' don't add publish topic
  If bRawTopic = False Then sTopic = $sPubTopic &/ sTopic

  iTopicLen = Len(sTopic)
  iMsgLen = Len(sMsg)

  ' remove wildcards
  sTopic = Replace(sTopic, "#", " ")
  sTopic = Replace(sTopic, "+", " ")

  bBuf[0] = Shl(MQTT_PUBLISH, 4)

  ' publish with retain enabled if set
  If $bRetain Then bBuf[0] = BSet(bBuf[0], 0)

  ' set chosen QoS
  Select $iQoS
    Case 0
      ' default
      iQoSLen = 0
    Case 1
      bBuf[0] = BSet(bBuf[0], 1)
      iQoSLen = 2
    Case 2
      bBuf[0] = BSet(bBuf[0], 2)
      iQoSLen = 2
    Default
      If $bDebug Then WriteDebugLog("Invalid QoS value '" & $iQoS & "' set!")
      Return
  End Select

  ' Add 2 bytes if QoS 1 or 2 is enabled for packet id
  bBuf[1] = iTopicLen + iMsgLen + 2 + iQoSLen ' remaining length

  bBuf[2] = iTopicLen / 128         ' MSB topic length
  bBuf[3] = iTopicLen Mod 128       ' LSB

  For iCnt = 1 To Len(sTopic)
    bBuf.Add(Asc(sTopic, iCnt), 3 + iCnt)
  Next

  ' Add 2 bytes for packet id when QoS is 1 or 2
  If iQoSLen > 0 Then
    iRnd = Int(Rnd(1, 65535))

    bBuf.Add(iRnd / 256, 3 + iTopicLen + 1)
    bBuf.Add(iRnd Mod 256, 3 + iTopicLen + 2)
  Endif

  For iCnt = 1 To Len(sMsg)
    bBuf.Add(Asc(sMsg, iCnt), 3 + iTopicLen + iQoSLen + iCnt)
  Next

  If $bDebug Then WriteDebugLog("Publishing Message '" & sMsg & "' to Topic '" & sTopic & "'" & IIf(iQoSLen > 0, ", with Packet id " & iRnd & ".", ""))
  bBuf.Resize(&H04 + Len(sTopic) + iQoSLen + Len(sMsg))
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub QueueCommand(aPacket As Byte[])

  ' add command to queue
  cQueue.Add(aPacket, Rnd)

  ' if not busy process it
  If bBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DoQueue()

  Dim aPacket As Byte[] = Null

  For Each aPacket In cQueue
    WriteCommand(aPacket, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tMQTTBusy_Timer()

  bBusy = False
  tMQTTBusy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then WriteDebugLog("Sending next command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' writes the packets
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteCommand(bBuffer As Byte[], sKey As String)

  hMySocket.Write(bBuffer)
  If $bDebug Then DumpMessage(">", bBuffer)

  ' remove sent command from queue
  If sKey Then cQueue.Remove(sKey)

  ' reset heartbeat time-out
  tMQTTPing.Start

  tMQTTBusy.Delay = 3 ' 3 milliseconds - Mosquitto MQTT Broker can handle this
  tMQTTBusy.Start
  If bBusy = False Then bBusy = True

Catch
  WriteLog("ERROR: Not connected to MQTT Broker, cannot Publish!")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Dump first part of the MQTT message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DumpMessage(sTxRx As String, bBuffer As Byte[])

  Dim sStr As String
  Dim iIndex As Integer
  Dim iLen As Integer

  ' Dump (first part of) received packet
  sStr = sTxRx
  iLen = Min(bBuffer.Length - 1, 50)

  For iIndex = 0 To iLen
    sStr &= " " & Hex(bBuffer[iIndex], 2)
  Next

  If iLen < bBuffer.Length - 1 Then
    sStr &= " ..."
  Endif

  WriteDebugLog(sStr)

End

Private Sub ProcessReceivedChar(bByte As Byte)

  Dim iType As Integer
  Dim iLength, iIndex As Integer
  Dim bShift As Byte
  Dim bLengthKnown As Boolean = False
  Dim iRetain As Integer
  Dim iQoS As Integer

  If bRxBuf.Length = 0 Then
    ' Check if the receive does not take too long because of junk data (checked in tMQTTPing_Timer)
    dRxStarted = Now()
  Endif

  bRxBuf.Push(bByte)

  ' Length: 0..127 one byte, 128..16 383 two bytes, 16384..2097151 three bytes, 2097152..268435455 four bytes
  iLength = 0
  bShift = 0
  iIndex = 1

  While bRxBuf.Length > iIndex
    iLength += Lsl(CInt(bRxBuf[iIndex] And 127), bShift)

    ' Last byte?
    If Not BTst(bRxBuf[iIndex], 7) Then
      bLengthKnown = True
      Break
    Endif

    bShift += 7
    iIndex += 1

    ' Maximum 4 length bytes
    If (bShift > 3 * 7) Then
      If $bDebug Then
        DumpMessage("<", bRxBuf)
        WriteDebugLog("ERROR: Ignoring packet with invalid length")
        bRxBuf.Clear()
        Return
      Endif
    Endif
  Wend

  ' Received enough data?
  If bLengthKnown = False Or If bRxBuf.Length < iLength + iIndex + 1 Then
    ' Not yet
    Return
  Endif

  If $bDebug Then
    DumpMessage("<", bRxBuf)
  Endif

  iType = Lsr(bRxBuf[0], 4)

  ' Determine retain status of published message
  iRetain = 0
  If BTst(bRxBuf[0], 0) Then iRetain = 1

  ' Determine Quality of Service of published message
  iQoS = 0
  If BTst(bRxBuf[0], 1) Then iQoS = 1
  If BTst(bRxBuf[0], 2) Then iQoS = 2

  ' Remove the (variable length) fixed header
  bRxBuf.Remove(0, iIndex + 1)

  Select iType
    ' connack
    Case MQTT_CONNACK
       DecodeConnAck(bRxBuf)
    ' puback
    Case MQTT_PUBACK
      DecodePubAck(bRxBuf)
    ' pingresp
    Case MQTT_PINGRESP
      If $bDebug Then WriteDebugLog("Broker replied with alive packet.")
    Case MQTT_SUBACK
      'DecodeSubAck(bRxBuf)
      If $bDebug Then WriteDebugLog("Subscribe acknowledgement packet.")
    Case MQTT_PUBLISH
      DecodePublish(bRxBuf, iRetain, iQoS)
    Case MQTT_PUBREC
      DecodePubRec(bRxBuf)
    Case MQTT_PUBCOMP
      DecodePubComp(bRxBuf)
    Default
      If $bDebug Then WriteDebugLog("Received unsupported packet type " & iType)
  End Select

  bRxBuf.Clear()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Decode any MQTT PUBLISH
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodePublish(bBuffer As Byte[], iRetain As Integer, iQoS As Integer)

  Dim iTopicLen, iDeviceId As Integer
  Dim sTopic, sPayload, sDeviceTypeDescr, sDevice As String
  Dim cTest As Collection
  Dim bBuf As New Byte[4]
  Dim iPacketId As Integer

  If $bDebug Then WriteDebugLog("Received published data.")

  If iRetain >= 1 And $bDebug Then WriteDebugLog("Retain : True")
  If iQoS >= 1 And $bDebug Then WriteDebugLog("QoS : " & iQoS)

  ' extract topic. Length: MSB @ offset 0, LSB @ offset 1
  iTopicLen = Lsl(CInt(bBuffer[0]), 8) + bBuffer[1]
  sTopic = bBuffer.ToString(2, iTopicLen)
  If $bDebug Then WriteDebugLog("Received topic : '" & sTopic & "'")

  ' extract payload - if QoS is enabled, it adds 2 bytes as Packet id
  If iQoS >= 1 Then
    sPayload = bBuffer.ToString(4 + iTopicLen)
  Else
    sPayload = bBuffer.ToString(2 + iTopicLen)
  Endif

  If $bDebug Then WriteDebugLog("Received payload : '" & sPayload & "'")

  ' If QoS is 1, send a PUBLISH acknowledgement back
  If iQoS = 1 Then
    iPacketId = CInt(bBuffer[2 + iTopicLen]) * &H100 + bBuffer[3 + iTopicLen]
    WriteDebugLog("Sending Publish acknowledgement to broker, with Packet id=" & iPacketId & ".")

    bBuf[0] = Shl(MQTT_PUBACK, 4) ' MSB
    bBuf[1] = &H02 ' 2 bytes send back as packet id
    bBuf[2] = bBuffer[2 + iTopicLen]
    bBuf[3] = bBuffer[3 + iTopicLen]
 
    QueueCommand(bBuf)
  Endif

  If iQoS = 2 Then
    ' TODO
  Endif

  ' try to determine type of payload
  Try cTest = JSON.Decode(sPayload)
  If cTest And If cTest.Count Then
    sDevice = "MQTT-JSON"
  Else
    sDevice = "MQTT-GENERIC"
  Endif

  ' lookup device
  iDeviceId = Devices.Find(Instance, sTopic, InterfaceId, sDevice)
  If iDeviceId Then
    ' what kind of mqtt devicetype is this device set to?
    sDeviceTypeDescr = Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId)
    Select sDeviceTypeDescr
      Case "MQTT Owntracks Client"
        DecodeOwntracks(iDeviceId, sPayload)
      Case "MQTT Generic"
        Devices.ValueUpdate(iDeviceId, 1, sPayload)
      Case "MQTT JSON Generic"
        DecodeJSON(iDeviceId, sPayload)
      Default
        WriteDebugLog("ERROR: Unsupported devicetype '" & sDeviceTypeDescr & "'")
    End Select

  Else
    WriteDebugLog("ERROR: No device found with address '" & sTopic & "'")
  Endif

Catch
  WriteLog("ERROR: Decode Publish failed. '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodeJSON(iDeviceId As Integer, sPayload As String)

  Dim iValueNum As Integer = 1
  Dim cPayload As Collection
  Dim sValue As String

  If $bDebug Then WriteDebugLog("Received JSON formatted data:")
  cPayload = JSON.Decode(sPayload)
  If cPayload.Count Then
    For Each sValue In cPayload
      If $bDebug Then
        WriteDebugLog("Value#: " & iValueNum)
        WriteDebugLog("Field: '" & cPayload.Key & "'")
        WriteDebugLog("Value: '" & sValue & "'")
      Endif
      Devices.ValueUpdate(iDeviceId, iValueNum, sValue)
      Inc iValueNum
    Next
  Endif

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  WriteLog("Received payload is probably not in correct JSON format, payload = '" & sPayload & "'!")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodeOwntracks(iDeviceId As Integer, sPayload As String)

  Dim cPayload As Collection
  Dim sType, sLat, sLon, sRad, sVac, sDesc, sAcc, sBatt, sEvent, sAlt, sCog, sVel, sTst, sTid As String
  Dim sEmpty As String = " " ' If we do not get an optional field we want to clear it but Devices.ValueUpdate ignores ""

  cPayload = JSON.Decode(sPayload)
  If cPayload["_type"] = "location" Then
    sType = cPayload["_type"]
    sLat = cPayload["lat"]
    sLon = cPayload["lon"]
    sAcc = cPayload["acc"]
    sBatt = cPayload["batt"]
    sEvent = cPayload["event"]
    sTst = Util.TimeSinceEpoch(cPayload["tst"])
    sAlt = IIf(cPayload["alt"] <> Null, cPayload["alt"], sEmpty)
    sCog = IIf(cPayload["cog"] <> Null, cPayload["cog"], sEmpty)
    sVel = IIf(cPayload["vel"] <> Null, cPayload["vel"], sEmpty) ' speed in km/hr
    sDesc = IIf(cPayload["desc"] <> Null, cPayload["desc"], sEmpty)
    If $bDebug Then
      WriteDebugLog("Received Owntracks client data:")
      WriteDebugLog("Type: " & sType)
      WriteDebugLog("Latitude: " & sLat)
      WriteDebugLog("Longitude: " & sLon)
      WriteDebugLog("Accuracy: " & sAcc)
      WriteDebugLog("Battery: " & sBatt & "%")
      WriteDebugLog("Event: " & sEvent)
      WriteDebugLog("Timestamp: " & sTst)
      If sAlt <> sEmpty Then WriteDebugLog("Altitude: " & sAlt)
      If sCog <> sEmpty Then WriteDebugLog("Heading: " & sCog)
      If sVel <> sEmpty Then WriteDebugLog("Speed: " & sVel)
      If sDesc <> sEmpty Then WriteDebugLog("Description: " & sDesc)
    Endif
    Devices.ValueUpdate(iDeviceId, 1, sLat)
    Devices.ValueUpdate(iDeviceId, 2, sLon)
    Devices.ValueUpdate(iDeviceId, 3, sEvent)
    Devices.ValueUpdate(iDeviceId, 4, sAcc)
    Devices.ValueUpdate(iDeviceId, 5, sTst)
    Devices.ValueUpdate(iDeviceId, 6, sAlt)
    Devices.ValueUpdate(iDeviceId, 7, sCog)
    Devices.ValueUpdate(iDeviceId, 8, sVel)
    Devices.ValueUpdate(iDeviceId, 9, sDesc)
    Devices.Battery(iDeviceId, sBatt)
  Else If cPayload["_type"] = "waypoint" Then
    sType = cPayload["_type"]
    sLat = cPayload["lat"]
    sLon = cPayload["lon"]
    sRad = cPayload["rad"]
    sVac = cPayload["vac"]
    sDesc = cPayload["desc"]
    sTst = Util.TimeSinceEpoch(cPayload["tst"])
    sTid = IIf(cPayload["tid"] <> Null, cPayload["tid"], sEmpty)
    sAlt = IIf(cPayload["alt"] <> Null, cPayload["alt"], sEmpty)
    sCog = IIf(cPayload["cog"] <> Null, cPayload["cog"], sEmpty)
    sVel = IIf(cPayload["vel"] <> Null, cPayload["vel"], sEmpty) ' speed in km/hr
    If $bDebug Then
      WriteDebugLog("Received Owntracks client data:")
      WriteDebugLog("Type: " & sType)
      WriteDebugLog("Latitude: " & sLat)
      WriteDebugLog("Longitude: " & sLon)
      WriteDebugLog("Description: " & sDesc)
      WriteDebugLog("Vertical accuracy: " & sVac)
      WriteDebugLog("Timestamp: " & sTst)
      If sAlt <> sEmpty Then WriteDebugLog("Altitude: " & sAlt)
      If sCog <> sEmpty Then WriteDebugLog("Heading: " & sCog)
      If sVel <> sEmpty Then WriteDebugLog("Speed: " & sVel)
      WriteDebugLog("Radius: " & sRad)
      If sTid <> sEmpty Then WriteDebugLog("Tracker-ID: " & sTid)
    Endif
    Devices.ValueUpdate(iDeviceId, 1, sLat)
    Devices.ValueUpdate(iDeviceId, 2, sLon)
    Devices.ValueUpdate(iDeviceId, 3, sDesc)
    Devices.ValueUpdate(iDeviceId, 4, sVac)
    Devices.ValueUpdate(iDeviceId, 5, sTst)
    Devices.ValueUpdate(iDeviceId, 6, sAlt)
    Devices.ValueUpdate(iDeviceId, 7, sCog)
    Devices.ValueUpdate(iDeviceId, 8, sVel)
    Devices.ValueUpdate(iDeviceId, 9, sRad)
    Devices.ValueUpdate(iDeviceId, 10, sTid)
  Else
    If $bDebug Then WriteDebugLog("Owntracks payload type '" & cPayload["_type"] & "' not supported.")
  Endif

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  WriteLog("Received payload is not using Owntracks location format '" & sPayload & "'!")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Publish the values of all enabled/not hidden devices if required at connect
' Can be handy for MQTT clients who don't keep their states after restart
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PublishAllValues(Optional bSendAllValues As Boolean = True)

  Dim rResult As Result

  If $bEnablePublish And If bSendAllValues Then

    ' Do it for all values
    rResult = Devices.FindAllEnabledNotHiddenDevicesAndValues()
    If rResult And If rResult.Available Then
      For Each rResult
        If rResult!value Then PublishMsg(rResult!name & "/" & "value" & rResult!valuenum, rResult!value)
      Next
    Endif

    ' Now do the batterystatus values too
    rResult = Devices.GetDeviceList("enabled+visible")
    If rResult And If rResult.Available Then
      For Each rResult
        ' Only publish if the field is not empty
        If rResult!batterystatus <> "" Then PublishMsg(rResult!name & "/" & "battery", rResult!batterystatus)
      Next
    Endif
  Else
    WriteDebugLog("Publish All Values Called, but not executed. Publish is '" & Util.DisplayBool($bEnablePublish) & "' and Send All Values is '" & Util.DisplayBool(bSendAllValues) & "'.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Decode MQTT CONNACK message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodeConnAck(bBuffer As Byte[])

  Dim eTopic As String[]
  Dim sTopic As String

  ' Connect Return code
  Select bBuffer[1]
    Case 0
      WriteDebugLog("Connection accepted by broker.")

      ' We should send a birth message is we connected succesfully
      If $bBirthLastWill Then
        PublishMsg($sBirthLastWillTopic, $sBirthMessage, True)
      Endif

      ' Only subscribe if we are successfully connect
      If $bEnableSubscribe Then

        ' We check if we are subscribing to multiple topics, because "#" is too much,
        ' because we get anything in and we do an autocreate for all MQTT messages received
        eTopic = Split($sSubTopic, $sPublishSeparator)

        ' Now subscribe to each topic, but we ignore possible empty topics
        For Each sTopic In eTopic
          If sTopic Then SubscribeTopic(sTopic)
        Next
      Endif

      ' Publish the values of all enabled/not hidden devices if required at connect
      ' Can be handy for MQTT clients who don't keep their states after restart
      PublishAllValues($bSendAllValues)

    Case 1
      WriteDebugLog("Connection refused by broker, wrong protocol version.")
    Case 2
      WriteDebugLog("Connection refused by broker, identifier refused.")
    Case 3
      WriteDebugLog("Connection refused by broker, MQTT service unavailable.")
    Case 4
      WriteDebugLog("Connection refused by broker, bad username or password.")
    Case 5
      WriteDebugLog("Connection refused by broker, client is not authorized.")
    Default
      WriteDebugLog("ERROR: Received unknown CONNACK status code (" & bBuffer[1] & ") !")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Decode MQTT PUBACK message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodePubAck(bBuffer As Byte[])

  Dim iPacketId As Integer

  If bBuffer.Length = 2 Then
    iPacketId = CInt(bBuffer[0]) * &H100 + bBuffer[1]
    WriteDebugLog("Publish acknowledgement by broker, with Packet id=" & iPacketId & ".")
  Else
    WriteDebugLog("Publish acknowledgement by broker, but invalid length.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Decode MQTT PUBREC message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodePubRec(bBuffer As Byte[])

  Dim iPacketId As Integer
  Dim bBuf As New Byte[4]

  If bBuffer.Length = 2 Then
    iPacketId = CInt(bBuffer[0]) * &H100 + bBuffer[1]
    WriteDebugLog("Publish received by broker, with Packet id=" & iPacketId & ".")

    ' Send Public Release back
    WriteDebugLog("Publish released send to broker, with Packet id=" & iPacketId & ".")

    bBuf[0] = Shl(MQTT_PUBREL, 4) ' MSB
    bBuf[0] = BSet(bBuf[0], 1)
    bBuf[1] = &H02 ' 2 bytes send back as packet id
    bBuf[2] = bBuffer[0]
    bBuf[3] = bBuffer[1]
 
    WriteCommand(bBuf, "")
  Else
    WriteDebugLog("Publish received by broker, but invalid length.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Decode MQTT PUBCOMP message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodePubComp(bBuffer As Byte[])

  Dim iPacketId As Integer

  If bBuffer.Length = 2 Then
    iPacketId = CInt(bBuffer[0]) * &H100 + bBuffer[1]
    WriteDebugLog("Publish complete by broker, with Packet id=" & iPacketId & ".")
  Else
    WriteDebugLog("Publish complete by broker, but invalid length.")
  Endif

End
