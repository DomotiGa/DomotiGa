' Gambas class file

' Description:
' CMQTT.class
' Connect to a MQTT broker to publish device data and listen for incoming.

' Development Status:
' Just started.

' Resources:
' http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Property Host As String
Property Port As Integer
Property Username As String
Property Password As String
Property PubTopic As String
Property SubTopic As String
Property HeartBeat As Integer
Property MQTTDebug As Boolean

Private sTCPHost As String
Private iTCPPort As Integer
Private sUsername As String
Private sPassword As String
Private sPubTopic As String
Private sSubTopic As String
Private iHeartBeat As Integer
Private bMQTTDebug As Boolean

Public hMQTT As New Socket
Private RecBuf As New Byte[30]
Private RecBytes As Byte

' message types
Const MQTTCONNECT As Byte = &H10
Const MQTTCONNACK As Byte = &H20
Const MQTTPUBLISH As Byte = &H30
Const MQTTPINGRESP As Byte = &D0
Const MQTTSUBSCRIBE As Byte = &H80

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hMQTT.Close

  ' get a new one
  hMQTT = New Socket As "MQTT"
  hMQTT.Connect(sTCPHost, iTCPPort)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("MQTT Error: ") & ERROR.Text & (" at ") & ERROR.Where)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' first tell MQTT broker that we want to disconnect
  ClientDisconnect()

  ' try to close the connection
  Try hMQTT.Close
  Main.WriteLog(("MQTT socket close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("MQTT Error: ") & ERROR.Text)
  Return False

End

Public Sub MQTT_Error()

  ' handle error
  Select Case hMQTT.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(("MQTT: The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(("MQTT: Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(("MQTT: Unable to connect. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(("MQTT: Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(("MQTT: Error writing data."))
  End Select

End

Public Sub MQTT_Read()

  Dim bByte As Byte

  Try bByte = Read #hMQTT As Byte
  If Error Then Main.WriteDebugLog(("[MQTT] Error reading data from network socket! -> ") & Error.Text)

  ParseMessage(bByte)

End

Public Sub MQTT_Ready()

  Main.WriteLog(("MQTT socket connected."))
  ClientConnect("DomotiGa")
  SubscribeTopic(sSubTopic)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send connect message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ClientConnect(sId As String)

  Dim bBuf As New Byte[128]
  Dim iCnt As Integer

  ' fixed header
  bBuf[0] = MQTTCONNECT ' connect
  bBuf[1] = 12 + Len(sId) + 2 ' remaining length

  ' var header
  bBuf[2] = &H0   ' 0
  bBuf[3] = &H6   ' 6
  bBuf[4] = &H4D  ' M
  bBuf[5] = &H51  ' Q
  bBuf[6] = &H49  ' I
  bBuf[7] = &H73  ' s
  bBuf[8] = &H64  ' d
  bBuf[9] = &H70  ' p
  bBuf[10] = &H3  ' protocol version = 3
  bBuf[11] = &H2  ' clean session only
  bBuf[12] = &H0  ' MSB keepalive
  bBuf[13] = iHeartBeat ' LSB
  bBuf[14] = &H0  ' ID string length MSB
  bBuf[15] = Len(sId)  ' ID string length LSB

  ' id
  For iCnt = 1 To Len(sId)
    bBuf.Add(Asc(Mid(sId, iCnt, 1)), 15 + iCnt)
  Next

  If bMQTTDebug Then Main.WriteDebugLog(("[MQTT] Connecting to broker."))
  WriteMessage(bBuf, 2 + bBuf[1])

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send disconnect message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ClientDisconnect()

  Dim bBuf As New Byte[2]

  bBuf[0] = -&H7F + &5F ' disconnect
  bBuf[1] = &H0

  If bMQTTDebug Then Main.WriteDebugLog(("[MQTT] Disconnecting from broker."))
  WriteMessage(bBuf, 2)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send heartbeat message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendHeartBeat()

  Dim bBuf As New Byte[2]

  bBuf[0] = -&H7F + &5F
  bBuf[1] = &H0

  If bMQTTDebug Then Main.WriteDebugLog(("[MQTT] Disconnecting from broker."))
  WriteMessage(bBuf, 2)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' subscribe message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SubscribeTopic(sTopic As String)

  Dim bBuf As New Byte[128]
  Dim iCnt, iTopicLen As Integer

  iTopicLen = Len(sTopic)

  ' fixed header
  bBuf[0] = MQTTSUBSCRIBE     ' subscribe
  bBuf[1] = &H5 + Len(sTopic) ' remaining length
  bBuf[2] = &H0   ' MSB
  bBuf[3] = &HA   ' message id
  bBuf[4] = iTopicLen / 128   ' MSB
  bBuf[5] = iTopiclen Mod 128 ' # bytes of topic

  For iCnt = 1 To Len(sTopic)
    bBuf.Add(Asc(sTopic, iCnt), 5 + iCnt)
  Next
  bBuf.Add(&H0, 5 + Len(sTopic) + iCnt + 1)

  If bMQTTDebug Then Main.WriteDebugLog(("[MQTT] Subscribing to Topic '") & sTopic & ("'"))
  WriteMessage(bBuf, &H7 + Len(sTopic))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PublishMsg(sTopic As String, sMsg As String)

  Dim bBuf As New Byte[255]
  Dim iCnt, iTopicLen, iMsgLen As Integer

  sTopic = sPubTopic &/ sTopic
  iTopicLen = Len(sTopic)
  iMsgLen = Len(sMsg)

  ' remove wildcards
  sTopic = Replace(sTopic, "#", " ")
  sTopic = Replace(sTopic, "+", " ")

  bBuf[0] = BSet(MQTTPUBLISH, 0)     ' publish as QoS 0 with retain enabled
  bBuf[1] = iTopicLen + iMsgLen + 2 ' remaining length
  bBuf[2] = iTopicLen / 128 ' MSB topic length
  bBuf[3] = iTopicLen Mod 128 ' LSB
  For iCnt = 1 To Len(sTopic)
    bBuf.Add(Asc(sTopic, iCnt), 3 + iCnt)
  Next
  For iCnt = 1 To Len(sMsg)
    bBuf.Add(Asc(sMsg, iCnt), 3 + iTopicLen + iCnt)
  Next

  If bMQTTDebug Then Main.WriteDebugLog(("[MQTT] Publishing Message '") & sMsg & ("' to Topic '") & sTopic & ("'"))
  WriteMessage(bBuf, &H4 + Len(sTopic) + Len(sMsg))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' writes the packets
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteMessage(bBuffer As Byte[], iLength As Integer)

  Dim iCnt As Integer
  Dim bByte As Byte

  If Not bMQTTDebug Then
    bBuffer.Write(hMQTT, 0, iLength)
    Return
  Endif

  Main.WriteDebugLog("[MQTT] >", True)
  For Each bByte In bBuffer
    If iCnt >= iLength Then Break
    Write #hMQTT, CByte(bByte) As Byte
    Main.WriteRFXDebugLog(" " & Hex(bByte, 2), True)
    Inc iCnt
  Next
  Main.WriteRFXDebugLog("\n", True)

Catch
   Main.WriteDebugLog(("[MQTT] Not connected to MQTT Broker, cannot Publish! ") & Error.Text)

End

Public Sub ParseMessage(bByte As Byte)

  If RecBytes = 0 Then ' 1st byte of a packet received
    If bByte <> 0 Then
      If bMQTTDebug Then Main.WriteRFXDebugLog("[MQTT] < ", 0)
    Endif
  Endif

  Try RecBuf[RecBytes] = bByte ' store received byte
  Inc RecBytes  ' increment byte counter

  If RecBuf[0] = &H20 And If RecBytes = 4 Then ' all bytes of connack packet received
    If bMQTTDebug Then Main.WriteRFXDebugLog(Hex(bByte, 2) & "\n", 1)
    'Decode_Messages()  ' decode message
    RecBytes = 0  ' set to zero to receive next message
  Else
    If bMQTTDebug Then Main.WriteRFXDebugLog(Hex(bByte, 2), 1) ' write the output to the screen
  Endif

End

' implement properties
Private Function Host_Read() As String

  Return sTCPHost

End

Private Sub Host_Write(Value As String)

  sTCPHost = Value

End

Private Function Port_Read() As Integer

  Return iTCPPort

End

Private Sub Port_Write(Value As Integer)

  iTCPPort = Value

End

Private Function MQTTDebug_Read() As Boolean

  Return bMQTTDebug

End

Private Sub MQTTDebug_Write(Value As Boolean)

  bMQTTDebug = Value

End

Private Function Username_Read() As String

  Return sUsername

End

Private Sub Username_Write(Value As String)

  sUsername = Value

End

Private Function Password_Read() As String

  Return sPassword

End

Private Sub Password_Write(Value As String)

  sPassword = Value

End

Private Function PubTopic_Read() As String

  Return sPubTopic

End

Private Sub PubTopic_Write(Value As String)

  sPubTopic = Value

End

Private Function SubTopic_Read() As String

  Return sSubTopic

End

Private Sub SubTopic_Write(Value As String)

  sSubTopic = VALUE

End

Private Function HeartBeat_Read() As Integer

  Return iHeartBeat

End

Private Sub HeartBeat_Write(Value As Integer)

  iHeartBeat = Value

End
