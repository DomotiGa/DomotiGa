' Gambas class file

' Description:
' CMQTT.class
' Connect to a MQTT broker to publish device data and listen for incoming data.

' Development Status:
' Working

' Resources:
' http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "MQTT"
Public PluginFriendlyName As String = "MQTT Client"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[MQTT] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sClientname As String
Private $sUsername As String
Private $sPassword As String
Private $sPubTopic As String
Private $sSubTopic As String
Private $iHeartBeat As Integer
Private $bRetain As Boolean
Private $iQos As Integer
Private $bDebug As Boolean
Private $bEnablePublish As Boolean
Private $bEnableSubscribe As Boolean

Public hMQTT As New Socket
Public tMQTTPing As Timer
Public tMQTTBusy As Timer
Private bRxBuf As New Byte[]     ' the received data
Private dRxStarted As Date       ' start of the (last) receive

' queue and command buffer stuff
Private cQueue As New Collection  ' command buffer
Private bBusy As Boolean          ' waiting for delay timer to finish

' message types
Const MQTTCONNECT As Byte = &H10
Const MQTTCONNACK As Byte = &H20
Const MQTTPUBLISH As Byte = &H30
Const MQTTPINGRESP As Byte = &D0
Const MQTTSUBSCRIBE As Byte = &H80
Const MQTTPUBACK As Byte = &H90

' message types
Const MQTT_CONNECT As Integer = 1
Const MQTT_CONNACK As Integer = 2
Const MQTT_PUBLISH As Integer = 3
Const MQTT_PUBACK As Integer = 4
Const MQTT_SUBACK As Integer = 9
Const MQTT_PINGRESP As Integer = 13

Public tReConnect As Timer
Private iReConnectRetry As Integer = 0 ' retries
Private aReConnectDelay As Integer[] = [5000, 10000, 30000, 60000, 300000, 900000, 1800000, 3600000, 7200000, 14400000] ' 5sec, 10sec, 30sec, 1min, 5min, 15min, 1/2hour, 1hour, 2hours, 4hours

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sClientname = cPl.Settings["clientname"]
  $sUsername = cPl.Settings["username"]
  $sPassword = cPl.Settings["password"]
  $sPubTopic = cPl.Settings["pubtopic"]
  $sSubTopic = cPl.Settings["subtopic"]
  $iHeartbeat = cPl.Settings["heartbeat"]
  $bRetain = cPl.Settings["retain"]
  $iQoS = cPl.Settings["qos"]
  $bDebug = cPl.Settings["debug"]
  $bEnablePublish = cPl.Settings["enablepublish"]
  $bEnableSubscribe = cPl.Settings["enablesubscribe"]

  ' Define timer for reconnect
  tReConnect = New Timer As "tReConnect"
  tReConnect.Delay = iReConnectRetry
  tReConnect.Stop

  InterfaceId = Devices.FindInterface("MQTT Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hMQTT.Close

  ' Init
  bRxBuf.Clear

  ' get a new one
  hMQTT = New Socket As "MQTT"
  hMQTT.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to broker " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready

  ' All went ok
  Return True

Catch ' some errors
  ' Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to broker " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' tell MQTT broker that we want to disconnect
  ClientDisconnect()

  ' try stop running timers
  Try tReConnect.Stop
  Try tMQTTPing.Stop
  Try tMQTTBusy.Stop

  ' try to close the connection
  Try hMQTT.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub MQTT_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg
  ReConnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tReConnect_Timer()

  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MQTT_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

  ' try stop running timers
  Try tMQTTPing.Stop
  Try tMQTTBusy.Stop

  IsRunning = False

  ReConnect()

End

Public Sub MQTT_Read()

  Dim bByte As Byte

  Try bByte = Read #hMQTT As Byte
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from network socket! -> '" & Error.Text & "' at '" & Error.Where & "'")
  ParseMessage(bByte)

End

Public Sub MQTT_Ready()

  If IsRunning Then
    Main.WriteLog(LogLabel & "WARNING: TCP interface was already connected")
  Else
    Main.WriteLog(LogLabel & "TCP interface connected.")
    IsRunning = True

    ' start ping timer
    tMQTTPing = New Timer As "tMQTTPing"
    tMQTTPing.Delay = $iHeartBeat * 500 ' take maximum idle time half of the heartbeat time in seconds
    tMQTTPing.Start

    ' define timer for busy
    tMQTTBusy = New Timer As "tMQTTBusy"
    tMQTTBusy.Stop

    ' connected so reset retry counter
    tReConnect.Stop
    'iReConnectRetry = 0 ' do this in DecodeConnAck()

    ClientConnect($sClientname)
    If $bEnableSubscribe Then SubscribeTopic($sSubTopic)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ReConnect()

  If iReConnectRetry < aReConnectDelay.Max + 1 Then
    Main.WriteLog(LogLabel & "Retry to connect in " & IIf(aReConnectDelay[iReConnectRetry] > 60000, CStr(aReConnectDelay[iReConnectRetry] / 60000) & " minutes.", CStr(aReConnectDelay[iReConnectRetry] / 1000) & " seconds."))
    tReConnect.Delay = aReConnectDelay[iReConnectRetry]
    tReConnect.Start
  Else
    tReConnect.Stop
    Main.WriteLog(LogLabel & "Too many reconnect failures, stopped trying.")
  Endif
  Inc iReConnectRetry

End

Public Sub tMQTTPing_Timer()

  If DateDiff(Now(), dRxStarted, gb.Second) > 3 Then
    DumpMessage("<", bRxBuf)
    Main.WriteDebugLog(LogLabel & "ERROR: Timeout while receiving data, data flushed")
    bRxBuf.Clear()
  Endif

  ClientHeartBeat()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish generic commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim aDim As String[]

  ' dimmer
  If InStr(UCase(sValue), "DIM ") Or InStr(UCase(sValue), "SP ") ' DIM 1 - 99 or SP SetPoint
    aDim = Split(sValue, " ")
    If aDim.Count = 2 Then
      PublishMsg(sAddress, sValue, True)
    Else
      Main.WriteDebugLog(LogLabel & "Invalid dim/setpoint command '" & sValue & "'!")
      Return
    Endif
  ' switch
  Else If sValue == "ON" Or If sValue == "OFF" Then
    PublishMsg(sAddress, sValue, True)
  ' invalid
  Else
    Main.WriteDebugLog(LogLabel & "Invalid command '" & sValue & "'!")
    Return
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send connect message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ClientConnect(sId As String)

  Dim bBuf As New Byte[255]
  Dim iCnt As Integer

  ' fixed header
  bBuf[0] = MQTTCONNECT ' connect
  ' bBuf[1] = 12 + Len(sId) + 2 ' remaining length
  bBuf[1] = 12 + Len(sId) + 2 + Len($sUsername) + Len($sPassword) + 4 ' remaining length
  ' var header
  bBuf[2] = &H0   ' 0
  bBuf[3] = &H6   ' 6
  bBuf[4] = &H4D  ' M
  bBuf[5] = &H51  ' Q
  bBuf[6] = &H49  ' I
  bBuf[7] = &H73  ' s
  bBuf[8] = &H64  ' d
  bBuf[9] = &H70  ' p
  bBuf[10] = &H3  ' protocol version = 3

  ' connect flag
  bBuf[11] = &H2  ' clean session only
  If $sUsername Then bBuf[11] = BSet(bBuf[11], 7)
  If $sPassword And If Not $sUsername Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "You cannot supply a password without a username!")
    Return
  Else
    bBuf[11] = BSet(bBuf[11], 6)
  Endif
  bBuf[12] = Shr($iHeartBeat, 8)   ' MSB keepalive
  bBuf[13] = $iHeartBeat And 255   ' LSB
  bBuf[14] = &H0  ' ID string length MSB
  bBuf[15] = Len(sId)  ' ID string length LSB

  ' id
  For iCnt = 1 To Len(sId)
    bBuf.Add(Asc(Mid(sId, iCnt, 1)), 15 + iCnt)
  Next

  ' username length MSB (0 since 255 chars is enough)
  bBuf.Add(&H0, 16 + Len(sId))
  ' length LSB
  bBuf.Add(Len($sUsername), 17 + Len(sId))

  ' username
  If $sUsername Then
    For iCnt = 1 To Len($sUsername)
      bBuf.Add(Asc(Mid($sUsername, iCnt, 1)), 17 + iCnt + Len(sId))
    Next
  Endif

  ' password length MSB (0 since 255 chars is enough)
  bBuf.Add(&H0, 18 + Len(sId) + Len($sUsername))
  ' length LSB
  bBuf.Add(Len($sPassword), 19 + Len(sId) + Len($sUsername))

  ' password
  If $sPassword Then
    For iCnt = 1 To Len($sPassword)
      bBuf.Add(Asc(Mid($sPassword, iCnt, 1)), 19 + iCnt + Len(sId) + Len($sUsername))
    Next
  Endif

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Connecting to broker.")
  bBuf.Resize(2 + bBuf[1])
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send disconnect message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ClientDisconnect()

  Dim bBuf As New Byte[2]

  bBuf[0] = -&H7F + &5F ' disconnect
  bBuf[1] = &H0

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Disconnecting from broker.")
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send heartbeat message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ClientHeartBeat()

  Dim bBuf As New Byte[2]

  bBuf[0] = &HC0
  bBuf[1] = &H0

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending heartbeat to broker.")
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' subscribe message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SubscribeTopic(sTopic As String)

  Dim bBuf As New Byte[255]
  Dim iCnt, iTopicLen As Integer

  iTopicLen = Len(sTopic)

  ' fixed header
  bBuf[0] = MQTTSUBSCRIBE     ' subscribe
  bBuf[1] = &H5 + Len(sTopic) ' remaining length
  bBuf[2] = &H0   ' MSB
  bBuf[3] = &HA   ' message id
  bBuf[4] = iTopicLen / 128   ' MSB
  bBuf[5] = iTopiclen Mod 128 ' # bytes of topic

  For iCnt = 1 To Len(sTopic)
    bBuf.Add(Asc(sTopic, iCnt), 5 + iCnt)
  Next
  bBuf.Add(&H0, 5 + Len(sTopic) + iCnt + 1)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Subscribing to Topic '" & sTopic & "'")
  bBuf.Resize(&H7 + Len(sTopic))
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' publish data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PublishMsg(sTopic As String, sMsg As String, Optional bRawTopic As Boolean = False)

  Dim bBuf As New Byte[255]
  Dim iCnt, iTopicLen, iMsgLen As Integer

  If Not $bEnablePublish Then Return

  ' don't add publish topic
  If bRawTopic = False Then sTopic = $sPubTopic &/ sTopic

  iTopicLen = Len(sTopic)
  iMsgLen = Len(sMsg)

  ' remove wildcards
  sTopic = Replace(sTopic, "#", " ")
  sTopic = Replace(sTopic, "+", " ")

  ' publish with retain enabled if set
  If $bRetain Then
    bBuf[0] = BSet(MQTTPUBLISH, 0)
  Else
    bBuf[0] = MQTTPUBLISH
  Endif

  ' set chosen QoS
  Select Case $iQoS
    Case 0
      ' default
    Case 1
      bBuf[0] = BSet(bBuf[0], 1)
    Case 2
      bBuf[0] = BSet(bBuf[0], 2)
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Invalid QoS value '" & $iQoS & "' set!")
      Return
  End Select

  bBuf[1] = iTopicLen + iMsgLen + 2 ' remaining length
  bBuf[2] = iTopicLen / 128         ' MSB topic length
  bBuf[3] = iTopicLen Mod 128       ' LSB
  For iCnt = 1 To Len(sTopic)
    bBuf.Add(Asc(sTopic, iCnt), 3 + iCnt)
  Next
  For iCnt = 1 To Len(sMsg)
    bBuf.Add(Asc(sMsg, iCnt), 3 + iTopicLen + iCnt)
  Next

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Publishing Message '" & sMsg & "' to Topic '" & sTopic & "'")
  bBuf.Resize(&H4 + Len(sTopic) + Len(sMsg))
  QueueCommand(bBuf)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub QueueCommand(aPacket As Byte[])

  ' add command to queue
  cQueue.Add(aPacket, Rnd)

  ' if not busy process it
  If bBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DoQueue()

  Dim aPacket As Byte[] = Null

  For Each aPacket In cQueue
    WriteCommand(aPacket, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tMQTTBusy_Timer()

  bBusy = False
  tMQTTBusy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending next command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' writes the packets
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteCommand(bBuffer As Byte[], sKey As String)

  bBuffer.Write(hMQTT, 0, bBuffer.Length)
  If $bDebug Then DumpMessage(">", bBuffer)

  ' remove sent command from queue
  cQueue.Remove(sKey)

  ' reset heartbeat time-out
  tMQTTPing.Start

  tMQTTBusy.Delay = 10 ' 10mS (initial test value)
  tMQTTBusy.Start
  If bBusy = False Then bBusy = True

Catch
   Main.WriteDebugLog(LogLabel & "Not connected to MQTT Broker, cannot Publish!")

End

Private Sub DumpMessage(sTxRx As String, bBuffer As Byte[])

  Dim sStr As String
  Dim iIndex As Integer
  Dim iLen As Integer

  ' Dump (first part of) received packet
  sStr = sTxRx
  iLen = Min(bBuffer.Length - 1, 50)
  For iIndex = 0 To iLen
    sStr &= " " & Hex(bBuffer[iIndex], 2)
  Next
  If iLen < bBuffer.Length - 1 Then
    sStr &= " ..."
  Endif
  Main.WriteDebugLog(LogLabel & sStr)

End

Private Sub ParseMessage(bByte As Byte)

  Dim iType As Integer
  Dim iLength, iIndex As Integer
  Dim bShift As Byte
  Dim bLengthKnown As Boolean = False

  If bRxBuf.Length = 0 Then
    ' Check if the receive does not take too long because of junk data (checked in tMQTTPing_Timer)
    dRxStarted = Now()
  Endif

  bRxBuf.Push(bByte)

  ' Length: 0..127 one byte, 128..16 383 two bytes, 16384..2097151 three bytes, 2097152..268435455 four bytes
  iLength = 0
  bShift = 0
  iIndex = 1
  While bRxBuf.Length > iIndex
    iLength += Lsl(CInt(bRxBuf[iIndex] And 127), bShift)

    ' Last byte?
    If Not BTst(bRxBuf[iIndex], 7) Then
      bLengthKnown = True
      Break
    Endif

    bShift += 7
    iIndex += 1

    ' Maximum 4 length bytes
    If (bShift > 3 * 7) Then
      If $bDebug Then
        DumpMessage("<", bRxBuf)
        Main.WriteDebugLog(LogLabel & "ERROR: Ignoring packet with invalid length")
        bRxBuf.Clear()
        Return
      Endif
    Endif
  Wend

  ' Received enough data?
  If bLengthKnown = False Or If bRxBuf.Length < iLength + iIndex + 1 Then
    ' Not yet
    Return
  Endif

  If $bDebug Then
    DumpMessage("<", bRxBuf)
  Endif

  iType = Lsr(bRxBuf[0], 4)

  ' Remove the (variable lenght) fixed header
  bRxBuf.Remove(0, iIndex + 1)

  Select Case iType
    ' connack
    Case MQTT_CONNACK
       DecodeConnAck(bRxBuf)
    ' puback
    Case MQTT_PUBACK
      DecodePubAck(bRxBuf)
    ' pingresp
    Case MQTT_PINGRESP
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Broker replied with alive packet.")
    Case MQTT_SUBACK
      'DecodeSubAck(bRxBuf)
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Subscription ack packet.")
    Case MQTT_PUBLISH
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received published data.")
      DecodePublish(bRxBuf)
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received unsupported packet type " & iType)
  End Select

  bRxBuf.Clear()

End

Private Sub DecodePublish(bBuffer As Byte[])

  Dim iTopicLen, iDeviceId As Integer
  Dim sTopic, sPayload, sDeviceTypeDescr, sDevice As String
  Dim cTest As Collection

  ' extract topic. Length: MSB @ offset 0, LSB @ offset 1
  iTopicLen = Lsl(CInt(bBuffer[0]), 8) + bBuffer[1]
  sTopic = bBuffer.ToString(2, iTopicLen)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received topic : '" & sTopic & "'")

  ' extract payload
  sPayload = bBuffer.ToString(2 + iTopicLen)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received payload : '" & sPayload & "'")

  ' try to determine type of payload
  Try cTest = JSON.Decode(sPayload)
  If cTest And If cTest.Count Then
    sDevice = "MQTT-JSON"
  Else
    sDevice = "MQTT-GENERIC"
  Endif

  ' lookup device
  iDeviceId = Devices.Find(Instance, sTopic, InterfaceId, sDevice)
  If iDeviceId Then
    ' what kind of mqtt devicetype is this device set to?
    sDeviceTypeDescr = Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId)
    Select Case sDeviceTypeDescr
      Case "MQTT Owntracks Client"
        DecodeOwntracks(iDeviceId, sPayload)
      Case "MQTT Generic"
        Devices.ValueUpdate(iDeviceId, 1, sPayload)
      Case "MQTT JSON Generic"
        DecodeJSON(iDeviceId, sPayload)
      Case Else
        Main.WriteDebugLog(LogLabel & "ERROR: Unsupported devicetype '" & sDeviceTypeDescr & "'")
    End Select

  Else
    Main.WriteDebugLog(LogLabel & "ERROR: No device found with address '" & sTopic & "'")
  Endif

End

Private Sub DecodeJSON(iDeviceId As Integer, sPayload As String)

  Dim iValueNum As Integer = 1
  Dim cPayload As Collection
  Dim sValue As String

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received JSON formatted data:")
  cPayload = JSON.Decode(sPayload)
  If cPayload.Count Then
    For Each sValue In cPayload
      If $bDebug Then
        Main.WriteDebugLog(LogLabel & "Value#: " & iValueNum)
        Main.WriteDebugLog(LogLabel & "Field: '" & cPayload.Key & "'")
        Main.WriteDebugLog(LogLabel & "Value: '" & sValue & "'")
      Endif
      Devices.ValueUpdate(iDeviceId, iValueNum, sValue)
      Inc iValueNum
    Next
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Main.WriteDebugLog(LogLabel & "Received payload is probably not in correct JSON format, payload = '" & sPayload & "'!")

End

Private Sub DecodeOwntracks(iDeviceId As Integer, sPayload As String)

  Dim cPayload As Collection
  Dim sType, sLat, sLon, sRad, sVac, sDesc, sAcc, sBatt, sEvent, sAlt, sCog, sVel, sTst, sTid As String
  Dim sEmpty As String = " " ' If we do not get an optional field we want to clear it but Devices.ValueUpdate ignores ""

  cPayload = JSON.Decode(sPayload)
  If cPayload["_type"] = "location" Then
    sType = cPayload["_type"]
    sLat = cPayload["lat"]
    sLon = cPayload["lon"]
    sAcc = cPayload["acc"]
    sBatt = cPayload["batt"]
    sEvent = cPayload["event"]
    sTst = Util.TimeSinceEpoch(cPayload["tst"])
    sAlt = IIf(cPayload["alt"] <> Null, cPayload["alt"], sEmpty)
    sCog = IIf(cPayload["cog"] <> Null, cPayload["cog"], sEmpty)
    sVel = IIf(cPayload["vel"] <> Null, cPayload["vel"], sEmpty) ' speed in km/hr
    sDesc = IIf(cPayload["desc"] <> Null, cPayload["desc"], sEmpty)
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Received Owntracks client data:")
      Main.WriteDebugLog(LogLabel & "Type: " & sType)
      Main.WriteDebugLog(LogLabel & "Latitude: " & sLat)
      Main.WriteDebugLog(LogLabel & "Longitude: " & sLon)
      Main.WriteDebugLog(LogLabel & "Accuracy: " & sAcc)
      Main.WriteDebugLog(LogLabel & "Battery: " & sBatt & "%")
      Main.WriteDebugLog(LogLabel & "Event: " & sEvent)
      Main.WriteDebugLog(LogLabel & "Timestamp: " & sTst)
      If sAlt <> sEmpty Then Main.WriteDebugLog(LogLabel & "Altitude: " & sAlt)
      If sCog <> sEmpty Then Main.WriteDebugLog(LogLabel & "Heading: " & sCog)
      If sVel <> sEmpty Then Main.WriteDebugLog(LogLabel & "Speed: " & sVel)
      If sDesc <> sEmpty Then Main.WriteDebugLog(LogLabel & "Description: " & sDesc)
    Endif
    Devices.ValueUpdate(iDeviceId, 1, sLat)
    Devices.ValueUpdate(iDeviceId, 2, sLon)
    Devices.ValueUpdate(iDeviceId, 3, sEvent)
    Devices.ValueUpdate(iDeviceId, 4, sAcc)
    Devices.ValueUpdate(iDeviceId, 5, sTst)
    Devices.ValueUpdate(iDeviceId, 6, sAlt)
    Devices.ValueUpdate(iDeviceId, 7, sCog)
    Devices.ValueUpdate(iDeviceId, 8, sVel)
    Devices.ValueUpdate(iDeviceId, 9, sDesc)
    Devices.Battery(iDeviceId, sBatt)
  Else If cPayload["_type"] = "waypoint" Then
    sType = cPayload["_type"]
    sLat = cPayload["lat"]
    sLon = cPayload["lon"]
    sRad = cPayload["rad"]
    sVac = cPayload["vac"]
    sDesc = cPayload["desc"]
    sTst = Util.TimeSinceEpoch(cPayload["tst"])
    sTid = IIf(cPayload["tid"] <> Null, cPayload["tid"], sEmpty)
    sAlt = IIf(cPayload["alt"] <> Null, cPayload["alt"], sEmpty)
    sCog = IIf(cPayload["cog"] <> Null, cPayload["cog"], sEmpty)
    sVel = IIf(cPayload["vel"] <> Null, cPayload["vel"], sEmpty) ' speed in km/hr
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Received Owntracks client data:")
      Main.WriteDebugLog(LogLabel & "Type: " & sType)
      Main.WriteDebugLog(LogLabel & "Latitude: " & sLat)
      Main.WriteDebugLog(LogLabel & "Longitude: " & sLon)
      Main.WriteDebugLog(LogLabel & "Description: " & sDesc)
      Main.WriteDebugLog(LogLabel & "Vertical accuracy: " & sVac)
      Main.WriteDebugLog(LogLabel & "Timestamp: " & sTst)
      If sAlt <> sEmpty Then Main.WriteDebugLog(LogLabel & "Altitude: " & sAlt)
      If sCog <> sEmpty Then Main.WriteDebugLog(LogLabel & "Heading: " & sCog)
      If sVel <> sEmpty Then Main.WriteDebugLog(LogLabel & "Speed: " & sVel)
      Main.WriteDebugLog(LogLabel & "Radius: " & sRad)
      If sTid <> sEmpty Then Main.WriteDebugLog(LogLabel & "Tracker-ID: " & sTid)
    Endif
    Devices.ValueUpdate(iDeviceId, 1, sLat)
    Devices.ValueUpdate(iDeviceId, 2, sLon)
    Devices.ValueUpdate(iDeviceId, 3, sDesc)
    Devices.ValueUpdate(iDeviceId, 4, sVac)
    Devices.ValueUpdate(iDeviceId, 5, sTst)
    Devices.ValueUpdate(iDeviceId, 6, sAlt)
    Devices.ValueUpdate(iDeviceId, 7, sCog)
    Devices.ValueUpdate(iDeviceId, 8, sVel)
    Devices.ValueUpdate(iDeviceId, 9, sRad)
    Devices.ValueUpdate(iDeviceId, 10, sTid)
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Owntracks payload type '" & cPayload["_type"] & "' not supported.")
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Main.WriteDebugLog(LogLabel & "Received payload is not using Owntracks location format '" & sPayload & "'!")

End

Private Sub DecodeConnAck(bBuffer As Byte[])

  ' Connect Return code
  Select Case bBuffer[1]
    Case 0
      Main.WriteDebugLog(LogLabel & "Connection accepted by broker.")
      tReConnect.Stop
      iReConnectRetry = 0
    Case 1
      Main.WriteDebugLog(LogLabel & "Connection refused by broker, wrong protocol version.")
    Case 2
      Main.WriteDebugLog(LogLabel & "Connection refused by broker, identifier refused.")
    Case 3
      Main.WriteDebugLog(LogLabel & "Connection refused by broker, MQTT service unavailable.")
    Case 4
      Main.WriteDebugLog(LogLabel & "Connection refused by broker, bad username or password.")
    Case 5
      Main.WriteDebugLog(LogLabel & "Connection refused by broker, client is not authorized.")
    Case Else
      Main.WriteDebugLog(LogLabel & "Received unknown CONNACK status code!")
  End Select

End

Private Sub DecodePubAck(bBuffer As Byte[])

  Main.WriteDebugLog(LogLabel & "Subscription accepted by broker.")
  ' TODO: implement decode message id and QoS granted

End
