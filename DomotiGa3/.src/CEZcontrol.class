' Gambas class file

' Description:
' CEZcontrol.class
' Provide basic support for device control for the EZcontrol T-10 interface.

' Development Status:
' Just started developing this one, not complete yet.

' Links:
' http://www.ezcontrol.de/content/view/30/56/

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PROPERTY UDPHost AS String
PROPERTY UDPPort AS String
PROPERTY EZcontrolDebug AS Boolean

PRIVATE sUDPHost AS String
PRIVATE sUDPPort AS String
PRIVATE bEZcontrolDebug AS Boolean

PUBLIC hEZcontrol AS NEW UdpSocket

' Constants
PRIVATE CONST PRESET_MODE AS Short = &HAB01
PRIVATE CONST MANUAL_MODE AS Short = &HAB02

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the connection
  TRY hEZcontrol.Close

  ' get a new one
  hEZcontrol = NEW UdpSocket AS "EZcontrol"
  ' [GB2:BIND] hEZcontrol.Bind(0)
  hEZcontrol.Port = 0
  hEZcontrol.Bind()

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("EZcontrol Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hEZcontrol.Close
  Main.WriteLog(("EZcontrol UDP socket unbind."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("EZcontrol Error: ") & ERROR.Text)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send data via UDP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendUDPPacket(bBuf AS Short[])

  DIM bData AS Short

  ' sent it to configured interface
  hEZcontrol.TargetPort = sUDPPort
  hEZcontrol.TargetHost = sUDPHost

  bBuf.Write(hEZcontrol, 0, bBuf.Length)
  IF NOT bEZcontrolDebug THEN RETURN

  Main.WriteDebugLog("[EZcontrol] >", TRUE)
  FOR EACH bData IN bBuf
    Main.WriteRFXDebugLog(" " & Hex(bData, 4), TRUE)
  NEXT
  Main.WriteRFXDebugLog("\n", TRUE)

CATCH
  Main.WriteLog(("ERROR: Cannot send UDP message! ") & ERROR.Text & (" at ") & ERROR.Where)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display error if connect failed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB EZcontrol_Error()

  ' handle error
  SELECT CASE hEZcontrol.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("EZcontrol: The system does not allow to create a socket."))
    CASE Net.CannotBindSocket
      Main.WriteLog(("EZcontrol: Unable to bind a socket."))
    CASE Net.CannotRead
      Main.WriteLog(("EZcontrol: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("EZcontrol: Error writing data."))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCommand(sAddress AS String, sCmd AS String, iDeviceId AS Integer)

  DIM iBrightness, iDim AS Integer
  DIM sDeviceType AS String
  DIM aScan AS String[]

  sCmd = UCase(sCmd)
  sDeviceType = Devices.FindTypeForDevice(iDeviceId)
  SELECT CASE sDeviceType
    CASE "T10-Preset"
      ' address
      IF sCmd = "ON"
        SendPreset(sAddress, &HFF)
      ELSE IF sCmd = "OFF"
        SendPreset(sAddress, &H0)
      ELSE IF InStr(sCmd, "DIM ") THEN ' DIM 0-100
        iBrightness = Val(Replace(sCmd, "DIM ", ""))
        iDim = Round(iBrightness / 6.25) ' 16 steps
        IF iDim = 0 THEN INC iDim
        SendPreset(sAddress, iDim)
      ELSE
        Main.WriteDebugLog(("[EZcontrol] Only DIM and ON/OFF commands are supported for " & sDeviceType & " devices!"))
      END IF
    CASE "FS10", "RS200", "AB400", "AB601", "REV", "BS-QU", "MARMI", "OA-FM", "KO-FC", "RS862"
      ' hc|0|address|repeat
      aScan = Scan(sAddress, "*|0|*|*")
      IF aScan.Count = 3 THEN
        IF Main.bEZcontrolDebug THEN Main.WriteDebugLog(("[EZcontrol] FS10...RS862 HomeCode = " & aScan[0] & " Address = " & aScan[1] & " Repeat = " & aScan[2]))
        IF sCmd = "ON"
          SendManual(aScan[1], &HFF, GetSystem(sDeviceType), aScan[0], 0, 0, aScan[2])
        ELSE IF sCmd = "OFF"
          SendManual(aScan[1], &H0, GetSystem(sDeviceType), aScan[0], 0, 0, aScan[2])
        ELSE IF InStr(sCmd, "DIM ") THEN ' DIM 0-100
          iBrightness = Val(Replace(sCmd, "DIM ", ""))
          iDim = Round(iBrightness / 6.25) ' 16 steps
          IF iDim = 0 THEN INC iDim
          SendManual(aScan[1], iDim, GetSystem(sDeviceType), aScan[0], 0, 0, aScan[2])
        ELSE
          Main.WriteDebugLog(("[EZcontrol] Only DIM and ON/OFF commands are supported for " & sDeviceType & " devices!"))
        END IF
      ELSE
        Main.WriteDebugLog(("[EZcontrol] Invalid address specified for " & sDeviceType & " type device!"))
      END IF
    CASE "FS20"
      ' hc|hc2|address|repeat or
      ' hc|hc2|address|repeat|arg
      aScan = Scan(sAddress, "*|*|*|*|*")
      IF aScan.Count = 5 THEN
        IF Main.bEZcontrolDebug THEN Main.WriteDebugLog(("[EZcontrol] FS20 HomeCode = " & aScan[0] & " HomeCode2 = " & aScan[1] & " Address = " & aScan[2] & " Repeat = " & aScan[3] & " Arg = " & aScan[4]))
        IF sCmd = "ON"
          SendManual(aScan[2], &HFF, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
        ELSE IF sCmd = "OFF"
          SendManual(aScan[2], &H0, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
        ELSE IF InStr(sCmd, "DIM ") THEN ' DIM 0-100
          iBrightness = Val(Replace(sCmd, "DIM ", ""))
          iDim = Round(iBrightness / 6.25) ' 16 steps
          IF iDim <= 0 THEN INC iDim
          SendManual(aScan[2], iDim, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
        ELSE IF InStr(sCmd, "ARG ") THEN ' ARG <value>
          ' not implemented yet
        ELSE
          Main.WriteDebugLog(("[EZcontrol] Only DIM, ARG and ON/OFF commands are supported for " & sDeviceType & " devices!"))
        END IF
      ELSE
        aScan = Scan(sAddress, "*|*|*|*")
        IF aScan.Count = 4 THEN
          IF Main.bEZcontrolDebug THEN Main.WriteDebugLog(("[EZcontrol] FS20 HomeCode = " & aScan[0] & " HomeCode2 = " & aScan[1] & " Address = " & aScan[2] & " Repeat = " & aScan[3]))
          IF sCmd = "ON"
            SendManual(aScan[2], &HFF, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
          ELSE IF sCmd = "OFF"
            SendManual(aScan[2], &H0, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
          ELSE IF InStr(sCmd, "DIM ") THEN ' DIM 0-100
            iBrightness = Val(Replace(sCmd, "DIM ", ""))
            iDim = Round(iBrightness / 6.25) ' 16 steps
            IF iDim <= 0 THEN INC iDim
            SendManual(aScan[2], iDim, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
          ELSE
            Main.WriteDebugLog(("[EZcontrol] Only DIM and ON/OFF commands are supported for " & sDeviceType & " devices!"))
          END IF
        ELSE
          Main.WriteDebugLog(("[EZcontrol] Invalid address specified for " & sDeviceType & " type device!"))
        END IF
      END IF
    CASE "IT"
      ' hc|hc2|address|repeat
      aScan = Scan(sAddress, "*|*|*|*")
      IF aScan.Count = 4 THEN
        IF Main.bEZcontrolDebug THEN Main.WriteDebugLog(("[EZcontrol] IT HomeCode = " & aScan[0] & " HomeCode2 = " & aScan[1] & " Address = " & aScan[2] & " Repeat = " & aScan[3]))
        IF sCmd = "ON"
          SendManual(aScan[2], &HFF, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
        ELSE IF sCmd = "OFF"
          SendManual(aScan[2], &H0, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
        ELSE IF InStr(sCmd, "DIM ") THEN ' DIM 0-100
          iBrightness = Val(Replace(sCmd, "DIM ", ""))
          iDim = Round(iBrightness / 6.25) ' 16 steps
          IF iDim <= 0 THEN INC iDim
          SendManual(aScan[2], iDim, GetSystem(sDeviceType), aScan[0], aScan[1], 0, aScan[3])
        ELSE
          Main.WriteDebugLog(("[EZcontrol] Only DIM and ON/OFF commands are supported for " & sDeviceType & " devices!"))
        END IF
      ELSE
        Main.WriteDebugLog(("[EZcontrol] Invalid address specified for " & sDeviceType & " type device!"))
      END IF
    CASE ELSE
        Main.WriteDebugLog(("[EZcontrol] Device type '" & sDeviceType & "' is unsupported!"))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find system code to send to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB GetSystem(sType AS String) AS Integer

  DIM sSystems AS String[] = ["FS10", "FS20", "RS200", "AB400", "AB601", "IT", "REV", "BS-QU", "MARMI", "OA-FM", "KO-FC", "RS862"]
  DIM sName AS String
  DIM iSystem AS Integer = 1

  FOR EACH sName IN sSystems
    IF Comp(sName, sType) = 0 THEN RETURN iSystem
    INC iSystem
  NEXT
  RETURN 0

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare preset command packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SendPreset(iSwitch AS Integer, iValue AS Integer)

  ' [GB2:ARRD] DIM sBuf AS Short[4]
  DIM sBuf As New Short[4]

  sBuf[1] = PRESET_MODE
  sBuf[2] = iSwitch - 1
  sBuf[3] = iValue
  sBuf[0] = ChkSum(sBuf, 3)

  SendUDPPacket(sBuf)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare manual command packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendManual(iSwitch AS Integer, iValue AS Integer, iSystem AS Integer, iHouseCode AS Integer, iHouseCode2 AS Integer, iArg AS Integer, iRepeat AS Integer)

  ' [GB2:ARRD] DIM sBuf AS Short[9]
  DIM sBuf As New Short[9]

  sBuf[1] = MANUAL_MODE
  sBuf[2] = iSystem
  sBuf[3] = iHouseCode
  sBuf[4] = iHouseCode2
  sBuf[5] = iSwitch
  sBuf[6] = iValue
  sBuf[7] = iArg
  sBuf[8] = iRepeat
  sBuf[0] = ChkSum(sBuf, 8)

  SendUDPPacket(sBuf)

END

PRIVATE SUB ChkSum(sData AS Short[], iLen AS Integer) AS Short

  DIM sSum, iCount, iData AS Integer

  FOR iCount = 1 TO iLen
    iData = sData[iCount]
    IF iData < 0 THEN iData += 65536
    sSum = (sSum + iData) AND 65535
    IF (sSum < iData) THEN
      sSum = (sSum + 1) AND 65535
    END IF
  NEXT
  RETURN sSum

END

PRIVATE FUNCTION UDPHost_Read() AS String

  RETURN sUDPHost

END

PRIVATE SUB UDPHost_Write(Value AS String)

  sUDPHost = Value

END

PRIVATE FUNCTION UDPPort_Read() AS String

  RETURN sUDPPort

END

PRIVATE SUB UDPPort_Write(Value AS String)

  sUDPPort = Value

END

PRIVATE FUNCTION EZcontrolDebug_Read() AS Boolean

  RETURN bEZcontrolDebug

END

PRIVATE SUB EZcontrolDebug_Write(Value AS Boolean)

  bEZcontrolDebug = Value

END
