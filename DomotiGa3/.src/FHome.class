' Gambas class file

' Description:
' FHome.class
' Display all startpage related items.

' Development Status:
' Working.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private tRefresh As New Timer
Private bAutoRefresh As Boolean
Public iOutsideTemp As Variant
Public iOutsideHumid As Variant
Public iInsideTemp As Variant
Public iInsideHumid As Variant
Private bPowerSensor As Boolean
Private bWeatherSensor As Boolean
Private bInsideSensor As Boolean
Public hDownloadOutsideImage As HttpClient
Public hDownloadInsideImage As HttpClient
Public hDownloadUsageImage As HttpClient
Public hDownloadCurrentWeather As HttpClient
Public hDownloadWeatherImage1 As HttpClient
Public hDownloadWeatherImage2 As HttpClient
Private bCmbScenarioLoading As Boolean
Private sActiveScenario As String

Public Sub Form_Open()

  DisplayPage()

  ' create refresh timer
  tRefresh = New Timer As "tRefresh"
  tRefresh.Delay = 30000 ' 30 seconds
  If bAutoRefresh = True Then tRefresh.Start

End

Public Sub chkRefresh_Click()

  bAutoRefresh = chkRefresh.Value
  tRefresh.Enabled = chkRefresh.Value

End

Public Sub DisplayPage()

  Dim rResult As Result
  Dim aPanel As String[]
  Dim sItem As String

  rResult = Main.GetSettingTable("main", False)
  If rResult.Count Then
    aPanel = Split(rResult!hometoppanel, "|")
    For Each sItem In aPanel
      DisplayFrame(sItem, VBoxTop)
    Next

    If HBoxBottom.Parent <> VBoxTop Then HBoxBottom.Reparent(VBoxTop)

    aPanel = Split(rResult!homeleftpanel, "|")
    For Each sItem In aPanel
      DisplayFrame(sItem, VBoxLeft)
    Next

    aPanel = Split(rResult!homerightpanel, "|")
    For Each sItem In aPanel
      DisplayFrame(sItem, VBoxRight)
    Next

    aPanel = Split(rResult!homebottompanel, "|")
    For Each sItem In aPanel
      DisplayFrame(sItem, VBoxTop)
    Next
  Endif

Catch

End

Public Sub DisplayFrame(sFrame As String, oCont As VBox)

  Select Case sFrame
    Case "TagLine"
      If frameTagline.Parent <> oCont Then frameTagline.Reparent(oCont)
      DisplayTagline()
    Case "Power Usage"
      If framePowerUsage.Parent <> oCont Then framePowerUsage.Reparent(oCont)
      DisplayUsageDial()
    Case "House Mode"
      DisplayHouseMode()
      If frameHouseMode.Parent <> oCont Then frameHouseMode.Reparent(oCont)
    Case "Outside"
      If frameOutside.Parent <> oCont Then frameOutside.Reparent(oCont)
      DisplayOutsideTempHumid()
    Case "Weather Comment"
      If frameWeatherComment.Parent <> oCont Then frameWeatherComment.Reparent(oCont)
      DisplayWeatherComment()
    Case "Weather"
      If frameWeather.Parent <> oCont Then frameWeather.Reparent(oCont)
      DisplayWeather()
    Case "Thermostat"
      If frameThermostat.Parent <> oCont Then frameThermostat.Reparent(oCont)
      DisplayThermostat()
    Case "Inside"
      If frameInside.Parent <> oCont Then frameInside.Reparent(oCont)
      DisplayInsideTemp()
    Case "Main log"
      If FrameMainLog.Parent <> oCont Then FrameMainLog.Reparent(oCont)
      DisplayMainLog()
    Case "Temperature Control"
      FillThermoData()
      If frameTemperatureControl.Parent <> oCont Then frameTemperatureControl.Reparent(oCont)
    Case "All Heating"
      DisplayFrameAllHeating()
      If frameAllHeating.Parent <> oCont Then frameAllHeating.Reparent(oCont)
    Case "Alarm"
      If btnAlarm.Parent <> oCont Then btnAlarm.Reparent(oCont)
      btnAlarm_setup()
    Case "Event Thermostat"
      If btnThermostat.Parent <> oCont Then btnThermostat.Reparent(oCont)
  End Select

End

Public Sub VBoxTop_Arrange()

  txtTagline.Width = frameTagline.Width - 14
  txtWeatherTemp.Width = frameWeather.Width - 14
  txtWeatherHumid.Width = frameWeather.Width - 14
  txtMainLog.Width = frameMainLog.Width - 14

End

Public Sub DisplayMainLog()

  Dim sTemp As String
  Dim aTemp As String[]

  txtMainLog.Clear

  sTemp = FLogfiles.txtMainLog.Text
  aTemp = Split(sTemp, "\n")
  If aTemp.Count > 5 Then
    txtMainLog.Insert(aTemp[aTemp.Count - 6] & "\n")
  Endif
  If aTemp.Count > 4 Then
    txtMainLog.Insert(aTemp[aTemp.Count - 5] & "\n")
  Endif
  If aTemp.Count > 3 Then
    txtMainLog.Insert(aTemp[aTemp.Count - 4] & "\n")
  Endif
  If aTemp.Count > 2 Then
    txtMainLog.Insert(aTemp[aTemp.Count - 3] & "\n")
  Endif
  If aTemp.Count > 1 Then
    txtMainLog.Insert(aTemp[aTemp.Count - 2])
  Endif

End

Public Sub DisplayThermostat()

  Dim rResultScenarii As Result

  ' Need to set ReadOnly=False, else the _Change event is never called
  cmbScenario.ReadOnly = False

  ' Prevent the _Change event to trigger the thermostat event
  bCmbSCenarioLoading = True
  Try rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii")
  cmbScenario.Clear
  cmbScenario.Add("")
  cmbScenario.Text = ""
  If rResultScenarii Then
    If (rResultScenarii.Count >= 1) Then
      For Each rResultScenarii
        cmbScenario.Add(rResultScenarii!name)
        If rResultScenarii!name = Main.GetGlobalVar("Thermostat_Mode") Then
          cmbScenario.Text = rResultScenarii!name
          sActiveScenario = rResultScenarii!name
        Endif
      Next
    Endif
  Endif

  ' Enable the _Change event to trigger the thermostat event
  bCmbSCenarioLoading = False 

End

Public Sub DisplayHouseMode()

  btnMode.Text = Main.Caps(Main.GetGlobalVar("House_Mode"))

End

Public Sub DisplayWeatherComment()

  Dim iTemp, iHumid As Integer

  If Not bWeatherSensor Then
    Return
  Endif

  Try iTemp = iOutsideTemp
  If Not Error Then
    If iTemp < 5 And If iTemp > 0 Then
      txtWeatherTemp.Text = Main.Random_Text("remarks_tempbelow5") & " "
    Endif
    If iTemp < -5 Then
      txtWeatherTemp.Text = Main.Random_Text("remarks_tempbelowmin5") & " "
    Endif
  Endif
  Try iHumid = iOutsideHumid
  If Not Error Then
    If iHumid > 90 Then
      txtWeatherHumid.Text = Main.Random_Text("remarks_humid")
    Endif
  Endif

End

Public Sub DisplayTagline()

  txtTagline.Text = Main.GetGlobalVar("Tagline")

End

Public Sub btnMode_Click()

  Dim sNewMode As String

  Select Case Main.GetGlobalVar("House_Mode")
    Case "normal"
      sNewMode = "work"
    Case "work"
      sNewMode = "away"
    Case "away"
      sNewMode = "vacation"
    Case Else
      sNewMode = "normal"
  End Select
  Main.ChangeHouseMode(sNewMode)

End

Public Sub btnMute_Click()

  Dim bNewMute As String

  Select Case Main.GetGlobalVar("Mute")
    Case True
      bNewMute = False
    Case Else
      bNewMute = True
  End Select
  Main.ChangeMuteMode(bNewMute)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get values from device where group contains Outside, Temperature and Humidity
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DisplayInsideTemp()

  Dim rDevice As Result
  Dim sUrl As String

  bInsideSensor = False
  frameInside.Hide
  Try rDevice = Devices.FindAllEnabledDevices()
  If Not Error Then
    If rDevice.Available Then
      For Each rDevice
        If InStr(rDevice!groups, "Inside") And If InStr(rDevice!groups, "Humidity") And If InStr(rDevice!groups, "Temperature") Then
          bInsideSensor = True
          frameInside.Show

          If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Device with address '") & rDevice!address & ("' and name '") & rDevice!name & ("' looks like the main inside temp sensor."))

          ' Temporary fix for the home screen temperature for e.g. Z-Wave devices
          If (UCase(rDevice!value) = "ON" Or UCase(rDevice!value) = "OFF" Or InStr(UCase(rDevice!value), "DIM ")) Then
            If rDevice!value2 Then iInsideTemp = Devices.CorrectValue(rDevice!value2, rDevice!correction2, rDevice)
            If rDevice!value3 Then iInsideHumid = Devices.CorrectValue(rDevice!value3, rDevice!correction3, rDevice)
          Else
            If rDevice!value Then iInsideTemp = Devices.CorrectValue(rDevice!value, rDevice!correction, rDevice)
            If rDevice!value2 Then iInsideHumid = Devices.CorrectValue(rDevice!value2, rDevice!correction2, rDevice)
          Endif

          txtTemperatureIn.Text = iInsideTemp & Main.sTemperature
          If iInsideHumid Then txtHumidIn.Text = iInsideHumid & ("% Humidity")

          sUrl = Subst("http://chart.apis.google.com/chart?chs=200x105&cht=gom&chco=0000ff99,ffffff99,ff000099&chd=t:&1&chl=&2", CFloat(Replace(Str(iInsideTemp), ",", ".", gb.String)) * 3, Str(iInsideTemp) & rDevice!label)
          hDownloadInsideImage = New HttpClient As "hDownloadInsideImage"
          hDownloadInsideImage.URL = sUrl
          hDownloadInsideImage.Async = True
          hDownloadInsideImage.TimeOut = 5
          hDownloadInsideImage.Get()
          Return
        Endif
      Next
    Else
      Main.WriteDebugLog(("[FHome] No device found that is member of the groups 'Inside', 'Humidity' and 'Temperature'"))
    Endif
  Endif

Catch
  Main.WriteDebugLog(("[HomeScreen] Error parsing inside temp and humid: ") & Error.Text & " at " & Error.Where)

End

Public Sub hDownloadInsideImage_Finished()

  Dim sTempFile As String = Temp() & ".jpg"
  Dim sDownloadInside As String

  Select hDownloadInsideImage.Code
    Case 200
      ' read the data
      If Lof(hDownloadInsideImage) Then sDownloadInside = Read #hDownloadInsideImage, Lof(hDownloadInsideImage)
      ' save the data
      File.Save(sTempFile, sDownloadInside)
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Downloaded inside graph image ") & hDownloadInsideImage.URL)
      Try pbInsideTemp.Picture = Picture.Load(sTempFile)
      If Exist(sTempFile) Then Kill sTempFile
    Case Else
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading inside graph image ") & hDownloadInsideImage.URL)
  End Select
  Try hDownloadInsideImage.Close

End

Public Sub hDownloadInsideImage_Error()

  If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading inside graph image ") & hDownloadInsideImage.URL)
  Try hDownloadInsideImage.Close

End

Public Sub DisplayOutsideTempHumid()

  Dim rDevice As Result
  Dim sUrl As String

  bWeatherSensor = False
  frameOutside.Hide
  Try rDevice = Devices.FindAllEnabledDevices()
  If Not Error Then
    If rDevice.Available Then
      For Each rDevice
        If InStr(rDevice!groups, "Outside") And If InStr(rDevice!groups, "Humidity") And If InStr(rDevice!groups, "Temperature") Then
          bWeatherSensor = True
          frameOutside.Show
          If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Device with address '") & rDevice!address & ("' and name '") & rDevice!name & ("' looks like an outside temp/hygro sensor."))

          ' initialize outside temp/humidity
          txtTemperature.Text = "--" & Main.sTemperature
          iOutsideTemp = ""
          txtHumid.Text = " -- % Humidity"
          iOutsideHumid = ""

          If rDevice!value Then iOutsideTemp = Devices.CorrectValue(rDevice!value, rDevice!correction, rDevice)
          If rDevice!value2 Then iOutsideHumid = Devices.CorrectValue(rDevice!value2, rDevice!correction2, rDevice)

          Try txtTemperature.Text = CFloat(Replace(Str(iOutsideTemp), ",", ".", gb.String)) & Main.sTemperature
          Try txtHumid.Text = CFloat(Replace(Str(iOutsideHumid), ",", ".", gb.String)) & ("% Humidity")

          If iOutsideTemp Then
            sUrl = Subst("http://chart.apis.google.com/chart?chs=200x105&cht=gom&chco=0000ff99,ffffff99,ff000099&chd=t:&1&chl=&2", CFloat(Replace(Str(iOutsideTemp), ",", ".", gb.String)) * 3, Str(iOutsideTemp) & rDevice!label)
            hDownloadOutsideImage = New HttpClient As "hDownloadOutsideImage"
            hDownloadOutsideImage.URL = sUrl
            hDownloadOutsideImage.Async = True
            hDownloadOutsideImage.TimeOut = 5
            hDownloadOutsideImage.Get()
          Else
            pbOutsideTemp.Picture = ""
          Endif

          Return
        Endif
      Next
    Else
      Main.WriteDebugLog(("[FHome] No device found that is member of the groups 'Outside', 'Humidity' and 'Temperature'"))
    Endif
  Endif

Catch
  Main.WriteDebugLog(("[HomeScreen] Error parsing outside temp and humid: ") & Error.Text & " at " & Error.Where)

End

Public Sub hDownloadOutsideImage_Finished()

  Dim sTempFile As String = Temp() & ".jpg"
  Dim sDownloadOutside As String

  Select hDownloadOutsideImage.Code
    Case 200
      ' read the data
      If Lof(hDownloadOutsideImage) Then sDownloadOutside = Read #hDownloadOutsideImage, Lof(hDownloadOutsideImage)
      ' save the data
      File.Save(sTempFile, sDownloadOutside)
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Downloaded outside graph image ") & hDownloadOutsideImage.URL)
      Try pbOutsideTemp.Picture = Picture.Load(sTempFile)
      If Exist(sTempFile) Then Kill sTempFile
    Case Else
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading outside graph image ") & hDownloadOutsideImage.URL)
  End Select
  Try hDownloadOutsideImage.Close

End

Public Sub hDownloadOutsideImage_Error()

  If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading outside graph image ") & hDownloadOutsideImage.URL)
  Try hDownloadOutsideImage.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' refresh contents
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRefresh_Timer()

  DisplayPage()

End

Private Sub DisplayUsageDial()

  Dim sUrl, sValue, sValue2 As String
  Dim rResult As Result

  Try rResult = Devices.FindAllEnabledDevices()
  If Not Error Then
    If rResult.Available Then
      For Each rResult
        If InStr(rResult!groups, "Energy") And If InStr(rResult!groups, "Power") Then
          If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Device with address '") & rResult!address & ("' and name '") & rResult!name & ("' looks like a power meter."))
          bPowerSensor = True
          framePowerUsage.Show
          If rResult!value Then
            sValue = Devices.CorrectValue(rResult!value, rResult!correction, rResult)
            txtPower1.text = sValue & " " & rResult!label
          Endif
          If rResult!value2 Then
            sValue2 = Devices.CorrectValue(rResult!value2, rResult!correction2, rResult)
            txtPower2.text = sValue2 & " " & rResult!label2
            sUrl = Subst("http://chart.apis.google.com/chart?chs=200x105&cht=gom&chco=00ff0099,ffff0099,ff000099&chd=t:&1&chl=&2", CFloat(Replace(rResult!value2, ",", ".", gb.String)) / 10, Val(rResult!value2) & rResult!label2)
            hDownloadUsageImage = New HttpClient As "hDownloadUsageImage"
            hDownloadUsageImage.URL = sUrl
            hDownloadUsageImage.Async = True
            hDownloadUsageImage.TimeOut = 5
            hDownloadUsageImage.Get()
          Endif
          Return
        Endif
      Next
    Else
      Main.WriteDebugLog(("[FHome] No device found that is member of the groups 'Energy' and 'Power'"))
    Endif
  Endif
  bPowerSensor = False
  framePowerUsage.Hide

Catch
  Main.WriteDebugLog(("[HomeScreen] Error parsing energy usage: ") & Error.Text & " at " & Error.Where)

End

Public Sub hDownloadUsageImage_Finished()

  Dim sTempFile As String = Temp() & ".jpg"
  Dim sDownloadUsage As String

  Select hDownloadUsageImage.Code
    Case 200
      ' read the data
      If Lof(hDownloadUsageImage) Then sDownloadUsage = Read #hDownloadUsageImage, Lof(hDownloadUsageImage)
      ' save the data
      File.Save(sTempFile, sDownloadUsage)
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Downloaded usage graph image ") & hDownloadUsageImage.URL)
      Try pbPowerUsage.Picture = Picture.Load(sTempFile)
      If Exist(sTempFile) Then Kill sTempFile
    Case Else
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading usage graph image ") & hDownloadUsageImage.URL)
  End Select
  Try hDownloadUsageImage.Close

End

Public Sub hDownloadUsageImage_Error()

  If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading usage graph image ") & hDownloadUsageImage.URL)
  Try hDownloadUsageImage.Close

End

Private Sub DisplayWeatherPic1(sUrl As String)

  hDownloadWeatherImage1 = New HttpClient As "hDownloadWeatherImage1"
  hDownloadWeatherImage1.URL = sUrl
  hDownloadWeatherImage1.Async = True
  hDownloadWeatherImage1.TimeOut = 5
  hDownloadWeatherImage1.Get()

Catch
  Main.WriteDebugLog(("[HomeScreen] Error fetching weather pic1: ") & Error.Text & " at " & Error.Where)

End

Public Sub hDownloadWeatherImage1_Finished()

  Dim sTempFile As String = Temp() & ".jpg"
  Dim sDownloadWeather As String

  Select hDownloadWeatherImage1.Code
    Case 200
      ' read the data
      If Lof(hDownloadWeatherImage1) Then sDownloadWeather = Read #hDownloadWeatherImage1, Lof(hDownloadWeatherImage1)
      ' save the data
      File.Save(sTempFile, sDownloadWeather)
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Downloaded weather image ") & hDownloadWeatherImage1.URL)
      Try pbWeather1.Picture = Picture.Load(sTempFile)
      If Exist(sTempFile) Then Kill sTempFile
    Case Else
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading weather image ") & hDownloadWeatherImage1.URL)
  End Select
  Try hDownloadWeatherImage1.Close

End

Private Sub DisplayWeatherPic2(sUrl As String)

  hDownloadWeatherImage2 = New HttpClient As "hDownloadWeatherImage2"
  hDownloadWeatherImage2.URL = sUrl
  hDownloadWeatherImage2.Async = True
  hDownloadWeatherImage2.TimeOut = 5
  hDownloadWeatherImage2.Get()

Catch
  Main.WriteDebugLog(("[HomeScreen] Error fetching weather pic2: ") & Error.Text & " at " & Error.Where)

End

Public Sub hDownloadWeatherImage2_Finished()

  Dim sTempFile As String = Temp() & ".jpg"
  Dim sDownloadWeather As String

  Select hDownloadWeatherImage2.Code
    Case 200
      ' read the data
      If Lof(hDownloadWeatherImage2) Then sDownloadWeather = Read #hDownloadWeatherImage2, Lof(hDownloadWeatherImage2)
      ' save the data
      File.Save(sTempFile, sDownloadWeather)
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Downloaded weather image ") & hDownloadWeatherImage2.URL)
      Try pbWeather2.Picture = Picture.Load(sTempFile)
      If Exist(sTempFile) Then Kill sTempFile
    Case Else
      If Main.bMainDebug Then Main.WriteDebugLog(("[FHome] Error downloading weather image ") & hDownloadWeatherImage2.URL)
  End Select
  Try hDownloadWeatherImage2.Close

End

Private Sub DisplayWeather()

  Dim StrFile, StrLine, StrCondition As String
  Dim fFile As File
  Dim IntI As Integer

  StrFile = XMLParser.ParseXML("http://api.wxbug.net/getForecastRSS.aspx?ACode=" & Trim(Main.sWeatherBugID) & "&citycode=" & Main.sWeatherBugCityCode & "&unittype=1&outputtype=1")
  If Len(StrFile) > 0 Then
    fFile = Open StrFile For Input
    While Not Eof(fFile)
      Line Input #fFile, StrLine
      ' --- put names of days onto frames ---
      If Left(StrLine, 51) = "aws:weather|aws:forecasts|aws:forecast|aws:title|=|" Then
        Inc IntI
        Main.SetTextProperty("lblDay" & CStr(IntI), (Right(StrLine, Len(StrLine) - 51)), Me)
      Endif
      ' --- put condition pictures in frames ---
      If Left(StrLine, 56) = "aws:weather|aws:forecasts|aws:forecast|aws:image|icon|=|" Then
        StrCondition = Main.ParseTag(Right(StrLine, 7), 1, ".")
        Select Case IntI
          Case 1
            DisplayWeatherPic1("http://img.weather.weatherbug.com/forecast/icons/localized/55x46/en/trans/cond" & StrCondition & ".png")
          Case 2
            DisplayWeatherPic2("http://img.weather.weatherbug.com/forecast/icons/localized/55x46/en/trans/cond" & StrCondition & ".png")
        End Select
      Endif
      ' --- put global forecast onto labels ---
      ' IF Left(StrLine, 62) = "aws:weather|aws:forecasts|aws:forecast|aws:short-prediction|=|" THEN
      '   Main.SetTextProperty("LblForeCast" & CStr(IntI), Main.TranslateViaInternet(Right(StrLine, Len(StrLine) - 62), Main.sAppLanguage), ME)
      ' END IF
      ' --- put high and low temperature onto labels ---
       If Left(StrLine, 50) = "aws:weather|aws:forecasts|aws:forecast|aws:high|=|" Then
         Main.SetTextProperty("LblTempHigh" & CStr(IntI), Main.Translate("High:") & " " & Right(StrLine, Len(StrLine) - 50) & " °C", Me)
       Endif
       If Left(StrLine, 49) = "aws:weather|aws:forecasts|aws:forecast|aws:low|=|" Then
         Main.SetTextProperty("LblTempLow" & CStr(IntI), Main.Translate("Low:") & " " & Right(StrLine, Len(StrLine) - 49) & " °C", Me)
       Endif
      ' --- put large forecast into textareas ---
      ' IF Left(StrLine, 56) = "aws:weather|aws:forecasts|aws:forecast|aws:prediction|=|" THEN
      '   Main.SetTextProperty("TxtPrediction" & CStr(IntI), Main.TranslateViaInternet(Right(StrLine, Len(StrLine) - 56), Main.sAppLanguage), ME)
      ' END IF
    Wend
    fFile.Close
    fFile = Null
    Kill StrFile
  Endif
  frameWeather.Title = ("Weather for ") & Main.sWeatherBugCity

End

Public Sub frameOutside_MouseUp()

  FMain.OpenPage(FClimate)

End

Public Sub pbPowerUsage_MouseUp()

  FMain.OpenPage(FEnergy)

End

Public Sub pbOutsideTemp_MouseUp()

  FMain.OpenPage(FClimate)

End

Public Sub txtHumid_MouseUp()

  FMain.OpenPage(FClimate)

End

Public Sub txtTemperature_MouseUp()

  FMain.OpenPage(FClimate)

End

Public Sub framePowerUsage_MouseUp()

  FMain.OpenPage(FEnergy)

End

Public Sub cmbScenario_Change()

  ' Don't process the _Change event
  If bCmbScenarioLoading Then Return

  ' Check if the Scenario exists in the list - we can also get manually typed in values
  ' Revert to the previous scenario - but prevent an additional _Change event
  If cmbScenario.Text <> "" Then
    If cmbScenario.Find(cmbScenario.Text) = -1 Then
      bCmbScenarioLoading = True
      cmbScenario.Text = sActiveScenario
      bCmbScenarioLoading = False
      Return
    Endif
  Endif

  sActiveScenario = cmbScenario.Text
  Main.SetGlobalVar("Thermostat_Mode", cmbScenario.Text, True)
  Thermostat.DeleteAllDerogateHeating()

End

Public Sub Form_Resize()

  svHome.Move(4, 30, Me.ClientWidth - 8, Me.ClientHeight - 31)
  VBoxTop.Move(4, 4, Me.ClientWidth - 4, Me.ClientHeight - 40)

End

Public Sub FillThermoData()

  Dim vValue As Variant
  Dim hComboBox As ComboBox
  Dim hLabel As Label
  Dim hSpinBox As SpinBox
  Dim iY As Integer = 10
  Dim sName As String

  ' get defined thermostats
  For Each vValue In Main.GlobalVar
    If Left(Main.GlobalVar.Key, 15) = "Thermo_Control_" Then
      sName = Right(Main.GlobalVar.Key, Len(Main.GlobalVar.Key) - 15)
      If sName = "All" Then Continue
      ' name
      hLabel = New Label(vboxThermoName) As "Label"
      With hLabel
        .Text = sName
        .X = 7
        .Y = iY
        .Height = 21
      End With

      ' combo
      hComboBox = New ComboBox(vboxThermoCmb) As "ThermoCombo"
      With hComboBox
        .X = 7
        .Y = iY
        .Height = 21
        .Width = 72
        .Tag = sName
      End With
      hComboBox.Add("")
      hComboBox.Add("Local")
      hComboBox.Add("Manual")
      hComboBox.Add("Profile")
      hComboBox.Add("Off")
      hComboBox.Text = Main.GetGlobalVar("Thermo_Control_" & sName)

      ' spinbox
      hSpinBox = New SpinBox(vboxThermoSpin) As "ThermoSpin"
      With hSpinBox
        .X = 7
        .Y = iY
        .Height = 21
        .Width = 42
        .Tag = sName
        Try .Value = Main.GetGlobalVar("Thermo_Temp_" & sName)
      End With

      ' label
      hLabel = New Label(vboxThermoLabel) As "Label"
      With hLabel
        .Text = "°C"
        .X = 7
        .Y = iY
        .Height = 21
        .Tag = sName
      End With

      If hComboBox.Index <> 2 Then
        hLabel.Enabled = False
        hSpinBox.Enabled = False
      Endif
      iY += 32
    Endif
  Next

Catch
  Main.WriteDebugLog(("[HomeScreen] Error creating temperature control form: ") & Error.Text & " at " & Error.Where)

End

Public Sub ThermoCombo_Change()

  Dim sTag As String = Last.Tag
  Dim sValue As String = Last.Text

  Main.SetGlobalVar("Thermo_Control_" & sTag, sValue, True)
  EnableObject(sTag, vboxThermoSpin, IIf(Last.Index <> 2, False, True))
  EnableObject(sTag, vboxThermoLabel, IIf(Last.Index <> 2, False, True))

End

Private Sub EnableObject(sTag As String, oPanel As Object, bEnable As Boolean)

  Dim oObject As Object

  ' find objects to tweak
  For Each oObject In oPanel.Children
    If oObject.Tag = sTag Then
      oObject.Enabled = bEnable
      Return
    Endif
  Next

End

Public Sub ThermoSpin_Change()

  Dim sTag As String = Last.Tag
  Dim sValue As String = Last.Text

  Main.SetGlobalVar("Thermo_Temp_" & sTag, sValue, True)

End

Public Sub btnThermostat_Click()

  FEventThermostat.Show()

End

Public Sub btnAlarm_Click()

  Select Case Main.GetGlobalVar("Alarm_Armed")
    Case "On"
      Main.SetGlobalVar("Alarm_Armed", "Off", True)
    Case "Off"
      Main.SetGlobalVar("Alarm_Armed", "On", True)
  End Select
  btnAlarm_setup()

End

Public Sub btnAlarm_setup()

  Select Case Main.GetGlobalVar("Alarm_Armed")
    Case "On"
      btnAlarm.Text = "Alarm On"
      btnAlarm.Picture = Picture.Load("icons/led-off.png")
    Case "Off"
      btnAlarm.Text = "Alarm Off"
      btnAlarm.Picture = Picture.Load("icons/led-on.png")
  End Select

End

Public Sub DisplayFrameAllHeating()

  cmbAllHeating.Clear
  cmbAllHeating.Add("")
  cmbAllHeating.Add("Off")
  cmbAllHeating.Add("On")
  cmbAllHeating.Add("Profile")
  cmbAllHeating.Text = Main.GetGlobalVar("Thermo_Control_All")

End

Public Sub cmbAllHeating_Click()

  If cmbAllHeating.Text Then Main.SetGlobalVar("Thermo_Control_All", cmbAllHeating.Text, True)

End

Public Sub btnRefresh_Click()

  DisplayPage()

End
