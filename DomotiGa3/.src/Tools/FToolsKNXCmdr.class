' Gambas class file

' Description:
' FToolsKNXCmdr.class
' KNX Commander for testing and programming.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private aDataPointTypesMajor As New String[]
Private aDataPointTypesMinor As New String[]
Private aValues As New String[]
Private $sSelectedMajor As String
Private $sSelectedMinor As String
Private hKNX As Object
Private aTestDataAvail As New String[]

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)
  If Not Main.bServer Then
    Message.Info("This commander doesn't support Client mode yet!")
    Me.Close
  Endif

  Try hKNX = Plugin.GetPluginObject("KNX", 1).Interface
  If Error Then
    hKNX = Null
  Endif
  InitValues()
  InitImport()
  InitTests()

End

Public Sub InitImport()

  With tbvDevicesFound
    .Font.Size = "8"
    .Columns.Count = 3
    .Columns[0].Title = ("Name")
    .Columns[0].Width = 150
    .Columns[1].Title = ("Address")
    .Columns[1].Width = 50
    .Columns[2].Title = ("EIS")
    .Columns[2].Width = 80
  End With

End

Public Sub InitValues()

  Dim sDataPoint As String

  ' fill datapoint type major
  aDataPointTypesMajor.Add("1.* 1-Bit")
  aDataPointTypesMajor.Add("2.* 2-Bit Controlled")
  aDataPointTypesMajor.Add("3.* 3-Bit Controlled")
  aDataPointTypesMajor.Add("4.* Character")
  aDataPointTypesMajor.Add("5.* 8-Bit Unsigned Value")
  aDataPointTypesMajor.Add("6.* 8-Bit Signed Value")
  aDataPointTypesMajor.Add("7.* 2-Bit Unsigned Value")
  aDataPointTypesMajor.Add("8.* 2-Bit Signed Value")
  aDataPointTypesMajor.Add("9.* 2-Bit Float Value")
  aDataPointTypesMajor.Add("10.* Time")
  aDataPointTypesMajor.Add("11.* Date")
  aDataPointTypesMajor.Add("12.* 4-Byte Unsigned Value")
  aDataPointTypesMajor.Add("13.* 4-Byte Signed Value")
  aDataPointTypesMajor.Add("14.* 4-Byte Float Value")
  aDataPointTypesMajor.Add("15.* Entrance Access")
  aDataPointTypesMajor.Add("16.* Character String")
  aDataPointTypesMajor.Add("17.* Scene Number")
  aDataPointTypesMajor.Add("18.* Scene Control")
  aDataPointTypesMajor.Add("19.* Date Time")
  aDataPointTypesMajor.Add("20.* 1-Byte")
  aDataPointTypesMajor.Add("21.* 8-Bit Set")
  aDataPointTypesMajor.Add("22.* 16-Bit Set")
  aDataPointTypesMajor.Add("23.* 2-Bit Set")
  aDataPointTypesMajor.Add("25.* 2-Nibble Set")
  aDataPointTypesMajor.Add("26.* 8-Bit Set")
  aDataPointTypesMajor.Add("27.* 32-Bit Set")
  aDataPointTypesMajor.Add("29.* Electrical Energy")
  aDataPointTypesMajor.Add("30.* 24 Times Channel Active.")
  aDataPointTypesMajor.Add("217.* Datapoint Type Version")
  aDataPointTypesMajor.Add("219.* Alarm Info")
  aDataPointTypesMajor.Add("222.* 3x 2-Byte Float Value")
  aDataPointTypesMajor.Add("229.* 4-1-1-Byte Combined Info.")
  aDataPointTypesMajor.Add("230.* MBus Address")
  aDataPointTypesMajor.Add("232.* 3-Byte Colour RGB")
  aDataPointTypesMajor.Add("234.* Language Code (ISO 639-1)")
  aDataPointTypesMajor.Add("237.* Configuration/Diagnostics")
  aDataPointTypesMajor.Add("238.* Configuration/Diagnostics")

  aDataPointTypesMinor.Add("1.001 Switch")
  aDataPointTypesMinor.Add("1.002 Boolean")
  aDataPointTypesMinor.Add("1.003 Enable")
  aDataPointTypesMinor.Add("1.004 Ramp")
  aDataPointTypesMinor.Add("1.005 Alarm")
  aDataPointTypesMinor.Add("1.006 BinaryValue")
  aDataPointTypesMinor.Add("1.007 Step")
  aDataPointTypesMinor.Add("1.008 Up/Down")
  aDataPointTypesMinor.Add("1.009 Open/Close")
  aDataPointTypesMinor.Add("1.010 Start/Stop")
  aDataPointTypesMinor.Add("1.011 State")
  aDataPointTypesMinor.Add("1.012 Invert")
  aDataPointTypesMinor.Add("1.013 Dim Set Style")
  aDataPointTypesMinor.Add("1.014 Input Source")
  aDataPointTypesMinor.Add("1.015 Reset")
  aDataPointTypesMinor.Add("1.016 Acknowledge")
  aDataPointTypesMinor.Add("1.017 Trigger")
  aDataPointTypesMinor.Add("1.018 Occupancy")
  aDataPointTypesMinor.Add("1.019 Window/Door")
  aDataPointTypesMinor.Add("1.021 Logical Function")
  aDataPointTypesMinor.Add("1.022 Scene AB")
  aDataPointTypesMinor.Add("1.023 Shutter/Blinds Mode")
  aDataPointTypesMinor.Add("1.100 Heat/Cool")
  aDataPointTypesMinor.Add("2.001 Switch Control")
  aDataPointTypesMinor.Add("2.002 Bool Control")
  aDataPointTypesMinor.Add("2.003 Enable Control")
  aDataPointTypesMinor.Add("2.004 Ramp Control")
  aDataPointTypesMinor.Add("2.005 Alarm Control")
  aDataPointTypesMinor.Add("2.006 BinaryValue Control")
  aDataPointTypesMinor.Add("2.007 Step Control")
  aDataPointTypesMinor.Add("2.008 Direction1 Control")
  aDataPointTypesMinor.Add("2.009 Direction2 Control")
  aDataPointTypesMinor.Add("2.010 Start Control")
  aDataPointTypesMinor.Add("2.011 State Control")
  aDataPointTypesMinor.Add("2.012 Invert Control")
  aDataPointTypesMinor.Add("3.007 Control Dimming")
  aDataPointTypesMinor.Add("3.008 Control Blinds")
  aDataPointTypesMinor.Add("4.001 Character (ASCII)")
  aDataPointTypesMinor.Add("4.002 Character (ISO 8859-1)")
  aDataPointTypesMinor.Add("5.001 Percentage (0..100%)")
  aDataPointTypesMinor.Add("5.003 Angle (0..360°)")
  aDataPointTypesMinor.Add("5.004 Percentage (0..255%)")
  aDataPointTypesMinor.Add("5.005 Ratio (0..255)")
  aDataPointTypesMinor.Add("5.006 Tariff (0..254)")
  aDataPointTypesMinor.Add("5.010 Counter Pulses (0..255)")
  aDataPointTypesMinor.Add("6.001 Percentage (-128..127%)")
  aDataPointTypesMinor.Add("6.003 Counter Pulses (-128..127)")
  aDataPointTypesMinor.Add("6.004 Status with Mode")
  aDataPointTypesMinor.Add("7.xxx 16-bit Unsigned (0..65535)")
  aDataPointTypesMinor.Add("7.001 Pulses (0..100%)")
  aDataPointTypesMinor.Add("7.002 Time (mS)")
  aDataPointTypesMinor.Add("7.003 Time (10 mS)")
  aDataPointTypesMinor.Add("7.004 Time (100 mS)")
  aDataPointTypesMinor.Add("7.005 Time (Sec)")
  aDataPointTypesMinor.Add("7.006 Time (Min)")
  aDataPointTypesMinor.Add("7.007 Time (Hour)")
  aDataPointTypesMinor.Add("7.010 Property Data Type")
  aDataPointTypesMinor.Add("7.011 Length (mm)")
  aDataPointTypesMinor.Add("7.012 Current (mA)")
  aDataPointTypesMinor.Add("7.013 Brightness (lux)")
  aDataPointTypesMinor.Add("8.001 Pulse Difference")
  aDataPointTypesMinor.Add("8.002 Time Lag (mS)")
  aDataPointTypesMinor.Add("8.003 Time Lag (10 mS)")
  aDataPointTypesMinor.Add("8.004 Time Lag (100 mS)")
  aDataPointTypesMinor.Add("8.005 Time Lag (Sec)")
  aDataPointTypesMinor.Add("8.006 Time Lag (Min)")
  aDataPointTypesMinor.Add("8.007 Time Lag (Hour)")
  aDataPointTypesMinor.Add("8.010 Percentage Diff. (%)")
  aDataPointTypesMinor.Add("8.011 Rotation Angle (°)")
  aDataPointTypesMinor.Add("9.001 Temperatue (°C)")
  aDataPointTypesMinor.Add("9.002 Temperature Diff. (K)")
  aDataPointTypesMinor.Add("9.003 Kelvin/Hour (K/h)")
  aDataPointTypesMinor.Add("9.004 Lux (Lux")
  aDataPointTypesMinor.Add("9.005 Speed (Mtr/Sec)")
  aDataPointTypesMinor.Add("9.006 Pressure (Pa)")
  aDataPointTypesMinor.Add("9.007 Percentage (%)")
  aDataPointTypesMinor.Add("9.008 Air Quality (ppm)")
  aDataPointTypesMinor.Add("9.010 Time (Sec)")
  aDataPointTypesMinor.Add("9.011 Time (mS)")
  aDataPointTypesMinor.Add("9.020 Voltage (mV)")
  aDataPointTypesMinor.Add("9.021 Current (mA)")
  aDataPointTypesMinor.Add("9.022 Power Density (W/m²)")
  aDataPointTypesMinor.Add("9.023 Kelvin/Percent (K/%)")
  aDataPointTypesMinor.Add("9.024 Power (kW)")
  aDataPointTypesMinor.Add("9.025 Volume Flow (l/h)")
  aDataPointTypesMinor.Add("9.026 Rain Amount (l/m²)")
  aDataPointTypesMinor.Add("9.027 Temperature (°F)")
  aDataPointTypesMinor.Add("9.028 Wind Speed (km/h)")
  aDataPointTypesMinor.Add("10.001 Time of Day")
  aDataPointTypesMinor.Add("11.001 Date")
  aDataPointTypesMinor.Add("12.001 Counter (Pulses)")
  aDataPointTypesMinor.Add("13.001 Counter (Pulses)")
  aDataPointTypesMinor.Add("13.002 Flow Rate (m³/h)")
  aDataPointTypesMinor.Add("13.010 Active Energy (Wh)")
  aDataPointTypesMinor.Add("13.011 Apparant Energy (VAh)")
  aDataPointTypesMinor.Add("13.012 Reactive Energy (VARh)")
  aDataPointTypesMinor.Add("13.013 Active Energy (kWh)")
  aDataPointTypesMinor.Add("13.014 Apparant Energy (kVAh)")
  aDataPointTypesMinor.Add("13.015 Reactive Energy (kVARh)")
  aDataPointTypesMinor.Add("13.100 Time Lag (Sec)")
  aDataPointTypesMinor.Add("14.000 Acceleration (m/s²)")
  aDataPointTypesMinor.Add("14.001 Angular Acceleration (rad/s²)")
  aDataPointTypesMinor.Add("14.002 Activation Energy (J/mol)")
  aDataPointTypesMinor.Add("14.003 Radioactive Energy (1/s")
  aDataPointTypesMinor.Add("14.004 Amount of Substance (mol)")
  aDataPointTypesMinor.Add("14.005 Amplitude")
  aDataPointTypesMinor.Add("14.006 Angle (radiant)")
  aDataPointTypesMinor.Add("14.007 Angle (degree)")
  aDataPointTypesMinor.Add("14.008 Angular Momentum (Js)")
  aDataPointTypesMinor.Add("14.009 Angular Velocity (rad/s)")
  aDataPointTypesMinor.Add("14.010 Area (m*m)")
  aDataPointTypesMinor.Add("14.011 Capacitance (F)")
  aDataPointTypesMinor.Add("14.012 Flux Density (C/m²)")
  aDataPointTypesMinor.Add("14.013 Charge Density (C/m³)")
  aDataPointTypesMinor.Add("14.014 Compressibility (m²/N)")
  aDataPointTypesMinor.Add("14.015 Conductance (l/h)")
  aDataPointTypesMinor.Add("14.016 Conductivity (S/m)")
  aDataPointTypesMinor.Add("14.017 Density (kg/m³)")
  aDataPointTypesMinor.Add("14.018 Electric Charge (C)")
  aDataPointTypesMinor.Add("14.019 Electric Current(A)")
  aDataPointTypesMinor.Add("14.020 Electric Current Density (A/m²)")
  aDataPointTypesMinor.Add("14.021 Electric Dipole Moment (Cm)")
  aDataPointTypesMinor.Add("14.022 Electric Displacement (C/m²)")
  aDataPointTypesMinor.Add("14.023 Electric Field Strenght (V/m)")
  aDataPointTypesMinor.Add("14.024 Electric Flux (C)")
  aDataPointTypesMinor.Add("14.025 Electric Flux Density")
  aDataPointTypesMinor.Add("14.026 Electric Polarization (C/m²)")
  aDataPointTypesMinor.Add("14.027 Electric Potential (V)")
  aDataPointTypesMinor.Add("14.028 Electric Potential  Diff. (V)")
  aDataPointTypesMinor.Add("14.029 Electromagnetic Moment (Am²)")
  aDataPointTypesMinor.Add("14.030 Electromotive Force (V)")
  aDataPointTypesMinor.Add("14.031 Energy (J)")
  aDataPointTypesMinor.Add("14.032 Force (N)")
  aDataPointTypesMinor.Add("14.033 Frequency (Hz)")
  aDataPointTypesMinor.Add("14.034 Angular Frequency (rad/s)")
  aDataPointTypesMinor.Add("14.035 Heat Capacity (J/K)")
  aDataPointTypesMinor.Add("14.036 Heat Flow Rate (W)")
  aDataPointTypesMinor.Add("14.037 Heat Quantity")
  aDataPointTypesMinor.Add("14.038 Impedance (Ohm)")
  aDataPointTypesMinor.Add("14.039 Length (m)")
  aDataPointTypesMinor.Add("14.040 Light Quantity (J)")
  aDataPointTypesMinor.Add("14.041 Luminance (cd/m²)")
  aDataPointTypesMinor.Add("14.042 Luminous Flux (lm)")
  aDataPointTypesMinor.Add("14.043 Luminous Intensity (cd)")
  aDataPointTypesMinor.Add("14.044 Magnetic Field Strength (A/m)")
  aDataPointTypesMinor.Add("14.045 Magnetic Flux (lm)")
  aDataPointTypesMinor.Add("14.046 Magnetic Flux Density (T)")
  aDataPointTypesMinor.Add("14.047 Magnetic Moment (Am²)")
  aDataPointTypesMinor.Add("14.048 Magnetic Polarisation (T)")
  aDataPointTypesMinor.Add("14.049 Magnetisation (A/m)")
  aDataPointTypesMinor.Add("14.050 Magnetomotive Force (A)")
  aDataPointTypesMinor.Add("14.051 Mass (Kg)")
  aDataPointTypesMinor.Add("14.052 Mass Flux (Kg/s)")
  aDataPointTypesMinor.Add("14.053 Momentum (N/s)")
  aDataPointTypesMinor.Add("14.054 Phase Angle (rad)")
  aDataPointTypesMinor.Add("14.055 Phase Angle (°)")
  aDataPointTypesMinor.Add("14.056 Power (W)")
  aDataPointTypesMinor.Add("14.057 Power Factor (Cos Phi)")
  aDataPointTypesMinor.Add("14.058 Pressure (Pa)")
  aDataPointTypesMinor.Add("14.059 Reactance (Ohm)")
  aDataPointTypesMinor.Add("14.060 Resistance (Ohm)")
  aDataPointTypesMinor.Add("14.061 Resistivity (Ohmm)")
  aDataPointTypesMinor.Add("14.062 Self Inductance (H)")
  aDataPointTypesMinor.Add("14.063 Solid Angle (sr)")
  aDataPointTypesMinor.Add("14.064 Sound Intensity (W/m²)")
  aDataPointTypesMinor.Add("14.065 Speed (m/s)")
  aDataPointTypesMinor.Add("14.066 Stress (Pa)")
  aDataPointTypesMinor.Add("14.067 Surface Tension (N/m)")
  aDataPointTypesMinor.Add("14.068 Temperature (°C)")
  aDataPointTypesMinor.Add("14.069 Temperature Absolute (°C)")
  aDataPointTypesMinor.Add("14.070 Temperature Diff. (K)")
  aDataPointTypesMinor.Add("14.071 Thermal Capacity (J/K)")
  aDataPointTypesMinor.Add("14.072 Thermal Conductivity (W/mK)")
  aDataPointTypesMinor.Add("14.073 Thermoelectric Power (V/K)")
  aDataPointTypesMinor.Add("14.074 Time (Sec)")
  aDataPointTypesMinor.Add("14.075 Torque (Nm)")
  aDataPointTypesMinor.Add("14.076 Volume (m³)")
  aDataPointTypesMinor.Add("14.077 Volume Flux (m³/s)")
  aDataPointTypesMinor.Add("14.078 Weight (N)")
  aDataPointTypesMinor.Add("14.079 Work (J)")
  aDataPointTypesMinor.Add("15.000 Access Data")
  aDataPointTypesMinor.Add("16.000 Character String (ASCII)")
  aDataPointTypesMinor.Add("16.001 Character String (ISO 8859-1)")
  aDataPointTypesMinor.Add("17.001 Scene Number")
  aDataPointTypesMinor.Add("18.001 Scene Control")
  aDataPointTypesMinor.Add("19.001 Date and Time")
  aDataPointTypesMinor.Add("20.001 SCLO Mode")
  aDataPointTypesMinor.Add("20.002 Building Mode")
  aDataPointTypesMinor.Add("20.003 Occupied")
  aDataPointTypesMinor.Add("20.004 Priority")
  aDataPointTypesMinor.Add("20.005 Light Appl. Mode")
  aDataPointTypesMinor.Add("20.006 Application Area")
  aDataPointTypesMinor.Add("20.007 Alarm Class Type")
  aDataPointTypesMinor.Add("20.008 PSU Mode")
  aDataPointTypesMinor.Add("20.011 System Error Class")
  aDataPointTypesMinor.Add("20.012 HVAC Error Class")
  aDataPointTypesMinor.Add("20.013 Time Delay")
  aDataPointTypesMinor.Add("20.014 Wind Force Scale (0..12)")
  aDataPointTypesMinor.Add("20.017 Sensor Mode")
  aDataPointTypesMinor.Add("20.020 Actuactor Connect Type")
  aDataPointTypesMinor.Add("20.100 Fuel Type")
  aDataPointTypesMinor.Add("20.101 Burner Type")
  aDataPointTypesMinor.Add("20.102 HVAC Mode")
  aDataPointTypesMinor.Add("20.103 DHW Mode")
  aDataPointTypesMinor.Add("20.104 Load Priority")
  aDataPointTypesMinor.Add("20.105 HVAC Control Mode")
  aDataPointTypesMinor.Add("20.106 HVAC Emergency Mode")
  aDataPointTypesMinor.Add("20.107 Changeover Mode")
  aDataPointTypesMinor.Add("20.108 Valve Mode")
  aDataPointTypesMinor.Add("20.109 Damper Mode")
  aDataPointTypesMinor.Add("20.110 Heater Mode")
  aDataPointTypesMinor.Add("20.111 Fan Mode")
  aDataPointTypesMinor.Add("20.112 Master/Slave Mode")
  aDataPointTypesMinor.Add("20.113 Status Room Setpoint")
  aDataPointTypesMinor.Add("20.120 ADA Type")
  aDataPointTypesMinor.Add("20.121 Backup Mode")
  aDataPointTypesMinor.Add("20.122 Start Synchronization")
  aDataPointTypesMinor.Add("20.600 Behavior Lock/Unlock")
  aDataPointTypesMinor.Add("20.601 Behavior Bus Power Up/Down")
  aDataPointTypesMinor.Add("20.602 DALI Fade Time")
  aDataPointTypesMinor.Add("20.603 Blinking Mode")
  aDataPointTypesMinor.Add("20.604 Light Control Mode")
  aDataPointTypesMinor.Add("20.605 Switch PB Model")
  aDataPointTypesMinor.Add("20.606 Switch PB Action")
  aDataPointTypesMinor.Add("20.607 Dim PB Model")
  aDataPointTypesMinor.Add("20.608 Switch On Mode")
  aDataPointTypesMinor.Add("20.609 Load Type Set")
  aDataPointTypesMinor.Add("20.610 Load Type Detection")
  aDataPointTypesMinor.Add("20.801 SAB Except Behavior")
  aDataPointTypesMinor.Add("20.802 SAB Behavior Lock/Unlock")
  aDataPointTypesMinor.Add("20.803 SSSB Mode")
  aDataPointTypesMinor.Add("20.804 Blinds Control Mode")
  aDataPointTypesMinor.Add("20.1000 Communication Mode")
  aDataPointTypesMinor.Add("20.1001 Additional Info Types")
  aDataPointTypesMinor.Add("20.1002 RF Mode Select")
  aDataPointTypesMinor.Add("20.1003 RF Filter Select")
  aDataPointTypesMinor.Add("21.001 General Status")
  aDataPointTypesMinor.Add("21.002 Device Control")
  aDataPointTypesMinor.Add("21.100 Forcing Signal")
  aDataPointTypesMinor.Add("21.101 Forcing Signal Cool")
  aDataPointTypesMinor.Add("21.102 Room Heating Cntrl. Status")
  aDataPointTypesMinor.Add("21.103 Solar DHW Cntrl. Status")
  aDataPointTypesMinor.Add("21.104 Fuel Type Set")
  aDataPointTypesMinor.Add("21.105 Room Cooling Cntrl. Status")
  aDataPointTypesMinor.Add("21.106 Ventilation Cntrl. Status")
  aDataPointTypesMinor.Add("21.601 Lighting Actuator Error Info")
  aDataPointTypesMinor.Add("21.1000 RF Communication Mode Info")
  aDataPointTypesMinor.Add("21.1001 RF Filter Mode Info")
  aDataPointTypesMinor.Add("21.1010 Channel Activation 8")
  aDataPointTypesMinor.Add("22.100 DHW Controller Status")
  aDataPointTypesMinor.Add("22.101 RHCC Status")
  aDataPointTypesMinor.Add("22.1000 Media")
  aDataPointTypesMinor.Add("22.1010 Channel Activation 16")
  aDataPointTypesMinor.Add("23.001 On/Off Action")
  aDataPointTypesMinor.Add("23.002 Alarm Reaction")
  aDataPointTypesMinor.Add("23.003 Up/Down Action")
  aDataPointTypesMinor.Add("23.102 HVAC Push Button Action")
  aDataPointTypesMinor.Add("25.1000 Busy/Nack Repetitions")
  aDataPointTypesMinor.Add("26.001 Scene Information")
  aDataPointTypesMinor.Add("27.001 Bit-Combined Info On/Off")
  aDataPointTypesMinor.Add("29.010 Active Energy (Wh)")
  aDataPointTypesMinor.Add("29.011 Apparant Energy (VAh)")
  aDataPointTypesMinor.Add("29.012 Reactive Energy (VARh)")
  aDataPointTypesMinor.Add("30.1010 Channel Activation 24")
  aDataPointTypesMinor.Add("217.001 DPT Version")
  aDataPointTypesMinor.Add("219.001 Alarm Info")
  aDataPointTypesMinor.Add("222.100 Room Temp. Setpoint")
  aDataPointTypesMinor.Add("222.101 Room Temp. Setpoint Shift")
  aDataPointTypesMinor.Add("229.001 Metering Value (Val,Enco,Cmd)")
  aDataPointTypesMinor.Add("230.1000 MBus Address")
  aDataPointTypesMinor.Add("232.600 Colour RGB 3x(0..255)")
  aDataPointTypesMinor.Add("234.001 Language Code (ASCII)")
  aDataPointTypesMinor.Add("237.600 DALI Control Gear Diag.")
  aDataPointTypesMinor.Add("238.600 DALI Diagnostics")
  aDataPointTypesMinor.Add("240.800 Combined Position")
  aDataPointTypesMinor.Add("241.800 Status SAB")

  ' values contain values different than simple valuebox input
  ' it is used to fill and display a combobox if more than one value is found per dpt
  aValues.Add("1.001 Off")
  aValues.Add("1.001 On")
  aValues.Add("1.002 False")
  aValues.Add("1.002 True")
  aValues.Add("1.003 Disable")
  aValues.Add("1.003 Enable")
  aValues.Add("1.004 No Ramp")
  aValues.Add("1.004 Ramp")
  aValues.Add("1.005 No Alarm")
  aValues.Add("1.005 Alarm")
  aValues.Add("1.006 Low")
  aValues.Add("1.006 High")
  aValues.Add("1.007 Decrease")
  aValues.Add("1.007 Increase")
  aValues.Add("1.008 Up")
  aValues.Add("1.008 Down")
  aValues.Add("1.009 Open")
  aValues.Add("1.009 Close")
  aValues.Add("1.010 Stop")
  aValues.Add("1.010 Start")
  aValues.Add("1.011 Not Inverted")
  aValues.Add("1.011 Inverted")
  aValues.Add("1.013 Start/Stop")
  aValues.Add("1.013 Cyclically")
  aValues.Add("1.014 Fixed")
  aValues.Add("1.014 Calculated")
  aValues.Add("1.015 No Action")
  aValues.Add("1.015 Reset")
  aValues.Add("1.016 No Action")
  aValues.Add("1.016 Ack")
  aValues.Add("1.017 Trigger0")
  aValues.Add("1.017 Trigger1")
  aValues.Add("1.018 Not Occupied")
  aValues.Add("1.018 Occupied")
  aValues.Add("1.019 Closed")
  aValues.Add("1.019 Open")
  aValues.Add("1.021 Or")
  aValues.Add("1.021 And")
  aValues.Add("1.022 Scene A")
  aValues.Add("1.022 Scene B")
  aValues.Add("1.023 Only Move Up/Down Mode")
  aValues.Add("1.023 Move Up/Down + StepStop Mode")
  aValues.Add("1.100 Cooling")
  aValues.Add("1.100 Heating")
 
  aValues.Add("2.001 No priority, Off")
  aValues.Add("2.001 No priority, On")
  aValues.Add("2.001 Priority, Off")
  aValues.Add("2.001 Priority, On")
  aValues.Add("2.002 No priority, False")
  aValues.Add("2.002 No priority, True")
  aValues.Add("2.002 Priority, False")
  aValues.Add("2.002 Priority, True")
  aValues.Add("2.003 No priority, Disable")
  aValues.Add("2.003 No priority, Enable")
  aValues.Add("2.003 Priority, Disable")
  aValues.Add("2.003 Priority, Enable")
  aValues.Add("2.004 No priority, No Ramp")
  aValues.Add("2.004 No priority, Ramp")
  aValues.Add("2.004 Priority, No Ramp")
  aValues.Add("2.004 Priority, Ramp")
  aValues.Add("2.005 No priority, No Alarm")
  aValues.Add("2.005 No priority, Alarm")
  aValues.Add("2.005 Priority, No Alarm")
  aValues.Add("2.005 Priority, Alarm")
  aValues.Add("2.006 No priority, Low")
  aValues.Add("2.006 No priority, High")
  aValues.Add("2.006 Priority, Low")
  aValues.Add("2.006 Priority, High")
  aValues.Add("2.007 No priority, Decrease")
  aValues.Add("2.007 No priority, Increase")
  aValues.Add("2.007 Priority, Decrease")
  aValues.Add("2.007 Priority, Increase")
  aValues.Add("2.010 No priority, Stop")
  aValues.Add("2.010 No priority, Start")
  aValues.Add("2.010 Priority, Stop")
  aValues.Add("2.010 Priority, Start")
  aValues.Add("2.011 No priority, Inactive")
  aValues.Add("2.011 No priority, Active")
  aValues.Add("2.011 Priority, Inactive")
  aValues.Add("2.011 Priority, Active")
  aValues.Add("2.012 No priority, Not Inverted")
  aValues.Add("2.012 No priority, Inverted")
  aValues.Add("2.012 Priority, Not Inverted")
  aValues.Add("2.012 Priority, Inverted")
  aValues.Add("3.007 Decrease, Break")
  aValues.Add("3.007 Decrease, 100%")
  aValues.Add("3.007 Decrease, 50%")
  aValues.Add("3.007 Decrease, 25%")
  aValues.Add("3.007 Decrease, 12%")
  aValues.Add("3.007 Decrease, 6%")
  aValues.Add("3.007 Decrease, 3%")
  aValues.Add("3.007 Decrease, 1%")
  aValues.Add("3.007 Increase, Break")
  aValues.Add("3.007 Increase, 100%")
  aValues.Add("3.007 Increase, 50%")
  aValues.Add("3.007 Increase, 25%")
  aValues.Add("3.007 Increase, 12%")
  aValues.Add("3.007 Increase, 6%")
  aValues.Add("3.007 Increase, 3%")
  aValues.Add("3.007 Increase, 1%")
  aValues.Add("3.008 Up, Break")
  aValues.Add("3.008 Up, 100%")
  aValues.Add("3.008 Up, 50%")
  aValues.Add("3.008 Up, 25%")
  aValues.Add("3.008 Up, 12%")
  aValues.Add("3.008 Up, 6%")
  aValues.Add("3.008 Up, 3%")
  aValues.Add("3.008 Up, 1%")
  aValues.Add("3.008 Down, Break")
  aValues.Add("3.008 Down, 100%")
  aValues.Add("3.008 Down, 50%")
  aValues.Add("3.008 Down, 25%")
  aValues.Add("3.008 Down, 12%")
  aValues.Add("3.008 Down, 6%")
  aValues.Add("3.008 Down, 3%")
  aValues.Add("3.008 Down, 1%")


  ' [CAL] = show calender browse, [TOD] = show time of day picker, [VAL] = value field
  aValues.Add("7.* 0 0")
  aValues.Add("7.010 0 0")
  aValues.Add("7.011 0 0")
  aValues.Add("7.012 0 0")
  aValues.Add("8.* 0 0")
  aValues.Add("8.011 0 0")
  aValues.Add("8.012 0 0")
  aValues.Add("9.* 0 0")
  aValues.Add("9.025 0 0")
  aValues.Add("9.026 0 0")
  aValues.Add("9.027 0 0")
  aValues.Add("9.028 0 0")
  aValues.Add("10.* 0 0 0")
  aValues.Add("10.001 [TOD]")
  aValues.Add("11.* 0 0 0")
  aValues.Add("11.001 [CAL]")
  aValues.Add("12.* 0 0 0 0")
  aValues.Add("13.* 0 0 0 0")
  aValues.Add("13.002 0 0 0 0")
  aValues.Add("14.* 0 0 0 0")
  aValues.Add("15.* 0 0 0 0")
  aValues.Add("15.000 0 0 0 0")
  aValues.Add("16.* 0 0 0 0")
  aValues.Add("18.001 Activate [VAL]")
  aValues.Add("18.001 Learn [VAL]")
  aValues.Add("19.* 0 0 0 0 0 0 0 0")
  aValues.Add("19.001 0 0 0 0 0 0 0 0")
  aValues.Add("22.* 0 0")
  aValues.Add("22.100 0 0")
  aValues.Add("22.101 0 0")
  aValues.Add("22.1000 0 0")
  aValues.Add("22.1010 0 0")
  aValues.Add("27.* 0 0 0 0")
  aValues.Add("27.001 0 0 0 0")
  aValues.Add("29.* 0 0 0 0 0 0 0 0")
  aValues.Add("29.010 0 0 0 0 0 0 0 0")
  aValues.Add("29.011 0 0 0 0 0 0 0 0")
  aValues.Add("29.012 0 0 0 0 0 0 0 0")
  aValues.Add("30.* 0 0 0")
  aValues.Add("30.1010 0 0 0")
  aValues.Add("217.* 0 0")
  aValues.Add("217.001 0 0")
  aValues.Add("219.* 0 0 0 0 0 0")
  aValues.Add("219.001 0 0 0 0 0 0")
  aValues.Add("222.* 0 0 0 0 0 0")
  aValues.Add("222.100 0 0 0 0 0 0")
  aValues.Add("222.101 0 0 0 0 0 0")
  aValues.Add("229.* 0 0 0 0 0 0")
  aValues.Add("229.001 0 0 0 0 0 0")
  aValues.Add("230.* 0 0 0 0 0 0 0 0")
  aValues.Add("230.1000 0 0 0 0 0 0 0 0")
  aValues.Add("232.* 0 0 0")
  aValues.Add("232.600 0 0 0")
  aValues.Add("234.* 0 0")
  aValues.Add("234.001 0 0")
  aValues.Add("237.* 0 0")
  aValues.Add("237.600 0 0")
  aValues.Add("238.* 0")
  aValues.Add("238.600 0")

  ' fill Major DPT combo
  cmbDatapointsMajor.Add("")
  For Each sDataPoint In aDataPointTypesMajor
    cmbDatapointsMajor.Add(sDataPoint)
  Next

End

Public Sub SelectMinor(sSelected As String)

  Dim sDataPoint As String
  Dim aScan As String[]

  aScan = Scan(sSelected, "*.*")
  If aScan.Count Then
    $sSelectedMajor = aScan[0] & "."

    ' clear combo
    cmbDataPointsMinor.Clear
    cmbDataPointsMinor.Add("")

    For Each sDataPoint In aDataPointTypesMinor
      If InStr(sDataPoint, $sSelectedMajor) = 1 Then
        cmbDatapointsMinor.Add(sDataPoint)
      Endif
    Next

    For Each sDataPoint In aValues
        If InStr(sDataPoint, $sSelectedMajor & "*") = 1 Then
          txtValue.Text = sDataPoint
        Endif
    Next
  Endif

End

Public Sub SelectValuesAndLabel(sSelected As String)

  Dim aDPT, aUnits As String[]
  Dim aFound As New String[]
  Dim sValue, sFound As String

  ' blank field selected
  If Not Len(sSelected) Then
    cmbValues.Clear
    txtValue.Text = ""
    lblUnits.Text = ""
    Return
  Endif

  ' clear combo
  cmbValues.Clear
  aDPT = Scan(sSelected, "* *")
  If aDPT.Count >= 2 Then
    $sSelectedMinor = aDPT[0]
    For Each sValue In aValues
      If InStr(sValue, aDPT[0]) = 1 Then
        aFound.Add(Right(sValue, Len(sValue) - Len(aDPT[0]) - 1))
      Endif
    Next
  Endif

  txtValue.Text = ""
  If aFound.Count > 1 Then
    For Each sFound In aFound
      cmbValues.Add(sFound)
    Next
  Else
    txtValue.Text = sFound
  Endif

  ' check if unit is specified, display if found
  aUnits = Scan(sSelected, "*(*)")
  If aUnits.Count = 2 Then
    lblUnits.Text = aUnits[1]
    lblUnits.Show
  Else
    lblUnits.Text = ""
    lblUnits.Hide
  Endif

  ' if found show combo, else textbox
  If aFound.Count > 1 Then
    txtValue.Hide
    cmbValues.Show
  Else
    cmbValues.Hide
    txtValue.Show
  Endif
  txtDPT.Text = $sSelectedMinor

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub cmbDatapointsMajor_Change()

  SelectMinor(cmbDatapointsMajor.Text)

End
' 
' Public Sub btnWrite_Click()
' 
'   If cmbValues.Visible Then
'     AddLog("Raw Value = " & cmbValues.Index)
'     AddLog("Command = " & cmbValues.Text)
'   Endif
'   If txtValue.Visible Then
'     AddLog("Raw Value = " & txtValue.Text)
'   Endif
'   AddLog("DPT = " & txtDPT.Text)
'   AddLog("Address = " & txtGroupAddress.Text)
' 
' End

Public Sub btnEncode_Click()

  Dim sUnits, sData As String
  Dim iCnt As Integer
  Dim aUnits As String[]
  Dim bData As Byte[]

  If Not Len(txtDPT.Text) Then
    If Not Len(cmbDatapointsMajor.Text) Then
      Balloon("Please select a major DPT category!", cmbDatapointsMajor)
      Return
    Endif
    If Not Len(cmbDatapointsMinor.Text) Then
      Balloon("Please select a minor DPT category!", cmbDatapointsMinor)
      Return
    Endif
  Endif
  If Not Len(txtValue.Text) Then
    Balloon("Please enter a value!", txtValue)
    Return
  Endif

  ' check if unit is specified, display if found
  aUnits = Scan(cmbDataPointsMinor.Text, "*(*)")
  If aUnits.Count = 2 Then
    sUnits = aUnits[1]
  Endif

  If Main.bServer And If hKNX Then
    bData = hKNX.EncodeDPTs(txtValue.Text, txtDPT.Text)
    For iCnt = 0 To bData.Max
      sData &= Hex(bData[iCnt], 2) & " "
    Next
    AddEncodeLog(sData)
  Endif

Catch
  Message.Error("Error: '" & Error.text & "' at '" & Error.Where & "'")

End

Public Sub cmbDatapointsMinor_Change()

  SelectValuesAndLabel(cmbDatapointsMinor.Text)

End

Public Sub btnImport_Click()

  Dim hFile As File
  Dim sFile, sLine As String
  Dim aLines, aData As Variant[]
  Dim iCount As Integer

  Dialog.Filter = ["*", ("All files"), "*.{esf}", ("ETS export files")]
  If Dialog.OpenFile() Then Return

  sFile = Dialog.Path
  txtFileName.Text = sFile
  hFile = Open sFile For Input
  If Lof(hFile) = 0 Then
    Message.Info(("The file is empty!"))
    hFile.Close
    Return
  Else
    aLines = New Variant[]
    While Not Eof(hFile)
      Line Input #hFile, sLine
      aLines.Add(sLine)
    Wend
  Endif
  hFile.Close

  tbvDevicesFound.Clear
  tbvDevicesFound.Rows.Count = aLines.Count - 1

  For Each sLine In aLines
    aData = Split(sLine, gb.Tab)
    If aData.Count = 1 Then
      txtProjectName.Text = aData[0]
    Else If aData.Count >= 4 Then
      ' Print sLine
      tbvDevicesFound[iCount, 0].Text = aData[1]
      tbvDevicesFound[iCount, 1].Text = Right(aData[0], Len(aData[0]) - RInStr(aData[0], "."))
      tbvDevicesFound[iCount, 2].Text = aData[2]
      Inc iCount
    Else
      Message(("No devices to import!"))
    Endif
  Next
  vbDevicesFound.Value = iCount

Catch
  Message.Error("Error: '" & Error.text & "' at '" & Error.Where & "'")

End

Public Sub btnCopyDevice_Click()

  Dim iCurRow As Integer = tbvDevicesFound.Row

  If tbvDevicesFound.Row = -1 Then Return

  ' copy basic device info
  txtDeviceName.Text = tbvDevicesFound[iCurRow, 0].Text
  txtDeviceAddress.Text = tbvDevicesFound[iCurRow, 1].Text
  MapDeviceType(tbvDevicesFound[iCurRow, 2].Text)
  DisplayAddressInfo()

End

Public Sub MapDeviceType(sETStype As String) As String

  Dim rTypes As Result

  cmbDeviceType.Clear
  Select Case sETStype
    Case "EIS 1 'Switching' (1 Bit)"
      rTypes = FindDeviceTypesofProtocol("KNX", "DPT 1.")
      If rTypes Then
        For Each rTypes
          cmbDeviceType.Add(rTypes!name, rTypes!id)
        Next
      Endif
    Case "EIS 2 'Dimming - control' (4 Bit)"
      cmbDeviceType.Add("KNX Device Dimmer")
    Case "Uncertain (1 Byte)"
      rTypes = FindDeviceTypesofProtocol("KNX", "DPT 5.")
      If rTypes Then
        For Each rTypes
          cmbDeviceType.Add(rTypes!name, rTypes!id)
        Next
      Endif
      rTypes = FindDeviceTypesofProtocol("KNX", "DPT 6.")
      If rTypes Then
        For Each rTypes
          cmbDeviceType.Add(rTypes!name, rTypes!id)
        Next
      Endif
    Case "Uncertain (2 Byte)"
      rTypes = FindDeviceTypesofProtocol("KNX", "DPT 9.")
      If rTypes Then
        For Each rTypes
          cmbDeviceType.Add(rTypes!name, rTypes!id)
        Next
      Endif
    Case "Uncertain (4 Byte)"
      rTypes = FindDeviceTypesofProtocol("KNX", "DPT 14.")
      If rTypes Then
        For Each rTypes
          cmbDeviceType.Add(rTypes!name, rTypes!id)
        Next
      Endif
    Case "All"
      rTypes = FindDeviceTypesofProtocol("KNX", "")
      If rTypes Then
        For Each rTypes
          cmbDeviceType.Add(rTypes!name, rTypes!id)
        Next
      Endif
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return devicetypes with matching description
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceTypesofProtocol(sProtocol As String, sDescription As String) As Result

  Dim rResult As Result

  Try rResult = Main.hDB.Exec("SELECT * FROM devicetypes WHERE protocol = &1 AND description LIKE '%" & sDescription & "%'", sProtocol)
  If rResult Then
    If rResult.Available Then
      Return rResult
    Else
      Return Null
    Endif
  Else
    Return Null
  Endif

End

Public Sub btnInsertAddress_Click()

  Dim iCurRow As Integer = tbvDevicesFound.Row

  If tbvDevicesFound.Row = -1 Then Return

  ' copy groups address
  If tbvDevicesFound[iCurRow, 1].Text <> "" Then
    If txtDeviceAddress.Text Then
      txtDeviceAddress.Text &= "|" & tbvDevicesFound[iCurRow, 1].Text
    Else
      txtDeviceAddress.Text = tbvDevicesFound[iCurRow, 1].Text
    Endif
  Endif
  DisplayAddressInfo()

End

Private Sub DisplayAddressInfo()

  Select cmbDeviceType.Text
    Case "KNX Device Dimmer"
      txtAddressFormatInfo.Text = "0/1/2|1/2/3|2/3/4[|1/2/1|..] Minimal 3 Group Addresses, 1st = Position (On/Off), 2nd = Control (Bright/Dim), 3rd = Value (90%), followed by optional Group Address(es) for Status Feedback"
    Case "KNX Device Blinds"
      txtAddressFormatInfo.Text = "0/1/2|1/2/3|2/3/4[|1/2/1|..] Minimal 3 Group Addresses, 1st = Position (On/Off), 2nd = Control (Up/Down), 3rd = Value (90%), followed by optional Group Address(es) for Status Feedback"
    Case Else
      txtAddressFormatInfo.Text = "0/1/2[|1/2/3|..] Minimal 1 Group Address for Control or Value, optional one or more Group Address(es) for Status Feedback"
  End Select

End

Private Sub AddEncodeLog(sText As String)

  txtEncode.Text = sText & "\n" & txtEncode.Text
  txtEncode.Pos = 0

End

Private Sub AddDecodeLog(sText As String)

  txtDecode.Text &= sText & "\n"
  txtDecode.Pos = Len(txtDecode.Text)

End

Public Sub cmbDeviceType_Click()

  txtValueUnits.Text = GetUnitsfromDeviceType(cmbDeviceType.Text)

End

Public Sub btnShowAll_Click()

  MapDeviceType("All")

End

Public Sub CreateDevice(sName As String, sAddress As String, iDeviceTypeId As Integer) As Integer

  Dim rResult As Result
  Dim sResult As String

  ' create device
  Main.hDB.Begin()
  rResult = Main.hDB.Create("devices")
  rResult!name = sName
  rResult!devicetype_id = iDeviceTypeId
  rResult!interface_id = 13
  rResult!address = sAddress
  rResult!enabled = True
  rResult!onicon = "new.png"
  rResult!dimicon = "new.png"
  rResult!officon = "new.png"
  rResult!hide = False
  rResult!dimable = False
  rResult!switchable = False
  rResult!firstseen = Now()
  rResult!lastseen = Now()
  rResult.Update()
  Main.hDB.Commit()

  sResult = "Imported device '" & sName & "' with address '" & sAddress & "' and device type '" & cmbDeviceType.Text & "'"
  Message.Info(sResult)
  Main.WriteDebugLog("[KNX] " & sResult & ".")

  ' try to get id of created device
  Try rResult = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM devices")
  If Not Error Then
    Return rResult!lastid
  Else
    Return 0
  Endif

Catch
   Main.WriteDebugLog("[KNX] Error trying to import KNX device '" & Error.Text & "' at '" & Error.Where & "'!")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return id for devicetype_id with devicetype name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub FindDeviceTypeIdForDesc(sDeviceType As String) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT id FROM devicetypes WHERE name = &1", sDeviceType)
  If rDevice.Available Then
    Return rDevice!id
  Else
    Return 0
  Endif

End

Public Sub btnCreate_Click()

  Dim iDeviceTypeId As Integer = FindDeviceTypeIdForDesc(cmbDeviceType.Text)
  Dim iDeviceIdCreated As Integer

  If Not Len(txtDeviceName.Text) Then
    Balloon(("Please enter a name for this device!"), txtDeviceName)
    Return
  Endif

  If DeviceNameExist(txtDeviceName.Text) Then
    Balloon(("Please enter a unique name for this device!"), txtDeviceName)
    Return
  Endif

  If DeviceAddressExist(txtDeviceAddress.Text) Then
    Balloon(("Please enter a unique address for this device!"), txtDeviceAddress)
    Return
  Endif

  If Not Len(cmbDeviceType.Text) Then
    Balloon(("Please select a devicetype for this device!"), cmbDeviceType)
    Return
  Endif

  If iDeviceTypeId Then
    iDeviceIdCreated = CreateDevice(txtDeviceName.Text, txtDeviceAddress.Text, iDeviceTypeId)
    If iDeviceIdCreated Then
      If Not Devices.CreateValue(iDeviceIdCreated, txtValueNum.Text, GetUnitsfromDeviceType(cmbDeviceType.Text)) Then
        Balloon(("This value already exists for this device!"), txtValueNum)
      Endif
    Endif
  Else
    Message.Error("Cannot find devicetype!")
  Endif

End

Private Sub DeviceNameExist(sName As String, Optional iDeviceId As Integer) As Boolean

  Dim iId As Integer

  iId = Devices.FindIdForDevice(sName)
  If iId And If iId <> iDeviceId Then Return True

  Return False

End

Private Sub DeviceAddressExist(sAddress As String, Optional iDeviceId As Integer) As Boolean

  Dim rResultDevice As Result

  If Len(sAddress) = 0 Then Return True

  rResultDevice = Main.hDB.Exec("SELECT id, address FROM devices WHERE interface_id = 13 AND enabled is TRUE")
  If rResultDevice Then
    If rResultDevice.Count Then
      For Each rResultDevice
        If iDeviceId Then
          If sAddress = rResultDevice!address And If rResultDevice!id <> iDeviceId Then Return True
        Else
          If sAddress = rResultDevice!address Then Return True
        Endif
      Next
    Endif
  Endif
  Return False

End

Private Sub GetUnitsfromDeviceType(sSelected As String) As String

  Dim aUnits As String[]

  ' check if unit is specified
  aUnits = Scan(sSelected, "*(*)")
  If aUnits.Count = 2 Then
    Return aUnits[1]
  Else
    Return ""
  Endif

End

Public Sub btnDecode_Click()

  Dim aPacket As New String[0]
  Dim sFormat, sUnits As String
  Dim iCnt As Integer
  Dim aUnits As String[]

  If Not Len(txtDPT.Text) Then
    If Not Len(cmbDatapointsMajor.Text) Then
      Balloon("Please select a major DPT category!", cmbDatapointsMajor)
      Return
    Endif
    If Not Len(cmbDatapointsMinor.Text) Then
      Balloon("Please select a minor DPT category!", cmbDatapointsMinor)
      Return
    Endif
  Endif
  If Not Len(txtPacket.Text) Then
    Balloon("Please specify raw packet data to parse!", txtPacket)
    Return
  Endif

  ' check if unit is specified, display if found
  aUnits = Scan(cmbDataPointsMinor.Text, "*(*)")
  If aUnits.Count = 2 Then
    sUnits = aUnits[1]
  Endif

  sFormat = Replace(txtPacket.Text, " ", "")
  If Len(sFormat) Mod 2 Then
    Balloon("Please specify packet in 2 digit bytes!", txtPacket)
  Else
    For iCnt = 1 To Len(sFormat) Step 2
      aPacket.Add(Mid(sFormat, iCnt, 2))
    Next
    If Main.bServer And If hKNX Then
      AddDecodeLog(hKNX.ProcessDPTs(aPacket, txtDPT.Text) & " " & sUnits)
    Endif
  Endif

Catch
  Message.Error("Error: '" & Error.text & "' at '" & Error.Where & "'")

End

Public Sub InitTests()

  Dim sDPT As String

  aTestDataAvail = ["1.001", "1.002", "1.003", "1.004", "1.005", "1.006", "1.007", "1.008", "1.009", "1.010", "1.011", "1.012", "1.013", "1.014", "1.015", "1.018", "1.019",
   "1.021", "1.022", "1.023", "1.100", "2.001", "2.002", "2.003", "2.004", "2.005", "2.006", "2.007", "2.008", "2.009", "2.010", "2.011", "3.007", "3.008", "2.012", "5.001", "5.003", "5.004",
   "5.005", "5.006", "5.010", "7.001", "7.002", "7.003", "7.004", "7.005", "7.006", "7.007", "7.010", "7.011", "7.012", "7.013", "9.001", "9.002", "9.003", "9.004", "9.005",
    "9.006", "9.007", "9.008", "9.010", "9.011", "9.020", "9.021", "9.022", "9.023", "9.024", "9.025", "9.026", "9.027", "9.028", "10.001", "11.001", "12.001", "13.001", 
    "13.002", "13.010", "13.011", "13.012", "13.013", "13.013", "13.015", "13.100", "14.000", "14.001", "16.001", "17.001", "18.001", "19.001", "232.600"]
  cmbTestDatapoints.Add("")
  For Each sDPT In aTestDataAvail
    cmbTestDatapoints.Add(sDPT)
  Next

End

Public Sub cmbTestDatapoints_Change()

  Dim aTestData As New String[128]
  Dim aResults As New String[128]

  If Not Len(cmbTestDataPoints.Text) Then
    Balloon("Please select a DPT to test!", cmbTestDatapoints)
    Return
  Endif

  Select Case cmbTestDataPoints.Text
    Case "1.001", "2.001"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Off", "On", "Off", "On"]
    Case "1.002", "2.002"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["False", "True", "False", "True"]
    Case "1.003", "2.003"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Disable", "Enable", "Disable", "Enable"]
    Case "1.004", "2.004"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["No Ramp", "Ramp", "No Ramp", "Ramp"]
    Case "1.005", "2.005"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["No Alarm", "Alarm", "No Alarm", "Alarm"]
    Case "1.006", "2.006"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Low", "High", "Low", "High"]
    Case "1.007", "2.007"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Decrease", "Increase", "Decrease", "Increase"]
    Case "1.008", "2.008"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Up", "Down", "Up", "Down"]
    Case "1.009", "2.009"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Open", "Close", "Open", "Close"]
    Case "1.010", "2.010"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Stop", "Start", "Stop", "Start"]
    Case "1.011", "2.011"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Inactive", "Active", "Inactive", "Active"]
    Case "1.012", "2.012"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Not Inverted", "Inverted", "Not Inverted", "Inverted"]
    Case "1.013"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Start/Stop", "Cyclically", "Start/Stop", "Cyclically"]
    Case "1.014"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Fixed", "Calculated", "Fixed", "Calculated"]
    Case "1.015"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["No Action", "Reset", "No Action", "Reset"]
    Case "1.018"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Not Occupied", "Occupied", "Not Occupied", "Occupied"]
    Case "1.019"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Closed", "Open", "Closed", "Open"]
    Case "1.021"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Or", "And", "Or", "And"]
    Case "1.022"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Scene A", "Scene B", "Scene A", "Scene B"]
    Case "1.023"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Only Move Up/Down Mode", "Move Up/Down + StepStop Mode", "Only Move Up/Down Mode", "Move Up/Down + StepStop Mode"]
    Case "1.100"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["Cooling", "Heating", "Cooling", "Heating"]
    Case "1.023"
      aTestData = ["40", "41", "80", "81"]
      aResults = ["only move up/down", "ove up/down + step-stop", "only move up/down", "ove up/down + step-stop"]
    Case "3.007"
      aTestData = ["00 00", "00 80", "00 FF", "00 FF 00"]
      aResults = ["Stop", "50", "100", "100"]
    Case "3.008"
      aTestData = ["00 00", "00 7F", "00 80", "00 FF", "00 FF 00"]
      aResults = ["Stop", "179", "181", "360", "360"]
    Case "5.001"
      aTestData = ["00 00", "00 80", "00 FF", "00 FF 00"]
      aResults = ["0", "50", "100", "100"]
    Case "5.003"
      aTestData = ["00 00", "00 7F", "00 80", "00 FF", "00 FF 00"]
      aResults = ["0", "179", "181", "360", "360"]
    Case "5.004"
      aTestData = ["00 00", "00 32", "00 64", "00 FF", "00 FF 00"]
      aResults = ["0", "50", "100", "255", "255"]
    Case "5.005", "5.006", "5.010"
      aTestData = ["00 00", "00 FF", "00 FF 00"]
      aResults = ["0", "255", "255"]
    Case "7.001", "7.002", "7.005", "7.006", "7.007", "7.010", "7.011", "7.012", "7.013"
      aTestData = ["00 00 00", "00 FF 00", "00 FF FF", "00 FF FF FF"]
      aResults = ["0", "65280", "65535", "65535"]
    Case "7.003"
      aTestData = ["00 00 00", "00 FF 00", "00 FF FF", "00 FF FF FF"]
      aResults = ["0", "652800", "655350", "655350"]
    Case "7.004"
      aTestData = ["00 00 00", "00 FF 00", "00 FF FF", "00 FF FF FF"]
      aResults = ["0", "6528000", "6553500", "6553500"]
    Case "9.001", "9.002", "9.003", "9.004", "9.005", "9.006", "9.007", "9.008", "9.010", "9.011", "9.020", "9.004", "9.021", "9.022", "9.023", "9.024", "9.025", "9.026", "9.027", "9.028"
      aTestData = ["00 00 00", "00 7F FF", "00 07 FF", "00 87 FF", "00 80 00", "00 F8 00", "00 F8 00 FF"]
      aResults = ["0", "670760.96", "20.47", "-0.01", "-20.48", "-671088.64", "-671088.64"]
    Case "10.001"
      aTestData = ["00 20 00 00", "00 00 00 00", "00 20 00 01", "00 37 3B 3B"]
      aResults = ["Mon 00:00:00", "00:00:00", "Mon 00:00:01", "Mon 23:59:59"]
    Case "11.001"
      aTestData = ["00 01 01 00 FF", "00 01 01 00", "00 01 01 59"]
      aResults = ["2000-01-01", "2000-01-01", "2089-01-01"]
    Case "12.001"
      aTestData = ["00 FF FF FF FF FF", "00 00 00 00 00", "00 FF FF FF FF"]
      aResults = ["4294967295", "0", "4294967295"]
    Case "13.001", "13.002", "13.010", "13.011", "13.012", "13.013", "13.013", "13.015", "13.100"
      aTestData = ["00 00 00 00", "00 7F FF FF FF", "00 FF FF FF FF", "00 80 00 00 00", "00 7F FF FF FF FF"]
      aResults = ["0", "2147483647", "-1", "-2147483648", "2147483647"]
    Case "14.000", "14.001"
      aTestData = ["00 00 00 00 01", "00 80 00 00 01", "00 7F 7F FF FF", "00 FF 7F FF FF"]
      aResults = ["0.0000000000000000000000000000000000000000000014", "-0.0000000000000000000000000000000000000000000014", "340282000000000000000000000000000000000", "-340282000000000000000000000000000000000"]
    Case "16.001"
      aTestData = ["00 23 4C 3A", "00 4B 4E 58 20 69 73 20 4F 4B 00 00 00 00 00"]
      aResults = ["#L:", "KNX is OK"]
    Case "17.001"
      aTestData = ["00 FF 00", "00 00", "00 3F", "00 C0", "00 FF"]
      aResults = ["63", "0", "63", "0", "63"]
    Case "18.001"
      aTestData = ["00 FF", "00 00", "00 3F", "00 C0", "00 FF"]
      aResults = ["learn 63", "activate 0", "activate 63", "learn 0", "learn 63"]
    Case "19.001"
      aTestData = ["00 00 01 01 00 00 00 04 00", "00 00 01 01 20 00 00 00 00", "00 72 07 1F 00 00 00 05 00"]
      aResults = ["1900-01-01 (no workday) 00:00:00, no sync", "1900-01-01 Mon (no workday) 00:00:00, no sync", "2014-07-31 (no workday) 00:00:00 DST, no sync"]
    Case "232.600"
      aTestData = ["00 00 00 00", "00 FF FF FF"]
      aResults = ["r:0 g:0 b:0", "r:255 g:255 b:255"]
    Case Else
      AddDecodeLog("No test data available for DPT " & cmbTestDataPoints.Text, True)
      Return
  End Select
  CheckDPTs(aTestData, aResults)

End

Public Sub CheckDPTs(aTestData As String[], sResults As String[])

  Dim iCnt, iPackCnt As Integer
  Dim sPacket, sResult As String
  Dim aTestPacket As New String[0]

  If Main.bServer And If hKNX Then
    txtDecode.Clear
    AddDecodeLog("Testing DPT " & cmbTestDataPoints.Text & " data set:")
    For iCnt = 0 To aTestData.Count - 1
      sPacket = Replace(aTestData[iCnt], " ", "")
      For iPackCnt = 1 To Len(sPacket) Step 2
        aTestPacket.Add(Mid(sPacket, iPackCnt, 2))
      Next
      sResult = hKNX.ProcessDPTs(aTestPacket, cmbTestDataPoints.Text)
      AddDecodeLog("Decoded '" & sPacket & "' to '" & sResult & IIf(sResult = sResults[iCnt], "' = OK!", "' = FALSE!" & " (" & sResults[iCnt] & ")"))
      aTestPacket.Clear
    Next
  Else If
    AddDecodeLog("Cannot test, no active KNX Plugin!")
  Endif

Catch
   Message.Error(Error.Text & "' at '" & Error.Where & "'!")

End

Public Sub txtPacket_Change()

  If Len(txtPacket.Text) Then
    btnDecode.Enabled = True
  Else
    btnDecode.Enabled = False
  Endif

End

Public Sub tbvDevicesFound_ColumnClick(Column As Integer)

  FMain.SortGridView(tbvDevicesFound, Column, True)

End
