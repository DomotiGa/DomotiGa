' Gambas class file

' Description:
' FToolsZWaveCmdr.class
' Test some basic Z-Wave functionality.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private iSelectedNode As Integer
Private iConfigNode As Integer
Private iAssocNode As Integer
Private iUserCodeNode As Integer
Private tbText As TextBox

' Define timers for Z-Wave Commander messages, the "real" timers are defined in CZWave.class
' because the Commander doesn't have a garantueed lifetime during the Z-Wave lifetime
Private tControllerCommandMessage As Timer
Private tUserCodeEnrollMessage As Timer

Private $Error As String
Private $InstanceList As New Integer[]
Private $cControllerList As Collection
Private $cControllerInfo As Collection
Private $iHomeId As Integer
Private $bIsRunning As Boolean

' Only used in server mode
Private hOpenZWave As Object

Public tRefreshTabInfo As Timer
Public iRefreshTabInfo As Integer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize buttons and fill in current values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Form_Open()

  Dim jCnt As Integer
  Dim iInstance As Integer

  Me.Move(FMain.X + 50, FMain.Y + 70)

  If Main.bServer Then
    If Not Plugin.IsPluginEnabled("OpenZWave", 0) Then
      Message.Info(("OpenZWave Z-Wave interface is not enabled"))
      Try Me.Close
      Return
    Endif
  Endif

  ' We are running in client/server mode - we only support JSON-RPC
  If Not Main.bServer Then
    If Main.sRPCType <> "JSONRPC" Then
      Message.Info(("Open Z-Wave Commander will only work in Client/Server mode if the JSON-RPC is configured in the GUI"))
      Try Me.Close
      Return
    Endif
  Endif

  ' Create/define the Open Z-Wave node table
  With tbvNodes
    .Columns.Count = 12
    .Columns[0].Title = ("Node")
    .Columns[1].Title = ("Basic Type")
    .Columns[2].Title = ("Generic Type")
    .Columns[3].Title = ("Value1")
    .Columns[4].Title = ("Value2")
    .Columns[5].Title = ("Value3")
    .Columns[6].Title = ("Value4")
    .Columns[7].Title = ("Status")
    .Columns[8].Title = ("Manufacturer")
    .Columns[9].Title = ("Product")
    .Columns[10].Title = ("Neighbors")
    .Columns[11].Title = ("Supported Classes")

    For jCnt = 0 To 11
      .Columns[jCnt].Width = tbvNodes.Font.TextWidth(.Columns[jCnt].Title) + .Font.Size
    Next
  End With

  ' Create/define the configuration table
  With tbvConfig
    .Columns.Count = 4
    .Columns[0].Title = ("Number") ' This column will NOT be shown, is for internal use
    .Columns[0].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[0].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[1].Title = ("Saved")
    .Columns[1].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[1].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[2].Title = ("Configuration")
    .Columns[3].Title = ("Value")
  End With

  ' Create/define the association table
  With tbvAssociation
    .Columns.Count = 3
    .Columns[0].Title = ("Number") ' This column will NOT be shown, is for internal use
    .Columns[0].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[0].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[1].Title = ("Group")
    .Columns[2].Title = ("Assigned Node(s)")
  End With

  ' Create/define the usercode table
  With tbvUserCode
    .Columns.Count = 4
    .Columns[0].Title = ("Number")
    .Columns[0].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[0].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[1].Title = ("Code")
    .Columns[2].Title = ("Active")
    .Columns[3].Title = ("UserCode")
  End With

  ' Server will get the information locally, else we need to do a JSON-RPC call
  If Main.bServer Then
    ' fill the combo list and auto-enable the first instance
    ' First get the list of enabled instances
    $InstanceList = Plugin.GetPluginEnabledList("OpenZWave")

  Else
    $cControllerList = Client.ToolsOpenZWaveGet("list")

    ' Don't continue if we get an empty response
    If $cControllerList = Null Then
      Message.Error(("Received an empty or invalid response from the JSON-RPC server.\nPlease consult the server logfile for more information"))
      Try Me.Close
      Return
    Endif

    ' Check if we received the valid fields and handle errors
    If Not $cControllerList.Exist("instance_id") Then
      Message.Error(("Missing controller list in response from the JSON-RPC server.\nPlease consult the server logfile for more information"))
      Try Me.Close
      Return
    Endif

    If TypeOf($cControllerList["instance_id"]) <> gb.Object Then
      Message.Error(("Controller list is invalid in response from the JSON-RPC server.\nPlease consult the server logfile for more information"))
      Try Me.Close
      Return
    Endif
 
    $InstanceList = $cControllerList["instance_id"]
  Endif

  ' loop through the list and fill the combo list
  cmbList.Clear()
  For Each iInstance In $InstanceList
    cmbList.Add("instance #" & iInstance)
  Next

  ' Auto-enable the first instance
  cmbList.Index = 0

  ' Set controller tab as default
  TabStripZWaveCmdr.Index = 0

  ' Auto-hide UserCode and Wake-Up tab
  For jCnt = 0 To (TabStripZWaveCmdr.Count - 1)
    If TabStripZWaveCmdr[jCnt].Text = "User Code" Then
      TabStripZWaveCmdr[jCnt].Visible = False
    Endif

    If TabStripZWaveCmdr[jCnt].Text = "Wake-Up" Then
      TabStripZWaveCmdr[jCnt].Visible = False
    Endif
  Next

End

Public Sub tbvNodes_Change()

  EnableControls(tbvNodes.Row)
  UpdateTabStrip()

End

Public Sub TabStripZWaveCmdr_Click()

  UpdateTabStrip()

End

Public Sub EnableControls(iRow As Integer)

  Dim iCount As Integer

  iSelectedNode = tbvNodes[iRow, 0].Text

  ' Don't allow anything if the homeid is empty
  If $iHomeId = 0 Then
    Return
  Endif

  Select tbvNodes[iRow, 2].Text
    Case "Generic Controller", "Static Controller"
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = False
      btnRequestDynamicReport.Enabled = False
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = False
      btnRequestMeterReport.Enabled = False
      spInstance.Enabled = False

    Case "Multilevel Switch"

      If Main.bServer Then
        Try slDim.Value = hOpenZWave.GetCurrentValueNode(iSelectedNode)
      Else
        ' todo
      Endif

      btnNodeOn.Enabled = True
      btnNodeOff.Enabled = True
      slDim.Enabled = True
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = True

    Case "Binary Switch"
      btnNodeOff.Enabled = True
      btnNodeOn.Enabled = True
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = True

    Case "Semi Interoperable", "Non Interoperable"
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = False
      btnRequestDynamicReport.Enabled = False
      btnRequestNodeNeighborUpdate.Enabled = False
      btnRefreshNodeInfo.Enabled = False
      btnRequestVersionReport.Enabled = False
      btnRequestMeterReport.Enabled = False
      spInstance.Enabled = False

    Default
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = False

  End Select

  btnRemoveFailedNode.Enabled = True
  btnReplaceFailedNode.Enabled = True

  ' Only show UserCode & Wake-Up tab if the commandclass is available
  For iCount = 0 To (TabStripZWaveCmdr.Count - 1)
    If TabStripZWaveCmdr[iCount].Text = "User Code" Then
      If InStr(tbvNodes[iRow, 11].Text, "USER_CODE") Then
        TabStripZWaveCmdr[iCount].Visible = True 
      Else
        TabStripZWaveCmdr[iCount].Visible = False
      Endif
    Endif

    If TabStripZWaveCmdr[iCount].Text = "Wake-Up" Then
      If InStr(tbvNodes[iRow, 11].Text, "WAKE_UP") Then
        TabStripZWaveCmdr[iCount].Visible = True 
      Else
        TabStripZWaveCmdr[iCount].Visible = False
      Endif
    Endif
  Next

End

Public Sub UpdateTabStrip()

  Dim sElt As String[]
  Dim sStr As String
  Dim sLp As String
  Dim iGroup As Integer
  Dim iUserCode As Integer
  Dim iCount As Integer
  Dim iCnt As Integer
  Dim jCnt As Integer
  Dim bConfig As Boolean
  Dim bGroup As Boolean
  Dim bUserCode As Boolean
  Dim cNodeInfo As Collection

  ' We only update the Config/Association/UserCode/Wake-up if it is visible

  If iSelectedNode >= 1 Then

    ' Find node in the $cNodeInfo list
    'cNodeInfo = ...

    Select TabStripZWaveCmdr.Index
      Case 2 ' Configuration
        If iSelectedNode <> iConfigNode Then

          tbvConfig.Clear
          tbvConfig.Rows.Count = 0
          FrConfigEmptyInfo.Visible = False
          txtConfigHelp.Text = ""

          For jCnt = 2 To 3
            tbvConfig.Columns[jCnt].Width = tbvConfig.Font.TextWidth(tbvConfig.Columns[jCnt].Title) + tbvConfig.Font.Size
          Next

          bConfig = False

          If Main.bServer Then
            ' If we don't have a configuration list, change the tab with usefull information how to continue
            sStr = hOpenZWave.GetNodeConfigList(iSelectedNode)
            If sStr Then
              bConfig = True

              ' We got a list, fill the table now
              sElt = Split(sStr, "|")
              For Each sLp In sElt

                Inc tbvConfig.Rows.Count
                tbvConfig[tbvConfig.Rows.Count - 1, 0].Text = sLp
                tbvConfig[tbvConfig.Rows.Count - 1, 1].Text = hOpenZWave.GetNodeConfigValue(iSelectedNode, CInt(sLp))
                tbvConfig[tbvConfig.Rows.Count - 1, 2].Text = hOpenZWave.GetNodeConfigLabel(iSelectedNode, CInt(sLp))
                tbvConfig[tbvConfig.Rows.Count - 1, 3].Text = tbvConfig[tbvConfig.Rows.Count - 1, 1].Text
              Next

            Endif
          Else

            ' The config is received in the nodeinfo request

          Endif

          ' We don't have a config list, hide the table & save button
          '  Just show the old config stuff + warning
          tbvConfig.Visible = bConfig
          txtConfigHelp.Visible = bConfig
          frConfigHelp.Visible = bConfig
          btnConfigSave.Visible = bConfig
          lbConfigParam.Visible = Not bConfig
          lbConfigValue.Visible = Not bConfig
          lbConfigSize.Visible = Not bConfig
          vbConfigParam.Visible = Not bConfig
          vbConfigValue.Visible = Not bConfig
          cmbConfigSize.Visible = Not bConfig
          btnConfigSet.Visible = Not bConfig
          txtConfigInfo.Visible = Not bConfig
          frConfigInfo.Visible = Not bConfig

          ' Make columns widther if needed, skip column 0
          For iCnt = 0 To (tbvConfig.Rows.Count - 1)

            For jCnt = 2 To 3
              If (tbvConfig.Font.TextWidth(tbvConfig[iCnt, jCnt].Text) + tbvConfig.Font.Size) > tbvConfig.Columns[jCnt].Width Then
                tbvConfig.Columns[jCnt].Width = tbvConfig.Font.TextWidth(tbvConfig[iCnt, jCnt].Text) + tbvNodes.Font.Size
              Endif
            Next
          Next

          iConfigNode = iSelectedNode
        Endif
      Case 3 ' Association
        If iSelectedNode <> iAssocNode Then

          tbvAssociation.Clear
          tbvAssociation.Rows.Count = 0

          For jCnt = 1 To 2
            tbvAssociation.Columns[jCnt].Width = tbvAssociation.Font.TextWidth(tbvAssociation.Columns[jCnt].Title) + tbvAssociation.Font.Size
          Next

          bGroup = False

          If Main.bServer Then
            ' Retrieve the group count for this device
            iGroup = hOpenZWave.GetNodeGroupCount(iSelectedNode)
            If iGroup >= 1 Then

              ' We got a list, fill the table now
              bGroup = True
              For iCount = 1 To iGroup
                Inc tbvAssociation.Rows.Count
                tbvAssociation[tbvAssociation.Rows.Count - 1, 0].Text = iCount
                tbvAssociation[tbvAssociation.Rows.Count - 1, 1].Text = hOpenZWave.GetNodeGroupLabel(iSelectedNode, iCount)
                tbvAssociation[tbvAssociation.Rows.Count - 1, 2].Text = hOpenZWave.GetNodeGroupList(iSelectedNode, iCount)
              Next

            Endif
          Else

            ' The groups are received in the nodeinfo request

          Endif

          tbvAssociation.Visible = bGroup
          lbAssociationGroup.Visible = bGroup
          vbAssociationGroup.Visible = bGroup
          lbAssociationNode.Visible = bGroup
          vbAssociationNode.Visible = bGroup
          btnAddAssociation.Visible = bGroup
          btnRemoveAssociation.Visible = bGroup
          FrAssociationEmptyInfo.Visible = Not bGroup

          ' Make columns widther if needed, skip column 0
          For iCnt = 0 To (tbvAssociation.Rows.Count - 1)
            For jCnt = 1 To 2
              If (tbvAssociation.Font.TextWidth(tbvAssociation[iCnt, jCnt].Text) + tbvAssociation.Font.Size) > tbvAssociation.Columns[jCnt].Width Then
                tbvAssociation.Columns[jCnt].Width = tbvAssociation.Font.TextWidth(tbvAssociation[iCnt, jCnt].Text) + tbvAssociation.Font.Size
              Endif
            Next
          Next

          iAssocNode = iSelectedNode

        Endif

      Case 4 ' Wake-up
        If iSelectedNode <> iUserCodeNode Then

          If Main.bServer Then
            vbWakeUpInterval.Value = hOpenZWave.GetNodeWakeUpInterval(iSelectedNode)
          Else

          Endif

          If vbWakeUpInterval.Value = -1 Then
            vbWakeUpInterval.Enabled = False
            vbWakeUpInterval.Value = 0
          Else
            vbWakeUpInterval.Enabled = True
          Endif
        Endif

      Case 5 ' UserCode
        If iSelectedNode <> iUserCodeNode Then

          tbvUserCode.Clear
          tbvUserCode.Rows.Count = 0

          For jCnt = 1 To 3
            tbvUserCode.Columns[jCnt].Width = tbvUserCode.Font.TextWidth(tbvUserCode.Columns[jCnt].Title) + tbvUserCode.Font.Size
          Next

          bUserCode = False

          If Main.bServer Then
            ' Retrieve the group count for this device
            iUserCode = hOpenZWave.GetNodeUserCodeCount(iSelectedNode)
            If iUserCode >= 1 Then
  
              ' We got a list, fill the table now
              bUserCode = True
              For iCount = 1 To iUserCode

                Inc tbvUserCode.Rows.Count
                tbvUserCode[tbvUserCode.Rows.Count - 1, 0].Text = iCount
                tbvUserCode[tbvUserCode.Rows.Count - 1, 1].Text = hOpenZWave.GetNodeUserCodeLabel(iSelectedNode, iCount)
                tbvUserCode[tbvUserCode.Rows.Count - 1, 3].Text = hOpenZWave.GetNodeUserCodeValue(iSelectedNode, iCount)
                If (Left(tbvUserCode[tbvUserCode.Rows.Count - 1, 3].Text, 4)) = "0x00" Then
                  tbvUserCode[tbvUserCode.Rows.Count - 1, 2].Text = "Free"
                Else
                  tbvUserCode[tbvUserCode.Rows.Count - 1, 2].Text = "Enrolled"
                Endif
              Next

            Endif
          Else

            ' The usercodes are received in the nodeinfo request

          Endif

          tbvUserCode.Visible = bUserCode
          btnUserCodeEnroll.Visible = bUserCode
          btnUserCodeRemove.Visible = bUserCode
          btnUserCodeRemove.Enabled = Not bUserCode
          FrUserCodeEmptyInfo.Visible = Not bUserCode

          ' Make columns widther if needed, skip column 0
          For iCnt = 0 To (tbvUserCode.Rows.Count - 1)
            For jCnt = 1 To 3
              If (tbvUserCode.Font.TextWidth(tbvUserCode[iCnt, jCnt].Text) + tbvUserCode.Font.Size) > tbvUserCode.Columns[jCnt].Width Then
                tbvUserCode.Columns[jCnt].Width = tbvUserCode.Font.TextWidth(tbvUserCode[iCnt, jCnt].Text) + tbvUserCode.Font.Size
              Endif
            Next
          Next

          iUserCodeNode = iSelectedNode

        Endif
    End Select

  Endif

End

Public Sub tbvConfig_Click()

  Dim sElt As String[]
  Dim Sb As String
  Dim sStr As String
  
  ' Refresh the Help information
  txtConfigHelp.Text = ""
  sStr = ""
  sElt = Split(hOpenZWave.GetNodeConfigHelp(iSelectedNode, CInt(tbvConfig[tbvConfig.Row, 0].Text)), " ")

  For Each Sb In sElt
     If txtConfigHelp.Font.TextWidth(sStr & " " & Sb) < txtConfigHelp.Width Then
       If sStr = "" Then
         sStr = Sb
       Else
         sStr = sStr & " " & Sb
       Endif
     Else
       If txtConfigHelp.Text = "" Then
         txtConfigHelp.Text = sStr
         sStr = ""
       Else
         txtConfigHelp.Text = "\n" & sStr
         sStr = ""
       Endif
     Endif

  Next

  If sStr <> "" Then
    If txtConfigHelp.Text = "" Then
      txtConfigHelp.Text = sStr
    Else
      txtConfigHelp.Text &= "\n" & sStr
    Endif
  Endif

  sStr = ""
  sElt.Clear()

  ' Only edit the value column
  If tbvConfig.Column = 3 Then

    ' Stop edit if the value is read-only
    If hOpenZWave.GetNodeConfigValueReadOnly(iSelectedNode, CInt(tbvConfig[tbvConfig.Row, 0].Text)) Then
      Return
    Endif

    If hOpenZWave.GetNodeConfigValueType(iSelectedNode, tbvConfig[tbvConfig.Row, 0].Text) = "List" Then
      sStr = hOpenZWave.GetNodeConfigValueList(iSelectedNode, CInt(tbvConfig[tbvConfig.Row, 0].Text))
      sElt = Split(sStr, "|")
      tbvConfig.Edit(sElt, True)
    Else
      ' We define a ValueBox, to only allow numeric values. The Z-Wave configuration has numeric values
      ' We also align to the left, else it is unreadable
      'vbValue = New ValueBox(tbvConfig) As "vbValue"
      'vbValue.Type = 0 ' Number
      'tbText = vbValue.Children[0]
      tbtext = New TextBox(tbvconfig) As "tbText"
      tbText.Alignment = Align.Left
      tbText.MaxLength = 10
      tbvConfig.EditWith(tbText)
      'tbvConfig.EditWith(vbValue)
      'tbvConfig.Edit
    Endif
  Endif
  
End

Public Sub tbvConfig_Save(Row As Integer, Column As Integer, Value As String)

  ' Save in Table & sending to the node will only be done if pressing "Save"
  tbvConfig[Row, Column].Text = Value

End

Public Sub tbtext_KeyPress()
  
  ' We only allow 0 .. 9 and none alphanumeric keys
  If Not ((Key.Code >= 48 And Key.Code <= 57) Or Key.Code < 0 Or Key.Code > 255) Then
    Stop Event
  Endif
End

Public Sub tbvConfig_Insert()
  
  ' We need to send a cancel, else at the last cell, it will stay in edit mode
  tbvConfig.Cancel
  
End


Public Sub btnConfigSave_Click()

  Dim jCnt As Integer
  Dim bChanged As Boolean

  ' Save made settings
  For jCnt = 0 To (tbvConfig.Rows.Count - 1)

    ' Check if the value really has changed, then we sync it to the device
    If tbvConfig[jCnt, 1].Text <> tbvConfig[jCnt, 3].Text Then

       ' If it is a list type, we need to send a string - else a numeric value
       If hOpenZWave.GetNodeConfigValueType(iSelectedNode, CInt(tbvConfig[jCnt, 0].Text)) = "List" Then
         hOpenZWave.SetConfigParamList(iSelectedNode, CInt(tbvConfig[jCnt, 0].Text), tbvConfig[jCnt, 3].Text)
       Else
         hOpenZWave.SetConfigParam(iSelectedNode, CInt(tbvConfig[jCnt, 0].Text), CInt(tbvConfig[jCnt, 3].Text))
       Endif

       ' Save the set value now
       tbvConfig[jCnt, 1].Text = tbvConfig[jCnt, 3].Text

       bChanged = True
    Endif

  Next

  ' Start timer for refresh if a value has changed
  If bChanged Then
    tRefreshTabInfo = New Timer As "tRefreshTabInfo"
    tRefreshTabInfo.Delay = 1000
    tRefreshTabInfo.Start
    iRefreshTabInfo = 1
  Endif

End

Public Sub tbvUserCode_Click()

  ' If the sStr is empty, then no UserCode registered
  If (Left(tbvUserCode[tbvUserCode.Row, 3].Text, 4)) = "0x00" Then
    btnUserCodeRemove.Enabled = False
  Else
    btnUserCodeRemove.Enabled = True
  Endif

End

Public Sub btnUserCodeEnroll_Click()
  
  ' Send the command to open-zwave wrapper + start 30 sec timer
  ' If the button is pressed twice, the timer restarts
  hOpenZWave.SetNodeUserCodeStart(iSelectedNode)

  ' Start timer, we will cancel this command after 30 seconds
  Try tUserCodeEnrollMessage.Stop
  tUserCodeEnrollMessage = New Timer As "tUserCodeEnrollMessage"
  tUserCodeEnrollMessage.Delay = 30000
  tUserCodeEnrollMessage.Start
  txtMessage.Text = "Start enrollment mode, hold the tag in front of the device or enter code"

End

Public Sub tUserCodeEnrollMessage_Timer()

  tUserCodeEnrollMessage.Stop
  txtMessage.Text = "30 seconds has expired, enrollment mode cancelled"

End


Public Sub btnUserCodeRemove_Click()

  If (Left(tbvUserCode[tbvUserCode.Row, 3].Text, 4)) = "0x00" Then
    txtMessage.Text = "UserCode can't be removed, because it isn't enrolled"
  Else
    ' Send the Remove UserCode to the Z-Wave device
    hOpenZWave.SetNodeUserCodeRemove(iSelectedNode, CInt(tbvUserCode[tbvUserCode.Row, 0].Text))
    txtMessage.Text = " Removal command send, it will be applied when the device wakes up"

  Endif

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub btnNodeOn_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "On command send to node " & iSelectedNode & ", instance " & spInstance.Value
    hOpenZWave.SetValue(iSelectedNode, spInstance.Value, &HFF)
  Endif

End

Public Sub btnNodeOff_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Off command send to node " & iSelectedNode & ", instance " & spInstance.Value
    hOpenZWave.SetValue(iSelectedNode, spInstance.Value, &H0)
  Endif

End

Public Sub slDim_MouseUp()

  If slDim.Enabled And iSelectedNode >= 1 Then
    txtMessage.Text = "Dim=" & slDim.Value & " request send to node " & iSelectedNode
    hOpenZWave.SetValue(iSelectedNode, spInstance.Value, slDim.Value)
  Endif
  
End

Public Sub btnRequestBasicReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested basic report for node " & iSelectedNode
    hOpenZWave.RequestBasicReport(iSelectedNode)
  Endif

End

Public Sub btnRequestCapabilities_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested capabilities for node " & iSelectedNode
    hOpenZWave.RequestNodeCapabilities(iSelectedNode)
  Endif

End

Public Sub btnRefresh_Click()

  cmbList_Click()
  'FillNodeTable()
  'TabStripZWaveCmdr.Index = 0

End

Public Sub btnCancelControllerCommand_Click()

  ' Try to stop the timer, if configured
  Try tControllerCommandMessage.Stop

  If hOpenZWave.CancelControllerCommand() Then
    txtMessage.Text = "Cancelled controller command"
  Else
    txtMessage.Text = "Controller was already in normal operation mode"
  Endif

End

Public Sub btnAddDevice_Click()

  If hOpenZWave.AddDevice() Then
    txtMessage.Text = "Press button on device to add!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCommandMessage = New Timer As "tControllerCommandMessage"
    tControllerCommandMessage.Delay = 30000
    tControllerCommandMessage.Start

  Else
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  Endif

End

Public Sub btnRemoveDevice_Click()

  If hOpenZWave.RemoveDevice() Then
    txtMessage.Text = "Press button on device to remove!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCommandMessage = New Timer As "tControllerCommandMessage"
    tControllerCommandMessage.Delay = 30000
    tControllerCommandMessage.Start

  Else
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  Endif

End

Public Sub btnRequestNodeNeighborUpdate_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting neighborhood update for node " & iSelectedNode
    hOpenZWave.RequestNodeNeighborUpdate(iSelectedNode)
  Endif

End

Public Sub btnAddAssociation_Click()

  If iSelectedNode >= 1 Then
    If vbAssociationGroup.Value >= 1 And vbAssociationGroup.Value <= 9 Then

      If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 254 Then
      txtMessage.Text = "Adding association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
      hOpenZWave.AddAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      Else
        txtMessage.Text = "ERROR: Requested to associate node is not between 1-254"
      Endif

    Else
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    Endif
  Endif

  ' Start timer for refresh
  tRefreshTabInfo = New Timer As "tRefreshTabInfo"
  tRefreshTabInfo.Delay = 1000
  tRefreshTabInfo.Start
  iRefreshTabInfo = 1

End

Public Sub btnRemoveAssociation_Click()

  If iSelectedNode >= 1 Then
    If vbAssociationGroup.Value >= 1 And vbAssociationGroup.Value <= 9 Then

      If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 254 Then
        txtMessage.Text = "Removing association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
        hOpenZWave.RemoveAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      Else
        txtMessage.Text = "ERROR: Requested to be removed associate node is not between 1-254"
      Endif

    Else
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    Endif
  Endif

  ' Start timer for refresh
  tRefreshTabInfo = New Timer As "tRefreshTabInfo"
  tRefreshTabInfo.Delay = 1000
  tRefreshTabInfo.Start
  iRefreshTabInfo = 1

End

Public Sub tRefreshTabInfo_Timer()

  iAssocNode = 0
  iConfigNode = 0

  UpdateTabStrip()
  Me.Refresh()

  iRefreshTabInfo = iRefreshTabInfo + 1
  If iRefreshTabInfo >= 5 Then
    tRefreshTabInfo.Stop
  Endif

End

Public Sub btnRequestDynamicReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting dynamic update for node " & iSelectedNode
    hOpenZWave.RequestNodeDynamicReport(iSelectedNode)
  Endif

End

Public Sub btnRefreshNodeInfo_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting RefreshInfo for node " & iSelectedNode
    hOpenZWave.RefreshNodeInfo(iSelectedNode)
  Endif

End

Public Sub btnRequestVersionReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting version report for node " & iSelectedNode
    hOpenZWave.RequestNodeVersionReport(iSelectedNode)
  Endif

End

Public Sub btnRequestMeterReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting meter report for node " & iSelectedNode
    hOpenZWave.RequestNodeMeterReport(iSelectedNode)
  Endif

End

Public Sub btnSoftResetController_Click()

  If Message.Question("Are you sure that you want to SOFT Reset the Z-Wave controller?", (" Yes "), (" No ")) = 1 Then
    txtMessage.Text = "Controller is beeing Soft Reset (Reboot)"
    hOpenZWave.ControllerSoftReset()
  Endif

End

Public Sub btnHardResetController_Click()

  If Message.Question("Are you sure that you want to HARD Reset the Z-Wave controller?\n*** *ALL* the data will be erased from the controller ***", ("Yes"), ("No")) = 1 Then
    txtMessage.Text = "Controller is beeing HARD Reset (*ALL* data erased)"
    hOpenZWave.ControllerHardReset()
  Endif

End

Public Sub btnRequestBasicReportAll_Click()

  txtMessage.Text = "Requested basic report for all nodes"
  hOpenZWave.RequestBasicReport(0)

End

Public Sub btnRequestDynamicReportAll_Click()

  txtMessage.Text = "Requested dynamic report for all nodes"
  hOpenZWave.RequestNodeDynamicReport(0)

End

Public Sub tControllerCommandMessage_Timer()

  txtMessage.Text = "30 seconds have expired, cancelling controller command"
  tControllerCommandMessage.Stop

End

Public Sub btnRemoveFailedNode_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Trying to remove failed node " & iSelectedNode
    hOpenZWave.RemoveFailedNode(iSelectedNode)
  Endif

End

Public Sub btnReplaceFailedNode_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Trying to replace failed node " & iSelectedNode
    hOpenZWave.ReplaceFailedNode(iSelectedNode)
  Endif

End

Public Sub btnRequestHealNetwork_Click()

  hOpenZWave.HealNetwork()
  txtMessage.Text = "Healing the Z-Wave network"

End


Public Sub btnConfigSet_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Setting config parameter " & vbConfigParam.Value & " for node " & iSelectedNode & " to " & vbConfigParam.Value
    hOpenZWave.SetConfigParam(iSelectedNode, vbConfigParam.Value, vbConfigValue.Value, cmbConfigSize.Text)
  Endif


End

Public Sub btnSetWakeUpInterval_Click()

  If iSelectedNode >= 1 Then

    If vbWakeUpInterval.Value > 0 Then
      txtMessage.Text = "Setting Wake-Up interval " & vbWakeUpInterval.Value & " seconds for node " & iSelectedNode
      hOpenZWave.SetNodeWakeUpInterval(iSelectedNode, vbWakeUpInterval.Value)
    Else
      txtMessage.Text = "Wake-Up interval has to be 1 or greater"
    Endif
  Endif

End

Public Sub cmbList_Click()

  Dim aNodes As New Integer[]
  Dim cNode As Object
  Dim iCnt As Integer
  Dim jCnt As Integer
  Dim bError As Boolean

  If Main.bServer Then
    Try hOpenZWave = Plugin.GetPluginObject("OpenZWave", $InstanceList[cmbList.Index]).Interface
    bError = Error
  Else
    $cControllerInfo = Client.ToolsOpenZWaveGet("controller", $InstanceList[cmbList.Index])

    ' Better error handling required
    If $cControllerInfo = Null Then
      bError = True
    Else
      bError = Not $cControllerInfo.Exist("instance_id")
    Endif
  Endif

  If bError Then
    txtStatus.Text = ("Not Connected")
    txtStatus.Foreground = &HFF0000
    btnShowError.Visible = True
    $Error = "OpenZWave Object Instance doesn't exist, please report this as a bug"

    'EnableDisableTX(False)
  Else

    'EnableDisableTX(hOpenZWave.IsRunning)
    If Main.bServer Then
      $bIsRunning = hOpenZWave.IsRunning
    Else
      Try $bIsRunning = $cControllerInfo["running"]
    Endif

    If $bIsRunning Then
      txtStatus.Text = ("Connected")
      txtStatus.Foreground = &H00FF00
      btnShowError.Visible = False
      $Error = ""
    Else
      txtStatus.Text = ("Not Connected")
      txtStatus.Foreground = &HFF0000
      btnShowError.Visible = True
      $Error = hOpenZWave.ErrorText
    Endif
  Endif

  ' Set On/Off/Slide off as default
  tbvNodes.Enabled = False
  btnNodeOn.Enabled = False
  btnNodeOff.Enabled = False
  slDim.Enabled = False

  ' Disable all config tab items
  tbvConfig.Visible = False
  FrConfigEmptyInfo.Visible = True
  txtConfigHelp.Visible = False
  frConfigHelp.Visible = False
  btnConfigSave.Visible = False
  lbConfigParam.Visible = False
  lbConfigValue.Visible = False
  lbConfigSize.Visible = False
  vbConfigParam.Visible = False
  vbConfigValue.Visible = False
  cmbConfigSize.Visible = False
  btnConfigSet.Visible = False
  txtConfigInfo.Visible = False
  frConfigInfo.Visible = False

  ' We don't have a group list, remove all buttons
  tbvAssociation.Visible = False
  lbAssociationGroup.Visible = False
  vbAssociationGroup.Visible = False
  lbAssociationNode.Visible = False
  vbAssociationNode.Visible = False
  btnAddAssociation.Visible = False
  btnRemoveAssociation.Visible = False
  FrAssociationEmptyInfo.Visible = True

  ' Disable UserCode buttons
  tbvUserCode.Visible = False
  btnUserCodeEnroll.Visible = False
  btnUserCodeRemove.Visible = False
  FrUserCodeEmptyInfo.Visible = True

  ' Disable all nodes, because we don't know the node YET
  btnRequestBasicReport.Enabled = False
  btnRequestDynamicReport.Enabled = False
  btnRequestNodeNeighborUpdate.Enabled = False
  btnRefreshNodeInfo.Enabled = False
  btnRequestVersionReport.Enabled = False
  btnRequestMeterReport.Enabled = False
  spInstance.Enabled = False
  btnRemoveFailedNode.Enabled = False
  btnReplaceFailedNode.Enabled = False

  If Main.bServer Then
    $iHomeId = hOpenZWave.GetHomeId()
  Else
    Try $iHomeId = $cControllerInfo["homeid"]
  Endif

  ' Disallow the controller commands if we don't have a homeid
  If $iHomeId = 0 Then
    txtHomeID.Text = "UNKNOWN"
    btnAddDevice.Enabled = False
    btnRemoveDevice.Enabled = False
    btnCancelControllerCommand.Enabled = False
    btnSoftResetController.Enabled = False
    btnHardResetController.Enabled = False
    btnRequestBasicReportAll.Enabled = False
    btnRequestDynamicReportAll.Enabled = False
    btnRequestHealNetwork.Enabled = False
  Else
    txtHomeID.Text = "0x" & Right(Hex($iHomeId), 8)
    btnAddDevice.Enabled = True
    btnRemoveDevice.Enabled = True
    btnCancelControllerCommand.Enabled = True
    btnSoftResetController.Enabled = True
    btnHardResetController.Enabled = True
    btnRequestBasicReportAll.Enabled = True
    btnRequestDynamicReportAll.Enabled = True
    btnRequestHealNetwork.Enabled = True
  Endif

  If Main.bServer Then
    txtControllerID.Text = hOpenZWave.GetControllerId()
    txtControllerType.text = hOpenZWave.GetControllerType()
    txtAPIVersion.Text = hOpenZWave.GetAPIVersion()
    txtSDKVersion.Text = hOpenZWave.GetSDKVersion()

    aNodes = hOpenZWave.GetNodeList()

    If aNodes.Count >= 1 Then
      tbvNodes.Enabled = True
      tbvNodes.Rows.Count = aNodes.Count
      For iCnt = 0 To (aNodes.Count - 1)
        cNode = hOpenZWave.GetNodeInfo(aNodes[iCnt])
        If cNode <> Null Then 
          tbvNodes[iCnt, 0].Text = cNode.NodeId
          tbvNodes[iCnt, 1].Text = hOpenZWave.BasicTypeName(cNode.Basic)
          tbvNodes[iCnt, 2].Text = hOpenZWave.GenericTypeName(cNode.Generic)
          tbvNodes[iCnt, 3].Text = cNode.Values["1"]
          tbvNodes[iCnt, 4].Text = cNode.Values["2"]
          tbvNodes[iCnt, 5].Text = cNode.Values["3"]
          tbvNodes[iCnt, 6].Text = cNode.Values["4"]
          tbvNodes[iCnt, 7].Text = IIf(cNode.Listening, "Listening", "Sleeping")
          tbvNodes[iCnt, 8].Text = hOpenZWave.GetNodeManufacturerName(cNode.NodeId)
          tbvNodes[iCnt, 9].Text = hOpenZWave.GetNodeProductName(cNode.NodeId)
          tbvNodes[iCnt, 10].Text = hOpenZWave.GetNodeNeighborsList(cNode.NodeId)
          tbvNodes[iCnt, 11].Text = hOpenZWave.GetNodeCommandClassList(cNode.NodeId)

          ' Make column widther if needed
          For jCnt = 0 To 11
            If (tbvNodes.Font.TextWidth(tbvNodes[iCnt, jCnt].Text) + tbvNodes.Font.Size) > tbvNodes.Columns[jCnt].Width Then
              tbvNodes.Columns[jCnt].Width = tbvNodes.Font.TextWidth(tbvNodes[iCnt, jCnt].Text) + tbvNodes.Font.Size
            Endif
          Next
        Endif

      Next
    Else
      tbvNodes.Enabled = False
      tbvNodes.Rows.Count = 0
    Endif

  Else
    txtControllerID.Text = $cControllerInfo["controllerid"]
    txtControllerType.text = $cControllerInfo["controllertype"]
    txtAPIVersion.Text = $cControllerInfo["apiversion"]
    txtSDKVersion.Text = $cControllerInfo["sdkversion"]

    If $cControllerInfo <> Null And If $cControllerInfo["count"] > 0 Then

      tbvNodes.Enabled = True
      tbvNodes.Rows.Count = $cControllerInfo["count"]
      iCnt = 0
      For Each cNode In $cControllerInfo["nodeinfo"]
        tbvNodes[iCnt, 0].Text = cNode["node_id"]
        tbvNodes[iCnt, 1].Text = cNode["basic"]
        tbvNodes[iCnt, 2].Text = cNode["generic"]
        'tbvNodes[iCnt, 3].Text = cNode.Values["1"]
        'tbvNodes[iCnt, 4].Text = cNode.Values["2"]
        'tbvNodes[iCnt, 5].Text = cNode.Values["3"]
        'tbvNodes[iCnt, 6].Text = cNode.Values["4"]
        tbvNodes[iCnt, 7].Text = IIf(cNode["listening"], "Listening", "Sleeping")
        tbvNodes[iCnt, 8].Text = cNode["manufacturername"]
        tbvNodes[iCnt, 9].Text = cNode["productname"]
        tbvNodes[iCnt, 10].Text = cNode["neighbors"]
        tbvNodes[iCnt, 11].Text = cNode["commandclass"]

          ' Make column widther if needed
        For jCnt = 0 To 11
          If (tbvNodes.Font.TextWidth(tbvNodes[iCnt, jCnt].Text) + tbvNodes.Font.Size) > tbvNodes.Columns[jCnt].Width Then
            tbvNodes.Columns[jCnt].Width = tbvNodes.Font.TextWidth(tbvNodes[iCnt, jCnt].Text) + tbvNodes.Font.Size
          Endif
        Next

        iCnt += 1
      Next

    Else
      tbvNodes.Enabled = False
      tbvNodes.Rows.Count = 0
    Endif
  Endif

End

Public Sub btnShowError_Click()

  Message.Error($Error)

End
