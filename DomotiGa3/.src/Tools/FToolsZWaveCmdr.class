' Gambas class file

' Description:
' FToolsZWaveCmdr.class
' Test some basic Z-Wave functionality.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private iSelectedNode As Integer
Private iConfigNode As Integer
Private iAssocNode As Integer
Private iUserCodeNode As Integer
Private tbText As TextBox

' Define timers for Z-Wave Commander messages, the "real" timers are defined in CZWave.class
' because the Commander doesn't have a garantueed lifetime during the Z-Wave lifetime
Private tControllerCommandMessage As Timer
Private tUserCodeEnrollMessage As Timer

Public Sub Form_Open()

  Dim jCount As Integer

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' Create/define the Z-Wave node table
  With tbvNodes
    .Columns.Count = 12
    .Columns[0].Title = ("Node")
    .Columns[1].Title = ("Basic Type")
    .Columns[2].Title = ("Generic Type")
    .Columns[3].Title = ("Value")
    .Columns[4].Title = ("Value2")
    .Columns[5].Title = ("Value3")
    .Columns[6].Title = ("Value4")
    .Columns[7].Title = ("Status")
    .Columns[8].Title = ("Manufacturer")
    .Columns[9].Title = ("Product")
    .Columns[10].Title = ("Neighbors")
    .Columns[11].Title = ("Supported Classes")
    For jCount = 0 To 11
      .Columns[jCount].Width = tbvNodes.Font.TextWidth(tbvNodes.Columns[jCount].Title) + .Font.Size
    Next
  End With

  ' Create/define the configuration table
  With tbvConfig
    .Columns.Count = 4
    .Columns[0].Title = ("Number") ' This column will NOT be shown, is for internal use
    .Columns[0].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[0].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[1].Title = ("Saved")
    .Columns[1].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[1].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[2].Title = ("Configuration")
    .Columns[3].Title = ("Value")
  End With

  ' Create/define the association table
  With tbvAssociation
    .Columns.Count = 3
    .Columns[0].Title = ("Number") ' This column will NOT be shown, is for internal use
    .Columns[0].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[0].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[1].Title = ("Group")
    .Columns[2].Title = ("Assigned Node(s)")
  End With

  ' Create/define the usercode table
  With tbvUserCode
    .Columns.Count = 4
    .Columns[0].Title = ("Number")
    .Columns[0].Width = 0 'This column will NOT be shown, is for internal use
    .Columns[0].Resizable = False ' This column will NOT be shown, is for internal use
    .Columns[1].Title = ("Code")
    .Columns[2].Title = ("Active")
    .Columns[3].Title = ("UserCode")
  End With

  If Not Main.bServer Then
    Message.Info(("Z-Wave Commander will only work in Server-Mode"))
    Me.Close
    Return
  Endif

  If Not Main.bZWaveEnabled Or If Not Main.hZWave Then
    Message.Info(("Z-Wave interface is not enabled\nor couldn't open port!"))
    Me.Close
    Return
  Endif

  If Not Main.hZWave.bOZWInitialized Then
    Message.Info(("The Open Z-Wave library isn't fully initialized\nSome information and functions are not available (yet)\nIt can take up to 1 minute per 10 devices to initialize"))
  Endif

  FillScreenInfo()
  FillNodeTable()

  ' Set controller tab as default
  TabStripZWaveCmdr.Index = 0

  ' Auto-hide UserCode and Wake-Up tab
  For jCount = 0 To (TabStripZWaveCmdr.Count - 1)
    If TabStripZWaveCmdr[jCount].Text = "User Code" Then
      TabStripZWaveCmdr[jCount].Visible = False
    Endif

    If TabStripZWaveCmdr[jCount].Text = "Wake-Up" Then
      TabStripZWaveCmdr[jCount].Visible = False
    Endif
  Next

End

Public Sub FillScreenInfo()

  ' Set On/Off/Slide off as default
  tbvNodes.Enabled = False
  btnNodeOn.Enabled = False
  btnNodeOff.Enabled = False
  slDim.Enabled = False

  ' Disable all config tab items
  tbvConfig.Visible = False
  FrConfigEmptyInfo.Visible = True
  txtConfigHelp.Visible = False
  frConfigHelp.Visible = False
  btnConfigSave.Visible = False
  lbConfigParam.Visible = False
  lbConfigValue.Visible = False
  lbConfigSize.Visible = False
  vbConfigParam.Visible = False
  vbConfigValue.Visible = False
  cmbConfigSize.Visible = False
  btnConfigSet.Visible = False
  txtConfigInfo.Visible = False
  frConfigInfo.Visible = False

  ' We don't have a group list, remove all buttons
  tbvAssociation.Visible = False
  lbAssociationGroup.Visible = False
  vbAssociationGroup.Visible = False
  lbAssociationNode.Visible = False
  vbAssociationNode.Visible = False
  btnAddAssociation.Visible = False
  btnRemoveAssociation.Visible = False
  FrAssociationEmptyInfo.Visible = True

  ' Disable UserCode buttons
  tbvUserCode.Visible = False
  btnUserCodeEnroll.Visible = False
  btnUserCodeRemove.Visible = False
  FrUserCodeEmptyInfo.Visible = True

  ' Disable all nodes, because we don't know the node YET
  btnRequestBasicReport.Enabled = False
  btnRequestDynamicReport.Enabled = False
  btnRequestNodeNeighborUpdate.Enabled = False
  btnRefreshNodeInfo.Enabled = False
  btnRequestVersionReport.Enabled = False
  btnRequestMeterReport.Enabled = False
  spInstance.Enabled = False
  btnRemoveFailedNode.Enabled = False
  btnReplaceFailedNode.Enabled = False

  ' Disallow the controller commands if we don't have a homeid
  If Main.hZWave.iHomeID = 0 Then
    txtHomeID.Text = "Unknown"
    btnAddDevice.Enabled = False
    btnRemoveDevice.Enabled = False
    btnCancelControllerCommand.Enabled = False
    btnSoftResetController.Enabled = False
    btnHardResetController.Enabled = False
    btnRequestBasicReportAll.Enabled = False
    btnRequestDynamicReportAll.Enabled = False
    btnRequestHealNetwork.Enabled = False
  Else
    txtHomeID.Text = "0x" & Right(Hex(Main.hZWave.iHomeID), 8)
    btnAddDevice.Enabled = True
    btnRemoveDevice.Enabled = True
    btnCancelControllerCommand.Enabled = True
    btnSoftResetController.Enabled = True
    btnHardResetController.Enabled = True
    btnRequestBasicReportAll.Enabled = True
    btnRequestDynamicReportAll.Enabled = True
    btnRequestHealNetwork.Enabled = True
  Endif

  txtControllerID.Text = Main.hZWave.iControllerID
  txtZWaveAPIVersion.Text = Main.hZWave.sZWaveAPIVersion
  txtZWaveZDKVersion.Text = Main.hZWave.sZWaveZDKVersion
  txtControllerType.text = Main.hZWave.sControllerType

End

Public Sub FillNodeTable()

  Dim rResult As Result
  Dim iRows, iCount, jCount As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices_zwave ORDER BY length(substring_index(nodeid,\":\",1)),substring_index(nodeid,\":\",1), nodeid")
  If Not rResult Then
    Message.Info(("Error: table 'devices_zwave' not found!"))
    Return
  Endif
  iRows = rResult.Count
  If iRows > 0 Then
    tbvNodes.Enabled = True
    tbvNodes.Rows.Count = iRows
    For iCount = 0 To rResult.Max
      tbvNodes[iCount, 0].Text = rResult!nodeid
      tbvNodes[iCount, 1].Text = Main.hZWave.BasicTypeName(rResult!typebasic)
      tbvNodes[iCount, 2].Text = Main.hZWave.GenericTypeName(rResult!typegeneric)
      tbvNodes[iCount, 3].Text = rResult!value
      tbvNodes[iCount, 4].Text = rResult!value2
      tbvNodes[iCount, 5].Text = rResult!value3
      tbvNodes[iCount, 6].Text = rResult!value4
      tbvNodes[iCount, 7].Text = IIf(rResult!sleeping, "Sleeping", "Listening")
      tbvNodes[iCount, 8].Text = Main.hZWave.GetNodeManufacturerName(rResult!nodeid)
      tbvNodes[iCount, 9].Text = Main.hZWave.GetNodeProductName(rResult!nodeid)
      tbvNodes[iCount, 10].Text = Main.hZWave.GetNodeNeighborsList(rResult!nodeid)
      tbvNodes[iCount, 11].Text = Main.hZWave.GetNodeCommandClassList(rResult!nodeid)

      ' Make column widther if needed
      For jCount = 0 To 11

        If (tbvNodes.Font.TextWidth(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size) > tbvNodes.Columns[jCount].Width Then
          tbvNodes.Columns[jCount].Width = tbvNodes.Font.TextWidth(tbvNodes[iCount, jCount].Text) + tbvNodes.Font.Size
        Endif

      Next
 
      rResult.MoveNext
    Next
  Endif

End

Public Sub tbvNodes_Change()

  EnableControls(tbvNodes.Row)
  UpdateTabStrip()

End

Public Sub TabStripZWaveCmdr_Click()

  UpdateTabStrip()

End

Public Sub EnableControls(iRow As Integer)

  Dim iCount As Integer

  iSelectedNode = tbvNodes[iRow, 0].Text

  ' Don't allow anything if the homeid is empty
  If Main.hZWave.iHomeID = 0 Then
    Return
  Endif

  Select tbvNodes[iRow, 2].Text
    Case "Generic Controller", "Static Controller"
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = False
      btnRequestDynamicReport.Enabled = False
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = False
      btnRequestMeterReport.Enabled = False
      spInstance.Enabled = False

    Case "Multilevel Switch"
      btnNodeOn.Enabled = True
      btnNodeOff.Enabled = True
      Try slDim.Value = Main.hZWave.GetCurrentValueNode(iSelectedNode)
      slDim.Enabled = True
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = True

    Case "Binary Switch"
      btnNodeOff.Enabled = True
      btnNodeOn.Enabled = True
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = True

    Case "Semi Interoperable", "Non Interoperable"
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = False
      btnRequestDynamicReport.Enabled = False
      btnRequestNodeNeighborUpdate.Enabled = False
      btnRefreshNodeInfo.Enabled = False
      btnRequestVersionReport.Enabled = False
      btnRequestMeterReport.Enabled = False
      spInstance.Enabled = False

    Default
      btnNodeOn.Enabled = False
      btnNodeOff.Enabled = False
      slDim.Value = 0
      slDim.Enabled = False
      btnRequestBasicReport.Enabled = True
      btnRequestDynamicReport.Enabled = True
      btnRequestNodeNeighborUpdate.Enabled = True
      btnRefreshNodeInfo.Enabled = True
      btnRequestVersionReport.Enabled = True
      btnRequestMeterReport.Enabled = True
      spInstance.Enabled = False

  End Select

  btnRemoveFailedNode.Enabled = True
  btnReplaceFailedNode.Enabled = True

  ' Only show UserCode & Wake-Up tab if the commandclass is available
  For iCount = 0 To (TabStripZWaveCmdr.Count - 1)
    If TabStripZWaveCmdr[iCount].Text = "User Code" Then
      If InStr(tbvNodes[iRow, 11].Text, "USER_CODE") Then
        TabStripZWaveCmdr[iCount].Visible = True 
      Else
        TabStripZWaveCmdr[iCount].Visible = False
      Endif
    Endif

    If TabStripZWaveCmdr[iCount].Text = "Wake-Up" Then
      If InStr(tbvNodes[iRow, 11].Text, "WAKE_UP") Then
        TabStripZWaveCmdr[iCount].Visible = True 
      Else
        TabStripZWaveCmdr[iCount].Visible = False
      Endif
    Endif
  Next

End

Public Sub UpdateTabStrip()

  Dim sElt As String[]
  Dim sStr As String
  Dim sLp As String
  Dim sGroup As Integer
  Dim sUserCode As Integer
  Dim sCount As Integer
  Dim jCount As Integer

  ' We only update the Config/Association/UserCode/Wake-up if it is visible

  If iSelectedNode >= 1 Then

    Select TabStripZWaveCmdr.Index
      Case 2 ' Configuration
        If iSelectedNode <> iConfigNode Then

          tbvConfig.Clear
          tbvConfig.Rows.Count = 0
          FrConfigEmptyInfo.Visible = False
          txtConfigHelp.Text = ""

          For jCount = 2 To 3
            tbvConfig.Columns[jCount].Width = tbvConfig.Font.TextWidth(tbvConfig.Columns[jCount].Title) + tbvConfig.Font.Size
          Next
          
          ' If we don't have a configuration list, change the tab with usefull information how to continue
          sStr = Main.hZWave.GetNodeConfigList(iSelectedNode)
          If sStr = "" Then

            ' We don't have a config list, hide the table & save button
            '  Just show the old config stuff + warning
            tbvConfig.Visible = False
            txtConfigHelp.Visible = False
            frConfigHelp.Visible = False
            btnConfigSave.Visible = False
            lbConfigParam.Visible = True
            lbConfigValue.Visible = True
            lbConfigSize.Visible = True
            vbConfigParam.Visible = True
            vbConfigValue.Visible = True
            cmbConfigSize.Visible = True
            btnConfigSet.Visible = True
            txtConfigInfo.Visible = True
            frConfigInfo.Visible = True

          Else

            tbvConfig.Visible = True
            txtConfigHelp.Visible = True
            frConfigHelp.Visible = True
            btnConfigSave.Visible = True
            lbConfigParam.Visible = False
            lbConfigValue.Visible = False
            lbConfigSize.Visible = False          
            vbConfigParam.Visible = False
            vbConfigValue.Visible = False
            cmbConfigSize.Visible = False
            btnConfigSet.Visible = False
            txtConfigInfo.Visible = False
            frConfigInfo.Visible = False
            
            ' We got a list, fill the table now
            sElt = Split(sStr, "|")
            For Each sLp In sElt

              Inc tbvConfig.Rows.Count
              tbvConfig[tbvConfig.Rows.Count - 1, 0].Text = sLp
              tbvConfig[tbvConfig.Rows.Count - 1, 1].Text = Main.hZWave.GetNodeConfigValue(iSelectedNode, CInt(sLp))
              tbvConfig[tbvConfig.Rows.Count - 1, 2].Text = Main.hZWave.GetNodeConfigLabel(iSelectedNode, CInt(sLp))
              tbvConfig[tbvConfig.Rows.Count - 1, 3].Text = tbvConfig[tbvConfig.Rows.Count - 1, 1].Text

              ' Make columns widther if needed, skip column 0
              For jCount = 2 To 3
                If (tbvConfig.Font.TextWidth(tbvConfig[tbvConfig.Rows.Count - 1, jCount].Text) + tbvConfig.Font.Size) > tbvConfig.Columns[jCount].Width Then
                  tbvConfig.Columns[jCount].Width = tbvConfig.Font.TextWidth(tbvConfig[tbvConfig.Rows.Count - 1, jCount].Text) + tbvNodes.Font.Size
                Endif
              Next

            Next

          Endif
          
          iConfigNode = iSelectedNode
        Endif
      Case 3 ' Association
        If iSelectedNode <> iAssocNode Then

          tbvAssociation.Clear

          tbvAssociation.Rows.Count = 0

          For jCount = 1 To 2
            tbvAssociation.Columns[jCount].Width = tbvAssociation.Font.TextWidth(tbvAssociation.Columns[jCount].Title) + tbvAssociation.Font.Size
          Next
          
          ' Retrieve the group count for this device
          sGroup = Main.hZWave.GetNodeGroupCount(iSelectedNode)
          If sGroup = 0 Then

            ' We don't have a group list, remove all button
            tbvAssociation.Visible = False
            lbAssociationGroup.Visible = False
            vbAssociationGroup.Visible = False
            lbAssociationNode.Visible = False
            vbAssociationNode.Visible = False
            btnAddAssociation.Visible = False
            btnRemoveAssociation.Visible = False
            FrAssociationEmptyInfo.Visible = True
          Else

            tbvAssociation.Visible = True
            lbAssociationGroup.Visible = True
            vbAssociationGroup.Visible = True
            lbAssociationNode.Visible = True
            vbAssociationNode.Visible = True
            btnAddAssociation.Visible = True
            btnRemoveAssociation.Visible = True
            FrAssociationEmptyInfo.Visible = False

            ' We got a list, fill the table now
            For sCount = 1 To sGroup

              Inc tbvAssociation.Rows.Count
              tbvAssociation[tbvAssociation.Rows.Count - 1, 0].Text = sCount
              tbvAssociation[tbvAssociation.Rows.Count - 1, 1].Text = Main.hZWave.GetNodeGroupLabel(iSelectedNode, sCount)
              tbvAssociation[tbvAssociation.Rows.Count - 1, 2].Text = Main.hZWave.GetNodeGroupList(iSelectedNode, sCount)

              ' Make columns widther if needed, skip column 0
              For jCount = 1 To 2
                If (tbvAssociation.Font.TextWidth(tbvAssociation[tbvAssociation.Rows.Count - 1, jCount].Text) + tbvAssociation.Font.Size) > tbvAssociation.Columns[jCount].Width Then
                  tbvAssociation.Columns[jCount].Width = tbvAssociation.Font.TextWidth(tbvAssociation[tbvAssociation.Rows.Count - 1, jCount].Text) + tbvAssociation.Font.Size
                Endif
              Next

            Next

          Endif

          iAssocNode = iSelectedNode

        Endif
      Case 4 ' Wake-up
        If iSelectedNode <> iUserCodeNode Then
          vbWakeUpInterval.Value = Main.hZWave.GetNodeWakeUpInterval(iSelectedNode)
	  If vbWakeUpInterval.Value = -1 Then
            vbWakeUpInterval.Enabled = False
            vbWakeUpInterval.Value = 0
          Else
            vbWakeUpInterval.Enabled = True
          Endif
        Endif
      Case 5 ' UserCode
        If iSelectedNode <> iUserCodeNode Then

          tbvUserCode.Clear

          tbvUserCode.Rows.Count = 0

          For jCount = 1 To 3
            tbvUserCode.Columns[jCount].Width = tbvUserCode.Font.TextWidth(tbvUserCode.Columns[jCount].Title) + tbvUserCode.Font.Size
          Next

          ' Retrieve the group count for this device
          sUserCode = Main.hZWave.GetNodeUserCodeCount(iSelectedNode)
          If sUserCode = 0 Then

            ' We don't have a usercode list, remove all button
            tbvUserCode.Visible = False
            btnUserCodeEnroll.Visible = False
            btnUserCodeRemove.Visible = False
            FrUserCodeEmptyInfo.Visible = True
          Else
            tbvUserCode.Visible = True
            btnUserCodeEnroll.Visible = True
            btnUserCodeRemove.Visible = True
            btnUserCodeRemove.Enabled = False
            FrUserCodeEmptyInfo.Visible = False
  
            ' We got a list, fill the table now
            For sCount = 1 To sUserCode

              Inc tbvUserCode.Rows.Count
              tbvUserCode[tbvUserCode.Rows.Count - 1, 0].Text = sCount
              tbvUserCode[tbvUserCode.Rows.Count - 1, 1].Text = Main.hZWave.GetNodeUserCodeLabel(iSelectedNode, sCount)
              tbvUserCode[tbvUserCode.Rows.Count - 1, 3].Text = Main.hZWave.GetNodeUserCodeValue(iSelectedNode, sCount)
              If (Left(tbvUserCode[tbvUserCode.Rows.Count - 1, 3].Text, 4)) = "0x00" Then
                tbvUserCode[tbvUserCode.Rows.Count - 1, 2].Text = "Free"
              Else
                tbvUserCode[tbvUserCode.Rows.Count - 1, 2].Text = "Enrolled"
              Endif

              ' Make columns widther if needed, skip column 0
              For jCount = 1 To 3
                If (tbvUserCode.Font.TextWidth(tbvUserCode[tbvUserCode.Rows.Count - 1, jCount].Text) + tbvUserCode.Font.Size) > tbvUserCode.Columns[jCount].Width Then
                  tbvUserCode.Columns[jCount].Width = tbvUserCode.Font.TextWidth(tbvUserCode[tbvUserCode.Rows.Count - 1, jCount].Text) + tbvUserCode.Font.Size
                Endif
              Next

            Next

          Endif

          iUserCodeNode = iSelectedNode

        Endif
    End Select

  Endif

End

Public Sub tbvConfig_Click()

  Dim sElt As String[]
  Dim Sb As String
  Dim sStr As String
  
  ' Refresh the Help information
  txtConfigHelp.Text = ""
  sStr = ""
  sElt = Split(Main.hZwave.GetNodeConfigHelp(iSelectedNode, CInt(tbvConfig[tbvConfig.Row, 0].Text)), " ")

  For Each Sb In sElt
     If txtConfigHelp.Font.TextWidth(sStr & " " & Sb) < txtConfigHelp.Width Then
       If sStr = "" Then
         sStr = Sb
       Else
         sStr = sStr & " " & Sb
       Endif
     Else
       If txtConfigHelp.Text = "" Then
         txtConfigHelp.Text = sStr
         sStr = ""
       Else
         txtConfigHelp.Text = "\n" & sStr
         sStr = ""
       Endif
     Endif

  Next

  If sStr <> "" Then
    If txtConfigHelp.Text = "" Then
      txtConfigHelp.Text = sStr
    Else
      txtConfigHelp.Text &= "\n" & sStr
    Endif
  Endif

  sStr = ""
  sElt.Clear()

  ' Only edit the value column
  If tbvConfig.Column = 3 Then

    ' Stop edit if the value is read-only
    If Main.hZWave.GetNodeConfigValueReadOnly(iSelectedNode, CInt(tbvConfig[tbvConfig.Row, 0].Text)) Then
      Return
    Endif

    If Main.hZWave.GetNodeConfigValueType(iSelectedNode, tbvConfig[tbvConfig.Row, 0].Text) = "List" Then
      sStr = Main.hZWave.GetNodeConfigValueList(iSelectedNode, CInt(tbvConfig[tbvConfig.Row, 0].Text))
      sElt = Split(sStr, "|")
      tbvConfig.Edit(sElt, True)
    Else
      ' We define a ValueBox, to only allow numeric values. The Z-Wave configuration has numeric values
      ' We also align to the left, else it is unreadable
      'vbValue = New ValueBox(tbvConfig) As "vbValue"
      'vbValue.Type = 0 ' Number
      'tbText = vbValue.Children[0]
      tbtext = New TextBox(tbvconfig) As "tbText"
      tbText.Alignment = Align.Left
      tbText.MaxLength = 10
      tbvConfig.EditWith(tbText)
      'tbvConfig.EditWith(vbValue)
      'tbvConfig.Edit
    Endif
  Endif
  
End

Public Sub tbvConfig_Save(Row As Integer, Column As Integer, Value As String)

  ' Save in Table & sending to the node will only be done if pressing "Save"
  tbvConfig[Row, Column].Text = Value

End

Public Sub tbtext_KeyPress()
  
  ' We only allow 0 .. 9 and none alphanumeric keys
  If Not ((Key.Code >= 48 And Key.Code <= 57) Or Key.Code < 0 Or Key.Code > 255) Then
    Stop Event
  Endif
End

Public Sub tbvConfig_Insert()
  
  ' We need to send a cancel, else at the last cell, it will stay in edit mode
  tbvConfig.Cancel
  
End


Public Sub btnConfigSave_Click()

  Dim jCount As Integer

  ' Save made settings
  For jCount = 0 To (tbvConfig.Rows.Count - 1)

    ' Check if the value really has changed, then we sync it to the device
    If tbvConfig[jCount, 1].Text <> tbvConfig[jCount, 3].Text Then

       ' If it is a list type, we need to send a string - else a numeric value
       If Main.hZWave.GetNodeConfigValueType(iSelectedNode, CInt(tbvConfig[jCount, 0].Text)) = "List" Then
         Main.hZWave.SetConfigParamList(iSelectedNode, CInt(tbvConfig[jCount, 0].Text), tbvConfig[jCount, 3].Text)
       Else
         Main.hZWave.SetConfigParam(iSelectedNode, CInt(tbvConfig[jCount, 0].Text), CInt(tbvConfig[jCount, 3].Text))
       Endif

       ' Save the set value now
       tbvConfig[jCount, 1].Text = tbvConfig[jCount, 3].Text
    Endif

  Next
  
End

Public Sub tbvUserCode_Click()

  ' If the sStr is empty, then no UserCode registered
  If (Left(tbvUserCode[tbvUserCode.Row, 3].Text, 4)) = "0x00" Then
    btnUserCodeRemove.Enabled = False
  Else
    btnUserCodeRemove.Enabled = True
  Endif

End

Public Sub btnUserCodeEnroll_Click()
  
  ' Send the command to open-zwave wrapper + start 30 sec timer
  ' If the button is pressed twice, the timer restarts
  Main.hZWave.SetNodeUserCodeStart(iSelectedNode)

  ' Start timer, we will cancel this command after 30 seconds
  Try tUserCodeEnrollMessage.Stop
  tUserCodeEnrollMessage = New Timer As "tUserCodeEnrollMessage"
  tUserCodeEnrollMessage.Delay = 30000
  tUserCodeEnrollMessage.Start
  txtMessage.Text = "Start enrollment mode, hold the tag in front of the device or enter code"

End

Public Sub tUserCodeEnrollMessage_Timer()

  tUserCodeEnrollMessage.Stop
  txtMessage.Text = "30 seconds has expired, enrollment mode cancelled"

End


Public Sub btnUserCodeRemove_Click()

  If (Left(tbvUserCode[tbvUserCode.Row, 3].Text, 4)) = "0x00" Then
    txtMessage.Text = "UserCode can't be removed, because it isn't enrolled"
  Else
    ' Send the Remove UserCode to the Z-Wave device
    Main.hZWave.SetNodeUserCodeRemove(iSelectedNode, CInt(tbvUserCode[tbvUserCode.Row, 0].Text))
    txtMessage.Text = " Removal command send, it will be applied when the device wakes up"

  Endif

End

Public Sub btnClose_Click()

  Me.Close

End

Public Sub btnNodeOn_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "On command send to node " & iSelectedNode & ", instance " & spInstance.Value
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, &HFF)
  Endif

End

Public Sub btnNodeOff_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Off command send to node " & iSelectedNode & ", instance " & spInstance.Value
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, &H0)
  Endif

End

Public Sub slDim_MouseUp()

  If slDim.Enabled And iSelectedNode >= 1 Then
    txtMessage.Text = "Dim=" & slDim.Value & " request send to node " & iSelectedNode
    Main.hZWave.SetValue(iSelectedNode, spInstance.Value, slDim.Value)
  Endif
  
End

Public Sub btnRequestBasicReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested basic report for node " & iSelectedNode
    Main.hZWave.RequestBasicReport(iSelectedNode)
  Endif

End

Public Sub btnRequestCapabilities_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requested capabilities for node " & iSelectedNode
    Main.hZWave.RequestNodeCapabilities(iSelectedNode)
  Endif

End

Public Sub btnRefresh_Click()

  FillScreenInfo()
  FillNodeTable()
  TabStripZWaveCmdr.Index = 0

End

Public Sub btnCancelControllerCommand_Click()

  ' Try to stop the timer, if configured
  Try tControllerCommandMessage.Stop

  If Main.hZWave.CancelControllerCommand() Then
    txtMessage.Text = "Cancelled controller command"
  Else
    txtMessage.Text = "Controller was already in normal operation mode"
  Endif

End

Public Sub btnAddDevice_Click()

  If Main.hZWave.AddDevice() Then
    txtMessage.Text = "Press button on device to add!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCommandMessage = New Timer As "tControllerCommandMessage"
    tControllerCommandMessage.Delay = 30000
    tControllerCommandMessage.Start

  Else
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  Endif

End

Public Sub btnRemoveDevice_Click()

  If Main.hZWave.RemoveDevice() Then
    txtMessage.Text = "Press button on device to remove!"

    ' Start timer, we will cancel this command after 30 seconds
    tControllerCommandMessage = New Timer As "tControllerCommandMessage"
    tControllerCommandMessage.Delay = 30000
    tControllerCommandMessage.Start

  Else
    txtMessage.Text = "Controller already in add/remove mode, press cancel first"
  Endif

End

Public Sub btnRequestNodeNeighborUpdate_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting neighborhood update for node " & iSelectedNode
    Main.hZWave.RequestNodeNeighborUpdate(iSelectedNode)
  Endif

End

Public Sub btnAddAssociation_Click()

  If iSelectedNode >= 1 Then
    If vbAssociationGroup.Value >= 1 And vbAssociationGroup.Value <= 9 Then

      If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 254 Then
      txtMessage.Text = "Adding association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
      Main.hZWave.AddAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      Else
        txtMessage.Text = "ERROR: Requested to associate node is not between 1-254"
      Endif

    Else
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    Endif
  Endif

End

Public Sub btnRemoveAssociation_Click()

  If iSelectedNode >= 1 Then
    If vbAssociationGroup.Value >= 1 And vbAssociationGroup.Value <= 9 Then

      If vbAssociationNode.Value >= 1 And vbAssociationNode.Value <= 254 Then
        txtMessage.Text = "Removing association for node " & iSelectedNode & " - group " & vbAssociationGroup.Value & " and node " & vbAssociationNode.Value
        Main.hZWave.RemoveAssociation(iSelectedNode, vbAssociationGroup.Value, vbAssociationNode.Value)
      Else
        txtMessage.Text = "ERROR: Requested to be removed associate node is not between 1-254"
      Endif

    Else
      txtMessage.Text = "ERROR: Requested association group is not between 1-9"
    Endif
  Endif

End

Public Sub btnRequestDynamicReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting dynamic update for node " & iSelectedNode
    Main.hZWave.RequestNodeDynamicReport(iSelectedNode)
  Endif

End

Public Sub btnRefreshNodeInfo_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting RefreshInfo for node " & iSelectedNode
    Main.hZWave.RefreshNodeInfo(iSelectedNode)
  Endif

End

Public Sub btnRequestVersionReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting version report for node " & iSelectedNode
    Main.hZWave.RequestNodeVersionReport(iSelectedNode)
  Endif

End

Public Sub btnRequestMeterReport_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Requesting meter report for node " & iSelectedNode
    Main.hZWave.RequestNodeMeterReport(iSelectedNode)
  Endif

End

Public Sub btnSoftResetController_Click()

  If Message.Question("Are you sure that you want to SOFT Reset the Z-Wave controller?", (" Yes "), (" No ")) = 1 Then
    txtMessage.Text = "Controller is beeing Soft Reset (Reboot)"
    Main.hZWave.ControllerSoftReset()
  Endif

End

Public Sub btnHardResetController_Click()

  If Message.Question("Are you sure that you want to HARD Reset the Z-Wave controller?\n*** *ALL* the data will be erased from the controller ***", ("Yes"), ("No")) = 1 Then
    txtMessage.Text = "Controller is beeing HARD Reset (*ALL* data erased)"
    Main.hZWave.ControllerHardReset()
  Endif

End

Public Sub btnRequestBasicReportAll_Click()

  txtMessage.Text = "Requested basic report for all nodes"
  Main.hZWave.RequestBasicReport(0)

End

Public Sub btnRequestDynamicReportAll_Click()

  txtMessage.Text = "Requested dynamic report for all nodes"
  Main.hZWave.RequestNodeDynamicReport(0)

End

Public Sub tControllerCommandMessage_Timer()

  txtMessage.Text = "30 seconds have expired, cancelling controller command"
  tControllerCommandMessage.Stop

End

Public Sub btnRemoveFailedNode_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Trying to remove failed node " & iSelectedNode
    Main.hZWave.RemoveFailedNode(iSelectedNode)
  Endif

End

Public Sub btnReplaceFailedNode_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Trying to replace failed node " & iSelectedNode
    Main.hZWave.ReplaceFailedNode(iSelectedNode)
  Endif

End

Public Sub btnRequestHealNetwork_Click()

  Main.hZWave.HealNetwork()
  txtMessage.Text = "Healing the Z-Wave network"

End


Public Sub btnConfigSet_Click()

  If iSelectedNode >= 1 Then
    txtMessage.Text = "Setting config parameter " & vbConfigParam.Value & " for node " & iSelectedNode & " to " & vbConfigParam.Value
    Main.hZWave.SetConfigParam(iSelectedNode, vbConfigParam.Value, vbConfigValue.Value, cmbConfigSize.Text)
  Endif


End

Public Sub btnSetWakeUpInterval_Click()

  If iSelectedNode >= 1 Then

    If vbWakeUpInterval.Value > 0 Then
      txtMessage.Text = "Setting Wake-Up interval " & vbWakeUpInterval.Value & " seconds for node " & iSelectedNode
      Main.hZWave.SetNodeWakeUpInterval(iSelectedNode, vbWakeUpInterval.Value)
    Else
      txtMessage.Text = "Wake-Up interval has to be 1 or greater"
    Endif
  Endif

End
