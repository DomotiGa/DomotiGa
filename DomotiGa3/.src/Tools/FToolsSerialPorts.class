' Gambas class file

' Description:
' FToolsSerialPorts.class
' Shows which serial ports are available and which are in use.

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Private $sPort As String
Private $sRun As String

Public Sub Form_Open()

  Me.Move(FMain.X + 50, FMain.Y + 70)

  ' Check if we can/should show the Open Z-Wave Commander
  If Not Main.bServer Then
    ' We are running in client/server mode - we only support JSON-RPC
    If Main.sRPCType <> "JSONRPC" Then
      Message.Info(("Open Z-Wave Commander will only work in Client/Server mode if the JSON-RPC is configured in the GUI"))
      Try Me.Close
      Return
    Endif
  Endif

  ' tweak tableview
  With tbvPorts
    .Columns.Count = 2
    .Columns[0].Title = ("Serial Device")
    .Columns[0].Width = 300
    .Columns[1].Title = ("In use by")
    '.Columns[1].Width = 150
  End With

  PortType_Click()

End

Public Sub Run() As String

  btnSave.Visible = True
  btnClose.Text = "Cancel"

  If Not Me.ShowModal() Then Return

  Return $sRun

End

Public Sub btnSave_Click()

  $sRun = $sPort
  Me.Close(True)

End

Public Sub btnClose_Click()

  Me.Close(True)

End

Public Sub ScanPorts(sPath As String, sFilter As String)

  Dim sType As String
  Dim sName As String
  Dim sRealName As String
  Dim aSerialPorts As String[]
  Dim cSerialPorts As New Collection
  Dim iCount As Integer
  Dim rResult As Result
  Dim cSerialPortList As Collection
  Dim sGroup As String
  Dim sInterfaces As String[] = ["ctx35", "cul", "irman", "sms", "gps", "temp08", "visca", "rfxcomrx", "rfxcomtx", "weeder", "dsc", "domotica", "plugwise", "openzwave", "jeelabs", "plcbus", "onkyo", "denon", "currentcost", "ledmatrix", "opentherm", "rfxcomtrx", "pioneer", "visonic", "smartmeter"]

  If Main.bServer Then
    ' fill array with available ports
    Try aSerialPorts = Dir(sPath, sFilter)
    aSerialPorts.Sort

    cSerialPorts.Clear
    For Each sName In aSerialPorts
      sName = sPath &/ sName
      If Not Regexp.Match(sName, "^/dev/ttyS[0-9]{1,2}$") Then
        Exec ["readlink", "-f", sName] To sRealName
        sRealName = Trim(sRealName)
        If Not sRealName Then sRealName = sName
      Else
        sRealName = sName
      Endif

      cSerialPorts.Add(sRealName, sName)
    Next

  Else
    cSerialPortList = Client.Call_Tools_SerialPort_Get(["command": "list", "path": sPath, "filter": sFilter])

    ' Don't continue if we get an empty response
    If cSerialPortList = Null Or If Not cSerialPortList.Exist("count") Then
      Message.Error(("Received an empty or invalid response from the JSON-RPC server.\nPlease consult the server logfile for more information"))
      Try Me.Close
      Return
    Endif

    ' Check if we received the valid fields and handle errors
    If cSerialPortList["count"] > 0 Then
      If Not cSerialPortList.Exist("serialport") Then
        Message.Error(("Missing serialport list in response from the JSON-RPC server.\nPlease consult the server logfile for more information"))
        Try Me.Close
        Return
      Endif

      cSerialPorts = cSerialPortList["serialport"]
    Else
      cSerialPorts.Clear
    Endif

  Endif

  ' set no of rows to number of ports found
  tbvPorts.Rows.Count = cSerialPorts.Count

  For Each cSerialPorts

    sName = cSerialPorts.Key
    sRealName = cSerialPorts[sName]

    tbvPorts[iCount, 0].Text = sName
    tbvPorts[iCount, 1].Text = ("(unassigned)")

    For Each sGroup In sInterfaces
      rResult = Main.hDB.Exec("SELECT * FROM " & DB.Quote("settings_" & sGroup) & " WHERE id = 1")

      If (rResult.Count >= 1) Then
        For Each rResult

          ' First determine if type in the record
          Try sType = rResult!type
          If Error Then sType = "serial"
          If sType <> "tcp" And If sType <> "serial" Then sType = "serial"

          If sType = "serial" Then
            If rResult!serialport = sName Or If rResult!serialport = sRealName Then
              sGroup = Upper$(sGroup)
              If rResult!enabled = False Then
                sGroup &= (" (disabled)")
                Continue
              Endif
              tbvPorts[iCount, 1].Text = sGroup
            Endif
          Endif
        Next
      Endif
    Next
    Inc iCount
  Next

End

Public Sub btnRescan_Click()

  PortType_Click()

End

Public Sub txtSearchPattern_KeyPress()

  ScanPorts("/dev", txtSearchPattern.Text)

End

Public Sub PortType_Click()

  If rbTTY.Value Then
    ScanPorts("/dev", txtSearchPattern.Text)
  Else
    ScanPorts("/dev/serial/by-id", "*")
  Endif

End

Public Sub tbvPorts_Select()

  If tbvPorts.Row = -1 Then Return
  Try $sPort = tbvPorts[tbvPorts.Row, 0].Text

End
