' Gambas class file

' Description:
' CWebServer.class
' Built-in -very basic- webserver support.

' Development Status:
' Only some test pages available, not suited for high load/rich pages.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

Property DocRoot As String
Property HTTPPort As String
Property WebserverDebug As Boolean

Private sDocRoot As String
Private sHTTPPort As String
Private bWebserverDebug As Boolean

Public hWebserver As ServerSocket

Private oClients As New Object[]

Public Function Connect() As Boolean

  hWebserver = New ServerSocket As "Webserver"
  hWebserver.Type = Net.Internet
  hWebserver.Port = sHTTPPort
  hWebserver.Listen(0)

  If hWebserver.Status = Net.Active Then
    Return True
  End If
  Return False

End

' shutdown our web server
Public Sub Disconnect()

  hWebserver.Close()

End

Public Sub Webserver_Connection(RemoteHostIP As String)

  Dim hSocket As Socket

  If hWebserver.Status <= Net.Active Then Return
  hSocket = hWebserver.Accept()
  oClients.Add(hSocket)
  Main.WriteDebugLog(("[Webserver] HTTP connect from Client with IP ") & RemoteHostIP & " (" & DNS.ResolveHost(RemoteHostIP) & ")")

End

Public Sub Webserver_Error()

  Main.WriteLog(("HTTP Error: Unable to bind socket."))

End

Public Sub Socket_Read()

  Dim sBuffer, sReplyHeader, sHtmlPage As String
  Dim i, j As Integer

  If Last.Status <> Net.Connected Then Return
  Read #Last, sBuffer, Lof(Last)
  sReplyHeader = "HTTP/1.1 200/OK\r\nContent-type:text/html\r\n\r\n"
  Try Write #Last, sReplyHeader, Len(sReplyHeader)
  If Not Error Then
    i = String.InStr(sBuffer, "GET /")
    j = String.InStr(sBuffer, "HTTP")

    If i > 0 And j > (i + 5) Then
      sBuffer = Trim(String.Mid(sBuffer, i + 5, j - i - 5))
      ' display default index page
      If Not sBuffer Then sBuffer = "index.html"
      Try sHtmlPage = File.Load(sDocRoot &/ sBuffer)
      sHtmlPage = Replace(sHtmlPage, "##APPLICATION##", Application.Name)
      sHtmlPage = Replace(sHtmlPage, "##VERSION##", Main.sProgramVersion)
      If Error Then
        Main.WriteDebugLog(("[Webserver] HTTP document not found: ") & sBuffer & " " & Error.Text)
      Endif
    Endif
  Endif

  If Not sHtmlPage Then
    sHtmlPage = ("Web page not found.")
    Main.WriteDebugLog("[Webserver] " & sHtmlPage)
  End If

  Try Write #Last, sHtmlPage, Len(sHtmlPage)
  Last.Close
  oClients.Remove(oClients.Find(Last))

End

Private Sub PrintPage(sPart As String) As String

  Dim sContent As String

  Try sContent = File.Load(sDocRoot &/ "page" &/ sPart)
  Return sContent

End

Public Sub Socket_Closed()

  oClients.Remove(oClients.Find(Last))

End

Private Function DocRoot_Read() As String

  Return sDocRoot

End

Private Sub DocRoot_Write(Value As String)

  sDocRoot = Value

End

Private Function HTTPPort_Read() As String

  Return sHTTPPort

End

Private Sub HTTPPort_Write(Value As String)

  sHTTPPort = Value

End

Private Function WebserverDebug_Read() As Boolean

  Return bWebserverDebug

End

Private Sub WebserverDebug_Write(Value As Boolean)

  bWebserverDebug = Value

End
