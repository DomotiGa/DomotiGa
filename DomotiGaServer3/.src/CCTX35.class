' Gambas class file

' Description:
' CCTX35.class
' Support for Xanura CTX35 A10/X10 interface

' Development Status:
' Controlling devices works, with on/off, dim and bright, reading of on/off status works, reading of dim/bright needs to be implemented.

' Links:
' http://www.hometoys.com/htinews/dec02/articles/kingery16/kingery16.htm

' Credits:
' Thanks to Pieter from BWired.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

Property Port As String
Property Baud As String
Property PollTime As Integer
Property GlobalX10 As Boolean
Property CTX35Debug As Boolean

Private sPort As String
Private sBaud As String
Private iPollTime As Integer
Private bGlobalX10 As Boolean
Private bCTX35Debug As Boolean

Public hCTX35 As New SerialPort
Public tCTX35 As Timer
Public tX10 As Timer

Public sCommandToSend As String ' holds commands to send
Private aCTX As New String[3, 7] ' buffer received commands

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hCTX35.Close

  ' get a new one
  hCTX35 = New Serialport As "CTX35"

  With hCTX35
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' start poll timer for X10 status LED
  tX10 = New Timer As "tX10LED"
  tX10.Delay = 100
  tX10.Stop

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("CTX35 Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hCTX35.Close
  Main.WriteLog(("CTX35 serial port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("CTX35 Error: ") & ERROR.Text)
  Return False

End

Public Sub Run()

  tCTX35 = New Timer As "tCTX35"
  tCTX35.Delay = iPollTime
  tCTX35.Start

End

Private Sub Received(sData As String)

  ' CTX35 sometimes sends incomplete packet when sending BOFFBOFF, this fixes the packet so it is valid
  If Right$(sData, 9) = "BOFFBOFF8" Then sData = Left$(sData, -1) & "85#"

  If Left$(sData, 1) = "$" And Right$(sData, 1) = "#" Then ' received complete packet
    If sData = "$<2800!4B#" Then ' ignore acks
      sData = ""
    Else
      sData = Replace(sData, "$<2800!4B#", "") ' remove ack packet
      If Main.bCTX35Debug Then Main.WriteDebugLog("[CTX35] " & sData)
      TranslateCTX(sData)
    End If
    sData = ""
  End If

End

Private Sub TranslateCTX(sStr As String)

  Dim iPos As Integer = 1
  Dim sChar As String

  If Main.bCTX35Debug Then Main.WriteDebugLog("[CTX35] " & sStr)

  ' search for start and end
  If Left$(sStr, 1) = "$" And Right$(sStr, 1) = "#" Then ' complete packet
    ' checksum
    If Not TestCheckSum(sStr) Then
      If Main.bCTX35Debug Then Main.WriteDebugLog(("[CTX35] Checksum error!"))
      Return
    End If
    sStr = LTrim$(Mid$(sStr, 8, Len(sStr) - 10))

    Do
      If Mid$(sStr, iPos, 1) = " " Then Inc iPos
      sChar = Mid$(sStr, iPos, 3)
      If Right$(sChar, 1) Like "[0-9]" And Left$(sChar, 1) Like "[A-Z]" Then ' code found
        iPos = iPos + 3
        ProcessCode("Code", sChar)
      Else If InStr(sChar, "ON") Then ' status found
        iPos = iPos + 3
        ProcessCode("Status", sChar)
      Else If InStr(sChar, "OF") Then ' status found
        sChar = Mid$(sStr, iPos, 3)
        iPos = iPos + 4
        ProcessCode("Status", sChar)
      Else If InStr(sChar, "SR") Then ' status request found
        iPos = iPos + 4
        ProcessCode("Status Request", sChar)
      Else If Right$(sChar, 2) = "SO" Then ' status found
        If InStr(sStr, "SON") Then
          ProcessCode("Status", Left$(sChar, 1) & "ON")
        Else If InStr(sStr, "SOF") Then
          ProcessCode("Status", Left$(sChar, 1) & "OF")
        End If
        iPos = iPos + 4
      Else
        Inc iPos
      End If
    Loop Until iPos >= Len(sStr)
  Else
    If Main.bCTX35Debug Then Main.WriteDebugLog(("[CTX35] Wrong X10 data received! ") & sStr)
  End If

End Sub

Private Sub ProcessCode(sType As String, sValue As String)

  Dim iCnt, iCnt2 As Integer
  Dim bCodefound As Boolean

  For iCnt = 0 To 2
    If sType = "Code" Then
      bCodefound = False
      If Main.bCTX35Debug Then Main.WriteDebugLog("[CTX35] Code: " & sValue)
      For iCnt2 = 0 To 2
        If aCTX[iCnt, 0] = sValue And Not aCTX[iCnt, 5] Then
          bCodefound = True
        End If
      Next
      If aCTX[iCnt, 0] = "" And Not bCodefound Then
        aCTX[iCnt, 0] = sValue
        aCTX[iCnt, 4] = Time
        Return
      Else If aCTX[iCnt, 0] = sValue And aCTX[iCnt, 5] = "" And bCodefound Then
        aCTX[iCnt, 1] = sValue
        Return
      Else If aCTX[iCnt, 5] = "OK" And Not bCodefound Then ' different value but old one was complete so overwrite
        aCTX[iCnt, 0] = sValue
        aCTX[iCnt, 1] = ""
        aCTX[iCnt, 2] = ""
        aCTX[iCnt, 3] = ""
        aCTX[iCnt, 4] = Time
        aCTX[iCnt, 5] = ""
        aCTX[iCnt, 6] = ""
        Return
      Else If DateDiff(Time, aCTX[iCnt, 4], gb.Second) > 10 Then ' incomplete code/status, overwrite
        Main.WriteDebugLog(("[CTX35] Received Code without Status : ") & aCTX[iCnt, 0] & " " & aCTX[iCnt, 1] & " " & aCTX[iCnt, 2] & " " & aCTX[iCnt, 3] & " " & aCTX[iCnt, 4] & " " & aCTX[iCnt, 5] & " " & aCTX[iCnt, 6])
        aCTX[iCnt, 0] = sValue
        aCTX[iCnt, 1] = ""
        aCTX[iCnt, 2] = ""
        aCTX[iCnt, 3] = ""
        aCTX[iCnt, 4] = Time
        aCTX[iCnt, 5] = ""
        aCTX[iCnt, 6] = ""
        Return
      End If
    Else If sType = "Status Request" Then
      If Main.bCTX35Debug Then Main.WriteDebugLog(("[CTX35] Status Request ") & sValue)
      If aCTX[iCnt, 0] = "" Then
        Return
      Else If Left$(aCTX[iCnt, 0], 1) = Left$(sValue, 1) And aCTX[iCnt, 5] = "" Then
        aCTX[iCnt, 6] = "SRQ" ' status request
        Return
      End If
    Else If sType = "Status" Then
      If Main.bCTX35Debug Then Main.WriteDebugLog(("[CTX35] Status: ") & sValue)
      If aCTX[iCnt, 2] = "" And Left$(aCTX[iCnt, 0], 1) = Left$(sValue, 1) Then
        aCTX[iCnt, 5] = "OK"
        aCTX[iCnt, 4] = Time
        aCTX[iCnt, 2] = Right$(sValue, 2)
        UpdateX10(aCTX[iCnt, 0], Right$(sValue, 2))
        Return
      Else If aCTX[iCnt, 3] = "" And Left$(aCTX[iCnt, 0], 1) = Left$(sValue, 1) Then
        aCTX[iCnt, 3] = Right$(sValue, 2)
        Return
      End If
    End If
  Next

End

Private Sub UpdateX10(sCode As String, sCommand As String)

  Dim iDeviceId As Integer

  If Main.bCTX35Debug Then Main.WriteDebugLog(("[CTX35] Received command ") & sCommand & (" for device ") & sCode)

  If bGlobalX10 Then
    iDeviceId = Devices.FindAll(sCode, 9999, "X10")
  Else
    iDeviceId = Devices.Find(sCode, Devices.FindInterface("Xanura CTX35"), "X10")
  Endif
  If iDeviceId Then
    If sCommand = "ON" Then
      Devices.ValueUpdate(iDeviceId, "On", "", "", "")
    Else If sCommand = "OF" Then
      Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
    End If
  End If

End

' ctx35 poll routine
Public Sub tCTX35_Timer()

  Dim sResponse As String
  Dim sCommand As String

  Main.ControlLed("X10", "On")
  If Main.bServer Then tX10.Start

  ' sent poll command only if no command is requested
  If Not sCommandToSend Then
    sResponse = SendPollCommand()
  Else
    sCommand = PrepareCommand(sCommandToSend)
    If Not sCommand Then
      Main.WriteDebugLog(("[CTX35] Unparsable command given!"))
    Else
      sResponse = SendX10Command(sCommand)
      If InStr(sResponse, "?") Then
        Main.WriteDebugLog(("[CTX35] Device reported bad checksum!"))
      Else If InStr(sResponse, "!S0") Then
        Main.WriteDebugLog(("[CTX35] Device reported buffer full!"))
      End If
    End If
    sCommandToSend = Null
  End If

End

Public Sub SendPollCommand() As String

  Dim sBuf, sCommand As String
  sCommand = "$>2800008C#"

  If hCTX35.Status <> Net.Active Then Return

  Print #hCTX35, sCommand
  Read #hCTX35, sBuf, Lof(hCTX35)
  Received(sBuf)

End

Private Sub SendX10Command(sString As String) As String

  Dim sBuf As String

  ' create command
  sString = CreateWithChecksum(sString)

  If Main.bCTX35Debug Then Main.WriteDebugLog(sString)

  Print #hCTX35, sString
  Try Read #hCTX35, sBuf, Lof(hCTX35)
  Received(sBuf)

End

Public Sub tX10LED_Timer()

  Main.ControlLed("X10", "Off")
  If Main.bServer Then tX10.Stop

End

Private Sub PrepareCommand(sString As String) As String

  Dim sLetter, sNumber, sAddr, sStr As String

  sString = UCase$(sString)

  ' check if it contains a valid address
  If Not (sString Like "[A-P][0-1][0-9]*") Then Return

  sLetter = Left$(sString, 1)
  sNumber = Mid$(sString, 2, 2)
  sStr = X10toCTX(Right$(sString, -4))
  ' todo check for repeated commands and support extended commands
  sStr = String$(2, sLetter & sStr)
  sAddr = String$(2, sLetter & sNumber)

  Return sAddr & " " & sStr

End

Private Sub TestCheckSum(sString As String) As Boolean

  Dim sHead, sTail As String
  Dim iLoop, iChecksum As Integer

  ' split string
  sTail = Right$(sString, 3)
  sHead = Left$(sString, -3)

  If Not sTail And sHead Then Return False

  For iLoop = 1 To Len(sHead)
    iCheckSum = iChecksum + Asc(Mid$(sHead, iLoop, 1)) And 255
  Next

  ' check result
  If sTail = Hex$(iChecksum, 2) & "#" Then Return True

  Return False

End

Public Sub CreateWithChecksum(sCommand As String) As String

  Dim iChecksum, iLoop As Integer

  sCommand = "$>28001" & sCommand

  For iLoop = 1 To Len(sCommand)
    iCheckSum = iChecksum + Asc(Mid$(sCommand, iLoop, 1))
  Next

  Return sCommand & Right$(Hex$(iChecksum), 2) & "#"

End

Private Sub X10toCTX(sCommand As String) As String

  Select sCommand
    Case "ALL_UNITS_OFF"
      Return "AUF"
    Case "ALL_LIGHTS_ON"
      Return "ALN"
    Case "ALL_LIGHTS_OFF"
      Return "ALF"
    Case "ON"
      Return "ON"
    Case "OFF"
      Return "OFF"
    Case "DIM"
      Return "DIM"
    Case "BRIGHT"
      Return "BGT"
    Case "HAIL_REQ"
      Return "HRQ"
    Case "PREDIM1"
      Return "PR0"
    Case "PREDIM2"
      Return "PR1"
    Case "STATUS"
      Return "SRQ"
  End Select

  Return ""

End

' implement properties
Function Port_Read() As String

  Return sPort

End

Sub Port_Write(Value As String)

  sPort = Value

End

Private Function Baud_Read() As String

  Return sBaud

End

Private Sub Baud_Write(Value As String)

  sBaud = Value

End

Private Function CTX35Debug_Read() As Boolean

  Return bCTX35Debug

End

Private Sub CTX35Debug_Write(Value As Boolean)

  bCTX35Debug = Value

End

Private Function PollTime_Read() As Integer

  Return iPollTime

End

Private Sub PollTime_Write(Value As Integer)

  iPollTime = Value

End

Private Function GlobalX10_Read() As Boolean

  Return bGlobalX10

End

Private Sub GlobalX10_Write(Value As Boolean)

  bGlobalX10 = Value

End
