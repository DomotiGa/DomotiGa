' Gambas class file

' Description:
' CRFXComTrx.class
' Connect to RFXCom TRX transceiver interface via tcp socket or serial port.

' Development Status:
' Used RFXCom's RFXmngr_vb project as example.

' Credits:
' Thanks to Bert Weijenberg from RFXCom for letting me test his new hardware products.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS Integer
PROPERTY Interface AS String
PROPERTY SerPort AS String
PROPERTY Baud AS String
PROPERTY RFXComDebug AS Boolean
PROPERTY RelayPort AS Integer
PROPERTY GlobalX10 AS Boolean
PROPERTY OldAddrFmt AS Boolean

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS Integer
PRIVATE sInterface AS String
PRIVATE sSerPort AS String
PRIVATE sBaud AS String
PRIVATE bRFXComTRXDebug AS Boolean
PRIVATE iRelayPort AS Integer
PRIVATE bGlobalX10 AS Boolean
PRIVATE bOldAddrFmt AS Boolean

PUBLIC hRFXComTRX AS NEW Socket
PUBLIC hRFXComTRXSer AS NEW SerialPort
PUBLIC hRFXComTRXRelay AS NEW ServerSocket
PUBLIC hRelayTRXClient AS Object[]
PUBLIC hRelayTRXSocket AS NEW Socket
PUBLIC tRFXComTRXConnect AS Timer
PUBLIC tRFXComTRXReset AS Timer
PRIVATE bResetActive AS Boolean = TRUE
PRIVATE iConnectRetry AS Integer = 0 ' retries
PRIVATE iConnectDelay AS Integer = 60000 ' 1 minute
' [GB2:ARRD] PRIVATE RecBuf AS Byte[30]
PRIVATE RecBuf As New Byte[30]
PRIVATE RecBytes AS Byte
PUBLIC bSimulate AS Boolean
PRIVATE iSeq AS Integer

' interface control
CONST pTypeInterfaceControl AS Byte = &H0
CONST sTypeInterfaceCommand AS Byte = &H0

CONST pTypeInterfaceMessage AS Byte = &H1
CONST sTypeInterfaceResponse AS Byte = &H0

' interface commands
CONST msg3undec AS Byte = &H80
CONST msg3RFU6 AS Byte = &H40
CONST msg3RFU5 AS Byte = &H20
CONST msg3RFU4 AS Byte = &H10
CONST msg3RFU3 AS Byte = &H8
CONST msg3FINEOFFSET AS Byte = &H4
CONST msg3RUBICSON AS Byte = &H2
CONST msg3AE AS Byte = &H1

CONST msg4BlindsT1 AS Byte = &H80
CONST msg4BlindsT0 AS Byte = &H40
CONST msg4PROGUARD AS Byte = &H20
CONST msg4FS20 AS Byte = &H10
CONST msg4LCROS AS Byte = &H8
CONST msg4HID AS Byte = &H4
CONST msg4AD AS Byte = &H2
CONST msg4MERTIK AS Byte = &H1

CONST msg5VISONIC AS Byte = &H80
CONST msg5ATI AS Byte = &H40
CONST msg5OREGON AS Byte = &H20
CONST msg5MEI AS Byte = &H10
CONST msg5HEU AS Byte = &H8
CONST msg5AC AS Byte = &H4
CONST msg5ARC AS Byte = &H2
CONST msg5X10 AS Byte = &H1

CONST cmdRESET AS Byte = &H0 ' reset the receiver/transceiver
CONST cmdSTATUS AS Byte = &H2 ' return firmware versions and configuration of the interface
CONST cmdSETMODE AS Byte = &H3 ' set the configuration of the interface
CONST cmdSAVE AS Byte = &H6 ' save receiving modes of the receiver/transceiver in non-volatile memory

CONST cmd310 AS Byte = &H50 ' select 310MHz in the 310/315 transceiver
CONST cmd315 AS Byte = &H51 ' select 315MHz in the 310/315 transceiver
CONST cmd800 AS Byte = &H55 ' select 868.00MHz ASK in the 868 tranceiver
CONST cmd800F AS Byte = &H56 ' select 868.00MHz FSK in the 868 tranceiver
CONST cmd830 AS Byte = &H57 ' select 868.30MHz ASK in the 868 transceiver
CONST cmd830F AS Byte = &H58 ' select 868.30MHz FSK in the 868 transceiver
CONST cmd835 AS Byte = &H59 ' select 868.35MHz ASK in the 868 transceiver
CONST cmd835F AS Byte = &H5A ' select 868.35MHz FSK in the 868 transceiver
CONST cmd895 AS Byte = &H5B ' select 868.95MHz in the 868 transceiver

CONST pTypeRecXmitMessage AS Byte = &H2
CONST sTypeReceiverLockError AS Byte = &H0
CONST sTypeTransmitterResponse AS Byte = &H1

' receiver
CONST pTypeResponse AS Byte = &H1
CONST recType310 AS Byte = &H50
CONST recType315 AS Byte = &H51
CONST recType43392 AS Byte = &H53
CONST trxType43392 AS Byte = &H54
CONST recType86800 AS Byte = &H55
CONST recType86800FSK AS Byte = &H56
CONST recType86830 AS Byte = &H57
CONST recType86830FSK AS Byte = &H58
CONST recType86835 AS Byte = &H59
CONST recType86835FSK AS Byte = &H5A
CONST recType86895 AS Byte = &H5B

' undecoded
CONST pTypeUndecoded AS Byte = &H3
CONST sTypeUac AS Byte = &H0
CONST sTypeUarc AS Byte = &H1
CONST sTypeUati AS Byte = &H2
CONST sTypeUhideki AS Byte = &H3
CONST sTypeUlacrosse AS Byte = &H4
CONST sTypeUad AS Byte = &H5
CONST sTypeUmertik AS Byte = &H6
CONST sTypeUoregon1 AS Byte = &H7
CONST sTypeUoregon2 AS Byte = &H8
CONST sTypeUoregon3 AS Byte = &H9
CONST sTypeUproguard AS Byte = &HA
CONST sTypeUvisonic AS Byte = &HB
CONST sTypeUnec AS Byte = &HC
CONST sTypeUfs20 AS Byte = &HD
CONST sTypeUblinds AS Byte = &HF
CONST sTypeUrubicson AS Byte = &H10
CONST sTypeUae AS Byte = &H11
CONST sTypeUfineoffset AS Byte = &H12

' lighting
CONST pTypeLighting1 AS Byte = &H10
CONST sTypeX10 AS Byte = &H0
CONST sTypeARC AS Byte = &H1
CONST sTypeAB400D AS Byte = &H2
CONST sTypeWaveman AS Byte = &H3
CONST sTypeEMW200 AS Byte = &H4
CONST sTypeIMPULS AS Byte = &H5
CONST sTypeRisingSun AS Byte = &H6
CONST sTypePhilips AS Byte = &H7

CONST pTypeLighting2 AS Byte = &H11
CONST sTypeAC AS Byte = &H0
CONST sTypeHEU AS Byte = &H1
CONST sTypeANSLUT AS Byte = &H2

CONST pTypeLighting3 AS Byte = &H12
CONST sTypeKoppla AS Byte = &H0

CONST pTypeLighting4 AS Byte = &H13
CONST sTypePT2262 AS Byte = &H0

CONST pTypeLighting5 AS Byte = &H14
CONST sTypeLightwaveRF AS Byte = &H0
CONST sTypeEMW100 AS Byte = &H1
CONST sTypeBBSB AS Byte = &H2

CONST pTypeLighting6 AS Byte = &H15
CONST sTypeBlyss AS Byte = &H0

' curtain
CONST pTypeCurtain AS Byte = &H18
CONST sTypeHarrison AS Byte = &H0

' blinds
CONST pTypeBlinds AS Byte = &H19
CONST sTypeBlindsT0 AS Byte = &H0
CONST sTypeBlindsT1 AS Byte = &H1

' security
CONST pTypeSecurity1 AS Byte = &H20
CONST sTypeSecX10 AS Byte = &H0
CONST sTypeSecX10M AS Byte = &H1
CONST sTypeSecX10R AS Byte = &H2
CONST sTypeKD101 AS Byte = &H3
CONST sTypePowercodeSensor AS Byte = &H4
CONST sTypePowercodeMotion AS Byte = &H5
CONST sTypeCodesecure AS Byte = &H6
CONST sTypePowercodeAux AS Byte = &H7
CONST sTypeMeiantech AS Byte = &H8

' status security
CONST sStatusNormal AS Byte = &H0
CONST sStatusNormalDelayed AS Byte = &H1
CONST sStatusAlarm AS Byte = &H2
CONST sStatusAlarmDelayed AS Byte = &H3
CONST sStatusMotion AS Byte = &H4
CONST sStatusNoMotion AS Byte = &H5
CONST sStatusPanic AS Byte = &H6
CONST sStatusPanicOff AS Byte = &H7
CONST sStatusTamper AS Byte = &H8
CONST sStatusArmAway AS Byte = &H9
CONST sStatusArmAwayDelayed AS Byte = &HA
CONST sStatusArmHome AS Byte = &HB
CONST sStatusArmHomeDelayed AS Byte = &HC
CONST sStatusDisarm AS Byte = &HD
CONST sStatusLightOff AS Byte = &H10
CONST sStatusLightOn AS Byte = &H11
CONST sStatusLight2Off AS Byte = &H12
CONST sStatusLight2On AS Byte = &H13
CONST sStatusDark AS Byte = &H14
CONST sStatusLight AS Byte = &H15
CONST sStatusBatLow AS Byte = &H16
CONST sStatusPairKD101 AS Byte = &H17
CONST sStatusNormalTamper AS Byte = &H80
CONST sStatusNormalDelayedTamper AS Byte = &H81
CONST sStatusAlarmTamper AS Byte = &H82
CONST sStatusAlarmDelayedTamper AS Byte = &H83
CONST sStatusMotionTamper AS Byte = &H84
CONST sStatusNoMotionTamper AS Byte = &H85

' camera1
CONST pTypeCamera1 AS Byte = &H28
CONST sTypeNinja AS Byte = &H0

' remotes
CONST pTypeRemote AS Byte = &H30
CONST sTypeATI AS Byte = &H0
CONST sTypeATI2 AS Byte = &H1
CONST sTypeMedion AS Byte = &H2
CONST sTypePCremote AS Byte = &H3
CONST sTypeATIrw2 AS Byte = &H4

' thermostat1
CONST pTypeThermostat1 AS Byte = &H40
CONST sTypeDigimax AS Byte = &H0      ' Digimax with long packet
CONST sTypeDigimaxShort AS Byte = &H1 ' Digimax with short packet (no set point)

' thermostat2
CONST pTypeThermostat2 AS Byte = &H41
CONST sTypeHE105 AS Byte = &H0  ' HE105
CONST sTypeRTS10 AS Byte = &H1  ' RTS10

' thermostat3
CONST pTypeThermostat3 AS Byte = &H42
CONST sTypeMertikG6RH4T1 AS Byte = &H0  ' Mertik G6R-H4T1
CONST sTypeMertikG6RH4TB AS Byte = &H1  ' Mertik G6R-H4TB

' temperature
CONST pTypeTEMP AS Byte = &H50
CONST sTypeTEMP1 AS Byte = &H1  ' THR128/138, THC138
CONST sTypeTEMP2 AS Byte = &H2  ' THC238/268,THN132,THWR288,THRN122,THN122,AW129/131
CONST sTypeTEMP3 AS Byte = &H3  ' THWR800
CONST sTypeTEMP4 AS Byte = &H4  ' RTHN318
CONST sTypeTEMP5 AS Byte = &H5  ' LaCrosse TX3
CONST sTypeTEMP6 AS Byte = &H6  ' TS15C
CONST sTypeTEMP7 AS Byte = &H7  ' Viking 02811
CONST sTypeTEMP8 AS Byte = &H8  ' LaCrosse WS2300
CONST sTypeTEMP9 AS Byte = &H9  ' RUBiCSON
CONST sTypeTEMP10 AS Byte = &HA ' TFA 30.3133

' humidity
CONST pTypeHUM AS Byte = &H51   ' not used
CONST sTypeHUM1 AS Byte = &H1   ' LaCrosse TX3
CONST sTypeHUM2 AS Byte = &H2   ' LaCrosse WS2300

' temperature+humidity
CONST pTypeTEMP_HUM AS Byte = &H52
CONST sTypeTH1 AS Byte = &H1    ' THGN122/123,/THGN132,THGR122/228/238/268
CONST sTypeTH2 AS Byte = &H2    ' THGR810/THGN800
CONST sTypeTH3 AS Byte = &H3    ' RTGR328
CONST sTypeTH4 AS Byte = &H4    ' THGR328
CONST sTypeTH5 AS Byte = &H5    ' WTGR800
CONST sTypeTH6 AS Byte = &H6    ' THGR918,THGRN228,THGN500
CONST sTypeTH7 AS Byte = &H7    ' TFA TS34C
CONST sTypeTH8 AS Byte = &H8    ' Esic WT440H/450H
CONST sTypeTH9 AS Byte = &H9    ' Viking 02038

' barometric
CONST pTypeBARO AS Byte = &H53  ' not used

' temperature+humidity+baro
CONST pTypeTEMP_HUM_BARO AS Byte = &H54
CONST sTypeTHB1 AS Byte = &H1   ' BTHR918
CONST sTypeTHB2 AS Byte = &H2   ' BTHR918N,BTHR968

' rain
CONST pTypeRAIN AS Byte = &H55
CONST sTypeRAIN1 AS Byte = &H1  ' RGR126/682/918
CONST sTypeRAIN2 AS Byte = &H2  ' PCR800
CONST sTypeRAIN3 AS Byte = &H3  ' TFA
CONST sTypeRAIN4 AS Byte = &H4  ' UPM RG700
CONST sTypeRAIN5 AS Byte = &H5  ' LaCrosse WS2300

' wind
CONST pTypeWIND AS Byte = &H56
CONST sTypeWIND1 AS Byte = &H1  ' WTGR800
CONST sTypeWIND2 AS Byte = &H2  ' WGR800
CONST sTypeWIND3 AS Byte = &H3  ' STR918,WGR918
CONST sTypeWIND4 AS Byte = &H4  ' TFA
CONST sTypeWIND5 AS Byte = &H5  ' UPM
CONST sTypeWIND6 AS Byte = &H6  ' LaCrosse WS2300

' uv
CONST pTypeUV AS Byte = &H57
CONST sTypeUV1 AS Byte = &H1    ' UVN128,UV138
CONST sTypeUV2 AS Byte = &H2    ' UVN800
CONST sTypeUV3 AS Byte = &H3    ' TFA

' date & time
CONST pTypeDT AS Byte = &H58
CONST sTypeDT1 AS Byte = &H1    ' RTGR328N

' current
CONST pTypeCURRENT AS Byte = &H59
CONST sTypeELEC1 AS Byte = &H1  ' CM113,Electrisave

' energy
CONST pTypeENERGY AS Byte = &H5A
CONST sTypeELEC2 AS Byte = &H1  ' CM119/160
CONST sTypeELEC3 AS Byte = &H2  ' CM180

' gas
CONST pTypeGAS AS Byte = &H5B   ' not used

' water
CONST pTypeWATER AS Byte = &H5C ' not used

' weight scales
CONST pTypeWEIGHT AS Byte = &H5D
CONST sTypeWEIGHT1 AS Byte = &H1   ' BWR102
CONST sTypeWEIGHT2 AS Byte = &H2   ' GR101

' rfxsensor
CONST pTypeRFXSensor AS Byte = &H70
CONST sTypeRFXSensorTemp AS Byte = &H0
CONST sTypeRFXSensorAD AS Byte = &H1
CONST sTypeRFXSensorVolt AS Byte = &H2
CONST sTypeRFXSensorMessage AS Byte = &H3

' rfxmeter
CONST pTypeRFXMeter AS Byte = &H71
CONST sTypeRFXMeterCount AS Byte = &H0
CONST sTypeRFXMeterInterval AS Byte = &H1
CONST sTypeRFXMeterCalib AS Byte = &H2
CONST sTypeRFXMeterAddr AS Byte = &H3
CONST sTypeRFXMeterCounterReset AS Byte = &H4
CONST sTypeRFXMeterCounterSet AS Byte = &HB
CONST sTypeRFXMeterSetInterval AS Byte = &HC
CONST sTypeRFXMeterSetCalib AS Byte = &HD
CONST sTypeRFXMeterSetAddr AS Byte = &HE
CONST sTypeRFXMeterIdent AS Byte = &HF

' fs20
CONST pTypeFS20 AS Byte = &H72
CONST sTypeFS20 AS Byte = &H0
CONST sTypeFHT8V AS Byte = &H1
CONST sTypeFHT80 AS Byte = &H2

PUBLIC SUB RFXComTRX_Ready()

  Main.WriteLog(("RFXCom transceiver TCP socket connected."))
  ResetInterface()

  ' define timer for RFXComTRX reconnect
  tRFXComTRXConnect = NEW Timer AS "tRFXComTRXConnect"
  tRFXComTRXConnect.Delay = iConnectRetry
  tRFXComTRXConnect.Stop

  ' define timer for RFXComTRX reset
  tRFXComTRXReset = NEW Timer AS "tRFXComTRXReset"
  tRFXComTRXReset.Delay = 1000
  tRFXComTRXReset.Stop

END

' just here for development/debugging
PUBLIC SUB ParseDump(sFile AS String)

  DIM hFile AS File
  DIM sLine AS String

  TRY hFile = OPEN sFile FOR INPUT
  IF ERROR THEN RETURN

  WHILE NOT Eof(hFile)
    LINE INPUT #hFile, sLine
    IF Len(sLine) > 5 THEN Simulate(sLine)
  WEND

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRFXComTRXConnect_Timer()

  IF NOT ConnectTCP() THEN
    INC iConnectRetry
    iConnectDelay *= iConnectRetry
    tRFXComTRXConnect.Delay = iConnectDelay
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tRFXComTRXReset_Timer()

  tRFXComTRXReset.Stop
  ProtocolSetup("STATUS")

  ParseDump("/home/ron/RFXtrxLog.txt")

END

PUBLIC FUNCTION StartRelay() AS Boolean

  hRFXComTRXRelay = NEW ServerSocket AS "RFXComTRXRelay"
  hRFXComTRXRelay.Type = Net.Internet
  hRFXComTRXRelay.Port = iRelayPort
  ' we start listening for max 1 connection
  hRFXComTRXRelay.Listen(1)

  IF hRFXComTRXRelay.Status = Net.Active THEN
    hRelayTRXClient = NEW Object[]
    ' all ok
    RETURN TRUE
  ELSE
    RETURN FALSE
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectTCP() AS Boolean

  ' try to close the connection
  TRY hRFXComTRX.Close

  ' get a new one
  hRFXComTRX = NEW Socket AS "RFXComTRX"
  hRFXComTRX.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("RFXCom transceiver Error: ") & ERROR.Text & " at " & ERROR.Where)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ConnectSerial() AS Boolean

  ' try to close the connection
  TRY hRFXComTRXSer.Close

  ' get a new one
  hRFXComTRXSer = NEW Serialport AS "RFXComTRXSer"
  WITH hRFXComTRXSer
    .PortName = sSerPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  END WITH

  ' define timer for RFXComTRX reset
  tRFXComTRXReset = NEW Timer AS "tRFXComTRXReset"
  tRFXComTRXReset.Delay = 1000
  tRFXComTRXReset.Stop

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("RFXCom transceiver Error: ") & ERROR.Text & " at " & ERROR.Where)
  RETURN FALSE

END

PUBLIC SUB RFXComTRXRelay_Connection(sHost AS String)

  hRelayTRXSocket = NEW Socket AS "RelayTRXSocket"
  ' accept client
  IF hRFXComTRXRelay.Status <= Net.Inactive THEN RETURN
  IF Main.bRFXComTRXDebug THEN Main.WriteDebugLog(("[RFXComTRXRelay] Connection request from client ") & sHost)

  hRelayTRXSocket = hRFXComTRXRelay.Accept()
  hRelayTRXClient.Add(hRelayTRXSocket)
  IF Main.bRFXComTRXDebug THEN
    IF hRelayTRXSocket.Status = Net.Connected THEN Main.WriteLog(("RFXCom transceiver Relay client connection from ip address ") & hRelayTRXSocket.RemoteHost & " (" & DNS.ResolveHost(hRelayTRXSocket.RemoteHost) & (" ) accepted."))
  ENDIF

END

PUBLIC SUB Socket_Read()

  DIM sBuf AS Byte

  IF LAST.Status <> Net.Connected THEN RETURN
  TRY READ #LAST, sBuf, Lof(LAST)

END

PUBLIC SUB RFXComTRXRelay_Error()

  ' handle error
  SELECT CASE hRFXComTRXRelay.Status
    CASE Net.CannotCreateSocket
      Main.WriteDebugLog(("[RFXComTRXRelay] The system does not allow to create a socket."))
    CASE Net.CannotBindSocket
      Main.WriteDebugLog(("[RFXComTRXRelay] Cannot bind socket."))
    CASE Net.CannotListen
      Main.WriteDebugLog(("[RFXComTRXRelay] Cannot listen on port."))
  END SELECT

END

PUBLIC SUB Socket_Closed()

  Main.WriteLog(("RFXCom transceiver Relay client connection closed."))
  hRelayTRXClient.Remove(hRelayTRXClient.Find(LAST))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ResetInterface()

  ProtocolSetup("RESET")

END

PUBLIC SUB SendCommand(sAddress AS String, sCmd AS String)

  DIM iDeviceId AS Integer
  DIM sType AS String

  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"))
  IF iDeviceId THEN
    sType = Devices.FindTypeForDevice(iDeviceId)
  ENDIF

  SELECT UCase(sType)
    CASE "X10", "ARC", "AB400", "WAVEMAN", "EMW200", "IMPULS", "RISINGSUN", "PHILIPSSBC" ' Lighting1
      Lighting1(sType, sAddress, sCmd)
    CASE "AC", "HEEU", "ANSLUT" ' Lighting2
      Lighting2(sType, sAddress, sCmd)
    CASE "LIGHTWAVERF", "EMW100", "BBSB" ' Lighting5
      Lighting5(sType, sAddress, sCmd)
    CASE "HARRISON" ' Curtain1
      Curtain(sType, sAddress, sCmd)
    CASE "HE105", "RTS10" ' Thermostat2
      Thermostat2(sType, sAddress, sCmd)
    CASE ELSE
      Main.WriteDebugLog(("[RFXComTRX] " & sType & " protocol is not (yet) supported by RFXComTRX code!"))
      RETURN
  END SELECT

END

' STRUCT {
'  BYTE packetlength;
'  BYTE packettype;
'  BYTE subtype;
'  BYTE seqnbr;
'  BYTE cmnd;
'  BYTE msg1; // SELECT receiver / transceiver frequency
'  BYTE msg2; // RFU
'  BYTE msg3; // mode SELECT bits
'  BYTE msg4; // mode SELECT bits
'  BYTE msg5; // mode SELECT bits
'  BYTE msg6; // RFU
'  BYTE msg7; // RFU
'  BYTE msg8; // RFU
'  BYTE msg9; // RFU
' }ICMND;

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' protocol commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION ProtocolSetup(sType AS String, OPTIONAL aMode AS Byte[])

  ' [GB2:ARRD] DIM bCmd AS Byte[14]
  DIM bCmd As New Byte[14]
  DIM b AS Byte
  DIM sText AS String

  bCmd[0] = &HD
  bCmd[1] = pTypeInterfaceControl
  bCmd[2] = sTypeInterfaceCommand
  bCmd[3] = iSeq

  SELECT sType
    CASE "RESET"
      bCmd[4] = cmdRESET
      sText = ("Reset receiver/transceiver")
    CASE "STATUS"
      bCmd[4] = cmdSTATUS
      sText = ("Get status")
    CASE "SAVE"
      bCmd[4] = cmdSAVE
      sText = ("Save")
    CASE "SETMODE"
      bCmd[4] = cmdSETMODE
      bCmd[5] = 0 ' msg1 (hardcoded to trxType43392 for now)
      bCmd[7] = aMode[0] ' msg3
      bCmd[8] = aMode[1] ' msg4
      bCmd[9] = aMode[2] ' msg5
      sText = ("Set Mode")
    CASE ELSE
      sText = ("Unknown cmd: " & sType)
      RETURN
  END SELECT

  WriteCommand(bCmd)

  IF sType = "RESET" THEN
    tRFXComTRXReset.Start
    IF Main.bRFXComTRXDebug THEN Main.WriteDebugLog(("[RFXComTRX] Resetting interface, 1Sec. timer started."))
  ENDIF
  IF sType = "STATUS" THEN bResetActive = FALSE

  IF NOT bRFXComTRXDebug THEN RETURN
  Main.WriteRFXDebugLog("[RFXComTRX] " & sText & ": ")
  FOR EACH b IN bCmd
    WriteMessage(Hex(b, 2) & " ", TRUE)
  NEXT
  Main.WriteRFXDebugLog("\n", TRUE)

CATCH ' some errors
  Main.WriteLog(("RFXCom transceiver Error: ") & ERROR.Text & " at " & ERROR.Where)

END

' ENUM TRESPONSE AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     msg = 4
' END ENUM

PUBLIC SUB Decode_RecXmitMessage()

  SELECT CASE RecBuf[2]
    CASE sTypeReceiverLockError
      WriteMessage("Subtype           = Receiver lock error")
      WriteMessage("Sequence no.      = " & CStr(RecBuf[3]))
    CASE sTypeTransmitterResponse
      WriteMessage("Subtype           = Transmitter Response")
      WriteMessage("Sequence nbr      = " & CStr(RecBuf[3]))
      SELECT CASE RecBuf[4]
        CASE &H0
          WriteMessage("Response          = ACK, data correctly transmitted")
        CASE &H1
          WriteMessage("Response          = ACK, but transmit started after 6 seconds delay anyway with RF receive data detected")
        CASE &H2
          WriteMessage("Response          = NAK, transmitter did not lock on the requested transmit frequency")
        CASE &H3
          WriteMessage("Response          = NAK, AC address zero in id1-id4 not allowed")
        CASE ELSE
          WriteMessage("ERROR: Unexpected message type=" & Hex(RecBuf[4]))
      END SELECT
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION WriteCommand(bBuffer AS Byte[])

  DIM iCnt AS Integer
  DIM sMessage AS String

  FOR iCnt = 0 TO bBuffer[0]
    sMessage &= Hex(bBuffer[iCnt], 2)
  NEXT
  IF Main.bRFXComTRXDebug THEN Main.WriteDebugLog("[RFXComTRX] > " & sMessage)

  IF sInterface = "tcp" THEN
    ' send the message to the tcp stream
    TRY bBuffer.Write(hRFXComTRX, 0, bBuffer.Length)
    IF ERROR THEN Main.WriteRFXDebugLog(("[RFXComTRX] Unable to write to TCP port! -> ") & Error.Text)
  ELSE
    ' send the message to the serial port
    TRY bBuffer.Write(hRFXComTRXSer, 0, bBuffer.Length)
    IF ERROR THEN Main.WriteRFXDebugLog(("[RFXComTRX] Unable to write to serial port! -> ") & Error.Text)
  ENDIF
  INC iSeq
  IF iSeq = 256 THEN iSeq = 1

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hRFXComTRX.Close
  TRY hRFXComTRXSer.Close
  TRY hRFXComTRXRelay.Close
  TRY tRFXComTRXConnect.Stop
  TRY tRFXComTRXReset.Stop
  TRY hRelayTRXClient.Remove

  Main.WriteLog(("RFXCom transceiver " & IIf(InStr(sInterface, "tcp"), "TCP socket", "serial port") & " close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("RFXCom transceiver Error: ") & ERROR.Text & " at " & ERROR.Where)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' inject packet into parser.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Simulate(sPacket AS String)

  DIM iCnt AS Integer

  IF bRFXComTRXDebug THEN Main.WriteRFXDebugLog(("RFXCom transceiver Simulate String: ") & sPacket & "\n")

  FOR iCnt = 1 TO Len(sPacket) STEP 2
    ProcessReceivedChar(Val("&H" & Mid(sPacket, iCnt, 2)))
  NEXT
  bSimulate = FALSE

CATCH ' some errors
  Main.WriteLog(("RFXCom transceiver Error: ") & ERROR.Text & " at " & ERROR.Where)

END

PUBLIC SUB RFXComTRX_Closed()

  Main.WriteDebugLog(("[RFXComTRX] ERROR: TCP socket closed by peer."))
  IF iConnectRetry < 6 THEN
    Main.WriteDebugLog(("[RFXComTRX] Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", ".")))
    tRFXComTRXConnect.Start
  ENDIF

END

PUBLIC SUB RFXComTRX_Error()

  DIM sString AS String = "RFXCom transceiver: "

  ' handle error
  SELECT CASE hRFXComTRX.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  END SELECT

END

PUBLIC SUB RFXComTRX_Read()

  DIM sData AS Byte

  TRY READ #hRFXComTRX, sData
  IF ERROR THEN Main.WriteDebugLog(("[RFXComTRX] Error reading data from the TCP port! -> ") & Error.Text)
  IF bSimulate = FALSE THEN ProcessReceivedChar(sData)

END

PUBLIC SUB RFXComTRXSer_Read()

  DIM sData AS Byte

  TRY READ #hRFXComTRXSer, sData
  IF ERROR THEN Main.WriteDebugLog(("[RFXComTRX] Error reading data from the serial port! -> ") & Error.Text)
  IF bSimulate = FALSE THEN ProcessReceivedChar(sData)

END

PRIVATE SUB ProcessReceivedChar(bTemp AS Byte)

  ' ignore data until interface reset
  IF bResetActive THEN RETURN

  ' relay incoming data to relay port
  IF Main.bRFXComTRXRelayEnabled THEN TRY WRITE #hRelayTRXSocket, bTemp

  Main.ControlLed("RFXCom", "On")
  IF RecBytes = 0 THEN ' 1st char of a packet received
    IF bTemp <> 0 THEN
      IF bRFXComTRXDebug THEN Main.WriteRFXDebugLog("[RFXComTRX] < ", 0)
    ELSE
      RETURN  ' ignore 1st char if 0
    ENDIF
  ENDIF

  TRY RecBuf[RecBytes] = bTemp ' store received char
  IF ERROR THEN
    RecBytes = 0 ' temp hack (overflow)
    RecBuf = NULL
    RETURN
  ENDIF
  INC RecBytes  ' increment char counter

  IF RecBytes > RecBuf[0] THEN ' all bytes of the packet received?
    IF bRFXComTRXDebug THEN Main.WriteRFXDebugLog(Hex(bTemp, 2) & "\n", 1)
    Decode_Messages()  ' decode message
    RecBytes = 0  ' set to zero to receive next message
  ELSE
    IF bRFXComTRXDebug THEN Main.WriteRFXDebugLog(Hex(bTemp, 2), 1) ' write the output to the screen
  ENDIF

END

PRIVATE SUB Decode_Messages()

  SELECT CASE RecBuf[1]
    CASE pTypeInterfaceMessage
      WriteMessage("Packettype        = Interface Message")
      Decode_InterfaceMessage()

    CASE pTypeRecXmitMessage
      WriteMessage("Packettype        = Receiver/Transmitter Message")
      Decode_RecXmitMessage()

    CASE pTypeUndecoded
      WriteMessage("Packettype        = Undecoded RF Message")
      Decode_UnDecoded()

    CASE pTypeLighting1
      WriteMessage("Packettype    = Lighting1")
      Decode_Lighting1()

    CASE pTypeLighting2
      WriteMessage("Packettype    = Lighting2")
      Decode_Lighting2()

    CASE pTypeLighting3
      WriteMessage("Packettype    = Lighting3")
      Decode_Lighting3()

    CASE pTypeLighting4
      WriteMessage("Packettype    = Lighting4")
      Decode_Lighting4()

    CASE pTypeLighting5
      WriteMessage("Packettype    = Lighting5")
      Decode_Lighting5()

    CASE pTypeLighting6
      WriteMessage("Packettype    = Lighting6")
      Decode_Lighting6()

    CASE pTypeSecurity1
      WriteMessage("Packettype    = Security1")
      Decode_Security1()

    CASE pTypeCamera1
      WriteMessage("Packettype    = Camera1")
      Decode_Camera1()

    CASE pTypeBlinds
      WriteMessage("Packettype    = Blinds1")
      Decode_Blinds1()

    CASE pTypeRemote
      WriteMessage("Packettype    = Remote control & IR")
      Decode_Remote()

    CASE pTypeThermostat1
      WriteMessage("Packettype    = Thermostat1")
      Decode_Thermostat1()

    CASE pTypeThermostat2
      WriteMessage("Packettype    = Thermostat2")
      Decode_Thermostat2()

    CASE pTypeThermostat3
      WriteMessage("Packettype    = Thermostat3")
      Decode_Thermostat3()

    CASE pTypeTEMP
      WriteMessage("Packettype    = TEMP")
      Decode_Temp()

    CASE pTypeHUM
      WriteMessage("Packettype    = HUM")
      Decode_Hum()

    CASE pTypeTEMP_HUM
      WriteMessage("Packettype    = TEMP_HUM")
      Decode_TempHum()

    CASE pTypeBARO
      WriteMessage("Packettype    = BARO")
      Decode_Baro()

    CASE pTypeTEMP_HUM_BARO
      WriteMessage("Packettype    = TEMP_HUM_BARO")
      Decode_TempHumBaro()

    CASE pTypeRAIN
      WriteMessage("Packettype    = RAIN")
      Decode_Rain()

    CASE pTypeWIND
      WriteMessage("Packettype    = WIND")
      Decode_Wind()

    CASE pTypeDT
      WriteMessage("Packettype    = DT")
      Decode_DateTime()

    CASE pTypeUV
      WriteMessage("Packettype    = UV")
      Decode_Uv()

    CASE pTypeCURRENT
      WriteMessage("Packettype    = CURRENT")
      Decode_Current()

    CASE pTypeENERGY
      WriteMessage("Packettype    = ENERGY")
      Decode_Energy()

    CASE pTypeGAS
      WriteMessage("Packettype    = GAS")
      Decode_Gas()

    CASE pTypeWATER
      WriteMessage("Packettype    = WATER")
      Decode_Water()

    CASE pTypeWEIGHT
      WriteMessage("Packettype    = WEIGHT")
      Decode_Weight()

    CASE pTypeRFXSensor
      WriteMessage("Packettype    = RFXSensor")
      Decode_RFXSensor()

    CASE pTypeRFXMeter
      WriteMessage("Packettype    = RFXMeter")
      Decode_RFXMeter()

    CASE pTypeFS20
      WriteMessage("Packettype    = FS20")
      Decode_FS20()

    CASE ELSE
      WriteMessage("ERROR: Unknown Packet type: " & Hex(RecBuf[1], 2))
      RETURN
  END SELECT

  Main.ControlLed("RFXCom", "Off")

END

PRIVATE SUB ConvertAddress(sAddr AS String) AS String

  DIM aAddress AS String[] = Split(sAddr, " ")

  IF bOldAddrFmt THEN
    RETURN UCase(aAddress[0] & "[" & Replace(aAddress[1], "0x", "") & "]")
  ELSE
    RETURN LCase(aAddress[0] & " 0x" & Hex(aAddress[1]))
  ENDIF

CATCH
  RETURN sAddr

END

' ENUM IRESPONSE AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     cmnd = 4
'     msg1 = 5
'     msg2 = 6
'     msg3 = 7
'     msg4 = 8
'     msg5 = 9
'     msg6 = 10
'     msg7 = 11
'     msg8 = 12
'     msg9 = 13
' END ENUM

PUBLIC SUB Decode_InterfaceMessage()

  SELECT CASE RecBuf[2]
    CASE sTypeInterfaceResponse
      WriteMessage("Subtype           = Interface Response")
      WriteMessage("Sequence no.      = " & CStr(RecBuf[3]))
      SELECT CASE RecBuf[4]
        CASE cmdSTATUS, cmdSETMODE, cmdSAVE, cmd310, cmd315, cmd800, cmd800F, cmd830, cmd830F, cmd835, cmd835F, cmd895
          SELECT CASE RecBuf[4]
            CASE cmdSTATUS
              WriteMessage("Response on cmnd  = Get Status")
            CASE cmdSETMODE
              WriteMessage("Response on cmnd  = Set Mode")
            CASE cmdSAVE
              WriteMessage("Response on cmnd  = Save Settings")
            CASE cmd310
              WriteMessage("Response on cmnd  = Select 310MHz")
            CASE cmd315
              WriteMessage("Response on cmnd  = Select 315MHz")
            CASE cmd800
              WriteMessage("Response on cmnd  = Select 868.00MHz")
            CASE cmd800F
              WriteMessage("Response on cmnd  = Select 868.00MHz FSK")
            CASE cmd830
              WriteMessage("Response on cmnd  = Select 868.30MHz")
            CASE cmd830F
              WriteMessage("Response on cmnd  = Select 868.30MHz FSK")
            CASE cmd835
              WriteMessage("Response on cmnd  = Select 868.35MHz")
            CASE cmd835F
             WriteMessage("Response on cmnd  = Select 868.35MHz FSK")
            CASE cmd895
              WriteMessage("Response on cmnd  = Select 868.95MHz")
            CASE ELSE
              WriteMessage("Error: unknown response")
          END SELECT
          SELECT CASE RecBuf[5]
            CASE recType310
              WriteMessage("Transceiver type  = 310MHz")
            CASE recType315
              WriteMessage("Receiver type     = 315MHz")
            CASE recType43392
              WriteMessage("Receiver type     = 433.92MHz (receive only)")
            CASE trxType43392
              WriteMessage("Transceiver type  = 433.92MHz")
            CASE recType86800
              WriteMessage("Receiver type     = 868.00MHz")
            CASE recType86800FSK
              WriteMessage("Receiver type     = 868.00MHz FSK")
            CASE recType86830
              WriteMessage("Receiver type     = 868.30MHz")
            CASE recType86830FSK
              WriteMessage("Receiver type     = 868.30MHz FSK")
            CASE recType86835
              WriteMessage("Receiver type     = 868.35MHz")
            CASE recType86835FSK
              WriteMessage("Receiver type     = 868.35MHz FSK")
            CASE recType86895
              WriteMessage("Receiver type     = 868.95MHz")
            CASE ELSE
              WriteMessage("Receiver type     = Unknown")
          END SELECT
          WriteMessage("Firmware version  = " & RecBuf[6])
          WriteMessage("Hardware version  = " & RecBuf[10] & "." & RecBuf[11])

          IF (RecBuf[7] AND msg3undec) <> 0 THEN
            WriteMessage("Undecoded         enabled")
          ELSE
            WriteMessage("Undecoded         disabled")
          ENDIF
          IF (RecBuf[9] AND msg5X10) <> 0 THEN
            WriteMessage("X10               enabled")
          ELSE
            WriteMessage("X10               disabled")
          ENDIF
          IF (RecBuf[9] AND msg5ARC) <> 0 THEN
            WriteMessage("ARC               enabled")
          ELSE
            WriteMessage("ARC               disabled")
          ENDIF
          IF (RecBuf[9] AND msg5AC) <> 0 THEN
            WriteMessage("AC                enabled")
          ELSE
            WriteMessage("AC                disabled")
          ENDIF
          IF (RecBuf[9] AND msg5HEU) <> 0 THEN
            WriteMessage("HomeEasy EU       enabled")
          ELSE
            WriteMessage("HomeEasy EU       disabled")
          ENDIF
          IF (RecBuf[9] AND msg5MEI) <> 0 THEN
            WriteMessage("Meiantech         enabled")
          ELSE
            WriteMessage("Meiantech         disabled")
          ENDIF
          IF (RecBuf[9] AND msg5OREGON) <> 0 THEN
            WriteMessage("Oregon Scientific enabled")
          ELSE
            WriteMessage("Oregon Scientific disabled")
          ENDIF
          IF (RecBuf[9] AND msg5ATI) <> 0 THEN
            WriteMessage("ATI               enabled")
          ELSE
            WriteMessage("ATI               disabled")
          ENDIF
          IF (RecBuf[9] AND msg5VISONIC) <> 0 THEN
            WriteMessage("Visonic           enabled")
          ELSE
            WriteMessage("Visonic           disabled")
          ENDIF
          IF (RecBuf[8] AND msg4MERTIK) <> 0 THEN
            WriteMessage("Mertik            enabled")
          ELSE
            WriteMessage("Mertik            disabled")
          ENDIF
          IF (RecBuf[8] AND msg4AD) <> 0 THEN
            WriteMessage("AD                enabled")
          ELSE
            WriteMessage("AD                disabled")
          ENDIF
          IF (RecBuf[8] AND msg4HID) <> 0 THEN
            WriteMessage("Hideki            enabled")
          ELSE
            WriteMessage("Hideki            disabled")
          ENDIF
          IF (RecBuf[8] AND msg4LCROS) <> 0 THEN
            WriteMessage("La Crosse         enabled")
          ELSE
            WriteMessage("La Crosse         disabled")
          ENDIF
          IF (RecBuf[8] AND msg4FS20) <> 0 THEN
            WriteMessage("FS20              enabled")
          ELSE
            WriteMessage("FS20              disabled")
          ENDIF
          IF (RecBuf[8] AND msg4PROGUARD) <> 0 THEN
            WriteMessage("ProGuard          enabled")
          ELSE
            WriteMessage("ProGuard          disabled")
          ENDIF
          IF (RecBuf[8] AND msg4BlindsT0) <> 0 THEN
            WriteMessage("BlindsT0          enabled")
          ELSE
            WriteMessage("BlindsT0          disabled")
          ENDIF
          IF (RecBuf[8] AND msg4BlindsT1) <> 0 THEN
            WriteMessage("BlindsT1          enabled")
          ELSE
            WriteMessage("BlindsT1          disabled")
          ENDIF
          IF (RecBuf[7] AND msg3AE) <> 0 THEN
            WriteMessage("AE                enabled")
          ELSE
            WriteMessage("AE                disabled")
          ENDIF
          IF (RecBuf[7] AND msg3RUBICSON) <> 0 THEN
            WriteMessage("RUBiCSON          enabled")
          ELSE
            WriteMessage("RUBiCSON          disabled")
          ENDIF
          IF (RecBuf[7] AND msg3FINEOFFSET) <> 0 THEN
            WriteMessage("FineOffset        enabled")
          ELSE
            WriteMessage("FineOffset        disabled")
          ENDIF
          IF (RecBuf[7] AND msg3RFU3) <> 0 THEN
            WriteMessage("RFU protocol 3    enabled")
          ELSE
            WriteMessage("RFU protocol 3    disabled")
          ENDIF
          IF (RecBuf[7] AND msg3RFU4) <> 0 THEN
            WriteMessage("RFU protocol 4    enabled")
          ELSE
            WriteMessage("RFU protocol 4    disabled")
          ENDIF
          IF (RecBuf[7] AND msg3RFU5) <> 0 THEN
            WriteMessage("RFU protocol 5    enabled")
          ELSE
            WriteMessage("RFU protocol 5    disabled")
          ENDIF
          IF (RecBuf[7] AND msg3RFU6) <> 0 THEN
            WriteMessage("RFU protocol 6    enabled")
          ELSE
            WriteMessage("RFU protocol 6    disabled")
          ENDIF
        CASE ELSE
          WriteMessage("ERROR: Unexpected response for Packet type=" & Hex(RecBuf[1]) & ", Sub type=" & Hex(RecBuf[2]) & " msg=" & Hex(RecBuf[4]))
          RETURN
    END SELECT
  END SELECT

END

' ENUM ICMD AS Integer
'        packetlength = 0
'        packettype = 1
'        subtype = 2
'        seqnbr = 3
'        cmnd = 4
'        msg1 = 5
'        msg2 = 6
'        msg3 = 7
'        msg4 = 8
'        msg5 = 9
'        msg6 = 10
'        msg7 = 11
'        msg8 = 12
'        msg9 = 13
'        size = 13

' ENUM UNDECODED AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     msg1 = 4
'     ' msg2 to msg32 depending on RF packet length
'     size = 36 ' maximum size
'     pType = &H3
'     sTypeUac = &H0
'     sTypeUarc = &H1
'     sTypeUati = &H2
'     sTypeUhideki = &H3
'     sTypeUlacrosse = &H4
'     sTypeUlwrf = &H5
'     sTypeUmertik = &H6
'     sTypeUoregon1 = &H7
'     sTypeUoregon2 = &H8
'     sTypeUoregon3 = &H9
'     sTypeUproguard = &HA
'     sTypeUvisonic = &HB
'     sTypeUnec = &HC
'     sTypeUfs20 = &HD
' END ENUM

PUBLIC SUB Decode_UnDecoded()

  DIM iCnt AS Integer

  WriteMessage("UnDecoded ", FALSE)
  SELECT CASE RecBuf[2]
    CASE sTypeUac
      WriteMessage("AC:", FALSE)
    CASE sTypeUarc
      WriteMessage("ARC:", FALSE)
    CASE sTypeUati
      WriteMessage("ATI:", FALSE)
    CASE sTypeUhideki
      WriteMessage("HIDEKI:", FALSE)
    CASE sTypeUlacrosse
      WriteMessage("LACROSSE:", FALSE)
    CASE sTypeUad
      WriteMessage("AD:", FALSE)
    CASE sTypeUmertik
      WriteMessage("MERTIK:", FALSE)
    CASE sTypeUoregon1
      WriteMessage("OREGON1:", FALSE)
    CASE sTypeUoregon2
      WriteMessage("OREGON2:", FALSE)
    CASE sTypeUoregon3
      WriteMessage("OREGON3:", FALSE)
    CASE sTypeUproguard
      WriteMessage("PROGUARD:", FALSE)
    CASE sTypeUvisonic
      WriteMessage("VISONIC:", FALSE)
    CASE sTypeUnec
      WriteMessage("NEC:", FALSE)
    CASE sTypeUfs20
      WriteMessage("FS20:", FALSE)
    CASE sTypeUblinds
      WriteMessage("Blinds:", FALSE)
    CASE sTypeUrubicson
      WriteMessage("RUBICSON:", FALSE)
    CASE sTypeUae
      WriteMessage("AE:", FALSE)
    CASE sTypeUfineoffset
      WriteMessage("FineOffset:", FALSE)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
  END SELECT
  FOR iCnt = 0 TO RecBuf[0] - RecBuf[4]
    WriteMessage(Hex(RecBuf[RecBuf[4] + iCnt]), FALSE)
  NEXT
  WriteMessage(" ")

END

' ENUM LIGHTING1 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     housecode = 4
'     unitcode = 5
'     cmnd = 6
'     filler = 7 'bits 3-0
'     rssi = 7   'bits 7-4
'     size = 7
' END ENUM

PUBLIC SUB Decode_Lighting1()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  ' only X10 and ARC are decoded in RFXTrx
  SELECT CASE RecBuf[2]
    CASE sTypeX10
      sType = "X10"
      WriteMessage("Subtype       = X10")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("Housecode     = " & Chr(RecBuf[4]))
      WriteMessage("Unitcode      = " & CStr(RecBuf[5]))
      sAddress = Chr(RecBuf[4]) & Format(CStr(RecBuf[5]), "00")
      SELECT CASE RecBuf[6]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H2
          sCmd = "Dim"
        CASE &H3
          sCmd = "Bright"
        CASE &H5
          sCmd = "All On"
        CASE &H6
          sCmd = "All Off"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE sTypeARC
      sType = "ARC"
      WriteMessage("Subtype       = ARC")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("Housecode     = " & Chr(RecBuf[4]))
      WriteMessage("Unitcode      = " & CStr(RecBuf[5]))
      sAddress = Chr(RecBuf[4]) & Format(CStr(RecBuf[5]), "00")
      SELECT CASE RecBuf[6]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H5
          sCmd = "All On"
        CASE &H6
          sCmd = "All Off"
        CASE &H7
          sCmd = "Chime"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[7], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM LIGHTING2 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     id4 = 7
'     unitcode = 8
'     cmnd = 9
'     level = 10
'     filler = 11 'bits 3-0
'     rssi = 11   'bits 7-4
'     size = 11
' END ENUM

PUBLIC SUB Decode_Lighting2()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeAC, sTypeHEU, sTypeANSLUT
      SELECT CASE RecBuf[2]
        CASE sTypeAC
          sType = "AC"
          WriteMessage("Subtype       = AC")
        CASE sTypeHEU
          sType = "HEEU"
          WriteMessage("Subtype       = HomeEasy EU")
        CASE sTypeANSLUT
          sType = "Anslut"
          WriteMessage("Subtype       = ANSLUT")
      END SELECT
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4]) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & Hex(RecBuf[7], 2) & " " & CStr(RecBuf[8])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[9]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H2
          sCmd = "Dim " & CStr(RecBuf[10])
        CASE &H3
          sCmd = "Group Off"
        CASE &H4
          sCmd = "Group On"
        CASE &H5
          sCmd = "Dim " & CStr(RecBuf[10])
          WriteMessage("Command       = Group " & sCmd)
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[11], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM LIGHTING3 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     system = 4
'     channel8_1 = 5
'     channel10_9 = 6
'     cmnd = 7
'     filler = 8  'bits 3-0
'     rssi = 8    'bits 7-4
'     size = 8
' END ENUM

PUBLIC SUB Decode_Lighting3()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeKoppla
      sType = "Koppla"
      WriteMessage("Subtype       = Ikea Koppla")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      SELECT CASE RecBuf[7]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H20
          sCmd = "Dim " & CStr(RecBuf[6])
        CASE &H21
          sCmd = "Program"
        CASE ELSE
          IF RecBuf[7] >= &H10 AND RecBuf[7] < &H18 THEN
            sCmd = "Dim"
          ELSE IF RecBuf[7] >= &H18 AND RecBuf[7] < &H20 THEN
            sCmd = "Bright"
          ELSE
            WriteMessage("Command       = Unknown")
            RETURN
          ENDIF
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT

  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM LIGHTING4 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     cmd1 = 4
'     cmd2 = 5
'     cmd3 = 6
'     pulsehigh = 7
'     pulselow = 8
'     filler = 9
'     size = 9
' END ENUM

PUBLIC SUB Decode_Lighting4()

  WriteMessage("Not implemented")

END

' ENUM LIGHTING5 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     unitcode = 7
'     cmnd = 8
'     level = 9
'     filler = 10 'bits 3-0
'     rssi = 10   'bits 7-4
'     size = 10
' END ENUM

PUBLIC SUB Decode_Lighting5()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeLightwaveRF
      sType = "LightwaveRF"
      WriteMessage("Subtype       = LightwaveRF")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & " " & CStr(RecBuf[7])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[8]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H2
          sCmd = "Group Off"
        CASE &H3
          sCmd = "Group Mood 1"
        CASE &H4
          sCmd = "Group Mood 2"
        CASE &H5
          sCmd = "Group Mood 3"
        CASE &H6
          sCmd = "Group Mood 4"
        CASE &H7
          sCmd = "Group Mood 5"
        CASE &HA
          sCmd = "UnLock"
        CASE &HB
          sCmd = "Lock"
        CASE &HC
          sCmd = "All Lock"
        CASE &HD
          sCmd = "Close relay"
        CASE &HE
          sCmd = "Stop relay"
        CASE &HF
          sCmd = "Open relay"
        CASE &H10
          sCmd = "Dim " & CInt(RecBuf[9] * 3.2)
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE sTypeEMW100
      sType = "EMW100"
      WriteMessage("Subtype       = EMW100")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & " " & CStr(RecBuf[7])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[8]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H2
          sCmd = "Learn"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE sTypeBBSB
      sType = "BBSB"
      WriteMessage("Subtype       = BBSB New")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & " " & CStr(RecBuf[7])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[8]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H2
          sCmd = "Group Off"
        CASE &H3
          sCmd = "Group On"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[10], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM LIGHTING6 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     groupcode = 6
'     unitcode = 7
'     cmnd = 8
'     cmndseqnbr = 9
'     rfu = 10
'     filler = 11 'bits 3-0
'     rssi = 11   'bits 7-4
'     size = 11
' END ENUM

PUBLIC SUB Decode_Lighting6()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeBlyss
      sType = "Blyss"
      WriteMessage("Subtype       = Blyss")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2)
      WriteMessage("ID            = " & sAddress)
      WriteMessage("Group code    = " & Chr(RecBuf[6]))
      WriteMessage("Unit code    = " & RecBuf[7])
      SELECT CASE RecBuf[8]
        CASE &H0
          sCmd = "Off"
        CASE &H1
          sCmd = "On"
        CASE &H2
          sCmd = "Group Off"
        CASE &H3
          sCmd = "Group On"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
      WriteMessage("Cmnd Sequence = " & RecBuf[9])
      WriteMessage("RFU           = " & RecBuf[10])
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM SECURITY1 AS Integer
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id1 = 4
'      id2 = 5
'      id3 = 6
'      status = 7
'      battery_level = 8  'bits 3-0
'      rssi = 8           'bits 7-4
'      filler = 8
'      size = 8
'  END ENUM

PUBLIC SUB Decode_Security1()

  DIM sAddress, sType, sCmd AS String
  DIM sTamper AS String = " "
  DIM sBatt AS String = "OK"
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeSecX10
      sType = "X10Security"
      WriteMessage("Subtype       = X10 security")
    CASE sTypeSecX10M
      sType = "X10Security"
      WriteMessage("Subtype       = X10 security motion")
    CASE sTypeSecX10R
      sType = "X10Security"
      WriteMessage("Subtype       = X10 security remote")
    CASE sTypeKD101
      WriteMessage("Subtype       = KD101 smoke detector")
    CASE sTypePowercodeSensor
      sType = "VisonicSensor"
      WriteMessage("Subtype       = Visonic PowerCode sensor - primary contact")
    CASE sTypePowercodeMotion
      sType = "VisonicMotion"
      WriteMessage("Subtype       = Visonic PowerCode motion")
    CASE sTypeCodesecure
      sType = "VisonicCode"
      WriteMessage("Subtype       = Visonic CodeSecure")
    CASE sTypePowercodeAux
      sType = "VisonicPwrCode"
      WriteMessage("Subtype       = Visonic PowerCode sensor - auxiliary contact")
    CASE sTypeMeiantech
      sType = "Meiantech"
      WriteMessage("Subtype       = Meiantech")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress("x10sec " & Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2))
  WriteMessage("ID1-3         = " & sAddress)

  SELECT CASE RecBuf[7]
    CASE sStatusNormal
      sCmd = "Normal"
    CASE sStatusNormalDelayed
      sCmd = "Normal Delayed"
    CASE sStatusAlarm
      sCmd = "Alarm"
    CASE sStatusAlarmDelayed
      sCmd = "Alarm Delayed"
    CASE sStatusMotion
      sCmd = "Motion"
    CASE sStatusNoMotion
      sCmd = "No Motion"
    CASE sStatusPanic
      sCmd = "Panic"
    CASE sStatusPanicOff
      sCmd = "Panic End"
    CASE sStatusTamper
      sTamper = "Tamper"
    CASE sStatusArmAway
      sCmd = "Arm Away"
    CASE sStatusArmAwayDelayed
      sCmd = "Arm Away Delayed"
    CASE sStatusArmHome
      sCmd = "Arm Home"
    CASE sStatusArmHomeDelayed
      sCmd = "Arm Home Delayed"
    CASE sStatusDisarm
      sCmd = "Disarm"
    CASE sStatusLightOff
      sCmd = "Light Off"
    CASE sStatusLightOn
      sCmd = "Light On"
    CASE sStatusLight2Off
      sCmd = "Light 2 Off"
    CASE sStatusLight2On
      sCmd = "Light 2 On"
    CASE sStatusDark
      sCmd = "Dark"
    CASE sStatusLight
      sCmd = "Light"
    CASE sStatusBatLow
      sCmd = "Battery low MS10 or XX18 sensor"
      sBatt = "Low"
    CASE sStatusPairKD101
      sCmd = "Pair KD101"
    CASE ELSE
      WriteMessage("Status        = Unknown")
      RETURN
  END SELECT
  WriteMessage("Status        = " & sCmd)
  IF (RecBuf[8] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery level = " & sBatt)
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value & battery status
  IF iDeviceId THEN
    ' cmd
    Devices.ValueUpdate(iDeviceId, sCmd, sTamper, "", "")
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM CAMERA1 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     housecode = 4
'     cmnd = 5
'     filler = 6 'bits 3-0
'     rssi = 6   'bits 7-4
'     size = 6
' END ENUM

PUBLIC SUB Decode_Camera1()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeNinja
      sType = "ninja"
      WriteMessage("Subtype       = X10 Ninja/Robocam")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = sType & " " & Chr(RecBuf[4])
      WriteMessage("Address       = " & sAddress)
      SELECT CASE RecBuf[5]
        CASE &H0
          sType = "Left"
        CASE &H1
          sType = "Right"
        CASE &H2
          sType = "Up"
        CASE &H3
          sType = "Down"
        CASE &H4
          sType = "Preset 1"
        CASE &H5
          sType = "Preset 1 Program"
        CASE &H6
          sType = "Preset 2"
        CASE &H7
          sType = "Preset 2 Program"
        CASE &H8
          sType = "Preset 3"
        CASE &H9
          sType = "Preset 3 Program"
        CASE &HA
          sType = "Preset 4"
        CASE &HB
          sType = "Preset 4 Program"
        CASE &HC
          sType = "Center"
        CASE &HD
          sType = "Center Program"
        CASE &HE
          sType = "Sweep"
        CASE &HF
          sType = "Sweep Program"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[6], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM BLINDS1 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     unitcode = 7
'     cmnd = 8
'     filler = 9 'bits 3-0
'     rssi = 9   'bits 7-4
'     size = 9
' END ENUM

PUBLIC SUB Decode_Blinds1()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeBlindsT0
      sType = "Blinds0"
      WriteMessage("Subtype       = Safy / RollerTrol / Hasta new")
    CASE sTypeBlindsT1
      sType = "Blinds1"
      WriteMessage("Subtype       = Hasta old")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = sType & " " & Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2)
  WriteMessage("Address       = " & sAddress)
  IF RecBuf[7] = 15 THEN
    WriteMessage("Unit          = All")
  ELSE
    WriteMessage("Unit          = " & RecBuf[7])
  END IF

  SELECT CASE RecBuf[8]
    CASE &H0
      sCmd = "Open"
    CASE &H1
      sCmd = "Stop"
    CASE &H2
      sCmd = "Close"
    CASE &H3
      sCmd = "Confirm"
    CASE &H4
      sCmd = "Set Limit"
    CASE ELSE
      WriteMessage("Command       = Unknown")
      RETURN
  END SELECT
  WriteMessage("Command       = " & sCmd)
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM REMOTE AS Integer
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id = 4
'      cmnd = 5
'      toggle = 6       'bit 0 
'      filler = 6       'bits 3-1 
'      rssi = 6         'bits 7-4 
'      size = 6
'  END ENUM

PUBLIC SUB Decode_Remote()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeATI
      sType = "ATI"
      WriteMessage("Subtype       = ATI Remote Wonder")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[5]
        CASE &H0
          sCmd = "A"
        CASE &H1
          sCmd = "B"
        CASE &H2
          sCmd = "Power"
        CASE &H3
          sCmd = "TV"
        CASE &H4
          sCmd = "DVD"
        CASE &H5
          sCmd = "?"
        CASE &H6
          sCmd = "Guide"
        CASE &H7
          sCmd = "Drag"
        CASE &H8
          sCmd = "VOL+"
        CASE &H9
          sCmd = "VOL-"
        CASE &HA
          sCmd = "MUTE"
        CASE &HB
          sCmd = "CHAN+"
        CASE &HC
          sCmd = "CHAN-"
        CASE &HD
          sCmd = "1"
        CASE &HE
          sCmd = "2"
        CASE &HF
          sCmd = "3"
        CASE &H10
          sCmd = "4"
        CASE &H11
          sCmd = "5"
        CASE &H12
          sCmd = "6"
        CASE &H13
          sCmd = "7"
        CASE &H14
          sCmd = "8"
        CASE &H15
          sCmd = "9"
        CASE &H16
          sCmd = "Txt"
        CASE &H17
          sCmd = "0"
        CASE &H18
          sCmd = "Snapshot ESC"
        CASE &H19
          sCmd = "C"
        CASE &H1A
          sCmd = "^"
        CASE &H1B
          sCmd = "D"
        CASE &H1C
          sCmd = "TV/RADIO"
        CASE &H1D
          sCmd = "<"
        CASE &H1E
          sCmd = "OK"
        CASE &H1F
          sCmd = ">"
        CASE &H20
          sCmd = "<-"
        CASE &H21
          sCmd = "E"
        CASE &H22
          sCmd = "v"
        CASE &H23
          sCmd = "F"
        CASE &H24
          sCmd = "Rewind"
        CASE &H25
          sCmd = "Play"
        CASE &H26
          sCmd = "Fast forward"
        CASE &H27
          sCmd = "Record"
        CASE &H28
          sCmd = "Stop"
        CASE &H29
          sCmd = "Pause"
        CASE &H2C
          sCmd = "TV"
        CASE &H2D
          sCmd = "VCR"
        CASE &H2E
          sCmd = "RADIO"
        CASE &H2F
          sCmd = "TV preview"
        CASE &H30
          sCmd = "Channel list"
        CASE &H31
          sCmd = "Video desktop"
        CASE &H32
          sCmd = "Red"
        CASE &H33
          sCmd = "Green"
        CASE &H34
          sCmd = "Yellow"
        CASE &H35
          sCmd = "Blue"
        CASE &H36
          sCmd = "Rename TAB"
        CASE &H37
          sCmd = "Acquire image"
        CASE &H38
          sCmd = "Edit image"
        CASE &H39
          sCmd = "Full screen"
        CASE &H3A
          sCmd = "DVD Audio"
        CASE &H70
          sCmd = "Cursor-left"
        CASE &H71
          sCmd = "Cursor-right"
        CASE &H72
          sCmd = "Cursor-up"
        CASE &H73
          sCmd = "Cursor-down"
        CASE &H74
          sCmd = "Cursor-up-left"
        CASE &H75
          sCmd = "Cursor-up-right"
        CASE &H76
          sCmd = "Cursor-down-right"
        CASE &H77
          sCmd = "Cursor-down-left"
        CASE &H78
          sCmd = "V"
        CASE &H79
          sCmd = "V-End"
        CASE &H7C
          sCmd = "X"
        CASE &H7D
          sCmd = "X-End"
        CASE ELSE
          sCmd = "Unknown"
          RETURN
      END SELECT
      WriteMessage("Command       = " & SCmd)
    CASE sTypeATI2
      sType = "ATI2"
      WriteMessage("Subtype       = ATI Remote Wonder II")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[5]
        CASE &H0
          sCmd = "A"
        CASE &H1
          sCmd = "B"
        CASE &H2
          sCmd = "Power"
        CASE &H3
          sCmd = "TV"
        CASE &H4
          sCmd = "DVD"
        CASE &H5
          sCmd = "?"
        CASE &H6
          sCmd = "Guide"
        CASE &H7
          sCmd = "Drag"
        CASE &H8
          sCmd = "VOL+"
        CASE &H9
          sCmd = "VOL-"
        CASE &HA
          sCmd = "MUTE"
        CASE &HB
          sCmd = "CHAN+"
        CASE &HC
          sCmd = "CHAN-"
        CASE &HD
          sCmd = "1"
        CASE &HE
          sCmd = "2"
        CASE &HF
          sCmd = "3"
        CASE &H10
          sCmd = "4"
        CASE &H11
          sCmd = "5"
        CASE &H12
          sCmd = "6"
        CASE &H13
          sCmd = "7"
        CASE &H14
          sCmd = "8"
        CASE &H15
          sCmd = "9"
        CASE &H16
          sCmd = "Txt"
        CASE &H17
          sCmd = "0"
        CASE &H18
          sCmd = "Open setup menu"
        CASE &H19
          sCmd = "C"
        CASE &H1A
          sCmd = "^"
        CASE &H1B
          sCmd = "D"
        CASE &H1C
          sCmd = "FM"
        CASE &H1D
          sCmd = "<"
        CASE &H1E
          sCmd = "OK"
        CASE &H1F
          sCmd = ">"
        CASE &H20
          sCmd = "Max/Restore window"
        CASE &H21
          sCmd = "E"
        CASE &H22
          sCmd = "V"
        CASE &H23
          sCmd = "F"
        CASE &H24
          sCmd = "Rewind"
        CASE &H25
          sCmd = "Play"
        CASE &H26
          sCmd = "Fast forward"
        CASE &H27
          sCmd = "Record"
        CASE &H28
          sCmd = "Stop"
        CASE &H29
          sCmd = "Pause"
        CASE &H2A
          sCmd = "TV2"
        CASE &H2B
          sCmd = "Clock"
        CASE &H2C
          sCmd = "I"
        CASE &H2D
          sCmd = "ATI"
        CASE &H2E
          sCmd = "RADIO"
        CASE &H2F
          sCmd = "TV preview"
        CASE &H30
          sCmd = "Channel list"
        CASE &H31
          sCmd = "Video desktop"
        CASE &H32
          sCmd = "Red"
        CASE &H33
          sCmd = "Green"
        CASE &H34
          sCmd = "Yellow"
        CASE &H35
          sCmd = "lue"
        CASE &H36
          sCmd = "Rename TAB"
        CASE &H37
          sCmd = "Acquire image"
        CASE &H38
          sCmd = "Edit image"
        CASE &H39
          sCmd = "Full screen"
        CASE &H3A
          sCmd = "DVD audio"
        CASE &H70
          sCmd = "Cursor-left"
        CASE &H71
          sCmd = "Cursor-right"
        CASE &H72
          sCmd = "Cursor-up"
        CASE &H73
          sCmd = "Cursor-down"
        CASE &H74
          sCmd = "Cursor-up-left"
        CASE &H75
          sCmd = "Cursor-up-right"
        CASE &H76
          sCmd = "Cursor-down-right"
        CASE &H77
          sCmd = "Cursor-down-left"
        CASE &H78
          sCmd = "V"
        CASE &H79
          sCmd = "V-End"
        CASE &H7C
          sCmd = "X"
        CASE &H7D
          sCmd = "X-End"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
      IF (RecBuf[6] AND &H1) = &H1 THEN
        WriteMessage("  (Button press = odd)")
      ELSE
        WriteMessage("  (Button press = even)")
      ENDIF
    CASE sTypeMedion
      sType = "MEDION"
      WriteMessage("Subtype       = Medion Remote")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[5]
        CASE &H0
          sCmd = "Mute"
        CASE &H1
          sCmd = "B"
        CASE &H2
          sCmd = "Power"
        CASE &H3
          sCmd = "TV"
        CASE &H4
          sCmd = "DVD"
        CASE &H5
          sCmd = "Photo"
        CASE &H6
          sCmd = "Music"
        CASE &H7
          sCmd = "Drag"
        CASE &H8
          sCmd = "VOL-"
        CASE &H9
          sCmd = "VOL+"
        CASE &HA
          sCmd = "MUTE"
        CASE &HB
          sCmd = "CHAN+"
        CASE &HC
          sCmd = "CHAN-"
        CASE &HD
          sCmd = "1"
        CASE &HE
          sCmd = "2"
        CASE &HF
          sCmd = "3"
        CASE &H10
          sCmd = "4"
        CASE &H11
          sCmd = "5"
        CASE &H12
          sCmd = "6"
        CASE &H13
          sCmd = "7"
        CASE &H14
          sCmd = "8"
        CASE &H15
          sCmd = "9"
        CASE &H16
          sCmd = "Txt"
        CASE &H17
          sCmd = "0"
        CASE &H18
          sCmd = "Snapshot ESC"
        CASE &H19
          sCmd = "DVD MENU"
        CASE &H1A
          sCmd = "^"
        CASE &H1B
          sCmd = "Setup"
        CASE &H1C
          sCmd = "TV/RADIO"
        CASE &H1D
          sCmd = "<"
        CASE &H1E
          sCmd = "OK"
        CASE &H1F
          sCmd = ">"
        CASE &H20
          sCmd = "<-"
        CASE &H21
          sCmd = "E"
        CASE &H22
          sCmd = "v"
        CASE &H23
          sCmd = "F"
        CASE &H24
          sCmd = "Rewind"
        CASE &H25
          sCmd = "Play"
        CASE &H26
          sCmd = "Fast forward"
        CASE &H27
          sCmd = "Record"
        CASE &H28
          sCmd = "Stop"
        CASE &H29
          sCmd = "Pause"
        CASE &H2C
          sCmd = "TV"
        CASE &H2D
          sCmd = "VCR"
        CASE &H2E
          sCmd = "RADIO"
        CASE &H2F
          sCmd = "TV preview"
        CASE &H30
          sCmd = "Channel list"
        CASE &H31
          sCmd = "Video desktop"
        CASE &H32
          sCmd = "Red"
        CASE &H33
          sCmd = "Green"
        CASE &H34
          sCmd = "Yellow"
        CASE &H35
          sCmd = "Blue"
        CASE &H36
          sCmd = "Rename TAB"
        CASE &H37
          sCmd = "Acquire image"
        CASE &H38
          sCmd = "Edit image"
        CASE &H39
          sCmd = "Full screen"
        CASE &H3A
          sCmd = "DVD audio"
        CASE &H70
          sCmd = "Cursor-left"
        CASE &H71
          sCmd = "Cursor-right"
        CASE &H72
          sCmd = "Cursor-up"
        CASE &H73
          sCmd = "Cursor-down"
        CASE &H74
          sCmd = "Cursor-up-left"
        CASE &H75
          sCmd = "Cursor-up-right"
        CASE &H76
          sCmd = "Cursor-down-right"
        CASE &H77
          sCmd = "Cursor-down-left"
        CASE &H78
          sCmd = "V"
        CASE &H79
          sCmd = "V-End"
        CASE &H7C
          sCmd = "X"
        CASE &H7D
          sCmd = "X-End"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE sTypePCremote
      sType = "PCREMOTE"
      WriteMessage("Subtype       = PC Remote")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteMessage("ID            = " & sAddress)
      SELECT CASE RecBuf[5]
        CASE &H2
          sCmd = "0"
        CASE &H82
          sCmd = "1"
        CASE &HD1
          sCmd = "MP3"
        CASE &H42
          sCmd = "2"
        CASE &HD2
          sCmd = "DVD"
        CASE &HC2
          sCmd = "3"
        CASE &HD3
          sCmd = "CD"
        CASE &H22
          sCmd = "4"
        CASE &HD4
          sCmd = "PC"
        CASE &HA2
          sCmd = "5"
        CASE &HD5
          sCmd = "SHIFT-5"
        CASE &H62
          sCmd = "6"
        CASE &HE2
          sCmd = "7"
        CASE &H12
          sCmd = "8"
        CASE &H92
          sCmd = "9"
        CASE &HC0
          sCmd = "CH-"
        CASE &H40
          sCmd = "CH+"
        CASE &HE0
          sCmd = "VOL-"
        CASE &H60
          sCmd = "VOL+"
        CASE &HA0
          sCmd = "MUTE"
        CASE &H3A
          sCmd = "INFO"
        CASE &H38
          sCmd = "REW"
        CASE &HB8
          sCmd = "FF"
        CASE &HB0
          sCmd = "PLAY"
        CASE &H64
          sCmd = "PAUSE"
        CASE &H63
          sCmd = "STOP"
        CASE &HB6
          sCmd = "MENU"
        CASE &HFF
          sCmd = "REC"
        CASE &HC9
          sCmd = "EXIT"
        CASE &HD8
          sCmd = "TEXT"
        CASE &HD9
          sCmd = "SHIFT-TEXT"
        CASE &HF2
          sCmd = "TELETEXT"
        CASE &HD7
          sCmd = "SHIFT-TELETEXT"
        CASE &HBA
          sCmd = "A+B"
        CASE &H52
          sCmd = "ENT"
        CASE &HD6
          sCmd = "SHIFT-ENT"
        CASE &H70
          sCmd = "Cursor-left"
        CASE &H71
          sCmd = "Cursor-right"
        CASE &H72
          sCmd = "Cursor-up"
        CASE &H73
          sCmd = "Cursor-down"
        CASE &H74
          sCmd = "Cursor-up-left"
        CASE &H75
          sCmd = "Cursor-up-right"
        CASE &H76
          sCmd = "Cursor-down-right"
        CASE &H77
          sCmd = "Cursor-down-left"
        CASE &H78
          sCmd = "Left mouse"
        CASE &H79
          sCmd = "Left mouse-End"
        CASE &H7B
          sCmd = "Drag"
        CASE &H7C
          sCmd = "Right mouse"
        CASE &H7D
          sCmd = "Right mouse-End"
        CASE ELSE
          WriteMessage("Command       = Unknown")
          RETURN
      END SELECT
      WriteMessage("Command       = " & sCmd)
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1], 2) & ":" & Hex(RecBuf[2], 2))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[6], 4)))
  iDeviceId = Devices.Find("default", Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

PUBLIC SUB Decode_FS20()

  WriteMessage("Not implemented yet")

END

' ENUM THERMOSTAT1 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperature = 6
'     set_point = 7
'     status = 8  'bits 1-0
'     filler = 8  'bits 6-2
'     mode = 8    'bit 7
'     battery_level = 9   'bits 3-0
'     rssi = 9            'bits 7-4
'     size = 9
' END ENUM

PUBLIC SUB Decode_Thermostat1()

  DIM sAddress, sType, sTemp, sSetTemp, sCmd, sStatus AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeDigimax
      sType = "Digimax"
      WriteMessage("Subtype       = Digimax")
    CASE sTypeDigimaxShort
      sType = "Digimax"
      WriteMessage("Subtype       = Digimax with short format")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(CStr(RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  sTemp = CStr(RecBuf[6])
  WriteMessage("Temperature   = " & sTemp & " °C")
  IF RecBuf[2] = sTypeDigimax THEN
    sSetTemp = CStr(RecBuf[7])
    WriteMessage("Set           = " & sSetTemp & " °C")
    IF (RecBuf[8] AND &H80) = 0 THEN
      sCmd = "Heating"
    ELSE
      sCmd = "Cooling"
    ENDIF
    WriteMessage("Mode          = " & sCmd)
    SELECT CASE (RecBuf[8] AND &H3)
      CASE 0
        sStatus = "Not Available"
      CASE 1
        sStatus = "Demand"
      CASE 2
        sStatus = "No demand"
      CASE 3
        sStatus = "Initializing"
    END SELECT
    WriteMessage("Status        = " & sStatus)
  ENDIF
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sSetTemp, sTemp, sCmd, sStatus)

END

' ENUM THERMOSTAT2 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     unitcode = 4
'     cmnd = 5
'     filler = 6  'bits 3-0
'     rssi = 6    'bits 7-4
'     size = 6
' END ENUM

PUBLIC SUB Decode_Thermostat2()

  WriteMessage("Not implemented")

END

' ENUM THERMOSTAT3 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     unitcode1 = 4
'     unitcode2 = 5
'     unitcode3 = 6
'     cmnd = 7
'     filler = 9   'bits 3-0
'     rssi = 9     'bits 7-4
'     size = 9
' END ENUM

PUBLIC SUB Decode_Thermostat3()

  DIM sAddress, sType, sCmd AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeMertikG6RH4T1
      sType = "MERTIKG6R-H4T1"
      WriteMessage("Subtype       = Mertik G6R-H4T1")
    CASE sTypeMertikG6RH4TB
      sType = "MERTIKG6R-H4TB"
      WriteMessage("Subtype       = Mertik G6R-H4TB")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence nbr  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2))
  WriteMessage("ID            = " & sAddress)
  SELECT CASE RecBuf[7]
    CASE 0
      sCmd = "Off"
    CASE 1
      sCmd = "On"
    CASE 2
      sCmd = "Up"
    CASE 3
      sCmd = "Down"
    CASE 4
      IF RecBuf[2] = sTypeMertikG6RH4T1 THEN
        sCmd = "Run Up"
      ELSE
        sCmd = "2nd Off"
      ENDIF
    CASE 5
      IF RecBuf[2] = sTypeMertikG6RH4T1 THEN
        sCmd = "Run Down"
      ELSE
        sCmd = "2nd On"
      ENDIF
    CASE 6
      IF RecBuf[2] = sTypeMertikG6RH4T1 THEN
        sCmd = "Stop"
      ELSE
        WriteMessage("Command       = Unknown")
        RETURN
      ENDIF
    CASE ELSE
      WriteMessage("Command       = Unknown")
      RETURN
  END SELECT
  WriteMessage("Command       = " & sCmd)
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, sCmd, "", "", "")

END

' ENUM RAIN AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     rainrateh = 6
'     rainratel = 7
'     raintotal1 = 8
'     raintotal2 = 9
'     raintotal3 = 10
'     battery_level = 11  'bits 3-0
'     rssi = 11           'bits 7-4
'     size = 11
' END ENUM

PRIVATE SUB Decode_Rain()

  DIM sAddress, sType, sTemp, sRainRate, sRainTotal, sBatt AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeRAIN1
      sType = "rain1"
      WriteMessage("Subtype       = RAIN1 - RGR126/682/918")
    CASE sTypeRAIN2
      sType = "rain2"
      WriteMessage("Subtype       = RAIN2 - PCR800")
    CASE sTypeRAIN3
      sType = "rain3"
      WriteMessage("Subtype       = RAIN3 - TFA")
    CASE sTypeRAIN4
      sType = "rain4"
      WriteMessage("Subtype       = RAIN4 - UPM RG700")
    CASE sTypeRAIN5
      sType = "rain5"
      WriteMessage("Subtype       = RAIN5 - LaCrosse WS2300")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  IF RecBuf[2] = sTypeRAIN1 THEN
    sRainRate = CStr((RecBuf[6] * 256) + RecBuf[7])
    WriteMessage("Rain rate     = " & sRainRate & " mm/h")
  ELSE
    sRainRate = CStr(((RecBuf[6] * 256) + RecBuf[7]) / 100)
    WriteMessage("Rain rate     = " & sRainRate & " mm/h")
  ENDIF
  sRainTotal = CStr(((RecBuf[8] * 65535) + RecBuf[9] * 256 + RecBuf[10]) / 10)
  WriteMessage("Total rain    = " & sRainTotal & " mm")
  WriteMessage("Signal level  = " & Lsr(RecBuf[11], 4))
  IF (Recbuf[11] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values & battery status
  IF iDeviceId THEN
    ' rain rate mm/hr, total rain mm
    Devices.ValueUpdate(iDeviceId, Format(CStr(sRainRate), "#0.00"), Format(CStr(sRainTotal), "#0.00"), "", "")
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM Temp AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperatureh = 6    'bits 6-0
'     tempsign = 6        'bit 7
'     temperaturel = 7
'     battery_level = 8   'bits 3-0
'     rssi = 8            'bits 7-4
'     size = 8
' END ENUM

PUBLIC SUB Decode_Temp()

  DIM sAddress, sType, sTemp, sBatt AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeTEMP1
      sType = "temp1"
      WriteMessage("Subtype       = TEMP1 - THR128/138, THC138")
    CASE sTypeTEMP2
      sType = "temp2"
      WriteMessage("Subtype       = TEMP2 - THC238/268,THN132,THWR288,THRN122,THN122,AW129/131")
    CASE sTypeTEMP3
      sType = "temp3"
      WriteMessage("Subtype       = TEMP3 - THWR800")
    CASE sTypeTEMP4
      sType = "temp4"
      WriteMessage("Subtype       = TEMP4 - RTHN318")
    CASE sTypeTEMP5
      sType = "temp5"
      WriteMessage("Subtype       = TEMP5 - LaCrosse TX3, TX4, TX17")
    CASE sTypeTEMP6
      sType = "temp6"
      WriteMessage("Subtype       = TEMP6 - TS15C")
    CASE sTypeTEMP7
      sType = "temp7"
      WriteMessage("Subtype       = TEMP7 - Viking 02811")
    CASE sTypeTEMP8
      sType = "temp8"
      WriteMessage("Subtype       = TEMP8 - LaCrosse WS2300")
    CASE sTypeTEMP9
      sType = "temp9"
      WriteMessage("Subtype       = TEMP9 - RUBiCSON")
    CASE sTypeTEMP10
      sType = "temp10"
      WriteMessage("Subtype       = TEMP10 - TFA 30.3133")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  WriteMessage("ID            = " & sAddress)
  IF (RecBuf[6] AND &H80) = 0 THEN
    sTemp = CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
  ELSE
    sTemp = "-" & CStr(((RecBuf[6] AND &H7F) * 256 + RecBuf[7]) / 10)
  ENDIF
  WriteMessage("Temperature   = " & sTemp & " °C")
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  IF (RecBuf[8] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery       = OK")
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value & battery status
  IF iDeviceId THEN
    IF Main.sTemperature = "°C" THEN
      ' temp °C
      Devices.ValueUpdate(iDeviceId, Format(CStr(sTemp), "#0.#"), "", "", "")
    ELSE
      ' temp °F
      Devices.ValueUpdate(iDeviceId, Format(CStr(sTemp * 1.8 + 32), "##.##"), "", "", "")
    ENDIF
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM TEMP_HUM AS Integer
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id1 = 4
'      id2 = 5
'      humidity = 6
'      humidity_status = 7
'      battery_level = 8  'bits 3-0
'      rssi = 8           'bits 7-4
'      size = 8
'  END ENUM

PUBLIC SUB Decode_Hum()

  DIM sAddress, sType, sBatt, sHumid, sComfort AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeHUM1
      sType = "hum1"
      WriteMessage("Subtype       = HUM1 - LaCrosse TX3")
    CASE sTypeHUM2
      sType = "hum2"
      WriteMessage("Subtype       = HUM2 - LaCrosse WS2300")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  sHumid = RecBuf[6]
  WriteMessage("Humidity      = " & sHumid & " %")
  SELECT CASE RecBuf[7]
    CASE &H0
      sComfort = "Dry"
    CASE &H1
      sComfort = "Comfort"
    CASE &H2
      sComfort = "Normal"
    CASE &H3
      sComfort = "Wet"
  END SELECT
  WriteMessage("Status        = " & sComfort)
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  IF (RecBuf[8] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value & battery status
  IF iDeviceId THEN
    ' humid %
    Devices.ValueUpdate(iDeviceId, sHumid, sComfort, "", "")
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM TEMP_HUM AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperatureh = 6    'bits 6-0
'     tempsign = 6        'bit 7
'     temperaturel = 7
'     humidity = 8
'     humidity_status = 9
'     battery_level = 10  'bits 3-0
'     rssi = 10           'bits 7-4
'     size = 10
' END ENUM

PRIVATE SUB Decode_TempHum()

  DIM sAddress, sType, sBatt, sTemp, sHumid, sComfort AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeTH1
      WriteMessage("Subtype       = TH1 - THGN122/123/132,THGR122/228/238/268")
      sType = "th1"
    CASE sTypeTH2
      WriteMessage("Subtype       = TH2 - THGR810")
      sType = "th2"
    CASE sTypeTH3
      WriteMessage("Subtype       = TH3 - RTGR328")
      sType = "th3"
    CASE sTypeTH4
      WriteMessage("Subtype       = TH4 - THGR328")
      sType = "th4"
    CASE sTypeTH5
      WriteMessage("Subtype       = TH5 - WTGR800")
      sType = "th5"
    CASE sTypeTH6
      WriteMessage("Subtype       = TH6 - THGR918,THGRN228,THGN500")
      sType = "th6"
    CASE sTypeTH7
      WriteMessage("Subtype       = TH7 - TFA TS34C")
      sType = "th7"
    CASE sTypeTH8
      WriteMessage("Subtype       = TH8 - ESIC WT440H/450H")
      sType = "th8"
    CASE sTypeTH9
      WriteMessage("Subtype       = TH9 - Viking 02038, 02035 (02035 has no humidity)")
      sType = "th9"
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & RecBuf[3])
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  IF (RecBuf[6] AND &H80) = 0 THEN
    sTemp = CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
  ELSE
    sTemp = "-" & CStr(((RecBuf[6] AND &H7F) * 256 + RecBuf[7]) / 10)
  ENDIF
  WriteMessage("Temperature   = " & sTemp & " °C")
  sHumid = RecBuf[8]
  WriteMessage("Humidity      = " & sHumid & " %")
  SELECT CASE RecBuf[9]
    CASE &H0
      sComfort = "Dry"
    CASE &H1
      sComfort = "Comfort"
    CASE &H2
      sComfort = "Normal"
    CASE &H3
      sComfort = "Wet"
  END SELECT
  WriteMessage("Status        = " & sComfort)
  WriteMessage("Signal level  = " & Lsr(RecBuf[10], 4))
  IF RecBuf[2] = sTypeTH6 THEN
    sBatt = (RecBuf[10] * 10) + 10
  ELSE
    IF (RecBuf[10] AND &HF) = 0 THEN
      sBatt = "Low"
    ELSE
      sBatt = "OK"
    ENDIF
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value & battery status
  IF iDeviceId THEN
    IF Main.sTemperature = "°C" THEN
      ' temp °C
      Devices.ValueUpdate(iDeviceId, Format(CStr(sTemp), "#0.#"), sHumid, sComfort, "")
    ELSE
      ' temp °F
      Devices.ValueUpdate(iDeviceId, Format(CStr(sTemp * 1.8 + 32), "##.##"), sHumid, sComfort, "")
    ENDIF
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM TEMP_HUM_BARO AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperatureh = 6    'bits 6-0
'     tempsign = 6        'bit 7
'     temperaturel = 7
'     humidity = 8
'     humidity_status = 9
'     baroh = 10
'     barol = 11
'     forecast = 12
'     battery_level = 13  'bits 3-0
'     rssi = 13           'bits 7-4
'     size = 13
' END ENUM

PUBLIC SUB Decode_TempHumBaro()

  DIM sAddress, sType, sBatt, sTemp, sHumid, sComfort, sBaro, sForecast AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeTH1
      sType = "thb1"
      WriteMessage("Subtype       = THB1 - BTHR918")
    CASE sTypeTH2
      sType = "thb2"
      WriteMessage("Subtype       = THB2 - BTHR918N, BTHR968")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  IF (RecBuf[6] AND &H80) = 0 THEN
    sTemp = CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
    WriteMessage("Temperature   = " & sTemp & " °C")
  ELSE
    sTemp = "-" & CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
    WriteMessage("Temperature   = " & sTemp & " °C")
  ENDIF
  sHumid = CStr(RecBuf[8])
  WriteMessage("Humidity      = " & sHumid & " %")
  SELECT CASE RecBuf[9]
    CASE &H0
      sComfort = "Status        = Dry"
    CASE &H1
      sComfort = "Status        = Comfort"
    CASE &H2
      sComfort = "Status        = Normal"
    CASE &H3
      sComfort = "Status        = Wet"
  END SELECT

  sBaro = CStr(RecBuf[10] * 256 + RecBuf[11])
  WriteMessage("Barometer     = " & sBaro)
  SELECT CASE RecBuf[12]
    CASE &H0
      sForecast = "No Info Avail"
    CASE &H1
      sForecast = "Sunny"
    CASE &H2
      sForecast = "Partly Cloudy"
    CASE &H3
      sForecast = "Cloudy"
    CASE &H4
      sForecast = "Rain"
  END SELECT
  WriteMessage("Forecast      = " & sForecast)
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[13], 4)))
  IF (RecBuf[13] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values & battery status
  IF iDeviceId THEN
    IF Main.sTemperature = "°C" THEN
      ' temp °C, hum %, baro hPa, forecast
      Devices.ValueUpdate(iDeviceId, Format(CStr(sTemp), "#0.#"), sHumid, sBaro, sForecast)
    ELSE
      ' temp °F, hum %, baro hPa, forecast
      Devices.ValueUpdate(iDeviceId, Format(CStr(sTemp * 1.8 + 32), "#0.#"), sHumid, sBaro, sForecast)
    ENDIF
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM UV AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     uv = 6
'     temperatureh = 7    'bits 6-0
'     tempsign = 7        'bit 7
'     temperaturel = 8
'     battery_level = 9   'bits 3-0
'     rssi = 9            'bits 7-4
'     size = 9
' END ENUM

PUBLIC SUB Decode_Uv()

  DIM sAddress, sType, sBatt, sLevel, sStatus, sTemp AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeUV1
      sType = "uv1"
      WriteMessage("Subtype       = UV1 - UVN128, UV138")
    CASE sTypeUV2
      sType = "uv2"
      WriteMessage("Subtype       = UV2 - UVN800")
    CASE sTypeUV3
      sType = "uv3"
      WriteMessage("Subtype       = UV3 - TFA")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  WriteMessage("ID            = " & sAddress)

  IF RecBuf[2] = sTypeUV3 THEN
    IF (RecBuf[7] AND &H80) = 0 THEN
      sTemp = Round((RecBuf[7] * 256 + RecBuf[8]) / 10)
    ELSE
      sTemp = "-" & Round(((RecBuf[7] AND &H7F) * 256 + RecBuf[8]) / 10)
    ENDIF
    WriteMessage("Temperature   = " & sTemp & " °C")
  ENDIF

  sLevel = CStr(RecBuf[6])
  WriteMessage("Level         = " & sLevel)
  IF RecBuf[6] < 3 THEN
    sStatus = "Low"
  ELSE IF RecBuf[6] < 6
    sStatus = "Medium"
  ELSE IF RecBuf[6] < 8
    sStatus = "High"
  ELSE IF RecBuf[6] < 11
    sStatus = "Very High"
  ELSE
    sStatus = "Dangerous"
  ENDIF
  WriteMessage("Status        = " & sStatus)
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  IF (RecBuf[9] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sbatt = "OK"
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values & battery status
  IF iDeviceId THEN
    ' uv level, status and temp if TFA
    Devices.ValueUpdate(iDeviceId, sLevel, sStatus, sTemp, "")
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

PUBLIC SUB Decode_Baro()

  WriteMessage("Not implemented")

END

PRIVATE SUB WriteMessage(sText AS String, OPTIONAL bNoReturn AS Boolean)

  IF bRFXComTRXDebug THEN
    IF bNoReturn THEN
      Main.WriteRFXDebugLog(sText, TRUE)
    ELSE
      Main.WriteDebugLog("[RFXComTRX] " & sText)
    ENDIF
  ENDIF

END

' ENUM WIND AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     directionh = 6
'     directionl = 7
'     av_speedh = 8
'     av_speedl = 9
'     gusth = 10
'     gustl = 11
'     temperatureh = 12   'bits 6-0
'     tempsign = 12       'bit 7
'     temperaturel = 13
'     chillh = 14         'bits 6-0
'     chillsign = 14      'bit 7
'     chilll = 15
'     battery_level = 16  'bits 3-0
'     rssi = 16           'bits 7-4
'     size = 16
' END ENUM

PUBLIC SUB Decode_Wind()

  DIM sAddress, sAddressTemp, sType, sBatt, sDirection, sDirectionDescr, sAvgSpeed, sWindGust, sTemp, sChill AS String
  DIM iDeviceId AS Integer
  DIM bTemp AS Boolean

  SELECT CASE RecBuf[2]
    CASE sTypeWIND1
      sType = "wind1"
      WriteMessage("Subtype       = WIND1 - WTGR800")
    CASE sTypeWIND2
      sType = "wind2"
      WriteMessage("Subtype       = WIND2 - WGR800")
    CASE sTypeWIND3
      sType = "wind3"
      WriteMessage("Subtype       = WIND3 - STR918, WGR918")
    CASE sTypeWIND4
      sType = "wind4"
      WriteMessage("Subtype       = WIND4 - TFA")
    CASE sTypeWIND5
      sType = "wind5"
      WriteMessage("Subtype       = WIND5 - UPM WDS500")
    CASE sTypeWIND6
      sType = "wind6"
      WriteMessage("Subtype       = WIND5 - LaCrosse WS2300")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  sDirection = CStr((RecBuf[6] * 256) + RecBuf[7])
  WriteMessage("Direction     = " & sDirection & " degrees")
  sDirectionDescr = WindDirection(sDirection)
  WriteMessage("Direction Desc= " & sDirectionDescr)

  ' TOFIX
  ' intSpeed = (recbuf(WIND.av_speedh) * 256) + recbuf(WIND.av_speedl)
  ' IF recbuf(WIND.subtype) <> WIND.WIND5 THEN
  '     WriteMessage("Average speed = " & (intSpeed / 10).ToString & " mtr/sec = " & Math.Round((intSpeed * 0.36), 2).ToString & " km/hr = " & Math.Round((intSpeed * 0.223693629) / 10, 2).ToString & " mph")
  ' END IF
  ' intSpeed = (recbuf(WIND.gusth) * 256) + recbuf(WIND.gustl)
  ' WriteMessage("Wind gust     = " & (intSpeed / 10).ToString & " mtr/sec = " & Math.Round((intSpeed * 0.36), 2).ToString & " km/hr = " & Math.Round((intSpeed * 0.223693629) / 10, 2).ToString & " mph")

  IF RecBuf[2] <> sTypeWIND5 THEN
    sAvgSpeed = CStr(((RecBuf[8] * 256) + RecBuf[9])) * 0.36
    WriteMessage("Average speed = " & sAvgSpeed & " mtr/sec")
  ENDIF
  sWindGust = CStr(((RecBuf[10] * 256) + RecBuf[11])) * 0.36
  WriteMessage("Wind gust     = " & sWindGust & " mtr/sec")
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[16], 4)))

  IF RecBuf[2] = sTypeWIND4 THEN
    sAddressTemp = ConvertAddress(sType & "-temp " & (RecBuf[4] * 256 + RecBuf[5]))
    bTemp = TRUE
    IF (RecBuf[12] AND &H80) = 0 THEN
      sTemp = Round((RecBuf[12] * 256 + RecBuf[13]) / 10)
    ELSE
      sTemp = "-" & Round(((RecBuf[12] AND &H7F) * 256 + RecBuf[13]) / 10)
    ENDIF
    WriteMessage("Temperature   = " & sTemp & " °C")
    IF (RecBuf[14] AND &H80) = 0 THEN
      sChill = Round((RecBuf[14] * 256 + RecBuf[15]) / 10)
    ELSE
      sChill = "-" & Round(((RecBuf[14] AND &H7F) * 256 + RecBuf[15]) / 10)
    ENDIF
    WriteMessage("Chill         = " & sChill & " °C")
  ENDIF
  IF RecBuf[2] = sTypeWIND3 THEN
    sBatt = (RecBuf[16] * 10) + 10
  ELSE
    IF (RecBuf[16] AND &HF) = 0 THEN
      sBatt = "Low"
    ELSE
      sBatt = "OK"
    ENDIF
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  ' find device id
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values & battery status
  IF iDeviceId THEN
    ' direction °, direction text, speed m/s, avg speed m/s
    Devices.ValueUpdate(iDeviceId, sDirection, sDirectionDescr, Format(sWindGust, "#0.##"), Format(sAvgSpeed, "#0.##"))
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

  IF bTemp THEN ' packet has tfa temp data
    ' find second device for TFA temp
    iDeviceId = Devices.Find(sAddressTemp, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
    ' update values & battery status
    IF iDeviceId THEN
      ' temp, chill
      Devices.ValueUpdate(iDeviceId, sTemp, sChill, "", "")
      Devices.Battery(iDeviceId, sBatt)
    ENDIF
  ENDIF

END

PRIVATE SUB WindDirection(sDirection AS String) AS String

  DIM sDir AS String
  DIM iDirection AS Integer

  iDirection = Val(sDirection)
  IF iDirection > 348.75 OR iDirection < 11.26 THEN
    sDir = "N"
  ELSE IF iDirection < 33.76 THEN
    sDir = "NNE"
  ELSE IF iDirection < 56.26 THEN
    sDir = "NE"
  ELSE IF iDirection < 78.76 THEN
    sDir = "ENE"
  ELSE IF iDirection < 101.26 THEN
    sDir = "E"
  ELSE IF iDirection < 123.76 THEN
    sDir = "ESE"
  ELSE IF iDirection < 146.26 THEN
    sDir = "SE"
  ELSE IF iDirection < 168.76 THEN
    sDir = "SSE"
  ELSE IF iDirection < 191.26 THEN
    sDir = "S"
  ELSE IF iDirection < 213.76 THEN
    sDir = "SSW"
  ELSE IF iDirection < 236.26 THEN
    sDir = "SW"
  ELSE IF iDirection < 258.76 THEN
    sDir = "WSW"
  ELSE IF iDirection < 281.26 THEN
    sDir = "W"
  ELSE IF iDirection < 303.76 THEN
    sDir = "WNW"
  ELSE IF iDirection < 326.26 THEN
    sDir = "NW"
  ELSE
    sDir = "NNW"
  END IF
  RETURN sDir

END

' ENUM DT AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     yy = 6
'     mm = 7
'     dd = 8
'     dow = 9
'     hr = 10
'     Min = 11
'     sec = 12
'     battery_level = 13  'bits 3-0
'     rssi = 13           'bits 7-4
'     size = 13
' END ENUM

PUBLIC SUB Decode_DateTime()

  WriteMessage("Not implemented")

END

' ENUM CURRENT AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     count = 6
'     ch1h = 7
'     ch1l = 8
'     ch2h = 9
'     ch2l = 10
'     ch3h = 11
'     ch3l = 12
'     battery_level = 13  'bits 3-0
'     rssi = 13           'bits 7-4
'     size = 13
' END ENUM

PUBLIC SUB Decode_Current()

  DIM sAddress, sType, sBatt, sCt1, sCt2, sCt3 AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeELEC1
      sType = "elec1"
      WriteMessage("Subtype       = ELEC1 - OWL CM113, Electrisave, cent-a-meter")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  WriteMessage("Count         = " & CStr(RecBuf[6]))
  sCt1 = CStr(((RecBuf[7] * 256) + RecBuf[8]) / 10)
  WriteMessage("Channel 1     = " & sCt1 & " ampere")
  sCt2 = CStr(((RecBuf[9] * 256) + RecBuf[10]) / 10)
  WriteMessage("Channel 2     = " & sCt2 & " ampere")
  sCt3 = CStr(((RecBuf[11] * 256) + RecBuf[12]) / 10)
  WriteMessage("Channel 3     = " & sCt3 & " ampere")
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[13], 4)))
  IF (RecBuf[13] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values & battery status
  IF iDeviceId THEN
    ' ct1 amp, ct2 amp, ct3 amp
    Devices.ValueUpdate(iDeviceId, Format(sCt1, "##.###"), Format(sCt2, "##.###"), Format(sCt3, "##.###"), "")
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

' ENUM ENERGY AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     count = 6
'     instant1 = 7
'     instant2 = 8
'     instant3 = 9
'     instant4 = 10
'     total1 = 11
'     total2 = 12
'     total3 = 13
'     total4 = 14
'     total5 = 15
'     total6 = 16
'     battery_level = 17  'bits 3-0
'     rssi = 17           'bits 7-4
'     size = 17
' END ENUM

PUBLIC SUB Decode_Energy()

  DIM sAddress, sBatt, sType, sInstantUsage, sTotalUsage AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeELEC2
      sType = "elec2"
      WriteMessage("Subtype       = ELEC2 - OWL CM119, CM160")
    CASE sTypeELEC3
      sType = "elec3"
      WriteMessage("Subtype       = ELEC3 - OWL CM180")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  sInstantUsage = CStr(RecBuf[7] * 16777216 + RecBuf[8] * 65536 + RecBuf[9] * 256 + RecBuf[10])
  WriteMessage("Count         = " & CStr(RecBuf[6]))
  WriteMessage("Instant usage = " & sInstantUsage & " Watt")
  sTotalUsage = CStr(RecBuf[11] * 1099511627776 + RecBuf[12] * 4294967296 + RecBuf[13] * 16777216 + RecBuf[14] * 65536 + RecBuf[15] * 256 + RecBuf[16])
  WriteMessage("Total usage   = " & sTotalUsage & " Wh")
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[17], 4)))
  IF (RecBuf[17] AND &HF) = 0 THEN
    sBatt = "Low"
  ELSE
    sBatt = "OK"
  ENDIF
  WriteMessage("Battery       = " & sBatt)
  ' find device id
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update values & battery status
  IF iDeviceId THEN
    ' power usage total in Wh and now in Watt
    Devices.ValueUpdate(iDeviceId, Format(sTotalUsage, "##.###"), sInstantUsage, "", "")
    Devices.Battery(iDeviceId, sBatt)
  ENDIF

END

PUBLIC SUB Decode_Gas()

  WriteMessage("Not implemented")

END

PUBLIC SUB Decode_Water()

  WriteMessage("Not implemented")

END

' ENUM WEIGHT AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     weighthigh = 6
'     weightlow = 7
'     filler = 8   'bits 3-0
'     rssi = 8            'bits 7-4
'     size = 8
' END ENUM

PUBLIC SUB Decode_Weight()

  DIM sAddress, sBatt, sType, sWeight AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeWEIGHT1
      sType = "weight1"
      WriteMessage("Subtype       = BWR101/BWR102")
    CASE sTypeWEIGHT2
      sType = "weight2"
      WriteMessage("Subtype       = GR101")
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteMessage("ID            = " & sAddress)
  sWeight = CStr((RecBuf[6] * 25.6) + RecBuf[7] / 10)
  WriteMessage("Weight        = " & sWeight & " kg")
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
  ' update value in kg
  IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, Format(sWeight, "##.###"), "", "", "")

END

' ENUM RFXSENSOR AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id = 4
'     msg1 = 5
'     msg2 = 6
'     filler = 7  'bits 3-0
'     rssi = 7    'bits 7-4
'     size = 7
' END ENUM

PUBLIC SUB Decode_RFXSensor()

  DIM sAddress, sBatt, sType, sSubType, sValue AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeRFXSensorTemp
      sType = "rfxsensor"
      sSubType = "temp"
      WriteMessage("Subtype       = Temperature")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("ID            = " & sAddress)
      sValue = CStr((RecBuf[5] * 256 + RecBuf[6]) / 100)
      WriteMessage("Msg           = " & sValue & " °C")
    CASE sTypeRFXSensorAD
      sType = "rfxsensor"
      sSubType = "ad"
      WriteMessage("Subtype       = A/D")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("ID            = " & sAddress)
      sValue = CStr(RecBuf[5] * 256 + RecBuf[6])
      WriteMessage("Msg           = " & sValue & " mV")
    CASE sTypeRFXSensorVolt
      sType = "rfxsensor"
      sSubType = "volt"
      WriteMessage("Subtype       = Voltage")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("ID            = " & sAddress)
      sValue = CStr(RecBuf[5] * 256 + RecBuf[6])
      WriteMessage("Msg           = " & sValue & " mV")
    CASE sTypeRFXSensorMessage
      WriteMessage("Subtype       = Message")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & CStr(RecBuf[4]))
      SELECT CASE RecBuf[6]
        CASE &H1
          WriteMessage("Msg           = sensor addresses incremented")
        CASE &H2
          WriteMessage("Msg           = battery low detected")
        CASE &H81
          WriteMessage("Msg           = no 1-wire device connected")
        CASE &H82
          WriteMessage("Msg           = 1-Wire ROM CRC error")
        CASE &H83
          WriteMessage("Msg           = 1-Wire device connected is not a DS18B20 or DS2438")
        CASE &H84
          WriteMessage("Msg           = no end of read signal received from 1-Wire device")
        CASE &H85
          WriteMessage("Msg           = 1-Wire scratchpad CRC error")
        CASE ELSE
          WriteMessage("ERROR: Unknown message")
          RETURN
      END SELECT
      WriteMessage("Msg           = " & CStr(RecBuf[5] * 256 + RecBuf[6]))
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & CStr(Lsr(RecBuf[7], 4)))

  SELECT CASE sSubType
    CASE "ad", "volt"
      iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType) & " " & UCase(sSubType))
      ' update value in mV
      IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, CStr(sValue), "", "", "")
    CASE "temp"
      iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType) & " " & UCase(sSubType))
      ' update value
      IF iDeviceId THEN
        IF Main.sTemperature = "°C" THEN
          ' temp °C
          Devices.ValueUpdate(iDeviceId, CStr(sValue), "", "", "")
        ELSE
          ' temp °F
          Devices.ValueUpdate(iDeviceId, CStr((sValue) * 1.8 + 32), "", "", "")
        ENDIF
      ENDIF
  END SELECT

END

' ENUM RFXMETER AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     count1 = 6
'     count2 = 7
'     count3 = 8
'     count4 = 9
'     filler = 10 'bits 3-0
'     rssi = 10   'bits 7-4
'     size = 10
' END ENUM

PRIVATE SUB Decode_RFXMeter()

  DIM lCounter AS Long
  DIM sAddress, sType AS String
  DIM iDeviceId AS Integer

  SELECT CASE RecBuf[2]
    CASE sTypeRFXMeterCount
      sType = "rfxmeter"
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("Subtype       = RFXMeter counter")
      WriteMessage("Sequence no.  = " & RecBuf[3])
      WriteMessage("ID            = " & sAddress)
      ' [GB2:CLNG] lCounter = Lsl(CLng(RecBuf[6]), 24) + Lsl(CLng(RecBuf[7]), 16) + Lsl(CLng(RecBuf[8]), 8) + RecBuf[9]
      lCounter = Lsl(CLong(RecBuf[6]), 24) + Lsl(CLong(RecBuf[7]), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9]
      WriteMessage("Counter       = " & lCounter)
      WriteMessage("if RFXPwr     = " & CStr((lCounter / 1000)) & " kWh")
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      iDeviceId = Devices.Find(sAddress, Devices.FindInterface("RFXCom Tranceiver"), UCase(sType))
      IF iDeviceId THEN Devices.ValueUpdate(iDeviceId, CStr(lCounter), "", "", "")
    CASE sTypeRFXMeterInterval
      sType = "rfxmeter"
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("Subtype       = RFXMeter new interval time set")
      WriteMessage("Sequence no.  = " & RecBuf[3])
      WriteMessage("ID            = " & sAddress)
      WriteMessage("Interval time = ", FALSE)
      SELECT CASE RecBuf[8]
        CASE &H1
          WriteMessage("30 seconds")
        CASE &H2
          WriteMessage("1 minute")
        CASE &H4
          WriteMessage("6 minutes")
        CASE &H8
          WriteMessage("12 minutes")
        CASE &H10
          WriteMessage("15 minutes")
        CASE &H20
          WriteMessage("30 minutes")
        CASE &H40
          WriteMessage("45 minutes")
        CASE &H80
          WriteMessage("1 hour")
      END SELECT
    CASE sTypeRFXMeterCalib
      sType = "rfxmeter"
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      SELECT CASE (RecBuf[7] AND &HC0)
        CASE &H0
          WriteMessage("Subtype       = Calibrate mode for channel 1")
        CASE &H40
          WriteMessage("Subtype       = Calibrate mode for channel 2")
        CASE &H80
          WriteMessage("Subtype       = Calibrate mode for channel 3")
      END SELECT
      WriteMessage("ID            = " & sAddress)
      ' [GB2:CLNG] lCounter = Lsl(CLng(RecBuf[6]), 24) + Lsl(CLng(RecBuf[7]), 16) + Lsl(CLng(RecBuf[8]), 8) + RecBuf[9]
      lCounter = Lsl(CLong(RecBuf[6]), 24) + Lsl(CLong(RecBuf[7]), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9]
      ' [GB2:CLNG] lCounter = (Lsl(CLng(RecBuf[7] AND &H3F), 16) + Lsl(CLng(RecBuf[8]), 8) + RecBuf[9]) / 1000
      lCounter = (Lsl(CLong(RecBuf[7] AND &H3F), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9]) / 1000
      WriteMessage("Calibrate cnt = " & lCounter & " msec")
      WriteMessage("RFXPwr        = " & CStr(Round(1 / ((16 * lCounter) / (3600000 / 62.5)), 3)) & " kW", FALSE)
    CASE sTypeRFXMeterAddr
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("Subtype       = New address set, push button for next address")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
    CASE sTypeRFXMeterCounterReset
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      SELECT CASE (RecBuf[7] AND &HC0)
        CASE &H0
          WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else RESET COUNTER channel 1 will be executed")
        CASE &H40
          WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else RESET COUNTER channel 2 will be executed")
        CASE &H80
          WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else RESET COUNTER channel 3 will be executed")
      END SELECT
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
    CASE sTypeRFXMeterCounterSet
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      SELECT CASE (RecBuf[7] AND &HC0)
        CASE &H0
          WriteMessage("Subtype       = Counter channel 1 is reset to zero")
        CASE &H40
          WriteMessage("Subtype       = Counter channel 2 is reset to zero")
        CASE &H80
          WriteMessage("Subtype       = Counter channel 3 is reset to zero")
      END SELECT
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
      ' [GB2:CLNG] WriteMessage("Counter       = " & Lsl(CLng(RecBuf[6]), 24) + Lsl(CLng(RecBuf[7]), 16) + Lsl(CLng(RecBuf[8]), 8) + RecBuf[9])
      WriteMessage("Counter       = " & Lsl(CLong(RecBuf[6]), 24) + Lsl(CLong(RecBuf[7]), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9])
    CASE sTypeRFXMeterSetInterval
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else SET INTERVAL MODE will be entered")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
    CASE sTypeRFXMeterSetCalib
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      SELECT CASE (RecBuf[7] AND &HC0)
        CASE &H0
          WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else CALIBRATION mode for channel 1 will be executed")
        CASE &H40
          WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else CALIBRATION mode for channel 2 will be executed")
        CASE &H80
          WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else CALIBRATION mode for channel 3 will be executed")
    END SELECT
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
    CASE sTypeRFXMeterSetAddr
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("Subtype       = Push the button for next mode within 5 seconds or else SET ADDRESS MODE will be entered")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
    CASE sTypeRFXMeterIdent
      sAddress = ConvertAddress(sType & " 0x" & (RecBuf[4] * 256 + RecBuf[5]))
      WriteMessage("Subtype       = RFXMeter identification")
      WriteMessage("Sequence no.  = " & CStr(RecBuf[3]))
      WriteMessage("ID            = " & sAddress)
      WriteMessage("FW version    = " & Hex(RecBuf[8]))
      WriteMessage("Interval time = ", FALSE)
      SELECT CASE RecBuf[9]
        CASE &H1
          WriteMessage("30 seconds")
        CASE &H2
          WriteMessage("1 minute")
        CASE &H4
          WriteMessage("6 minutes")
        CASE &H8
          WriteMessage("12 minutes")
        CASE &H10
          WriteMessage("15 minutes")
        CASE &H20
          WriteMessage("30 minutes")
        CASE &H40
          WriteMessage("45 minutes")
        CASE &H80
          WriteMessage("1 hour")
      END SELECT
    CASE ELSE
      WriteMessage("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      RETURN
  END SELECT
  WriteMessage("Signal level  = " & Lsr(RecBuf[10], 4))

END

' ENUM LIGHTING1 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     housecode = 4
'     unitcode = 5
'     cmnd = 6
'     filler = 7 'bits 3-0
'     rssi = 7   'bits 7-4
'     size = 7
' END ENUM

' Lighting1
PUBLIC SUB Lighting1(sType AS String, sAddress AS String, sCommand AS String, OPTIONAL bGroup AS Boolean)

  ' [GB2:ARRD] DIM bBuf AS Byte[8]
  DIM bBuf As New Byte[8]
  DIM sCmd AS String = UCase(sCommand)

  ' "X10", "ARC", "AB400", "Waveman", "EMW200", "Impuls", "RisingSun", "PhilipsSBC"
  SELECT CASE UCase(sType)
    CASE "X10"
      bBuf[2] = 0
    CASE "ARC"
      bBuf[2] = 1
    CASE "AB400"
      bBuf[2] = 2
    CASE "WAVEMAN"
      bBuf[2] = 3
    CASE "EMW200"
      bBuf[2] = 4
    CASE "IMPULS"
      bBuf[2] = 5
    CASE "RISINGSUN"
      bBuf[2] = 6
    CASE "PHILIPSSBC"
      bBuf[2] = 7
    CASE ELSE
      WriteMessage("[RFXComTRX] Not a valid Lighting1 type : " & sType)
      RETURN
  END SELECT

  IF (Len(sAddress) <> 3) THEN
    WriteMessage("[RFXComTRX] Not a valid X10 address: " & sAddress)
    RETURN
  ENDIF

  SELECT CASE sType
    CASE sTypeX10, sTypeARC, sTypeWaveman
      ' check A-P and 1-16
      IF NOT (Left$(sAddress, 1) LIKE "[A-P]") OR IF NOT (Right$(sAddress, 1) LIKE "[0-9]")
        WriteMessage("[RFXComTRX] Not a valid X10 address: " & sAddress)
        RETURN
      ENDIF
    CASE sTypeAB400D, sTypeIMPULS
      ' check A-P and 1-64
      IF NOT (Left$(sAddress, 1) LIKE "[A-P]") OR IF NOT (Right$(sAddress, 1) LIKE "[0-9]")
        WriteMessage("[RFXComTRX] Not a valid AB400 or IMPULS address: " & sAddress)
        RETURN
      ENDIF
    CASE sTypePhilips
      ' check A-P and 1-8
      IF NOT (Left$(sAddress, 1) LIKE "[A-P]") OR IF NOT (Right$(sAddress, 1) LIKE "[1-8]")
        WriteMessage("[RFXComTRX] Not a valid Philips SBC address: " & sAddress)
        RETURN
      ENDIF
    CASE sTypeRisingSun
      ' check A-P and 1-4
      IF NOT (Left$(sAddress, 1) LIKE "[A-P]") OR IF NOT (Right$(sAddress, 1) LIKE "[1-4]")
        WriteMessage("[RFXComTRX] Not a valid RisingSun address: " & sAddress)
        RETURN
      ENDIF
    CASE sTypeEMW200
      ' check A-C and 1-4
      IF NOT (Left$(sAddress, 1) LIKE "[A-C]") OR IF NOT (Right$(sAddress, 1) LIKE "[1-4]")
        WriteMessage("[RFXComTRX] Not a valid EMW200 address: " & sAddress)
        RETURN
      ENDIF
  END SELECT

  bBuf[0] = 7
  bBuf[1] = pTypeLighting1
  bBuf[3] = iSeq
  bBuf[4] = Asc(Left$(sAddress, 1))
  bBuf[5] = Val(Right$(sAddress, 2))

  SELECT CASE sCmd
    CASE "OFF"
      bBuf[6] = IIf(bGroup, 5, 0)
    CASE "ON"
      bBuf[6] = IIf(bGroup, 6, 1)
    CASE "ALL OFF", "GROUP OFF"
      bBuf[6] = 5
    CASE "ALL ON", "GROUP ON"
      bBuf[6] = 6
    CASE "CHIME"
      IF sType <> sTypeARC THEN
        Main.WriteDebugLog(("[RFXComTRX] Invalid Lighting1 command '") & sCmd & ("' given for '") & sType & ("' type!"))
        RETURN
      ENDIF
      bBuf[6] = 7
      bBuf[5] = 8
    CASE ELSE
      Main.WriteDebugLog(("[RFXComTRX] Unknown Lighting1 command '") & sCmd & ("' given!"))
      RETURN
  END SELECT
  bBuf[7] = 0
  WriteCommand(bBuf)

END

' ENUM LIGHTING2 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     id4 = 7
'     unitcode = 8
'     cmnd = 9
'     level = 10
'     filler = 11 'bits 3-0
'     rssi = 11   'bits 7-4
'     size = 11
' 
'     pType = &H11
'     sTypeAC = &H0
'     sTypeHEU = &H1
'     sTypeANSLUT = &H2
' END ENUM

' Lighting2
PUBLIC SUB Lighting2(sType AS String, sAddress AS String, sCommand AS String, OPTIONAL bGroup AS Boolean)

  ' [GB2:ARRD] DIM bBuf AS Byte[12]
  DIM bBuf As New Byte[12]
  DIM sCmd AS String = UCase(sCommand)
  DIM aAddr AS String[]
  DIM sUnit, sCtrl AS String
  DIM iDim, iBrightness AS Integer

  ' "AC", "HEEU", "Anslut"
  SELECT CASE UCase(sType)
    CASE "AC"
      bBuf[2] = 0
    CASE "HEEU"
      bBuf[2] = 1
    CASE "ANSLUT"
      bBuf[2] = 2
    CASE ELSE
      WriteMessage("[RFXComTRX] Not a valid Lighting2 type : " & sType)
      RETURN
  END SELECT

  ' find out type of control for device
  sCtrl = Devices.CheckControlDevice(sAddress, Devices.FindInterface("RFXCom Tranceiver"))

  aAddr = Split(sAddress, " ")
  IF aAddr.Count = 2 THEN
    sAddress = aAddr[0]
    sUnit = aAddr[1]
    IF LCase(sUnit) = "group" THEN
      bGroup = TRUE
      sUnit = 0
    ENDIF
  ELSE
    Main.WriteDebugLog(("[RFXComTRX] Address has wrong format, use '<Device> <Unit>'!"))
    RETURN
  ENDIF

  IF Len(sAddress) = 9 AND IF Left(sAddress, 2) = "0x" THEN
    sAddress = Right(sAddress, 7)
  ELSE IF Len(sAddress) <> 7 THEN
    Main.WriteDebugLog(("[RFXComTRX] Device address length must be 7 characters!"))
    RETURN
  ENDIF

  bBuf[0] = 11
  bBuf[1] = pTypeLighting2
  bBuf[3] = iSeq

  bBuf[4] = CByte(Left(sAddress, 1))
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 2, 2)))
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 4, 2)))
  bBuf[7] = CByte(Val("&H" & Mid(sAddress, 6, 2)))
  bBuf[8] = CByte(Val(sUnit))

  SELECT sCmd
    CASE "ALL OFF", "GROUP OFF"
      bBuf[9] = 3
    CASE "ALL ON", "GROUP ON"
      bBuf[9] = 4
    CASE "ON", "DIM 100"
      SELECT sCtrl
        CASE "Switch"
          bBuf[9] = IIf(bGroup, 4, 1)
        CASE "Dimmer"
          bBuf[9] = IIf(bGroup, 5, 2)
          bBuf[10] = CByte(15)
        CASE ELSE
          RETURN
      END SELECT
    CASE "OFF", "DIM 0"
      bBuf[9] = IIf(bGroup, 3, 0)
    CASE ELSE
      bBuf[9] = IIf(bGroup, 5, 2)
      IF InStr(sCmd, "DIM ") THEN ' DIM 1 - 99
        iBrightness = Val(Replace(sCmd, "DIM ", ""))
        iDim = Round(0.15 * iBrightness) ' 16 steps
        bBuf[10] = CByte(iDim)
      ELSE
        Main.WriteDebugLog(("[RFXComTRX] Unknown Lighting2 command '") & sCmd & ("' given!"))
        RETURN
      ENDIF
  END SELECT
  bBuf[11] = 0
  WriteCommand(bBuf)

END

' ENUM LIGHTING5 AS Byte
' packetlength = 0
' packettype = 1
' subtype = 2
' seqnbr = 3
' id1 = 4
' id2 = 5
' id3 = 6
' unitcode = 7
' cmnd = 8
' filler = 9 'bits 3-0
' rssi = 9   'bits 7-4
' size = 9
'
' pType = &H14
' sTypeLightwaveRF = &H0
'
' sOff = 0
' sOn = 1
' sGroupOff = 2
' sLearn = 2
' sMood1 = 3
' sMood2 = 4
' sMood3 = 5
' sMood4 = 6
' sMood5 = 7
' sUnlock = 10
' sLock = 11
' sAllLock = 12
' sClose = 13
' sStop = 14
' sOpen = 15
' sDim = 16
' END ENUM

' Lightning5
PUBLIC SUB Lighting5(sType AS String, sAddress AS String, sCommand AS String)

  ' [GB2:ARRD] DIM bBuf AS Byte[10]
  DIM bBuf As New Byte[10]
  DIM sCmd AS String = UCase(sCommand)
  DIM aAddr AS String[]
  DIM sUnit AS String
  DIM iDim, iBrightness AS Integer

  ' "LIGHTWAVERF"
  SELECT CASE UCase(sType)
    CASE "LIGHTWAVERF"
      bBuf[2] = 0
    CASE "EMW100"
      bBuf[2] = 1
    CASE "BBSB"
      bBuf[2] = 2
    CASE ELSE
      WriteMessage("[RFXComTRX] Not a valid Lighting5 type : " & sType)
      RETURN
  END SELECT

  aAddr = Split(sAddress, " ")
  IF aAddr.Count = 2 THEN
    sAddress = aAddr[0]
    sUnit = aAddr[1]
  ELSE
    Main.WriteDebugLog(("[RFXComTRX] Lighting5 address has wrong format, use '<Device> <Unit>'!"))
    RETURN
  ENDIF

  IF Len(sAddress) = 8 AND IF Left(sAddress, 2) = "0x" THEN sAddress = Right(sAddress, 6)
  IF Len(sAddress) <> 6 THEN
    Main.WriteDebugLog(("[RFXComTRX] Lighting5 device address length must be 6 characters!"))
    RETURN
  ENDIF

  bBuf[0] = 9
  bBuf[1] = pTypeLighting5
  bBuf[3] = iSeq

  bBuf[4] = CByte(Val("&H" & Left(sAddress, 2)))
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 3, 2)))
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 5, 2)))
  bBuf[7] = CByte(Val(sUnit))
  bBuf[9] = 0

  SELECT CASE sType
    CASE sTypeLightwaveRF
      SELECT CASE sCmd
        CASE "ON", "DIM 100"
          bBuf[8] = 1
        CASE "OFF", "DIM 0"
          bBuf[8] = 0
        CASE "ALL OFF", "GROUP OFF"
          bBuf[8] = 2
        CASE "ALL ON", "GROUP ON"
          bBuf[8] = 3
        CASE "MOOD1"
          bBuf[8] = 3
        CASE "MOOD2"
          bBuf[8] = 4
        CASE "MOOD3"
          bBuf[8] = 5
        CASE "MOOD4"
          bBuf[8] = 6
        CASE "MOOD5"
          bBuf[8] = 7
        CASE "UNLOCK"
          bBuf[8] = 10
        CASE "LOCK"
          bBuf[8] = 11
        CASE "ALL LOCK"
          bBuf[8] = 12
        CASE "CLOSE"
          bBuf[8] = 13
        CASE "STOP"
          bBuf[8] = 14
        CASE "OPEN"
          bBuf[8] = 15
        CASE ELSE
          IF InStr(sCmd, "DIM ") THEN ' DIM 1 - 99
            bBuf[8] = 16
            iBrightness = Val(Replace(sCmd, "DIM ", ""))
            iDim = Round(0.31 * iBrightness) ' 32 steps
            bBuf[9] = CByte(iDim)
          ELSE
            Main.WriteDebugLog(("[RFXComTRX] Invalid Lighting5 command '") & sCmd & ("' for type '") & sType & ("' given!"))
            RETURN
          ENDIF
      END SELECT
    CASE sTypeEMW100
      SELECT CASE sCmd
        CASE "ON"
          bBuf[8] = 1
        CASE "OFF"
          bBuf[8] = 0
        CASE "LEARN"
          bBuf[8] = 2
        CASE ELSE
          Main.WriteDebugLog(("[RFXComTRX] Invalid Lighting5 command '") & sCmd & ("' for type '") & sType & ("' given!"))
          RETURN
      END SELECT
    CASE sTypeBBSB
      SELECT CASE sCmd
        CASE "ON"
          bBuf[8] = 1
        CASE "OFF"
          bBuf[8] = 0
        CASE "ALL OFF", "GROUP OFF"
          bBuf[8] = 2
        CASE "ALL ON", "GROUP ON"
          bBuf[8] = 3
        CASE ELSE
          Main.WriteDebugLog(("[RFXComTRX] Invalid Lighting5 command '") & sCmd & ("' for type '") & sType & ("' given!"))
          RETURN
      END SELECT
  END SELECT
  WriteCommand(bBuf)

END

' ENUM CURTAIN1 AS Integer
'   packetlength = 0
'   packettype = 1
'   subtype = 2
'   seqnbr = 3
'   housecode = 4
'   unitcode = 5
'   cmnd = 6
'   filler = 7
'   size = 7
'   pType = &H18
'   Harrison = &H0
' END ENUM

' Curtain1
PUBLIC SUB Curtain(sType AS String, sAddress AS String, sCommand AS String)

  ' [GB2:ARRD] DIM bBuf AS Byte[8]
  DIM bBuf As New Byte[8]
  DIM sCmd AS String = UCase(sCommand)

  ' "HARRISON"
  SELECT CASE UCase(sType)
    CASE "HARRISON"
      IF NOT (Left$(sAddress, 1) LIKE "[A-P]") OR IF NOT (Right$(sAddress, 1) LIKE "[0-9]")
        WriteMessage("[RFXComTRX] Not a valid Harrison address: " & sAddress)
        RETURN
      ENDIF
      bBuf[2] = &H0
    CASE ELSE
      WriteMessage("[RFXComTRX] Not a valid Curtain type : " & sType)
      RETURN
  END SELECT

  bBuf[0] = 7
  bBuf[1] = pTypeCurtain
  bBuf[3] = iSeq
  bBuf[4] = Asc(Left$(sAddress, 1))
  bBuf[5] = Val(Right$(sAddress, 2))

  SELECT CASE sCmd
    CASE "OPEN"
      bBuf[6] = 0
    CASE "CLOSE"
      bBuf[6] = 1
    CASE "STOP"
      bBuf[6] = 2
    CASE "PROGRAM"
      bBuf[6] = 3
    CASE ELSE
      Main.WriteDebugLog(("[RFXComTRX] Unknown Curtain command '") & UCase(sCmd) & ("' given!"))
      RETURN
  END SELECT
  bBuf[7] = 0
  WriteCommand(bBuf)

END

' ENUM THERMOSTAT2 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     unitcode = 4
'     cmnd = 5
'     filler = 6  'bits 3-0
'     rssi = 6    'bits 7-4
'     size = 6
' END ENUM

' Thermostat2
PUBLIC SUB Thermostat2(sType AS String, sAddress AS String, sCommand AS String)

  ' [GB2:ARRD] DIM bBuf AS Byte[7]
  DIM bBuf As New Byte[7]
  DIM sCmd AS String = UCase(sCommand)

  IF Len(sAddress) = 2 THEN
    IF NOT (Left$(sAddress, 1) LIKE "[0-1]") OR IF NOT (Right$(sAddress, 1) LIKE "[0-F]")
      WriteMessage("[RFXComTRX] Not a valid " & sType & " address: " & sAddress)
      RETURN
    ENDIF
  ELSE
    WriteMessage("[RFXComTRX] Not a valid " & sType & " address (invalid lenght): " & sAddress)
    RETURN
  ENDIF

  SELECT CASE UCase(sType)
    CASE "HE105"
      bBuf[2] = &H0
    CASE "RTS10"
      bBuf[2] = &H1
    CASE ELSE
      WriteMessage("[RFXComTRX] Not a valid Thermostat2 type : " & sType)
      RETURN
  END SELECT

  bBuf[0] = 6
  bBuf[1] = pTypeThermostat2
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & sAddress))

  SELECT CASE sCmd
    CASE "ON"
      bBuf[5] = 1
    CASE "OFF"
      bBuf[5] = 0
    CASE "PROGRAM"
      bBuf[5] = 2
    CASE ELSE
      Main.WriteDebugLog(("[RFXComTRX] Unknown Thermostat2 command '") & UCase(sCmd) & ("' given!"))
      RETURN
  END SELECT
  bBuf[6] = 0
  WriteCommand(bBuf)

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS Integer

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS Integer)

  iTCPPort = Value

END

PRIVATE FUNCTION Interface_Read() AS String

  RETURN sInterface

END

PRIVATE SUB Interface_Write(Value AS String)

  sInterface = Value

END

PRIVATE FUNCTION Baud_Read() AS String

  RETURN sBaud

END

PRIVATE SUB Baud_Write(Value AS String)

  sBaud = Value

END

PRIVATE FUNCTION SerPort_Read() AS String

  RETURN sSerPort

END

PRIVATE SUB SerPort_Write(Value AS String)

  sSerPort = Value

END

PRIVATE FUNCTION RFXComDebug_Read() AS Boolean

  RETURN bRFXComTRXDebug

END

PRIVATE SUB RFXComDebug_Write(Value AS Boolean)

  bRFXComTRXDebug = Value

END

PRIVATE FUNCTION RelayPort_Read() AS Integer

  RETURN iRelayPort

END

PRIVATE SUB RelayPort_Write(Value AS Integer)

  iRelayPort = Value

END

PRIVATE FUNCTION GlobalX10_Read() AS Boolean

  RETURN bGlobalX10

END

PRIVATE SUB GlobalX10_Write(Value AS Boolean)

  bGlobalX10 = Value

END

PRIVATE FUNCTION OldAddrFmt_Read() AS Boolean

  RETURN bOldAddrFmt

END

PRIVATE SUB OldAddrFmt_Write(Value AS Boolean)

  bOldAddrFmt = Value

END
