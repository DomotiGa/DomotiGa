' Gambas class file

' Description:
' CRFXComTRX.class
' Connect to RFXCom TRX transceiver interface via tcp socket or serial port.

' Development Status:
' Finished

' Credits:
' Thanks to Bert Weijenberg from RFXCom for letting me test his new hardware products.
' Used RFXCom's RFXmngr_vb project as example.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "RFXComTRX"
Public PluginFriendlyName As String = "RFXCom Transceiver"
Public PluginVersion As String = "1.05"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[RFXComTRX] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean
Private $iRelayPort As Integer
Private $bGlobalX10 As Boolean
Private $bOldAddrFmt As Boolean
Private $bRelayEnabled As Boolean

Private $iReceiverType As Integer
Private $iFirmWareVersion As Integer
Private $sHardwareVersion As String
Private $sFirmwareType As String
Private $aEnabledProtocols As New String[]

Public hMySocket As CSocket
Public hMySerial As CSerialPort
Public hRFXComTRXRelay As New ServerSocket
Public hRelayTRXClient As Object[]
Public hRelayTRXSocket As New Socket
Public tRFXComTRXReset As Timer
Public tRFXComTRXBusy As Timer
Private bResetActive As Boolean = True
Private RecBuf As New Byte[30]
Private $bRecBytes As Byte
Public bSimulate As Boolean
Private iSeq As Integer
Private cQueue As New Collection    ' command buffer
Private bInterfaceBusy As Boolean   ' waiting for delay timer to finish

' interface control
Const pTypeInterfaceControl As Byte = &H0
Const sTypeInterfaceCommand As Byte = &H0

Const pTypeInterfaceMessage As Byte = &H1
Const sTypeInterfaceResponse As Byte = &H0
Const sTypeInterfaceUnknownRTSremote As Byte = &H1
Const sTypeInterfaceNoExtendedHardware As Byte = &H2
Const sTypeInterfaceRFYRemoteList As Byte = &3
Const sTypeInterfaceWrongCommand As Byte = &HFF

' Protocol list Msg4 - interface commands
Const msg3undec As Byte = &H80
Const msg3RFU6 As Byte = &H40
Const msg3BYRONSX As Byte = &H20
Const msg3RSL As Byte = &H10
Const msg3LIGHTING4 As Byte = &H08
Const msg3FINEOFFSET As Byte = &H04
Const msg3RUBICSON As Byte = &H02
Const msg3AE As Byte = &H01

' Protocol list Msg4
Const msg4BlindsT1 As Byte = &H80 ' RollerTrol or Hasta new
Const msg4BlindsT0 As Byte = &H40 ' Hasta old
Const msg4PROGUARD As Byte = &H20
Const msg4FS20 As Byte = &H10
Const msg4LACROSSE As Byte = &H8
Const msg4HIDEKI As Byte = &H4
Const msg4AD As Byte = &H2
Const msg4MERTIK As Byte = &H1

' Protocol list Msg5
Const msg5VISONIC As Byte = &H80
Const msg5ATI As Byte = &H40
Const msg5OREGON As Byte = &H20
Const msg5MEIANTECH As Byte = &H10
Const msg5HOMEEASYEU As Byte = &H8
Const msg5AC As Byte = &H04
Const msg5ARC As Byte = &H02
Const msg5X10 As Byte = &H01

' Protocol list Msg6
Const msg6HomeConfort As Byte = &H02
Const msg6KEELOQ As Byte = &H01

Const cmdRESET As Byte = &H0 ' reset the receiver/transceiver
Const cmdSTATUS As Byte = &H2 ' return firmware versions and configuration of the interface
Const cmdSETMODE As Byte = &H3 ' set the configuration of the interface
Const cmdSAVE As Byte = &H6 ' save receiving modes of the receiver/transceiver in non-volatile memory

Const cmd310 As Byte = &H50 ' select 310MHz in the 310/315 transceiver
Const cmd315 As Byte = &H51 ' select 315MHz in the 310/315 transceiver
Const cmd800 As Byte = &H55 ' select 868.00MHz ASK in the 868 transceiver
Const cmd800F As Byte = &H56 ' select 868.00MHz FSK in the 868 transceiver
Const cmd830 As Byte = &H57 ' select 868.30MHz ASK in the 868 transceiver
Const cmd830F As Byte = &H58 ' select 868.30MHz FSK in the 868 transceiver
Const cmd835 As Byte = &H59 ' select 868.35MHz ASK in the 868 transceiver
Const cmd835F As Byte = &H5A ' select 868.35MHz FSK in the 868 transceiver
Const cmd895 As Byte = &H5B ' select 868.95MHz in the 868 transceiver

Const pTypeRecXmitMessage As Byte = &H2
Const sTypeReceiverLockError As Byte = &H0
Const sTypeTransmitterResponse As Byte = &H1

' transceiver / receiver / transmitter
Const pTypeResponse As Byte = &H1
Const recType310 As Byte = &H50
Const recType315 As Byte = &H51
Const recType43392 As Byte = &H52
Const trxType43392 As Byte = &H53
Const recType86800 As Byte = &H55
Const recType86800FSK As Byte = &H56
Const recType86830 As Byte = &H57
Const recType86830FSK As Byte = &H58
Const recType86835 As Byte = &H59
Const recType86835FSK As Byte = &H5A
Const recType86895 As Byte = &H5B

' undecoded
Const pTypeUndecoded As Byte = &H3
Const sTypeUac As Byte = &H0
Const sTypeUarc As Byte = &H1
Const sTypeUati As Byte = &H2
Const sTypeUhideki As Byte = &H3
Const sTypeUlacrosse As Byte = &H4
Const sTypeUad As Byte = &H5
Const sTypeUmertik As Byte = &H6
Const sTypeUoregon1 As Byte = &H7
Const sTypeUoregon2 As Byte = &H8
Const sTypeUoregon3 As Byte = &H9
Const sTypeUproguard As Byte = &HA
Const sTypeUvisonic As Byte = &HB
Const sTypeUnec As Byte = &HC
Const sTypeUfs20 As Byte = &HD
Const sTypeUrsl As Byte = &HE
Const sTypeUblinds As Byte = &HF
Const sTypeUrubicson As Byte = &H10
Const sTypeUae As Byte = &H11
Const sTypeUfineoffset As Byte = &H12
Const sTypeUrgb As Byte = &H13
Const sTypeUrts As Byte = &H14

' lighting
Const pTypeLighting1 As Byte = &H10
Const sTypeX10 As Byte = &H0
Const sTypeARC As Byte = &H1
Const sTypeAB400D As Byte = &H2
Const sTypeWaveman As Byte = &H3
Const sTypeEMW200 As Byte = &H4
Const sTypeIMPULS As Byte = &H5
Const sTypeRisingSun As Byte = &H6
Const sTypePhilips As Byte = &H7
Const sTypeEnergenie As Byte = &H8

Const pTypeLighting2 As Byte = &H11
Const sTypeAC As Byte = &H0
Const sTypeHEU As Byte = &H1
Const sTypeANSLUT As Byte = &H2

Const pTypeLighting3 As Byte = &H12
Const sTypeKoppla As Byte = &H0

Const pTypeLighting4 As Byte = &H13
Const sTypePT2262 As Byte = &H0

Const pTypeLighting5 As Byte = &H14
Const sTypeLightwaveRF As Byte = &H0
Const sTypeEMW100 As Byte = &H1
Const sTypeBBSB As Byte = &H2
Const sTypeMDREMOTE As Byte = &H3
Const sTypeRSL As Byte = &H4
Const sTypeLivolo As Byte = &H5
Const sTypeRGBTRC02 As Byte = &H6
Const sTypeAokeRelay As Byte = &H7
Const sTypeRGBTRC02_2 As Byte = &H8
Const sTypeEurodomest As Byte = &H9
Const sTypeLivoloAppliance As Byte = &H0A
Const sTypeRGB432W As Byte = &H0B
Const sTypeMDREMOTE107 As Byte = &H0C
Const sTypeLegrandCAD As Byte = &H0D
Const sTypeAvantek As Byte = &H0E
Const sTypeIT As Byte = &H0F

Const pTypeLighting6 As Byte = &H15
Const sTypeBlyss As Byte = &H0
Private iLighting6CmndSeqNbr As Integer

' chime
Const pTypeChime As Byte = &H16
Const sTypeByronSX As Byte = &H0
Const sTypeByronMP As Byte = &H1
Const sTypeSelectPlus As Byte = &H2
Const ChimeSound0 As Byte = &H1
Const ChimeSound1 As Byte = &H3
Const ChimeSound2 As Byte = &H5
Const ChimeSound3 As Byte = &H9
Const ChimeSound4 As Byte = &HD
Const ChimeSound5 As Byte = &HE
Const ChimeSound6 As Byte = &H6
Const ChimeSound7 As Byte = &H2

' bbq
Const pTypeBBQ As Byte = &H4E
Const sTypeBBQ1 As Byte = &H1  ' Maverick ET-732

' curtain1
Const pTypeCurtain1 As Byte = &H18
Const sTypeHarrison As Byte = &H0

' temperature+rain
Const pTypeTEMP_RAIN As Byte = &H4F
Const sTypeTR1 As Byte = &H1   ' WS1200

' current-energy
Const pTypeCURRENTENERGY As Byte = &H5B
Const sTypeELEC4 As Byte = &H1 ' CM180i

' power
Const pTypePOWER As Byte = &H5C
Const sTypeELEC5 As Byte = &H1 ' Revolt

' fan
Const pTypeFan As Byte = &H17
Const sTypeSiemensSF01 As Byte = &H0

' blinds
Const pTypeBlinds As Byte = &H19
Const sTypeBlindsT0 As Byte = &H0 ' Rollertrol or Hasta new
Const sTypeBlindsT1 As Byte = &H1 ' Hasta old
Const sTypeBlindsT2 As Byte = &H2 ' A-OK RF01
Const sTypeBlindsT3 As Byte = &H3 ' A-OK AC114
Const sTypeBlindsT4 As Byte = &H4 ' RAEX
Const sTypeBlindsT5 As Byte = &H5 ' Media Mount
Const sTypeBlindsT6 As Byte = &H6 ' DC106
Const sTypeBlindsT7 As Byte = &H7 ' Forest
Const sTypeBlindsT8 As Byte = &H8 ' Chamberlain CS4330CN
Const sTypeBlindsT9 As Byte = &H9 ' Sunpery
Const sTypeBlindsT10 As Byte = &HA ' Dolat
Const sTypeBlindsT11 As Byte = &HB ' ESMO, Brel

' security
Const pTypeSecurity1 As Byte = &H20
Const sTypeSecX10 As Byte = &H0
Const sTypeSecX10M As Byte = &H1
Const sTypeSecX10R As Byte = &H2
Const sTypeKD101 As Byte = &H3
Const sTypePowercodeSensor As Byte = &H4
Const sTypePowercodeMotion As Byte = &H5
Const sTypeCodesecure As Byte = &H6
Const sTypePowercodeAux As Byte = &H7
Const sTypeMeiantech As Byte = &H8
Const sTypeSA30 As Byte = &H9

' security1
Const sStatusNormal As Byte = &H0
Const sStatusNormalDelayed As Byte = &H1
Const sStatusAlarm As Byte = &H2
Const sStatusAlarmDelayed As Byte = &H3
Const sStatusMotion As Byte = &H4
Const sStatusNoMotion As Byte = &H5
Const sStatusPanic As Byte = &H6
Const sStatusPanicOff As Byte = &H7
Const sStatusIRBeam As Byte = &H8
Const sStatusArmAway As Byte = &H9
Const sStatusArmAwayDelayed As Byte = &HA
Const sStatusArmHome As Byte = &HB
Const sStatusArmHomeDelayed As Byte = &HC
Const sStatusDisarm As Byte = &HD
Const sStatusLightOff As Byte = &H10
Const sStatusLightOn As Byte = &H11
Const sStatusLighting2Off As Byte = &H12
Const sStatusLighting2On As Byte = &H13
Const sStatusDark As Byte = &H14
Const sStatusLight As Byte = &H15
Const sStatusBatLow As Byte = &H16
Const sStatusPairKD101 As Byte = &H17
Const sStatusNormalTamper As Byte = &H80
Const sStatusNormalDelayedTamper As Byte = &H81
Const sStatusAlarmTamper As Byte = &H82
Const sStatusAlarmDelayedTamper As Byte = &H83
Const sStatusMotionTamper As Byte = &H84
Const sStatusNoMotionTamper As Byte = &H85

' camera1
Const pTypeCamera1 As Byte = &H28
Const sTypeNinja As Byte = &H0

' remotes
Const pTypeRemote As Byte = &H30
Const sTypeATI As Byte = &H0
Const sTypeATI2 As Byte = &H1
Const sTypeMedion As Byte = &H2
Const sTypePCremote As Byte = &H3
Const sTypeATIrw2 As Byte = &H4

' thermostat1
Const pTypeThermostat1 As Byte = &H40
Const sTypeDigimax As Byte = &H0      ' Digimax with long packet
Const sTypeDigimaxShort As Byte = &H1 ' Digimax with short packet (no set point)

' thermostat2
Const pTypeThermostat2 As Byte = &H41
Const sTypeHE105 As Byte = &H0  ' HE105
Const sTypeRTS10 As Byte = &H1  ' RTS10

' thermostat3
Const pTypeThermostat3 As Byte = &H42
Const sTypeMertikG6RH4T1 As Byte = &H0  ' Mertik G6R-H4T1
Const sTypeMertikG6RH4TB As Byte = &H1  ' Mertik G6R-H4TB

' temperature
Const pTypeTEMP As Byte = &H50
Const sTypeTEMP1 As Byte = &H1  ' THR128/138, THC138
Const sTypeTEMP2 As Byte = &H2  ' THC238/268,THN132,THWR288,THRN122,THN122,AW129/131
Const sTypeTEMP3 As Byte = &H3  ' THWR800
Const sTypeTEMP4 As Byte = &H4  ' RTHN318
Const sTypeTEMP5 As Byte = &H5  ' LaCrosse TX3
Const sTypeTEMP6 As Byte = &H6  ' TS15C
Const sTypeTEMP7 As Byte = &H7  ' Viking 02811
Const sTypeTEMP8 As Byte = &H8  ' LaCrosse WS2300
Const sTypeTEMP9 As Byte = &H9  ' RUBiCSON
Const sTypeTEMP10 As Byte = &HA ' TFA 30.3133
Const sTypeTEMP11 As Byte = &HB ' WT0122

' humidity
Const pTypeHUM As Byte = &H51   ' not used
Const sTypeHUM1 As Byte = &H1   ' LaCrosse TX3
Const sTypeHUM2 As Byte = &H2   ' LaCrosse WS2300

' temperature+humidity
Const pTypeTEMP_HUM As Byte = &H52
Const sTypeTH1 As Byte = &H1    ' THGN122/123,/THGN132,THGR122/228/238/268
Const sTypeTH2 As Byte = &H2    ' THGR810/THGN800
Const sTypeTH3 As Byte = &H3    ' RTGR328
Const sTypeTH4 As Byte = &H4    ' THGR328
Const sTypeTH5 As Byte = &H5    ' WTGR800
Const sTypeTH6 As Byte = &H6    ' THGR918,THGRN228,THGN500
Const sTypeTH7 As Byte = &H7    ' TFA TS34C
Const sTypeTH8 As Byte = &H8    ' Esic WT440H/450H
Const sTypeTH9 As Byte = &H9    ' Viking 02038
Const sTypeTH10 As Byte = &HA   ' Rubicson
Const sTypeTH11 As Byte = &HB   ' EW109
Const sTypeTH12 As Byte = &HC   ' Imagintronix Soil Sensor

' barometric
Const pTypeBARO As Byte = &H53  ' not used

' temperature+humidity+baro
Const pTypeTEMP_HUM_BARO As Byte = &H54
Const sTypeTHB1 As Byte = &H1   ' BTHR918
Const sTypeTHB2 As Byte = &H2   ' BTHR918N,BTHR968

' rain
Const pTypeRAIN As Byte = &H55
Const sTypeRAIN1 As Byte = &H1  ' RGR126/682/918
Const sTypeRAIN2 As Byte = &H2  ' PCR800
Const sTypeRAIN3 As Byte = &H3  ' TFA
Const sTypeRAIN4 As Byte = &H4  ' UPM RG700
Const sTypeRAIN5 As Byte = &H5  ' LaCrosse WS2300
Const sTypeRAIN6 As Byte = &H6  ' TX5

' wind
Const pTypeWIND As Byte = &H56
Const sTypeWIND1 As Byte = &H1  ' WTGR800
Const sTypeWIND2 As Byte = &H2  ' WGR800
Const sTypeWIND3 As Byte = &H3  ' STR918,WGR918
Const sTypeWIND4 As Byte = &H4  ' TFA
Const sTypeWIND5 As Byte = &H5  ' UPM
Const sTypeWIND6 As Byte = &H6  ' LaCrosse WS2300

' uv
Const pTypeUV As Byte = &H57
Const sTypeUV1 As Byte = &H1    ' UVN128,UV138
Const sTypeUV2 As Byte = &H2    ' UVN800
Const sTypeUV3 As Byte = &H3    ' TFA

' date & time
Const pTypeDT As Byte = &H58
Const sTypeDT1 As Byte = &H1    ' RTGR328N

' current
Const pTypeCURRENT As Byte = &H59
Const sTypeELEC1 As Byte = &H1  ' CM113,Electrisave

' energy
Const pTypeENERGY As Byte = &H5A
Const sTypeELEC2 As Byte = &H1  ' CM119/160
Const sTypeELEC3 As Byte = &H2  ' CM180

' gas
Const pTypeGAS As Byte = &H5B   ' not used

' water
Const pTypeWATER As Byte = &H5C ' not used

' weight scales
Const pTypeWEIGHT As Byte = &H5D
Const sTypeWEIGHT1 As Byte = &H1   ' BWR102
Const sTypeWEIGHT2 As Byte = &H2   ' GR101

' rfxsensor
Const pTypeRFXSensor As Byte = &H70
Const sTypeRFXSensorTemp As Byte = &H0
Const sTypeRFXSensorAD As Byte = &H1
Const sTypeRFXSensorVolt As Byte = &H2
Const sTypeRFXSensorMessage As Byte = &H3

' rfxmeter
Const pTypeRFXMeter As Byte = &H71
Const sTypeRFXMeterCount As Byte = &H0
Const sTypeRFXMeterInterval As Byte = &H1
Const sTypeRFXMeterCalib As Byte = &H2
Const sTypeRFXMeterAddr As Byte = &H3
Const sTypeRFXMeterCounterReset As Byte = &H4
Const sTypeRFXMeterCounterSet As Byte = &HB
Const sTypeRFXMeterSetInterval As Byte = &HC
Const sTypeRFXMeterSetCalib As Byte = &HD
Const sTypeRFXMeterSetAddr As Byte = &HE
Const sTypeRFXMeterIdent As Byte = &HF

' fs20
Const pTypeFS20 As Byte = &H72
Const sTypeFS20 As Byte = &H0
Const sTypeFHT8V As Byte = &H1
Const sTypeFHT80 As Byte = &H2

' somfy rts / rfy
Const pTypeRFY As Byte = &H1A
Const sTypeRFY As Byte = &H0
Const sTypeRFYEXT As Byte = &H1

' radiator1
Const pTypeRadiator1 As Byte = &H48
Const sTypeSmartwares As Byte = &H0

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bRelayEnabled = cPl.Settings["relayenabled"]
  $iRelayPort = cPl.Settings["relayport"]
  $bGlobalX10 = cPl.Settings["globalx10"]
  $bOldAddrFmt = cPl.Settings["oldaddrfmt"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("RFXCom Transceiver")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

  ' Previously in the code it was check if the RFXComTRX object was created, but
  ' that was useless for TCP connections (they never fail while the TCP will setup)

  ' Start RFXCom Relaying
  If $bRelayEnabled Then
    If StartRelay() Then
      WriteLog("Relay listening for client on port " & $iRelayPort)
    Else
      WriteLog("ERROR: Relay FAILED to listen on port " & $iRelayPort)
    Endif
  Else
    WriteLog("Relay disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP()

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry

  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = &HFF + gb.Byte
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one - but store the retry counter between new instances
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = &HFF + gb.Byte ' Byte[]
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' define timer for RFXComTRX reset
  tRFXComTRXReset = New Timer As "tRFXComTRXReset"
  tRFXComTRXReset.Delay = 1000
  tRFXComTRXReset.Stop

  ' define timer for Interface busy
  tRFXComTRXBusy = New Timer As "tRFXComTRXBusy"
  tRFXComTRXBusy.Stop

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ResetInterface()

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' Try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close
  Try hRelayTRXClient.Remove

  ' Stop possible timers
  StopTimers()

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop all timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

  Try tRFXComTRXBusy.Stop
  Try hRFXComTRXRelay.Close
  Try tRFXComTRXReset.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Socket closed by remote
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      If bSimulate = False Then ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  ' define timer for RFXComTRX reset
  tRFXComTRXReset = New Timer As "tRFXComTRXReset"
  tRFXComTRXReset.Delay = 1000
  tRFXComTRXReset.Stop

  ' define timer for Interface busy
  tRFXComTRXBusy = New Timer As "tRFXComTRXBusy"
  tRFXComTRXBusy.Stop

  ResetInterface()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)
  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data from serialport
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim bData As Byte

  If vVar Then
    For Each bData In vVar
      If bSimulate = False Then ProcessReceivedChar(bData)
    Next
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(aPacket As Byte[])

  ' Check if we have something connected
  If Not IsRunning Then
    WriteLog("ERROR: Can't send command, because plugin is in error state!")
    Return
  Endif

  ' add command to queue
  cQueue.Add(aPacket, Rnd)

  ' if controller is not busy process it
  If bInterfaceBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim aPacket As Byte[] = Null

  For Each aPacket In cQueue
    WriteCommand(aPacket, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRFXComTRXReset_Timer()

  tRFXComTRXReset.Stop
  ProtocolSetup("STATUS")

End

Public Sub StartRelay() As Boolean

  hRFXComTRXRelay = New ServerSocket As "RFXComTRXRelay"
  hRFXComTRXRelay.Type = Net.Internet
  hRFXComTRXRelay.Port = $iRelayPort
  ' we start listening for max 1 connection
  hRFXComTRXRelay.Listen(1)

  If hRFXComTRXRelay.Status = Net.Active Then
    hRelayTRXClient = New Object[]
    ' all ok
    Return True
  Else
    Return False
  Endif

End

Public Sub RFXComTRXRelay_Connection(sHost As String)

  hRelayTRXSocket = New Socket As "RelayTRXSocket"
  ' accept client
  If hRFXComTRXRelay.Status <= Net.Inactive Then Return
  WriteDebugLog("Relay connection request from client " & sHost)

  hRelayTRXSocket = hRFXComTRXRelay.Accept()
  hRelayTRXClient.Add(hRelayTRXSocket)
  If $bDebug Then
    If hRelayTRXSocket.Status = Net.Connected Then WriteLog("Relay client connection from IP address " & hRelayTRXSocket.RemoteHost & " (" & DNS.ResolveHost(hRelayTRXSocket.RemoteHost) & " ) accepted.")
  Endif

End

Public Sub RFXComTRXRelay_Read()

  Dim sBuf As Byte

  If Last.Status <> Net.Connected Then Return
  Try sBuf = Read #Last, Lof(Last)

End

Public Sub RFXComTRXRelay_Error()

  ' handle error
  Select Case hRFXComTRXRelay.Status
    Case Net.CannotCreateSocket
      WriteLog("Relay the system does not allow to create a socket.")
    Case Net.CannotBindSocket
      WriteLog("Relay cannot bind socket.")
    Case Net.CannotListen
      WriteLog("Relay cannot listen on port.")
  End Select

End

Public Sub RFXComTRXRelay_Closed()

  WriteLog("Relay client connection closed.")
  hRelayTRXClient.Remove(hRelayTRXClient.Find(Last))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ResetInterface()

  ProtocolSetup("RESET")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send Commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  Select UCase(sType)
    Case "X10", "ARC", "AB400", "WAVEMAN", "EMW200", "IMPULS", "RISINGSUN", "PHILIPSSBC", "ENERGENIE" ' Lighting1
      Lighting1(sType, sAddress, sCmd)
    Case "AC", "HEEU", "ANSLUT" ' Lighting2
      Lighting2(sType, sAddress, sCmd)
    Case "LIGHTWAVERF", "EMW100", "BBSB", "MDREMOTE", "RSL", "LIVOLO", "TRC02", "TRC022", "AOKE", "EURODOMEST", "AVANTEK", "IT" ' Lighting5
      Lighting5(sType, sAddress, sCmd)
    Case "BLYSS" ' Lighting6
      Lighting6(sType, sAddress, sCmd)
    Case "HARRISON" ' Curtain1
      Curtain1(sType, sAddress, sCmd)
    Case "HE105", "RTS10" ' Thermostat2
      Thermostat2(sType, sAddress, sCmd)
    Case "X10SECURITY", "X10SECDW", "X10SECMOTION", "X10SECREMOTE", "KD101", "SA30", "MEIANTECH" ' Security1
      Security1(sType, sAddress, sCmd)
    Case "BYRONSX", "BYRONMP" ' Chime
      Chime(sType, sAddress, sCmd)
    Case "SF01" ' Fan
      Fan(sType, sAddress, sCmd)
    Case "RFY", "RFXEXT" ' Somfy
      RFY(sType, sAddress, sCmd)
    Case "SMARTWARES" ' Smartwares Radiator Valves
      Radiator1(sType, sAddress, sCmd)
    Case "BLINDST0", "BLINDST1", "BLINDST2", "BLINDST3", "BLINDST4", "BLINDST5", "BLINDST6", "BLINDST7", "BLINDST8", "BLINDST9", "BLINDST10" ' Blinds1
      Blinds1(sType, sAddress, sCmd)
    Case Else
      WriteDebugLog(" The '" & sType & "' protocol is not (yet) supported by the RFXComTRX plugin!")
      Return
  End Select

Catch
  WriteLog("ERROR: SendCommand '" & Error.Text & "' at '" & Error.Where & "'")

End

' STRUCT {
'  BYTE packetlength;
'  BYTE packettype;
'  BYTE subtype;
'  BYTE seqnbr;
'  BYTE cmnd;
'  BYTE msg1; // SELECT receiver / transceiver frequency
'  BYTE msg2; // RFU
'  BYTE msg3; // mode SELECT bits
'  BYTE msg4; // mode SELECT bits
'  BYTE msg5; // mode SELECT bits
'  BYTE msg6; // RFU
'  BYTE msg7; // RFU
'  BYTE msg8; // RFU
'  BYTE msg9; // RFU
' }ICMND;

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' protocol commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ProtocolSetup(sType As String, Optional aMode As Byte[])

  Dim bCmd As New Byte[14]
  Dim sText As String

  bCmd[0] = &HD
  bCmd[1] = pTypeInterfaceControl
  bCmd[2] = sTypeInterfaceCommand
  bCmd[3] = iSeq

  Select sType
    Case "RESET"
      bCmd[4] = cmdRESET
      sText = ("Reset receiver/transceiver")
    Case "STATUS"
      bCmd[4] = cmdSTATUS
      sText = ("Get status")
    Case "SAVE"
      bCmd[4] = cmdSAVE
      sText = ("Save")
    Case "SETMODE"
      bCmd[4] = cmdSETMODE
      bCmd[5] = aMode[0] ' msg1 (hardcoded to trxType43392 for now)
      bCmd[7] = aMode[1] ' msg3
      bCmd[8] = aMode[2] ' msg4
      bCmd[9] = aMode[3] ' msg5
      sText = ("Set Mode")
    Case Else
      sText = ("Unknown cmd: " & sType)
      Return
  End Select

  QueueCommand(bCmd)

  If sType = "RESET" Then
    tRFXComTRXReset.Start
    WriteDebugLog("Resetting interface, 1 second timer started.")
  Endif
  If sType = "STATUS" Then bResetActive = False

  If $bDebug Then WriteDebugLog(sText & ": " & Util.ByteToHex(bCmd))

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

' ENUM TRESPONSE AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     msg = 4
' END ENUM

Private Sub Decode_RecXmitMessage()

  Select Case RecBuf[2]
    Case sTypeReceiverLockError
      WriteDebugLog("Subtype           = Receiver lock error.")
      WriteDebugLog("Sequence no.      = " & CStr(RecBuf[3]))
    Case sTypeTransmitterResponse
      WriteDebugLog("Subtype           = Transmitter Response.")
      WriteDebugLog("Sequence nbr      = " & CStr(RecBuf[3]))
      Select Case RecBuf[4]
        Case &H0
          WriteDebugLog("Response          = ACK, data correctly transmitted.")
        Case &H1
          WriteDebugLog("Response          = ACK, but transmit started after 6 seconds delay anyway with RF receive data detected.")
        Case &H2
          WriteDebugLog("Response          = NAK, transmitter did not lock on the requested transmit frequency.")
        Case &H3
          WriteDebugLog("Response          = NAK, AC address zero in id1-id4 not allowed.")
        Case Else
          WriteLog("ERROR: Unexpected message type=" & Hex(RecBuf[4]))
      End Select
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command to the interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function WriteCommand(bBuffer As Byte[], sKey As String)

  If $bDebug Then WriteDebugLog("> " & Util.ByteToHex(bBuffer.Copy(0, bBuffer[0])))

  ' Write the complete string - not byte-for-byte
  If $sInterface = "tcp" Then
    hMySocket.Write(bBuffer)
  Else
    hMySerial.Write(bBuffer)
  Endif

  Inc iSeq
  If iSeq = 256 Then iSeq = 1

  ' remove sent command from queue
  cQueue.Remove(sKey)

  tRFXComTRXBusy.Delay = 50 ' 50mS (initial test value)
  tRFXComTRXBusy.Start
  bInterfaceBusy = True

Catch
  WriteLog("ERROR : WriteCommand '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' interface busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRFXComTRXBusy_Timer()

  bInterfaceBusy = False
  tRFXComTRXBusy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then WriteDebugLog("Sending command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' inject packet into parser.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Simulate(sPacket As String)

  Dim iCnt As Integer

  If $bDebug Then WriteDebugLog("RFXCom transceiver Simulate String: " & sPacket)

  For iCnt = 1 To Len(sPacket) Step 2
    ProcessReceivedChar(Val("&H" & Mid(sPacket, iCnt, 2)))
  Next
  bSimulate = False

Catch ' some errors
  WriteLog("ERROR: Simulate '" & Error.Text & "' at '" & Error.Where & "'")

End

Private Sub ProcessReceivedChar(bTemp As Byte)

  ' ignore data until interface reset
  If bResetActive Then Return

  ' relay incoming data to relay port
  If $bRelayEnabled Then
    If hRelayTRXSocket.Status = Net.Connected Then Try Write #hRelayTRXSocket, bTemp As Byte
  Endif

  Main.ControlLed("RFXCom", "On")
  If $bRecBytes = 0 Then ' 1st char of a packet received
    If bTemp = 0 Then Return ' ignore 1st char if 0
  Endif

  Try RecBuf[$bRecBytes] = bTemp ' store received char
  If Error Then
    If $bDebug Then WriteDebugLog("< " & Util.ByteToHex(RecBuf) & " (INVALID PACKET: BUFFER OVERFLOW)")
    $bRecBytes = 0 ' temp hack (overflow)
    Return
  Endif

  Inc $bRecBytes ' increment char counter

  If $bRecBytes > RecBuf[0] Then ' all bytes of the packet received?
    If $bDebug Then WriteDebugLog("< " & Util.ByteToHex(RecBuf.Copy(0, $bRecBytes)))
    Decode_Messages()  ' decode message
    $bRecBytes = 0  ' set to zero to receive next message

    ' Disable RFXCom Led
    Main.ControlLed("RFXCom", "Off")
  Endif

End

Private Sub Decode_Messages()

  Select Case RecBuf[1]
    Case pTypeInterfaceMessage
      WriteDebugLog("Packettype        = Interface Message")
      Decode_InterfaceMessage()

    Case pTypeRecXmitMessage
      WriteDebugLog("Packettype        = Receiver/Transmitter Message")
      Decode_RecXmitMessage()

    Case pTypeUndecoded
      WriteDebugLog("Packettype        = Undecoded RF Message")
      Decode_UnDecoded()

    Case pTypeLighting1
      WriteDebugLog("Packettype    = Lighting1")
      Decode_Lighting1()

    Case pTypeLighting2
      WriteDebugLog("Packettype    = Lighting2")
      Decode_Lighting2()

    Case pTypeLighting3
      WriteDebugLog("Packettype    = Lighting3")
      Decode_Lighting3()

    Case pTypeLighting4
      WriteDebugLog("Packettype    = Lighting4")
      Decode_Lighting4()

    Case pTypeLighting5
      WriteDebugLog("Packettype    = Lighting5")
      Decode_Lighting5()

    Case pTypeLighting6
      WriteDebugLog("Packettype    = Lighting6")
      Decode_Lighting6()

    Case pTypeChime
      WriteDebugLog("Packettype    = Chime")
      Decode_Chime()

    Case pTypeCurtain1
      WriteDebugLog("Packettype    = Curtain1")
      Decode_Curtain1()

    Case pTypeSecurity1
      WriteDebugLog("Packettype    = Security1")
      Decode_Security1()

    Case pTypeCamera1
      WriteDebugLog("Packettype    = Camera1")
      Decode_Camera1()

    Case pTypeBlinds
      WriteDebugLog("Packettype    = Blinds1")
      Decode_Blinds1()

    Case pTypeRemote
      WriteDebugLog("Packettype    = Remote control & IR")
      Decode_Remote()

    Case pTypeThermostat1
      WriteDebugLog("Packettype    = Thermostat1")
      Decode_Thermostat1()

    Case pTypeThermostat2
      WriteDebugLog("Packettype    = Thermostat2")
      Decode_Thermostat2()

    Case pTypeThermostat3
      WriteDebugLog("Packettype    = Thermostat3")
      Decode_Thermostat3()

    Case pTypeBBQ
      WriteDebugLog("Packettype    = BBQ")
      Decode_BBQ()

    Case pTypeTEMP_RAIN
      WriteDebugLog("Packettype    = TEMP_RAIN")
      Decode_TempRain()

    Case pTypeTEMP
      WriteDebugLog("Packettype    = TEMP")
      Decode_Temp()

    Case pTypeHUM
      WriteDebugLog("Packettype    = HUM")
      Decode_Hum()

    Case pTypeTEMP_HUM
      WriteDebugLog("Packettype    = TEMP_HUM")
      Decode_TempHum()

    Case pTypeBARO
      WriteDebugLog("Packettype    = BARO")
      Decode_Baro()

    Case pTypeTEMP_HUM_BARO
      WriteDebugLog("Packettype    = TEMP_HUM_BARO")
      Decode_TempHumBaro()

    Case pTypeRAIN
      WriteDebugLog("Packettype    = RAIN")
      Decode_Rain()

    Case pTypeWIND
      WriteDebugLog("Packettype    = WIND")
      Decode_Wind()

    Case pTypeUV
      WriteDebugLog("Packettype    = UV")
      Decode_Uv()

    Case pTypeDT
      WriteDebugLog("Packettype    = DT")
      Decode_DateTime()

    Case pTypeCURRENT
      WriteDebugLog("Packettype    = CURRENT")
      Decode_Current()

    Case pTypeENERGY
      WriteDebugLog("Packettype    = ENERGY")
      Decode_Energy()

    Case pTypeCURRENTENERGY
      WriteDebugLog("Packettype    = CURRENT_ENERGY")
      Decode_CurrentEnergy()

    Case pTypePOWER
      WriteDebugLog("Packettype    = POWER")
      Decode_Power()

    Case pTypeGAS
      WriteDebugLog("Packettype    = GAS")
      Decode_Gas()

    Case pTypeWATER
      WriteDebugLog("Packettype    = WATER")
      Decode_Water()

    Case pTypeWEIGHT
      WriteDebugLog("Packettype    = WEIGHT")
      Decode_Weight()

    Case pTypeRFXSensor
      WriteDebugLog("Packettype    = RFXSensor")
      Decode_RFXSensor()

    Case pTypeRFXMeter
      WriteDebugLog("Packettype    = RFXMeter")
      Decode_RFXMeter()

    Case pTypeFS20
      WriteDebugLog("Packettype    = FS20")
      Decode_FS20()

    Case Else
      WriteLog("ERROR: Unknown Packet type=" & Hex(RecBuf[1], 2))
  End Select

Catch ' some errors
  WriteLog("ERROR: Decode_Messages '" & Error.Text & "' at '" & Error.Where & "'")

End

Private Sub ConvertAddress(sAddr As String) As String

  Dim aAddress As String[] = Split(sAddr, " ")

  If $bOldAddrFmt Then
    Return UCase(aAddress[0] & "[" & Replace(aAddress[1], "0x", "") & "]")
  Else
    Return LCase(aAddress[0] & " 0x" & Hex(aAddress[1]))
  Endif

Catch
  Return sAddr

End

' ENUM IRESPONSE AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     cmnd = 4
'     msg1 = 5
'     msg2 = 6
'     msg3 = 7
'     msg4 = 8
'     msg5 = 9
'     msg6 = 10
'     msg7 = 11
'     msg8 = 12
'     msg9 = 13
' END ENUM

Private Sub Decode_InterfaceMessage()

  Select Case RecBuf[2]
    Case sTypeInterfaceResponse
      WriteDebugLog("Subtype           = Interface Response")
      WriteDebugLog("Sequence no.      = " & CStr(RecBuf[3]))
      Select Case RecBuf[4]
        Case cmdSTATUS, cmdSETMODE, cmdSAVE, cmd310, cmd315, cmd800, cmd800F, cmd830, cmd830F, cmd835, cmd835F, cmd895
          Select Case RecBuf[4]
            Case cmdSTATUS
              WriteDebugLog("Response on cmnd  = Get Status")
            Case cmdSETMODE
              WriteDebugLog("Response on cmnd  = Set Mode")
            Case cmdSAVE
              WriteDebugLog("Response on cmnd  = Save Settings")
            Case cmd310
              WriteDebugLog("Response on cmnd  = Select 310MHz")
            Case cmd315
              WriteDebugLog("Response on cmnd  = Select 315MHz")
            Case cmd800
              WriteDebugLog("Response on cmnd  = Select 868.00MHz")
            Case cmd800F
              WriteDebugLog("Response on cmnd  = Select 868.00MHz FSK")
            Case cmd830
              WriteDebugLog("Response on cmnd  = Select 868.30MHz")
            Case cmd830F
              WriteDebugLog("Response on cmnd  = Select 868.30MHz FSK")
            Case cmd835
              WriteDebugLog("Response on cmnd  = Select 868.35MHz")
            Case cmd835F
              WriteDebugLog("Response on cmnd  = Select 868.35MHz FSK")
            Case cmd895
              WriteDebugLog("Response on cmnd  = Select 868.95MHz")
            Case Else
              WriteDebugLog("Error: unknown response")
          End Select

          Select Case RecBuf[5]
            Case recType310
              WriteDebugLog("Transceiver type  = 310MHz")
            Case recType315
              WriteDebugLog("Receiver type     = 315MHz")
            Case recType43392
              WriteDebugLog("Receiver type     = 433.92MHz (receive only)")
            Case trxType43392
              WriteDebugLog("Transceiver type  = 433.92MHz")
            Case recType86800
              WriteDebugLog("Receiver type     = 868.00MHz")
            Case recType86800FSK
              WriteDebugLog("Receiver type     = 868.00MHz FSK")
            Case recType86830
              WriteDebugLog("Receiver type     = 868.30MHz")
            Case recType86830FSK
              WriteDebugLog("Receiver type     = 868.30MHz FSK")
            Case recType86835
              WriteDebugLog("Receiver type     = 868.35MHz")
            Case recType86835FSK
              WriteDebugLog("Receiver type     = 868.35MHz FSK")
            Case recType86895
              WriteDebugLog("Receiver type     = 868.95MHz")
            Case Else
              WriteDebugLog("Receiver type     = Unknown")
          End Select

          $iReceiverType = RecBuf[5]
          $sHardwareVersion = RecBuf[11] & "." & RecBuf[12]
          $sFirmwareType = ""

          ' If the interface message is bigger then 14 - most likely 1001+ firmware
          If $bRecBytes > 14 Then
            $iFirmWareVersion = 1000 + RecBuf[6]
            Select RecBuf[14]
              Case &H01 ' Type1
                $sFirmwareType = "Type1"
              Case &H02 ' Type2
                $sFirmwareType = "Type2"
              Case &H03 ' Ext1/2
                $sFirmwareType = "Ext"
            End Select
          Else
            $iFirmWareVersion = RecBuf[6]
          Endif

          WriteDebugLog("Firmware version  = " & $iFirmWareVersion)
          WriteDebugLog("Hardware version  = " & $sHardwareVersion)
          If $sFirmwareType Then WriteDebugLog("Firmware type     = " & $sFirmwareType)

          ' Clear the enabled protocol list
          $aEnabledProtocols.Clear()

          If (RecBuf[7] And msg3undec) <> 0 Then
            WriteDebugLog("Undecoded              enabled")
            $aEnabledProtocols.Add("Undec")
          Else
            WriteDebugLog("Undecoded              disabled")
          Endif
          If (RecBuf[9] And msg5X10) <> 0 Then
            WriteDebugLog("X10                    enabled")
            $aEnabledProtocols.Add("X10")
          Else
            WriteDebugLog("X10                    disabled")
          Endif
          If (RecBuf[9] And msg5ARC) <> 0 Then
            WriteDebugLog("ARC HomeEasy, ...      enabled")
            $aEnabledProtocols.Add("ARC")
          Else
            WriteDebugLog("ARC HomeEasy, ...      disabled")
          Endif
          If (RecBuf[9] And msg5AC) <> 0 Then
            WriteDebugLog("AC HomeEasy, KAKU, ... enabled")
            $aEnabledProtocols.Add("AC")
          Else
            WriteDebugLog("AC HomeEasy, KAKU, ... disabled")
          Endif
          If (RecBuf[9] And msg5HOMEEASYEU) <> 0 Then
            WriteDebugLog("HomeEasy EU            enabled")
            $aEnabledProtocols.Add("HomeEasyEU")
          Else
            WriteDebugLog("HomeEasy EU            disabled")
          Endif
          If (RecBuf[9] And msg5MEIANTECH) <> 0 Then
            WriteDebugLog("Meiantech/Atlantic     enabled")
            $aEnabledProtocols.Add("Meiantech")
          Else
            WriteDebugLog("Meiantech/Atlantic     disabled")
          Endif
          If (RecBuf[9] And msg5OREGON) <> 0 Then
            WriteDebugLog("Oregon Scientific      enabled")
            $aEnabledProtocols.Add("Oregon")
          Else
            WriteDebugLog("Oregon Scientific      disabled")
          Endif
          If (RecBuf[9] And msg5ATI) <> 0 Then
            WriteDebugLog("ATI                    enabled")
            $aEnabledProtocols.Add("ATI")
          Else
            WriteDebugLog("ATI                    disabled")
          Endif
          If (RecBuf[9] And msg5VISONIC) <> 0 Then
            WriteDebugLog("Visonic                enabled")
            $aEnabledProtocols.Add("Visonic")
          Else
            WriteDebugLog("Visonic                disabled")
          Endif
          If (RecBuf[8] And msg4MERTIK) <> 0 Then
            WriteDebugLog("Mertik Maxitrol        enabled")
            $aEnabledProtocols.Add("Mertik")
          Else
            WriteDebugLog("Mertik Maxitrol        disabled")
          Endif
          If (RecBuf[8] And msg4AD) <> 0 Then
            WriteDebugLog("AD LightwaveRF         enabled")
            $aEnabledProtocols.Add("AD")
          Else
            WriteDebugLog("AD LightwaveRF         disabled")
          Endif
          If (RecBuf[8] And msg4HIDEKI) <> 0 Then
            WriteDebugLog("Hideki/UPM             enabled")
            $aEnabledProtocols.Add("Hideki")
          Else
            WriteDebugLog("Hideki/UPM             disabled")
          Endif
          If (RecBuf[8] And msg4LACROSSE) <> 0 Then
            WriteDebugLog("La Crosse              enabled")
            $aEnabledProtocols.Add("LaCrosse")
          Else
            WriteDebugLog("La Crosse              disabled")
          Endif
          If (RecBuf[8] And msg4FS20) <> 0 Then
            WriteDebugLog("FS20                   enabled")
            $aEnabledProtocols.Add("FS20")
          Else
            WriteDebugLog("FS20                   disabled")
          Endif
          If (RecBuf[8] And msg4PROGUARD) <> 0 Then
            WriteDebugLog("ProGuard               enabled")
            $aEnabledProtocols.Add("ProGuard")
          Else
            WriteDebugLog("ProGuard               disabled")
          Endif
          If (RecBuf[8] And msg4BlindsT0) <> 0 Then
            WriteDebugLog("BlindsT0               enabled")
            $aEnabledProtocols.Add("BlindsT0")
          Else
            WriteDebugLog("BlindsT0               disabled")
          Endif
          If (RecBuf[8] And msg4BlindsT1) <> 0 Then
            WriteDebugLog("BlindsT1/T2/T3/T4      enabled")
            $aEnabledProtocols.Add("BlindsT1")
          Else
            WriteDebugLog("BlindsT1/T2/T3/T4      disabled")
          Endif
          If (RecBuf[7] And msg3AE) <> 0 Then
            WriteDebugLog("AE Blyss               enabled")
            $aEnabledProtocols.Add("AE")
          Else
            WriteDebugLog("AE Blyss               disabled")
          Endif
          If (RecBuf[7] And msg3RUBICSON) <> 0 Then
            WriteDebugLog("Rubicson               enabled")
            $aEnabledProtocols.Add("RUBiCSON")
          Else
            WriteDebugLog("Rubicson               disabled")
          Endif
          If (RecBuf[7] And msg3FINEOFFSET) <> 0 Then
            WriteDebugLog("FineOffset             enabled")
            $aEnabledProtocols.Add("FineOffset")
          Else
            WriteDebugLog("FineOffset             disabled")
          Endif
          If (RecBuf[7] And msg3LIGHTING4) <> 0 Then
            WriteDebugLog("Lighting4              enabled")
            $aEnabledProtocols.Add("Lighting4")
          Else
            WriteDebugLog("Lighting4              disabled")
          Endif
          If (RecBuf[7] And msg3RSL) <> 0 Then
            WriteDebugLog("RSL                    enabled")
            $aEnabledProtocols.Add("RSL")
          Else
            WriteDebugLog("RSL                    disabled")
          Endif
          If (RecBuf[7] And msg3BYRONSX) <> 0 Then
            WriteDebugLog("ByronSX                enabled")
            $aEnabledProtocols.Add("ByronSX")
          Else
            WriteDebugLog("ByronSX                disabled")
          Endif
          If (RecBuf[7] And msg3RFU6) <> 0 Then
            WriteDebugLog("RFU protocol 6         enabled")
            $aEnabledProtocols.Add("RFU6")
          Else
            WriteDebugLog("RFU protocol 6         disabled")
          Endif
          If (RecBuf[10] And msg6KEELOQ) <> 0 Then
            WriteDebugLog("Keeloq                 enabled")
          Else
            WriteDebugLog("Keeloq                 disabled")
          Endif
          If (RecBuf[10] And msg6HomeConfort) <> 0 Then
            WriteDebugLog("Home Confort           enabled")
          Else
            WriteDebugLog("Home Confort           disabled")
          Endif

        Case Else
          WriteLog("ERROR: Unexpected response for Packet type=" & Hex(RecBuf[1]) & ", Sub type=" & Hex(RecBuf[2]) & " msg=" & Hex(RecBuf[4]))
          Return
      End Select
    Case sTypeInterfaceUnknownRTSremote
      WriteDebugLog("Subtype           = Unknown RTS remote, Use the Cmndr to create a remote in the RFXtrx433E.")
      WriteDebugLog("Sequence no.      = " & CStr(RecBuf[3]))
      Return
    Case sTypeInterfaceNoExtendedHardware
      WriteDebugLog("Subtype           = No RFXtrx433E hardware detected.")
      WriteDebugLog("Sequence no.      = " & CStr(RecBuf[3]))
      Return
    Case sTypeInterfaceRFYRemoteList
      If RecBuf[6] = 0 And If RecBuf[7] = 0 And If RecBuf[8] = 0 And If RecBuf[9] = 0 Then
        WriteDebugLog("Subtype           = RFY remote #" & RecBuf[5] & " is empty.")
      Else
        WriteDebugLog("Subtype           = RFY remote #" & RecBuf[5] & " has ID 0x" & Hex(RecBuf[6], 1) & Hex(RecBuf[7], 2) & Hex(RecBuf[8], 2) & " " & Hex(RecBuf[9], 1))
      End If
      WriteDebugLog("Sequence no.      = " & CStr(RecBuf[3]))
      Return
    Case sTypeInterfaceWrongCommand
      WriteDebugLog("Subtype           = Protocol not supported in this firmware version, wrong command or flash the latest firmware!")
      WriteDebugLog("Sequence no.      = " & CStr(RecBuf[3]))
      Return
  End Select

End

' ENUM ICMD AS Integer
'        packetlength = 0
'        packettype = 1
'        subtype = 2
'        seqnbr = 3
'        cmnd = 4
'        msg1 = 5
'        msg2 = 6
'        msg3 = 7
'        msg4 = 8
'        msg5 = 9
'        msg6 = 10
'        msg7 = 11
'        msg8 = 12
'        msg9 = 13
'        size = 13

' ENUM UNDECODED AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     msg1 = 4
'     ' msg2 to msg32 depending on RF packet length
'     size = 36 ' maximum size
'     pType = &H3
'     sTypeUac = &H0
'     sTypeUarc = &H1
'     sTypeUati = &H2
'     sTypeUhideki = &H3
'     sTypeUlacrosse = &H4
'     sTypeUlwrf = &H5
'     sTypeUmertik = &H6
'     sTypeUoregon1 = &H7
'     sTypeUoregon2 = &H8
'     sTypeUoregon3 = &H9
'     sTypeUproguard = &HA
'     sTypeUvisonic = &HB
'     sTypeUnec = &HC
'     sTypeUfs20 = &HD
' END ENUM

Private Sub Decode_UnDecoded()

  WriteDebugLog("UnDecoded ", False)
  Select Case RecBuf[2]
    Case sTypeUac
      WriteDebugLog("AC:", False)
    Case sTypeUarc
      WriteDebugLog("ARC:", False)
    Case sTypeUati
      WriteDebugLog("ATI:", False)
    Case sTypeUhideki
      WriteDebugLog("HIDEKI/UPM:", False)
    Case sTypeUlacrosse
      WriteDebugLog("LACROSSE/VINKING:", False)
    Case sTypeUad
      WriteDebugLog("AD:", False)
    Case sTypeUmertik
      WriteDebugLog("MERTIK:", False)
    Case sTypeUoregon1
      WriteDebugLog("OREGON1:", False)
    Case sTypeUoregon2
      WriteDebugLog("OREGON2:", False)
    Case sTypeUoregon3
      WriteDebugLog("OREGON3:", False)
    Case sTypeUproguard
      WriteDebugLog("PROGUARD:", False)
    Case sTypeUvisonic
      WriteDebugLog("VISONIC:", False)
    Case sTypeUnec
      WriteDebugLog("NEC:", False)
    Case sTypeUfs20
      WriteDebugLog("FS20:", False)
    Case sTypeUblinds
      WriteDebugLog("BLINDS:", False)
    Case sTypeUrubicson
      WriteDebugLog("RUBICSON:", False)
    Case sTypeUae
      WriteDebugLog("AE:", False)
    Case sTypeUfineoffset
      WriteDebugLog("FINEOFFSET:", False)
    Case sTypeUrgb
      WriteDebugLog("RGB:", False)
    Case sTypeUrts
      WriteDebugLog("SOMFY RTS:", False)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]) & " " & Util.ByteToHex(RecBuf.Copy(4, RecBuf[0] - 4)))
  End Select

End

' ENUM LIGHTING1 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     housecode = 4
'     unitcode = 5
'     cmnd = 6
'     filler = 7 'bits 3-0
'     rssi = 7   'bits 7-4
'     size = 7
' END ENUM

Private Sub Decode_Lighting1()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  ' only X10 and ARC are decoded in RFXTrx
  Select Case RecBuf[2]
    Case sTypeX10
      sType = "X10"
      WriteDebugLog("Subtype       = X10")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("Housecode     = " & Chr(RecBuf[4]))
      WriteDebugLog("Unitcode      = " & CStr(RecBuf[5]))
      sAddress = Chr(RecBuf[4]) & Format(CStr(RecBuf[5]), "00")
      Select Case RecBuf[6]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H2
          sCmd = "Dim"
        Case &H3
          sCmd = "Bright"
        Case &H5
          sCmd = "All On"
        Case &H6
          sCmd = "All Off"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case sTypeARC
      sType = "ARC"
      WriteDebugLog("Subtype       = ARC")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("Housecode     = " & Chr(RecBuf[4]))
      WriteDebugLog("Unitcode      = " & CStr(RecBuf[5]))
      sAddress = Chr(RecBuf[4]) & Format(CStr(RecBuf[5]), "00")
      Select Case RecBuf[6]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H5
          sCmd = "All On"
        Case &H6
          sCmd = "All Off"
        Case &H7
          sCmd = "Chime"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[7], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, UCase(sType))
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM LIGHTING2 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     id4 = 7
'     unitcode = 8
'     cmnd = 9
'     level = 10
'     filler = 11 'bits 3-0
'     rssi = 11   'bits 7-4
'     size = 11
' END ENUM

Private Sub Decode_Lighting2()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeAC, sTypeHEU, sTypeANSLUT
      Select Case RecBuf[2]
        Case sTypeAC
          sType = "AC"
          WriteDebugLog("Subtype       = AC")
        Case sTypeHEU
          sType = "HEEU"
          WriteDebugLog("Subtype       = HomeEasy EU")
        Case sTypeANSLUT
          sType = "Anslut"
          WriteDebugLog("Subtype       = ANSLUT")
      End Select
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4]) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & Hex(RecBuf[7], 2) & " " & CStr(RecBuf[8])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[9]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H2
          sCmd = "Dim " & CStr(RecBuf[10])
        Case &H3
          sCmd = "Group Off"
        Case &H4
          sCmd = "Group On"
        Case &H5
          sCmd = "Dim " & CStr(RecBuf[10])
          WriteDebugLog("Command       = Group " & sCmd)
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[11], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, UCase(sType))
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM LIGHTING3 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     system = 4
'     channel8_1 = 5
'     channel10_9 = 6
'     cmnd = 7
'     filler = 8  'bits 3-0
'     rssi = 8    'bits 7-4
'     size = 8
' END ENUM

Private Sub Decode_Lighting3()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeKoppla
      sType = "Koppla"
      WriteDebugLog("Subtype       = Ikea Koppla")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      Select Case RecBuf[7]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H20
          sCmd = "Dim " & CStr(RecBuf[6])
        Case &H21
          sCmd = "Program"
        Case Else
          If RecBuf[7] >= &H10 And RecBuf[7] < &H18 Then
            sCmd = "Dim"
          Else If RecBuf[7] >= &H18 And RecBuf[7] < &H20 Then
            sCmd = "Bright"
          Else
            WriteDebugLog("Command       = Unknown")
            Return
          Endif
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, UCase(sType))
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM LIGHTING4 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     cmd1 = 4
'     cmd2 = 5
'     cmd3 = 6
'     pulsehigh = 7
'     pulselow = 8
'     filler = 9
'     size = 9
' END ENUM

Private Sub Decode_Lighting4()

  Dim sAddress, sType As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypePT2262
      sType = "PT2262"
      WriteDebugLog("Subtype       = PT2262")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2)
      WriteDebugLog("ID            = " & sAddress)
      WriteDebugLog("PulseHigh     = " & Hex(RecBuf[7], 2))
      WriteDebugLog("PulseLow      = " & Hex(RecBuf[8], 2))
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  If iDeviceId Then
    Select Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId)
      Case "PIR"
        ' motion/no motion
        Devices.ValueUpdate(iDeviceId, 1, "Motion", Devices.ValueType_Security)
      Case "Door/Window Sensor"
        ' open/closed
        Devices.ValueUpdate(iDeviceId, 1, "Open", Devices.ValueType_Security)
      Case Else
        WriteLog("ERROR: Unknown Device type for Lighting4 sensor!")
    End Select
  Endif

End

' ENUM LIGHTING5 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     unitcode = 7
'     cmnd = 8
'     level = 9
'     filler = 10 'bits 3-0
'     rssi = 10   'bits 7-4
'     size = 10
' END ENUM

Private Sub Decode_Lighting5()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeLightwaveRF
      sType = "LightwaveRF"
      WriteDebugLog("Subtype       = LightwaveRF")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & " " & CStr(RecBuf[7])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[8]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H2
          sCmd = "Group Off"
        Case &H3
          sCmd = "Group Mood 1"
        Case &H4
          sCmd = "Group Mood 2"
        Case &H5
          sCmd = "Group Mood 3"
        Case &H6
          sCmd = "Group Mood 4"
        Case &H7
          sCmd = "Group Mood 5"
        Case &HA
          sCmd = "UnLock"
        Case &HB
          sCmd = "Lock"
        Case &HC
          sCmd = "All Lock"
        Case &HD
          sCmd = "Close relay"
        Case &HE
          sCmd = "Stop relay"
        Case &HF
          sCmd = "Open relay"
        Case &H10
          sCmd = "Dim " & CInt(RecBuf[9] * 3.2)
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case sTypeEMW100
      sType = "EMW100"
      WriteDebugLog("Subtype       = EMW100")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & " " & CStr(RecBuf[7])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[8]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H2
          sCmd = "Learn"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case sTypeBBSB
      sType = "BBSB"
      WriteDebugLog("Subtype       = BBSB New")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2) & " " & CStr(RecBuf[7])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[8]
        Case &H0
          sCmd = "Off"
        Case &H1
          sCmd = "On"
        Case &H2
          sCmd = "Group Off"
        Case &H3
          sCmd = "Group On"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[10], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, UCase(sType))
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM LIGHTING6 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     groupcode = 6
'     unitcode = 7
'     cmnd = 8
'     cmndseqnbr = 9
'     rfu = 10
'     filler = 11 'bits 3-0
'     rssi = 11   'bits 7-4
'     size = 11
' END ENUM

Private Sub Decode_Lighting6()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeBlyss
      sType = "Blyss"
      WriteDebugLog("Subtype       = Blyss")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & " " & CStr(RecBuf[7])
      WriteDebugLog("ID            = " & sAddress)
      WriteDebugLog("Group code    = " & Chr(RecBuf[6]))
      WriteDebugLog("Unit code    = " & RecBuf[7])
      Select Case RecBuf[8]
        Case &H0
          sCmd = "On"
        Case &H1
          sCmd = "Off"
        Case &H2
          sCmd = "Group On"
        Case &H3
          sCmd = "Group Off"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
      WriteDebugLog("Cmnd Sequence = " & RecBuf[9])
      WriteDebugLog("RFU           = " & RecBuf[10])
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, UCase(sType))
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM SECURITY1 AS Integer
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id1 = 4
'      id2 = 5
'      id3 = 6
'      status = 7
'      battery_level = 8  'bits 3-0
'      rssi = 8           'bits 7-4
'      filler = 8
'      size = 8
'  END ENUM

Private Sub Decode_Security1()

  Dim sAddress, sType, sCmd As String
  Dim sTamper As String = " "
  Dim sBatt As String = "OK"
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeSecX10
      sType = "X10SecDW"
      WriteDebugLog("Subtype       = X10 security")
    Case sTypeSecX10M
      sType = "X10SecMotion"
      WriteDebugLog("Subtype       = X10 security motion")
    Case sTypeSecX10R
      sType = "X10SecRemote"
      WriteDebugLog("Subtype       = X10 security remote")
    Case sTypeKD101
      sType = "KD101"
      WriteDebugLog("Subtype       = KD101 smoke detector")
    Case sTypePowercodeSensor
      sType = "PowerCodeDW"
      WriteDebugLog("Subtype       = Visonic PowerCode sensor - primary contact")
    Case sTypePowercodeMotion
      sType = "PowerCodeMotion"
      WriteDebugLog("Subtype       = Visonic PowerCode motion")
    Case sTypeCodesecure
      sType = "CodeSecure"
      WriteDebugLog("Subtype       = Visonic CodeSecure")
    Case sTypePowercodeAux
      sType = "PowerCodeAux"
      WriteDebugLog("Subtype       = Visonic PowerCode sensor - auxiliary contact")
    Case sTypeMeiantech
      sType = "Meiantech"
      WriteDebugLog("Subtype       = Meiantech/Atlantic/Aidebao")
    Case sTypeSA30
      sType = "SA30"
      WriteDebugLog("Subtype       = SA30 smoke detector")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress("x10sec " & CStr(RecBuf[4] * 65536 + RecBuf[5] * 256 + RecBuf[6]))
  WriteDebugLog("ID1-3         = " & sAddress)

  Select Case RecBuf[7]
    Case sStatusNormal
      sCmd = "Normal"
    Case sStatusNormalDelayed
      sCmd = "Normal Delayed"
    Case sStatusAlarm
      sCmd = "Alarm"
    Case sStatusAlarmDelayed
      sCmd = "Alarm Delayed"
    Case sStatusMotion
      sCmd = "Motion"
    Case sStatusNoMotion
      sCmd = "No Motion"
    Case sStatusPanic
      sCmd = "Panic"
    Case sStatusPanicOff
      sCmd = "Panic End"
    Case sStatusIRBeam
      sTamper = "IR beam blocked"
    Case sStatusArmAway
      sCmd = "Arm Away"
    Case sStatusArmAwayDelayed
      sCmd = "Arm Away Delayed"
    Case sStatusArmHome
      sCmd = "Arm Home"
    Case sStatusArmHomeDelayed
      sCmd = "Arm Home Delayed"
    Case sStatusDisarm
      sCmd = "Disarm"
    Case sStatusLightOff
      sCmd = "Light Off"
    Case sStatusLightOn
      sCmd = "Light On"
    Case sStatusLighting2Off
      sCmd = "Lighting2 Off"
    Case sStatusLighting2On
      sCmd = "Lighting2 On"
    Case sStatusDark
      sCmd = "Dark"
    Case sStatusLight
      sCmd = "Light"
    Case sStatusBatLow
      sCmd = "Battery low MS10 or XX18 sensor"
      sBatt = "Low"
    Case sStatusPairKD101
      sCmd = "Pair"
    Case sStatusNormalTamper
      sCmd = "Normal"
      sTamper = "Tamper"
    Case sStatusNormalDelayedTamper
      sCmd = "Normal Delayed"
      sTamper = "Tamper"
    Case sStatusAlarmTamper
      sCmd = "Alarm"
      sTamper = "Tamper"
    Case sStatusAlarmDelayedTamper
      sCmd = "Alarm Delayed"
      sTamper = "Tamper"
    Case sStatusMotionTamper
      sCmd = "Motion"
      sTamper = "Tamper"
    Case sStatusNoMotionTamper
      sCmd = "No Motion"
      sTamper = "Tamper"
    Case Else
      WriteDebugLog("Status        = Unknown")
      Return
  End Select

  WriteDebugLog("Status        = " & sCmd & " " & sTamper)

  If sType <> sTypeKD101 And If sType <> sTypeSA30 Then ' they don't support battery low
    If (RecBuf[8] And &HF) = 0 Then
      sBatt = "Low"
    Else
      sBatt = "OK"
    Endif
    WriteDebugLog("Battery level = " & sBatt)
  Endif
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value & battery status
  If iDeviceId Then
    ' cmd
    Devices.ValueUpdate(iDeviceId, 1, sCmd, Devices.ValueType_Security)
    Devices.ValueUpdate(iDeviceId, 2, sTamper, Devices.ValueType_Tamper)
    If sType <> sTypeKD101 And If sType <> sTypeSA30 Then Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM CAMERA1 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     housecode = 4
'     cmnd = 5
'     filler = 6 'bits 3-0
'     rssi = 6   'bits 7-4
'     size = 6
' END ENUM

Private Sub Decode_Camera1()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeNinja
      sType = "ninja"
      WriteDebugLog("Subtype       = X10 Ninja/Robocam")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = sType & " " & Chr(RecBuf[4])
      WriteDebugLog("Address       = " & sAddress)
      Select Case RecBuf[5]
        Case &H0
          sType = "Left"
        Case &H1
          sType = "Right"
        Case &H2
          sType = "Up"
        Case &H3
          sType = "Down"
        Case &H4
          sType = "Preset 1"
        Case &H5
          sType = "Preset 1 Program"
        Case &H6
          sType = "Preset 2"
        Case &H7
          sType = "Preset 2 Program"
        Case &H8
          sType = "Preset 3"
        Case &H9
          sType = "Preset 3 Program"
        Case &HA
          sType = "Preset 4"
        Case &HB
          sType = "Preset 4 Program"
        Case &HC
          sType = "Center"
        Case &HD
          sType = "Center Program"
        Case &HE
          sType = "Sweep"
        Case &HF
          sType = "Sweep Program"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[6], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM BLINDS1 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     unitcode = 7
'     cmnd = 8
'     filler = 9 'bits 3-0
'     rssi = 9   'bits 7-4
'     size = 9
' END ENUM

Private Sub Decode_Blinds1()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeBlindsT0
      sType = "Blinds0"
      WriteDebugLog("Subtype       = Safy / RollerTrol / Hasta new")
    Case sTypeBlindsT1
      sType = "Blinds1"
      WriteDebugLog("Subtype       = Hasta old")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ": " & Hex(RecBuf[2]))
  End Select
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = sType & " " & Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2) & Hex(RecBuf[6], 2)
  WriteDebugLog("Address       = " & sAddress)
  If RecBuf[7] = 15 Then
    WriteDebugLog("Unit          = All")
  Else
    WriteDebugLog("Unit          = " & RecBuf[7])
  Endif

  Select Case RecBuf[8]
    Case &H0
      sCmd = "Open"
    Case &H1
      sCmd = "Stop"
    Case &H2
      sCmd = "Close"
    Case &H3
      sCmd = "Confirm"
    Case &H4
      sCmd = "Set Limit"
    Case Else
      WriteDebugLog("Command       = Unknown")
      Return
  End Select

  WriteDebugLog("Command       = " & sCmd)
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd, Devices.ValueType_Blinds)

End

' ENUM REMOTE AS Integer
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id = 4
'      cmnd = 5
'      toggle = 6       'bit 0 
'      filler = 6       'bits 3-1 
'      rssi = 6         'bits 7-4 
'      size = 6
'  END ENUM

Private Sub Decode_Remote()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeATI
      sType = "ATI"
      WriteDebugLog("Subtype       = ATI Remote Wonder")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[5]
        Case &H0
          sCmd = "A"
        Case &H1
          sCmd = "B"
        Case &H2
          sCmd = "Power"
        Case &H3
          sCmd = "TV"
        Case &H4
          sCmd = "DVD"
        Case &H5
          sCmd = "?"
        Case &H6
          sCmd = "Guide"
        Case &H7
          sCmd = "Drag"
        Case &H8
          sCmd = "VOL+"
        Case &H9
          sCmd = "VOL-"
        Case &HA
          sCmd = "MUTE"
        Case &HB
          sCmd = "CHAN+"
        Case &HC
          sCmd = "CHAN-"
        Case &HD
          sCmd = "1"
        Case &HE
          sCmd = "2"
        Case &HF
          sCmd = "3"
        Case &H10
          sCmd = "4"
        Case &H11
          sCmd = "5"
        Case &H12
          sCmd = "6"
        Case &H13
          sCmd = "7"
        Case &H14
          sCmd = "8"
        Case &H15
          sCmd = "9"
        Case &H16
          sCmd = "Txt"
        Case &H17
          sCmd = "0"
        Case &H18
          sCmd = "Snapshot ESC"
        Case &H19
          sCmd = "C"
        Case &H1A
          sCmd = "^"
        Case &H1B
          sCmd = "D"
        Case &H1C
          sCmd = "TV/RADIO"
        Case &H1D
          sCmd = "<"
        Case &H1E
          sCmd = "OK"
        Case &H1F
          sCmd = ">"
        Case &H20
          sCmd = "<-"
        Case &H21
          sCmd = "E"
        Case &H22
          sCmd = "v"
        Case &H23
          sCmd = "F"
        Case &H24
          sCmd = "Rewind"
        Case &H25
          sCmd = "Play"
        Case &H26
          sCmd = "Fast forward"
        Case &H27
          sCmd = "Record"
        Case &H28
          sCmd = "Stop"
        Case &H29
          sCmd = "Pause"
        Case &H2C
          sCmd = "TV"
        Case &H2D
          sCmd = "VCR"
        Case &H2E
          sCmd = "RADIO"
        Case &H2F
          sCmd = "TV preview"
        Case &H30
          sCmd = "Channel list"
        Case &H31
          sCmd = "Video desktop"
        Case &H32
          sCmd = "Red"
        Case &H33
          sCmd = "Green"
        Case &H34
          sCmd = "Yellow"
        Case &H35
          sCmd = "Blue"
        Case &H36
          sCmd = "Rename TAB"
        Case &H37
          sCmd = "Acquire image"
        Case &H38
          sCmd = "Edit image"
        Case &H39
          sCmd = "Full screen"
        Case &H3A
          sCmd = "DVD Audio"
        Case &H70
          sCmd = "Cursor-left"
        Case &H71
          sCmd = "Cursor-right"
        Case &H72
          sCmd = "Cursor-up"
        Case &H73
          sCmd = "Cursor-down"
        Case &H74
          sCmd = "Cursor-up-left"
        Case &H75
          sCmd = "Cursor-up-right"
        Case &H76
          sCmd = "Cursor-down-right"
        Case &H77
          sCmd = "Cursor-down-left"
        Case &H78
          sCmd = "V"
        Case &H79
          sCmd = "V-End"
        Case &H7C
          sCmd = "X"
        Case &H7D
          sCmd = "X-End"
        Case Else
          sCmd = "Unknown"
          Return
      End Select
      WriteDebugLog("Command       = " & SCmd)
    Case sTypeATI2
      sType = "ATI2"
      WriteDebugLog("Subtype       = ATI Remote Wonder II")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[5]
        Case &H0
          sCmd = "A"
        Case &H1
          sCmd = "B"
        Case &H2
          sCmd = "Power"
        Case &H3
          sCmd = "TV"
        Case &H4
          sCmd = "DVD"
        Case &H5
          sCmd = "?"
        Case &H6
          sCmd = "Guide"
        Case &H7
          sCmd = "Drag"
        Case &H8
          sCmd = "VOL+"
        Case &H9
          sCmd = "VOL-"
        Case &HA
          sCmd = "MUTE"
        Case &HB
          sCmd = "CHAN+"
        Case &HC
          sCmd = "CHAN-"
        Case &HD
          sCmd = "1"
        Case &HE
          sCmd = "2"
        Case &HF
          sCmd = "3"
        Case &H10
          sCmd = "4"
        Case &H11
          sCmd = "5"
        Case &H12
          sCmd = "6"
        Case &H13
          sCmd = "7"
        Case &H14
          sCmd = "8"
        Case &H15
          sCmd = "9"
        Case &H16
          sCmd = "Txt"
        Case &H17
          sCmd = "0"
        Case &H18
          sCmd = "Open setup menu"
        Case &H19
          sCmd = "C"
        Case &H1A
          sCmd = "^"
        Case &H1B
          sCmd = "D"
        Case &H1C
          sCmd = "FM"
        Case &H1D
          sCmd = "<"
        Case &H1E
          sCmd = "OK"
        Case &H1F
          sCmd = ">"
        Case &H20
          sCmd = "Max/Restore window"
        Case &H21
          sCmd = "E"
        Case &H22
          sCmd = "V"
        Case &H23
          sCmd = "F"
        Case &H24
          sCmd = "Rewind"
        Case &H25
          sCmd = "Play"
        Case &H26
          sCmd = "Fast forward"
        Case &H27
          sCmd = "Record"
        Case &H28
          sCmd = "Stop"
        Case &H29
          sCmd = "Pause"
        Case &H2A
          sCmd = "TV2"
        Case &H2B
          sCmd = "Clock"
        Case &H2C
          sCmd = "I"
        Case &H2D
          sCmd = "ATI"
        Case &H2E
          sCmd = "RADIO"
        Case &H2F
          sCmd = "TV preview"
        Case &H30
          sCmd = "Channel list"
        Case &H31
          sCmd = "Video desktop"
        Case &H32
          sCmd = "Red"
        Case &H33
          sCmd = "Green"
        Case &H34
          sCmd = "Yellow"
        Case &H35
          sCmd = "lue"
        Case &H36
          sCmd = "Rename TAB"
        Case &H37
          sCmd = "Acquire image"
        Case &H38
          sCmd = "Edit image"
        Case &H39
          sCmd = "Full screen"
        Case &H3A
          sCmd = "DVD audio"
        Case &H70
          sCmd = "Cursor-left"
        Case &H71
          sCmd = "Cursor-right"
        Case &H72
          sCmd = "Cursor-up"
        Case &H73
          sCmd = "Cursor-down"
        Case &H74
          sCmd = "Cursor-up-left"
        Case &H75
          sCmd = "Cursor-up-right"
        Case &H76
          sCmd = "Cursor-down-right"
        Case &H77
          sCmd = "Cursor-down-left"
        Case &H78
          sCmd = "V"
        Case &H79
          sCmd = "V-End"
        Case &H7C
          sCmd = "X"
        Case &H7D
          sCmd = "X-End"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
      If (RecBuf[6] And &H1) = &H1 Then
        WriteDebugLog("  (Button press = odd)")
      Else
        WriteDebugLog("  (Button press = even)")
      Endif
    Case sTypeMedion
      sType = "MEDION"
      WriteDebugLog("Subtype       = Medion Remote")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[5]
        Case &H0
          sCmd = "Mute"
        Case &H1
          sCmd = "B"
        Case &H2
          sCmd = "Power"
        Case &H3
          sCmd = "TV"
        Case &H4
          sCmd = "DVD"
        Case &H5
          sCmd = "Photo"
        Case &H6
          sCmd = "Music"
        Case &H7
          sCmd = "Drag"
        Case &H8
          sCmd = "VOL-"
        Case &H9
          sCmd = "VOL+"
        Case &HA
          sCmd = "MUTE"
        Case &HB
          sCmd = "CHAN+"
        Case &HC
          sCmd = "CHAN-"
        Case &HD
          sCmd = "1"
        Case &HE
          sCmd = "2"
        Case &HF
          sCmd = "3"
        Case &H10
          sCmd = "4"
        Case &H11
          sCmd = "5"
        Case &H12
          sCmd = "6"
        Case &H13
          sCmd = "7"
        Case &H14
          sCmd = "8"
        Case &H15
          sCmd = "9"
        Case &H16
          sCmd = "Txt"
        Case &H17
          sCmd = "0"
        Case &H18
          sCmd = "Snapshot ESC"
        Case &H19
          sCmd = "DVD MENU"
        Case &H1A
          sCmd = "^"
        Case &H1B
          sCmd = "Setup"
        Case &H1C
          sCmd = "TV/RADIO"
        Case &H1D
          sCmd = "<"
        Case &H1E
          sCmd = "OK"
        Case &H1F
          sCmd = ">"
        Case &H20
          sCmd = "<-"
        Case &H21
          sCmd = "E"
        Case &H22
          sCmd = "v"
        Case &H23
          sCmd = "F"
        Case &H24
          sCmd = "Rewind"
        Case &H25
          sCmd = "Play"
        Case &H26
          sCmd = "Fast forward"
        Case &H27
          sCmd = "Record"
        Case &H28
          sCmd = "Stop"
        Case &H29
          sCmd = "Pause"
        Case &H2C
          sCmd = "TV"
        Case &H2D
          sCmd = "VCR"
        Case &H2E
          sCmd = "RADIO"
        Case &H2F
          sCmd = "TV preview"
        Case &H30
          sCmd = "Channel list"
        Case &H31
          sCmd = "Video desktop"
        Case &H32
          sCmd = "Red"
        Case &H33
          sCmd = "Green"
        Case &H34
          sCmd = "Yellow"
        Case &H35
          sCmd = "Blue"
        Case &H36
          sCmd = "Rename TAB"
        Case &H37
          sCmd = "Acquire image"
        Case &H38
          sCmd = "Edit image"
        Case &H39
          sCmd = "Full screen"
        Case &H3A
          sCmd = "DVD audio"
        Case &H70
          sCmd = "Cursor-left"
        Case &H71
          sCmd = "Cursor-right"
        Case &H72
          sCmd = "Cursor-up"
        Case &H73
          sCmd = "Cursor-down"
        Case &H74
          sCmd = "Cursor-up-left"
        Case &H75
          sCmd = "Cursor-up-right"
        Case &H76
          sCmd = "Cursor-down-right"
        Case &H77
          sCmd = "Cursor-down-left"
        Case &H78
          sCmd = "V"
        Case &H79
          sCmd = "V-End"
        Case &H7C
          sCmd = "X"
        Case &H7D
          sCmd = "X-End"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case sTypePCremote
      sType = "PCREMOTE"
      WriteDebugLog("Subtype       = PC Remote")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = CStr(RecBuf[4])
      WriteDebugLog("ID            = " & sAddress)
      Select Case RecBuf[5]
        Case &H2
          sCmd = "0"
        Case &H82
          sCmd = "1"
        Case &HD1
          sCmd = "MP3"
        Case &H42
          sCmd = "2"
        Case &HD2
          sCmd = "DVD"
        Case &HC2
          sCmd = "3"
        Case &HD3
          sCmd = "CD"
        Case &H22
          sCmd = "4"
        Case &HD4
          sCmd = "PC"
        Case &HA2
          sCmd = "5"
        Case &HD5
          sCmd = "SHIFT-5"
        Case &H62
          sCmd = "6"
        Case &HE2
          sCmd = "7"
        Case &H12
          sCmd = "8"
        Case &H92
          sCmd = "9"
        Case &HC0
          sCmd = "CH-"
        Case &H40
          sCmd = "CH+"
        Case &HE0
          sCmd = "VOL-"
        Case &H60
          sCmd = "VOL+"
        Case &HA0
          sCmd = "MUTE"
        Case &H3A
          sCmd = "INFO"
        Case &H38
          sCmd = "REW"
        Case &HB8
          sCmd = "FF"
        Case &HB0
          sCmd = "PLAY"
        Case &H64
          sCmd = "PAUSE"
        Case &H63
          sCmd = "STOP"
        Case &HB6
          sCmd = "MENU"
        Case &HFF
          sCmd = "REC"
        Case &HC9
          sCmd = "EXIT"
        Case &HD8
          sCmd = "TEXT"
        Case &HD9
          sCmd = "SHIFT-TEXT"
        Case &HF2
          sCmd = "TELETEXT"
        Case &HD7
          sCmd = "SHIFT-TELETEXT"
        Case &HBA
          sCmd = "A+B"
        Case &H52
          sCmd = "ENT"
        Case &HD6
          sCmd = "SHIFT-ENT"
        Case &H70
          sCmd = "Cursor-left"
        Case &H71
          sCmd = "Cursor-right"
        Case &H72
          sCmd = "Cursor-up"
        Case &H73
          sCmd = "Cursor-down"
        Case &H74
          sCmd = "Cursor-up-left"
        Case &H75
          sCmd = "Cursor-up-right"
        Case &H76
          sCmd = "Cursor-down-right"
        Case &H77
          sCmd = "Cursor-down-left"
        Case &H78
          sCmd = "Left mouse"
        Case &H79
          sCmd = "Left mouse-End"
        Case &H7B
          sCmd = "Drag"
        Case &H7C
          sCmd = "Right mouse"
        Case &H7D
          sCmd = "Right mouse-End"
        Case Else
          WriteDebugLog("Command       = Unknown")
          Return
      End Select
      WriteDebugLog("Command       = " & sCmd)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1], 2) & ":" & Hex(RecBuf[2], 2))
      Return
  End Select

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[6], 4)))
  iDeviceId = Devices.Find(Instance, "default", InterfaceId, sType)
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd, Devices.ValueType_Remote)

End

Private Sub Decode_FS20()

  WriteDebugLog("Decoding FS20 not implemented")

End

' ENUM THERMOSTAT1 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperature = 6
'     set_point = 7
'     status = 8  'bits 1-0
'     filler = 8  'bits 6-2
'     mode = 8    'bit 7
'     battery_level = 9   'bits 3-0
'     rssi = 9            'bits 7-4
'     size = 9
' END ENUM

Private Sub Decode_Thermostat1()

  Dim sAddress, sType, sTemp, sSetTemp, sCmd, sStatus As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeDigimax
      sType = "Digimax"
      WriteDebugLog("Subtype       = Digimax")
    Case sTypeDigimaxShort
      sType = "Digimax"
      WriteDebugLog("Subtype       = Digimax with short format")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & CStr(RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  sTemp = CStr(RecBuf[6])
  WriteDebugLog("Temperature   = " & sTemp & " °C")
  If RecBuf[2] = sTypeDigimax Then
    sSetTemp = CStr(RecBuf[7])
    WriteDebugLog("Set           = " & sSetTemp & " °C")
    If (RecBuf[8] And &H80) = 0 Then
      sCmd = "Heating"
    Else
      sCmd = "Cooling"
    Endif
    WriteDebugLog("Mode          = " & sCmd)
    Select Case (RecBuf[8] And &H3)
      Case 0
        sStatus = "Not Available"
      Case 1
        sStatus = "Demand"
      Case 2
        sStatus = "No demand"
      Case 3
        sStatus = "Initializing"
    End Select
    WriteDebugLog("Status        = " & sStatus)
  Endif

  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values
  If iDeviceId Then
    Devices.ValueUpdate(iDeviceId, 1, sSetTemp)
    Devices.ValueUpdate(iDeviceId, 2, sTemp, Devices.ValueType_Temperature)
    Devices.ValueUpdate(iDeviceId, 3, sCmd)
    Devices.ValueUpdate(iDeviceId, 4, sStatus)
  Endif

End

' ENUM THERMOSTAT2 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     unitcode = 4
'     cmnd = 5
'     filler = 6  'bits 3-0
'     rssi = 6    'bits 7-4
'     size = 6
' END ENUM

Private Sub Decode_Thermostat2()

  WriteDebugLog("Decoding Thermostat2 not implemented")

End

' ENUM THERMOSTAT3 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     unitcode1 = 4
'     unitcode2 = 5
'     unitcode3 = 6
'     cmnd = 7
'     filler = 9   'bits 3-0
'     rssi = 9     'bits 7-4
'     size = 9
' END ENUM

Private Sub Decode_Thermostat3()

  Dim sAddress, sType, sCmd As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeMertikG6RH4T1
      sType = "Mertik"
      WriteDebugLog("Subtype       = Mertik G6R-H4T1")
    Case sTypeMertikG6RH4TB
      sType = "Mertik"
      WriteDebugLog("Subtype       = Mertik G6R-H4TB")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Sequence nbr  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & CStr(RecBuf[4] + 65536 & RecBuf[5] * 256 + RecBuf[6]))
  WriteDebugLog("ID            = " & sAddress)
  Select Case RecBuf[7]
    Case 0
      sCmd = "Off"
    Case 1
      sCmd = "On"
    Case 2
      sCmd = "Up"
    Case 3
      sCmd = "Down"
    Case 4
      If RecBuf[2] = sTypeMertikG6RH4T1 Then
        sCmd = "Run Up"
      Else
        sCmd = "2nd Off"
      Endif
    Case 5
      If RecBuf[2] = sTypeMertikG6RH4T1 Then
        sCmd = "Run Down"
      Else
        sCmd = "2nd On"
      Endif
    Case 6
      If RecBuf[2] = sTypeMertikG6RH4T1 Then
        sCmd = "Stop"
      Else
        WriteDebugLog("Command       = Unknown")
        Return
      Endif
    Case Else
      WriteDebugLog("Command       = Unknown")
      Return
  End Select

  WriteDebugLog("Command       = " & sCmd)
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

' ENUM RAIN AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     rainrateh = 6
'     rainratel = 7
'     raintotal1 = 8
'     raintotal2 = 9
'     raintotal3 = 10
'     battery_level = 11  'bits 3-0
'     rssi = 11           'bits 7-4
'     size = 11
' END ENUM

Private Sub Decode_Rain()

  Dim sAddress, sType, sRainRate, sRainTotal, sBatt As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeRAIN1
      sType = "rain1"
      WriteDebugLog("Subtype       = RAIN1 - RGR126/682/918")
    Case sTypeRAIN2
      sType = "rain2"
      WriteDebugLog("Subtype       = RAIN2 - PCR800")
    Case sTypeRAIN3
      sType = "rain3"
      WriteDebugLog("Subtype       = RAIN3 - TFA")
    Case sTypeRAIN4
      sType = "rain4"
      WriteDebugLog("Subtype       = RAIN4 - UPM RG700")
    Case sTypeRAIN5
      sType = "rain5"
      WriteDebugLog("Subtype       = RAIN5 - LaCrosse WS2300")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  If RecBuf[2] = sTypeRAIN1 Then
    sRainRate = CStr((RecBuf[6] * 256) + RecBuf[7])
    WriteDebugLog("Rain rate     = " & sRainRate & " mm/h")
  Else
    sRainRate = CStr(((RecBuf[6] * 256) + RecBuf[7]) / 100)
    WriteDebugLog("Rain rate     = " & sRainRate & " mm/h")
  Endif
  sRainTotal = CStr(((RecBuf[8] * 65535) + RecBuf[9] * 256 + RecBuf[10]) / 10)
  WriteDebugLog("Total rain    = " & sRainTotal & " mm")
  WriteDebugLog("Signal level  = " & Lsr(RecBuf[11], 4))
  If (Recbuf[11] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sBatt = "OK"
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values & battery status
  If iDeviceId Then
    ' rain rate mm/hr, total rain mm
    Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sRainRate), "0.00"), Devices.ValueType_RainRate)
    Devices.ValueUpdate(iDeviceId, 2, Format(CStr(sRainTotal), "0.00"), Devices.ValueType_RainTotal)
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM Temp AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperatureh = 6    'bits 6-0
'     tempsign = 6        'bit 7
'     temperaturel = 7
'     battery_level = 8   'bits 3-0
'     rssi = 8            'bits 7-4
'     size = 8
' END ENUM

Private Sub Decode_Temp()

  Dim sAddress, sType, sTemp, sBatt As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeTEMP1
      sType = "temp1"
      WriteDebugLog("Subtype       = TEMP1 - THR128/138, THC138")
    Case sTypeTEMP2
      sType = "temp2"
      WriteDebugLog("Subtype       = TEMP2 - THC238/268,THN132,THWR288,THRN122,THN122,AW129/131")
    Case sTypeTEMP3
      sType = "temp3"
      WriteDebugLog("Subtype       = TEMP3 - THWR800")
    Case sTypeTEMP4
      sType = "temp4"
      WriteDebugLog("Subtype       = TEMP4 - RTHN318")
    Case sTypeTEMP5
      sType = "temp5"
      WriteDebugLog("Subtype       = TEMP5 - LaCrosse TX3, TX4, TX17")
    Case sTypeTEMP6
      sType = "temp6"
      WriteDebugLog("Subtype       = TEMP6 - TS15C")
    Case sTypeTEMP7
      sType = "temp7"
      WriteDebugLog("Subtype       = TEMP7 - Viking 02811, Proove TSS330")
    Case sTypeTEMP8
      sType = "temp8"
      WriteDebugLog("Subtype       = TEMP8 - LaCrosse WS2300")
    Case sTypeTEMP9
      sType = "temp9"
      WriteDebugLog("Subtype       = TEMP9 - RUBiCSON")
    Case sTypeTEMP10
      sType = "temp10"
      WriteDebugLog("Subtype       = TEMP10 - TFA 30.3133")
    Case sTypeTEMP11
      sType = "temp11"
      WriteDebugLog("Subtype       = TEMP11 - WT0122")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select

  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  WriteDebugLog("ID            = " & sAddress)
  If (RecBuf[6] And &H80) = 0 Then
    sTemp = CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
  Else
    sTemp = "-" & CStr(((RecBuf[6] And &H7F) * 256 + RecBuf[7]) / 10)
  Endif
  WriteDebugLog("Temperature   = " & sTemp & " °C")
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  If (RecBuf[8] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sBatt = "OK"
  Endif
  WriteDebugLog("Battery       = OK")
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value & battery status
  If iDeviceId Then
    If Main.sTemperature = "°C" Then
      ' temp °C
      Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sTemp), "0.#"), Devices.ValueType_Temperature)
    Else
      ' temp °F
      Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sTemp * 1.8 + 32), ".##"), Devices.ValueType_Temperature)
    Endif
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM TEMP_HUM AS Integer
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id1 = 4
'      id2 = 5
'      humidity = 6
'      humidity_status = 7
'      battery_level = 8  'bits 3-0
'      rssi = 8           'bits 7-4
'      size = 8
'  END ENUM

Private Sub Decode_Hum()

  Dim sAddress, sType, sBatt, sHumid, sComfort As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeHUM1
      sType = "hum1"
      WriteDebugLog("Subtype       = HUM1 - LaCrosse TX3")
    Case sTypeHUM2
      sType = "hum2"
      WriteDebugLog("Subtype       = HUM2 - LaCrosse WS2300")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  sHumid = RecBuf[6]
  WriteDebugLog("Humidity      = " & sHumid & " %")
  Select Case RecBuf[7]
    Case &H0
      sComfort = "Dry"
    Case &H1
      sComfort = "Comfort"
    Case &H2
      sComfort = "Normal"
    Case &H3
      sComfort = "Wet"
  End Select
  WriteDebugLog("Status        = " & sComfort)
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  If (RecBuf[8] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sBatt = "OK"
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value & battery status
  If iDeviceId Then
    ' humid %
    Devices.ValueUpdate(iDeviceId, 1, sHumid, Devices.ValueType_Humidity)
    Devices.ValueUpdate(iDeviceId, 2, sComfort)
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM TEMP_HUM AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperatureh = 6    'bits 6-0
'     tempsign = 6        'bit 7
'     temperaturel = 7
'     humidity = 8
'     humidity_status = 9
'     battery_level = 10  'bits 3-0
'     rssi = 10           'bits 7-4
'     size = 10
' END ENUM

Private Sub Decode_TempHum()

  Dim sAddress, sType, sBatt, sTemp, sHumid, sComfort As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeTH1
      WriteDebugLog("Subtype       = TH1 - THGN122/123/132,THGR122/228/238/268")
      sType = "th1"
    Case sTypeTH2
      WriteDebugLog("Subtype       = TH2 - THGR810")
      sType = "th2"
    Case sTypeTH3
      WriteDebugLog("Subtype       = TH3 - RTGR328")
      sType = "th3"
    Case sTypeTH4
      WriteDebugLog("Subtype       = TH4 - THGR328")
      sType = "th4"
    Case sTypeTH5
      WriteDebugLog("Subtype       = TH5 - WTGR800")
      sType = "th5"
    Case sTypeTH6
      WriteDebugLog("Subtype       = TH6 - THGR918,THGRN228,THGN500")
      sType = "th6"
    Case sTypeTH7
      WriteDebugLog("Subtype       = TH7 - TFA TS34C")
      sType = "th7"
    Case sTypeTH8
      WriteDebugLog("Subtype       = TH8 - ESIC WT440H/450H")
      sType = "th8"
    Case sTypeTH9
      WriteDebugLog("Subtype       = TH9 - Viking 02038, 02035 (02035 has no humidity)")
      sType = "th9"
    Case sTypeTH10
      WriteDebugLog("Subtype       = TH10 - Rubicson")
      sType = "th10"
    Case sTypeTH11
      WriteDebugLog("Subtype       = TH11 - EW109")
      sType = "th11"
    Case sTypeTH12
      WriteDebugLog("Subtype       = TH12 - Imagintronix Soil Sensor")
      sType = "th12"
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Sequence no.  = " & RecBuf[3])
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  If (RecBuf[6] And &H80) = 0 Then
    sTemp = CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
  Else
    sTemp = "-" & CStr(((RecBuf[6] And &H7F) * 256 + RecBuf[7]) / 10)
  Endif
  WriteDebugLog("Temperature   = " & sTemp & " °C")
  sHumid = RecBuf[8]
  WriteDebugLog("Humidity      = " & sHumid & " %")
  Select Case RecBuf[9]
    Case &H0
      sComfort = "Dry"
    Case &H1
      sComfort = "Comfort"
    Case &H2
      sComfort = "Normal"
    Case &H3
      sComfort = "Wet"
  End Select
  WriteDebugLog("Status        = " & sComfort)
  WriteDebugLog("Signal level  = " & Lsr(RecBuf[10], 4))
  If RecBuf[2] = sTypeTH6 Then
    sBatt = (RecBuf[10] * 10) + 10
  Else
    If (RecBuf[10] And &HF) = 0 Then
      sBatt = "Low"
    Else
      sBatt = "OK"
    Endif
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value & battery status
  If iDeviceId Then
    If Main.sTemperature = "°C" Then
      ' temp °C
      Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sTemp), "0.#"), Devices.ValueType_Temperature)
    Else
      ' temp °F
      Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sTemp * 1.8 + 32), ".##"), Devices.ValueType_Temperature)
    Endif
    Devices.ValueUpdate(iDeviceId, 2, sHumid, Devices.ValueType_Humidity)
    Devices.ValueUpdate(iDeviceId, 3, sComfort)
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM TEMP_HUM_BARO AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     temperatureh = 6    'bits 6-0
'     tempsign = 6        'bit 7
'     temperaturel = 7
'     humidity = 8
'     humidity_status = 9
'     baroh = 10
'     barol = 11
'     forecast = 12
'     battery_level = 13  'bits 3-0
'     rssi = 13           'bits 7-4
'     size = 13
' END ENUM

Private Sub Decode_TempHumBaro()

  Dim sAddress, sType, sBatt, sTemp, sHumid, sComfort, sBaro, sForecast As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeTH1
      sType = "thb1"
      WriteDebugLog("Subtype       = THB1 - BTHR918, BTHGN129")
    Case sTypeTH2
      sType = "thb2"
      WriteDebugLog("Subtype       = THB2 - BTHR918N, BTHR968")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  If (RecBuf[6] And &H80) = 0 Then
    sTemp = CStr((RecBuf[6] * 256 + RecBuf[7]) / 10)
    WriteDebugLog("Temperature   = " & sTemp & " °C")
  Else
    sTemp = "-" & CStr(((RecBuf[6] And &H7F) * 256 + RecBuf[7]) / 10)
    WriteDebugLog("Temperature   = " & sTemp & " °C")
  Endif
  sHumid = CStr(RecBuf[8])
  WriteDebugLog("Humidity      = " & sHumid & " %")
  Select Case RecBuf[9]
    Case &H0
      sComfort = "Status        = Dry"
    Case &H1
      sComfort = "Status        = Comfort"
    Case &H2
      sComfort = "Status        = Normal"
    Case &H3
      sComfort = "Status        = Wet"
  End Select

  sBaro = CStr(RecBuf[10] * 256 + RecBuf[11])
  WriteDebugLog("Barometer     = " & sBaro)
  Select Case RecBuf[12]
    Case &H0
      sForecast = "No Info Avail"
    Case &H1
      sForecast = "Sunny"
    Case &H2
      sForecast = "Partly Cloudy"
    Case &H3
      sForecast = "Cloudy"
    Case &H4
      sForecast = "Rain"
  End Select
  WriteDebugLog("Forecast      = " & sForecast)
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[13], 4)))
  If (RecBuf[13] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sBatt = "OK"
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values & battery status
  If iDeviceId Then
    If Main.sTemperature = "°C" Then
      ' temp °C, hum %, baro hPa, forecast
      Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sTemp), "0.#"), Devices.ValueType_Temperature)
    Else
      ' temp °F, hum %, baro hPa, forecast
      Devices.ValueUpdate(iDeviceId, 1, Format(CStr(sTemp * 1.8 + 32), "0.#"), Devices.ValueType_Temperature)
    Endif
    Devices.ValueUpdate(iDeviceId, 2, sHumid, Devices.ValueType_Humidity)
    Devices.ValueUpdate(iDeviceId, 3, sBaro)
    Devices.ValueUpdate(iDeviceId, 4, sForecast)
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM UV AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     uv = 6
'     temperatureh = 7    'bits 6-0
'     tempsign = 7        'bit 7
'     temperaturel = 8
'     battery_level = 9   'bits 3-0
'     rssi = 9            'bits 7-4
'     size = 9
' END ENUM

Private Sub Decode_Uv()

  Dim sAddress, sType, sBatt, sLevel, sStatus, sTemp As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeUV1
      sType = "uv1"
      WriteDebugLog("Subtype       = UV1 - UVN128, UV138")
    Case sTypeUV2
      sType = "uv2"
      WriteDebugLog("Subtype       = UV2 - UVN800")
    Case sTypeUV3
      sType = "uv3"
      WriteDebugLog("Subtype       = UV3 - TFA")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  WriteDebugLog("ID            = " & sAddress)

  If RecBuf[2] = sTypeUV3 Then
    If (RecBuf[7] And &H80) = 0 Then
      sTemp = Round((RecBuf[7] * 256 + RecBuf[8]) / 10)
    Else
      sTemp = "-" & Round(((RecBuf[7] And &H7F) * 256 + RecBuf[8]) / 10)
    Endif
    WriteDebugLog("Temperature   = " & sTemp & " °C")
  Endif

  sLevel = CStr(RecBuf[6])
  WriteDebugLog("Level         = " & sLevel)
  If RecBuf[6] < 3 Then
    sStatus = "Low"
  Else If RecBuf[6] < 6
    sStatus = "Medium"
  Else If RecBuf[6] < 8
    sStatus = "High"
  Else If RecBuf[6] < 11
    sStatus = "Very High"
  Else
    sStatus = "Dangerous"
  Endif
  WriteDebugLog("Status        = " & sStatus)
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[9], 4)))
  If (RecBuf[9] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sbatt = "OK"
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values & battery status
  If iDeviceId Then
    ' uv level, status and temp if TFA
    Devices.ValueUpdate(iDeviceId, 1, sLevel, Devices.ValueType_UV)
    Devices.ValueUpdate(iDeviceId, 2, sStatus)
    Devices.ValueUpdate(iDeviceId, 3, sTemp, Devices.ValueType_Temperature)
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

Private Sub Decode_Baro()

  WriteDebugLog("Not implemented")

End

' ENUM WIND AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     directionh = 6
'     directionl = 7
'     av_speedh = 8
'     av_speedl = 9
'     gusth = 10
'     gustl = 11
'     temperatureh = 12   'bits 6-0
'     tempsign = 12       'bit 7
'     temperaturel = 13
'     chillh = 14         'bits 6-0
'     chillsign = 14      'bit 7
'     chilll = 15
'     battery_level = 16  'bits 3-0
'     rssi = 16           'bits 7-4
'     size = 16
' END ENUM

Private Sub Decode_Wind()

  Dim sAddress, sAddressTemp, sType, sBatt, sDirection, sDirectionDescr, sAvgSpeed, sWindGust, sTemp, sChill As String
  Dim iDeviceId As Integer
  Dim bTemp As Boolean

  Select Case RecBuf[2]
    Case sTypeWIND1
      sType = "wind1"
      WriteDebugLog("Subtype       = WIND1 - WTGR800")
    Case sTypeWIND2
      sType = "wind2"
      WriteDebugLog("Subtype       = WIND2 - WGR800")
    Case sTypeWIND3
      sType = "wind3"
      WriteDebugLog("Subtype       = WIND3 - STR918, WGR918")
    Case sTypeWIND4
      sType = "wind4"
      WriteDebugLog("Subtype       = WIND4 - TFA")
    Case sTypeWIND5
      sType = "wind5"
      WriteDebugLog("Subtype       = WIND5 - UPM WDS500")
    Case sTypeWIND6
      sType = "wind6"
      WriteDebugLog("Subtype       = WIND5 - LaCrosse WS2300")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  sDirection = CStr((RecBuf[6] * 256) + RecBuf[7])
  WriteDebugLog("Direction     = " & sDirection & " degrees")
  sDirectionDescr = WindDirection(sDirection)
  WriteDebugLog("Direction Desc= " & sDirectionDescr)

  ' TOFIX
  ' intSpeed = (recbuf(WIND.av_speedh) * 256) + recbuf(WIND.av_speedl)
  ' IF recbuf(WIND.subtype) <> WIND.WIND5 THEN
  '     WriteDebugLog("Average speed = " & (intSpeed / 10).ToString & " mtr/sec = " & Math.Round((intSpeed * 0.36), 2).ToString & " km/hr = " & Math.Round((intSpeed * 0.223693629) / 10, 2).ToString & " mph")
  ' END IF
  ' intSpeed = (recbuf(WIND.gusth) * 256) + recbuf(WIND.gustl)
  ' WriteDebugLog("Wind gust     = " & (intSpeed / 10).ToString & " mtr/sec = " & Math.Round((intSpeed * 0.36), 2).ToString & " km/hr = " & Math.Round((intSpeed * 0.223693629) / 10, 2).ToString & " mph")

  If RecBuf[2] <> sTypeWIND5 Then
    sAvgSpeed = CStr(((RecBuf[8] * 256) + RecBuf[9])) * 0.36
    WriteDebugLog("Average speed = " & sAvgSpeed & " mtr/sec")
  Endif
  sWindGust = CStr(((RecBuf[10] * 256) + RecBuf[11])) * 0.36
  WriteDebugLog("Wind gust     = " & sWindGust & " mtr/sec")
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[16], 4)))

  If RecBuf[2] = sTypeWIND4 Then
    sAddressTemp = ConvertAddress(sType & "-temp " & (RecBuf[4] * 256 + RecBuf[5]))
    bTemp = True
    If (RecBuf[12] And &H80) = 0 Then
      sTemp = Round((RecBuf[12] * 256 + RecBuf[13]) / 10)
    Else
      sTemp = "-" & Round(((RecBuf[12] And &H7F) * 256 + RecBuf[13]) / 10)
    Endif
    WriteDebugLog("Temperature   = " & sTemp & " °C")
    If (RecBuf[14] And &H80) = 0 Then
      sChill = Round((RecBuf[14] * 256 + RecBuf[15]) / 10)
    Else
      sChill = "-" & Round(((RecBuf[14] And &H7F) * 256 + RecBuf[15]) / 10)
    Endif
    WriteDebugLog("Chill         = " & sChill & " °C")
  Endif
  If RecBuf[2] = sTypeWIND3 Then
    sBatt = (RecBuf[16] * 10) + 10
  Else
    If (RecBuf[16] And &HF) = 0 Then
      sBatt = "Low"
    Else
      sBatt = "OK"
    Endif
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  ' find device id
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values & battery status
  If iDeviceId Then
    ' direction °, direction text, speed m/s, avg speed m/s
    Devices.ValueUpdate(iDeviceId, 1, sDirection, Devices.ValueType_WindDirection)
    Devices.ValueUpdate(iDeviceId, 2, sDirectionDescr, Devices.ValueType_WindDescription)
    Devices.ValueUpdate(iDeviceId, 3, Format(sWindGust, "0.##"), Devices.ValueType_WindSpeed)
    Devices.ValueUpdate(iDeviceId, 4, Format(sAvgSpeed, "0.##"), Devices.ValueType_WindAvgSpeed)
    Devices.Battery(iDeviceId, sBatt)
  Endif

  If bTemp Then ' packet has tfa temp data
    ' find second device for TFA temp
    iDeviceId = Devices.Find(Instance, sAddressTemp, InterfaceId, sType)
    ' update values & battery status
    If iDeviceId Then
      ' temp, chill
      Devices.ValueUpdate(iDeviceId, 1, sTemp, Devices.ValueType_Temperature)
      Devices.ValueUpdate(iDeviceId, 2, sChill)
      Devices.Battery(iDeviceId, sBatt)
    Endif
  Endif

End

Private Sub WindDirection(sDirection As String) As String

  Dim sDir As String
  Dim iDirection As Integer

  iDirection = Val(sDirection)
  If iDirection > 348.75 Or iDirection < 11.26 Then
    sDir = "N"
  Else If iDirection < 33.76 Then
    sDir = "NNE"
  Else If iDirection < 56.26 Then
    sDir = "NE"
  Else If iDirection < 78.76 Then
    sDir = "ENE"
  Else If iDirection < 101.26 Then
    sDir = "E"
  Else If iDirection < 123.76 Then
    sDir = "ESE"
  Else If iDirection < 146.26 Then
    sDir = "SE"
  Else If iDirection < 168.76 Then
    sDir = "SSE"
  Else If iDirection < 191.26 Then
    sDir = "S"
  Else If iDirection < 213.76 Then
    sDir = "SSW"
  Else If iDirection < 236.26 Then
    sDir = "SW"
  Else If iDirection < 258.76 Then
    sDir = "WSW"
  Else If iDirection < 281.26 Then
    sDir = "W"
  Else If iDirection < 303.76 Then
    sDir = "WNW"
  Else If iDirection < 326.26 Then
    sDir = "NW"
  Else
    sDir = "NNW"
  Endif
  Return sDir

End

' ENUM DT AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     yy = 6
'     mm = 7
'     dd = 8
'     dow = 9
'     hr = 10
'     Min = 11
'     sec = 12
'     battery_level = 13  'bits 3-0
'     rssi = 13           'bits 7-4
'     size = 13
' END ENUM

Private Sub Decode_DateTime()

  WriteDebugLog("Decoding DateTime not implemented yet.")

End

' ENUM CURRENT AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     count = 6
'     ch1h = 7
'     ch1l = 8
'     ch2h = 9
'     ch2l = 10
'     ch3h = 11
'     ch3l = 12
'     battery_level = 13  'bits 3-0
'     rssi = 13           'bits 7-4
'     size = 13
' END ENUM

Private Sub Decode_Current()

  Dim sAddress, sType, sBatt, sCt1, sCt2, sCt3 As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeELEC1
      sType = "elec1"
      WriteDebugLog("Subtype       = ELEC1 - OWL CM113, Electrisave, cent-a-meter")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  WriteDebugLog("Count         = " & CStr(RecBuf[6]))
  sCt1 = CStr(((RecBuf[7] * 256) + RecBuf[8]) / 10)
  WriteDebugLog("Channel 1     = " & sCt1 & " ampere")
  sCt2 = CStr(((RecBuf[9] * 256) + RecBuf[10]) / 10)
  WriteDebugLog("Channel 2     = " & sCt2 & " ampere")
  sCt3 = CStr(((RecBuf[11] * 256) + RecBuf[12]) / 10)
  WriteDebugLog("Channel 3     = " & sCt3 & " ampere")
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[13], 4)))
  If (RecBuf[13] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sBatt = "OK"
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values & battery status
  If iDeviceId Then
    ' ct1 amp, ct2 amp, ct3 amp
    Devices.ValueUpdate(iDeviceId, 1, Format(sCt1, ".###"))
    Devices.ValueUpdate(iDeviceId, 2, Format(sCt2, ".###"))
    Devices.ValueUpdate(iDeviceId, 3, Format(sCt3, ".###"))
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

' ENUM ENERGY AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     count = 6
'     instant1 = 7
'     instant2 = 8
'     instant3 = 9
'     instant4 = 10
'     total1 = 11
'     total2 = 12
'     total3 = 13
'     total4 = 14
'     total5 = 15
'     total6 = 16
'     battery_level = 17  'bits 3-0
'     rssi = 17           'bits 7-4
'     size = 17
' END ENUM

Private Sub Decode_Energy()

  Dim sAddress, sBatt, sType, sInstantUsage, sTotalUsage As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeELEC2
      sType = "elec2"
      WriteDebugLog("Subtype       = ELEC2 - OWL CM119, CM160")
    Case sTypeELEC3
      sType = "elec3"
      WriteDebugLog("Subtype       = ELEC3 - OWL CM180")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  sInstantUsage = CStr(RecBuf[7] * 16777216 + RecBuf[8] * 65536 + RecBuf[9] * 256 + RecBuf[10])
  WriteDebugLog("Count         = " & CStr(RecBuf[6]))
  WriteDebugLog("Instant usage = " & sInstantUsage & " Watt")
  sTotalUsage = CStr(RecBuf[11] * 1099511627776 + RecBuf[12] * 4294967296 + RecBuf[13] * 16777216 + RecBuf[14] * 65536 + RecBuf[15] * 256 + RecBuf[16])
  WriteDebugLog("Total usage   = " & sTotalUsage & " Wh")
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[17], 4)))
  If (RecBuf[17] And &HF) = 0 Then
    sBatt = "Low"
  Else
    sBatt = "OK"
  Endif
  WriteDebugLog("Battery       = " & sBatt)
  ' find device id
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update values & battery status
  If iDeviceId Then
    ' power usage total in Wh and now in Watt
    Devices.ValueUpdate(iDeviceId, 1, Format(sTotalUsage, ".###"))
    Devices.ValueUpdate(iDeviceId, 2, sInstantUsage)
    Devices.Battery(iDeviceId, sBatt)
  Endif

End

Private Sub Decode_Gas()

  WriteDebugLog("Decoding Gas not implemented")

End

Private Sub Decode_Water()

  WriteDebugLog("Decoding water not implemented")

End

' ENUM WEIGHT AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     weighthigh = 6
'     weightlow = 7
'     filler = 8   'bits 3-0
'     rssi = 8            'bits 7-4
'     size = 8
' END ENUM

Private Sub Decode_Weight()

  Dim sAddress, sType, sWeight As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeWEIGHT1
      sType = "weight1"
      WriteDebugLog("Subtype       = BWR101/BWR102")
    Case sTypeWEIGHT2
      sType = "weight2"
      WriteDebugLog("Subtype       = GR101")
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
  sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
  WriteDebugLog("ID            = " & sAddress)
  sWeight = CStr((RecBuf[6] * 25.6) + RecBuf[7] / 10)
  WriteDebugLog("Weight        = " & sWeight & " kg")
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[8], 4)))
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  ' update value in kg
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, Format(sWeight, ".###"), Devices.ValueType_Weight)

End

' ENUM RFXSENSOR AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id = 4
'     msg1 = 5
'     msg2 = 6
'     filler = 7  'bits 3-0
'     rssi = 7    'bits 7-4
'     size = 7
' END ENUM

Private Sub Decode_RFXSensor()

  Dim sAddress, sType, sSubType, sValue As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeRFXSensorTemp
      sType = "rfxsensor"
      sSubType = "temp"
      WriteDebugLog("Subtype       = Temperature")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("ID            = " & sAddress)
      sValue = CStr((RecBuf[5] * 256 + RecBuf[6]) / 100)
      WriteDebugLog("Msg           = " & sValue & " °C")
    Case sTypeRFXSensorAD
      sType = "rfxsensor"
      sSubType = "ad"
      WriteDebugLog("Subtype       = A/D")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("ID            = " & sAddress)
      sValue = CStr(RecBuf[5] * 256 + RecBuf[6])
      WriteDebugLog("Msg           = " & sValue & " mV")
    Case sTypeRFXSensorVolt
      sType = "rfxsensor"
      sSubType = "volt"
      WriteDebugLog("Subtype       = Voltage")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("ID            = " & sAddress)
      sValue = CStr(RecBuf[5] * 256 + RecBuf[6])
      WriteDebugLog("Msg           = " & sValue & " mV")
    Case sTypeRFXSensorMessage
      WriteDebugLog("Subtype       = Message")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & CStr(RecBuf[4]))
      Select Case RecBuf[6]
        Case &H1
          WriteDebugLog("Msg           = sensor addresses incremented")
        Case &H2
          WriteDebugLog("Msg           = battery low detected")
        Case &H81
          WriteDebugLog("Msg           = no 1-wire device connected")
        Case &H82
          WriteDebugLog("Msg           = 1-Wire ROM CRC error")
        Case &H83
          WriteDebugLog("Msg           = 1-Wire device connected is not a DS18B20 or DS2438")
        Case &H84
          WriteDebugLog("Msg           = no end of read signal received from 1-Wire device")
        Case &H85
          WriteDebugLog("Msg           = 1-Wire scratchpad CRC error")
        Case Else
          WriteLog("ERROR: Unknown message from RFXSensor")
          Return
      End Select
      WriteDebugLog("Msg           = " & CStr(RecBuf[5] * 256 + RecBuf[6]))
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Signal level  = " & CStr(Lsr(RecBuf[7], 4)))

  Select Case sSubType
    Case "ad", "volt"
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType & " " & sSubType)
      ' update value in mV
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, CStr(sValue))
    Case "temp"
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType & " " & sSubType)
      ' update value
      If iDeviceId Then
        If Main.sTemperature = "°C" Then
          ' temp °C
          Devices.ValueUpdate(iDeviceId, 1, CStr(sValue), Devices.ValueType_Temperature)
        Else
          ' temp °F
          Devices.ValueUpdate(iDeviceId, 1, CStr((sValue) * 1.8 + 32), Devices.ValueType_Temperature)
        Endif
      Endif
  End Select

End

' ENUM RFXMETER AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     count1 = 6
'     count2 = 7
'     count3 = 8
'     count4 = 9
'     filler = 10 'bits 3-0
'     rssi = 10   'bits 7-4
'     size = 10
' END ENUM

Private Sub Decode_RFXMeter()

  Dim lCounter As Long
  Dim sAddress, sType As String
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeRFXMeterCount
      sType = "rfxmeter"
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("Subtype       = RFXMeter counter")
      WriteDebugLog("Sequence no.  = " & RecBuf[3])
      WriteDebugLog("ID            = " & sAddress)
      lCounter = Lsl(CLong(RecBuf[6]), 24) + Lsl(CLong(RecBuf[7]), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9]
      WriteDebugLog("Counter       = " & lCounter)
      WriteDebugLog("if RFXPwr     = " & CStr((lCounter / 1000)) & " kWh")
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, CStr(lCounter))
    Case sTypeRFXMeterInterval
      sType = "rfxmeter"
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("Subtype       = RFXMeter new interval time set")
      WriteDebugLog("Sequence no.  = " & RecBuf[3])
      WriteDebugLog("ID            = " & sAddress)
      WriteDebugLog("Interval time = ", False)
      Select Case RecBuf[8]
        Case &H1
          WriteDebugLog("30 seconds")
        Case &H2
          WriteDebugLog("1 minute")
        Case &H4
          WriteDebugLog("6 minutes")
        Case &H8
          WriteDebugLog("12 minutes")
        Case &H10
          WriteDebugLog("15 minutes")
        Case &H20
          WriteDebugLog("30 minutes")
        Case &H40
          WriteDebugLog("45 minutes")
        Case &H80
          WriteDebugLog("1 hour")
      End Select
    Case sTypeRFXMeterCalib
      sType = "rfxmeter"
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      Select Case (RecBuf[7] And &HC0)
        Case &H0
          WriteDebugLog("Subtype       = Calibrate mode for channel 1")
        Case &H40
          WriteDebugLog("Subtype       = Calibrate mode for channel 2")
        Case &H80
          WriteDebugLog("Subtype       = Calibrate mode for channel 3")
      End Select
      WriteDebugLog("ID            = " & sAddress)
      lCounter = Lsl(CLong(RecBuf[6]), 24) + Lsl(CLong(RecBuf[7]), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9]
      lCounter = (Lsl(CLong(RecBuf[7] And &H3F), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9]) / 1000
      WriteDebugLog("Calibrate cnt = " & lCounter & " msec")
      WriteDebugLog("RFXPwr        = " & CStr(Round(1 / ((16 * lCounter) / (3600000 / 62.5)), 3)) & " kW", False)
    Case sTypeRFXMeterAddr
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("Subtype       = New address set, push button for next address")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
    Case sTypeRFXMeterCounterReset
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      Select Case (RecBuf[7] And &HC0)
        Case &H0
          WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else RESET COUNTER channel 1 will be executed")
        Case &H40
          WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else RESET COUNTER channel 2 will be executed")
        Case &H80
          WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else RESET COUNTER channel 3 will be executed")
      End Select
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
    Case sTypeRFXMeterCounterSet
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      Select Case (RecBuf[7] And &HC0)
        Case &H0
          WriteDebugLog("Subtype       = Counter channel 1 is reset to zero")
        Case &H40
          WriteDebugLog("Subtype       = Counter channel 2 is reset to zero")
        Case &H80
          WriteDebugLog("Subtype       = Counter channel 3 is reset to zero")
      End Select
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
      WriteDebugLog("Counter       = " & Lsl(CLong(RecBuf[6]), 24) + Lsl(CLong(RecBuf[7]), 16) + Lsl(CLong(RecBuf[8]), 8) + RecBuf[9])
    Case sTypeRFXMeterSetInterval
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else SET INTERVAL MODE will be entered")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
    Case sTypeRFXMeterSetCalib
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      Select Case (RecBuf[7] And &HC0)
        Case &H0
          WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else CALIBRATION mode for channel 1 will be executed")
        Case &H40
          WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else CALIBRATION mode for channel 2 will be executed")
        Case &H80
          WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else CALIBRATION mode for channel 3 will be executed")
    End Select
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
    Case sTypeRFXMeterSetAddr
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("Subtype       = Push the button for next mode within 5 seconds or else SET ADDRESS MODE will be entered")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
    Case sTypeRFXMeterIdent
      sAddress = ConvertAddress(sType & " " & (RecBuf[4] * 256 + RecBuf[5]))
      WriteDebugLog("Subtype       = RFXMeter identification")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      WriteDebugLog("ID            = " & sAddress)
      WriteDebugLog("FW version    = " & Hex(RecBuf[8]))
      WriteDebugLog("Interval time = ", False)
      Select Case RecBuf[9]
        Case &H1
          WriteDebugLog("30 seconds")
        Case &H2
          WriteDebugLog("1 minute")
        Case &H4
          WriteDebugLog("6 minutes")
        Case &H8
          WriteDebugLog("12 minutes")
        Case &H10
          WriteDebugLog("15 minutes")
        Case &H20
          WriteDebugLog("30 minutes")
        Case &H40
          WriteDebugLog("45 minutes")
        Case &H80
          WriteDebugLog("1 hour")
      End Select
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select
  WriteDebugLog("Signal level  = " & Lsr(RecBuf[10], 4))

End

' ENUM CHIME As Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     sound = 6
'     filler = 7 'bits 3-0
'     rssi = 7   'bits 7-4
'     size = 7

'     sSound0 = 1
'     sSound1 = 3
'     sSound2 = 5
'     sSound3 = 9
'     sSound4 = 13
'     sSound5 = 14
'     sSound6 = 6
'     sSound7 = 2
' END ENUM

Private Sub Decode_Chime()

  Dim sAddress, sType, sSound As String = "Default"
  Dim iDeviceId As Integer

  Select Case RecBuf[2]
    Case sTypeByronSX
      sType = "ByronSX"
      WriteDebugLog("Subtype       = Byron SX")
      WriteDebugLog("Sequence no.  = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2)
      WriteDebugLog("ID            = " & sAddress)

      Select Case RecBuf[6]
        Case 1, 13
          sSound = "Tubular 3 notes"
        Case 3, 14
          sSound = "Big Ben"
        Case 5, 6
          sSound = "Tubular 2 notes"
        Case 9, 2
          sSound = "Solo"
        Case Else
         sSound = "Undefined (" & Hex(RecBuf[6]) & ")"
      End Select
      WriteDebugLog("Sound         = " & sSound)
    Case sTypeByronMP
      sType = "ByronMP"
      WriteDebugLog("Subtype       = Byron MP001")
      WriteDebugLog("Sequence no. = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2)
      WriteDebugLog("ID            = " & sAddress)
    Case sTypeSelectPlus
      sType = "SelectPlus"
      WriteDebugLog("Subtype       = SelectPlus")
      WriteDebugLog("Sequence no. = " & CStr(RecBuf[3]))
      sAddress = Hex(RecBuf[4], 2) & Hex(RecBuf[5], 2)
      WriteDebugLog("ID            = " & sAddress)
    Case Else
      WriteLog("ERROR: Unknown Sub type for Packet type=" & Hex(RecBuf[1]) & ":" & Hex(RecBuf[2]))
      Return
  End Select

  WriteDebugLog("Signal level  = " & Lsr(RecBuf[7], 4))

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
  If iDeviceId Then
    Select Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId)
      Case "Doorbell"
        ' chime sound
        Devices.ValueUpdate(iDeviceId, 1, sSound, Devices.ValueType_Chime)
      Case "PIR"
        ' motion/no motion
        Devices.ValueUpdate(iDeviceId, 1, "Motion", Devices.ValueType_Security)
      Case "Door/Window Sensor"
        ' open/closed
        Devices.ValueUpdate(iDeviceId, 1, "Open", Devices.ValueType_Security)
      Case Else
        Devices.ValueUpdate(iDeviceId, 1, sSound, Devices.ValueType_Chime)
    End Select
  Endif

End

Private Sub Decode_Curtain1()

  WriteDebugLog("Decoding Curtain1 not implemented")

End

Private Sub Decode_BBQ()

  WriteDebugLog("Decoding BBQ not implemented")

End

Private Sub Decode_TempRain()

  WriteDebugLog("Decoding TempRain not implemented")

End

Private Sub Decode_CurrentEnergy()

  WriteDebugLog("Decoding CurrentEnergy not implemented")

End

Private Sub Decode_Power()

  WriteDebugLog("Decoding Power not implemented")

End

' ENUM LIGHTING1 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     housecode = 4
'     unitcode = 5
'     cmnd = 6
'     filler = 7 'bits 3-0
'     rssi = 7   'bits 7-4
'     size = 7
' END ENUM

' Lighting1
Public Sub Lighting1(sType As String, sAddress As String, sCommand As String, Optional bGroup As Boolean)

  Dim bBuf As New Byte[8]
  Dim sCmd As String = UCase(sCommand)

  ' "X10", "ARC", "AB400", "Waveman", "EMW200", "Impuls", "RisingSun", "PhilipsSBC"
  Select Case UCase(sType)
    Case "X10"
      bBuf[2] = 0
    Case "ARC"
      bBuf[2] = 1
    Case "AB400"
      bBuf[2] = 2
    Case "WAVEMAN"
      bBuf[2] = 3
    Case "EMW200"
      bBuf[2] = 4
    Case "IMPULS"
      bBuf[2] = 5
    Case "RISINGSUN"
      bBuf[2] = 6
    Case "PHILIPSSBC"
      bBuf[2] = 7
    Case "ENERGENIE"
      bBuf[2] = 8
    Case Else
      WriteLog("ERROR: Not a valid Lighting1 type=" & sType)
      Return
  End Select

  If (Len(sAddress) <> 3) Then
    WriteLog("ERROR: Not a valid X10 address=" & sAddress)
    Return
  Endif

  Select Case bBuf[2]
    Case sTypeX10, sTypeARC, sTypeWaveman
      ' check A-P and 1-16
      If Not (Left$(sAddress, 1) Like "[A-P]") Or If Not (Right$(sAddress, 1) Like "[0-9]")
        WriteLog("ERROR: Not a valid X10 address=" & sAddress)
        Return
      Endif
    Case sTypeAB400D, sTypeIMPULS
      ' check A-P and 1-64
      If Not (Left$(sAddress, 1) Like "[A-P]") Or If Not (Right$(sAddress, 1) Like "[0-9]")
        WriteLog("ERROR: Not a valid AB400 or IMPULS address=" & sAddress)
        Return
      Endif
    Case sTypePhilips
      ' check A-P and 1-8
      If Not (Left$(sAddress, 1) Like "[A-P]") Or If Not (Right$(sAddress, 1) Like "[1-8]")
        WriteLog("ERROR: Not a valid Philips SBC address=" & sAddress)
        Return
      Endif
    Case sTypeRisingSun, sTypeEnergenie
      ' check A-P and 1-4
      If Not (Left$(sAddress, 1) Like "[A-P]") Or If Not (Right$(sAddress, 1) Like "[1-4]")
        WriteLog("ERROR: Not a valid RisingSun/Energenie address=" & sAddress)
        Return
      Endif
    Case sTypeEMW200
      ' check A-C and 1-4
      If Not (Left$(sAddress, 1) Like "[A-C]") Or If Not (Right$(sAddress, 1) Like "[1-4]")
        WriteLog("ERROR: Not a valid EMW200 address=" & sAddress)
        Return
      Endif
  End Select

  bBuf[0] = 7
  bBuf[1] = pTypeLighting1
  bBuf[3] = iSeq
  bBuf[4] = Asc(Left$(sAddress, 1))
  bBuf[5] = Val(Right$(sAddress, 2))

  Select Case sCmd
    Case "OFF"
      bBuf[6] = IIf(bGroup, 5, 0)
    Case "ON"
      bBuf[6] = IIf(bGroup, 6, 1)
    Case "DIM"
      bBuf[6] = 2
    Case "BRIGHT"
      bBuf[6] = 3
    Case "ALL OFF", "GROUP OFF"
      bBuf[6] = 5
    Case "ALL ON", "GROUP ON"
      bBuf[6] = 6
    Case "CHIME"
      If bBuf[2] <> sTypeARC Then
        WriteLog("ERROR: Invalid Lighting1 command '" & sCmd & "' given for '" & sType & "' type!")
        Return
      Endif
      bBuf[6] = 7
      bBuf[5] = 8
    Case Else
      WriteLog("ERROR: Unknown Lighting1 command '" & sCmd & "' given!")
      Return
  End Select
  bBuf[7] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Lighting1 '" & Error.Text & "' at '" & Error.Where & "'")

End

' ENUM LIGHTING2 AS Integer
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     id4 = 7
'     unitcode = 8
'     cmnd = 9
'     level = 10
'     filler = 11 'bits 3-0
'     rssi = 11   'bits 7-4
'     size = 11
'
'     pType = &H11
'     sTypeAC = &H0
'     sTypeHEU = &H1
'     sTypeANSLUT = &H2
' END ENUM

' Lighting2
Public Sub Lighting2(sType As String, sAddress As String, sCommand As String, Optional bGroup As Boolean)

  Dim bBuf As New Byte[12]
  Dim sCmd As String = UCase(sCommand)
  Dim aAddr As String[]
  Dim sUnit, sCtrl As String
  Dim iDim, iBrightness As Integer

  ' "AC", "HEEU", "Anslut"
  Select Case UCase(sType)
    Case "AC"
      bBuf[2] = 0
    Case "HEEU"
      bBuf[2] = 1
    Case "ANSLUT"
      bBuf[2] = 2
    Case Else
      WriteLog("ERROR: Not a valid Lighting2 type=" & sType)
      Return
  End Select

  ' find out type of control for device
  sCtrl = Devices.CheckControlDevice(sAddress, InterfaceId)

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    sAddress = aAddr[0]
    sUnit = aAddr[1]
    If LCase(sUnit) = "group" Then
      bGroup = True
      sUnit = 0
    Endif
  Else
    WriteLog("ERROR: Address has wrong format, use '<Device> <Unit>'!")
    Return
  Endif

  If Len(sAddress) = 9 And If Left(sAddress, 2) = "0x" Then
    sAddress = Right(sAddress, 7)
  Else If Len(sAddress) <> 7 Then
    WriteLog("ERROR: Device address length must be 7 characters, or 9 if you use 0x in front!")
    Return
  Endif

  bBuf[0] = 11
  bBuf[1] = pTypeLighting2
  bBuf[3] = iSeq

  bBuf[4] = CByte(Left(sAddress, 1))
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 2, 2)))
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 4, 2)))
  bBuf[7] = CByte(Val("&H" & Mid(sAddress, 6, 2)))
  bBuf[8] = CByte(Val(sUnit))

  Select sCmd
    Case "ALL OFF", "GROUP OFF"
      bBuf[9] = 3
    Case "ALL ON", "GROUP ON"
      bBuf[9] = 4
    Case "ON", "DIM 100"
      Select sCtrl
        Case "Switch"
          bBuf[9] = IIf(bGroup, 4, 1)
        Case "Dimmer"
          bBuf[9] = IIf(bGroup, 5, 2)
          bBuf[10] = CByte(15)
        Case Else
          Return
      End Select
    Case "OFF", "DIM 0"
      bBuf[9] = IIf(bGroup, 3, 0)
    Case Else
      bBuf[9] = IIf(bGroup, 5, 2)
      If InStr(sCmd, "DIM ") Then ' DIM 1 - 99
        iBrightness = Val(Replace(sCmd, "DIM ", ""))
        iDim = Round(0.15 * iBrightness) ' 16 steps
        bBuf[10] = CByte(iDim)
      Else
        WriteDebugLog("ERROR: Unknown Lighting2 command '" & sCmd & "' given!")
        Return
      Endif
  End Select
  bBuf[11] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Lighting2 '" & Error.Text & "' at '" & Error.Where & "'")

End

' ENUM LIGHTING5 AS Byte
' packetlength = 0
' packettype = 1
' subtype = 2
' seqnbr = 3
' id1 = 4
' id2 = 5
' id3 = 6
' unitcode = 7
' cmnd = 8
' filler = 9 'bits 3-0
' rssi = 9   'bits 7-4
' size = 9
'
' pType = &H14
' sTypeLightwaveRF = &H0
'
' sOff = 0
' sOn = 1
' sGroupOff = 2
' sLearn = 2
' sMood1 = 3
' sMood2 = 4
' sMood3 = 5
' sMood4 = 6
' sMood5 = 7
' sUnlock = 10
' sLock = 11
' sAllLock = 12
' sClose = 13
' sStop = 14
' sOpen = 15
' sDim = 16
' END ENUM

' Lightning5
Public Sub Lighting5(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[11]
  Dim sCmd As String = UCase(sCommand)
  Dim aAddr As String[]
  Dim sUnit As String
  Dim iColor, iDim, iBrightness As Integer

  ' "LIGHTWAVERF"
  Select Case UCase(sType)
    Case "LIGHTWAVERF"
      bBuf[2] = sTypeLightwaveRF
    Case "EMW100"
      bBuf[2] = sTypeEMW100
    Case "BBSB"
      bBuf[2] = sTypeBBSB
    Case "MDREMOTE"
      bBuf[2] = sTypeMDREMOTE
    Case "RSL"
      bBuf[2] = sTypeRSL
    Case "LIVOLO"
      bBuf[2] = sTypeLivolo
    Case "TRC02"
      bBuf[2] = sTypeRGBTRC02
    Case "AOKERELAY"
      bBuf[2] = sTypeAokeRelay
    Case "TRC022"
      bBuf[2] = sTypeRGBTRC02_2
    Case "EURODOMEST"
      bBuf[2] = sTypeEurodomest
    Case "AVANTEK"
      bBuf[2] = sTypeAvantek
    Case "IT"
      bBuf[2] = sTypeIT
    Case Else 
      WriteLog("ERROR: Not a valid Lighting5 type: " & sType)
      Return
  End Select

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    sAddress = aAddr[0]
    sUnit = aAddr[1]
  Else
    WriteLog("ERROR: Lighting5 address has wrong format, use '<Device> <Unit>'!")
    Return
  Endif

  If sAddress = "000000" Or If sAddress = "0x000000" Then
    WriteLog("ERROR: Lighting5 invalid address '" & sAddress & "' specified!")
    Return
  Endif
  If Len(sAddress) = 8 And If Left(sAddress, 2) = "0x" Then sAddress = Right(sAddress, 6)
  If Len(sAddress) <> 6 Then
    WriteLog("ERROR: Lighting5 device address length must be 6 characters, or 8 if you use 0x in front!")
    Return
  Endif

  bBuf[0] = 10
  bBuf[1] = pTypeLighting5
  bBuf[3] = iSeq

  bBuf[4] = CByte(Val("&H" & Left(sAddress, 2)))
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 3, 2)))
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 5, 2)))
  bBuf[7] = CByte(Val(sUnit))
  bBuf[9] = 0

  Select Case bBuf[2]
    Case sTypeLightwaveRF
      Select Case sCmd
        Case "ON", "DIM 100"
          bBuf[8] = 1
        Case "OFF", "DIM 0"
          bBuf[8] = 0
        Case "ALL OFF", "GROUP OFF"
          bBuf[8] = 2
        Case "ALL ON", "GROUP ON"
          bBuf[8] = 3
        Case "MOOD1"
          bBuf[8] = 3
        Case "MOOD2"
          bBuf[8] = 4
        Case "MOOD3"
          bBuf[8] = 5
        Case "MOOD4"
          bBuf[8] = 6
        Case "MOOD5"
          bBuf[8] = 7
        Case "UNLOCK"
          bBuf[8] = 10
        Case "LOCK"
          bBuf[8] = 11
        Case "ALL LOCK"
          bBuf[8] = 12
        Case "CLOSE"
          bBuf[8] = 13
        Case "STOP"
          bBuf[8] = 14
        Case "OPEN"
          bBuf[8] = 15
        Case Else
          If InStr(sCmd, "DIM ") Then ' DIM 1 - 99
            bBuf[8] = 16
            iBrightness = Val(Replace(sCmd, "DIM ", ""))
            iDim = Round(0.31 * iBrightness) ' 32 steps
            bBuf[9] = CByte(iDim)
          Else If InStr(sCmd, "COLOURPALETTE ") Then
            bBuf[8] = &H11
            iDim = Val(Replace(sCmd, "COLOURPALETTE ", ""))
            bBuf[9] = CByte(iDim)
          Else If InStr(sCmd, "COLOURTONE ") Then
            bBuf[8] = &H12
            iDim = Val(Replace(sCmd, "COLOURTONE ", ""))
            bBuf[9] = CByte(iDim)
          Else If InStr(sCmd, "COLOURCYCLE ") Then
            bBuf[8] = &H13
            iDim = Val(Replace(sCmd, "COLOURCYCLE ", ""))
            bBuf[9] = CByte(iDim)
          Else
            WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
            Return
          Endif
      End Select
    Case sTypeEMW100
      Select Case sCmd
        Case "ON"
          bBuf[8] = 1
        Case "OFF"
          bBuf[8] = 0
        Case "LEARN"
          bBuf[8] = 2
        Case Else
          WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
          Return
      End Select
    Case sTypeBBSB, sTypeRSL, sTypeEurodomest
      Select Case sCmd
        Case "ON"
          bBuf[8] = 1
        Case "OFF"
          bBuf[8] = 0
        Case "ALL OFF", "GROUP OFF"
          bBuf[8] = 2
        Case "ALL ON", "GROUP ON"
          bBuf[8] = 3
        Case Else
          WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
          Return
      End Select
    Case sTypeMDREMOTE
      Select Case sCmd
        Case "POWER"
          bBuf[8] = 1
        Case "LIGHT"
          bBuf[8] = 0
        Case "BRIGHT"
          bBuf[8] = 2
        Case "DIM"
          bBuf[8] = 3
        Case "100%"
          bBuf[8] = 4
        Case "50%"
          bBuf[8] = 5
        Case "25%"
          bBuf[8] = 6
        Case "MODE+"
          bBuf[8] = 7
        Case "SPEED-"
          bBuf[8] = 8
        Case "SPEED+"
          bBuf[8] = 9
        Case "MODE-"
          bBuf[8] = 10
        Case Else
          WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
          Return
      End Select
    Case sTypeAokeRelay, sTypeAvantek, sTypeIT
      Select Case sCmd
        Case "ON"
          bBuf[8] = 1
        Case "OFF"
          bBuf[8] = 0
        Case Else
          WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
          Return
      End Select
    Case sTypeRGBTRC02, sTypeRGBTRC02_2
      Select Case sCmd
        Case "OFF"
          bBuf[8] = 0
        Case "ON"
          bBuf[8] = 1
        Case "BRIGHT"
          bBuf[8] = 2
        Case "DIM"
          bBuf[8] = 3
        Case "COLOR+"
          bBuf[8] = 4
        Case "COLOR-"
          bBuf[8] = 5
        Case Else
          If InStr(sCmd, "COLOR ") Then ' COLOR 14 - 132
            iColor = Val(Replace(sCmd, "COLOR ", ""))
            If iColor < 14 Then
              iColor = 14
            Else If iColor > 132 Then
              iColor = 132
            Endif
            bBuf[8] = CByte(iColor)
          Else
            WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
            Return
          Endif
      End Select
    Case sTypeLivolo

      ' Needs work to detect module type and send correct cmd sequence
      ' 'Dimmer module':
      ' To switch this module on you can use 2 methods.
      ' Send a Group Off followed by a Toggle command or
      ' 6 or a few more Dim+ commands.
      ' 'Appliance Module 1Gang':
      ' To be sure this module is switched onN send a Group Off followed by a Toggle command.
      ' 'Appliance Module 3Gang':
      ' It is not advised to use these modules because control is not easy to do.
      Select Case sCmd
        Case "OFF", "ALL OFF"
          bBuf[8] = 0
        Case "ON", "GANG1"
          bBuf[8] = 1
        Case "ON2", "GANG2", "DIM+"
          bBuf[8] = 2
        Case "ON3", "GANG3", "DIM-"
          bBuf[8] = 3
        Case Else
          WriteLog("ERROR: Invalid Lighting5 command '" & sCmd & "' for type '" & sType & "' given!")
      End Select
    Case Else
      WriteLog("ERROR: Unknown Lighting5 type '" & bBuf[2] & "' given!")
  End Select

  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Lighting5 '" & Error.Text & "' at '" & Error.Where & "'")

End

' ENUM LIGHTING6 AS Byte
' packetlength = 0
' packettype = 1
' subtype = 2
' seqnbr = 3
' id1 = 4
' id2 = 5
' groupcode = 6
' unitcode = 7
' cmnd = 8
' cmndseqnbr = 9
' rfu = 10
' filler = 11 'bits 3-0
' rssi = 11   'bits 7-4
' size = 11
'
' pType = &H15
' sTypeBlyss = &H0
'
' sOn = 0
' sOff = 1
' sGroupOn = 2
' sGroupOff = 3
' END ENUM

' Lighting6
Public Sub Lighting6(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[12]
  Dim sCmd As String = UCase(sCommand)
  Dim aAddr As String[]
  Dim sUnit As String

  If $iFirmWareVersion < 47 Then
    WriteLog("ERROR: For Lighting6 support the firmware version must be >= 47, flash your RFXtrx433 with the latest firmware!")
    Return
  Endif

  ' "Blyss"
  Select Case UCase(sType)
    Case "BLYSS"
      bBuf[2] = 0
    Case Else
      WriteLog("ERROR: Not a valid Lighting6 type=" & sType)
      Return
  End Select

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    sAddress = aAddr[0]
    sUnit = aAddr[1]
    ' IF LCase(sUnit) = "group" THEN
    '   bGroup = TRUE
    '   sUnit = 0
    ' ENDIF
  Else
    WriteLog("ERROR: Address has wrong format, use '<Device> <Unit>'!")
    Return
  Endif

  If Len(sAddress) = 6 And If Left(sAddress, 2) = "0x" Then
    sAddress = Right(sAddress, 4)
  Else If Len(sAddress) <> 4 Then
    WriteLog("ERROR: Lighting6 device ID address length must be 4 characters, or 6 if you use 0x in front!")
    Return
  Endif

  If sAddress = "0000" Then
    WriteLog("ERROR: Use a Lighting6 address ID different than '0000'!")
    Return
  Endif

  bBuf[0] = 11
  bBuf[1] = pTypeLighting6
  bBuf[3] = iSeq

  bBuf[4] = CByte(Val("&H" & Mid(sAddress, 1, 2))) ' 00-FF
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 3, 2))) ' 00-FF
  bBuf[6] = Asc(UCase(Left$(sUnit, 1))) ' A-F groupcode
  bBuf[7] = Val(Right(sUnit, 1)) ' 1-x unitcode

  Select sCmd
    Case "ON"
      bBuf[8] = 0
    Case "OFF"
      bBuf[8] = 1
    Case "ALL OFF", "GROUP OFF"
      bBuf[8] = 3
    Case "ALL ON", "GROUP ON"
      bBuf[8] = 2
    Case Else
      WriteLog("ERROR: Unknown Lighting6 command '" & sCmd & "' given!")
      Return
  End Select
  bBuf[9] = iLighting6CmndSeqNbr
  Inc iLighting6CmndSeqNbr
  If iLighting6CmndSeqNbr > 4 Then iLighting6CmndSeqNbr = 0

  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Lighting6 '" & Error.Text & "' at '" & Error.Where & "'")

End

' Enum FAN As Byte
'      packetlength = 0
'      packettype = 1
'      subtype = 2
'      seqnbr = 3
'      id1 = 4
'      id2 = 5
'      id3 = 6
'      cmnd = 7
'      filler = 8 'bits 3-0
'      rssi = 8   'bits 7-4
'      size = 8
'
'      'types for Fan
'      pTypeFan = &H17
'      sTypeSiemensSF01 = &H0
'
'      sTimer = 1
'      sMin = 2
'      sLearn = 3
'      sPlus = 4
'      sConfirm = 5
'      sLight = 6
'  End Enum

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Fan
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Fan(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[10]
  Dim sCmd As String = UCase(sCommand)

  ' "Siemens SF01"
  Select Case UCase(sType)
    Case "SF01"
      bBuf[2] = sTypeSiemensSF01
    Case Else
      WriteLog("ERROR: Not a valid Fan type=" & sType)
      Return
  End Select

  If Len(sAddress) = 8 And If Left(sAddress, 2) = "0x" Then
    sAddress = Right(sAddress, 6)
  Else If Len(sAddress) <> 6 Then
    WriteLog("ERROR: Fan device ID address length must be 6 characters, or 8 if you use 0x in front!")
    Return
  Endif

  bBuf[0] = 8
  bBuf[1] = pTypeFan
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & Mid(sAddress, 1, 2))) ' 00
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 3, 2))) ' 00-7F
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 5, 2))) ' 00-FF

  Select sCmd
    Case "TIMER"
      bBuf[7] = 1
    Case "-"
      bBuf[7] = 2
    Case "LEARN"
      bBuf[7] = 3
    Case "+"
      bBuf[7] = 4
    Case "CONFIRM"
      bBuf[7] = 5
    Case "LIGHT"
      bBuf[7] = 6
    Case Else
      WriteDebugLog("Unknown Fan command '" & sCmd & "' given!")
      Return
  End Select
  bBuf[8] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Fan '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Security1
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Security1(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[9]
  Dim sCmd As String = UCase(sCommand)

  ' "X10Security", "KD101", "SA30", "PowerCodeSensor", "PowerCodeMotion", "PowerCodeAux", "Meiantech"
  Select Case UCase(sType)
    Case "X10SECURITY", "X10SECDW"
      bBuf[2] = 0
    Case "X10SECMOTION"
      bBuf[2] = 1
    Case "X10SECREMOTE"
      bBuf[2] = 2
    Case "KD101"
      If sCmd <> "PANIC" And If sCmd <> "PAIR" Then
        WriteLog("ERROR: KD101 only supports a Panic and Pair command!")
        Return
      Endif
      bBuf[2] = 3
    Case "SA30"
      If sCmd <> "PANIC" And If sCmd <> "PAIR" Then
        WriteLog("ERROR: SAS30 only supports a Panic and Pair command!")
        Return
      Endif
      bBuf[2] = 9
    Case "POWERCODEDW"
      If sCmd <> "NORMAL" And If sCmd <> "ALARM" And If sCmd <> "NORMAL+TAMPER" And If sCmd <> "ALARM+TAMPER" Then
        WriteLog("ERROR: Visonic door sensors only support a Normal, Alarm, Normal+Tamper and Alarm+Tamper command!")
        Return
      Endif
      bBuf[2] = 4
    Case "POWERCODEMOTION"
      If sCmd <> "NO MOTION" And If sCmd <> "MOTION" And If sCmd <> "NO MOTION+TAMPER" And If sCmd <> "MOTION+TAMPER" Then
        WriteLog("ERROR: Visonic motion sensors only support a Motion, No Motion, Motion+Tamper and No Motion+Tamper command!")
        Return
      Endif
      bBuf[2] = 5
    Case "POWERCODEAUX"
      If sCmd <> "NORMAL" And If sCmd <> "ALARM" And If sCmd <> "NORMAL+TAMPER" And If sCmd <> "ALARM+TAMPER" Then
        WriteLog("ERROR: Visonic door sensors only support a Normal, Alarm, Normal+Tamper and Alarm+Tamper command!")
        Return
      Endif
      bBuf[2] = 6
    Case "MEIANTECH"
      If sCmd <> "PANIC" And If sCmd <> "ARM HOME" And If sCmd <> "ARM AWAY" And If sCmd <> "DISARM" Then
        WriteLog("ERROR: Meiantech only supports a Panic, Disarm, Arm Away and Arm Home command!")
        Return
      Endif
      bBuf[2] = 8
    Case Else
      WriteLog("ERROR: Not a valid Security1 type=" & sType)
      Return
  End Select

  If Len(sAddress) = 8 And If Left(sAddress, 2) = "0x" Then
    sAddress = Right(sAddress, 6)
  Else If Len(sAddress) <> 6 Then
    WriteLog("ERROR: Security1 device ID address length must be 6 characters, or 8 if you use 0x in front!")
    Return
  Endif

  bBuf[0] = 8
  bBuf[1] = pTypeSecurity1
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & Mid(sAddress, 1, 2))) ' 00-FF
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 3, 2))) ' 00-FF
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 5, 2))) ' 00-FF

  Select Case sCmd
    Case "NORMAL"
      bBuf[7] = 0
    Case "NORMAL DELAYED"
      bBuf[7] = 1
    Case "ALARM"
      bBuf[7] = 2
    Case "ALARM DELAYED"
      bBuf[7] = 3
    Case "MOTION"
      bBuf[7] = 4
    Case "NO MOTION"
      bBuf[7] = 5
    Case "PANIC"
      bBuf[7] = 6
    Case "PANIC END"
      bBuf[7] = 7
    Case "ARM AWAY"
      bBuf[7] = 9
    Case "ARM AWAY DELAYED"
      bBuf[7] = &HA
    Case "ARM HOME"
      bBuf[7] = &HB
    Case "ARM HOME DELAYED"
      bBuf[7] = &HC
    Case "DISARM"
      bBuf[7] = &HD
    Case "LIGHT 1 OFF"
      bBuf[7] = &H10
    Case "LIGHT 1 ON"
      bBuf[7] = &H11
    Case "LIGHT 2 OFF"
      bBuf[7] = &H12
    Case "LIGHT 2 ON"
      bBuf[7] = &H13
    Case "DARK"
      bBuf[7] = &H14
    Case "LIGHT"
      bBuf[7] = &H15
    Case "BATTERY LOW"
      bBuf[7] = &H16
    Case "PAIR"
      bBuf[7] = &H17
    Case "NORMAL+TAMPER"
      bBuf[7] = &H80
    Case "NORMAL DELAYED+TAMPER"
      bBuf[7] = &H81
    Case "ALARM+TAMPER"
      bBuf[7] = &H82
    Case "ALARM DELAYED+TAMPER"
      bBuf[7] = &H83
    Case "MOTION+TAMPER"
      bBuf[7] = &H84
    Case "NO MOTION+TAMPER"
      bBuf[7] = &H85
    Case Else
      WriteLog("ERROR: Unknown Security1 command '" & sCmd & "' given!")
      Return
  End Select
  bBuf[8] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Security1 '" & Error.Text & "' at '" & Error.Where & "'")

End

' ENUM CURTAIN1 AS Integer
'   packetlength = 0
'   packettype = 1
'   subtype = 2
'   seqnbr = 3
'   housecode = 4
'   unitcode = 5
'   cmnd = 6
'   filler = 7
'   size = 7
'   pType = &H18
'   Harrison = &H0
' END ENUM

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Curtain1
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Curtain1(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[8]
  Dim sCmd As String = UCase(sCommand)

  ' "HARRISON"
  Select Case UCase(sType)
    Case "HARRISON"
      If Not (Left$(sAddress, 1) Like "[A-P]") Or If Not (Right$(sAddress, 1) Like "[0-9]")
        WriteLog("ERROR: Not a valid Harrison address=" & sAddress)
        Return
      Endif
      bBuf[2] = &H0
    Case Else
      WriteLog("ERROR: Not a valid Curtain type=" & sType)
      Return
  End Select

  bBuf[0] = 7
  bBuf[1] = pTypeCurtain1
  bBuf[3] = iSeq
  bBuf[4] = Asc(UCase(Left$(sAddress, 1))) ' A-P
  bBuf[5] = Val(Right$(sAddress, 2)) ' 0-9

  Select Case sCmd
    Case "OPEN"
      bBuf[6] = 0
    Case "CLOSE"
      bBuf[6] = 1
    Case "STOP"
      bBuf[6] = 2
    Case "PROGRAM"
      bBuf[6] = 3
    Case Else
      WriteLog("ERROR: Unknown Curtain command '" & UCase(sCmd) & "' given!")
      Return
  End Select
  bBuf[7] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Curtain1 '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Chime
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Chime(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[8]
  Dim sCmd As String = UCase(sCommand)

  ' "ByronSX"
  Select Case UCase(sType)
    Case "BYRONSX"
      bBuf[2] = 0
    Case "BYRONMP"
      bBuf[2] = 1
    Case Else
      WriteLog("ERROR: Not a valid Chime type=" & sType)
      Return
  End Select

  If (Len(sAddress) <> 2) Then
    WriteLog("ERROR: Not a valid Chime address=" & sAddress)
    Return
  Endif

  Select Case bBuf[2]
    Case sTypeByronSX
      ' check 0-F
      If Not (Left$(sAddress, 1) Like "[0-F]") Or If Not (Right$(sAddress, 1) Like "[0-F]")
        WriteLog("ERROR: Not a valid ByronSX Chime address=" & sAddress)
        Return
      Endif
  End Select

  bBuf[0] = 7
  bBuf[1] = pTypeChime
  bBuf[3] = iSeq
  bBuf[4] = 0
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 1, 2))) ' 00-FF

  Select Case bBuf[2]
    Case sTypeByronSX

      Select Case sCmd
        Case "BIGBEN"
          bBuf[6] = 3
        Case "SOLO"
          bBuf[6] = 2
        Case "TUBULAR2"
          bBuf[6] = 5
        Case "TUBULAR3"
          bBuf[6] = 1
        Case Else
          WriteLog("ERROR: Unknown Chime command '" & sCmd & "' given!")
          Return
      End Select
    Case sTypeByronMP
        ' TODO: code chime
        ' bBuf[4] = 0 ' id1
        ' bBuf[5] = 0 ' id2
        bBuf[6] = &H54
  End Select
  bBuf[7] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Chime '" & Error.Text & "' at '" & Error.Where & "'")

End

' ENUM THERMOSTAT2 AS Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     unitcode = 4
'     cmnd = 5
'     filler = 6  'bits 3-0
'     rssi = 6    'bits 7-4
'     size = 6
' END ENUM

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Thermostat2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Thermostat2(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[7]
  Dim sCmd As String = UCase(sCommand)

  If Len(sAddress) = 2 Then
    If Not (Left$(sAddress, 1) Like "[0-1]") Or If Not (Right$(sAddress, 1) Like "[0-F]")
      WriteLog("ERROR: Not a valid " & sType & " address=" & sAddress)
      Return
    Endif
  Else
    WriteLog("ERRORNot a valid " & sType & " address (invalid lenght)=" & sAddress)
    Return
  Endif

  Select Case UCase(sType)
    Case "HE105"
      bBuf[2] = &H0
    Case "RTS10"
      bBuf[2] = &H1
    Case Else
      WriteLog("ERROR: Not a valid Thermostat2 type=" & sType)
      Return
  End Select

  bBuf[0] = 6
  bBuf[1] = pTypeThermostat2
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & sAddress))

  Select Case sCmd
    Case "ON"
      bBuf[5] = 1
    Case "OFF"
      bBuf[5] = 0
    Case "PROGRAM"
      bBuf[5] = 2
    Case Else
      WriteLog("ERROR: Unknown Thermostat2 command '" & UCase(sCmd) & "' given!")
      Return
  End Select
  bBuf[6] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Thermostat2 '" & Error.Text & "' at '" & Error.Where & "'")

End

' Enum RFY As Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     unitcode = 7
'     cmnd = 8
'     rfu1 = 9
'     rfu2 = 10
'     rfu3 = 11
'     filler = 12 'bits 3-0
'     rssi = 12   'bits 7-4
'     size = 12
'
'     ' types for Rfy
'     pTypeRFY = &H1A
'     RFY = &H0
'     RFYext = &H1    'not yet used
'
'     sStop = 0
'     sUp = 1
'     sUpStop = 2
'     sDown = 3
'     sDownStop = 4
'     sUpDown = 5
'     sListRemotes = 6
'
'     sProgram = 7
'     s2SecProgram = 8
'     s7SecProgram = 9
'     s2SecStop = 10
'     s5SecStop = 11
'     s5SecUpDown = 12
'     sEraseThis = 13
'     sEraseAll = 14
'     sEnableSunWind = 19
'     sDisableSun = 20
' End Enum


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Somfy RTS / RFY
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RFY(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[13]
  Dim sCmd As String = UCase(sCommand)
  Dim aAddr As String[]
  Dim sUnit As String

  ' "RFY"
  Select Case UCase(sType)
    Case "RFY"
      bBuf[2] = sTypeRFY
    Case "RFYEXT"
      bBuf[2] = sTypeRFYEXT
    Case Else
      WriteLog("ERROR: Not a valid Somfy RTS/RFY type=" & sType)
      Return
  End Select

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    sAddress = aAddr[0]
    sUnit = aAddr[1]
  Else
    WriteLog("ERROR: Somfy RTS/RFY address has wrong format, use '<Device> <Unit>'!")
    Return
  Endif

  If Len(sAddress) = 7 And If Left(sAddress, 2) = "0x" Then sAddress = Right(sAddress, 5)
  If Len(sAddress) <> 5 Then
    WriteLog("ERROR: Somfy RTS/RFY device address length must be 5 characters, or 7 if you use 0x in front!")
    Return
  Endif

  bBuf[0] = 12
  bBuf[1] = pTypeRFY
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & Mid(sAddress, 1, 1))) ' 0-F
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 2, 2))) ' 00-FF
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 4, 2))) ' 00-FF
  bBuf[7] = CByte(Val("&H" & sUnit))

  Select sCmd
    Case "STOP"
      bBuf[8] = 0
    Case "UP"
      bBuf[8] = 1
    Case "UPSTOP"
      bBuf[8] = 2
    Case "DOWN"
      bBuf[8] = 3
    Case "DOWNSTOP"
      bBuf[8] = 4
    Case "UPDOWN"
      bBuf[8] = 5
    Case "REMOTES"
      bBuf[8] = 6
    Case "PROGRAM"
      bBuf[8] = 7
    Case "PROGRAM2S"
      bBuf[8] = 8
    Case "PROGRAM7S"
      bBuf[8] = 9
    Case "STOP2S"
      bBuf[8] = 10
    Case "STOP5S"
      bBuf[8] = 11
    Case "UPDOWN5S"
      bBuf[8] = 12
    Case "ERASE"
      bBuf[8] = 13
    Case "ERASEALL"
      bBuf[8] = 14
    Case "ENSUNFLAG"
      bBuf[8] = 19
    Case "DISSUNFLAG"
      bBuf[8] = 20
    Case Else
      WriteLog("ERROR: Unknown Somfy RTS/RFY command '" & sCmd & "' given!")
      Return
  End Select
  bBuf[9] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: RFY '" & Error.Text & "' at '" & Error.Where & "'")

End

' Enum Radiator1 As Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4 ' 2 bits
'     filler = 5 ' 6 bits
'     id2 = 5
'     id3 = 6
'     unitcode = 7
'     cmnd = 8
'     temperature = 9
'     temppoint5 = 10
'     filler = 11 ' 4 bits
'     rssi = 12   ' 4 bits

'     ' types for Radiator1
'     pTypeRadiator1 = &H1A
'     Smartwares = &H0

'     sDay = 0
'     sNight = 1
' End Enum

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Radiator1
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Radiator1(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[13]
  Dim sCmd As String = UCase(sCommand)
  Dim aAddr, aTemp As String[]
  Dim sUnit, sSetPoint As String
  Dim iTemp, iTemp5 As Integer

  If $iFirmWareVersion < 233 Then
    WriteLog("ERROR: For Radiator1 support the firmware version must be >= 233, flash your RFXtrx433e with the latest firmware!")
    Return
  Endif

  ' "Radiator"
  Select Case UCase(sType)
    Case "SMARTWARES"
      bBuf[2] = sTypeSmartwares
    Case Else
      WriteLog("ERROR: Not a valid Radiator1 type=" & sType)
      Return
  End Select

  aAddr = Split(sAddress, " ")
  If aAddr.Count = 2 Then
    sAddress = aAddr[0]
    sUnit = aAddr[1]
  Else
    WriteLog("ERROR: Radiator1 address has wrong format, use '<Device> <Unit>'!")
    Return
  Endif

  If Len(sAddress) = 9 And If Left(sAddress, 2) = "0x" Then sAddress = Right(sAddress, 7)
  If Len(sAddress) <> 7 Then
    WriteLog("ERROR: Radiator1 device address length must be 7 characters, or 9 if you use 0x in front!")
    Return
  Endif

  bBuf[0] = 12
  bBuf[1] = pTypeRadiator1
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & Mid(sAddress, 1, 1))) ' 0-3
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 2, 2))) ' 00-FF
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 4, 2))) ' 00-FF
  bBuf[7] = CByte(Val("&H" & Mid(sAddress, 6, 2))) ' 00-FF
  bBuf[8] = CByte(Val("&H" & sUnit))

  Select sCmd
    Case "DAY"
      bBuf[9] = 0
    Case "NIGHT"
      bBuf[9] = 1
    Case Else
      If InStr(sCmd, "SP ") Then ' SP 5 - 28
        bBuf[9] = 2
        sSetPoint = Replace(sCmd, "SP ", "")
        aTemp = Split(sSetPoint, ".")
        If aTemp.Count = 2 Then
          iTemp = aTemp[0]
          iTemp5 = Round(0.5 * aTemp[1]) ' .0 or .5
        Else
          iTemp5 = 0
        Endif
        If iTemp < 5 Or If iTemp > 28 Then
          WriteLog("ERROR: Settemp value for Radiator1 out of range '" & iTemp & "' (5-28)!")
          Return
        Endif
        bBuf[10] = CByte(iTemp)
        bBuf[11] = CByte(iTemp5)
      Else
        WriteLog("ERROR: Unknown Radiator command '" & sCmd & "' given only Night, Day and SP xx.x are supported!")
        Return
      Endif
  End Select

  bBuf[12] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: Radiator '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Returns the receiver type, the caller needs to use its own table to decode it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetReceiverType() As Integer

  Return $iReceiverType

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Returns the receiver friendly name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetReceiverName() As String

  Select $iReceiverType
    Case recType310
      Return "Receiver 310MHz"
    Case recType315
      Return "Receiver 315MHz"
    Case recType43392
      Return "Receiver 433.92MHz"
    Case trxType43392
      Return "Transceiver 433.92MHz"
    Case recType86800
      Return "Receiver 868MHz"
    Case recType86800FSK
      Return "Receiver 868MHz FSK"
    Case recType86830
      Return "Receiver 868.3MHz"
    Case recType86830FSK
      Return "Receiver 868.3MHz FSK"
    Case recType86835
      Return "Receiver 868.35MHz"
    Case recType86835FSK
      Return "Receiver 868.35MHz FSK"
    Case recType86895
      Return "Receiver 868.35MHz FSK"
    Case Else
      Return "Unknown"
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Returns the Firmware version, including the date from the releasenotes
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetFirmwareVersion() As String

  Dim sStr As String

  Select $iReceiverType
    Case recType315
      Select $iFirmWareVersion
        Case 6
          sStr = "25-07-2014"
        Case 5
          sStr = "14-04-2014"
        Case 4
          sStr = "03-05-2012"
        Case 3
          sStr = "20-03-2012"
        Case 2
          sStr = "16-02-2012"
        Case 1
          sStr = "21-01-2012"
      End Select
    Case recType43392, trxType43392
      Select $iFirmWareVersion
        Case 1005
          sStr = "23-05-2016"
        Case 1004
          sStr = "17-05-2016"
        Case 1003
          sStr = "14-05-2016"
        Case 1002
          sStr = "06-05-2016"
        Case 1001
          sStr = "18-02-2016"
        Case 95, 195, 251
          sStr = "06-02-2016"
        Case 94, 194, 250
          sStr = "24-12-2015"
        Case 93, 193, 249
          sStr = "23-11-2015"
        Case 92, 192, 248
          sStr = "17-09-2015"
        Case 247
          sStr = "31-08-2015"
        Case 246
          sStr = "06-08-2015"
        Case 91, 191, 245
          sStr = "24-07-2015"
        Case 90, 190, 244
          sStr = "23-06-2015"
        Case 89, 189, 243
          sStr = "01-06-2015"
        Case 88, 188, 242
          sStr = "05-05-2015"
        Case 87, 187, 241
          sStr = "02-05-2015"
        Case 86, 186, 240
          sStr = "19-03-2015"
        Case 85, 185, 239
          sStr = "18-03-2015"
        Case 84, 184, 237
          sStr = "05-03-2015"
        Case 83, 183, 236
          sStr = "14-01-2015"
        Case 182, 235
          sStr = "06-01-2015"
        Case 81, 181, 234
          sStr = "02-01-2015"
        Case 180, 233
          sStr = "13-12-2014"
        Case 232
          sStr = "09-10-2014"
        Case 231
          sStr = "24-09-2014"
        Case 179, 230
          sStr = "17-09-2014"
        Case 78, 178, 229
          sStr = "25-07-2014"
        Case 228
          sStr = "17-07-2014"
        Case 77, 177
          sStr = "25-06-2014"
        Case 76, 176, 226
          sStr = "29-05-2014"
        Case 175, 225
          sStr = "05-05-2014"
        Case 74
          sStr = "19-04-2014"
        Case 73
          sStr = "07-04-2014"
        Case 72
          sStr = "31-03-2014"
        Case 71
          sStr = "05-12-2013"
        Case 70
          sStr = "11-11-2013"
        Case 69
          sStr = "23-10-2013"
        Case 68
          sStr = "27-09-2013"
        Case 67
          sStr = "07-06-2013"
        Case 66
          sStr = "11-04-2013"
        Case 65
          sStr = "09-02-2013"
        Case 64
          sStr = "02-02-2013"
        Case 63
          sStr = "15-01-2013"
        Case 62
          sStr = "01-01-2013"
        Case 61
          sStr = "13-12-2012"
        Case 60
          sStr = "27-11-2012"
        Case 59
          sStr = "25-11-2012"
        Case 58
          sStr = "19-11-2012"
        Case 57
          sStr = "14-11-2012"
        Case 56
          sStr = "09-11-2012"
        Case 55
          sStr = "20-10-2012"
        Case 54
          sStr = "17-10-2012"
        Case 53
          sStr = "15-10-2012"
        Case 52
          sStr = "06-10-2012"
        Case 51
          sStr = "03-10-2012"
        Case 50
          sStr = "14-09-2012"
        Case 49
          sStr = "26-08-2012"
        Case 48
          sStr = "18-08-2012"
        Case 47
          sStr = "17-08-2012"
        Case 46
          sStr = "16-07-2012"
        Case 45
          sStr = "25-06-2012"
        Case 44
          sStr = "18-06-2012"
        Case 43
          sStr = "12-06-2012"
        Case 42
          sStr = "26-05-2012"
        Case 41
          sStr = "10-05-2012"
        Case 40
          sStr = "02-05-2012"
        Case 39
          sStr = "02-05-2012"
        Case 38
          sStr = "30-04-2012"
        Case 37
          sStr = "28-04-2012"
        Case 36
          sStr = "27-04-2012"
        Case 35
          sStr = "25-04-2012"
        Case 34
          sStr = "20-04-2012"
        Case 33
          sStr = "17-04-2012"
        Case 32
          sStr = "02-04-2012"
        Case 31
          sStr = "02-04-2012"
        Case 30
          sStr = "30-03-2012"
        Case 29
          sStr = "19-03-2012"
        Case 28
          sStr = "15-03-2012"
        Case 27
          sStr = "14-03-2012"
        Case 26
          sStr = "13-03-2012"
        Case 25
          sStr = "12-03-2012"
        Case 24
          sStr = "07-03-2012"
        Case 23
          sStr = "07-03-2012"
        Case 22
          sStr = "01-03-2012"
        Case 21
          sStr = "16-02-2012"
        Case 20
          sStr = "13-02-2012"
        Case 19
          sStr = "08-02-2012"
        Case 18
          sStr = "30-01-2012"
        Case 17
          sStr = "24-01-2012"
        Case 16
          sStr = "18-01-2012"
        Case 15
          sStr = "16-01-2012"
        Case 14
          sStr = "10-01-2012"
        Case 13
          sStr = "09-01-2012"
        Case 12
          sStr = "01-01-2012"
        Case 11
          sStr = "31-12-2011"
        Case 10
          sStr = "30-12-2011"
        Case 09
          sStr = "12-12-2011"
        Case 08
          sStr = "12-12-2011"
      End Select
  End Select

  If sStr Then
    Return $iFirmwareVersion & " (" & sStr & ")"
  Else
    Return $iFirmwareVersion
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the hardware version, format is X.Y
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetHardwareVersion() As String

  Return $sHardwareVersion

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the list of enabled protocols, if not in the list, it is disabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetEnabledProtocols() As String[]

  Return $aEnabledProtocols

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieves the RFXComTRX instance information for JSON-RPC and RFXCom Commander
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JsonRpc_Tools_RFXCom_Get(cData As JSONCollection) As JSONCollection

  Dim cResult As New JSONCollection

  If cData = Null Then Return Null

  Select cData["command"]

    ' Get controller information. If working, ReceiverType, ReceiverName, etc
    Case "controller"
      cResult.Add(Instance, "instance_id")
      cResult.Add(IsRunning, "running")
      If Not IsRunning Then
        cResult.Add(ErrorText, "errortext")
      Else
        cResult.Add(GetReceiverType(), "receivertype")
        cResult.Add(GetReceiverName(), "receivername")
        cResult.Add(GetEnabledProtocols(), "protocols")
        cResult.Add(GetFirmwareVersion(), "firmwareversion")
        cResult.Add(GetHardwareVersion(), "hardwareversion")
        cResult.Add($sFirmwareType, "firmwaretype")
        cResult.Add($sInterface, "interface")
        cResult.Add($sTCPHost & ":" & $iTCPPort, "host")
        cResult.Add($sSerPort, "serialport")
        cResult.Add($sBaud, "baudrate")
        cResult.Add($bRelayEnabled, "relayenabled")
        cResult.Add($iRelayPort, "relayport")
        cResult.Add($bGlobalX10, "globalx10")
        cResult.Add($bOldAddrFmt, "oldaddrfmt")
      Endif
      cResult.Add("rfxcomtrx", "rfxcom")

    Case Else
      Return Null

  End Select

  Return cResult

End

' Enum BLINDS1 As Byte
'     packetlength = 0
'     packettype = 1
'     subtype = 2
'     seqnbr = 3
'     id1 = 4
'     id2 = 5
'     id3 = 6
'     unitcode = 7    ' bits 3-0
'     id4 = 7         ' bits 7-4  at BlindsT6 & T7
'     cmnd = 8
'     filler = 9 ' bits 3-0
'     rssi = 9   ' bits 7-4
'     size = 9
'
'     ' types for Blindss
'     pTypeBlinds = &H19
'     BlindsT0 = &H0    ' RollerTrol or Hasta new
'     BlindsT1 = &H1    ' Hasta old
'     BlindsT2 = &H2    ' A-OK RF01
'     BlindsT3 = &H3    ' A-OK AC114
'     BlindsT4 = &H4    ' RAEX
'     BlindsT5 = &H5    ' Media Mount
'     BlindsT6 = &H6    ' DC106
'     BlindsT7 = &H7    ' Forest
'     BlindsT8 = &H8    ' Chamberlain CS4330CN
'     BlindsT9 = &H9    ' Sunpery
'     BlindsT10 = &HA   ' Dolat
'     BlindsT11 = &HB   ' ESMO, Brel
'
'     sOpen = 0
'     sClose = 1
'     sStop = 2
'     sConfirm = 3
'     sLimit = 4
'     sLowerLimit = 5
'     sDeleteLimits = 6
'     sChangeDirection = 7
'     sLeft = 8
'     sRight = 9
'     s9ChangeDirection = 6
'     s9ImA = 7
'     s9ImCenter = 8
'     s9ImB = 9
'     s9EraseCurrentCh = 10
'     s9EraseAllCh = 11
'     s10LearnMaster = 4
'     s10EraseCurrentCh = 5
'     s10ChangeDirection = 6
' End Enum

Public Sub Blinds1(sType As String, sAddress As String, sCommand As String)

  Dim bBuf As New Byte[10]
  Dim sCmd As String = UCase(sCommand)
  Dim aAddr As String[]
  Dim sUnit As String

  ' "Blinds1"
  Select Case UCase(sType)
    Case "BLINDST0"
      bBuf[2] = sTypeBlindsT0
    Case "BLINDST1"
      bBuf[2] = sTypeBlindsT1
    Case "BLINDST2"
      bBuf[2] = sTypeBlindsT2
    Case "BLINDST3"
      bBuf[2] = sTypeBlindsT3
    Case "BLINDST4"
      bBuf[2] = sTypeBlindsT4
    Case "BLINDST5"
      bBuf[2] = sTypeBlindsT5
    Case "BLINDST6"
      bBuf[2] = sTypeBlindsT6
    Case "BLINDST7"
      bBuf[2] = sTypeBlindsT7
    Case "BLINDST8"
      bBuf[2] = sTypeBlindsT8
    Case "BLINDST9"
      bBuf[2] = sTypeBlindsT9
    Case "BLINDST10"
      bBuf[2] = sTypeBlindsT10
    Case Else
      WriteLog("ERROR: Not a valid Blinds1 type=" & sType)
      Return
  End Select

  ' 0x000000
  ' 0x000000 1
  ' 0x0000000 1
  ' strip '0x
  If Left(sAddress, 2) = "0x" Then sAddress = Right(sAddress, Len(sAddress) - 2)

  ' check address format for the different formats per subtype
  Select Case UCase(sType)
     Case "BLINDST0", "BLINDST1", "BLINDST8", "BLINDST9" ' need unit code
      aAddr = Split(sAddress, " ")
      If aAddr.Count = 2 Then
        If Len(aAddr[0]) = 6 Then
          sAddress = aAddr[0]
        Else
          WriteDebugLog("Blinds1 address subtype 0, 1, 8 or 9 has wrong format, use '0x00a102 1'!")
          Return
        Endif
        ' all units
        If aAddr[1] = "ALL" Then
          sUnit = 0
        Else
          sUnit = aAddr[1]
        Endif
      Else
        WriteDebugLog("Blinds1 address subtype 0, 1, 8 or 9 has wrong format, use '0x00a102 1'!")
        Return
      Endif
    Case "BLINDST2", "BLINDST3", "BLINDST4", "BLINDST5", "BLINDST10" ' no unit code
      aAddr = Split(sAddress, " ")
      If aAddr.Count = 1 Then
        If Len(aAddr[0]) = 6 Then
          sAddress = aAddr[0]
        Else
          WriteDebugLog("Blinds1 address 2-5, 10 or 11 has wrong format, use '0x00a1b2'!")
          Return
        Endif
        sUnit = 0
      Else
        WriteDebugLog("Blinds1 address 2-5, 10 or 11 has wrong format, use '0x00a1b2'!")
        Return
      Endif
    Case "BLINDST6", "BLINDST7" ' has id4 field and unit code
      aAddr = Split(sAddress, " ")
      If aAddr.Count = 2 Then
        If Len(aAddr[0]) = 7 Then
          sAddress = aAddr[0]
        Else
          WriteDebugLog("Blinds1 address subtype 6 or 7 has wrong format, use '0x00a1b2c 1'!")
          Return
        Endif
         ' all units
        If aAddr[1] = "ALL" Then
          sUnit = 0
        Else
          sUnit = Lsl(CByte(Val("&H" & aAddr[1])), 4) + CByte(Val("&H" & aAddr[1]))
        Endif
      Else
        WriteDebugLog("Blinds1 address subtype 6 or 7 has wrong format, use '0x00a1b2c 1'!")
        Return
      Endif
    Case Else
      WriteDebugLog("Blinds1 address unknown subtype! (" & sType & ")")
      Return
  End Select

  bBuf[0] = 9
  bBuf[1] = pTypeBlinds
  bBuf[3] = iSeq
  bBuf[4] = CByte(Val("&H" & Mid(sAddress, 1, 2))) ' 00-FF
  bBuf[5] = CByte(Val("&H" & Mid(sAddress, 3, 2))) ' 00-FF
  bBuf[6] = CByte(Val("&H" & Mid(sAddress, 5, 2))) ' 00-FF
  bBuf[7] = CByte(Val("&H" & sUnit)) ' 0

  Select sCmd
    Case "OPEN", "OFF"
      bBuf[8] = 0
    Case "CLOSE", "ON"
      bBuf[8] = 1
    Case "STOP"
      bBuf[8] = 2
    Case "CONFIRM", "PAIR", "PROGRAM"
      bBuf[8] = 3
    Case "SETLIMIT", "SETUPPERLIMIT"
      bBuf[8] = 4
    Case "SETLOWERLIMIT"
      bBuf[8] = 5
    Case "DELLIMITS"
      bBuf[8] = 6
    Case "CHANGEDIR"
      If bBuf[2] = sTypeBlindsT9 Or If bBuf[2] = sTypeBlindsT10 Then 
        bBuf[8] = 6 ' T9, T10
      Else
        bBuf[8] = 7
      Endif
    Case "UP" ' T10
      bBuf[8] = 1
    Case "DOWN" ' T10
      bBuf[8] = 0
    Case "POSA"
      bBuf[8] = 7
    Case "LEFT"
      bBuf[8] = 8
    Case "RIGHT"
      bBuf[8] = 9
    Case "POSCENTER"
      bBuf[8] = 8
    Case "POSB"
      bBuf[8] = 9
    Case "ERASECHANNEL"
      If bBuf[2] = sTypeBlindsT10 Then
        bBuf[8] = 5 ' T10
      Else
        bBuf[8] = 10
      Endif
    Case "ERASEALLCHANNELS"
      bBuf[8] = 11
    Case "LEARNMASTER"
      bBuf[8] = 4
    Case Else
        WriteDebugLog("Unknown Blinds1 command '" & sCmd & "' given!")
        Return
  End Select
  bBuf[9] = 0
  QueueCommand(bBuf)

Catch ' some errors
  WriteLog("ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End
