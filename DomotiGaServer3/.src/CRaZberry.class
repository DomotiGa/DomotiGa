' Gambas class file

' Description:
' CRaZberry.class
' Provide support for RaZberry Z-Wave interface.

' Development Status:
' Working

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "RaZberry"
Public PluginFriendlyName As String = "RaZberry Z-Wave"
Public PluginVersion As String = "1.10"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[RaZberry] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sUsername As String
Private $sPassword As String
Private $iPollTime As Integer
Private $bDebug As Boolean

' RaZberry controller and network information
Private $cZWaveNetwork As New JSONCollection

Public hRaZberryInit As HttpClient
Public hRaZberryCmd As HttpClient
Public bInit As Boolean
Public $iUpdateTime As Integer
Public sBuffer As String
Public tRaZberry As Timer

Public sLibraryType As String = ("Unknown")

' node data
Private cCommandClassId As New Collection

' queue and command buffer stuff
Private cQueue As New Collection   ' command buffer
Private bHttpBusy As Boolean       ' already fetching?

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Z-Wave Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Const BASIC_TYPE_CONTROLLER As Byte = &H01
Private Const BASIC_TYPE_STATIC_CONTROLLER As Byte = &H02
Private Const BASIC_TYPE_SLAVE As Byte = &H03
Private Const BASIC_TYPE_ROUTING_SLAVE As Byte = &H04

Private Const GENERIC_TYPE_GENERIC_CONTROLLER As Byte = &H01
Private Const GENERIC_TYPE_STATIC_CONTROLLER As Byte = &H02
Private Const GENERIC_TYPE_AV_CONTROL_POINT As Byte = &H03
Private Const GENERIC_TYPE_DISPLAY As Byte = &H04
Private Const GENERIC_TYPE_THERMOSTAT As Byte = &H08
Private Const GENERIC_TYPE_WINDOW_COVERING As Byte = &H09
Private Const GENERIC_TYPE_REPEATER_SLAVE As Byte = &H0F
Private Const GENERIC_TYPE_SWITCH_BINARY As Byte = &H10
Private Const GENERIC_TYPE_SWITCH_MULTILEVEL As Byte = &H11
Private Const GENERIC_TYPE_SWITCH_REMOTE As Byte = &H12
Private Const GENERIC_TYPE_SWITCH_TOGGLE As Byte = &H13
Private Const GENERIC_TYPE_ZIP_GATEWAY As Byte = &H14
Private Const GENERIC_TYPE_ZIP_NODE As Byte = &H15
Private Const GENERIC_TYPE_VENTILATION As Byte = &H16
Private Const GENERIC_TYPE_SENSOR_BINARY As Byte = &H20
Private Const GENERIC_TYPE_SENSOR_MULTILEVEL As Byte = &H21
Private Const GENERIC_TYPE_METER_PULSE As Byte = &H30
Private Const GENERIC_TYPE_METER As Byte = &H31
Private Const GENERIC_TYPE_ENTRY_CONTROL As Byte = &H40
Private Const GENERIC_TYPE_SEMI_INTEROPERABLE As Byte = &H50
Private Const GENERIC_TYPE_SENSOR_ALARM As Byte = &HA1
Private Const GENERIC_TYPE_NON_INTEROPERABLE As Byte = &HFF

Private Const COMMAND_CLASS_NO_OPERATION As Byte = &H00 ' 0
Private Const COMMAND_CLASS_BASIC As Byte = &H20 ' 32
Private Const COMMAND_CLASS_CONTROLLER_REPLICATION As Byte = &H21 ' 33
Private Const COMMAND_CLASS_APPLICATION_STATUS As Byte = &H22 ' 34
Private Const COMMAND_CLASS_ZIP_SERVICES As Byte = &H23 ' 35
Private Const COMMAND_CLASS_ZIP_SERVER As Byte = &H24 ' 36
Private Const COMMAND_CLASS_SWITCH_BINARY As Byte = &H25 ' 37
Private Const COMMAND_CLASS_SWITCH_MULTILEVEL As Byte = &H26 ' 38
Private Const COMMAND_CLASS_SWITCH_ALL As Byte = &H27 ' 39
Private Const COMMAND_CLASS_SWITCH_TOGGLE_BINARY As Byte = &H28 ' 40
Private Const COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL As Byte = &H29 ' 41
Private Const COMMAND_CLASS_CHIMNEY_FAN As Byte = &H2A ' 42
Private Const COMMAND_CLASS_SCENE_ACTIVATION As Byte = &H2B ' 43
Private Const COMMAND_CLASS_SCENE_ACTUATOR_CONF As Byte = &H2C ' 44
Private Const COMMAND_CLASS_SCENE_CONTROLLER_CONF As Byte = &H2D ' 45
Private Const COMMAND_CLASS_ZIP_CLIENT As Byte = &H2E ' 46
Private Const COMMAND_CLASS_ZIP_ADV_SERVICES As Byte = &H2F ' 47
Private Const COMMAND_CLASS_SENSOR_BINARY As Byte = &H30 ' 48
Private Const COMMAND_CLASS_SENSOR_MULTILEVEL As Byte = &H31 ' 49
Private Const COMMAND_CLASS_METER As Byte = &H32 ' 50
Private Const COMMAND_CLASS_ZIP_ADV_SERVER As Byte = &H33 ' 51
Private Const COMMAND_CLASS_ZIP_ADV_CLIENT As Byte = &H34 ' 52
Private Const COMMAND_CLASS_METER_PULSE As Byte = &H35 ' 53
Private Const COMMAND_CLASS_THERMOSTAT_HEATING As Byte = &H38 ' 56
Private Const COMMAND_CLASS_THERMOSTAT_MODE As Byte = &H40 ' 64
Private Const COMMAND_CLASS_THERMOSTAT_OPERATING_STATE As Byte = &H42 ' 66
Private Const COMMAND_CLASS_THERMOSTAT_SETPOINT As Byte = &H43 ' 67
Private Const COMMAND_CLASS_THERMOSTAT_FAN_MODE As Byte = &H44 ' 68
Private Const COMMAND_CLASS_THERMOSTAT_FAN_STATE As Byte = &H45 ' 69
Private Const COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE As Byte = &H46 ' 70
Private Const COMMAND_CLASS_THERMOSTAT_SETBACK As Byte = &H47 ' 71
Private Const COMMAND_CLASS_DOOR_LOCK_LOGGING As Byte = &H4C ' 76
Private Const COMMAND_CLASS_SCHEDULE_ENTRY_LOCK As Byte = &H4E ' 78
Private Const COMMAND_CLASS_BASIC_WINDOW_COVERING As Byte = &H50 ' 80
Private Const COMMAND_CLASS_MTP_WINDOW_COVERING As Byte = &H51 ' 81
Private Const COMMAND_CLASS_CENTRAL_SCENE As Byte = &H5B ' 91
Private Const COMMAND_CLASS_MULTI_INSTANCE As Byte = &H60 ' 96
Private Const COMMAND_CLASS_DOOR_LOCK As Byte = &H62 ' 98
Private Const COMMAND_CLASS_USER_CODE As Byte = &H63 ' 99
Private Const COMMAND_CLASS_CONFIGURATION As Byte = &H70 ' 112
Private Const COMMAND_CLASS_ALARM As Byte = &H71 ' 113
Private Const COMMAND_CLASS_MANUFACTURER_SPECIFIC As Byte = &H72 ' 114
Private Const COMMAND_CLASS_POWERLEVEL As Byte = &H73 ' 115
Private Const COMMAND_CLASS_PROTECTION As Byte = &H75 ' 117
Private Const COMMAND_CLASS_LOCK As Byte = &H76 ' 118
Private Const COMMAND_CLASS_NODE_NAMING As Byte = &H77 ' 119
Private Const COMMAND_CLASS_FIRMWARE_UPDATE_MD As Byte = &H7A ' 122
Private Const COMMAND_CLASS_GROUPING_NAME As Byte = &H7B ' 123
Private Const COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE As Byte = &H7C ' 124
Private Const COMMAND_CLASS_REMOTE_ASSOCIATION As Byte = &H7D ' 125
Private Const COMMAND_CLASS_BATTERY As Byte = &H80 ' 128
Private Const COMMAND_CLASS_CLOCK As Byte = &H81 ' 129
Private Const COMMAND_CLASS_HAIL As Byte = &H82 ' 130
Private Const COMMAND_CLASS_WAKE_UP As Byte = &H84 ' 132
Private Const COMMAND_CLASS_ASSOCIATION As Byte = &H85 ' 133
Private Const COMMAND_CLASS_VERSION As Byte = &H86 ' 134
Private Const COMMAND_CLASS_INDICATOR As Byte = &H87 ' 135
Private Const COMMAND_CLASS_PROPRIETARY As Byte = &H88 ' 136
Private Const COMMAND_CLASS_LANGUAGE As Byte = &H89 ' 137
Private Const COMMAND_CLASS_TIME As Byte = &H8A ' 138
Private Const COMMAND_CLASS_TIME_PARAMETERS As Byte = &H8B ' 139
Private Const COMMAND_CLASS_GEOGRAPHIC_LOCATION As Byte = &H8C ' 140
Private Const COMMAND_CLASS_COMPOSITE As Byte = &H8D ' 141
Private Const COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION As Byte = &H8E ' 142
Private Const COMMAND_CLASS_MULTI_CMD As Byte = &H8F ' 143
Private Const COMMAND_CLASS_ENERGY_PRODUCTION As Byte = &H90 ' 144
Private Const COMMAND_CLASS_MANUFACTURER_PROPRIETARY As Byte = &H91 ' 145
Private Const COMMAND_CLASS_SCREEN_MD As Byte = &H92 ' 146
Private Const COMMAND_CLASS_SCREEN_ATTRIBUTES As Byte = &H93 ' 147
Private Const COMMAND_CLASS_SIMPLE_AV_CONTROL As Byte = &H94 ' 148
Private Const COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD As Byte = &H95 ' 149
Private Const COMMAND_CLASS_AV_RENDERER_STATUS As Byte = &H96 ' 150
Private Const COMMAND_CLASS_AV_CONTENT_SEARCH_MD As Byte = &H97 ' 151
Private Const COMMAND_CLASS_SECURITY As Byte = &H98 ' 152
Private Const COMMAND_CLASS_AV_TAGGING_MD As Byte = &H99 ' 153
Private Const COMMAND_CLASS_IP_CONFIGURATION As Byte = &H9A ' 154
Private Const COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION As Byte = &H9B ' 155
Private Const COMMAND_CLASS_SENSOR_ALARM As Byte = &H9C ' 156
Private Const COMMAND_CLASS_SILENCE_ALARM As Byte = &H9D ' 157
Private Const COMMAND_CLASS_SENSOR_CONFIGURATION As Byte = &H9E ' 158
Private Const COMMAND_CLASS_MARK As Byte = &HEF ' 239
Private Const COMMAND_CLASS_NON_INTEROPERABLE As Byte = &HF0 ' 240

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sUsername = cPl.Settings["username"]
  $sPassword = cPl.Settings["password"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("RaZberry Z-Wave Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection 
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' init
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  bInit = True
  Initialize()

  ' define poll timer
  tRaZberry = New Timer As "tRaZberry"
  tRaZberry.Delay = $iPollTime * 1000 ' multiply for seconds
  tRaZberry.Stop

  Main.WriteLog(LogLabel & PluginFriendlyName & " initializing.")

  ' all ok
  IsRunning = True

Catch
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " FAILED to initialize")
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  IsRunning = False

End

Public Sub tRaZberry_Timer()

  GetUpdates()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetURL(sCmd As String) As String

  If $sUsername And If $sPassword Then
    Return "https://" & $sUsername & ":" & $sPassword & "@" & $sTCPHost & ":" & $iTCPPort & sCmd
  Else
    Return "http://" & $sTCPHost & ":" & $iTCPPort & sCmd
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Initialize() As Boolean

  Dim sURL As String = GetURL("/ZWaveAPI/Data/" & $iUpdateTime)
  Dim sFile As String = Main.sBaseDir &/ "razberry.log"

  ' for development/debugging only
  If Exist(sFile) And If $bDebug Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Initializing data read from file '" & sFile & "'")
    sBuffer = File.Load(sFile)
    ParseRaZberryData(sBuffer)
    sBuffer = Null
    Return
  Endif

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Initializing data by fetching '" & sURL & "'")

  hRaZberryInit = New HttpClient As "hRaZberryInit"
  hRaZberryInit.URL = sURL
  hRaZberryInit.Async = True
  hRaZberryInit.TimeOut = 3
  hRaZberryInit.Get

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save init json to log file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteJSON(sData As String)

  Dim sFile As String = Main.sBaseDir &/ "logs" &/ "razberry.log"
  Dim hFile As File

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Writing Initializing data to file '" & sFile & "'")
  hFile = Open sFile For Create
  Write #hFile, sData
  Close #hFile

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' collect razberry data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryInit_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' razberry data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryInit_Finished()

  Select hRaZberryInit.Code
    Case 200
      ' too noisy
      ' If $bDebug Then Main.WriteDebugLog(LogLabel & "Received '" & sBuffer & "'")
      ParseRaZberryData(sBuffer)
      If $bDebug Then WriteJSON(sBuffer)
    Case Else
      Main.WriteDebugLog(LogLabel & "Unknown error occured while trying to get razberry init data! HTTP=" & Last.Code & ", Buffer=" & sBuffer)
  End Select

  sBuffer = Null
  Try hRaZberryInit.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle error
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryInit_Error()

  Log.Plugin_CURL_Error(LogLabel, $sTCPHost, Last.Status)
  sBuffer = Null

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse Controller Z-Way data
' It is called for Initialization and Updates
' If controller is changed, we get all the controller information again
' If node(s) are added/updated/removed, we get all the node information again
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseRaZberryData(sData As String)

  Dim cData As JSONCollection

  cData = JSON.Decode(sData, True) 

  If cData Then
    ' If we received new/update controller information, process it
    If cData.Exist("controller") Then
      ParseControllerInfo(cData["controller"], cData["updateTime"])
    Endif

    ' If we received new/update node(s) information, process it
    If cData.Exist("devices") Then
      ParseDeviceInfo(cData["devices"], cData["updateTime"])
    Endif

    ' Check for other updates
 
    ' Finally update to our latest timestamp
    ' we don 't want to do it earlier, because if an error happens, we loose track of changes
    $iUpdateTime = cData["updateTime"]
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: Received invalid JSON data!")
  Endif

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse Controller Information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseControllerInfo(cData As JSONCollection, iUpdateTime As Integer)

  Dim cController As New JSONCollection

  Try cController.Add(cData["data"]["homeId"]["value"], "homeid")
  If Error Then cController.Add(0, "homeid")
  Try cController.Add(cData["data"]["nodeId"]["value"], "controllerid")
  If Error Then cController.Add(0, "controllerid")
  Try cController.Add(cData["data"]["SDK"]["value"], "sdkversion")
  If Error Then cController.Add("", "sdkversion")
  Try cController.Add(cData["data"]["APIVersion"]["value"], "apiversion")
  If Error Then cController.Add("", "apiversion")
  Try cController.Add(cData["data"]["softwareRevisionVersion"]["value"], "zwayversion")
  If Error Then cController.Add("", "zwayversion")
  Try cController.Add(cData["data"]["softwareRevisionDate"]["value"], "zwaydate")
  If Error Then cController.Add("", "zwaydate")
  Try cController.Add(cData["data"]["softwareRevisionId"]["value"], "zwayrevisionid")
  If Error Then cController.Add("", "zwayrevisionid")
  Try cController.Add(cData["data"]["vendor"]["value"], "vendor")
  If Error Then cController.Add("", "vendor")
  Try cController.Add(cData["data"]["ZWaveChip"]["value"], "zwavechip")
  If Error Then cController.Add("", "zwavechip")
  Try cController.Add(CBool(cData["data"]["isPrimary"]["value"]), "primary")
  If Error Then cController.Add(False, "primary")
  Try cController.Add(CBool(cData["data"]["isRealPrimary"]["value"]), "realprimary")
  If Error Then cController.Add(False, "realprimary")

  sLibraryType = cData["data"]["libType"]["value"]

  ' Add the controller information to the internal Z-Wave Network
  $cZWaveNetwork.Add(cController, "controller")

  If $bDebug Then
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Controller Info")
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Home Id: 0x" & Hex(cController["homeid"], 7))
    Main.WriteDebugLog(LogLabel & "Node Id: " & cController["controllerid"])
    Main.WriteDebugLog(LogLabel & "Primary Role: " & Util.DisplayBool(cController["primary"]))
    Main.WriteDebugLog(LogLabel & "Primary Capability: " & Util.DisplayBool(cController["realprimary"]))
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Hardware")
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Vendor: " & cController["vendor"])
    Main.WriteDebugLog(LogLabel & "Z-Wave Chip: " & cController["zwavechip"])
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Firmware")
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Library Type: " & sLibraryType)
    Main.WriteDebugLog(LogLabel & "SDK Version: " & cController["sdkversion"])
    Main.WriteDebugLog(LogLabel & "API Version: " & cController["apiversion"])
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Z-Way Version")
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Version: " & cController["zwayversion"] & " (" & cController["zwayrevisionid"] & ")")
    Main.WriteDebugLog(LogLabel & "Date: " & cController["zwaydate"])
    Main.WriteDebugLog(LogLabel & "---")
    Main.WriteDebugLog(LogLabel & "Update Timestamp: " & Util.TimeSinceEpoch(iUpdateTime) & " (" & iUpdateTime & ")")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse Device Information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseDeviceInfo(cData As JSONCollection, iUpdateTime As Integer)

  Dim cZWaveNode As JSONCollection
  Dim cNode, cInstance As New JSONCollection
  Dim iNodeId As Integer
  Dim iInstanceId As Integer

  Dim iBattery, iScaleId, iSensorType, iScaleMulti, iDeviceId As Integer
  Dim sDeviceTypeAutoCreate, sScale As String
  Dim vValues, vValue, vValue2, vValue3, vValue4, vValueTemp As Variant

  ' Remove all nodes from the Z-Wave Network, they will be re-added automatically
  ' The API doesn't tell us which devices are removed, just which nodes there are
  For Each $cZWaveNetwork
    ' Only skip the controller, we need to keep it
    If $cZWaveNetwork.Key <> "controller" Then
      $cZWaveNetwork.Remove($cZWaveNetwork.Key)
    Endif
  Next

  ' Don't continue if the controller record is missing, something went horrorible wrong
  If Not $cZWaveNetwork.Exist("controller") Then
    Main.WriteLog(LogLabel & "ERROR: Device List supplied, but no controller information available. Looks like a bug?")
    Return
  Endif

  ' devices found ...
  If cData.Count Then
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "---")
      Main.WriteDebugLog(LogLabel & "Interface Reported " & cData.Count & " device(s).")
    Endif

    ' go through each node
    For Each cNode In cData

      cZWaveNode = New JSONCollection

      ' The Z-Wave NodeId is in the key
      Try iNodeId = CInt(cData.Key)
      If Error Then
        Main.WriteDebugLog(LogLabel & "ERROR: Skipping device, unable to detect Z-Wave NodeId '" & cData.Key & "'")
        Continue
      Endif

      ' Only allow valid Z-Wave NodeIds
      If iNodeId < 1 Or If iNodeId > 232 Then
        Main.WriteDebugLog(LogLabel & "ERROR: Skipping device, invalid Z-Wave NodeId '" & iNodeId & "'")
        Continue
      Endif

      cZWaveNode.Add(iNodeId, "node_id")

      ' store it's info
      Try cZWaveNode.Add(cNode["data"]["vendorString"]["value"], "manufacturername")
      If Error Then cZWaveNode.Add("", "manufacturername")
      Try cZWaveNode.Add(cNode["data"]["manufacturerId"]["value"], "manufacturerid")
      If Error Then cZWaveNode.Add(0, "manufacturerid")
      Try cZWaveNode.Add(CBool(cNode["data"]["isRouting"]["value"]), "routing")
      If Error Then cZWaveNode.Add(False, "routing")
      Try cZWaveNode.Add(CBool(cNode["data"]["isListening"]["value"]), "listening")
      If Error Then cZWaveNode.Add(False, "listening")
      If cZWaveNode["listening"] Then
        cZWaveNode.Add(False, "frequentlistening")
      Else
        Try cZWaveNode.Add(CBool(IIf(cNode["data"]["sensor250"]["value"] Or cNode["data"]["sensor1000"]["value"], True, False)), "frequentlistening")
        If Error Then cZWaveNode.Add(False, "frequentlistening")
      Endif
      Try cZWaveNode.Add(CBool(cNode["data"]["beam"]["value"]), "beaming")
      If Error Then cZWaveNode.Add(False, "beaming")

      Try cZWaveNode.Add(CBool(IIf(cNode["instances"]["0"]["commandClasses"]["132"], True, False)), "wakeup")
      Try cZWaveNode.Add(CBool(IIf(cNode["instances"]["0"]["commandClasses"]["128"], True, False)), "battery")
      Try cZWaveNode.Add(CBool(IIf(cNode["instances"]["0"]["commandClasses"]["152"], True, False)), "security")
      Try cZWaveNode.Add(IIf(cNode["instances"].Count > 1, True, False), "multiinstance")
      If Error Then cZWaveNode.Add(False, "multiinstance")
      Try cZWaveNode.Add(cNode["data"]["neighbours"]["value"], "neighbors")
      If Error Then cZWaveNode.Add(Integer[], "neighbors")
      Try cZWaveNode.Add(cNode["data"]["basicType"]["value"], "basicid")
      If Error Then cZWaveNode.Add(0, "basicid")
      cZWaveNode.Add(GetBasicTypeName(cZWaveNode["basicid"]), "basic")
      Try cZWaveNode.Add(cNode["data"]["genericType"]["value"], "genericid")
      If Error Then cZWaveNode.Add(0, "genericid")
      cZWaveNode.Add(GetGenericTypeName(cZWaveNode["genericid"]), "generic")
      Try cZWaveNode.Add(cNode["data"]["specificType"]["value"], "specificid")
      If Error Then cZWaveNode.Add(0, "specificid")
      cZWaveNode.Add(GetSpecificTypeName(cZWaveNode["genericid"], cZWaveNode["specificid"]), "specific")
      Try cZWaveNode.Add(cNode["data"]["deviceTypeString"]["value"], "devicetype")
      If Error Then cZWaveNode.Add("", "devicetype")

      Try cZWaveNode.Add(cNode["data"]["applicationMajor"]["value"] & "." & cNode["data"]["applicationMinor"]["value"], "applicationversion")
      If Error Then cZWaveNode("", "applicationversion")
      Try cZWaveNode.Add(cNode["data"]["ZWProtocolMajor"]["value"] & "." & cNode["data"]["ZWProtocolMinor"]["value"], "protocolversion")
      If Error Then cZWaveNode("", "protocolversion")
      Try cZWaveNode.Add(CStr(cNode["data"]["ZWLib"]["value"]), "libraryversion")
      If Error Then cZWaveNode("", "libraryversion")
      Try cZWaveNode.Add(IIf(cNode["data"]["isFailed"]["value"], "Dead", "Alive"), "state")
      If Error Then cZWaveNode.Add("Alive", "state")
      ' LastSeen ...

      ' If device is the controller, just add it to the ZWaveNode and go to the next device
      If iNodeId = $cZWaveNetwork["controller"]["controllerid"] Then
        Try cZWaveNode.Add($cZWaveNetwork["controller"]["sdkversion"], "sdkversion")
        If Error Then cZWaveNode.Add("", "sdkversion")

        $cZWaveNetwork.Add(cZWaveNode, cZWaveNode["node_id"])

        If $bDebug Then Main.WriteDebugLog(LogLabel & "Detected controller as node #" & iNodeId & ", skipping...") 
        Continue
      Endif

      Try cZWaveNode.Add(cNode["data"]["SDK"]["value"], "sdkversion")
      If Error Then cZWaveNode.Add("", "sdkversion")

      ' Determine auto-create devicetype
      Select cZWaveNode["genericid"]
        Case &H01, &H02
          sDeviceTypeAutoCreate = "Z-Wave Controller"
        Case &H08
          sDeviceTypeAutoCreate = "Z-Wave Thermostat"
        Case &H10
          sDeviceTypeAutoCreate = "Z-Wave Switch"
        Case &H11
          Select cZWaveNode["specificid"]
            Case &H05, &H06, &H07
              sDeviceTypeAutoCreate = "Z-Wave Motor Control"
            Default
              sDeviceTypeAutoCreate = "Z-Wave Dimmer"
          End Select
        Case &H12
          sDeviceTypeAutoCreate = "Z-Wave Remote Switch"
        Case &H20, &H21, &H30, &H31, &HA1
          sDeviceTypeAutoCreate = "Z-Wave Sensor"
        Case &H40
          Select cZWaveNode["specificid"]
            Case &H01, &H02, &H03
              sDeviceTypeAutoCreate = "Z-Wave Door Lock"
            Default
              sDeviceTypeAutoCreate = "Z-Wave Entry Control"
          End Select
        Default
          sDeviceTypeAutoCreate = "Z-Wave Generic"
      End Select

      ' If the devicetype is empty, overrule it
      If Not cZWaveNode["devicetype"] Then
        cZWaveNode.Add(sDeviceTypeAutoCreate, "devicetype")
      Endif

      If $bDebug Then
        Main.WriteDebugLog(LogLabel & "---")
        Main.WriteDebugLog(LogLabel & "Node #" & iNodeId)
        Main.WriteDebugLog(LogLabel & "ManufacturerName: " & cZWaveNode["manufacturername"])
        Main.WriteDebugLog(LogLabel & "ManufacturerId: " & cZWaveNode["manufacturerid"])
        Main.WriteDebugLog(LogLabel & "DeviceType: " & cZWaveNode["devicetype"])
        Main.WriteDebugLog(LogLabel & "BasicType: " & cZWaveNode["basic"])
        Main.WriteDebugLog(LogLabel & "GenericType: " & cZWaveNode["generic"])
        Main.WriteDebugLog(LogLabel & "SpecificType: " & cZWaveNode["specific"])
        Main.WriteDebugLog(LogLabel & "Listening: " & Util.DisplayBool(cZWaveNode["listening"]))
        Main.WriteDebugLog(LogLabel & "Frequent Listening (FLiRS): " & Util.DisplayBool(cZWaveNode["frequentlistening"]))
        Main.WriteDebugLog(LogLabel & "WakeUp: " & Util.DisplayBool(cZWaveNode["wakeup"]))
        Main.WriteDebugLog(LogLabel & "Battery: " & Util.DisplayBool(cZWaveNode["battery"]))
        Main.WriteDebugLog(LogLabel & "Multiple Instances: " & Util.DisplayBool(cZWaveNode["multiinstance"]))
      Endif

      ' go through each instance
      For Each cInstance In cNode["instances"]

        ' devices.2.instances.0.data
        Try iInstanceId = CInt(cNode["instances"].Key)
        If Error Then
          Main.WriteDebugLog(LogLabel & "ERROR: Skipping device, invalid instance '" & cNode["instances"].Key & "' for node " & cZWaveNode["node_id"])
          Continue
        Endif

        ' skip instance 0 if it has more, since it should be mapped to other instances
        If iInstanceId = 0 And If cZWaveNode["multiinstance"] Then Continue
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Instance #" & iInstanceId)

        ' battery level if available
        If cZWaveNode["battery"] Then Try iBattery = cInstance["commandClasses"]["128"]["data"]["last"]["value"]

        ' dimmer
        ' use SwitchMultilevel first, if not available use SwitchBinary
        If cInstance["commandClasses"]["38"] Then

          Try cCommandClassId.Add(38, iNodeId & ":" & iInstanceId)
          vValue = cInstance["commandClasses"]["38"]["data"]["level"]["value"]
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Dimmer Device: " & vValue)
          Select vValue
            Case "99"
              vValue = "On"
            Case "0"
              vValue = "Off"
            Case Else
              vValue = "Dim " & vValue
          End Select

          ' update device
        ' switch
        Else If cInstance["commandClasses"]["37"] Then

          Try cCommandClassId.Add(37, iNodeId & ":" & iInstanceId)
          vValue = cInstance["commandClasses"]["37"]["data"]["level"]["value"]
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Switch Device: " & Util.DisplayBool(vValue))
          vValue = IIf(vValue = 255, "On", "Off")
          ' update device
        Endif

        ' sensor multilevel, binary switch eg pir
        If cInstance["commandClasses"]["48"] Then
          If $cZWaveNetwork["controller"]["zwayversion"] = "v1.3.1" Then
            vValue = cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["level"]["value"]
          Else ' 1.4 or higher
            For Each vValues In cInstance["commandClasses"]["48"]["data"]
              If IsNumber(cInstance["commandClasses"]["48"]["data"].Key) Then
                Select Case cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["sensorTypeString"]["value"]
                  Case "General purpose"
                    vValue = cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["level"]["value"]
                    If $bDebug Then Main.WriteDebugLog(LogLabel & "General purpose: " & vValue)
                  Case Else
                    If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown commandclass 48 type: " & cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["sensorTypeString"]["value"])
                    Continue
                End Select
                ' update device

                If $bDebug Then Main.WriteDebugLog(LogLabel & "Multilevel binary switch device: " & Util.DisplayBool(vValue))
                Select Case cZWaveNode["manufacturername"] & " " & cZWaveNode["devicetype"]
                  Case "Aeon Labs Routing Binary Sensor"
                    vValue = IIf(vValue = True, "Open", "Close")
                End Select
              Endif
            Next
          Endif
        Endif

        ' sensor humid, light, temp or power
        If cInstance["commandClasses"]["49"] Then

          For Each vValues In cInstance["commandClasses"]["49"]["data"]
            If IsNumber(cInstance["commandClasses"]["49"]["data"].Key) Then
              vValue4 = cInstance["commandClasses"]["49"]["data"][cInstance["commandClasses"]["49"]["data"].Key]["val"]["value"]
              Select Case cInstance["commandClasses"]["49"]["data"][cInstance["commandClasses"]["49"]["data"].Key]["sensorTypeString"]["value"]
                Case "Power"
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Power Sensor: " & vValue4)
                Case "Temperature"
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Temp Sensor: " & vValue4)
                Case "Humidity"
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Humid Sensor: " & vValue4)
                Case "Luminiscence"
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Luminiscence Sensor: " & vValue4)
              End Select
              ' update device
            Endif
          Next
        Endif

        ' security
        If cInstance["commandClasses"]["99"] Then
          For Each vValues In cInstance["commandClasses"]["99"]["data"]
            If IsNumber(cInstance["commandClasses"]["99"]["data"].Key) Then
              vValueTemp = cInstance["commandClasses"]["99"]["data"].Key
              If $bDebug Then Main.WriteDebugLog(LogLabel & "User Id: " & vValueTemp)
              vValueTemp = cInstance["commandClasses"]["99"]["data"][cInstance["commandClasses"]["99"]["data"].Key]["status"]["value"]
              If $bDebug Then Main.WriteDebugLog(LogLabel & "User Code: " & vValueTemp)
              ' update device
            Endif
          Next
        Endif

        ' meter sensors
        If cInstance["commandClasses"]["50"] Then
          For Each vValues In cInstance["commandClasses"]["50"]["data"]
            If IsNumber(cInstance["commandClasses"]["50"]["data"].Key) Then
              iScaleId = cInstance["commandClasses"]["50"]["data"].Key
              iSensorType = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["sensorType"]["value"]
              sScale = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["scaleString"]["value"]
              If iScaleId = 0 Or If iScaleId = 2 Or If iScaleId = 6 Then
                If iSensorType = 1 Then
                  iScaleMulti = 1
                  If sScale = "kWh" Then
                    iScaleMulti = 1000
                  Endif
                Endif
                vValueTemp = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["val"]["value"]
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter Sensor: " & vValueTemp & sScale)
                ' update values
                If iScaleId = 0 Then
                  vValue3 = vValueTemp
                Else If iScaleId = 2 Then
                  vValue2 = vValueTemp
                Endif
              Endif
            Endif
          ' update device
          Next
        Endif

        ' true meters
        If cInstance["commandClasses"]["50"] Then
          For Each vValues In cInstance["commandClasses"]["50"]["data"]
            If IsNumber(cInstance["commandClasses"]["50"]["data"].Key) Then
              iScaleId = cInstance["commandClasses"]["50"]["data"].Key
              iSensorType = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["sensorType"]["value"]
              sScale = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["scaleString"]["value"]
              If iScaleId = 0 Or If iScaleId = 2 Or If iScaleId = 6 Then
                If iSensorType = 1 Then Continue
              Endif
              iScaleMulti = 1
              If sScale = "kWh" Then
                iScaleMulti = 1000
              Endif
              vValueTemp = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["val"]["value"]
              If iScaleId = 0 Then
                ' KwH value3
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter Value2: " & vValueTemp & sScale)
                vValue3 = vValueTemp
              Else If iScaleId = 2 Then
                ' W value2
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Meter Value3: " & vValueTemp & sScale)
                vValue2 = vValueTemp
              Endif
              ' update
            Endif
          ' update device
          Next
        Endif

        ' thermostat
        If cInstance["commandClasses"]["67"]
          Try cCommandClassId.Add(67, iNodeId & ":" & iInstanceId)
          vValue2 = cInstance["commandClasses"]["67"]["data"]["1"]["setVal"]["value"]
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Thermostat SetValue: " & vValue2)
        Endif

        If cZWaveNode["battery"] And If $bDebug Then Main.WriteDebugLog(LogLabel & "Battery Value: " & iBattery & "%")

        ' update device value(s)
        iDeviceId = Devices.Find(Instance, iNodeId & IIf((iInstanceId > 1), ":" & iInstanceId, ""), InterfaceId, sDeviceTypeAutoCreate, cZWaveNode["manufacturername"] & " " & cZWaveNode["devicetype"])
        If iDeviceId Then
          If vValue Then Devices.ValueUpdate(iDeviceId, 1, vValue)
          If vValue2 Then Devices.ValueUpdate(iDeviceId, 2, vValue2)
          If vValue3 Then Devices.ValueUpdate(iDeviceId, 3, vValue3)
          If vValue4 Then Devices.ValueUpdate(iDeviceId, 4, vValue4)
          If cZWaveNode["battery"] Then Devices.Battery(iDeviceId, iBattery)
        Endif

        If $bDebug Then
          If vValue Then Main.WriteDebugLog(LogLabel & "Value1: " & vValue)
          If vValue2 Then Main.WriteDebugLog(LogLabel & "Value2: " & vValue2)
          If vValue3 Then Main.WriteDebugLog(LogLabel & "Value3: " & vValue3)
          If vValue4 Then Main.WriteDebugLog(LogLabel & "Value4: " & vValue4)
        Endif

        ' reset vars for next device
        vValue = ""
        vValue2 = ""
        vValue3 = ""
        vValue4 = ""
        sScale = ""
      Next

      $cZWaveNetwork.Add(cZWaveNode, cZWaveNode["node_id"])
    Next

  Endif

  bInit = True

  ' start update timer
  If $iPollTime Then tRaZberry.Start

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send Command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iLevel, iCommandClassId As Integer
  Dim fSetPoint As Float
  Dim aAddress As String[]
  sCmd = UCase(sCmd)

  ' if instance is 0, add it to address
  If Not InStr(sAddress, ":") Then sAddress &= ":0"
  aAddress = Scan(sAddress, "*:*")

  Try iCommandClassId = cCommandClassId[sAddress]
  If Error Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "CommandClassId not found for device with address '" & sAddress & "', so I can't control it!")
    Return
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "CommandClassId for device with address '" & sAddress & "' is '" & iCommandClassId & "'.")

    If sCmd = "ON" Then
      iLevel = 255
    Else If sCmd = "OFF" Then
      iLevel = 0
    Else If InStr(sCmd, "DIM ") Then
      iLevel = Val(Replace(sCmd, "DIM ", ""))
      If iLevel = 100 Then iLevel = 99
    Else If InStr(sCmd, "SP ") Then
      fSetPoint = Val(Replace(sCmd, "SP ", ""))
    Else
      Main.WriteDebugLog(LogLabel & "Unknown command '" & sCmd & "' given!")
      Return
    Endif

    Select iCommandClassId
      Case 67
        QueueCommand(GetURL("/ZWaveAPI/Run/devices[" & aAddress[0] & "].instances[" & aAddress[1] & "].commandClasses[" & iCommandClassId & "].Set(1," & fSetPoint & ")"))
      Case Else
        QueueCommand(GetURL("/ZWaveAPI/Run/devices[" & aAddress[0] & "].instances[" & aAddress[1] & "].commandClasses[" & iCommandClassId & "].Set(" & iLevel & ")"))
    End Select
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetUpdates()

  Dim sUrl As String = GetURL("/ZWaveAPI/Data/" & $iUpdateTime)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Get update by fetching '" & sUrl & "'")
  QueueCommand(sUrl)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub QueueCommand(sPacket As String)

  ' add command to queue
  cQueue.Add(sPacket, Rnd)

  ' if not busy process it
  If bHttpBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DoQueue()

  Dim sPacket As String

  For Each sPacket In cQueue
    WriteCommand(sPacket, cQueue.Key)
    Break ' only do first one
  Next

End

Private Sub WriteCommand(sWBuffer As String, sKey As String)

  hRaZberryCmd = New HttpClient As "hRaZberryCmd"
  hRaZberryCmd.URL = sWBuffer
  hRaZberryCmd.Async = True
  hRaZberryCmd.TimeOut = 3
  hRaZberryCmd.Tag = sKey
  hRaZberryCmd.Get
  bHttpBusy = True
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Send HTTPGet request '" & sWBuffer & "'")

  IsRunning = True
  ErrorText = ""

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' collect razberry data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryCmd_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' razberry data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryCmd_Finished()

  Select hRaZberryCmd.Code
    Case 200
      ' too noisy
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received data '" & sBuffer & "'")
      ParseUpdateData(sBuffer)
    Case Else
      Main.WriteDebugLog(LogLabel & "Unknown error occured while trying to get RaZberry update data! HTTP=" & Last.Code & ", Buffer=" & sBuffer)
  End Select

  sBuffer = Null
  Try hRaZberryCmd.Close
  HttpBusy(hRaZberryCmd.Tag)

End

Public Sub hRaZberryCmd_Error()

  Dim sMsg As String

  If Not $bDebug Then Return

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  Log.Plugin_TCP_Error(LogLabel, $sTCPHost, Last.Status)
  HttpBusy(hRaZberryCmd.Tag)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' http busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HttpBusy(sKey As String)

  bHttpBusy = False
  ' remove sent command from queue
  cQueue.Remove(sKey)

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process Device Status update(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseUpdateData(sData As String)

  Dim cUpdate As JSONCollection

  If sData = "null" Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Got a device control response.")
    Return
  Else
    cUpdate = JSON.Decode(sData, True)
  Endif

  If cUpdate Then
    $iUpdateTime = cUpdate["updateTime"]
    If $bDebug Then
      Main.WriteDebugLog(LogLabel & "Update Timestamp: " & Util.TimeSinceEpoch($iUpdateTime) & " (" & $iUpdateTime & ")")
    Endif
    If cUpdate.Count > 1 Then
      ParseUpdateDevices(cUpdate)
    Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "No updates reported.")
    Endif
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Error received invalid JSON update data!")
  Endif

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseUpdateDevices(cUpdates As JSONCollection)

  Dim cUpdate As New JSONCollection
  Dim aUpdate As String[]
  Dim vValue, vValue2, vValue3, vValue4, vValueTemp As Variant
  Dim sScale, sSensorType As String
  Dim iNode, iInstance, iBattery, iScale, iDeviceId As Integer

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Found " & cUpdates.Count & " updates.")
  ' go through each update
  For Each cUpdate In cUpdates

    ' skip controller node
    aUpdate = Split(cUpdates.Key, ".")
    If aUpdate.Count > 1 Then
      If aUpdate[1] = $cZWaveNetwork["controller"]["controllerid"] Then 
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Skipping controller node updates")
        Continue
      Endif

      ' search for interesting data
      ' battery value
      If InStr(cUpdates.Key, "commandClasses.128.data.last") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iBattery = cUpdate["value"]
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Battery Value Update: " & iBattery)
          Endif
          ' update battery status
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.Battery(iDeviceId, iBattery)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' SP814 Motion sensor Everspring or old TKBHOME
      ' "devices.8.instances.0.commandClasses.48.data.1"
      Else If InStr(cUpdates.Key, "commandClasses.48.data.1") Then
        If aUpdate.Count = 8 Then
          vValue = IIf((cUpdate["level"]["value"] = True), "On", "Off")
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' Everspring Flood Sensor ST812
      ' "devices.7.instances.0.commandClasses.156.data.5.sensorState"
      Else If InStr(cUpdates.Key, "commandClasses.156.data.5.sensorState") Then
        If aUpdate.Count = 9 Then
          vValue = IIf((cUpdate["value"] = 255), "On", "Off")
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' sensor multilevel, but binary switch eg pir, d/w sensor
      ' "devices.8.instances.0.commandClasses.48.data.level"
      Else If InStr(cUpdates.Key, "commandClasses.48.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]

          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Sensor Multilevel Binary Value1 Update: " & vValue)
          Endif
          vValue = IIf((cUpdate["value"] = True), "Open", "Closed")
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' binary switch device
      Else If InStr(cUpdates.Key, "commandClasses.37.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          vValue = IIf((cUpdate["value"] = 255) Or (cUpdate["value"] = True), "On", "Off")
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Switch Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' dimmer device
      Else If InStr(cUpdates.Key, "commandClasses.38.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          vValue = "Dim " & cUpdate["value"]
          If vValue = "Dim 99" Then vValue = "On"
          If vValue = "Dim 0" Then vValue = "Off"
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Dimmer Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' multilevel sensor
      Else If InStr(cUpdates.Key, "commandClasses.49.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          vValue = cUpdate["val"]["value"]
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Multilevel Sensor Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' thermostat
      Else If InStr(cUpdates.Key, "commandClasses.67.data.")
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
           iNode = aUpdate[1]
           iInstance = aUpdate[3]
           If cUpdate["setVal"]["value"] Then vValue2 = cUpdate["setVal"]["value"]
           If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Thermostat Value2 (setVal) Update: " & vValue2)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            'Devices.ValueUpdate(iDeviceId, 1, vValue)
            Devices.ValueUpdate(iDeviceId, 2, vValue2)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' "devices.3.instances.0.commandClasses.49.data.4"
       Else If InStr(cUpdates.Key, "commandClasses.49.data.") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iScale = aUpdate[7]
          sScale = cUpdate["scaleString"]["value"]
          sSensorType = Trim(cUpdate["sensorTypeString"]["value"])
          vValueTemp = cUpdate["val"]["value"]
          If iScale = 4 Then
            ' W value4
            vValue4 = vValueTemp
          Endif
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Scale: " & iScale)
            Main.WriteDebugLog(LogLabel & "Type: " & sSensorType)
            If iScale = 4 Then Main.WriteDebugLog(LogLabel & "Power Sensor value4 Update: " & vValue4 & sScale)
          Endif
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
            Devices.ValueUpdate(iDeviceId, 2, vValue2)
            Devices.ValueUpdate(iDeviceId, 3, vValue3)
            Devices.ValueUpdate(iDeviceId, 4, vValue4)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' meter device
      ' "devices.5.instances.1.commandClasses.50.data.2"
      Else If InStr(cUpdates.Key, "commandClasses.50.data.") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iScale = aUpdate[7]
          sScale = cUpdate["scaleString"]["value"]
          sSensorType = Trim(cUpdate["sensorTypeString"]["value"])
          vValueTemp = cUpdate["val"]["value"]
          If iScale = 0 Then
            ' KwH value3
            vValue3 = vValueTemp
          Else If iScale = 2 Then
            ' W value2
            vValue2 = vValueTemp
          Endif
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Scale: " & iScale)
            Main.WriteDebugLog(LogLabel & "Type: " & sSensorType)
            If iScale = 2 Then Main.WriteDebugLog(LogLabel & "Sensor Multilevel Binary Value2 Update: " & vValue2 & sScale)
            If iScale = 0 Then Main.WriteDebugLog(LogLabel & "Sensor Multilevel Binary Value3 Update: " & vValue3 & sScale)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & IIf((iInstance > 1), ":" & iInstance, ""), InterfaceId)
          If iDeviceId Then
            Devices.ValueUpdate(iDeviceId, 1, vValue)
            Devices.ValueUpdate(iDeviceId, 2, vValue2)
            Devices.ValueUpdate(iDeviceId, 3, vValue3)
          Endif
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      Endif
      ' TODO: add commandClass 98

      ' clear stuff
      vValue = ""
      vValue2 = ""
      vValue3 = ""
      vValue4 = ""
      vValueTemp = ""
    Endif
  Next

Catch ' some errors
  If Error.code <> 6 Then ' suppress reading updatetime as collection
    Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' " & Error.Code)
  Else
    Error.Clear
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to stop timer
  Try tRaZberry.Stop
  ' try to close all connections
  Try hRaZberryInit.Close
  Try hRaZberryCmd.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Display Z-Wave BasicType name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetBasicTypeName(iBasic As Integer) As String

  Select iBasic
    Case BASIC_TYPE_CONTROLLER
      Return "Controller"
    Case BASIC_TYPE_STATIC_CONTROLLER
      Return "Static Controller"
    Case BASIC_TYPE_SLAVE
      Return "Slave"
    Case BASIC_TYPE_ROUTING_SLAVE
      Return "Routing Slave"
    Default
      Return "Unknown (" & iBasic & ")"
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Display Z-Wave GenericType name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetGenericTypeName(iGeneric As Integer) As String

  Return GetSpecificTypeName(iGeneric, 0)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Display Z-Wave SpecificType name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetSpecificTypeName(iGenericType As Integer, iSpecificType As Integer) As String

  Select iGenericType 
    Case GENERIC_TYPE_GENERIC_CONTROLLER
      Select iSpecificType
        Case &H01
          Return "Portable Remote Controller"
        Case &H02
          Return "Portable Scene Controller"
        Case &H03
          Return "Portable Installer Tool"
      End Select
      Return "Generic Controller"
    Case GENERIC_TYPE_STATIC_CONTROLLER
      Select iSpecificType
        Case &H01
          Return "Static PC Controller"
        Case &H02
          Return "Static Scene Controller"
        Case &H03
          Return "Static Installer Tool"
      End Select
      Return "Static Controller"
    Case GENERIC_TYPE_AV_CONTROL_POINT
      Select iSpecificType
        Case &H04
          Return "Satellite Receiver"
        Case &H11
          Return "Satellite Receiver V2"
        Case &H12
          Return "Doorbell"
      End Select
      Return "AV Control Point"
    Case GENERIC_TYPE_DISPLAY
      Select iSpecificType
        Case &H01
          Return "Simple Display"
      End Select
      Return "Display"
    Case GENERIC_TYPE_THERMOSTAT
      Select iSpecificType
        Case &H01
          Return "Heating Thermostat"
        Case &H02
          Return "General Thermostat"
        Case &H03
          Return "Setback Schedule Thermostat"
        Case &H04
          Return "Setpoint Thermostat"
        Case &H05
          Return "Setback Thermostat"
        Case &H06
          Return "General Thermostat V2"
      End Select
      Return "Thermostat"
    Case GENERIC_TYPE_WINDOW_COVERING
      Select iSpecificType
        Case &H01
          Return "Simple Window Covering"
      End Select
      Return "Window Covering"
    Case GENERIC_TYPE_REPEATER_SLAVE
      Select iSpecificType
        Case &H01
          Return "Basic Repeater Slave"
      End Select
      Return "Repeating Slave"
    Case GENERIC_TYPE_SWITCH_BINARY
      Select iSpecificType
        Case &H01
          Return "Binary Power Switch"
        Case &H03
          Return "Binary Scene Switch"
      End Select
      Return "Binary Switch"
    Case GENERIC_TYPE_SWITCH_MULTILEVEL
      Select iSpecificType
        Case &H01
          Return "Multilevel Power Switch"
        Case &H03
          Return "Multiposition Motor"
        Case &H04
          Return "Multilevel Scene Switch"
        Case &H05
          Return "Motor Control Class A"
        Case &H06
          Return "Motor Control Class B"
        Case &H07
          Return "Motor Control Class C"
      End Select
      Return "Multilevel Switch"
    Case GENERIC_TYPE_SWITCH_REMOTE
      Select iSpecificType
        Case &H01
          Return "Binary Remote Switch"
        Case &H02
          Return "Multilevel Remote Switch"
        Case &H03
          Return "Binary Toggle Remote Switch"
        Case &H04
          Return "Multilevel Toggle Remote Switch"
      End Select
      Return "Remote Switch"
    Case GENERIC_TYPE_SWITCH_TOGGLE
      Select iSpecificType
        Case &H01
          Return "Binary Toggle Switch"
        Case &H02
          Return "Multilevel Toggle Switch"
      End Select
      Return "Toggle Switch"
    Case GENERIC_TYPE_ZIP_GATEWAY
      Select iSpecificType
        Case &H01
          Return "Z/IP Tunneling Gateway"
        Case &H02
          Return "Z/IP Advanced Gateway"
      End Select
      Return "Zip Gateway"
    Case GENERIC_TYPE_ZIP_NODE
      Select iSpecificType
        Case &H01
          Return "Z/IP Tunneling Node"
        Case &H02
          Return "Z/IP Advanced Node"
      End Select
      Return "Zip Node"
    Case GENERIC_TYPE_VENTILATION
      Select iSpecificType
        Case &H01
          Return "Residential Heat Recovery Ventilation"
      End Select
      Return "Ventilation"
    Case GENERIC_TYPE_SENSOR_BINARY
      Select iSpecificType
        Case &H01
          Return "Routing Binary Sensor"
      End Select
      Return "Binary Sensor"
    Case GENERIC_TYPE_SENSOR_MULTILEVEL
      Select iSpecificType
        Case &H01
          Return "Routing Multilevel Sensor"
      End Select
      Return "Multilevel Sensor"
    Case GENERIC_TYPE_METER_PULSE
      Return "Pulse Meter"
    Case GENERIC_TYPE_METER
      Select iSpecificType
        Case &H01
          Return "Simple Meter"
      End Select
      Return "Meter"
    Case GENERIC_TYPE_ENTRY_CONTROL
      Select iSpecificType
        Case &H01
          Return "Door Lock"
        Case &H02
          Return "Advanced Door Lock"
        Case &H03
          Return "Secure Keypad Door Lock"
      End Select
      Return "Entry Control"
    Case GENERIC_TYPE_SEMI_INTEROPERABLE
      Select iSpecificType
        Case &H01
          Return "Energy Production"
      End Select
      Return "Semi Interoperable"
    Case GENERIC_TYPE_SENSOR_ALARM
      Select iSpecificType
        Case &H01
          Return "Basic Routing Alarm Sensor"
        Case &H02
          Return "Routing Alarm Sensor"
        Case &H03
          Return "Basic Zensor Alarm Sensor"
        Case &H04
          Return "Zensor Alarm Sensor"
        Case &H05
          Return "Advanced Zensor Alarm Sensor"
        Case &H06
          Return "Basic Routing Smoke Sensor"
        Case &H07
          Return "Routing Smoke Sensor"
        Case &H08
          Return "Basic Zensor Smoke Sensor"
        Case &H09
          Return "Zensor Smoke Sensor"
        Case &H0A
          Return "Advanced Zensor Smoke Sensor"
      End Select
      Return "Alarm Sensor"
    Case GENERIC_TYPE_NON_INTEROPERABLE
      Return "Non Interoperable"
    Default
      Return "Unknown (" & iGenericType & ")"
  End Select

End
