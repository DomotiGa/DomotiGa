' Gambas class file

' Description:
' CRaZberry.class
' Provide support for RaZberry Z-Wave interface.

' Development Status:
' Just started developing this one.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "RaZberry"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "RaZberry Z-Wave"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[RaZberry] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sUsername As String
Private $sPassword As String
Private $iPollTime As Integer
Private $bRaZberryDebug As Boolean

Public hRaZberryInit As HttpClient
Public hRaZberryCmd As HttpClient
Public bInit As Boolean
Public iUpdateTime As Integer
Public sBuffer As String
Public tRaZberry As Timer

Public bIsPrimary As Boolean
Public bIsRealPrimary As Boolean
Public iControllerID As Integer
Public sHomeID As String

Public sVendor As String
Public sChip As String

Public sLibraryType As String = ("Unknown")
Public sSDKVersion As String
Public sAPIVersion As String

Public sSoftwareVersion As String
Public sSoftwareDate As String

' node data
Private cCommandClassId As New Collection

' queue and command buffer stuff
Private cQueue As New Collection   ' command buffer
Private bHttpBusy As Boolean       ' already fetching?

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sUsername = cPl.Settings["username"]
  $sPassword = cPl.Settings["password"]
  $iPollTime = cPl.Settings["polltime"]
  $bRaZberryDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection 
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' init
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function Run()

  bInit = True
  Initialize()

  ' define poll timer
  tRaZberry = New Timer As "tRaZberry"
  tRaZberry.Delay = $iPollTime * 1000 ' multiply for seconds
  tRaZberry.Stop

  Main.WriteLog(LogLabel & PluginFriendlyName & " initializing.")

  ' all ok
  IsRunning = True

Catch
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " FAILED to initialize")
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  IsRunning = False

End

Public Sub tRaZberry_Timer()

  GetUpdates()

End

Private Sub GetURL(sCmd As String) As String

  If $sUsername And If $sPassword Then
    Return "https://" & $sUsername & ":" & $sPassword & "@" & $sTCPHost & ":" & $iTCPPort & sCmd
  Else
    Return "http://" & $sTCPHost & ":" & $iTCPPort & sCmd
  Endif

End

Private Sub Initialize() As Boolean

  Dim sURL As String = GetURL("/ZWaveAPI/Data/" & iUpdateTime)
  Dim sFile As String = Main.sBaseDir &/ "razberry.log"

  ' for development/debugging only
  If Exist(sFile) And If $bRaZberryDebug Then
    sBuffer = ReadJSON(sFile)
    ParseInitData(sBuffer)
    sBuffer = Null
    Return
  Endif

  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Initializing data by fetching '" & sURL & "'")

  hRaZberryInit = New HttpClient As "hRaZberryInit"
  hRaZberryInit.URL = sURL
  hRaZberryInit.Async = True
  hRaZberryInit.TimeOut = 3
  hRaZberryInit.Get

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read init json from log file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ReadJSON(sFile As String) As String

  Dim hFile As File
  Dim sContents As String

  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Initializing data read from file '" & sFile & "'")
  hFile = Open sFile For Read
  While Not Eof(hFile)
    sContents &= Read #hFile, Lof(hFile)
  Wend
  Close #hFile

  Return sContents

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save init json to log file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteJSON(sData As String)

  Dim sFile As String = Main.sBaseDir &/ "logs" &/ "razberry.log"
  Dim hFile As File

  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Writing Initializing data to file '" & sFile & "'")
  hFile = Open sFile For Create
  While Not Eof(hFile)
    Write #hFile, CStr(sData)
  Wend
  Close #hFile

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' collect razberry data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryInit_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' razberry data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryInit_Finished()

  Select hRaZberryInit.Code
    Case 200
      ' too noisy
      ' If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Received '" & sBuffer & "'")
      ParseInitData(sBuffer)
      If $bRaZberryDebug Then WriteJSON(sBuffer)
    Case Else
      Main.WriteDebugLog(LogLabel & "Unknown error occured while trying to get razberry init data! HTTP=" & Last.Code & ", Buffer=" & sBuffer)
  End Select

  sBuffer = Null
  Try hRaZberryInit.Close

End

Public Sub hRaZberryInit_Error()

  Log.Plugin_CURL_Error(LogLabel, $sTCPHost, Last.Status)
  sBuffer = Null

End

Private Sub ParseInitData(sData As String)

  Dim cInit As Collection = JSON.Decode(sData)

  If cInit Then
    iControllerID = cInit["controller"]["data"]["nodeId"]["value"]
    sHomeID = cInit["controller"]["data"]["homeId"]["value"]
    sSDKVersion = cInit["controller"]["data"]["SDK"]["value"]
    sSoftwareVersion = cInit["controller"]["data"]["softwareRevisionVersion"]["value"]
    sSoftwareDate = cInit["controller"]["data"]["softwareRevisionDate"]["value"]
    sLibraryType = cInit["controller"]["data"]["libType"]["value"]
    sVendor = cInit["controller"]["data"]["vendor"]["value"]
    sChip = cInit["controller"]["data"]["ZWaveChip"]["value"]
    sAPIVersion = cInit["controller"]["data"]["APIVersion"]["value"]
    bIsPrimary = cInit["controller"]["data"]["isPrimary"]["value"]
    bIsRealPrimary = cInit["controller"]["data"]["isRealPrimary"]["value"]
    iUpdateTime = cInit["updateTime"]
    If $bRaZberryDebug Then
      Main.WriteDebugLog(LogLabel & "-------")
      Main.WriteDebugLog(LogLabel & "Controller Info:")
      Main.WriteDebugLog(LogLabel & "Node Id: " & iControllerID)
      Main.WriteDebugLog(LogLabel & "Home Id: " & Hex(sHomeID, 7))
      Main.WriteDebugLog(LogLabel & "Primary Role: " & Main.DisplayBool(bIsPrimary))
      Main.WriteDebugLog(LogLabel & "Primary Capability: " & Main.DisplayBool(bIsRealPrimary))
      Main.WriteDebugLog(LogLabel & "-------")
      Main.WriteDebugLog(LogLabel & "Hardware:")
      Main.WriteDebugLog(LogLabel & "Vendor: " & sVendor)
      Main.WriteDebugLog(LogLabel & "Z-Wave Chip: " & sChip)
      Main.WriteDebugLog(LogLabel & "-------")
      Main.WriteDebugLog(LogLabel & "Firmware:")
      Main.WriteDebugLog(LogLabel & "Library Type: " & sLibraryType)
      Main.WriteDebugLog(LogLabel & "SDK Version: " & sSDKVersion)
      Main.WriteDebugLog(LogLabel & "API Version: " & sAPIVersion)
      Main.WriteDebugLog(LogLabel & "Z-Way Version:")
      Main.WriteDebugLog(LogLabel & "Version: " & sSoftwareVersion)
      Main.WriteDebugLog(LogLabel & "Date: " & sSoftwareDate)
      Main.WriteDebugLog(LogLabel & "Update Timestamp: " & TimeSinceEpoch(iUpdateTime) & " (" & iUpdateTime & ")")
    Endif
    If cInit["devices"] Then ParseInitDevices(cInit["devices"])
  Else
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Error received invalid JSON init data!")
  Endif

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

Private Sub ParseInitDevices(cDevices As Collection)

  Dim cNode, cInstance As New Collection
  Dim iNode, iBasicType, iGenericType, iSpecificType, iInstance, iBattery, iScaleId, iSensorType, iScaleMulti, iDeviceId As Integer
  Dim sVendor, sDeviceType, sScale As String
  Dim bIsListening, bIsSensor250, bIsSensor1000, bHasWakeup, bHasBattery, bIsFLiRS, bHasMultiInstances As Boolean
  Dim vValues, vValue, vValue2, vValue3, vValue4, vValueTemp As Variant

  ' devices found?
  If cDevices.Count Then
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Interface reported " & cDevices.Count & " nodes.")
    ' go through each node
    For Each cNode In cDevices
      ' devices.2.data
      Try iNode = Scan(cNode["data"]["name"], "*.*.*")[1]
      If iNode = iControllerID Then
        If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Detected controller as node #" & iNode & ", skipping...") 
        Continue
      Endif
      ' store it's info
      sVendor = cNode["data"]["vendorString"]["value"]
      sDeviceType = cNode["data"]["deviceTypeString"]["value"]
      iBasicType = cNode["data"]["basicType"]["value"]
      iGenericType = cNode["data"]["genericType"]["value"]
      iSpecificType = cNode["data"]["specificType"]["value"]
      bIsListening = cNode["data"]["isListening"]["value"]
      bIsSensor250 = cNode["data"]["sensor250"]["value"]
      bIsSensor1000 = cNode["data"]["sensor1000"]["value"]
      If bIsListening Then
        If bIsSensor250 Or If bIsSensor1000 Then
          bIsFLiRS = True
        Else
          bIsFLiRS = False
        Endif
      Endif
      bHasWakeup = cNode["instances"]["0"]["commandClasses"]["132"]
      bHasBattery = cNode["instances"]["0"]["commandClasses"]["128"]

      ' fix for empty BeNext Tag Reader deviceTypeString
      If Not sDeviceType And If iGenericType = 64 Then sDeviceType = "Door Lock"

      If cNode["instances"].Count > 1 Then
        bHasMultiInstances = True
      Else
        bHasMultiInstances = False
      Endif
      If $bRaZberryDebug Then
        Main.WriteDebugLog(LogLabel & "-------")
        Main.WriteDebugLog(LogLabel & "Node #" & iNode)
        Main.WriteDebugLog(LogLabel & "Vendor: " & sVendor)
        Main.WriteDebugLog(LogLabel & "DeviceType: " & sDeviceType)
        Main.WriteDebugLog(LogLabel & "BasicType: " & iBasicType)
        Main.WriteDebugLog(LogLabel & "GenericType: " & iGenericType)
        Main.WriteDebugLog(LogLabel & "SpecificType: " & iSpecificType)
        Main.WriteDebugLog(LogLabel & "Is Listening: " & DisplayBool(bIsListening))
        Main.WriteDebugLog(LogLabel & "Does WakeUp: " & DisplayBool(bHasWakeup))
        Main.WriteDebugLog(LogLabel & "Has Battery: " & DisplayBool(bHasBattery))
        Main.WriteDebugLog(LogLabel & "Is FLiRS device: " & DisplayBool(bIsFLiRS))
        Main.WriteDebugLog(LogLabel & "Has Multiple Instances: " & DisplayBool(bHasMultiInstances))
      Endif
      ' go through each instance
      For Each cInstance In cNode["instances"]

        ' devices.2.instances.0.data
        Try iInstance = Scan(cInstance["data"]["name"], "*.*.*.*.*")[3]

        ' skip instance 0 if it has more, since it should be mapped to other instances
        If iInstance = 0 And If bHasMultiInstances Then Continue
        If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Instance #" & iInstance)

        ' battery level if available
        If bHasBattery Then Try iBattery = cInstance["commandClasses"]["128"]["data"]["last"]["value"]

        ' dimmer
        ' use SwitchMultilevel first, if not available use SwitchBinary
        If cInstance["commandClasses"]["38"] Then

          Try cCommandClassId.Add(38, iNode & ":" & iInstance)
          vValue = cInstance["commandClasses"]["38"]["data"]["level"]["value"]
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Dimmer Device: " & vValue)
          Select vValue
            Case "99"
              vValue = "On"
            Case "0"
              vValue = "Off"
            Case Else
              vValue = "Dim " & vValue
          End Select

          ' update device
        ' switch
        Else If cInstance["commandClasses"]["37"] Then

          Try cCommandClassId.Add(37, iNode & ":" & iInstance)
          vValue = cInstance["commandClasses"]["37"]["data"]["level"]["value"]
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Switch Device: " & vValue)
          vValue = IIf(vValue = 255, "On", "Off")
          ' update device
        Endif

        ' sensor multilevel, binary switch eg pir
        If cInstance["commandClasses"]["48"] Then
          If sSoftwareVersion = "v1.3.1" Then
            vValue = cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["level"]["value"]
          Else ' 1.4 or higher
            For Each vValues In cInstance["commandClasses"]["48"]["data"]
              If IsNumber(cInstance["commandClasses"]["48"]["data"].Key) Then
                Select Case cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["sensorTypeString"]["value"]
                  Case "General purpose"
                    vValue = cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["level"]["value"]
                    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "General purpose: " & vValue)
                  Case Else
                    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown commandclass 48 type: " & cInstance["commandClasses"]["48"]["data"][cInstance["commandClasses"]["48"]["data"].Key]["sensorTypeString"]["value"])
                    Continue
                End Select
                ' update device

                If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Multilevel binary switch device: " & DisplayBool(vValue))
                Select Case sVendor & " " & sDeviceType
                  Case "Aeon Labs Routing Binary Sensor"
                    vValue = IIf(vValue = True, "Open", "Close")
                End Select
              Endif
            Next
          Endif
        Endif

        ' sensor humid, light, temp or power
        If cInstance["commandClasses"]["49"] Then

          For Each vValues In cInstance["commandClasses"]["49"]["data"]
            If IsNumber(cInstance["commandClasses"]["49"]["data"].Key) Then
              vValue4 = cInstance["commandClasses"]["49"]["data"][cInstance["commandClasses"]["49"]["data"].Key]["val"]["value"]
              Select Case cInstance["commandClasses"]["49"]["data"][cInstance["commandClasses"]["49"]["data"].Key]["sensorTypeString"]["value"]
                Case "Power"
                  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Power Sensor: " & vValue4)
                Case "Temperature"
                  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Temp Sensor: " & vValue4)
                Case "Humidity"
                  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Humid Sensor: " & vValue4)
                Case "Luminiscence"
                  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Luminiscence Sensor: " & vValue4)
              End Select
              ' update device
            Endif
          Next
        Endif

        ' security
        If cInstance["commandClasses"]["99"] Then
          For Each vValues In cInstance["commandClasses"]["99"]["data"]
            If IsNumber(cInstance["commandClasses"]["99"]["data"].Key) Then
              vValueTemp = cInstance["commandClasses"]["99"]["data"].Key
              If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "User Id: " & vValueTemp)
              vValueTemp = cInstance["commandClasses"]["99"]["data"][cInstance["commandClasses"]["99"]["data"].Key]["status"]["value"]
              If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "User Code: " & vValueTemp)
              ' update device
            Endif
          Next
        Endif

        ' meter sensors
        If cInstance["commandClasses"]["50"] Then

          For Each vValues In cInstance["commandClasses"]["50"]["data"]
            If IsNumber(cInstance["commandClasses"]["50"]["data"].Key) Then
              iScaleId = cInstance["commandClasses"]["50"]["data"].Key
              iSensorType = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["sensorType"]["value"]
              sScale = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["scaleString"]["value"]
              If iScaleId = 0 Or If iScaleId = 2 Or If iScaleId = 6 Then
                If iSensorType = 1 Then
                  iScaleMulti = 1
                  If sScale = "kWh" Then
                    iScaleMulti = 1000
                  Endif
                Endif
                vValueTemp = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["val"]["value"]
                If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Meter Sensor: " & vValueTemp & sScale)
                ' update values
                If iScaleId = 0 Then
                  vValue3 = vValueTemp
                Else If iScaleId = 2 Then
                  vValue2 = vValueTemp
                Endif
              Endif
            Endif
          ' update device
          Next
        Endif

        ' true meters
        If cInstance["commandClasses"]["50"] Then
          For Each vValues In cInstance["commandClasses"]["50"]["data"]
            If IsNumber(cInstance["commandClasses"]["50"]["data"].Key) Then
              iScaleId = cInstance["commandClasses"]["50"]["data"].Key
              iSensorType = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["sensorType"]["value"]
              sScale = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["scaleString"]["value"]
              If iScaleId = 0 Or If iScaleId = 2 Or If iScaleId = 6 Then
                If iSensorType = 1 Then Continue
              Endif
              iScaleMulti = 1
              If sScale = "kWh" Then
                iScaleMulti = 1000
              Endif
              vValueTemp = cInstance["commandClasses"]["50"]["data"][cInstance["commandClasses"]["50"]["data"].Key]["val"]["value"]
              If iScaleId = 0 Then
                ' KwH value3
                If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Meter Value2: " & vValueTemp & sScale)
                vValue3 = vValueTemp
              Else If iScaleId = 2 Then
                ' W value2
                If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Meter Value3: " & vValueTemp & sScale)
                vValue2 = vValueTemp
              Endif
              ' update
            Endif
          ' update device
          Next
        Endif

        ' thermostat
        If cInstance["commandClasses"]["67"] Then
          For Each vValues In cInstance["commandClasses"]["67"]["data"]
            If IsNumber(cInstance["commandClasses"]["67"]["data"].Key) Then
              Try cCommandClassId.Add(67, iNode & ":" & iInstance)
              vValue = cInstance["commandClasses"]["67"]["data"][cInstance["commandClasses"]["67"]["data"].Key]["val"]["value"]
              If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Thermostat Value: " & vValue & sScale)
              ' update
            Endif
          Next
        Endif

        If bHasBattery And If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Battery Value: " & iBattery)
        ' update device value(s)
        iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"), UCase(sDeviceType), sVendor & " " & sDeviceType)
        If iDeviceId Then
          Devices.ValueUpdateExt(iDeviceId, 1, vValue)
          Devices.ValueUpdateExt(iDeviceId, 2, vValue2)
          Devices.ValueUpdateExt(iDeviceId, 3, vValue3)
          Devices.ValueUpdateExt(iDeviceId, 4, vValue4)
          If bHasBattery Then Devices.Battery(iDeviceId, iBattery)
        Endif
        If $bRaZberryDebug Then
          If vValue Then Main.WriteDebugLog(LogLabel & "Value1: " & vValue)
          If vValue2 Then Main.WriteDebugLog(LogLabel & "Value2: " & vValue2)
          If vValue3 Then Main.WriteDebugLog(LogLabel & "Value3: " & vValue3)
          If vValue4 Then Main.WriteDebugLog(LogLabel & "Value4: " & vValue4)
        Endif

        ' reset vars for next device
        vValue = ""
        vValue2 = ""
        vValue3 = ""
        vValue4 = ""
        sScale = ""
      Next
    Next
  Endif
  bInit = True
  ' start update timer
  If $iPollTime Then tRaZberry.Start

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

Public Sub DisplayBool(bSwitch As Variant) As String

  If TypeOf(bSwitch) = gb.Boolean Then
    Select bSwitch
      Case True
          Return ("True")
      Case Else
          Return ("False")
    End Select
  Else
    Return bSwitch
  Endif

End

Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iLevel, iCommandClassId As Integer
  Dim aAddress As String[]
  sCmd = UCase(sCmd)

  ' if instance is 0, add it to address
  If Not InStr(sAddress, ":") Then sAddress &= ":0"
  aAddress = Scan(sAddress, "*:*")

  Try iCommandClassId = cCommandClassId[sAddress]
  If Error Then
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "CommandClassId not found for device with address '" & sAddress & "', so I can't control it!")
    Return
  Else
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "CommandClassId for device with address '" & sAddress & "' is '" & iCommandClassId & "'.")

    If sCmd = "ON" Then
      iLevel = 255
    Else If sCmd = "OFF" Then
      iLevel = 0
    Else If InStr(sCmd, "DIM") Then
      iLevel = Val(Replace(sCmd, "DIM ", ""))
      If iLevel = 100 Then iLevel = 99
    ' insert support for thermostat setpoints
    Else
      Main.WriteDebugLog(LogLabel & "Unknown command '" & sCmd & "' given!")
      Return
    Endif
    QueueCommand(GetURL("/ZWaveAPI/Run/devices[" & aAddress[0] & "].instances[" & aAddress[1] & "].commandClasses[" & iCommandClassId & "].Set(" & iLevel & ")"))

    ' Select iCommandClassId
    '   Case 37
    '     QueueCommand(GetURL("/ZWaveAPI/Run/devices[" & aAddress[0] & "].instances[" & aAddress[1] & "].Basic.Set(" & iLevel & ")"))
    '   Case 38
    '     QueueCommand(GetURL("/ZWaveAPI/Run/devices[" & aAddress[0] & "].instances[" & aAddress[1] & "].Basic.Set(" & iLevel & ")"))
    ' End Select

  Endif

End

Public Sub GetUpdates()

  Dim sUrl As String = GetURL("/ZWaveAPI/Data/" & iUpdateTime)

  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Get update by fetching '" & sUrl & "'")
  QueueCommand(sUrl)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub QueueCommand(sPacket As String)

  ' add command to queue
  cQueue.Add(sPacket, Rnd)

  ' if not busy process it
  If bHttpBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DoQueue()

  Dim sPacket As String

  For Each sPacket In cQueue
    WriteCommand(sPacket, cQueue.Key)
    Break ' only do first one
  Next

End

Private Sub WriteCommand(sBuffer As String, sKey As String)

  hRaZberryCmd = New HttpClient As "hRaZberryCmd"
  hRaZberryCmd.URL = sBuffer
  hRaZberryCmd.Async = True
  hRaZberryCmd.TimeOut = 3
  hRaZberryCmd.Tag = sKey
  hRaZberryCmd.Get
  bHttpBusy = True
  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Send HTTPGet request '" & sBuffer & "'")

  IsRunning = True
  ErrorText = ""

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' collect razberry data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryCmd_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' razberry data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hRaZberryCmd_Finished()

  Select hRaZberryCmd.Code
    Case 200
      ' too noisy
      If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Received data '" & sBuffer & "'")
      ParseUpdateData(sBuffer)
    Case Else
      Main.WriteDebugLog(LogLabel & "Unknown error occured while trying to get RaZberry update data! HTTP=" & Last.Code & ", Buffer=" & sBuffer)
  End Select

  sBuffer = Null
  Try hRaZberryCmd.Close
  HttpBusy(hRaZberryCmd.Tag)

End

Public Sub hRaZberryCmd_Error()

  Dim sMsg As String

  If Not $bRaZberryDebug Then Return

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

  Log.Plugin_TCP_Error(LogLabel, $sTCPHost, Last.Status)
  HttpBusy(hRaZberryCmd.Tag)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' http busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HttpBusy(sKey As String)

  bHttpBusy = False
  ' remove sent command from queue
  cQueue.Remove(sKey)

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Sending command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

Private Sub ParseUpdateData(sData As String)

  Dim cUpdate As Collection

  If sData = "null" Then
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Got a device control response.")
    Return
  Else
    cUpdate = JSON.Decode(sData)
  Endif

  If cUpdate Then
    iUpdateTime = cUpdate["updateTime"]
    If $bRaZberryDebug Then
      Main.WriteDebugLog(LogLabel & "Update Timestamp: " & TimeSinceEpoch(iUpdateTime) & " (" & iUpdateTime & ")")
    Endif
    If cUpdate.Count > 1 Then
      ParseUpdateDevices(cUpdate)
    Else
      If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "No updates reported.")
    Endif
  Else
    If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Error received invalid JSON update data!")
  Endif

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

Private Sub ParseUpdateDevices(cUpdates As Collection)

  Dim cUpdate As New Collection
  Dim aUpdate As String[]
  Dim vValue, vValue2, vValue3, vValue4, vValueTemp As Variant
  Dim sScale, sSensorType As String
  Dim iNode, iInstance, iBattery, iScale, iDeviceId As Integer

  If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Found " & cUpdates.Count & " updates.")
  ' go through each update
  For Each cUpdate In cUpdates

    ' skip controller node
    aUpdate = Split(cUpdates.Key, ".")
    If aUpdate.Count > 1 Then
      If aUpdate[1] = iControllerID Then 
        If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Skipping controller node updates")
        Continue
      Endif

      ' search for interesting data
      ' battery value
      If InStr(cUpdates.Key, "commandClasses.128.data.last") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iBattery = cUpdate["value"]
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Battery Value Update: " & iBattery)
          Endif
          ' update battery status
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.Battery(iDeviceId, iBattery)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' sensor multilevel, but binary switch eg pir, d/w sensor
      ' "devices.8.instances.0.commandClasses.48.data.level"
      Else If InStr(cUpdates.Key, "commandClasses.48.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]

          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Sensor Multilevel Binary Value1 Update: " & vValue)
          Endif
          vValue = IIf((cUpdate["value"] = True), "Open", "Closed")
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' binary switch device
      Else If InStr(cUpdates.Key, "commandClasses.37.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          vValue = IIf((cUpdate["value"] = 255), "On", "Off")
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Switch Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' dimmer device
      Else If InStr(cUpdates.Key, "commandClasses.38.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          vValue = "Dim " & cUpdate["value"]
          If vValue = "Dim 99" Then vValue = "On"
          If vValue = "Dim 0" Then vValue = "Off"
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Dimmer Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' multilevel sensor
      Else If InStr(cUpdates.Key, "commandClasses.49.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          vValue = cUpdate["val"]["value"]
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Multilevel Sensor Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' thermostat
      Else If InStr(cUpdates.Key, "commandClasses.67.data.level") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          If cUpdate["val"]["value"] Then
            vValue = cUpdate["val"]["value"]
          Else
            vValue = cUpdate["value"]
          Endif
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Thermostat Value1 Update: " & vValue)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' "devices.3.instances.0.commandClasses.49.data.4"
       Else If InStr(cUpdates.Key, "commandClasses.49.data.") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iScale = aUpdate[7]
          sScale = cUpdate["scaleString"]["value"]
          sSensorType = Trim(cUpdate["sensorTypeString"]["value"])
          vValueTemp = cUpdate["val"]["value"]
          If iScale = 4 Then
            ' W value4
            vValue4 = vValueTemp
          Endif
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Scale: " & iScale)
            Main.WriteDebugLog(LogLabel & "Type: " & sSensorType)
            If iScale = 4 Then Main.WriteDebugLog(LogLabel & "Power Sensor value4 Update: " & vValue4 & sScale)
          Endif
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
            Devices.ValueUpdateExt(iDeviceId, 2, vValue2)
            Devices.ValueUpdateExt(iDeviceId, 3, vValue3)
            Devices.ValueUpdateExt(iDeviceId, 4, vValue4)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      ' meter device
      ' "devices.5.instances.1.commandClasses.50.data.2"
      Else If InStr(cUpdates.Key, "commandClasses.50.data.") Then
        aUpdate = Split(cUpdates.Key, ".")
        If aUpdate.Count = 8 Then
          iNode = aUpdate[1]
          iInstance = aUpdate[3]
          iScale = aUpdate[7]
          sScale = cUpdate["scaleString"]["value"]
          sSensorType = Trim(cUpdate["sensorTypeString"]["value"])
          vValueTemp = cUpdate["val"]["value"]
          If iScale = 0 Then
            ' KwH value3
            vValue3 = vValueTemp
          Else If iScale = 2 Then
            ' W value2
            vValue2 = vValueTemp
          Endif
          If $bRaZberryDebug Then
            Main.WriteDebugLog(LogLabel & "Node: #" & iNode)
            Main.WriteDebugLog(LogLabel & "Instance: #" & iInstance)
            Main.WriteDebugLog(LogLabel & "Scale: " & iScale)
            Main.WriteDebugLog(LogLabel & "Type: " & sSensorType)
            If iScale = 2 Then Main.WriteDebugLog(LogLabel & "Sensor Multilevel Binary Value2 Update: " & vValue2 & sScale)
            If iScale = 0 Then Main.WriteDebugLog(LogLabel & "Sensor Multilevel Binary Value3 Update: " & vValue3 & sScale)
          Endif
          ' update device value(s)
          iDeviceId = Devices.Find(Instance, iNode & If((iInstance), ":" & iInstance, ""), Devices.FindInterface("RaZberry Z-Wave Interface"))
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, vValue)
            Devices.ValueUpdateExt(iDeviceId, 2, vValue2)
            Devices.ValueUpdateExt(iDeviceId, 3, vValue3)
          Endif
        Else
          If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Unknown update string: " & cUpdates.Key)
        Endif
      Endif
      ' TODO: add commandClass 98

      ' clear stuff
      vValue = ""
      vValue2 = ""
      vValue3 = ""
      vValue4 = ""
      vValueTemp = ""
    Endif
  Next

Catch ' some errors
  If Error.code <> 6 Then ' suppress reading updatetime as collection
    Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where & " " & Error.Code)
  Else
    Error.Clear
  Endif

End

Private Sub TimeSinceEpoch(sTime As String) As String

  Dim gTime As Date

  ' calculate time since epoch
  gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val(sTime))

  Return Format$(gTime, "yyyy/mm/dd hh:nn:ss")

Catch ' some errors
  Main.WriteDebugLog(LogLabel & "ERROR: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to stop timer
  Try tRaZberry.Stop
  '  try to close all connections
  Try hRaZberryInit.Close
  Try hRaZberryCmd.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

' '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ' create a record with node information in database
' '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public Sub CreateNode(iNodeId As Integer, iTypeBasic As Integer, iTypeGeneric As Integer, iTypeSpecific As Integer, iCapabilities As Integer, iSecurity As Integer, bSleeping As Boolean)
'
'   Dim rResult As Result
'
'   ' write node to the database table
'   Main.hDB.Begin()
'   rResult = Main.hDB.Create("devices_zwave")
'   rResult!nodeid = iNodeId
'   rResult!typebasic = iTypeBasic
'   rResult!typegeneric = iTypeGeneric
'   rResult!typespecific = iTypeSpecific
'   rResult!capabilities = iCapabilities
'   rResult!security = iSecurity
'   rResult!sleeping = bSleeping
'   rResult.Update()
'   Main.hDB.Commit()
'
'   If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Added node #" & iNodeId & " to the DomotiGa Z-Wave list."))
'
' End

' '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ' clear nodes table from database
' '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public Sub RemoveNodes()
'
'   Dim hTable As Table
'
'   Try Main.hDB.Tables.Remove("devices_zwave")
'   hTable = Main.hDB.Tables.Add("devices_zwave")
' 
'   hTable.Fields.Add("id", db.Serial)
'   hTable.Fields.Add("nodeid", gb.String, 32)
'   hTable.Fields.Add("value", gb.String, 32)
'   hTable.Fields.Add("value2", gb.String, 32)
'   hTable.Fields.Add("value3", gb.String, 32)
'   hTable.Fields.Add("value4", gb.String, 32)
'   hTable.Fields.Add("typebasic", gb.Integer)
'   hTable.Fields.Add("typegeneric", gb.Integer)
'   hTable.Fields.Add("typespecific", gb.Integer)
'   hTable.Fields.Add("capabilities", gb.Integer)
'   hTable.Fields.Add("security", gb.Integer)
'   hTable.Fields.Add("sleeping", gb.Boolean)
'   hTable.Fields.Add("manufacturer", gb.String, 64)
'   hTable.Fields.Add("model", gb.String, 64)
'   hTable.Fields.Add("version", gb.String, 32)
'   hTable.Fields.Add("speed", gb.String, 32)
'   hTable.Fields.Add("neighbors", gb.String)
'   hTable.Fields.Add("classes", gb.String)
'   hTable.PrimaryKey = ["id"]
'   hTable.Update
'
'   If $bRaZberryDebug Then Main.WriteDebugLog(LogLabel & "Removed all nodes from the DomotiGa Z-Wave list."))
'
' End

