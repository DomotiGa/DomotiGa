' Gambas class file

' Description:
' CGPS.class
' u-blox AG MS1E GPS module (NMEA) support to get GPS time, precise position, and altitude
' GPS module version: $Version 1.3.4P00283 uBlx308

' Development Status:
' Reads serial data, needs parsing to be implemented.
' Wrote it for fun, no serious purpose for a non mobile server.

' Links:
' http://aprs.gids.nl/nmea/

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien
' Module additions Copyright(C) 2009 by Timo Sariwating

' Read file called COPYING for license details.

' Notes:
' NMEA sentences: 
' $GPBOD - Bearing, origin TO destination
' $GPBWC - Bearing AND distance TO waypoint, great circle
' $GPGGA - Global Positioning System Fix Data
' $GPGLL - Geographic position, latitude / longitude
' $GPGSA - GPS DOP AND active satellites
' $GPGSV - GPS Satellites IN view
' $GPHDT - Heading, TRUE
' $GPR00 - List OF waypoints IN currently active route
' $GPRMA - Recommended minimum specific Loran - C data
' $GPRMB - Recommended minimum navigation info
' $GPRMC - Recommended minimum specific GPS / Transit data
' $GPRTE - Routes
' $GPTRF - Transit Fix Data
' $GPSTN - Multiple Data ID
' $GPVBW - Dual Ground / Water Speed
' $GPVTG - Track made good AND ground speed
' $GPWPL - Waypoint location
' $GPXTE - Cross - track ERROR , Measured
' $GPZDA - Date & Time

Property Port As String
Property Baud As String
Property GPSDebug As Boolean

Private sPort As String
Private sBaud As String
Private bGPSDebug As Boolean

Public hGPS As New SerialPort

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hGPS.Close

  ' get a new one
  hGPS = New Serialport As "GPS"
  With hGPS
    .PortName = sPort
    .Speed = sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("GPS Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hGPS.Close
  Main.WriteLog(("GPS serial port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("GPS Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data input
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GPS_Read()

  Dim sData As String

  Line Input #hGPS, sData
  Select Case Mid$(sdata, 2, 5)
    Case "GPGLL" ' position
      Main.WriteDebugLog(("[GPS] Position: ") & sData)
    Case "GPZDA" ' date & time
      Main.WriteDebugLog(("[GPS] Date & Time: ") & sData)
    Case "GPGGA" ' fix data
      GPSFix(sData)
    Case "GPGSV" ' satellites in view
    'Main.WriteDebugLog("[GPS] Satellites in view: " & sData)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse fix data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GPSFix(sValue As String)

  Dim sGPSFix As String[]
  Dim sB, sC As String
  Dim iCounter As Integer = 1

  sGPSFix = Split(sValue, ",")

  For Each sB In sGPSFix
    Select Case (iCounter)
      Case 1
        Inc iCounter
      Case 2
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Time: ") & sB)
        Inc iCounter
      Case 3
        sC = sB
        Inc iCounter
      Case 4
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Latitude: ") & sC & " " & sB)
        sC = ""
        Inc iCounter
      Case 5
        sC = sB
        Inc iCounter
      Case 6
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Longitude: ") & sC & " " & sB)
        sC = ""
        Inc iCounter
      Case 7
      If bGPSDebug Then
        Select Case (sB)
        Case 0
          Main.WriteDebugLog(("[GPS] Fix Quality: Invalid"))
          Inc iCounter
        Case 1
          Main.WriteDebugLog(("[GPS] Fix Quality: GPS Fix"))
          Inc iCounter
        Case 2
          Main.WriteDebugLog(("[GPS] Fix Quality: DGPS Fix"))
          Inc iCounter
        End Select
        Else
          Inc iCounter
        Endif
      Case 8
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Number of Satellites: ") & sB)
        Inc iCounter
      Case 9
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] HDOP: ") & sB)
        Inc iCounter
      Case 10
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Altitude: ") & sB)
        Inc iCounter
      Case 11
        Inc iCounter
      Case 12
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Heigh above WGS84: ") & sB)
        Inc iCounter
      Case 13
        Inc iCounter
      Case 14
        If bGPSDebug Then Main.WriteDebugLog(("[GPS] Time since last DGPS update: ") & sB)
        Inc iCounter
      Case 15
        If bGPSDebug Then
          Main.WriteDebugLog(("[GPS] DGPS Station ID: ") & Left$(sB, 4))
          Main.WriteDebugLog(("[GPS] CheckSum: ") & Right$(sB, -4))
        Endif
    End Select
  Next

End

' implement the properties
Private Function Port_Read() As String

  Return sPort

End

Private Sub Port_Write(sValue As String)

  sPort = sValue

End

Private Function Baud_Read() As String

  Return sBaud

End

Private Sub Baud_Write(sValue As String)

  sBaud = sValue

End

Private Function GPSDebug_Read() As Boolean

  Return bGPSDebug

End

Private Sub GPSDebug_Write(sValue As Boolean)

  bGPSDebug = sValue

End
