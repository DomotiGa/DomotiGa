' Gambas class file

' Description:
' CForecastIo.class
' Provides various weather related functions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "ForecastIo"
Public PluginFriendlyName As String = "ForecastIo"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[forecast.io] "
Public InterfaceId As Integer = 0
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sApiKey As String
Private $sCity As String
Private $sLatitude As String
Private $sLongitude As String
Private $iRefresh As Integer
Private $bDebug As Boolean

Public hForecastIo As New HttpClient
Public tForecastIo As New Timer
Public $sBuffer As String

Private $cWeatherData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance 

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sApiKey = cPl.Settings["apikey"]
  $sCity = cPl.Settings["city"]
  $sLatitude = cPl.Settings["latitude"]
  $sLongitude = cPl.Settings["longitude"]
  $iRefresh = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Virtual Interface")
  If InterfaceId = 0 Then
    Main.WriteLog(LogLabel & "ERROR: Required InterfaceId for 'Virtual Interface' can't be retrieved from the database")

    IsRunning = False
    ErrorText = "Required InterfaceId for 'Virtual Interface' can't be retrieved from the database"
    Return
  Endif

  ' Initialize 
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tForecastIo.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' Fetch the initial data
  GetWeather()
  Try tForecastIo.Stop

  ' create refresh timer
  tForecastIo = New Timer As "tForecastIo"
  tForecastIo.Delay = $iRefresh * 1000
  tForecastIo.Start
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Started refresh timer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tForecastIo_Timer()

  GetWeather()
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating data.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generates a GET call to forecast.io and store the info
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetWeather()

  Dim sURL As String

  ' Don't start a new session if one is already active
  If hForecastIo.Status > 0 Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: Fetching data is already in progress")
    Return
  Endif

  $sBuffer = ""

  ' Build up the GET Url, we retrieve current conditions only
  sURL = "https://api.forecast.io/forecast/" & $sApiKey & "/" & $sLatitude & "," & $sLongitude
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Fetching data for Country/City '" & $sCity & "' with request '" & sURL & "'")

  hForecastIo = New HttpClient As "hForecastIo"
  hForecastIo.URL = sURL
  hForecastIo.Async = True
  hForecastIo.TimeOut = 5
  hForecastIo.Get

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle data reading
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hForecastIo_Read()

  IsRunning = True
  If Lof(Last) Then $sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle read errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hForecastIo_Error()

  isRunning = False
  ErrorText = "Error retrieving forecast.io URL. Code=" & hForecastIo.Status
  Main.WriteLog(LogLabel & "ERROR: Retrieving forecast.io URL. Code=" & hForecastIo.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle finish request and start parsing the data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hForecastIo_Finished()

  Select Last.Code
    Case 200
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received '" & $sBuffer & "'")
      DecodeForecastIo(JSON.Decode(Replace($sBuffer, "&deg;", "deg")), True)
    Default
      IsRunning = False
      ErrorText = "Unknown HTTP Code=" & Last.Code
      Main.WriteLog(LogLabel & "ERROR: Unknown HTTP Code=" & Last.Code & ", while fetching weather data!")
  End Select

  Try Last.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Progress WeatherUnderground data and store it in a virtualdevice and Collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub DecodeForecastIo(cData As Collection, Optional bStore As Boolean = False) As Collection

  Dim cResult As New Collection
  Dim cCurrent As New Collection
  Dim iDeviceId As Integer

  ' Reinitialise the WeatherData info
  If bStore Then
    $cWeatherData = New Collection
  Endif

  ' TBD

  If Not cData Then
    Main.WriteLog(LogLabel & "ERROR: No data received")
    cResult["error"] = "No data received"
    If bStore Then $cWeatherData = cResult
    Return cResult
  Endif

  Return cResult

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.text & " at " & Error.where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return full pathname to the icon of ForecastIo
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IconFullName(sIcon As String) As String

  Return "http://xxx.xxx/img/w/" & sIcon & ".png"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the ForecastIo data format
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JsonRpc_ForecastIo_Get(cData As Collection) As Collection

  If cData Then
  Else
    ' If nothing supplied, just return the already stored data
    Return $cWeatherData
  Endif

End
