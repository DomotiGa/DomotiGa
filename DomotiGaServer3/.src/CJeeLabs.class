' Gambas class file

' Description:
' CJeeLabs.class
' Support for JeeLabs JeeLinks interface and Sensors and KAKU commands

' Development Status:
' Working for JeeNodes.
' JLink needs to be loaded with RF12 DEMO sketch for
' KAKU control support.

' Links:
' http://jeelabs.org

' Credits:
' Thanks to Jean-Claude Wippler, Wouter Wolkers and Andy van Dongen.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "JeeLabs"
Public PluginFriendlyName As String = "JeeLabs JeeLink"
Public PluginVersion As String = "1.01"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[JeeLabs] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String

Public hMySocket As CSocket
Public hMySerial As CSerialPort

Private $sMsgData As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]

  InterfaceId = Devices.FindInterface("JeeLabs Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectTCP() As Boolean

  Dim iReconnectRetry As Integer = 0

  ' try to close the connection
  Try hMySocket.Close
  Try iReconnectRetry = hMySocket.ReconnectRetry
  
  ' get a new one - but also pass on our previous reconnect counter
  hMySocket = New CSocket(iReconnectRetry) As "MySocket"

  hMySocket.DataType = gb.String
  hMySocket.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  WriteLog(PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial() As Boolean

  Dim iReconnectRetry As Integer = 0

  ' try to close the port
  Try hMySerial.Close
  Try iReconnectRetry = hMySerial.ReconnectRetry

  ' get a new one - but store the retry counter between new instances
  hMySerial = New CSerialPort(iReconnectRetry) As "MySerial"

  With hMySerial
    .DataType = gb.String
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  WriteLog(PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  WriteLog("ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  WriteLog("ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect() As Boolean

  ' Try to close the connection
  Try hMySocket.Close
  Try hMySerial.Close

  ' Stop possible timers
  StopTimers()

  WriteLog(PluginFriendlyName & IIf($sInterface = "tcp", " TCP connection closed.", " Port closed."))

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  WriteLog("ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop all possible timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Closed()

  WriteLog("ERROR: TCP socket closed by peer.")
  StopTimers()

  IsRunning = False
  ErrorText = "TCP socket closed by peer"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Error(sMsg As String)

  IsRunning = False
  ErrorText = sMsg

  WriteLog("ERROR: " & sMsg)
  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' received data from the tcp port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Read(vVar As Variant)

  Dim iPos As Integer

  iPos = InStr(vVar, gb.Lf) ' LF=10
  If iPos Then
    $sMsgData &= Mid(vVar, 1, iPos - 1)
    If Len($sMsgData) > 1 And If Left($sMsgData, 2) = "OK" Then ProcessReceivedPacket($sMsgData)
    $sMsgData = Mid(vVar, iPos + 1)
  Else
    $sMsgData &= vVar
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Called when we should reconnect to the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySocket_Reconnect()

  ConnectTCP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Error(sMsg As String)

  WriteLog("ERROR: " & sMsg)
  StopTimers()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got data back from MySensors gateway and parse it when it's complete
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Read(vVar As Variant)

  Dim iPos As Integer

  iPos = InStr(vVar, gb.Lf) ' LF=10
  If iPos Then
    $sMsgData &= Mid(vVar, 1, iPos - 1)
    If Len($sMsgData) > 1 And If Left($sMsgData, 2) = "OK" Then ProcessReceivedPacket($sMsgData)
    $sMsgData = Mid(vVar, iPos + 1)
  Else
    $sMsgData &= vVar
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle reconnect(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub MySerial_Reconnect()

  ' ReConnect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  If $bDebug Then WriteDebugLog("SendCommand (sAddress='" & sAddress & "', sCmd = '" & sCmd & "')")

  Select sType
    Case "ARC", "KAKU" ' KlikAanKlikUit with CodeWheel, NEXA, Domia Lite, Proove, ByeByeStandby, ELRO AB600, Intertechno, Duwi
      If Left$(sAddress, 1) Like "[A-Z]" And Right$(sAddress, 1) Like "[0-9]" Then
        KAKU(sAddress, sCmd, iDeviceId)
      Else
        WriteLog("ERROR: Invalid ARC or KAKU address '" & sAddress & "' given!")
      Endif
    Case Else
      WriteLog("ERROR: Unsupported device type in SendCommand. (" & sType & ")")
  End Select

Catch
  WriteLog("ERROR: SendCommand '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub KAKU(sAddress As String, sCmd As String, Optional iDeviceId As Integer)

  Dim iDevice, iUnit, iStatus As Integer
  Dim sBuffer As String

  iUnit = Asc(Left$(sAddress, 1)) - &H40
  iDevice = Right$(sAddress, 2)

  Select UCase(sCmd)
    Case "ON"
      iStatus = "1"
    Case "OFF"
      iStatus = "0"
    Default
      WriteLog("ERROR: Unknown KAKU command '" & UCase(sCmd) & "' given!")
      Return
  End Select

  sBuffer = iUnit & "," & iDevice & "," & iStatus & " k"
  If $bDebug Then WriteDebugLog("< " & sBuffer)

  sBuffer &= Chr$(10)

  If InStr($sInterface, "tcp") Then
    ' send the message to the tcp stream
    hMySocket.Write(sBuffer)
  Else
    ' send the message to the serial port
    hMySerial.Write(sBuffer)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process complete packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessReceivedPacket(sData As String)

  Dim sLine, sMotion, sLowBat As String
  Dim aScan As String[]
  Dim iDeviceId, iSensorId, iLDR, iHumi, iTemp, iLowBat As Integer
  Dim bPIR As Boolean

  If $bDebug Then WriteDebugLog("< " & sData)

  ' parse each line
  For Each sLine In Split(sData, "\n")
    ' parse sensor data
    aScan = Scan(Trim(sLine), "* * * * * *")
    If aScan.Count = 6 Then
      iSensorId = aScan[1]
      iSensorId = IIf(iSensorId > 31, iSensorId - 32, iSensorId)
      iLDR = aScan[2]
      bPIR = BTst(CInt(aScan[3]), 0)
      iHumi = Lsr(CInt(aScan[3]), 1)
      iTemp = (((256 * (CInt(aScan[5]) And 3) + CInt(aScan[4])) Xor 512) - 512)
      iLowBat = Lsr(CInt(aScan[5]), 2) And 1
      sLowBat = If(iLowBat, "Empty", "OK")
      sMotion = IIf(bPIR, "Motion", "No Motion")
      If $bDebug Then
        WriteDebugLog("Sensor ID: " & iSensorId)
        WriteDebugLog("LDR      : " & iLDR)
        WriteDebugLog("PIR      : " & sMotion)
        WriteDebugLog("Humi     : " & iHumi)
        WriteDebugLog("Temp     : " & iTemp)
        WriteDebugLog("LowBat   : " & iLowBat & " (" & sLowBat & ")")
      Endif
      ' try to find device with address, and correct interface type.
      iDeviceId = Devices.Find(Instance, iSensorId, InterfaceId, "JEELABS NODE")
      ' if found then update it's value
      If iDeviceId Then
        Devices.ValueUpdate(iDeviceId, 1, iTemp, Devices.ValueType_Temperature)
        Devices.ValueUpdate(iDeviceId, 2, iHumi, Devices.ValueType_Humidity)
        Devices.ValueUpdate(iDeviceId, 3, iLDR)
        Devices.ValueUpdate(iDeviceId, 4, sMotion)
        Devices.Battery(iDeviceId, sLowBat)
      Endif
    Endif
  Next

Catch
  WriteLog("ERROR: Parsing data packet: " & sLine & " '" & Error.Text & "' at '" & Error.Where & "'")

End

