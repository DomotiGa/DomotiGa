' Gambas class file

' Description:
' CPachube.class
' Support for Xively Legacy Pachube (pronounce: patch-bay) sensors network.

' Development Status:
' Just build, so possible bugs around.

' Links:
' http://www.pachube.com

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Pachube"
Public PluginType As Integer = Plugin.Type_Module
Public PluginFriendlyName As String = "Pachube"
Public PluginVersion As String = "1.01"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Pachube] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iFeed As Integer
Private $iPushTime As Integer
Private $sAPIKey As String
Private $bDebug As Boolean

Public hPut As New HttpClient As "hPut"
Public tPachube As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry, Optional bRun As Boolean = True)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iFeed = cPl.Settings["feed"]
  $iPushTime = cPl.Settings["pushtime"]
  $sAPIKey = cPl.Settings["apikey"]
  $bDebug = cPl.Settings["debug"]

  ' Initialize
  If bRun Then Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tPachube.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for Pachube
  tPachube = New Timer As "tPachube"
  tPachube.Delay = $iPushTime * 1000 * 60 ' multiply for minutes
  tPachube.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPachube_Timer()

  UploadPachubeData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create xml data and upload it to xively
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UploadPachubeData()

  Dim sURL, sContent As String
  Dim aHeaders As New String[]

  ' if we are already uploading return
  If hPut.Status > 0 Then
    Main.WriteLog(LogLabel & "I'm already uploading sensor data to Pachube/Xively, skipping.")
    Return
  Endif

  ' create url with feed id and xml type
  sURL = "https://api.xively.com/v2/feeds/" & $iFeed & ".xml"

  ' get device data to upload
  sContent = CreatePachubeData()

  ' set api header for authentication
  aHeaders.Add("X-ApiKey:" & $sAPIKey)

  ' suppress 'Continue: 100' reply
  aHeaders.Add("Expect:")

  ' use httpclient put to send data to xively
  hPut.URL = sURL
  hPut.TimeOut = 10
  hPut.Async = True
  hPut.Put("text/xml", sContent, aHeaders)

  If $bDebug Then
    Main.WriteDebugLog(LogLabel & "Posting data to feed url '" & sURL & "'.")
    Main.WriteDebugLog(LogLabel & "Using header \"X-ApiKey: " & $sAPIKey & "\".")
    Main.WriteDebugLog(LogLabel & sContent)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan pachube devices table and create xml document
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CreatePachubeData() As String

  Dim sXml, sValue, sTag As String
  Dim rResult As Result
  Dim aTags As String[]

  ' scan device table
  rResult = Main.hDB.Exec("SELECT * FROM devices_pachube")
  If Not rResult Then
    Main.WriteLog(LogLabel & "ERROR: table 'devices_pachube' not found!")
    Return
  Endif

  ' build header
  sXml = "<?xml version='1.0' encoding='UTF-8'?>\n"
  sXml &= "<eeml>\n"
  sXml &= "<environment>\n"

  ' create device entries
  If rResult.Count Then
    For Each rResult
      sXml &= "<data id='" & rResult!datastreamid & "'>\n"
      sXml &= "<tag>" & rResult!tags & "</tag>\n"
      sValue = Devices.GetCurrentValueForDevice(rResult!deviceid, rResult!value)
      sXml &= "<current_value>" & sValue & "</current_value>\n"
      sXml &= "<unit symbol='" & rResult!devicelabel & "' type='" & rResult!unittype & "'>" & rResult!units & "</unit>\n"
      sXml &= "</data>\n"
    Next
  Endif

  ' close document
  sXml &= "</environment>\n"
  sXml &= "</eeml>\n"

  Return sXml

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch error
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPut_Error()

  Dim sStatus As String = Last.Status

  Log.Plugin_CURL_Error(LogLabel, "api.xively.com", sStatus)

  If Not $bDebug Then Return
  Main.WriteDebugLog(LogLabel & "Error while posting to feed on xively Status: ", Last.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check http return code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPut_Finished()

  Dim iCount As Integer

  ' select on http result code and display message
  Select hPut.Code
    Case 0
      If InStr(hPut.Headers[0], "HTTP/1.1 200") Or If InStr(hPut.Headers[0], "HTTP/1.1 100") Then
        Main.WriteLog(LogLabel & "Uploaded sensor data to Pachube/Xively.")
      Else
        Main.WriteLog(LogLabel & "Unknown error occured while uploading sensor data to Pachube/Xively!")
      Endif
    Case 200
      Main.WriteLog(LogLabel & "Uploaded sensor data to Pachube/Xively.")
    Case 401
      Main.WriteLog(LogLabel & "Error authenticating while uploading sensor data to Pachube/Xively!")
    Case 403
      Main.WriteLog(LogLabel & "Error forbidden to upload sensor data to Pachube/Xively!")
    Case 404
      Main.WriteLog(LogLabel & "Error page not found while uploading sensor data to Pachube/Xively!")
    Case 422
      Main.WriteLog(LogLabel & "Error sensor data is not valid after uploading to Pachube/Xively!")
    Case 503
      Main.WriteLog(LogLabel & "Error rate limit exceeded while uploading sensor data to Pachube/Xively!")
    Case Else
      Main.WriteLog(LogLabel & "Unknown error occured while uploading sensor data to Pachube/Xively! (" & hPut.Code & ") " & hPut.Reason)
  End Select

  ' if debug is on print all http headers
  If Not $bDebug Then Return
  For iCount = 0 To hPut.Headers.Count - 1
    Main.WriteDebugLog(LogLabel & Left(hPut.Headers[iCount], Len(hPut.Headers[iCount])))
  Next

End
