' Gambas class file

' Description:
' CPushover.class
' Contains code for sending Pushover messages

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Pushover"
Public PluginFriendlyName As String = "Pushover"
Public PluginVersion As String = "1.01"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Pushover] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Priority and Sound definitions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Priority_List As String[] = [("Normal (0)"), ("Lowest (-2)"), ("Low (-1)"), ("High (1)"), ("Emergency(2)")]
Public Sound_List As String[] = [("pushover (default)"), ("bike"), ("bugle"), ("cashregister"), ("classical"), ("cosmic"), ("falling"), ("gamelan"), ("incoming"), ("intermission"), ("magic"), ("mechanical"), ("pianobar"), ("siren"), ("spacealarm"), ("tugboat"), ("alien"), ("climb"), ("persistent"), ("echo"), ("updown"), ("none")]

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $bDebug As Boolean
Private $sToken As String
Private $sUser As String
Private $sDevice As String

Public hPushoverMessage As HttpClient
Public cPushoverData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $bDebug = cPl.Settings["debug"]
  $sToken = cPl.Settings["token"]
  $sUser = cPl.Settings["user"]
  $sDevice = cPl.Settings["device"]

  ' Initialize
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Validate Pushover token and user
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValidatePushoverTokenUser(sToken As String, sUser As String, bDebug As Boolean) As String

  Dim hPushoverValidate As HttpClient
  Dim sUrl As String = "https://api.pushover.net/1/users/validate.json"
  Dim sData, sBuffer, sStatus, sUserResp, sDeviceResp, sError As String
  Dim vResponse, vErrors As Variant

  sData = "token=" & URL.Encode(sToken) & "&" & "user=" & URL.Encode(sUser)

  hPushoverValidate = New HttpClient As "hPushoverValidate"
  hPushoverValidate.URL = sUrl
  hPushoverValidate.TimeOut = 8
  hPushoverValidate.Async = False
  hPushoverValidate.Post("application/x-www-form-urlencoded", sData)

  If hPushoverValidate.Status < 0 Then
    ' Failure fetching data or apikey is invalid
    If bDebug Then Main.WriteDebugLog(LogLabel & "Error validating API token=" & sToken & ", Code=" & hPushoverValidate.Status & " HTTP=" & hPushoverValidate.Code)
    Return "Failed, Code=" & hPushoverValidate.Status & ", HTTP=" & hPushoverValidate.Code
  Else
    ' success or error - read the data
    If Lof(hPushoverValidate) Then sBuffer = Read #hPushoverValidate, Lof(hPushoverValidate)

    vResponse = JSON.Decode(sBuffer)

    If vResponse.Exist("status") Then sStatus = vResponse["status"]
    If vResponse.Exist("user") Then sUserResp = vResponse["user"]
    If vResponse.Exist("device") Then sDeviceResp = vResponse["device"]
    If vResponse.Exist("errors") Then vErrors = vResponse["errors"]
    Try sError = vErrors[0]

    ' Status=1 is success, anything else is a faillure
    If sStatus = "1" Then
      If bDebug Then Main.WriteDebugLog(LogLabel & "Successfully validated API token=" & sToken & ", user=" & sUser)
      Return ""
    Else
      If bDebug Then Main.WriteDebugLog(LogLabel & "Failed to validated API token=" & sToken & ", user=" & sUser & ", Code=" & hPushoverValidate.Code & ", Error=" & sError)
      Return "Code=" & hPushoverValidate.code & ", Error=" & sError
    Endif

  Endif

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Pushover message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostPushoverTest(sToken As String, sUser As String, sDevice As String, sMessage As String, bDebug As Boolean) As String

  Dim hPushoverMessageTest As HttpClient
  Dim sUrl As String = "https://api.pushover.net/1/messages.json"
  Dim sData, sBuffer, sStatus, sUserResp, sDeviceResp, sError As String
  Dim vResponse, vErrors As Variant

  If sToken = "" Then
    Return "ERROR: No Pushover API Token supplied"
  Endif
  If sUser = "" Then
    Return "ERROR: No Pushover User key supplied"
  Endif

  sData = "token=" & URL.Encode(sToken) & "&" & "user=" & URL.Encode(sUser)
  If sDevice Then
    sData &= "&" & "device=" & URL.Encode(sDevice)
  Endif
  sData &= "&" & "message=" & URL.Encode(sMessage)

  hPushoverMessageTest = New HttpClient As "hPushoverMessage"
  hPushoverMessageTest.URL = sUrl
  hPushoverMessageTest.TimeOut = 8
  hPushoverMessageTest.Async = False
  hPushoverMessageTest.Post("application/x-www-form-urlencoded", sData)

  If hPushoverMessageTest.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Pushover message. API token=" & sToken & ", User=" & sUser & ", HttpCode=" & hPushoverMessageTest.Status)
    Return "Failed, HTTP=" & hPushoverMessageTest.Status
  Else
    ' success or error - read the data
    If Lof(hPushoverMessageTest) Then sBuffer = Read #hPushoverMessageTest, Lof(hPushoverMessageTest)

    vResponse = JSON.Decode(sBuffer)

    If vResponse.Exist("status") Then sStatus = vResponse["status"]
    If vResponse.Exist("user") Then sUserResp = vResponse["user"]
    If vResponse.Exist("device") Then sDeviceResp = vResponse["device"]
    If vResponse.Exist("errors") Then vErrors = vResponse["errors"]
    Try sError = vErrors[0]

    ' Status=1 is success, anything else is a faillure
    If sStatus = "1" Then
      If bDebug Then Main.WriteDebugLog(LogLabel & "Successfully send message. API token=" & sToken & ", user=" & sUser)
      Return ""
    Else
      If bDebug Then Main.WriteDebugLog(LogLabel & "Failed to send message. API token=" & sToken & ", user=" & sUser & ", Code=" & hPushoverMessageTest.Code & ", Error=" & sError)
      Return "Code=" & hPushoverMessageTest.code & ", Error=" & sError
    Endif
  Endif

  Return ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Post the Pushover message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PostPushover(sDevice As String, sMessage As String, sPriority As String, sSound As String) As Boolean

  Dim sUrl As String = "https://api.pushover.net/1/messages.json"
  Dim sData As String
  Dim Bucle As Byte

  If Not $bEnabled Then
    Main.WriteDebugLog(LogLabel & PluginFriendlyName & " is disabled")
    Return False
  Endif

  ' Find free tag, between 1 and 99. Normally we should never go over 1 thread
  For Bucle = 1 To 100
    If Not cPushoverData.Exist(Bucle) Then Break
  Next

  If Bucle = 100 Then
    Main.WriteLog(LogLabel & "ERROR: Pushover Message Queue full")
    Return False
  Endif

  sData = "token=" & URL.Encode($sToken) & "&" & "user=" & URL.Encode($sUser)

  If sDevice = "" Then sDevice = $sDevice
  If sDevice Then
    sData &= "&device=" & URL.Encode(sDevice)
  Endif

  If sPriority Then
    sData &= "&priority=" & URL.Encode(sPriority)
    If sPriority = "2" Then
      sData &= "&retry=" & URL.Encode("300")
      sData &= "&expire=" & URL.Encode("86400")
    End If
  End If

  If sSound Then
    sData &= "&sound=" & URL.Encode(sSound)
  End If

  sData &= "&message=" & URL.Encode(sMessage)

  hPushoverMessage = New HttpClient As "hPushoverMessage"
  hPushoverMessage.URL = sUrl
  hPushoverMessage.TimeOut = 8
  hPushoverMessage.Async = True
  hPushoverMessage.Tag = Bucle
  hPushoverMessage.Post("application/x-www-form-urlencoded", sData)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Posting Pushover message (#" & Bucle & ") " & sUrl)
  cPushoverData.Add("", Bucle)

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read the data send by Pushover, this can be called multiple times
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPushoverMessage_Read()

  Dim sData, sBuffer As String

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cPushoverData[Last.Tag] Then
    sData = cPushoverData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif

  cPushoverData[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' End of the Pushover response found, parse it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPushoverMessage_Finished()

  Dim sStatus, sUserResp, sDeviceResp, sError As String
  Dim vResponse, vErrors As Variant

  ' Return if it is sync request
  If Last.Async = False Then Return

  If Last.Status < 0 Then
    ' Faillure fetching data or apikey is invalid
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Pushover message (#" & Last.Tag & "). API token=" & $sToken & ", User=" & $sUser & ", HttpCode=" & Last.Status)
  Else
    ' success or error - read the data
    vResponse = JSON.Decode(cPushoverData[Last.Tag])

    If vResponse.Exist("status") Then sStatus = vResponse["status"]
    If vResponse.Exist("user") Then sUserResp = vResponse["user"]
    If vResponse.Exist("device") Then sDeviceResp = vResponse["device"]
    If vResponse.Exist("errors") Then vErrors = vResponse["errors"]
    Try sError = vErrors[0]

    ' Status=1 is success, anything else is a faillure
    If sStatus = "1" Then
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Successfully send message (#" & Last.Tag & "). API token=" & $sToken & ", user=" & $sUser)
    Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Failed to send message (#" & Last.Tag & "). API token=" & $sToken & ", user=" & $sUser & ", Code=" & Last.Code & ", Error=" & sError)
    Endif
  Endif

Finally

  cPushoverData.Remove(Last.Tag)
  Last.Close

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text & " when sending Pushover message")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Error Raised for the Pushover message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPushoverMessage_Error()

  ' Return if it is sync request
  If Last.Async = False Then Return
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Error sending Pushover message: " & Last.Status)

  Try cPushoverData.Remove(Last.Tag)
  Try Last.Close

End
