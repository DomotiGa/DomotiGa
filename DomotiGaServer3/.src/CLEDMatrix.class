' Gambas class file

' Description:
' CLEDMatrix.class
' Display messages on a LED Matrix.

' Development Status:
' Just started. Tested with Conrad McCrypt AM03127 display.

' Links:
' http://www.conrad.nl/goto.php?artikel=590996

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "LEDMatrix"
Public PluginFriendlyName As String = "LED Matrix"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[LEDMatrix] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $bDebug As Boolean
Private $sDisplayID As String
Private $iDisplayColor As Integer
Private $iDisplaySpeed As Integer

Public hLEDMatrix As New SerialPort

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sDisplayID = cPl.Settings["displayid"]
  $iDisplayColor = cPl.Settings["color"]
  $iDisplaySpeed = cPl.Settings["speed"]
  $bDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  ' try to close the port
  Try hLEDMatrix.Close

  ' get a new one
  hLEDMatrix = New Serialport As "LEDMatrix"

  With hLEDMatrix
    .PortName = $sSerPort
    .Speed = 9600
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  Run()

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display startup text
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Run()

  ' DisplayMessage(sDisplayID, Application.Name & " Rocks!!")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DisplayMessage(sId As String, sMessage As String, Optional iColor As Integer, Optional iSpeed As Integer)

  Dim sColor As String[] = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "P", "Q", "R", "S"]
  Dim sSpeed As String[] = ["q", "a", "Q", "A"]

  If Not iColor Then iColor = $iDisplayColor
  If Not iSpeed Then iSpeed = $iDisplaySpeed

  SendCommand(sId, "<L1><PA><FE><M" & sSpeed[iSpeed] & "><WC><FE><C" & sColor[iColor] & ">" & sMessage)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set real time clock
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetClock(sId As String)

  Dim sWeek As String

  Select Case LCase(Format(Now, "ddd"))
    Case "mon"
      sWeek = "01"
    Case "tue"
      sWeek = "02"
    Case "wed"
      sWeek = "03"
    Case "thu"
      sWeek = "04"
    Case "fri"
      sWeek = "05"
    Case "sat"
      sWeek = "06"
    Case "sun"
      sWeek = "07"
  End Select

  ' YYWWMMDDHHmmSS
  SendCommand(sId, "<SC>" & Format(Now, "yy") & sWeek & Format(Now, "mmddhhnnss"))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' calculate checksum
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CalcChecksum(sData As String) As String

  Dim iChecksum As Byte = Asc(Left(sData, 1))
  Dim iCnt As Integer

  For iCnt = 2 To Len(sData)
    iChecksum = iChecksum Xor Asc(Mid(sData, iCnt, 1))
  Next

  Return Hex(iChecksum, 2)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command string to display
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendCommand(sId As String, sCmd As String)

  Dim sStr As String

  Try sId = Hex$(sId, 2)
  If Error Then sId = "00"

  sStr = "<ID" & sId & ">" & sCmd & CalcChecksum(sCmd) & "<E>"
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending string: " & sStr)

  Try Print #hLEDMatrix, sStr

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read display response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub LEDMatrix_Read()

  Dim sData As Byte

  sData = Read #hLEDMatrix As Byte
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received string: " & sData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hLEDMatrix.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)

End

