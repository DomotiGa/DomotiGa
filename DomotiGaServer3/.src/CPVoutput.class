' Gambas class file

' Description:
' CPVoutput.class
' Support for PVoutput related functions.

' Development Status:
' Development just started.

' Links:
' http://www.pvoutput.org/
' http://www.pvoutput.org/help.html#api-spec

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Pieter Blom in 2013.
' Added temperature and power usage support by Ron Klinkien.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "PVoutput"
Public PluginFriendlyName As String = "PVoutput"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Pieter Blom"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[PVoutput] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sApi As String
Private $sId As String
Private $iPushTime As Integer
Private $bDebug As Boolean
Private $iDeviceId As Integer
Private $sDeviceValue As String
Private $iTempDeviceId As Integer
Private $sTempDeviceValue As String
Private $iUsageDeviceId As Integer
Private $sUsageDeviceValue As String

Public hPost As New HttpClient As "hPost"
Public tPVoutput As Timer
Private sDownloadBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry, Optional bRun As Boolean = True)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sApi = cPl.Settings["api"]
  $sId = cPl.Settings["pvoutputid"]
  $iPushTime = cPl.Settings["pushtime"]
  $bDebug = cPl.Settings["debug"]
  $iDeviceId = cPl.Settings["deviceid"]
  $sDeviceValue = cPl.Settings["devicevalue"]
  $iTempDeviceId = cPl.Settings["tempdeviceid"]
  $sTempDeviceValue = cPl.Settings["tempdevicevalue"]
  $iUsageDeviceId = cPl.Settings["usagedeviceid"]
  $sUsageDeviceValue = cPl.Settings["usagedevicevalue"]

  ' Initialize 
  If bRun Then Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tPVoutput.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for PVoutput
  tPVoutput = New Timer As "tPVoutput"
  tPVoutput.Delay = $iPushTime * 1000 * 60 ' multiply for minutes
  tPVoutput.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPVoutput_Timer()

  UploadPVoutputData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create url string and upload it to the service
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UploadPVoutputData()

  Dim sContent As String

  sDownloadBuffer = ""

  ' if we are already uploading return
  If hPost.Status > 0 Then
    Main.WriteLog(LogLabel & "I'm already uploading data to PVoutput, skipping.")
    Return
  Endif

  ' create string
  sContent = CreatePVoutputData()

  ' use httpclient to post data to service
  hPost.URL = "http://pvoutput.org/service/r2/addstatus.jsp?" & sContent
  hPost.TimeOut = 10
  hPost.Async = True
  hPost.Get()

  If $bDebug Then Main.WriteDebugLog(LogLabel & hPost.URL)

End

Public Sub CreatePVoutputData() As String

  Dim sUrl As String = "key=" & $sApi & "&sid=" & $sId & "&d=" & Format$(Now, "yyyymmdd") & "&t=" & Format$(Now, "hh:nn")

  If $iDeviceId Then sUrl &= "&v2=" & Devices.GetCurrentValueForDevice($iDeviceId, $sDeviceValue)
  If $iTempDeviceId Then sUrl &= "&v5=" & Devices.GetCurrentValueForDevice($iTempDeviceId, $sTempDeviceValue)
  If $iUsageDeviceId Then sUrl &= "&v4=" & Devices.GetCurrentValueForDevice($iUsageDeviceId, $sUsageDeviceValue)

  Return sUrl

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch error
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Error()

  Main.WriteDebugLog(LogLabel & "PVoutput data post error.")

End

Public Sub hPost_Read()

  Dim sBuffer As String

  Read #Last, sBuffer, Lof(Last)
  sDownloadBuffer &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check http return code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Finished()

  Dim iCount As Integer

  ' select on http result code and display message
  Select hPost.Code
    Case 200
      Main.WriteLog(LogLabel & "Uploaded data to PVoutput. Response from server: " & sDownloadBuffer)
    Case 401
      Main.WriteLog(LogLabel & "Error authenticating while uploading data to PVoutput!")
    Case 404
      Main.WriteLog(LogLabel & "Error page not found while uploading data to PVoutput!")
    Case Else
      Main.WriteLog(LogLabel & "Unknown error occured while uploading data to PVoutput! HTTP= " & hPost.Code & ", Response from server: " & sDownloadBuffer)
  End Select

  ' if debug is on print all http headers
  If Not $bDebug Then Return
  For iCount = 0 To hPost.Headers.Count - 1
    Main.WriteDebugLog(LogLabel & Left(hPost.Headers[iCount], Len(hPost.Headers[iCount])))
  Next

End

