' Gambas class file

' Description:
' CPing.class
' Support for Network related devices.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Ping"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "Ping"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Ping] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iPollTime As Integer
Private $bDebug As Boolean

Public tPing As Timer
Private hPing As Process
Private cOutput As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  ' Initialize 
  Run()

  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tPing.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for Ping
  tPing = New Timer As "tPing"
  tPing.Delay = $iPollTime * 1000 ' multiply for seconds
  tPing.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPing_Timer()

  CheckPing()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices of type Ping and see if we can ping it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckPing()

  Dim rResult As Result

  ' get all devices with this devicetype
  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Ping Socket"))
  If rResult.Available Then
    If rResult.Count >= 1 Then
      For Each rResult
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Checking '" & rResult!name & "' with address '" & rResult!address & "'.")
        ' try to fetch their index page
        NetworkPing(rResult!id, rResult!address)
      Next
    Else
      Main.WriteLog(LogLabel & "No Network devices found in device table!")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' try to ping the Device to detect if it's up or down
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub NetworkPing(iId As Integer, sAddress As String)

  hPing = Exec ["ping", "-c2", sAddress] For Read As "Ping"
  hPing.Tag = iId
  cOutput.Add("", iId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read ping output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Ping_Read()

  Dim sBuffer As String
  Dim iId As Integer

  sBuffer = Read #Last, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and return value, 0 means ok, anything else is not reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Ping_Kill()

  Dim iDeviceId, iRc As Integer
  Dim sStatus, sOutput, sRTT As String

  iDeviceId = Last.Tag
  iRc = Last.Value

  If iDeviceId Then
    ' save ping output
    sOutput = cOutput[iDeviceId]
    cOutput.Remove(iDeviceId)

    Select Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iDeviceId))
      Case "Status AIBO"
        If iRc = 0 Then
          ' ping succesful
          sStatus = ("Awake")
        Else
          ' not reachable, unknown host etc.
          sStatus = ("Sleeping")
        Endif
      Case "Status On/Off"
        If iRc = 0 Then
          ' ping succesful
          sStatus = ("On")
        Else
          ' not reachable, unknown host etc.
          sStatus = ("Off")
        Endif
      Case "Status Up/Down"
        If iRc = 0 Then
          ' ping succesful
          sStatus = ("Up")
          sRTT = GetRTT(sOutput)
        Else
          ' not reachable, unknown host etc.
          sStatus = ("Down")
          sRTT = " "
        Endif
        Devices.ValueUpdateExt(iDeviceId, 2, sRTT)
    End Select

    ' debug output
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Device with id '" & iDeviceId & "' is '" & sStatus & "'.")
    ' find and update device
    Devices.CheckFirstSeen(iDeviceId)
    Devices.ValueUpdateExt(iDeviceId, 1, sStatus)
  Else
    Main.WriteDebugLog(LogLabel & "Returned invalid device id!")
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Parsing Ping Result: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' extract round trip time from ping output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GetRTT(sOutput As String) As String

  Dim sLine As String
  Dim aRTT As String[]

  For Each sLine In Split(sOutput, "\n")
    ' rtt min/avg/max/mdev = 31.733/31.733/31.733/0.000 ms
    If InStr(sLine, "rtt min/avg/max/mdev") Then
      aRTT = Scan(sLine, "rtt min/avg/max/mdev */*/*/*")
      If aRTT.Count = 4 Then Return aRTT[1]
    Endif
  Next

End
