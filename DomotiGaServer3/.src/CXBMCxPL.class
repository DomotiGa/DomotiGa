' Gambas class file

' Description:
' CXBMCxPL.class
' Connect to XBMC xPL interface via xPL protocol.

' Development Status:
' Works, needs some more testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PROPERTY RXAddress AS String
PROPERTY TXAddress AS String
PROPERTY XBMCDebug AS Boolean

PRIVATE sRXAddress AS String
PRIVATE sTXAddress AS String
PRIVATE bXBMCDebug AS Boolean

PRIVATE CONST VENDOR AS String = "domotiga-xpl"

PUBLIC SUB ProcessxPLMsg(oxPLMsg AS Object)

  DIM sDevice, sDeviceType, sType, sAddressType, sAddress, sValue, sValue2, sValue3, sValue4, sBattery, sCurrent, sLog, sMsgType AS String
  DIM iDeviceId AS Integer
  DIM aAddress AS String[]

  SELECT oxPLMsg.Schema
    CASE "hbeat.app", "hbeat.basic"
    CASE "media.mptrnspt"

      ' IF bXBMCDebug THEN Main.WriteDebugLog(("[XBMCxPL] Received player control message schema '" & oxPLMsg.Schema & "'"))
      ' sAddress = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "mp")
      ' sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      RETURN
    CASE "media.mpmedia"
      IF bXBMCDebug THEN Main.WriteDebugLog(("[XBMCxPL] Received media control message schema '" & oxPLMsg.Schema & "'"))
      sAddress = Main.hxPL.GetBodyValueFromKey(oxPLMsg, "mp")
      ' sValue = Main.Caps(Main.hxPL.GetBodyValueFromKey(oxPLMsg, "command"))
      ' sType = "AC"
    CASE ELSE
      IF bXBMCDebug THEN Main.WriteDebugLog(("[XBMCxPL] Received unsupported message schema '" & oxPLMsg.Schema & "'"))
  END SELECT

  IF oxPLMsg.Schema = "hbeat.app" OR IF oxPLMsg.Schema = "hbeat.basic" OR IF oxPLMsg.Schema = "hbeat.end" THEN
    IF bXBMCDebug THEN Main.WriteDebugLog(("[XBMCxPL] Got heartbeat msg of type '" & oxPLMsg.Schema & "' from '" & oxPLMsg.Source & "'"))
  ELSE
    ' find device id
    iDeviceId = Devices.Find(sAddress, Devices.FindInterface("XBMC xPL Interface"), oxPLMsg.Schema)
    ' update device
    IF iDeviceId THEN
      Devices.ValueUpdate(iDeviceId, sValue, sValue2, sValue3, sValue4)
    ENDIF
    'IF bXBMCDebug THEN Main.WriteDebugLog("[XBMCxPL] Device with address '" & sAddress & "' reported " & sValue)
  ENDIF
  oxPLMsg = NULL

END

PUBLIC SUB SendOSDBasic(sTarget AS String, sCommand AS String, sText AS String, OPTIONAL iDelay AS Integer)

  DIM sCmndMsg AS String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  DIM sOSDBasicMsg AS String = "osd.basic\n{\ncommand=" & sCommand

  IF iDelay THEN sOSDBasicMsg &= "\ndelay=" & iDelay
  IF sText THEN sOSDBasicMsg &= "\ntext=" & sText

  sOSDBasicMsg &= "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' osd.basic
  ' {
  '   command=clear|write|exlusive|release
  '   text=<text to display>
  '   delays=<seconds to display>
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sOSDBasicMsg)

END


PUBLIC SUB SendMediaBasic(sTarget AS String, sAddress AS String, sCommand AS String, OPTIONAL sParam AS String)

  DIM sCmndMsg AS String = "xpl-cmnd\n{\nhop=1\nsource=" & VENDOR & "." & System.Host & "\ntarget=" & IIf(Len(sTarget), sTarget, "*") & "\n}\n"
  DIM sMediaBasicMsg AS String = "media.basic\n{\ncommand=" & sCommand & "\nmp=" & sAddress

  SELECT CASE sCommand
    CASE "chapter"
      sMediaBasicMsg &= "\nchapter=" & sParam
    CASE "position"
      sMediaBasicMsg &= "\nposition=" & sParam
  END SELECT
  sMediaBasicMsg &= "\n}\n"

  ' xpl-cmnd
  ' {
  '   hop=1
  '   source=xpl-prog.house
  '   target=*
  ' }
  ' media.basic
  ' {
  '   command=play|stop|pause|record|forward|rewind|position|chapter|next|back
  '   mp=id
  ' }

  Main.hxPL.SendMessage(sCmndMsg & sMediaBasicMsg)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("XBMC Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB SendCommand(sAddress AS String, sCmd AS String)

  DIM iDeviceId AS Integer
  DIM sType AS String
  DIM aCommand, aParam AS String[]

  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("XBMC xPL Interface"))
  IF iDeviceId THEN
    sType = Devices.FindTypeForDevice(iDeviceId)
  ELSE
    RETURN
  ENDIF

  SELECT sType
    CASE "osd.basic"
      aCommand = Split(sCmd, " ")
      SELECT CASE UCase(aCommand[0])
        CASE "WRITE"
          aParam = Scan(sCmd, "write *")
          IF aParam.Count = 1
            SendOSDBasic(Main.hXBMCxPL.TXAddress, "write", aParam[0], 10)
          ELSE
            Main.WriteDebugLog(("[XBMCxPL] The '" & sCmd & "' command should be followed by a space and text!"))
          ENDIF
        CASE "CLEAR", "RELEASE", "EXCLUSIVE"
          SendOSDBasic(Main.hXBMCxPL.TXAddress, sCmd, "", 10)
        CASE ELSE
          Main.WriteDebugLog(("[XBMCxPL] The '" & sCmd & "' command is invalid for osd.basic!"))
      END SELECT
    CASE "media.basic"
      aCommand = Split(sCmd, " ")
      SELECT CASE UCase(aCommand[0])
        ' play|stop|pause|record|forward|rewind|position|chapter|next|back
        CASE "PLAY", "STOP", "PAUSE", "RECORD", "FORWARD", "REWIND", "NEXT", "BACK"
          SendMediaBasic(Main.hXBMCxPL.TXAddress, sAddress, sCmd)
        CASE "CHAPTER"
          aParam = Scan(sCmd, "chapter *")
          IF aParam.Count = 1
            SendMediaBasic(Main.hXBMCxPL.TXAddress, sAddress, "chapter", aParam[0])
          ELSE
            Main.WriteDebugLog(("[XBMCxPL] The '" & sCmd & "' command should be followed by a space and chapter number!"))
          ENDIF
        CASE "POSITION"
          aParam = Scan(sCmd, "position *")
          IF aParam.Count = 1
            SendMediaBasic(Main.hXBMCxPL.TXAddress, sAddress, "position", aParam[0])
          ELSE
            Main.WriteDebugLog(("[XBMCxPL] The '" & sCmd & "' command should be followed by a space and postion number, or inc dec!"))
          ENDIF
        CASE ELSE
          Main.WriteDebugLog(("[XBMCxPL] The '" & sCmd & "' command is invalid for media.basic!"))
      END SELECT
    DEFAULT
      Main.WriteDebugLog(("[XBMCxPL] The '" & sType & "' protocol is not supported by XBMC xPL code!"))
      RETURN
  END SELECT

END

' implement properties
PRIVATE FUNCTION RXAddress_Read() AS String

  RETURN sRXAddress

END

PRIVATE SUB RXAddress_Write(Value AS String)

  sRXAddress = Value

END

PRIVATE FUNCTION TXAddress_Read() AS String

  RETURN sTXAddress

END

PRIVATE SUB TXAddress_Write(Value AS String)

  sTXAddress = Value

END

PRIVATE FUNCTION XBMCDebug_Read() AS Boolean

  RETURN bXBMCDebug

END

PRIVATE SUB XBMCDebug_Write(Value AS Boolean)

  bXBMCDebug = Value

END
