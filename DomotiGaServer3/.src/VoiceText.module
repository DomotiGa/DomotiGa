' Gambas module file

' Description:
' VoiceText.module
' Support for VoiceText, Cepstral's Swift, espeak and picotts.

' Development Status:
' Not implemented completely, but it works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "VoiceText"
Public PluginFriendlyName As String = "VoiceText"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[VoiceText] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean ' enable TTS support
Private $sEngine As String ' currently only 'cepstral' and 'espeak' are supported
Private $sVoicesMale As String ' list of voices, first is default
Private $sVoicesFemale As String ' list of voices, first is default
Private $sPrefixCmd As String ' prefix command like 'padsp'
Private $bVoiceTextDebug As Boolean ' debug TTS

Private sOutput As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance 
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sEngine = cPl.Settings["engine"]
  $sVoicesMale = cPl.Settings["voicesmale"]
  $sVoicesFemale = cPl.Settings["voicesfemale"]
  $sPrefixCmd = cPl.Settings["prefixcmd"]
  $bVoiceTextDebug = cPl.Settings["debug"]

  ' Initialize 

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()



End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' speak text with voice
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speak(sText As String, Optional sSex As String) As Boolean

  Dim sVoiceSex As String

  ' audio mute is enabled
  If Main.GetGlobalVar("Mute") Then
    Main.WriteSpeakLog(("[Muted] '") & sText & "'")
  Else
    ' speak out loud
    Main.WriteSpeakLog("'" & sText & "'")
    If Main.bVoiceTextEnabled And Main.sVoiceTextEngine = "cepstral" Then
      If sSex Then
        Select Case LCase(sSex)
          Case "female"
            sVoiceSex = PickVoice(Main.sVoiceTextVoicesFemale)
          Case "male"
            sVoiceSex = PickVoice(Main.sVoiceTextVoicesMale)
          Case Else
            sVoiceSex = sSex
        End Select
      Else
        sVoiceSex = PickVoice(Main.sVoiceTextVoicesFemale)
      Endif

      ' Swift command-line synthesis program
      ' Version 5.1.0 of July 2008
      ' Copyright (c) 2000-2006, Cepstral LLC.

      ' Voice      | Version | Lic? | Gender | Age | Language         | Sample Rate
      ' -----------|---------|------|--------|-----|------------------|------------
      ' Linda      | 5.1.0   | Yes  | female | 25  | US English       | 16000 Hz
      ' Emily      | 5.1.0   | Yes  | female | 30  | US English       | 16000 Hz

      ' swift -n voice 'text to speak'

      If Not Main.sVoiceTextPrefixCmd Then
        Exec ["swift", "-n", sVoiceSex, "'" & sText & "'"] For Read As "Speaking"
      Else
        Exec [Main.sVoiceTextPrefixCmd, "swift", "-n", sVoiceSex, "'" & sText & "'"] For Read As "Speaking"
      Endif
    Else If Main.bVoiceTextEnabled And Main.sVoiceTextEngine = "espeak" Then
      ' espeak -v voice 'text to speak'
      If Not Main.sVoiceTextPrefixCmd Then
        Exec ["espeak", "-v", Main.sVoiceTextVoicesMale, "'" & sText & "'"] For Read As "Speaking"
      Else
        Exec [Main.sVoiceTextPrefixCmd, "espeak", "-v", Main.sVoiceTextVoicesMale, "'" & sText & "'"] For Read As "Speaking"
      Endif
    Else If Main.bVoiceTextEnabled And Main.sVoiceTextEngine = "picotts" Then
      ' pico2wave -l fr-FR -w test.wav "text to speak!"
      ' aplay test.wav
      If Not Main.sVoiceTextPrefixCmd Then
        Exec ["pico2wave", "-l", Main.sVoiceTextVoicesMale, "-w", "/tmp/pico.wav", "'" & sText & "'"] Wait For Read As "Speaking"
        Exec ["aplay", "/tmp/pico.wav"]
      Else
        'EXEC [Main.sVoiceTextPrefixCmd, "pico2wave", "-l", "fr-FR", "-w", "/tmp/pico.wav", "'" & sText & "'", "&&", "aplay", "/tmp/pico.wav", "&&", "rm", "-f", "/tmp/pico.wav"] FOR READ AS "Speaking"
        Exec [Main.sVoiceTextPrefixCmd, "pico2wave", "-l", Main.sVoiceTextVoicesMale, "-w", "/tmp/pico.wav", "'" & sText & "'"] Wait For Read As "Speaking"
        Exec ["aplay", "/tmp/pico.wav"]
      Endif
    Endif
  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speaking_Read()

  Dim sLine As String

  sLine = Read #Last, -256
  sOutput &= sLine

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speaking_Error(sString As String)

  If Main.bVoiceTextDebug Then Main.WriteDebugLog(LogLabel & Replace$(sString, "\n", ""))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' speak command finished
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Speaking_Kill()

  If Main.bVoiceTextDebug And sOutput Then Main.WriteDebugLog(LogLabel & sOutput)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' select voice to use
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function PickVoice(sVoices As String) As String

  Dim aVoices As String[]

  ' split them up if more than one voice is specified
  aVoices = Split(sVoices, ",")
  If aVoices.Count > 1 Then
    ' pick a random one ourselfs
    Return aVoices[Rnd(aVoices.Count)]
  Else
    Return sVoices
  Endif

End
