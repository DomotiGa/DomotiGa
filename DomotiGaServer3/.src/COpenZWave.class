' Gambas class file

' Description:
' COpenZWave.class
' Support for Z-Wave protocol through the OpenZWave library
' www.openzwave.com / code.google.com/p/open-zwave

' Development Status:
' Finished

' Credits:
' Thanks to Willem-Jan from ezHome.nl, Enver from Tane.nl and Jaren for the open-zwave wrapper code.
' The code is rewritten by Alexander Kuiper

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "OpenZWave"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "OpenZWave Z-Wave"
Public PluginVersion As String = "2.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1
Public PluginRunTask As Boolean = True

Public KeyName As String
Public LogLabel As String = "[OpenZWave] "
Public InterfaceId As Integer = 0
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $bDebug As Boolean
Private $iPollTime As Integer
Private $sPollTimeListening As String
Private $bEnablePollListening As Boolean
Private $sPollTimeSleeping As String
Private $bEnablePollSleeping As Boolean
Private $sUpdateNeighbor As String
Private $bEnableUpdateNeighbor As Boolean

Public iHomeId As Integer
Public iControllerId As Integer
Public sControllerType As String = "Unknown"
Public bAllQueried As Boolean
Public sAPIVersion As String
Public sSDKVersion As String

Public hJSONRPC As JsonRpcServer
Private ZWaveNetwork As New Collection
Private $sCurrentMethod As String

' Timer variables to cancel certain commands/states in open-zwave
Public tSerialConnected As Timer
Public iSerialConnected As Integer
Public tControllerCommand As Timer
Public tUserCodeEnroll As Timer
Public tZWaveLED As New Timer
Public tOZWKeepAlive As New Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Internal structures
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Struct OpenZWaveEntry
  NodeId As Integer
  Basic As Integer
  Generic As Integer
  Specific As Integer
  DeviceType As String
  Listening As Boolean
  FrequentListening As Boolean
  Beaming As Boolean
  Routing As Boolean
  Security As Boolean
  MaxBaudRate As Integer
  Version As Integer
  Instances As Collection
End Struct

Public Struct OpenZWaveEntryValue
  Values As Collection
End Struct

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Version - needs to match the domozwave library version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public sLibDomoZwave As String = "DomoZWave version 2.10"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' The wrapper for the OpenZWave library
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Library "libdomozwave"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' External library call definitions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Initialize and destroy the wrapper - no HomeId required
Private Extern DomoZWave_Init(deviceConfigPath As String, zwConfigPath As String, logname As String, enableInitLog As Boolean)
Private Extern DomoZWave_Destroy()

' Enable or disable logging (OZW_Log.txt) - after the initial Init one
Private Extern DomoZWave_Log(logging As Boolean)

' Add or remove SerialPorts
Private Extern DomoZWave_AddSerialPort(serialPort As String, jsonrpcurl As String, logging As Boolean)
Private Extern DomoZWave_RemoveSerialPort(serialPort As String)

' Write zwcfg*xml, normally not needed
Private Extern DomoZWave_WriteConfig(home As Integer)

' Retrieve wrapper and controller information
Private Extern DomoZWave_Version() As String
Private Extern DomoZWave_OZWVersion() As String
Private Extern DomoZWave_GetLibraryVersion(home As Integer) As String
Private Extern DomoZWave_GetLibraryTypeName(home As Integer) As String
Private Extern DomoZWave_ControllerType(home As Integer) As String

' Enable/disable polling of the devices by open-zwave
Private Extern DomoZWave_GetPollInterval() As Integer
Private Extern DomoZWave_SetPollInterval(msecinterval As Integer, intervalbetweenpolls As Boolean)
Private Extern DomoZWave_EnablePolling(home As Integer, node As Integer, polltime As Integer)
Private Extern DomoZWave_DisablePolling(home As Integer, node As Integer)

' Retrieve or set node information
Private Extern DomoZWave_GetNodeQueryStage(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeManufacturerName(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeProductName(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeName(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeLocation(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeManufacturerId(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeProductType(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeProductId(home As Integer, node As Integer) As String
Private Extern DomoZWave_SetNodeManufacturerName(home As Integer, node As Integer, manufacturerName As String)
Private Extern DomoZWave_SetNodeProductName(home As Integer, node As Integer, productName As String)
Private Extern DomoZWave_SetNodeName(home As Integer, node As Integer, nodeName As String)
Private Extern DomoZWave_SetNodeLocation(home As Integer, node As Integer, nodeLocation As String)
Private Extern DomoZWave_GetNodeLibraryVersion(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeProtocolVersion(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeApplicationVersion(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeLastSeen(home As Integer, node As Integer) As Integer
Private Extern DomoZWave_GetNodeStatus(home As Integer, node As Integer) As String

' Request or update node state
Private Extern DomoZWave_RequestNodeState(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_RequestNodeDynamic(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_RequestNodeNeighborUpdate(home As Integer, node As Integer, addqueue As Boolean) As Boolean
Private Extern DomoZWave_RefreshNodeInfo(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_RequestNodeVersion(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_RequestNodeMeter(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_SetValue(home As Integer, node As Integer, instance As Integer, value As Integer) As Boolean

' Request or update node configuration
Private Extern DomoZWave_SetConfigParam(home As Integer, node As Integer, param As Integer, value As Integer, size As Integer) As Boolean
Private Extern DomoZWave_SetConfigParamList(home As Integer, node As Integer, param As Integer, value As String) As Boolean
Private Extern DomoZWave_RequestConfigParam(home As Integer, node As Integer, param As Integer)
Private Extern DomoZWave_RequestAllConfigParams(home As Integer, node As Integer)
Private Extern DomoZWave_GetNodeConfig(home As Integer, node As Integer) As String

' Retrieve the node neighborhood list or commandclass list
Private Extern DomoZWave_GetNodeNeighborsList(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetNodeCommandClassList(home As Integer, node As Integer, Optional instance As Integer) As String

' Request or update the group/association of a node
Private Extern DomoZWave_GetNodeGroup(home As Integer, node As Integer) As String
Private Extern DomoZWave_AddAssociation(home As Integer, node As Integer, group As Integer, othernode As Integer)
Private Extern DomoZWave_RemoveAssociation(home As Integer, node As Integer, group As Integer, othernode As Integer)

' Request or set UserCode of a node
Private Extern DomoZWave_GetNodeUserCode(home As Integer, node As Integer) As String
Private Extern DomoZWave_SetNodeUserCodeStart(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_SetNodeUserCodeStop(home As Integer) As Boolean
Private Extern DomoZWave_SetNodeUserCodeRemove(home As Integer, node As Integer, usercode As Integer) As Boolean

' Request or set Wake-Up of a node
Private Extern DomoZWave_GetNodeWakeUpInterval(home As Integer, node As Integer) As Long
Private Extern DomoZWave_SetNodeWakeUpInterval(home As Integer, node As Integer, interval As Integer) As Boolean

' Soft or hard reset the controller
Private Extern DomoZWave_ControllerSoftReset(home As Integer)
Private Extern DomoZWave_ControllerHardReset(home As Integer)

' Controller commands
Private Extern DomoZWave_CancelControllerCommand(home As Integer) As Boolean
Private Extern DomoZWave_AddDevice(home As Integer) As Boolean
Private Extern DomoZWave_RemoveDevice(home As Integer) As Boolean
Private Extern DomoZWave_AssignReturnRoute(home As Integer, node As Integer, destnode As Integer) As Boolean
Private Extern DomoZWave_DeleteAllReturnRoutes(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_RequestNetworkUpdateFromPrimary(home As Integer) As Boolean
Private Extern DomoZWave_CreateNewPrimary() As Boolean
Private Extern DomoZWave_TransferPrimaryRole() As Boolean
Private Extern DomoZWave_HasNodeFailed(home As Integer, node As Integer, Optional addqueue As Boolean = False) As Boolean
Private Extern DomoZWave_RemoveFailedNode(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_ReplaceFailedNode(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_SendNodeInformation(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_ReplicationSend(home As Integer, node As Integer) As Boolean
Private Extern DomoZWave_HealNetworkNode(home As Integer, node As Integer, doRR As Boolean)
Private Extern DomoZWave_HealNetwork(home As Integer, doRR As Boolean)
Private Extern DomoZWave_TestNetworkNode(home As Integer, node As Integer, count As Integer)
Private Extern DomoZWave_TestNetwork(home As Integer, count As Integer)

' Statistical information
Private Extern DomoZWave_GetDriverStatistics(home As Integer) As String
Private Extern DomoZWave_GetNodeStatistics(home As Integer, node As Integer) As String
Private Extern DomoZWave_GetSendQueueCount(home As Integer) As Long

' Make certain information readable - no HomeId required
Private Extern DomoZWave_CommandClassIdName(class_value As Integer) As String
Private Extern DomoZWave_GenreIdName(genre As Integer) As String
Private Extern DomoZWave_BasicTypeName(basictype As Integer) As String
Private Extern DomoZWave_GenericTypeName(generictype As Integer) As String
Private Extern DomoZWave_SpecificTypeName(generictype As Integer, specifictype As Integer) As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  Dim bLibDebug As Boolean
  Dim iJsonRpcPort As Integer
  Dim sVersion As String

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $bDebug = cPl.Settings["debug"]
  $iPollTime = cPl.Settings["polltime"]
  $sPollTimeListening = cPl.Settings["polltimelistening"]
  $bEnablePollListening = cPl.Settings["enablepolllistening"]
  $sPollTimeSleeping = cPl.Settings["polltimesleeping"]
  $bEnablePollSleeping = cPl.Settings["enablepollsleeping"]
  $sUpdateNeighbor = cPl.Settings["updateneighbor"]
  $bEnableUpdateNeighbor = cPl.Settings["enableupdateneighbor"]

  ' Retrieve our Interface Id, we don't have to retrieve it more then once
  InterfaceId = Devices.FindInterface("Z-Wave Controller")
  If InterfaceId = 0 Then
    Main.WriteLog(LogLabel & "ERROR: Required InterfaceId for 'Z-Wave Controller' can't be retrieved from the database")

    IsRunning = False
    ErrorText = "Required InterfaceId for 'Z-Wave Controller' can't be retrieved from the database"
    Return
  Endif

  ' Re-Initialize information
  iHomeId = 0
  iControllerId = 0
  bAllQueried = False
  ErrorText = "Device Not Connected"

  ' Initialize the ZWaveController count if not exist
  If Not Plugin.GetPluginObject("OpenZWave", 0).Settings.Exist("ZWaveControllers") Then
    Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] = 0
  Endif

  ' Find available JSON-RPC port - every instance uses their own port. It is unlikely anybody has more than 1 controller
  iJsonRpcPort = StartJSONRPC()

  If iJsonRpcPort = 0 Then
    Main.WriteLog(LogLabel & "ERROR: Required OpenZWave JSON-RPC Server can not be started, no ports available above 16000")

    IsRunning = False
    ErrorText = "Net Not Active, unable to start a JSON-RPC on port 16000-65535"
    Return
  Endif

  If Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] = 0 Then

    ' Check if we a "libdebug" settings, that is used during StartAll
    If cPl.Settings.Exist("libdebug") Then
      bLibDebug = cPl.Settings["libdebug"]
    Else
      bLibDebug = $bDebug
    Endif

    ' Check if the library matches the required version
    sVersion = Version()
    If sLibDomoZwave <> sVersion Then
      Select sVersion
        Case ""
          Main.Message_Error(LogLabel, ("The OpenZWave wrapper library looks to be invalid\n\nPlease recompile as described on page:\nhttp://www.domotiga.nl/projects/domotiga/wiki/Z-Wave_OpenZWave"))
          Main.WriteLog(LogLabel & "ERROR: interface is disabled, because of a version mismatch")
        Case "-1"
          Main.Message_Error(LogLabel, ("The OpenZWave wrapper library cannot be loaded\n\nPlease check page:\nhttp://www.domotiga.nl/projects/domotiga/wiki/Z-Wave_OpenZWave"))
          Main.WriteLog(LogLabel & "ERROR: interface is disabled, because of missing \"libdomozwave.so\" library")
        Default
          Main.Message_Error(LogLabel, ("The OpenZWave wrapper version doesn't match the required version\n\nRequired by DomotiGa: " & sLibDomoZwave & "\nOpenZWave wrapper: " & sVersion & "\n\nPlease recompile as described on page:\nhttp://www.domotiga.nl/projects/domotiga/wiki/Z-Wave_OpenZWave"))
          Main.WriteLog(LogLabel & "ERROR: interface is disabled, because of a version mismatch")
      End Select

      Return
    Endif

    If $bDebug Then Main.WriteDebugLog(LogLabel & "Initialising open-zwave wrapper.")
    If $bDebug Then Main.WriteDebugLog(LogLabel & "" & DomoZWave_Version())
    If $bDebug Then Main.WriteDebugLog(LogLabel & "" & DomoZWave_OZWVersion())

    If Not Exist(Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/") Then
      Main.WriteLog(LogLabel & "ERROR: interface is disabled, the open-zwave configuration directory is missing (" & Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/" & ")")
      Return
    Endif

    ' We need to call OpenZWave_Init
    DomoZWave_Init(Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/", Main.sBaseDir &/ "wrappers/domozwave/", Main.sBaseDir &/ "logs" &/ Main.sDomoZWaveFile, bLibDebug)
  Endif

  ' Add +1 to ZWaveControllers count
  Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] = Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] + 1

  ' Enable or disable the OZW_Log.txt - it is a global settings, can't do it per instance
  'EnableDisableLog($bDebug)

  ' Add the SerialPort to the openzwave library
  DomoZWave_AddSerialPort($sSerPort, "http://localhost:" & iJsonRpcPort, $bDebug)

  ' Start Timer to check if serial is connected
  tSerialConnected = New Timer As "tSerialConnected"
  tSerialConnected.Delay = 500
  tSerialConnected.Start
  iSerialConnected = 1

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  ' Try to stop timer first
  Try tSerialConnected.Stop

  ' Try to remove the SerialPort from the openzwave library
  Try DomoZWave_RemoveSerialPort($sSerPort)

  ' Stop the OpenZWave JSON-RPC server instance
  StopJSONRPC()

  ' Substract the instance from the current list. It can become negative
  Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] = Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] - 1

  ' Don't call destroy if we have a negative count, this normally points to an invalid openzwave version
  If Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] = 0 Then
    Try DomoZWave_Destroy()
  Endif

  ' If we are the last instance, report the destroying in the debug mode
  If Plugin.GetPluginObject("OpenZWave", 0).Settings["ZWaveControllers"] <= 0 Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Destroyed open-zwave wrapper.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run zwave network related tasks
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunTask()

  ' check if neighbor needs updating
  If $bEnableUpdateNeighbor Then
    If Events.TimeCron($sUpdateNeighbor) Then

      If Not bAllQueried Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "RunTask Update Neighbors can't start, because the Open Z-Wave library isn't fully initialized.")
        Return
      Endif

      HealNetwork()
    Endif
  Endif

  ' check if listening nodes needs polling
  If $bEnablePollListening Then
    If Events.TimeCron($sPollTimeListening) Then

      If Not bAllQueried Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "RunTask Poll Listening can't start, because the Open Z-Wave library isn't fully initialized.")
        Return
      Endif

      RequestNodeDynamicReport(0)
    Endif
  Endif

  ' check if sleeping nodes needs polling
  If $bEnablePollSleeping Then
    If Events.TimeCron($sPollTimeSleeping) Then

      If Not bAllQueried Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "RunTask Poll Sleeping can't start, because the Open Z-Wave library isn't fully initialized.")
        Return
      Endif

      RequestNodeDynamicReport(0, False)
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sNode As String
  Dim sInstance As String
  Dim aAddr As New String[]
  Dim iValue As Integer

  ' address format 8:2, for instance 2 of node 8
  aAddr = Scan(sAddress, "*:*")
  If aAddr.Count = 2 Then
    sNode = aAddr[0]
    sInstance = aAddr[1]
  Else
    sNode = sAddress
    sInstance = 1 ' no instance specified, use first
  Endif

  ' Set value to unknown
  iValue = -1

  ' Change to uppercase
  sCmd = UCase(sCmd)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending command " & sCmd & " to address " & sAddress & ".")

  If sCmd = "OFF" Then
    iValue = 0
  Else If sCmd = "ON" Then
    iValue = 255
  Else If InStr(sCmd, "DIM ") Then
    Try iValue = Val(Replace(sCmd, "DIM ", ""))
  Else If InStr(sCmd, "SP ") Then
    ' Convert the decimal number to an integer
    Try iValue = CFloat(Trim(Replace(Replace(sCmd, "SP ", ""), ",", "."))) * 1000
  Endif

  If iValue >= 0 Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Set value for node " & sNode & " and instance " & sInstance & " to " & iValue)
    DomoZWave_SetValue(iHomeId, sNode, sInstance, iValue)
  Else
    Main.WriteDebugLog(LogLabel & "Only DIM, ON/OFF and SP commands are supported!")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' SetValue of the Z-Wave device, no entry in devices table is required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetValue(iNodeId As Integer, iInstance As Integer, iValue As Integer)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Set value for node " & iNodeId & " and instance " & iInstance & " to " & iValue)
  DomoZWave_SetValue(iHomeId, iNodeId, iInstance, iValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request or update node basic state
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub RequestType(sType As String, iNodeId As Integer, bListening As Boolean, bDisablePoll As Boolean) As Boolean

  Dim cNode As Object
  Dim vVar As Variant
  Dim aNodes As New Integer[]
  Dim iCurrent As Integer
  Dim sLog1 As String
  Dim sLog2 As String

  Select sType
    Case "Basic"
      sLog1 = "basic values"
      sLog2 = "basic report"
    Case "Dynamic"
      sLog1 = "dynamic values"
      sLog2 = "dynamic report"
    Case "Version"
      sLog1 = "version values"
      sLog2 = "version information"
    Case "Meter"
      sLog1 = "meter values"
      sLog2 = "meter report"
    Case "NodeInfo"
      sLog1 = "node infos"
      sLog2 = "node info"
    Case "Neighbor"
      sLog1 = "neighborhood"
      sLog2 = "neighborhood info"
  End Select

  If iNodeId = 0 Then

    ' Go through the node list and selected the nodes
    For Each vVar In ZWaveNetwork

      ' Map it on our specific entry
      cNode = vVar

      ' We can only poll the complete device, not the instances individually
      ' Also we should exclude (static) controllers
      If cNode.Basic >= 3 Then
        If cNode.Listening = bListening Then aNodes.Add(cNode.NodeId)
      Endif

    Next

    If $bDebug Then Main.WriteDebugLog(LogLabel & "Trigger " & IIf(bListening, "listening", "sleeping") & " nodes to update their " & sLog1 & ".")
  Else
    ' Just add the 1 node
    aNodes.Add(iNodeId)
  Endif

  ' Sort the nodes numeric
  aNodes.Sort()

  If aNodes.Count >= 1 Then
    For Each iCurrent In aNodes
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Requesting " & sLog2 & " for node id " & iCurrent & ".")

      ' We can also disable polling of certain devices
      If bDisablePoll Then
        If Devices.FindOpenZWavePollForDevice(Instance, iCurrent) Then Continue
      Endif

      Select sType
        Case "Basic"
          DomoZWave_RequestNodeState(iHomeId, iCurrent)
        Case "Dynamic"
          DomoZWave_RequestNodeDynamic(iHomeId, iCurrent)
        Case "Version"
          DomoZWave_RequestNodeVersion(iHomeId, iCurrent)
        Case "Meter"
          DomoZWave_RequestNodeMeter(iHomeId, iCurrent)
        Case "NodeInfo"
          DomoZWave_RefreshNodeInfo(iHomeId, iCurrent)
        Case "Neighbor"
          DomoZWave_RequestNodeNeighborUpdate(iHomeId, iCurrent, True)
      End Select
    Next
  Endif

  Return True

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request basic node values, normally only On/Off/Dim
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestBasicReport(iNodeId As Integer, Optional bListening As Boolean = True) As Boolean

  Return RequestType("Basic", iNodeId, bListening, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request dynamic values, normally everything like On/Off/Dim/kWh/Watt/etc
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestNodeDynamicReport(iNodeId As Integer, Optional bListening As Boolean = True) As Boolean

  Return RequestType("Dynamic", iNodeId, bListening, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Request node version information, to retrieve application/api versions. Only needed once
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestNodeVersionReport(iNodeId As Integer, Optional bListening As Boolean = True) As Boolean

  Return RequestType("Version", iNodeId, bListening, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestNodeMeterReport(iNodeId As Integer, Optional bListening As Boolean = True) As Boolean

  Return RequestType("Meter", iNodeId, bListening, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RefreshNodeInfo(iNodeId As Integer, Optional bListening As Boolean = True) As Boolean

  Return RequestType("NodeInfo", iNodeId, bListening, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestNodeNeighborUpdate(iNodeId As Integer, Optional bListening As Boolean = True) As Boolean

  Return RequestType("Neighbor", iNodeId, bListening, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetConfigParam(iNodeId As Integer, iParam As Integer, iValue As Integer, Optional iSize As Integer = 2)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Set config param " & iParam & " to value " & iValue & " for node id " & iNodeId & ", size is " & iSize & ".")
  DomoZWave_SetConfigParam(iHomeId, iNodeId, iParam, iValue, iSize)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetConfigParamList(iNodeId As Integer, iParam As Integer, sValue As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Set config param List " & iParam & " to value \"" & sValue & "\" for node id " & iNodeId & ".")
  DomoZWave_SetConfigParamList(iHomeId, iNodeId, iParam, sValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestConfigParam(iNodeId As Integer, iParam As Integer)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Get config param " & iParam & " for node id " & iNodeId & ".")
  DomoZWave_RequestConfigParam(iHomeId, iNodeId, iParam)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RequestAllConfigParams(iNodeId As Integer)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Requesting all config params for node id " & iNodeId & ".")
  DomoZWave_RequestAllConfigParams(iHomeId, iNodeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve the node neighborhood list or commandclass list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetNodeNeighborsList(iNodeId As Integer) As String

  Dim NList As String

  'IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Requesting neighborslist for node id " & iNodeId & ".")
  NList = DomoZWave_GetNodeNeighborsList(iHomeId, iNodeId)

  ' Replace the "|" with ", " to make it more human readable
  Return Replace$(NList, "|", ", ")
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetNodeCommandClassList(iNodeId As Integer, Optional iInstance As Integer = 0) As String

  Dim NList As String

  'IF $bDebug THEN Main.WriteDebugLog(LogLabel & "Requesting commandclasslist for node id " & iNodeId & IIf(Instance >= 1, " instance " & Instance, "") & ".")
  NList = DomoZWave_GetNodeCommandClassList(iHomeId, iNodeId, iInstance)

  ' Replace the "COMMAND_CLASS_", because it is in each value (makes the string too long)
  NList = Replace$(NList, "COMMAND_CLASS_", "")
  ' Replace the "|" with ", " to make it more human readable
  Return Replace$(NList, "|", ", ")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub AddAssociation(iNodeId As Integer, iAssociationGroup As Integer, iAssociationNode As Integer)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Add association node id " & iNodeId & " between group " & iAssociationGroup & " and node " & iAssociationNode & ".")
  DomoZWave_AddAssociation(iHomeId, iNodeId, iAssociationGroup, iAssociationNode)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RemoveAssociation(iNodeId As Integer, iAssociationGroup As Integer, iAssociationNode As Integer)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Remove association node id " & iNodeId & " between group " & iAssociationGroup & " and node " & iAssociationNode & ".")
  DomoZWave_RemoveAssociation(iHomeId, iNodeId, iAssociationGroup, iAssociationNode)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetNodeUserCodeStart(iNodeId As Integer) As Boolean

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Start UserCode enrollment for homeid=0x" & Right(Hex(iHomeId), 8) & ", nodeid=" & iNodeId)
  Try tUserCodeEnroll.Stop
  tUserCodeEnroll = New Timer As "tUserCodeEnroll"
  tUserCodeEnroll.Delay = 30000
  tUserCodeEnroll.Start

  Return DomoZWave_SetNodeUserCodeStart(iHomeId, iNodeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetNodeUserCodeStop() As Boolean

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Stop UserCode enrollment for homeid=0x" & Right(Hex(iHomeId), 8) & " (30 sec timer expired)")
  tUserCodeEnroll.Stop
  Return DomoZWave_SetNodeUserCodeStop(iHomeId)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tUserCodeEnroll_Timer()

  SetNodeUserCodeStop()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetNodeUserCodeRemove(iNodeId As Integer, UserCode As Integer)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Remove UserCode for homeid=0x" & Right(Hex(iHomeId), 8) & ", nodeid=" & iNodeId & ", usercode=" & UserCode)
  DomoZWave_SetNodeUserCodeRemove(iHomeId, iNodeId, UserCode)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Wake-Up Interval
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetNodeWakeUpInterval(iNodeId As Integer) As Integer

  Return DomoZWave_GetNodeWakeUpInterval(iHomeId, iNodeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetNodeWakeUpInterval(iNodeId As Integer, Interval As Integer) As Boolean

  If $bDebug Then Main.WriteDebugLog(LogLabel & "homeid=0x" & Right(Hex(iHomeId), 8) & ", nodeid=" & iNodeId & ", Wake-Up Interval=" & Interval & " seconds changed")
  Return DomoZWave_SetNodeWakeUpInterval(iHomeId, iNodeId, Interval)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Soft or hard reset the controller
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ControllerSoftReset()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Controller will be Soft Reset for homeid=0x" & Right(Hex(iHomeId), 8) & " (no data will be lost)")
  DomoZWave_ControllerSoftReset(iHomeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ControllerHardReset()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Controller will be HARD Reset for homeid=0x" & Right(Hex(iHomeId), 8) & " (*ALL* data will be lost)")
  DomoZWave_ControllerHardReset(iHomeId)

  ' Remove the instance information and just add the serialport, it will be automatically repopulated
  ZWaveNetwork.Clear()

  ' Finally - reset homeid, controllerid
  iHomeId = 0
  iControllerId = 0
  bAllQueried = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Controller commands
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CancelControllerCommand() As Boolean

  Dim bResult As Boolean

  ' Try to stop timer first
  Try tControllerCommand.Stop

  bResult = DomoZWave_CancelControllerCommand(iHomeId)

  If bResult Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Cancelling controller command")
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Cancelling controller command, controller was already in normal operation mode")
  Endif

  Return bResult

End

Public Sub IncludeDevice() As Boolean

  Dim bResult As Boolean

  ' First we execute the command
  ' If True == Command succeeded
  ' If False == Command failed (most likely controller is already in an add/remove mode)
  bResult = DomoZWave_AddDevice(iHomeId)

  If bResult Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Begin add device, press button on device to add!")

    ' Start our 30sec timer - we *need* to put it in COpenZWave.class, because the Z-Wave Commander 
    ' closing can resulting in "hanging" of the controller
    tControllerCommand = Null
    tControllerCommand = New Timer As "tControllerCommand"
    tControllerCommand.Delay = 30000
    tControllerCommand.Start
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Begin add device, controller already in add/remove mode, press cancel first")
  Endif

  Return bResult

End

Public Sub ExcludeDevice() As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_RemoveDevice(iHomeId)

  If bResult Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Begin remove device, press button on device to remove!")

    ' Start our 30sec timer
    Try tControllerCommand.Stop
    tControllerCommand = New Timer As "tControllerCommand"
    tControllerCommand.Delay = 30000
    tControllerCommand.Start
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Begin remove device, controller already in add/remove mode, press cancel first")
  Endif

  Return bResult

End

Public Sub tControllerCommand_Timer()

  tControllerCommand.Stop
  CancelControllerCommand()

End

Public Sub RequestNetworkUpdate()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Requesting network update.")
  DomoZWave_RequestNetworkUpdateFromPrimary()

End

Public Sub HasNodeFailed(iNodeId As Integer) As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_HasNodeFailed(iHomeId, iNodeId)

  If bResult Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Check if node has failed, call X to check the response")
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Check if node has failed can't be executed. The controller isn't in normal mode")
  Endif

End

Public Sub RemoveFailedNode(iNodeId As Integer) As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_RemoveFailedNode(iHomeId, iNodeId)

  If bResult Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Remove failed node executed (only works if the node is on the failed list)")
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Remove failed node can't be executed. The controller isn't in normal mode")
  Endif

End

Public Sub ReplaceFailedNode(iNodeId As Integer) As Boolean

  Dim bResult As Boolean

  bResult = DomoZWave_ReplaceFailedNode(iHomeId, iNodeId)

  If bResult Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Replace failed node executed, press button the new node now (only works if the node is on the failed list)")
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Replace failed node, can't be executed. The controller isn't in normal mode")
  Endif

End

Public Sub HealNetwork()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Healing network")
  DomoZWave_HealNetwork(iHomeId, False)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Make certain information readable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CommandClassIdName(class_value As Integer) As String

  Return DomoZWave_CommandClassIdName(class_value)

End

Public Sub GenreIdName(genre As Integer) As String

  Return DomoZWave_GenreIdName(genre)

End

Public Sub GetNodeQueryStage(iNodeId As Integer) As String

  Return DomoZWave_GetNodeQueryStage(iHomeId, iNodeId)

End

Public Sub GetNodeManufacturerName(iNodeId As Integer) As String

  Return DomoZWave_GetNodeManufacturerName(iHomeId, iNodeId)

End

Public Sub GetNodeProductName(iNodeId As Integer) As String

  Return DomoZWave_GetNodeProductName(iHomeId, iNodeId)

End

Public Sub GetNodeName(iNodeId As Integer) As String

  Return DomoZWave_GetNodeName(iHomeId, iNodeId)

End

Public Sub GetNodeLocation(iNodeId As Integer) As String

  Return DomoZWave_GetNodeLocation(iHomeId, iNodeId)

End

Public Sub GetNodeLibraryVersion(iNodeId As Integer) As String

  Return DomoZWave_GetNodeLibraryVersion(iHomeId, iNodeId)

End

Public Sub GetNodeProtocolVersion(iNodeId As Integer) As String

  Return DomoZWave_GetNodeProtocolVersion(iHomeId, iNodeId)

End

Public Sub GetNodeApplicationVersion(iNodeId As Integer) As String

  Return DomoZWave_GetNodeApplicationVersion(iHomeId, iNodeId)

End

Public Sub GetNodeLastSeen(iNodeId As Integer) As String

  Dim iLastSeen As Integer
 
  If iControllerId = iNodeId Then
    Return ("N/A")
  Endif

  iLastSeen = DomoZWave_GetNodeLastSeen(iHomeId, iNodeId)
  If iLastSeen >= 1 Then
    Return DateAdd(CDate("1/1/1970"), gb.Second, iLastSeen + CInt(Main.fAstroAutoTimezone * 3600))
  Else
    Return ("Never")
  Endif

End

Public Sub GetNodeStatus(iNodeId As Integer) As String

  Return DomoZWave_GetNodeStatus(iHomeId, iNodeId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset led status in main status bar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tZWaveLED_Timer()

  Main.ControlLed("ZWave", "Off")
  tZWaveLED.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetHomeId() As Integer

  Return iHomeId

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetControllerId() As Integer
 
  Return iControllerId

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetControllerType() As String

  Return sControllerType

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the API version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetAPIVersion() As String

  Return sAPIVersion

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return the SDK version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetSDKVersion() As String

  Return sSDKVersion

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get the Open-ZWave wrapper version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetWrapperVersion() As String

  Dim sVersion As String

  Try sVersion = DomoZWave_Version()
  If Error Then sVersion = "UNKNOWN"
  Return sVersion

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get the Open-ZWave library version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetOZWVersion() As String

  Dim sVersion As String

  Try sVersion = DomoZWave_OZWVersion()
  If Error Then sVersion = "UNKNOWN"
  Return sVersion

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Timer to report if we couldn't connect to the Z-Wave controller the last 15 seconds
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tSerialConnected_Timer()

  If iHomeId <> 0 Then
    tSerialConnected.Stop
  Else
    If (iSerialConnected * tSerialConnected.Delay) >= 15000 Then
      tSerialConnected.Stop
      Main.WriteLog(LogLabel & "ERROR: serial interface FAILED to connect to port " & $sSerPort & " (retrying)")
    Endif
  Endif

  iSerialConnected = iSerialConnected + 1

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieves the OpenZWave library version. If directly calling
' the DomoZWave variant, it can cause a signal 11
' "" = Unknown error
' "-1" = Can't find the dynamic library
' Other = Valid version retrieved
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Version() As String

  ' First we try to call the function. This will fail if the library doesn't exist or is invalid
  Try DomoZwave_Version()
  If Error Then
    Main.WriteLog(LogLabel & "ERROR: " & Error.Text)

    If InStr(Error.Text, "Cannot find dynamic library") >= 1 Then
      Return "-1"
    Else
      Return ""
    Endif

  Endif

  Return DomoZWave_Version()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' translate between API and SDK version numbering
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SDKVersion(sVersion As String) As String

  Select sVersion
    Case "2.40"
      Return "4.27"
    Case "2.48"
      Return "5.02"
    Case "2.51"
      Return "5.02 Patch 1"
    Case "2.6"
      Return "4.21"
    Case "2.64"
      Return "5.02 Patch 2"
    Case "2.67"
      Return "4.28"
    Case "2.70"
      Return "4.05"
    Case "2.74"
      Return "4.50"
    Case "2.78"
      Return "5.02 Patch 3"
    Case "2.9"
      Return "4.22"
    Case "2.99"
      Return "6.00 beta 1 Patch 1"
    Case "3.03"
      Return "6.00 beta 1 Patch 2"
    Case "3.04"
      Return "6.00 beta 1 Patch 3"
    Case "3.10"
      Return "6.01.00"
    Case "3.20"
      Return "4.52.00"
    Case "3.22"
      Return "4.52.01"
    Case "3.26"
      Return "6.01.01"
    Case "3.28"
      Return "5.03"
    Case "3.33"
      Return "6.01.02"
    Case "3.34"
      Return "4.53.00"
    Case "3.35"
      Return "6.10.00"
    Case "3.36"
      Return "4.53.01"
    Case "3.37"
      Return "6.01.03"
    Case "3.38"
      Return "6.10.01"
    Case "3.40"
      Return "4.54.00"
    Case "3.41"
      Return "6.02.00"
    Case "3.42"
      Return "4.54.01"
    Case "3.45"
      Return "6.11.00"
    Case "3.52"
      Return "4.54.02"
    Case "3.53"
      Return "6.11.01"
    Case "3.6"
      Return "6.00.04 beta 1"
    Case "3.67"
      Return "4.55.00"
    Case "3.71"
      Return "6.50.00 beta"
    Case "3.7"
      Return "6.00.05 beta 1"
    Case "3.79"
      Return "6.50.01 beta"
    Default
      Return "Unknown"
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start a JSON-RPC server only to be used by OpenZWave
' We try to listen on a port-range, if that fails, we return zero
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartJSONRPC() As Integer

  Dim hRpcFunc As JsonRpcFunction
  Dim iCnt As Integer

  ' Create a new instance of the JSON-RPC Server
  hJSONRPC = New JsonRpcServer As "hJSONRPC"

  ' ### OpenZWave only methods ###
  hRpcFunc = New JsonRpcFunction("openzwave.homeid")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("openzwave.allqueried")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("openzwave.addnode")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("openzwave.removenode")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("openzwave.setvalue")
  hJSONRPC.Register(hRpcFunc)

  ' ---------------------------------------------------------
  ' All have been setup, now try to start the JSOC-RPC server
  ' ---------------------------------------------------------
  For iCnt = 16000 To 65535
    Try hJSONRPC.Listen(iCnt, 10, $bDebug, "127.0.0.1")
    If hJSONRPC.Listening Then
      Return iCnt
    Endif
  Next

  ' Destroy create hJSONRPC
  hJSONRPC = Null
  Return 0

Catch
  Return 0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop the OpenZWave JSON-RPC server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopJSONRPC()

  Try hJSONRPC.Stop()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle the JSON-RPC Remote Calls
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hJSONRPC_RemoteCall(sName As String, cData As Collection)

  Dim sParam As String

  Main.ControlLed("ZWave", "On")
  
  ' Set method to private variable for logging purposes
  $sCurrentMethod = sName

  If $bDebug Then
    Try sParam = JSON.Encode(cData)
    sParam = Replace(sParam, "\"\\u00x0\"", "\"\"")
    sParam = Replace(sParam, "\"\\u0001\"", "\"\"")

    Main.WriteDebugLog("[OpenZWave] " & "Got a RemoteCall for Method '" & sName & "'" & IIf(sParam, ", Params '" & sParam & "'", ""))
  Endif

  Select sName
      ' ### OpenZWave methods ###
    Case "openzwave.homeid"
      Call_OpenZWave_HomeId(cData)
    Case "openzwave.allqueried"
      Call_OpenZWave_AllQueried(cData)
    Case "openzwave.addnode"
      Call_OpenZWave_AddNode(cData)
    Case "openzwave.removenode"
      Call_OpenZWave_RemoveNode(cData)
    Case "openzwave.setvalue"
      Call_OpenZWave_SetValue(cData)

      ' ## Default - return an error ###
    Default
      hJSONRPC.SetReply(-32601, Null)
      Return
  End Select

  Main.ControlLed("ZWave", "Off")
  Wait 0.001

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EnableDisableLog(bDebug As Boolean)

  ' TODO
  bDebug = False

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Write to debug logfile
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLogError(sError As String)

  If $bDebug Then
    Main.WriteDebugLog("[OpenZWave] ERROR: Method '" & $sCurrentMethod & "' - " & sError)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if Variable if it is number. JSON decode doesn't
' always give it back as gb.Integer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONCheckNumber(vValue As Variant) As Boolean

  If TypeOf(vValue) = gb.Float Then Return True
  If TypeOf(vValue) = gb.Long Then Return True
  If TypeOf(vValue) = gb.Integer Then Return True
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONCheckHomeId(vVar As Variant, Optional bNotNull As Boolean = True) As Boolean

  Dim iTemp As Integer

  If vVar = Null Then
    WriteDebugLogError("params 'homeid' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  If Not JSONCheckNumber(vVar) Then
    WriteDebugLogError("params 'homeid' is missing or is not numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  Try iTemp = CInt(vVar)
  If Error Then
    WriteDebugLogError("params 'homeid' is not numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  If bNotNull Then
    If iHomeId <> iTemp Then
      WriteDebugLogError("params 'homeid' is '" & iTemp & "', it is NOT our homeid '" & iHomeId & "'")
      hJSONRPC.SetReply(-32602, Null)
      Return False
    Endif
  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONCheckNodeId(vVar As Variant) As Boolean

  Dim iTemp As Integer

  If vVar = Null Then
    WriteDebugLogError("params 'nodeid' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  If Not JSONCheckNumber(vVar) Then
    WriteDebugLogError("params 'nodeid' is missing or is not numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  Try iTemp = CInt(vVar)
  If Error Then
    WriteDebugLogError("params 'nodeid' is not numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Sets the homeid and controllerid of the Z-Wave serialdevice
' Also the nodes will be removed from the ZWaveNetwork, it will
' be automatically populated when needed via AddNode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_OpenZWave_HomeId(cData As Collection)

  Dim iTemp1 As Integer
  Dim iTemp2 As Integer

  If Not JSONCheckHomeId(cData["homeid"], False) Then Return
  iTemp1 = CInt(cData["homeid"])

  If Not JSONCheckNumber(cData["controllerid"]) Then
    WriteDebugLogError("params 'controllerid' is missing or is not numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  Try iTemp2 = CInt(cData["controllerid"])
  If Error Then
    WriteDebugLogError("params 'controllerid' is not numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  If TypeOf(cData["serialport"]) <> gb.String Then
    WriteDebugLogError("params 'serialport' is missing or isn't a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  If Not Util.JSON_RemoveEmpty(cData["serialport"]) Then
    WriteDebugLogError("params 'serialport' is empty string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  If cData["serialport"] <> $sSerPort Then
    WriteDebugLogError("params 'serialport' is NOT our serialport variable. Ours: '" & $sSerPort & "', Received: '" & cData["serialport"] & "'")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  iHomeId = iTemp1
  iControllerId = iTemp2

  ZWaveNetwork.Clear()
  
  IsRunning = True
  ErrorText = ""
  sControllerType = DomoZWave_ControllerType(iHomeId)

  sAPIVersion = Replace(DomoZWave_GetLibraryVersion(iHomeId), "Z-Wave ", "")
  sSDKVersion = SDKVersion(sAPIVersion)

  Main.WriteLog(LogLabel & "interface successfully connected to Port " & $sSerPort)

  If $bDebug Then
    Main.WriteDebugLog(LogLabel & "Interface successfully connected to Port " & $sSerPort)
    Main.WriteDebugLog(LogLabel & "Received response from Z-Wave controller: homeid=0x" & Right(Hex(iHomeId), 8) & " (" & iHomeId & ").")
    Main.WriteDebugLog(LogLabel & "Z-Wave controller id: " & iControllerId & ".")
    Main.WriteDebugLog(LogLabel & "Z-Wave controller type: " & sControllerType & ".")
    Main.WriteDebugLog(LogLabel & "Z-Wave API version: " & sAPIVersion & ".")
    Main.WriteDebugLog(LogLabel & "Z-Wave SDK version: " & sSDKVersion & ".")
  Endif

  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Put the ZWaveNetwork homeid on AllQueried
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_OpenZWave_AllQueried(cData As Collection)

  Dim cZWaveNode As New OpenZWaveEntry

  If Not JSONCheckHomeId(cData["homeid"]) Then Return

  bAllQueried = True

  hJSONRPC.SetReply(0, True)

  ' All nodes are queried, now enable polling if > 0
  If $iPollTime > 0 Then
    Main.WriteDebugLog(LogLabel & "Enabling legacy polling " & $iPollTime & " milliseconds")

    'If DomoZWave_GetPollInterval() = 0 Then
      ' Enable polling - this applies to all controllers in open-zwave
      DomoZWave_SetPollInterval($iPollTime, True)
    'Endif
  Endif

  For Each cZWaveNode In ZWaveNetwork

    ' Only apply it to listening nodes (none sleeping)
    If cZWaveNode.Listening Then

      ' We can't query the ourself
      If cZWaveNode.NodeId = iControllerId Then Continue

      ' If polling is disabled, force it to disable
      If $iPollTime = 0 Then
        DomoZWave_DisablePolling(iHomeId, cZWaveNode.NodeId)
        Continue
      Endif

      ' TODO: check devices table for disable openzwave polling

      ' Enable polling with intensity = 1 
      DomoZWave_EnablePolling(iHomeId, cZWaveNode.NodeId, 1)
    Endif

  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Add the discovered Z-Wave node to the ZWaveNetwork
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_OpenZWave_AddNode(cData As Collection)

  Dim cZWaveNode As New OpenZWaveEntry
  Dim iNodeId As Integer

  If Not JSONCheckHomeId(cData["homeid"]) Then Return

  If Not JSONCheckNodeId(cData["nodeid"]) Then Return
  iNodeId = CInt(cData["nodeid"])

  cZWaveNode.NodeId = iNodeId
  cZWaveNode.Basic = CInt(cData["basic"])
  cZWaveNode.Generic = CInt(cData["generic"])
  cZWaveNode.Specific = CInt(cData["specific"])
  cZWaveNode.Listening = CBoolean(cData["listening"])
  cZWaveNode.FrequentListening = CBoolean(cData["frequentlistening"])
  cZWaveNode.Beaming = CBoolean(cData["beaming"])
  cZWaveNode.Routing = CBoolean(cData["routing"])
  cZWaveNode.Security = CBoolean(cData["security"])
  cZWaveNode.MaxBaudRate = CInt(cData["maxbaudrate"])
  cZWaveNode.Version = CInt(cData["version"])
  cZWaveNode.Instances = New Collection

  Select cZWaveNode.Generic
    Case &H01, &H02
      cZWaveNode.DeviceType = "Z-Wave Controller"
    Case &H08
      cZWaveNode.DeviceType = "Z-Wave Thermostat"
    Case &H10
      cZWaveNode.DeviceType = "Z-Wave Switch"
    Case &H11
      Select cZWaveNode.Specific
        Case &H05, &H06, &H07
          cZWaveNode.DeviceType = "Z-Wave Motor Control"
        Default
          cZWaveNode.DeviceType = "Z-Wave Dimmer"
      End Select
    Case &H12
      cZWaveNode.DeviceType = "Z-Wave Remote Switch"
    Case &H20, &H21, &H30, &H31, &HA1
      cZWaveNode.DeviceType = "Z-Wave Sensor"
    Case &H40
      Select cZWaveNode.Specific
        Case &H01, &H02, &H03
          cZWaveNode.DeviceType = "Z-Wave Door Lock"
        Default
          cZWaveNode.DeviceType = "Z-Wave Entry Control"
      End Select
    Default
      cZWaveNode.DeviceType = "Z-Wave Generic"
  End Select

  ZWaveNetwork[iNodeId] = cZWaveNode

  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Remove the Z-Wave node from the ZWaveNetwork
' NOTE: This does NOT apply if controller is hardreset or removed
' In that case DomotiGa code needs to remove the nodes from the ZWaveNetwork
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_OpenZWave_RemoveNode(cData As Collection)

  Dim iNodeId As Integer

  If Not JSONCheckHomeId(cData["homeid"]) Then Return

  If Not JSONCheckNodeId(cData["nodeid"]) Then Return
  iNodeId = CInt(cData["nodeid"])

  If ZWaveNetwork.Exist(iNodeId) Then
      ZWaveNetwork.Remove(iNodeId)
  Endif

  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Process the receive Open Z-Wave value. Stored in the Z-Wave network
' for the Open Z-Wave Commander and send to the devices.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_OpenZWave_SetValue(cData As Collection)

  Dim iNodeId As Integer
  Dim iInstanceId As Integer
  Dim iValueId As Integer
  Dim cZWaveNode As New OpenZWaveEntry
  Dim cZwaveNodeValue As New OpenZWaveEntryValue
  Dim sAddress As String
  Dim iDeviceId As Integer

  If Not JSONCheckHomeId(cData["homeid"]) Then Return

  If Not JSONCheckNodeId(cData["nodeid"]) Then Return
  iNodeId = CInt(cData["nodeid"])

  Try iInstanceId = CInt(cData["instanceid"])
  Try iValueId = CInt(cData["valueid"])

  ' Instance of 0 isn't valid
  If iInstanceId = 0 Then iInstanceId = 1

  ' The node has to be known in the Z-Wave network
  If ZWaveNetwork.Exist(iNodeId) Then

    ' Get the Z-Wave node information
    cZWaveNode = ZWaveNetwork[iNodeId]

    If Not cZWaveNode.Instances.Exist(iInstanceId) Then
      cZwaveNodeValue.Values = New Collection
      cZWaveNode.Instances.Add(cZWaveNodeValue, iInstanceId)
    Endif

    ' Store the value in the instance
    cZWaveNode.Instances[iInstanceId].Values[iValueId] = Util.JSON_RemoveEmpty(cData["value"]) & Util.JSON_RemoveEmpty(cData["unit"])
  Endif

  ' Determine the address of the Z-Wave node
  If iInstanceId = 1 Then
    sAddress = iNodeId
  Else
    sAddress = iNodeId & ":" & iInstanceId
  Endif

  ' Update device value
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Got value changed notification for node " & iNodeid & " and instance " & iInstanceId & " value" & iValueId & " changed to " & cData["value"] & ".")
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, cZWaveNode.DeviceType)
  If iValueId = 255 Then ' battery level
    If iDeviceId Then Devices.Battery(iDeviceId, cData["value"])
  Else ' device value
    If iDeviceId Then Devices.ValueUpdate(iDeviceId, iValueId, cData["value"])
  Endif

  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieves the OpenZWave instance information for JSON-RPC and OpenZWave Commander
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JsonRpc_Tools_OpenZWave_Get(cData As Collection) As Collection

  Dim cZWaveNode As New OpenZWaveEntry
  Dim iZWaveCount As Integer
  Dim cNode As New Collection
  Dim aNodes As New Collection[]
  Dim oInstance As Object
  Dim cResult As New Collection
  Dim cValue1 As New Collection
  Dim cValue2 As New Collection
  Dim aValue1 As New Collection[]
  Dim aValue2 As New Collection[]
  Dim sValue As String
  Dim iTemp As Integer
  Dim iCnt As Integer

  If cData = Null Then Return Null

  Select cData["command"]

    ' Get controller information. If working, which API, HomeId, etc
    Case "controller"
      cResult["instance_id"] = Instance
      cResult["running"] = IsRunning
      If Not IsRunning Then cResult["errortext"] = Util.JSON_AddEmpty(ErrorText)
      cResult["serialport"] = $sSerPort
      cResult["homeid"] = GetHomeId()
      cResult["controllerid"] = GetControllerId() 
      cResult["controllertype"] = Util.JSON_AddEmpty(GetControllerType())
      cResult["apiversion"] = Util.JSON_AddEmpty(GetAPIVersion())
      cResult["sdkversion"] = Util.JSON_AddEmpty(GetSDKVersion())
      cResult["wrapperversion"] = Util.JSON_AddEmpty(GetWrapperVersion())
      cResult["ozwversion"] = Util.JSON_AddEmpty(GetOZWVersion())
      cResult["allqueried"] = bAllQueried

      Try cResult["statistics"] = JSON.Decode(DomoZWave_GetDriverStatistics(iHomeId))

      iZWaveCount = 0
      For Each cZWaveNode In ZWaveNetwork
        iZWaveCount += 1
        cNode = New Collection

        cNode["node_id"] = cZWaveNode.NodeId
        cNode["basic"] = Util.JSON_AddEmpty(DomoZWave_BasicTypeName(cZWaveNode.Basic))
        cNode["generic"] = Util.JSON_AddEmpty(DomoZWave_GenericTypeName(cZWaveNode.Generic))
        cNode["specific"] = Util.JSON_AddEmpty(DomoZWave_SpecificTypeName(cZWaveNode.Generic, cZWaveNode.Specific))
        cNode["listening"] = cZWaveNode.Listening
        cNode["frequentListening"] = cZWaveNode.FrequentListening
        cNode["routing"] = cZWaveNode.Routing
        cNode["security"] = cZWaveNode.Security
        cNode["beaming"] = cZWaveNode.Beaming
        cNode["maxbaudrate"] = cZWaveNode.MaxBaudrate
        cNode["manufacturername"] = Util.JSON_AddEmpty(GetNodeManufacturerName(cZWaveNode.NodeId))
        cNode["productname"] = Util.JSON_AddEmpty(GetNodeProductName(cZWaveNode.NodeId))
        cNode["neighbors"] = Util.JSON_AddEmpty(GetNodeNeighborsList(cZWaveNode.NodeId))
        cNode["commandclass"] = Util.JSON_AddEmpty(GetNodeCommandClassList(cZWaveNode.NodeId))
        If iControllerId = cZWaveNode.NodeId Then ' Add controller sdk, because it isn't in the node info
          cNode["sdkversion"] = cResult["sdkversion"]
        Else
          cNode["sdkversion"] = SDKVersion(GetNodeProtocolVersion(cZWaveNode.NodeId))
        Endif
        cNode["applicationversion"] = Util.JSON_AddEmpty(GetNodeApplicationVersion(cZWaveNode.NodeId))
        cNode["libraryversion"] = Util.JSON_AddEmpty(GetNodeLibraryVersion(cZWaveNode.NodeId))
        cNode["querystage"] = Util.JSON_AddEmpty(GetNodeQueryStage(cZWaveNode.NodeId))
        cNode["state"] = Util.JSON_AddEmpty(GetNodeStatus(cZWaveNode.NodeId))
        cNode["lastseen"] = Util.JSON_AddEmpty(GetNodeLastSeen(cZWaveNode.NodeId))
        cNode["customname"] = Util.JSON_AddEmpty(GetNodeName(cZWaveNode.NodeId))
        cNode["customlocation"] = Util.JSON_AddEmpty(GetNodeLocation(cZWaveNode.NodeId))
        Try cNode["statistics"] = JSON.Decode(DomoZWave_GetNodeStatistics(iHomeId, cZWaveNode.NodeId))

        ' Add instance and values
        aValue1 = New Collection[]
        For Each oInstance In cZWaveNode.Instances
          cValue1 = New Collection
          cValue1["instance_id"] = CInt(cZWaveNode.Instances.Key)

          aValue2 = New Collection[]
          For Each sValue In oInstance.Values
            Try iTemp = CInt(oInstance.Values.Key) 
            If Not Error Then
              cValue2 = New Collection
              cValue2["valuenum"] = iTemp
              cValue2["value"] = Util.JSON_AddEmpty(sValue)
              aValue2.Add(cValue2)
            Endif
          Next

          cValue1.Add(aValue2, "values")
          aValue1.Add(cValue1)
        Next

        ' Add the instance information to the nodeinfo
        cNode.Add(aValue1, "instances")

        ' Add config items
        aValue1 = New Collection[]
        cValue1 = New Collection

        Try cValue1 = JSON.Decode(DomoZWave_GetNodeConfig(iHomeId, cZWaveNode.NodeId))
        If Not Error Then
          If cValue1.Exist("config") Then
            aValue1 = cValue1["config"]

            If aValue1.Count >= 1 Then
              cNode.Add(aValue1, "config")
            Endif
          Endif
        Endif

        ' Add group items
        aValue1 = New Collection[]
        cValue1 = New Collection

        Try cValue1 = JSON.Decode(DomoZWave_GetNodeGroup(iHomeId, cZWaveNode.NodeId))
        If Not Error Then
          If cValue1.Exist("group") Then
            aValue1 = cValue1["group"]

            If aValue1.Count >= 1 Then
              cNode.Add(aValue1, "group")
            Endif
          Endif
        Endif

        ' Add wakeup timer
        iCnt = GetNodeWakeUpInterval(cZWaveNode.NodeId)
        If iCnt >= 1 Then
          cNode.Add(iCnt, "wakeup")
        Endif

        ' Add usercode items
        aValue1 = New Collection[]
        cValue1 = New Collection

        Try cValue1 = JSON.Decode(DomoZWave_GetNodeUserCode(iHomeId, cZWaveNode.NodeId))
        If Not Error Then
          If cValue1.Exist("usercode") Then
            aValue1 = cValue1["usercode"]

            If aValue1.Count >= 1 Then
              cNode.Add(aValue1, "usercode")
            Endif
          Endif
        Endif


        ' Add nodeinfo to an array
        aNodes.Add(cNode)
      Next

      ' Update the end result, with the number of nodes and their information
      cResult["count"] = iZWaveCount
      cResult["nodeinfo"] = aNodes

    Default
      Return Null

  End Select

  Return cResult

End
