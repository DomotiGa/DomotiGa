' Gambas module file

' Description:
' Main.module

' DomotiGa Server - the server part of DomotiGa an open source home automation program
' Copyright (C) Ron Klinkien, The Netherlands.

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the
' GNU General PUBLIC License for more details.

' You should have received a copy of the GNU General PUBLIC License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' this is the place where all global variables are defined
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Main
Public sProgramVersion As String = "1.0.025"
Public sBaseDir As String
Public sSettings As String = "server-domotiga.conf"
Public bExitProgram As Boolean ' exit program flag
Public sLanguage As String
Public bAllowAutoUpgrade As Boolean
Public bAutoDeviceCreate As Boolean
Public bLogAllValueUpdates As Boolean

' Client/Server
Public bServer As Boolean = True
Public sOtherServer As String

' IP/Broadcast addresses
Public aBroadcastAddr As New String[]
Public aIPAddr As New String[]

' JSON-RPC settings
Public sJSONRPCUser As String
Public sJSONRPCPassword As String

' Debug
Public bMainDebug As Boolean
Public bEventsDebug As Boolean
Public bDevicesDebug As Boolean
Public bDebugEnergy As Boolean
Public bDebugPlugin As Boolean
Public bDebugGlobalVar As Boolean

' Debug the RAW serialport communication inside CSerialPort.class
' The option is passed as an environment variable:
' DEBUGSERIALPORT=/dev/ttyUSB0,/dev/ttyUSB5
Public sDebugSerialPort As New String[]

' Debug the RAW client socket communication inside CSocket.class
' The option is passed as an environment variable
' DEBUGSOCKET=192.168.1.1:10011,192.168.100.121:9090
Public sDebugSocket As New String[]

' Debug the start-up sequence, sometimes it can happen we hang on 60%
Public bDebugStartUp As Boolean

' Environment variables past to the application
' The 'MySQL_Host' is converted to 'MYSQL/HOST"
Public cEnvVar As New Collection

' Message counters
Public iNewMails As Integer
Public iNewCalls As Integer
Public iNewVoicemails As Integer

' Logfiles
Public iLogBuffer As Integer = 10000 ' default size of buffer after logwindows gets flushed
Public sMainLogFile As String
Public sSpeakLogFile As String
Public sDebugLogFile As String
Public sDomoZWaveFile As String
Public hMainLogFile As File  ' main log file
Public hSpeakLogFile As File ' speak log file
Public hDebugLogFile As File ' debug log file
Public sLogPrefix As String
Private sLastWriteLog As String

' Collection with Global Variables (these survive a program restart)
Public GlobalVar As New Collection
Public GlobalVar_System As New Collection

' Time and Date related
Public bNew_Minute As Boolean
Public bNew_Month As Boolean
Public dTime As Date
Public dPrev_Time As Date

' Timers
Public tMainFlush As Timer
Public iMainFlushTime As Integer = 3000
Public tMainSleep As Timer

' MySQL
Public sSQLHost As String
Public iSQLPort As Integer
Public sSQLUser As String
Public sSQLPass As String
Public sSQLDatabase As String
Public bSQLDebug As Boolean
Public hDB As New Connection

' Sound
Public bSoundEnabled As Boolean ' enable sound support
Public bSoundDebug As Boolean ' debug sound
Public iSoundVolume As Integer ' default volume level

' VoiceText
Public bVoiceTextEnabled As Boolean ' enable TTS support
Public sVoiceTextEngine As String ' currently only 'cepstral' and 'espeak' are supported
Public sVoiceTextVoicesMale As String ' list of voices, first is default
Public sVoiceTextVoicesFemale As String ' list of voices, first is default
Public sVoiceTextPrefixCmd As String ' prefix command like 'padsp'
Public bVoiceTextDebug As Boolean ' debug TTS

' Astro
Public iAstroLatitude As Float
Public iAstroLongitude As Float
Public iAstroTimezone As Float
Public bAstroDST As Boolean
Public fAstroAutoTimezone As Float
Public sAstroAutoTimezoneName As String
Public sAstroSeasons As String
Public sAstroSeasonStarts As String
Public sAstroTwilight As String
Public bAstroDebug As Boolean
Public sTemperature As String
Public sCurrency As String

' Astro MoonPhase
Public MoonPhase As String
Public MoonZodiac As String
Public MoonAge As Integer
Public MoonDistance As Float
Public MoonLatitude As Float
Public MoonLongitude As Float
Public MoonIsLeapYear As Boolean

' Thermostat
Public bThermostatEnabled As Boolean
Public bThermostatDebug As Boolean
Public iThermostatPollTime As Integer

' E-mail
Public bEmailEnabled As Boolean
Public sEmailSMTPServer As String
Public iEmailSMTPPort As Integer
Public sEmailFromAddress As String
Public sEmailToAddress As String
Public sEmailSubject As String
Public bEmailDebug As Boolean
Public sEmailUserName As String
Public sEmailPassword As String
Public bEmailSSL As Boolean

' Google Translate
Public bGTranslateEnabled As Boolean = False ' use Google Translate
Public sGTranslateAPIKey As String ' Google Translate (paid) API key

' RRDTool
Public bRRDToolEnabled As Boolean
Public iRRDToolPollTime As Integer
Public iRRDToolWidth As Integer
Public iRRDToolHeight As Integer
Public sRRDToolRRA As String
Public bRRDToolDebug As Boolean

' Server Stats
Public bServerStatsEnabled As Boolean
Public sServerStatsName As String
Public bServerStatsDebug As Boolean

' WakeOnLan
Public hBroadcast As UdpSocket

' CallerID
Public bCallerIDEnabled As Boolean
Public sCallerIDCountryCode As String
Public sCallerIDAreaCode As String
Public sCallerIDNationalPrefix As String
Public sCallerIDInternationalPrefix As String
Public bCallerIDAutoCreateContacts As Boolean
Public bCallerIDDebug As Boolean

' xPL
Public bxPLEnabled As Boolean
Public ixPLHeartBeatTime As Integer
Public bxPLDebug As Boolean
Public hxPL As CxPL

' RFXCom xPL
Public bRFXComxPLEnabled As Boolean
Public sRFXComxPLRXAddress As String
Public sRFXComxPLTXAddress As String
Public bRFXComxPLOldAddrFmt As Boolean
Public bRFXComxPLGlobalX10 As Boolean
Public bRFXComxPLDebug As Boolean
Public hRFXComxPL As CRFXComxPL

' XBMC xPL
Public bXBMCxPLEnabled As Boolean
Public sXBMCxPLRXAddress As String
Public sXBMCxPLTXAddress As String
Public bXBMCxPLDebug As Boolean
Public hXBMCxPL As CXBMCxPL

' SendUDP
Public hSendUDP As UdpSocket

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' this is where domotiga starts
' determine basedir, set language and run application
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Main() As Boolean

  Dim sBackTrace, sTrace As String
  Dim iSleep, iSleepTimer As Integer

  ' Detect our IP and broadcast address(es)
  aIPAddr = Util.Detect_IPAddr()
  aBroadcastAddr = Util.Detect_BroadcastAddr()

  ' determine basedir
  sBaseDir = Application.Path
  If InStr(sBaseDir, "/" & Application.Name) Then
    If RInStr(sBaseDir, "/") = InStr(sBaseDir, "/" & Application.Name, RInStr(sBaseDir, "/")) Then
      sBaseDir = Left(sBaseDir, RInStr(sBaseDir, "/") - 1)
    Endif
  Endif

  If Not Exist(sBaseDir) Then
    Print "ERROR: Couldn't determine DomotiGaServer's base directory."
    Quit
  Endif

  ' parse cmd line arguments
  ParseArgs()

  ' Parse environment variable(s)
  ParseEnvVars()

  ' load program settings
  GetConfig()
  
  ' Check if pid exists
  sOtherServer = Util.CheckDomotiGaPid()

  ' Create pid file if not exists
  If sOtherServer <> Application.Name Then Util.CreateDomotiGaPid()

  ' set language
  System.Language = sLanguage

  ' start different sections
  Setup_Logfiles()

  ' Check directory structure and create if required
  CreateDirectoryTree()

  DisplayProgramInfo()

  ' connect to the mysql database
  iSleep = 0
  WriteLog("[Main] Connecting to database ...")
  While Not Main.ConnectDatabase()

    ' Try the first 10 seconds every 2 seconds, after that every 10 seconds
    ' After 1 minute, go to the a minute retry and finally every 30 minutes
    If iSleep < 10 Then
      iSleep += 2
      iSleepTimer = 2
    Else If iSleep < 60 Then
      iSleep += 10
      iSleepTimer = 10
    Else If iSleep < 3600 Then
      iSleep += 60
      iSleepTimer = 60
    Else
      iSleep += 1800
      iSleepTimer = 1800
    Endif

    Main.WriteLog("[Main] ERROR: Couldn't open the database (called '" & Main.sSQLDatabase & "') Check '" & Main.sSettings & "' or create & load a database. Sleeping " & iSleepTimer & " seconds.")
    Wait iSleepTimer
  Wend

  ' check versions
  CheckDatabaseVersion()

  ' start all setups for modules
  Main.WriteLog("[Main] Loading modules ...")
  Main.Setup()

  ' update house status
  Main.WriteLog("[Main] Starting main program ...")
  If Not GetGlobalVar("House_Mode") Then SetGlobalVar("House_Mode", "normal")
  Main.ChangeHouseMode(GetGlobalVar("House_Mode"))
  Main.ChangeMuteMode(GetGlobalVar("Mute"))

  Main.WriteLog("[Main] Entering main program loop ...")

  UpdateGlobalVars()
  Check_for_Action()
  SetupTimers() ' start timers

  If Main.bMainDebug Then Main.WriteLog("[Main] Main Debug enabled.")
  SetGlobalVar("Tagline", Main.Random_Text("remarks_tags"))
  WriteLog("[Main] The current tagline is '" & GetGlobalVar("Tagline") & "'")
  If bSoundEnabled Then Sounds.PlaySnd("click.wav")

  If GetGlobalVar("EmailCount") Then Main.iNewMails = GetGlobalVar("EmailCount")
  If GetGlobalVar("CallCount") Then Main.iNewCalls = GetGlobalVar("CallCount")
  If GetGlobalVar("VoiceMailCount") Then Main.iNewVoicemails = GetGlobalVar("VoiceMailCount")

  ' Catch Control-C -TERM signal
  Signal[Signal.SIGINT].Catch
  ' Catch default kill signal
  Signal[Signal.SIGTERM].Catch

  ' exit program

Catch ' error trap
  For Each sBackTrace In Error.Backtrace
    sTrace &= sBackTrace & "\n"
  Next
  Main.WriteLog("ERROR: '" & Error.Text & "' '" & Error.Code & "' at\n" & sTrace)
  Main.WriteLog("Program abort.")
  Quit

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Catch Linux signals
' http://en.wikipedia.org/wiki/Signal_(computing)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Application_Signal(iSignal As Integer)

  Dim sSignal As String

  Select Case iSignal
    Case Signal.SIGTERM
      sSignal = "SIGTERM"
    Case Signal.SIGINT
      sSignal = "SIGINT"
    Case Else
      sSignal = "<Unknown signal " & iSignal & ">"
  End Select
  Print "Received signal " & sSignal & ", exit " & Application.Name
  WriteLog("[Main] Received signal " & sSignal & ", exit " & Application.Name)

  ' Reset signal handler
  Signal[iSignal].Reset

  ' We want to exit the program
  bExitProgram = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse command line arguments
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseArgs()

  Dim sArg As String
  Dim iCnt As Integer

  For iCnt = 1 To Application.Args.Count - 1
    sArg = Application.Args[iCnt]
    If Left(sArg) = "-" Then
      If sArg = "-d" Then
        ' start as a daemon in the background
        Application.Daemon = True
      Else If sArg = "-h" Or If sArg = "--help" Then
        ' display help info
        Print Application.Name & " version " & sProgramVersion
        Print "Copyright(C) 2008-" & Year(Now) & " Ron Klinkien"
        Print
        Print "This program is free software; you can redistribute it and/or"
        Print "modify it under the terms of the GNU General Public License as"
        Print "published by the Free Software Foundation; either version 2, or"
        Print "(at your option) any later version."
        Print
        Print "Usage: " & Application.Args[0] & " [options]"
        Print
        Print "Options:"
        Print " -h              display this help"
        Print " -a              allow automatic upgrade"
        Print " -c <configfile> specify config file"
        Print " -d              start as daemon"
        Print
        Quit
      Else If sArg = "-a" Then
        ' allow automatic database upgrade
        bAllowAutoUpgrade = True
      Else If Left(sArg, 2) = "-c" Then
        ' run with specified config file
        If Len(sArg) > 2 Then
          sSettings = Trim(Right(sArg, Len(sArg) - 2))
        Else
          If iCnt < (Application.Args.Count - 1) Then
            sSettings = Trim(Application.Args[iCnt + 1])
          Else
            Main.WriteLog("[Main] ERROR: No config filename specified, using default ...")
          Endif
        Endif
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse environment variable(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseEnvVars()

  Dim sEnv As String
  Dim sTemp As String
  Dim aArr As String[]

  For Each sEnv In Application.Env

    Select UCase(sEnv)
      Case "DEBUG_SERIALPORT" ' Debug option for CSerialPort.class
        aArr = Split(Application.Env[sEnv], ",")
        For Each sTemp In aArr
          ' Only add the value without spaces and in lowercase
          If Trim(sTemp) Then sDebugSerialPort.Add(LCase(Trim(sTemp)))
        Next
      Case "DEBUG_SOCKET" ' Debug option for CSocket.class
        aArr = Split(Application.Env[sEnv], ",")
        For Each sTemp In aArr
          ' Only add the value without spaces and in lowercase
          If Trim(sTemp) Then sDebugSerialPort.Add(LCase(Trim(sTemp)))
        Next
      Case "DEBUG_STARTUP" ' Debug startup of DomotiGa, sometimes we hang ...
        bDebugStartUp = True
      Default ' Store other environment variables for later usage. e.g. overrule MySQL Host
        cEnvVar[Replace$(UCase(sEnv), "_", "/")] = Application.Env[sEnv]
    End Select
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the mysql database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectDatabase() As Boolean

  Dim sVersion As String

  ' try to close the connection first
  Try hDB.Close

  ' get a new one
  With hDB
    .Type = "mysql"
    .Host = sSQLHost
    .Port = iSQLPort
    .Login = sSQLUser
    .Password = sSQLPass
    .Name = sSQLDatabase
    .Open
  End With

  WriteLog("[MySQL] Database on host '" & sSQLHost & "'.")
  WriteLog("[MySQL] Port used " & iSQLPort & ".")
  If hDB.Type = "mysql" Then
    sVersion = Format(hDB.Version, "000000")
    Try sVersion = CInt(Mid(sVersion, 1, 2)) & "." & CInt(Mid(sVersion, 3, 2)) & "." & CInt(Mid(sVersion, 5, 2))
    WriteLog("[MySQL] Version is " & sVersion & ".")
  Else
    WriteLog("[MySQL] Version is " & hDB.Version & ".")
  Endif

  ' all ok
  Return True

Catch ' some errors
   Main.WriteLog("[Main] MySQL ERROR: " & ERROR.Text)
   Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if we are connected to the mysql database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectedDatabase() As Boolean

  ' Only return True if the connection is open
  If hDB Not Null Then
    If hDB.Opened Then Return True
  Endif
  Return False

End

'-------------------------------------------------------
' update the mysql database
'-------------------------------------------------------
Public Sub UpdateDatabase() As Boolean

  ' We assume all passwords are already encrypted in MD5 format

  ' Do nothing, no DB changes are required
  Return True

Catch ' some errors in update db
  Main.WriteLog("[Main] MySQL update ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display startup information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DisplayProgramInfo()

  Dim sUptime As String
  Dim sModified As String
  Dim sId As String

  With Stat(Application.Path)
    sModified = Format$(.LastModified, "yyyy-mm-dd hh:nn:ss")
  End With

  Exec ["uptime"] To sUptime
  WriteLog("[Main]  ---- Program Restart ----")
  WriteLog("[Main] Starting " & Application.Name & " V" & Main.sProgramVersion & " last updated on " & sModified)
  WriteLog("[Main] Running on host '" & System.Host & "' (pid " & Application.Id & ") as user '" & System.User.Name & "' (id " & System.User.Id & ").")
  WriteLog("[Main] Detected IP " & IIf(aIPAddr.Count > 1, "Addresses", "Address") & " '" & aIPAddr.Join(", ") & "'.")
  WriteLog("[Main] Detected Broadcast " & IIf(aBroadcastAddr.Count > 1, "Addresses", "Address") & " '" & aBroadcastAddr.Join(", ") & "'.")
  WriteLog("[Main] System language is '" & System.Language & "' on architecture '" & System.Architecture & "'.")
  WriteLog("[Main] Program base directory is '" & sBaseDir & "'.")
  WriteLog("[Main] Database settings are loaded from '" & sSettings & "'.")
  WriteLog("[Main] Active logfiles are '" & sMainLogFile & "', '" & sSpeakLogFile & "' and '" & sDebugLogFile & "'.")
  WriteLog("[Main] Running on Gambas version " & GetGambasVersion())
  WriteLog("[Main] Server uptime is " & Left$(Replace$(sUptime, "  ", " "), -1))

  ' If we detect another instance running, report it now
  If sOtherServer Then
    WriteLog("[Main] *******************************************************************************")
    WriteLog("[Main] WARNING: Other " & sOtherServer & " instance is detected. Running multiple instances can cause issues.") 
    WriteLog("[Main] *******************************************************************************")
  Endif

  ' If we aren't super-user, check for the 'dailout' group and give warning if needed
  If System.User.Id Then
    Exec ["id"] To sId
    If InStr(sId, "(dialout)") = 0 Then
      WriteLog("[Main] WARNING: User '" & System.User.Name & "' doesn't have the group 'dialout' in its profile, most likely serial/USB ports can't accessed")
    Endif
  Endif


  ' check if started as superuser
  If System.User.Id = 0 Then
    WriteLog("[Main] ******* You have started DomotiGaServer as superuser/root!\nDoing this imposes a huge security risk!\nSo you have been warned! *******")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create main directory structure if incomplete
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CreateDirectoryTree()

  Dim sStr As String
  Dim bFirst As Boolean

  For Each sStr In ["logs", "icons", "icons/devices", "sounds", "rrd", "rrd/graphs", "tvguide", "certificate"]
    If Not Exist(sBaseDir &/ sStr) Then
      If Not bFirst Then
        bFirst = True
        WriteLog("[Main] Creating default directory structure.")
      Endif

      Try Mkdir (sBaseDir &/ sStr)
      WriteLog("[Main] Creating directory '" & sBaseDir &/ sStr & "'.")
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save settings to file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetConfig()

  Dim hSettings As Settings

  hSettings = New Settings(sBaseDir &/ sSettings)
  hSettings["MySQL/Host"] = sSQLHost
  hSettings["MySQL/Port"] = iSQLPort
  hSettings["MySQL/User"] = sSQLUser
  hSettings["MySQL/Password"] = sSQLPass
  hSettings["MySQL/Database"] = sSQLDatabase
  hSettings["Program/Language"] = sLanguage
  hSettings["JSONRPC/User"] = sJSONRPCUser
  hSettings["JSONRPC/Password"] = sJSONRPCPassword

  Try hSettings.Save
  If Error Then
    Print "ERROR: Unable to write to file '" & sBaseDir &/ sSettings & "'. Please check the file permissions"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' load config, create default config file if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetConfig()

  Dim hSettings As Settings

  ' load basic settings from file, if the settings file is not
  ' found then create one with default settings
  If Not Exist(sBaseDir &/ sSettings) Then
    hSettings = New Settings(sBaseDir &/ sSettings)
    hSettings["MySQL/Host"] = "localhost"
    hSettings["MySQL/Port"] = 3306
    hSettings["MySQL/User"] = "domouser"
    hSettings["MySQL/Password"] = "kung-fu"
    hSettings["MySQL/Database"] = "domotiga"
    hSettings["Program/Language"] = "en_US.UTF-8"

    Try hSettings.Save
    If Error Then
      Print "ERROR: Unable to write to file '" & sBaseDir &/ sSettings & "'. Please check the file permissions"
      Quit
    Endif

    ' re-load
    GetConfig()
    Main.WriteLog("[Main] Couldn't open config file called '" & Main.sSettings & "'. Created one with default settings!")
  Else
    sSQLHost = GetConfigValue("MySQL/Host", "localhost")
    iSQLPort = GetConfigValue("MySQL/Port", 3306)
    sSQLUser = GetConfigValue("MySQL/User", "domouser")
    sSQLPass = GetConfigValue("MySQL/Password", "kung-fu")
    sSQLDatabase = GetConfigValue("MySQL/Database", "domotiga")
    sLanguage = GetConfigValue("Program/Language", "en_US.UTF-8")

    sJSONRPCUser = GetConfigValue("JSONRPC/User", "")
    sJSONRPCPassword = GetConfigValue("JSONRPC/Password", "")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get all settings from settings_ database tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetSettings()

  Dim rResult As Result

  ' Main
  rResult = GetSettingTable("main")
  bMainDebug = rResult!debug
  bDevicesDebug = rResult!debugdevices
  bEventsDebug = rResult!debugevents
  bDebugEnergy = rResult!debugenergy
  bDebugPlugin = rResult!debugplugin
  bDebugGlobalVar = rResult!debugglobalvar

  ' TODO
  iMainFlushTime = rResult!flushtime
  iLogBuffer = rResult!logbuffer
  bAutoDeviceCreate = rResult!autodevicecreate
  bLogAllValueUpdates = rResult!logallvalueupdates
  sLogPrefix = rResult!logprefix

  ' Sound
  rResult = GetSettingTable("sound")
  bSoundEnabled = rResult!enabled
  bSoundDebug = rResult!debug
  iSoundVolume = rResult!volume

  ' Voice Text
  rResult = GetSettingTable("voicetext")
  bVoiceTextEnabled = rResult!enabled
  sVoiceTextEngine = rResult!engine
  sVoiceTextPrefixCmd = rResult!prefixcmd
  sVoiceTextVoicesMale = rResult!voicesmale
  sVoiceTextVoicesFemale = rResult!voicesfemale
  bVoiceTextDebug = rResult!debug

  ' Astro and Location
  rResult = GetSettingTable("astro")
  iAstroLatitude = rResult!latitude
  iAstroLongitude = rResult!longitude
  iAstroTimezone = rResult!timezone
  sAstroTwilight = rResult!twilight
  sAstroSeasons = rResult!seasons
  sAstroSeasonStarts = rResult!seasonstarts
  bAstroDebug = rResult!debug
  sTemperature = rResult!temperature
  sCurrency = rResult!currency
  bAstroDST = rResult!dst

  ' Thermostat
  rResult = GetSettingTable("thermostat")
  bThermostatEnabled = rResult!enabled
  bThermostatDebug = rResult!debug
  iThermostatPollTime = rResult!polltime

  ' E-Mail
  rResult = GetSettingTable("email")
  bEmailEnabled = rResult!enabled
  sEmailSMTPServer = rResult!smtpserver
  iEmailSMTPPort = rResult!smtpport
  sEmailFromAddress = rResult!fromaddress
  sEmailToAddress = rResult!toaddress
  bEmailDebug = rResult!debug
  sEmailUserName = rResult!username
  sEmailPassword = rResult!password
  bEmailSSL = rResult!sslenabled

  ' RRDTool
  rResult = GetSettingTable("rrdtool")
  bRRDToolEnabled = rResult!enabled
  iRRDToolPollTime = rResult!polltime
  iRRDToolWidth = rResult!width
  iRRDToolHeight = rResult!height
  sRRDToolRRA = rResult!rra
  bRRDToolDebug = rResult!debug

  ' Server Stats
  rResult = GetSettingTable("serverstats")
  bServerStatsEnabled = rResult!enabled
  sServerStatsName = rResult!servername
  bServerStatsDebug = rResult!debug

  ' CallerID
  rResult = GetSettingTable("callerid")
  bCallerIDEnabled = rResult!enabled
  sCallerIDCountryCode = rResult!countrycode
  sCallerIDAreaCode = rResult!areacode
  sCallerIDNationalPrefix = rResult!prefixnational
  sCallerIDInternationalPrefix = rResult!prefixinternational
  bCallerIDAutoCreateContacts = rResult!autocreatecontacts
  bCallerIDDebug = rResult!debug

  ' xPL
  rResult = GetSettingTable("xpl")
  bxPLEnabled = rResult!enabled
  ixPLHeartBeatTime = rResult!heartbeat
  bxPLDebug = rResult!debug

  ' RFXCom xPL
  rResult = GetSettingTable("rfxcomxpl")
  bRFXComxPLEnabled = rResult!enabled
  sRFXComxPLRXAddress = rResult!rxaddress
  sRFXComxPLTXAddress = rResult!txaddress
  bRFXComxPLOldAddrFmt = rResult!oldaddrfmt
  bRFXComxPLGlobalX10 = rResult!globalx10
  bRFXComxPLDebug = rResult!debug

  ' XBMC xPL
  rResult = GetSettingTable("xbmcxpl")
  bXBMCxPLEnabled = rResult!enabled
  sXBMCxPLRXAddress = rResult!rxaddress
  sXBMCxPLTXAddress = rResult!txaddress
  bXBMCxPLDebug = rResult!debug

Catch
  WriteLog("[Main] ERROR: " & Error.Text & " " & Error.Code & " while loading settings at " & Error.Where & "!\nIs your database version correct?")

  CloseAll()
  Quit

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get a value from the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GetConfigValue(sKey As String, Optional vValue As Variant) As Variant

  Dim hSettings As Settings

  ' First try to get it from our environment variable list
  If cEnvVar.Exist(UCase(sKey)) Then
    Return cEnvVar[UCase(sKey)]
  Else
    hSettings = New Settings(sBaseDir &/ sSettings)

    If Not IsNull(vValue) Then
      Return hSettings[sKey, vValue]
    Else
      Return hSettings[sKey]
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hMainLogFile Then
    Print #hMainLogFile, sText;
    Flush #hMainLogFile
  Endif
  Main.BroadcastEvent("[MainLog]" & sLogPrefix & sText)

  ' Store the last line, preventing duplicates in WriteDebugLog
  sLastWriteLog = sText

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteSpeakLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText &= "\n"

  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hSpeakLogFile Then
    Print #hSpeakLogFile, sText;
    Flush #hSpeakLogFile
  Endif
  Main.BroadcastEvent("[SpeakLog]" & sLogPrefix & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteDebugLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  If sLastWriteLog <> sText Then Print sText;
  If hDebugLogFile Then
    Print #hDebugLogFile, sText;
    Flush #hDebugLogFile
  Endif
  Main.BroadcastEvent("[DebugLog]" & sLogPrefix & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log without date/time header
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteDebugLogChars(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hDebugLogFile Then
    Print #hDebugLogFile, sText;
    Flush #hDebugLogFile
  Endif
  Main.BroadcastEvent("[DebugLog]" & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return version of gambas we are running with
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetGambasVersion() As String

  Dim sVer As String

  Shell "gbx" & System.Version & " -V " To sVer
  Return Trim(Mid$(sVer, InStr(sVer, "-") + 1))

Catch
  Return "?"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get settings table from db, return defaults if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetSettingTable(sGroup As String, Optional bDefault As Boolean) As Result

  Dim rResult As Result

  If bDefault Then
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' load default settings
  Else
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 1") ' try to load active settings
    If (rResult.Count < 1) Then
      hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' fall back to defaults
    Endif
  Endif

  Return rResult

Catch
  WriteLog("[Main] GetSettings ERROR: " & Error.Text & " for " & sGroup)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close all what's open
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CloseAll()

  ' not a real plugin yet
  Try hxPL.Disconnect 

  ' stop all running timers
  StopTimers()

  ' Stop all plugins
  Plugin.StopAll()

  ' db close
  Try hDB.Close

  WriteLog("[Main]   ---- Program End ----")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start various stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Setup()

  Dim $bDebugPlugin As Boolean

  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Starting setup")
  WriteLog("[Main] Starting setup ...")

  ' setup modules
  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Get settings")
  GetSettings() ' read all settings from database

  ' restore globalvars from database
  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Restore GlobalVars")
  RestoreGlobalVars()

  ' Store the debug plugin option, we only set it to True during startup
  If Main.bDebugStartUp Then
    $bDebugPlugin = bDebugPlugin
    bDebugPlugin = True
  Endif

  ' Start broadcast for Client/Server
  Plugin.Register("broadcastudp")
  Plugin.Restart("broadcastudp")

  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Setup Email")
  Setup_Email() ' e-mail SMTP client

  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Setup Sound")
  Setup_Sound() ' built in sound player

  Setup_VoiceText() ' text2speech support
  Setup_Thermostat() ' Thermostat function
  Setup_RRDTool() ' RRDTool graphing framework
  Setup_ServerStats() ' Server Statistics
  Setup_xPL() ' xPL support
  Setup_RFXComxPL() ' RFXCom xPL support

  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Setup Calendar")
  Setup_Calendar() 'Calendar planning support

  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Setup XBMCxPL")
  Setup_XBMCxPL() ' XBMC control via xPL

  ' Register all plugins
  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Plugin Init")
  Plugin.Init()

  ' Start all enabled plugins
  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Plugin StartAll")
  Plugin.StartAll()

  WriteLog("[Main] Done with setup ...")

  ' experimental
  ' LoadPlugins()

   If Main.bDebugStartUp Then Main.bDebugPlugin = $bDebugPlugin

  If Main.bDebugStartUp Then Main.WriteDebugLog("[Main] Done with setup")

End

' Public Sub LoadPlugins()
' 
'   Dim sPlugin As String
'   Dim cClass As Class
'   Dim oPlugin As Object
'   Dim oInterface As CPlugin
'   WriteLog("Looking for plugins...")
' 
'   ' find plugins
'   For Each sPlugin In RDir(sBaseDir &/ "plugins", "*.gambas", gb.File)
'     WriteLog("Loading plugin '" & sPlugin & "'")
'     Component.Load(sBaseDir &/ "plugins" &/ sPlugin)
'   Next
' 
'   ' initiate found plugins
'   For Each cClass In Classes
'     If Not IsNull(cClass.Component) Then
'       If cClass.Component.Name Like "*.gambas" Then
'         oPlugin = Object.New(cClass.Name)   ' create instance
'         oPlugin.Run(Object.New(oInterface)) ' start plugin
'         ' Object.Call(oPlugin, "Run")
'         ' Object.New(cClass.Name).pluginMain(frm, frm.Button1.X, frm.Button1.Y + frm.Button1.H, frm.Button1.W, frm.Button1.H)
'       Endif
'     Endif
'   Next
' 
' Catch
'   Debug Error.Text & " at " & Error.Where
' 
' End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open logfiles
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Setup_Logfiles()

  ' close open files first (in case of new month)
  Try Close #hMainLogFile
  Try Close #hSpeakLogFile
  Try Close #hDebugLogFile

  sMainLogFile = "server-main-" & Format(Now, "yyyy-mm") & ".log"
  sSpeakLogFile = "server-speak-" & Format(Now, "yyyy-mm") & ".log"
  sDebugLogFile = "server-debug-" & Format(Now, "yyyy-mm") & ".log"
  sDomoZWaveFile = "server-domozwave-"

  ' If "logs" doesn't exist, try to create it first
  If Exist(sBaseDir &/ "logs") = False Then
    Try Mkdir (sBaseDir &/ "logs")
  Endif

  ' open the file in append mode and write to it
  hMainLogFile = Open sBaseDir &/ "logs" &/ sMainLogFile For Append
  hSpeakLogFile = Open sBaseDir &/ "logs" &/ sSpeakLogFile For Append
  hDebugLogFile = Open sBaseDir &/ "logs" &/ sDebugLogFile For Append

Catch
  WriteLog("[Main] ERROR: While opening logfiles: " & Error.Text & " at " & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reload main settings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Main()

  ' not much todo now
  GetSettings()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' location info, and calc. sunset/sunrise and moonphase
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Astro()

  Dim bSunRise As Boolean = True
  Dim bSunSet As Boolean = False
  Dim iTwilight As Integer
  Dim rResult As Result
  Dim aSplitTime As String[]
  Dim sSeasons, sSeason_Starts As String[]
  Dim sDateTime As String
  Dim sDateName As String

  ' Check if automatic timezone+daylight savings is enabled (Normally 255)
  If iAstroTimezone < -12 Or iAstroTimezone > 13 Then
    Exec ["date", "+%:z"] To sDateTime
    Exec ["date", "+%Z"] To sDateName
    sDateTime = Replace$(sDateTime, "\n", "")
    sDateTime = Replace$(sDateTime, ":", ".")
    sDateName = Replace$(sDateName, "\n", "")

    ' Convert :30 & :45 timezones too - Only works in automatic mode
    Try sDateTime = Fix(CFloat(sDateTime)) + ((Frac(CFloat(sDateTime)) / 60) * 100)
    Try fAstroAutoTimezone = CFloat(sDateTime)

    ' If we detect an error, set Name to "unknown"
    If Error Then
      sDateName = "UNKNOWN"
    Endif

    sAstroAutoTimezoneName = sDateName

    WriteLog("[Astro] Latitude: " & iAstroLatitude & ", Longitude: " & iAstroLongitude & ", Timezone: " & sDateName)
  Else
    ' It isn't automatic, manually configured
    fAstroAutoTimezone = iAstroTimezone
    If bAstroDST Then
      fAstroAutoTimezone = fAstroAutoTimezone + 1
    Endif

    WriteLog("[Astro] Latitude: " & iAstroLatitude & " Longitude: " & iAstroLongitude & " Timezone: " & iAstroTimezone & IIf(bAstroDST, " (DST)", ""))
  Endif

  ' calculate sun set/rise
  SetGlobalVar("Sunrise", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, fAstroAutoTimezone, bSunRise, 0))
  SetGlobalVar("Sunset", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, fAstroAutoTimezone, bSunSet, 0))

  ' update Sunset/Sunrise triggers in database
  aSplitTime = Split(GetGlobalVar("Sunset"), ":")
  rResult = hDB.Exec("UPDATE triggers t SET t.param1 = &1 WHERE t.name = 'Time is Sunset' ", Format(aSplitTime[1], "0") & " " & Format(aSplitTime[0], "0") & " * * *")
  aSplitTime = Split(GetGlobalVar("Sunrise"), ":")
  rResult = hDB.Exec("UPDATE triggers t SET t.param1 = &1 WHERE t.name = 'Time is Sunrise' ", Format(aSplitTime[1], "0") & " " & Format(aSplitTime[0], "0") & " * * *")

  If (sAstroTwilight = "civil") Then iTwilight = 1
  If (sAstroTwilight = "nautical") Then iTwilight = 2
  If (sAstroTwilight = "astronomical") Then iTwilight = 3
  SetGlobalVar("Sunrise_Twilight", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, fAstroAutoTimezone, bSunRise, iTwilight))
  SetGlobalVar("Sunset_Twilight", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, fAstroAutoTimezone, bSunSet, iTwilight))

  If bServer Then
    WriteLog("[Astro] Sunrise at " & GetGlobalVar("Sunrise") & ", Sunset at " & GetGlobalVar("Sunset"))
    WriteLog("[Astro] Twilight Sunrise at " & GetGlobalVar("Sunrise_Twilight") & ", Twilight Sunset at " & GetGlobalVar("Sunset_Twilight") & " " & sAstroTwilight)

    ' calculate moon data
    Astro.CalcMoonPhase()
    WriteLog("[Astro] Moon phase is " & MoonPhase & ".")
    WriteLog("[Astro] Moon is in " & MoonZodiac & ".")
    WriteLog("[Astro] Age from new " & MoonAge & " days.")
    WriteLog("[Astro] Distance " & MoonDistance & " Earth radii.")
    WriteLog("[Astro] Ecliptic latitude: " & MoonLatitude & " degrees.")
    WriteLog("[Astro] Ecliptic longitude: " & MoonLongitude & " degrees.")
    If MoonIsLeapYear Then WriteLog("[Astro] This is a leap year.")
  Endif

  ' calculate season
  sSeasons = Split(sAstroSeasons, ",")
  sSeason_Starts = Split(sAstroSeasonStarts, ",")
  If (CInt(GetGlobalVar("Month")) < 3) Then
    SetGlobalVar("Season", sSeasons[0])
  Else If (CInt(GetGlobalVar("Month")) = 3) And If (CInt(GetGlobalVar("Day")) < CInt(sSeason_Starts[0])) Then
    SetGlobalVar("Season", sSeasons[0])
  Else If (CInt(GetGlobalVar("Month")) = 12) And If (CInt(GetGlobalVar("Day")) > CInt(sSeason_Starts[3])) Then
    SetGlobalVar("Season", sSeasons[0])
  Else If (CInt(GetGlobalVar("Month")) < 6) Then
    SetGlobalVar("Season", sSeasons[1])
  Else If (CInt(GetGlobalVar("Month")) = 6) And If (CInt(GetGlobalVar("Day")) < CInt(sSeason_Starts[1])) Then
    SetGlobalVar("Season", sSeasons[1])
  Else If (CInt(GetGlobalVar("Month")) < 9) Then
    SetGlobalVar("Season", sSeasons[2])
  Else If (CInt(GetGlobalVar("Month")) = 9) And If (CInt(GetGlobalVar("Day")) < CInt(sSeason_Starts[2])) Then
    SetGlobalVar("Season", sSeasons[2])
  Else
    SetGlobalVar("Season", sSeasons[3])
  Endif
  If bServer Then WriteLog("[Astro] Season is " & GetGlobalVar("Season") & ".")

Catch
  WriteLog("[Astro] ERROR: " & Error.Text & " at " & Error.Where & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reload astro settings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Astro()

  GetSettings()
  Setup_Astro()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if e-mail client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Email()

  If bEmailEnabled Then
    WriteLog("[Plugin] e-mail client enabled.")
  Else
    If bMainDebug Then WriteLog("[Plugin] e-mail client disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart e-mail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Email()

  ' not much todo now
  Setup_Email()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup sound related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Sound()

  If bSoundEnabled Then
    WriteLog("[Plugin] Sound support enabled.")
    Sounds.LoadSounds()
  Else
    If bMainDebug Then WriteLog("[Plugin] Sound support disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sound after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Sound()

  ' not much todo now
  Setup_Sound()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup voicetext related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_VoiceText()

  If bVoiceTextEnabled Then
    WriteLog("[Plugin] VoiceText support enabled.")
  Else
    If bMainDebug Then WriteLog("[Plugin] VoiceText support disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart voicetext after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_VoiceText()

  ' not much todo now
  Setup_VoiceText()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if rrdtool support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RRDTool()

    If bRRDToolEnabled Then
      If bServer Then
        If Util.ProgramExist("rrdtool") Then
          RRDTool.Run()
          WriteLog("[Plugin] RRDTool support enabled.")
        Else
          WriteLog("[RRDTool] ERROR: RRDTool command 'rrdtool' not found, did you install it?")
          bRRDToolEnabled = False
          WriteLog("[Plugin] RRDTool support disabled.")
        Endif
      Else
        WriteLog("[Plugin] RRDTool support enabled.")
      Endif
    Else
      Try RRDTool.tRRDTool.Stop
      If bMainDebug Then WriteLog("[Plugin] RRDTool support disabled.")
    Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rrdtool after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RRDTool()

  ' not much todo now
  Setup_RRDTool()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if server statistics is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_ServerStats()

  If bServerStatsEnabled Then
    If bServer Then ServerStats.Run()
    WriteLog("[Plugin] Server Statistics enabled.")
  Else
    Try ServerStats.tServerStats.Stop
    If bMainDebug Then WriteLog("[Plugin] Server Statistics disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart server statistics after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_ServerStats()

  Setup_ServerStats()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' thermostat
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Thermostat()

  If bThermostatEnabled Then
    WriteLog("[Plugin] Thermostat support enabled.")
    ' start timer
    If bServer Then Thermostat.Run()
  Else
    Try Thermostat.tThermostat.Stop
    If bMainDebug Then WriteLog("[Plugin] Thermostat support disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Thermostat after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Thermostat()

  Setup_Thermostat()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with xPL
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_xPL()

  If bxPLEnabled Then
    WriteLog("[Plugin] xPL support enabled.")
    If bServer Then
      ' create a new xPL class instance
      hxPL = New CxPL
      ' set the properties
      With hxPL
        .TargetHost = aBroadcastAddr[0]
        .OurIPAddress = aIPAddr[0]
        .HeartBeatTime = ixPLHeartBeatTime
        .xPLDebug = bxPLDebug
      End With
      ' start listening
      If hxPL.StartListener() Then
      Else
        hxPL = Null
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog("[Plugin] xPL support disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart xPL after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_xPL()

  If hxPL Then
    hxPL.Disconnect
    hxPL = Null
  Endif
  Setup_xPL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom xpl
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RFXComxPL()

  If bRFXComxPLEnabled Then
    WriteLog("[Plugin] RFXCom xPL support enabled.")
    If Not bxPLEnabled Then WriteLog("Warning: xPL support is disabled!")
    If bServer Then
      ' create a new RFXCom class instance
      hRFXComxPL = New CRFXComxPL
      ' set the properties
      With hRFXComxPL
        .RXAddress = sRFXComxPLRXAddress
        .TXAddress = sRFXComxPLTXAddress
        .RFXComDebug = bRFXComxPLDebug
        .GlobalX10 = bRFXComxPLGlobalX10
        .OldAddrFmt = bRFXComxPLOldAddrFmt
      End With

      ' No connect?

    Endif
  Else
    hRFXComxPL = Null
    If bMainDebug Then WriteLog("[Plugin] RFXCom xPL support disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom xpl after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RFXComxPL()

  If hRFXComxPL Then
    hRFXComxPL.Disconnect
    hRFXComxPL = Null
  Endif
  Setup_RFXComxPL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with XBMC xpl
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_XBMCxPL()

  If bXBMCxPLEnabled Then
    WriteLog("[Plugin] XBMC xPL support enabled.")
    If Not bxPLEnabled Then WriteLog("Warning: xPL support is disabled!")
    If bServer Then
      ' create a new XBMC class instance
      hXBMCxPL = New CXBMCxPL
      ' set the properties
      With hXBMCxPL
        .RXAddress = sXBMCxPLRXAddress
        .TXAddress = sXBMCxPLTXAddress
        .XBMCDebug = bXBMCxPLDebug
      End With
    Endif
  Else
    hXBMCxPL = Null
    If bMainDebug Then WriteLog("[Plugin] XBMC xPL support disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart XBMC xpl after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_XBMCxPL()

  If hXBMCxPL Then
    hXBMCxPL.Disconnect
    hXBMCxPL = Null
  Endif
  Setup_XBMCxPL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' main loop checking for action and acted upon
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Check_for_Action()

  If bExitProgram Then
    CloseAll()
    If sOtherServer <> Application.Name Then Util.DeleteDomotiGaPid()
    Quit
  Endif

  SetGlobalVars()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change house mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ChangeHouseMode(sMode As String)

  SetGlobalVar("House_Mode", sMode)
  WriteLog("[Main] House mode is set to '" & Caps(sMode) & "'.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change mute mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ChangeMuteMode(bMode As Boolean)

  SetGlobalVar("Mute", bMode)
  If bMode Then
    WriteLog("[Main] Mute mode is set to 'Audio Disabled'.")
  Else
    WriteLog("[Main] Mute mode is set to 'Audio Enabled'.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update counters
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateCounters()

  ' IF iNewMails OR IF iNewCalls OR IF iNewVoicemails THEN Main.WriteLog("Inbox counters are: " & iNewMails & If(iNewMails <> 1, (" e-mails, "), (" e-mail, ")) & iNewCalls & If(iNewCalls <> 1, (" calls "), " call ") & "and " & iNewVoicemails & If(iNewVoicemails <> 1, (" voicemsgs"), (" voicemsg")) & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return with capital first letter
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Caps(sString As String) As String

  Return UCase(Mid(sString, 1, 1)) & Mid(sString, 2)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start basic timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetupTimers()

  ' main loop sleep timer
  tMainSleep = New Timer As "tSleep"

  If bServer Then
    tMainSleep.Delay = 250
  Else
    ' only refresh ones per second to keep clock uptodate
    tMainSleep.Delay = 1000
  Endif
  tMainSleep.Enabled = True

  ' flush logfile buffers to disk
  tMainFlush = New Timer As "tFlush"
  tMainFlush.Delay = iMainFlushTime
  tMainFlush.Enabled = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stop all timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopTimers()

  WriteLog("[Main] Stopping running timers.")
  ' thermostat timer
  Try Thermostat.tThermostat.Stop
  ' serverstats timer
  Try ServerStats.tServerStats.Stop
  ' rrdtool timer
  Try RRDTool.tRRDTool.Stop
  ' flush output streams
  Try tMainFlush.Stop
  ' main loop sleep timer
  Try tMainSleep.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by flush timer, flushes buffered data to disk
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tFlush_Timer()

  Flush

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by sleep timer, triggers main loop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tSleep_Timer()

  Check_for_Action()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' time related functions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function Time_Less_Than(sTime As String) As Boolean

  If (DateDiff(stime, GetGlobalVar("Hour") & ":" & GetGlobalVar("Minute"), gb.Minute) < 0) Then
    Return True
  Else
    Return False
  Endif

End

Private Function Time_Greater_Than(sTime As String) As Boolean

  If (DateDiff(stime, GetGlobalVar("Hour") & ":" & GetGlobalVar("Minute"), gb.Minute) > 0) Then
    Return True
  Else
    Return False
  Endif

End

Public Function Time_Now(sTime As String) As Boolean

  If (DateDiff(stime, GetGlobalVar("Hour") & ":" & GetGlobalVar("Minute"), gb.Second) = 0) Then
    Return True
  Else
    Return False
  Endif

End

Public Sub UpdateGlobalVars()

  ' only run at startup
  dTime = Now()
  SetGlobalVar("Second", Second(dTime))
  SetGlobalVar("Minute", Minute(dTime))
  SetGlobalVar("Hour", Hour(dTime))
  SetGlobalVar("Day", Day(dTime))
  SetGlobalVar("Month", Month(dTime))
  SetGlobalVar("Year", Year(dTime))
  SetGlobalVar("Weekday", WeekDay(dTime))
  SetGlobalVar("Program_Start", Now())
  SetGlobalVar("Program_Uptime", UptimeString(DateDiff(GetGlobalVar("Program_Start"), Now(), gb.Second)))

  If (Time_Less_Than("5:00")) Then
    SetGlobalVar("Time_Of_Day", "night")
  Else If (Time_Less_Than("11:59")) Then
    SetGlobalVar("Time_Of_Day", "morning")
  Else If (Time_Less_Than("17:00")) Then
    SetGlobalVar("Time_Of_Day", "afternoon")
  Else If (Time_Less_Than("23:59")) Then
    SetGlobalVar("Time_Of_Day", "evening")
  Else
    SetGlobalVar("Time_Of_Day", "night")
  Endif

  If (GetGlobalVar("Weekday") = 0 Or GetGlobalVar("Weekday") = 6) Then
    SetGlobalVar("Weekend", True)
  Else
    SetGlobalVar("Weekend", False)
  Endif

  ' calc sunset / rise
  Setup_Astro()

  ' check if it's dark or light
  If (Time_Less_Than(GetGlobalVar("Sunrise")) Or Time_Greater_Than(GetGlobalVar("Sunset"))) Then
    SetGlobalVar("Dark", True)
  Else
    SetGlobalVar("Dark", False)
  Endif

  WriteLog("[Main] The Time of Day is " & GetGlobalVar("Time_Of_Day") & ".")
  WriteLog("[Main] It's " & IIf(GetGlobalVar("Dark"), ("dark"), ("light")) & " outside.")
  WriteLog("[Main] DomotiGa is running for " & GetGlobalVar("Program_Uptime"))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' loop with time related code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SetGlobalVars()

  Dim bTrigger As Boolean = False
  Dim sDateName As String

  bNew_Minute = 0
  bNew_Month = 0
  dTime = Now()

  ' prevent repeating time based events
  If (dPrev_Time > dTime) Then dTime = dPrev_Time

  If (dPrev_Time <> dTime) Then

    dPrev_Time = dTime

    ' new second
    If (GetGlobalVar("Second") <> Second(dTime)) Then
      SetGlobalVar("Second", Second(dTime))
      SetGlobalVar("Program_Uptime", UptimeString(DateDiff(GetGlobalVar("Program_Start"), Now(), gb.Second)))
    Endif

    ' new minute
    If (GetGlobalVar("Minute") <> Minute(dTime)) Then
      SetGlobalVar("Minute", Minute(dTime))
      bNew_Minute = 1

      btrigger = True

      ' new hour
      If (GetGlobalVar("Hour") <> Hour(dTime)) Then
        SetGlobalVar("Hour", Hour(dTime))

        If (Time_Less_Than("5:00")) Then
          SetGlobalVar("Time_Of_Day", "night")
        Else If (Time_Less_Than("11:59")) Then
          SetGlobalVar("Time_Of_Day", "morning")
        Else If (Time_Less_Than("17:00")) Then
          SetGlobalVar("Time_Of_Day", "afternoon")
        Else If (Time_Less_Than("23:59")) Then
          SetGlobalVar("Time_Of_Day", "evening")
        Else
          SetGlobalVar("Time_Of_Day", "night")
        Endif

        ' check if it's dark or light
        If (Time_Less_Than(GetGlobalVar("Sunrise")) Or Time_Greater_Than(GetGlobalVar("Sunset"))) Then
          SetGlobalVar("Dark", True)
        Else
          SetGlobalVar("Dark", False)
        Endif

        WriteLog("[Main] The Time of Day is " & GetGlobalVar("Time_Of_Day") & ".")
        WriteLog("[Main] It's " & IIf(GetGlobalVar("Dark"), ("dark"), ("light")) & " outside.")
        WriteLog("[Main] DomotiGa is running for " & GetGlobalVar("Program_Uptime"))

        If iAstroTimezone < -12 Or iAstroTimezone > 13 Then
         ' We have a new hour, we need to check if the daylight savings changed
          Exec ["date", "+%Z"] To sDateName
          sDateName = Replace$(sDateName, "\n", "")

          If sDateName <> sAstroAutoTimezoneName Then
            Setup_Astro()
          Endif
        Endif

        ' new day
        If (GetGlobalVar("Day") <> Day(dTime)) Then
          SetGlobalVar("Day", Day(dTime))
          If bServer Then Calendar.Run()

          SetGlobalVar("Weekday", WeekDay(dTime))

          If (GetGlobalVar("Weekday") = 0 Or GetGlobalVar("Weekday") = 6) Then
            SetGlobalVar("Weekend", True)
          Else
            SetGlobalVar("Weekend", False)
          Endif

          Setup_Astro()

          ' new month
          If (GetGlobalVar("Month") <> Month(dTime)) Then
            SetGlobalVar("Month", Month(dTime))
            bNew_Month = 1

            ' new year
            If (GetGlobalVar("Year") <> Year(dTime)) Then
              SetGlobalVar("Year", Year(dTime))
            Endif ' new year
          Endif ' new month
        Endif ' new day loop
      Else
        ' check if it's dark or light - this needs to be done after the Hour & Minute change
        If (Time_Less_Than(GetGlobalVar("Sunrise")) Or Time_Greater_Than(GetGlobalVar("Sunset"))) Then
          SetGlobalVar("Dark", True)
        Else
          SetGlobalVar("Dark", False)
        Endif
      Endif ' new hour loop
    Endif ' new minute loop
  Endif ' time changed loop

  If bTrigger Then EventLoop.Run()

Catch
  WriteLog("ERROR: " & Error.Text & " at " & Error.Where & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return random string from table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Random_Text(sTable As String) As String

  Dim rResult As Result

  Try rResult = Main.hDB.Exec("SELECT text FROM " & hDB.Quote(sTable) & " ORDER BY rand() LIMIT 1")
  If rResult.Count Then
    Return rResult!text
  Else
    Return ("Error fetching random text!")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get globalvar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetGlobalVar(sVar As String) As Variant

  If GlobalVar.Exist(sVar) Then
    Return GlobalVar[sVar].Value
  Else
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set globalvar to value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetGlobalVar(sVar As String, vValue As Variant, Optional bBroadcast As Boolean = False) As Boolean

  Dim vTemp As Variant
  Dim rResult As Result
  Dim bGlobalVarExist As Boolean
  Dim iDataType As Integer

  ' Check if GlobalVar exists
  bGlobalVarExist = GlobalVar.Exist(sVar)

  ' Don't call GetGlobalVar, we don't want a loop
  If bGlobalVarExist Then
    vTemp = Main.GlobalVar[sVar].Value

    ' Check if we have a system variable, this can *never* change datatype
    ' Also if iDataType=0, it can't change either
    If Main.GlobalVar[sVar].SystemVar Or If iDataType = 0 Then
      iDataType = Main.GlobalVar[sVar].DataType
    Endif

  Else
    vTemp = Chr(0) & "NEVEREXISTS" & Chr(0)
    If iDataType = 0 Then iDataType = TypeOf(vValue)
  Endif

  ' Convert the input to the correct datatype
  Select iDataType
    Case gb.Boolean
      If TypeOf(vValue) = gb.String Then
        If UCase(vValue) = "TRUE" Or If UCase(vValue) = "T" Or If (vValue) = "1" Then
          vValue = True
        Else
          vValue = False
        Endif
      Else
        Try vValue = CBool(CInt(vValue))
        If Error Then
          If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] ERROR: '" & sVar & "' value '" & vValue & "' cannot be converted to Boolean datatype")
          Return False
        Endif
      Endif

    Case gb.Byte, gb.Short, gb.Integer, gb.Long, gb.Single, gb.Float ' JSON Numeric

      ' Convert it first to Float datatype
      If TypeOf(vValue) = gb.String Then vValue = Replace(vValue, ",", ".")
      Try vValue = CFloat(vValue)
      If Error Then
        If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] ERROR: '" & sVar & "' value '" & vValue & "' cannot be converted to numeric (float) datatype")
        Return False
      Endif
      iDataType = gb.Float

      ' Convert to Integer if it is a whole number
      If CInt(vValue) = vValue Then
        Try vValue = CInt(vValue)
        iDataType = gb.Integer
      Endif

    Case gb.Date
      Try vValue = CDate(vValue)
      If Error Then
        If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] ERROR: '" & sVar & "' value '" & vValue & "' cannot be converted to Date datatype")
        Return False
      Endif

    Case gb.String, gb.Null
      Try vValue = CStr(vValue)
      If Error Then
        If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] ERROR: '" & sVar & "' value '" & vValue & "' cannot be converted to String datatype")
        Return False
      Endif

    Default ' nothing matches - don't continue
      If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] ERROR: '" & sVar & "' value '" & vValue & "' has invalid datatype=" & iDataType & ", detected=" & TypeOf(vValue))
      Return False
  End Select

  If Events.CheckCondition(vTemp, "<>", vValue, True) Then

    ' Create GlobalVar entry
    If Not bGlobalVarExist Then Main.GlobalVar.Add(CreateGlobalVarEntry(False, False, False, iDataType), sVar)

    ' Store new value in the GlobalVar, required for CheckGlobalVarEvents
    Main.GlobalVar[sVar].Value = vValue
    Main.GlobalVar[sVar].DataType = iDataType

    ' Never look for trigger for e.g. uptime or tagline
    If Not Main.GlobalVar[sVar].SkipEvent Then
      Events.CheckGlobalVarEvents(sVar, vValue)
      If bBroadcast Then BroadcastEvent("[GlobalVar]" & sVar & "|" & vValue)
    Endif

    ' Don't do anything if value is -1, then we don't update the database
    If Main.GlobalVar[sVar].WriteInterval = -1 Then Return False

    ' Check interval - only write to database if enough time has passed
    If Main.GlobalVar[sVar].WriteInterval > 0 Then
      If Not Main.GlobalVar[sVar].LastUpdate Then
        Main.GlobalVar[sVar].LastUpdate = Now()
      Else
        If DateDiff(Main.GlobalVar[sVar].LastUpdate, Now(), gb.Second) < Main.GlobalVar[sVar].WriteInterval Then Return False
        Main.GlobalVar[sVar].LastUpdate = Now()
      Endif
    Endif

    If bGlobalVarExist Then

      ' Report the GlobalVar change
      If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] '" & sVar & "' changed from '" & IIf(TypeOf(vTemp) = gb.Boolean, IIf(vTemp, "True", "False"), vTemp) & "' to '" & IIf(iDataType = gb.Boolean, IIf(vValue, "True", "False"), vValue) & "'")

      rResult = Main.hDB.Exec("UPDATE globalvars SET value = &1, datatype = &2 WHERE var = &3", vValue, iDataType, sVar)
    Else
      ' Report the GlobalVar add
      If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] '" & sVar & "' added with value '" & IIf(iDataType = gb.Boolean, IIf(vValue, "True", "False"), vValue) & "'")

      ' Before we do an insert, first check if it already exist - as safeguard
      rResult = Main.hDB.Exec("SELECT * FROM globalvars where var = &1", sVar)

      If rResult.Count = 0 Then
        Try rResult = Main.hDB.Exec("INSERT INTO globalvars SET var = &1, value = &2, datatype = &3", sVar, vValue, iDataType)
      Else
        rResult = Main.hDB.Exec("UPDATE globalvars SET value = &1, datatype = &2 WHERE var = &3", vValue, iDataType, sVar)
      Endif
    Endif
  Else

    ' We still need to update the Value, else the DataType conversion can get lost
    If Main.GlobalVar.Exist(sVar) Then
      Main.GlobalVar[sVar].Value = vValue
    Endif

  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' del globalvar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DelGlobalVar(sVar As String)

  If Main.bDebugGlobalVar Then WriteDebugLog("[GlobalVar] '" & sVar & "' is deleted")
  If Main.GlobalVar.Exist(sVar) Then Main.GlobalVar.Remove(sVar)
  Main.hDB.Exec("DELETE FROM globalvars WHERE var = &1", sVar)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Build up a GlobalVarEntry to be used in the RestoreGlobalVars
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateGlobalVarEntry(System As Boolean, ReadOnly As Boolean, SkipEvent As Boolean, DataType As Integer, Optional WriteInterval As Integer = 0) As CGlobalVarEntry

  Dim cGV As New CGlobalVarEntry

  cGV.SystemVar = System
  cGV.ReadOnly = ReadOnly
  cGV.SkipEvent = SkipEvent
  cGV.WriteInterval = WriteInterval
  cGV.DataType = DataType

  Select DataType
    Case gb.String
      cGV.Value = ""
    Case gb.Integer
      cGV.Value = CInt(0)
    Case gb.Boolean
      cGV.Value = False
  End Select

  Return cGV

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restore all globalvars from database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RestoreGlobalVars(Optional bReadTable As Boolean = True)

  Dim rResult As Result
  Dim cGV As CGlobalVarEntry

  ' Clear the GlobalVar collection
  Main.GlobalVar.Clear()

  ' Configure the system variables
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer), "Year")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer), "Month")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer), "Day")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer), "Hour")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer), "Minute")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer, -1), "Second")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Integer), "Weekday")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Time_Of_Day")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Program_Start")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, True, gb.String, 300), "Program_Uptime")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Sunrise")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Sunset")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Sunrise_Twilight")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Sunset_Twilight")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.String), "Season")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, True, gb.String, 300), "Tagline")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Boolean), "Weekend")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, True, False, gb.Boolean), "Dark")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, False, False, gb.String), "House_Mode")
  Main.GlobalVar.Add(CreateGlobalVarEntry(True, False, False, gb.Boolean), "Mute")

  ' Skip reading the database is requested
  If Not bReadTable Then Return

  Try rResult = Main.hDB.Exec("SELECT * FROM globalvars")
  If rResult Then
    If rResult.Count Then
      For Each rResult
        ' Exist = It is a system variable - the Datatype can't be overruled
        If GlobalVar.Exist(rResult!var) Then
          cGV = GlobalVar[rResult!var]
        Else
          cGV = New CGlobalVarEntry
          If rResult!datatype Then
            cGV.DataType = CInt(rResult!datatype)
          Else
            cGV.DataType = gb.String
          Endif

          GlobalVar.Add(cGV, rResult!var)
        Endif

        Select cGV.DataType
          Case gb.Boolean
            If TypeOf(rResult!value) = gb.String Then
              If UCase(rResult!value) = "TRUE" Or If UCase(rResult!value) = "T" Or If (rResult!value) = "1" Then
                cGV.Value = True
              Else
                cGV.Value = False
              Endif
            Else
              Try cGV.Value = CBool(CInt(rResult!value))
            Endif
          Case gb.Byte, gb.Short, gb.Integer ' Also convert Byte/Short to Integer
            Try cGV.Value = CInt(rResult!value)
            If Error Then cGV.Value = CInteger(0)
            cGV.DataType = gb.Integer
          Case gb.Long, gb.Single, gb.Float ' Also convert Long & Single to Float
            Try cGV.Value = CFloat(rResult!value)
            If Error Then cGV.Value = CFloat(0)
            cGV.DataType = gb.Float
          Case gb.Date
            Try cGV.Value = CDate(rResult!value)
            If Error Then cGV.Value = CDate(Now())
          Default ' if nothing matches - make it is a String
            cGV.Value = CString(rResult!value)
            cGV.DataType = gb.String
        End Select

        If Main.bDebugGlobalVar Then Main.WriteDebugLog("[GlobalVar] '" & rResult!var & "'restored with value '" & IIf(cGV.DataType = gb.Boolean, IIf(cGV.Value, "True", "False"), cGV.Value) & "'.")
      Next
      If Main.bMainDebug Then Main.WriteDebugLog("[Main] Globalvars Restored.")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' insert spaces at end of string until length reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SpaceAlignLeft(sString As String, iLength As Integer) As String

  While Len(sString) < iLength
    sString = sString & " "
  Wend
  Return sString

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' insert spaces at start of string until length reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SpaceAlign(sString As String, iLength As Integer) As String

  While Len(sString) < iLength
    sString = " " & sString
  Wend
  Return sString

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' wake up a computer by sending a WOL magic packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WakeOnLan(sMAC As String)

  Dim aMAC, aIPs, athisIP As String[]
  Dim sHWAddress, sMsg, sHost, sIP As String
  Dim iCount As Integer

  aMAC = Split(sMAC, ":")

  For iCount = 0 To 5
    sHWAddress &= aMAC[icount]
  Next
  sMsg = Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255)
  For iCount = 1 To 16
    sMsg &= sHWAddress
  Next

  ' sent it to all computers on this network
  hBroadcast = New UdpSocket As "Broadcast"
  hBroadcast.Broadcast = True
  hBroadcast.Port = 0
  hBroadcast.Bind()
  hBroadcast.TargetPort = 9

  Exec ["hostname", "-i"] To sHost
  aIPs = Split(Trim$(sHost), " ")
  For Each sIP In aIPs
    athisIP = Split(sIP, ".")
    If CInt(athisIP[0]) = 127 Then Continue
    hBroadcast.TargetHost = athisIP[0] & "." & athisIP[1] & "." & athisIP[2] & "." & "255"
    Write #hBroadcast, sMsg, Len(sMsg)
  Next
  Close hBroadcast

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Broadcast_Error()

  Select Case hBroadcast.Status
    Case Net.CannotBindSocket
      Main.WriteDebugLog("[WOL] Unable to bind to that port.")
    Case Net.CannotCreateSocket
      Main.WriteDebugLog("[WOL] The system does not allow to create a socket.")
    Case Net.CannotRead
      Main.WriteDebugLog("[WOL] Error receiving data.")
    Case Net.CannotWrite
      Main.WriteDebugLog("[WOL] Error sending data.")
  End Select

End

Public Sub DisplayBool(bSwitch As Boolean) As String

  Select bSwitch
    Case True
        Return "True"
    Case Else
        Return "False"
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' simple check for time string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function IsTime(sString As String) As Boolean

  If Len(sString) > 3 And InStr(sString, ":") Then
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' simple check for boolean string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function IsBool(sStr As String) As Boolean

  If sStr == "True" Then Return True
  If sStr == "False" Then Return True
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' calculate program uptime string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function UptimeString(lSeconds As Long) As String

  Dim lDays, lHrs, lMins, lSecs As Long

  lSecs = lSeconds Mod 60
  lMins = (lSeconds Mod 3600) \ 60
  lHrs = (lSeconds Mod (3600 * 24)) \ 3600
  lDays = lSeconds \ (3600 * 24)
  Return lDays & " " & IIf(lDays = 1, ("day"), ("days")) & ", " & lHrs & " " & IIf(lHrs = 1, ("hr"), ("hrs")) & ", " & lMins & " " & IIf(lMins = 1, ("min"), ("mins")) & ", " & ("and") & " " & lSecs & " " & IIf(lSecs = 1, ("sec"), ("secs")) & "."

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' broadcast events via UDP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BroadcastEvent(sMessage As String)

  Try Plugin.GetPluginObject("BroadcastUDP", 1).Interface.Send(sMessage)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send UDP message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendUDP(sTargetIP As String, iUDPPort As Integer, sMsg As String)

  ' get a new one
  hSendUDP = New UdpSocket As "SendUDP"
  hSendUDP.TargetPort = iUDPPort

  ' Now try to bind to the port
  hSendUDP.Bind()
  hSendUDP.TargetHost = sTargetIP
  hSendUDP.Broadcast = False
  Try Write #hSendUDP, sMsg, Len(sMsg)

  'Print "[SendUDP] " & sTargetIP & ":" & iUDPPort & " > " & sMsg
  Try Close #hSendUDP

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if program and database versions match and try to update
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckDatabaseVersion()

  Dim rResult As Result
  Dim sDBVersion, sPrgVersion, sDumpFile, sToVersion As String
  Dim iDBVersion, iPrgVersion As Integer
  Dim hMysql As Process

  sPrgVersion = sProgramVersion
  iPrgVersion = Val(Replace(sPrgVersion, ".", ""))

  ' fetch database version from database
  rResult = Main.hDB.Exec("SELECT * FROM version ORDER BY db DESC LIMIT 1 ")
  If rResult.Count = 1 Then
    sDBVersion = Str(rResult!db)
    ' convert 0.1.180 to 01180
    iDBVersion = Val(Replace(sDBVersion, ".", ""))
    If iDBVersion < iPrgVersion Then
      WriteLog("[Main] The version of your database is " & sDBVersion & " but the version of the program is " & sPrgVersion & ("!"))
      Repeat
        If bAllowAutoUpgrade Then
          If Util.ProgramExist("mysql") Then
            sToVersion = Format(Str(iDBVersion + 1), "00000")
            ' make the jump to version 1.0.000
            If sToVersion = "01210" Then sToVersion = "10000"
            sDumpFile = "upgrade/" & Replace(sDBVersion, ".", "") & "to" & sToVersion & ".sql"
            If Exist(sBaseDir &/ sDumpFile) Then
              hMysql = Shell "mysql --host=" & sSQLHost & " --user=" & sSQLUser & " --password=" & sSQLPass & " --database=" & sSQLDatabase & " --execute='SOURCE " & sBaseDir &/ sDumpFile & "'" Wait
              If hMysql.Value Then ' mysql returned an error
                WriteLog("MySQL command returned an error! The database is now at version " & sDBVersion)
                Quit
              Else
                ' check if we are there yet
                rResult = Main.hDB.Exec("SELECT * FROM version ORDER BY db DESC LIMIT 1")
                If rResult.Count = 1 Then
                  sDBVersion = Str(rResult!db)
                  ' convert 0.1.180 to 01180
                  iDBVersion = Val(Replace(sDBVersion, ".", ""))
                Endif
              Endif
            Else
              WriteLog("Couldn't find upgrade file " & sDumpFile & "! The Database is now at version " & sDBVersion)
              Quit
            Endif
            WriteLog("[Main] Database has been upgraded to version " & sDBVersion)
            If iPrgVersion = iDBVersion Then Return
          Else
            WriteLog("Couldn't find MySQL program!")
            Quit
          Endif
        Else
          WriteLog("You can run " & Application.Name & " with the -a parameter to allow automatic upgrade!")
          Quit
        Endif
      Until iPrgVersion = iDBVersion
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' some GUI related routines are placed here, so max number of
' modules for client and server can share code.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run notify-send to display notification
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub NotifySend(sTitle As String, sText As String)

  If Main.bServer Then
    Main.BroadcastEvent("[NotifySend]" & sTitle & "|" & sText & "|" & sBaseDir &/ "icons" &/ "logo.png")
  Endif

End

Public Sub ControlLed(sLed As String, sStatus As String)

  ' do nothing

End

Public Sub PLCBUSStatus(sStatus As String)

  Main.BroadcastEvent("[PLCBUSStatus]" & sStatus)

End

Public Sub RefreshDeviceList()

  Main.BroadcastEvent("[DeviceUpdate]")

End

Public Sub RefreshControlPage()

  Main.BroadcastEvent("[ControlUpdate]")

End

Public Sub RefreshPhoneCallList()

  Main.BroadcastEvent("[PhoneCallUpdate]")

End

Public Sub SendSMS(sText As String, sTo As String)

  If Plugin.IsPluginEnabled("SMS", 0) Then
    Try Plugin.GetPluginObject("SMS", 1).Interface.SendSMS(sText, sTo)
  Endif

End

Private Sub Setup_Calendar()

  Calendar.Init()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Shows the Message.Error in a popup for DomotiGa and logging for DomotiGaServer
' This is to make Plugins GUI and CLI independant
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Message_Error(sLogLabel As String, sStr As String)

  ' Replace the "\n" and add "***"
  WriteLog(sLogLabel & "ERROR: " & sStr)

End
