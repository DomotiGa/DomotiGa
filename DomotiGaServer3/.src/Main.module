' Gambas module file

' Description:
' Main.module

' DomotiGa Server - the server part of DomotiGa an open source home automation program
' Copyright (C) Ron Klinkien, The Netherlands.

' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.

' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the
' GNU General PUBLIC License for more details.

' You should have received a copy of the GNU General PUBLIC License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' this is the place where all global variables are defined
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Main
Public sProgramVersion As String = "1.0.006"
Public sBaseDir As String
Public sSettings As String = "server-domotiga.conf"
Public bMainDebug As Boolean
Public bExitProgram As Boolean ' exit program flag
Public sLanguage As String
Public bAllowAutoUpgrade As Boolean
Public bAutoDeviceCreate As Boolean

' Client/Server
Public bServer As Boolean = True
Public hBroadcastEvent As UdpSocket
Public aBroadcastAddrs As New String[]
Public sOurIPAddress As String

' Debug
Public bEventsDebug As Boolean
Public bDevicesDebug As Boolean
Public bEnergyDebug As Boolean

' Message counters
Public iNewMails As Integer
Public iNewCalls As Integer
Public iNewVoicemails As Integer

' Logfiles
Public iLogBuffer As Integer = 10000 ' default size of buffer after logwindows gets flushed
Public sMainLogFile As String
Public sSpeakLogFile As String
Public sDebugLogFile As String
Public sDomoZWaveFile As String
Public hMainLogFile As File  ' main log file
Public hSpeakLogFile As File ' speak log file
Public hDebugLogFile As File ' debug log file
Public sLogPrefix As String

' Collection with Global Variables (these survive a program restart)
Public GlobalVar As New Collection

' Time and Date related
Public bNew_Minute As Boolean
Public bNew_Month As Boolean
Public dTime As Date
Public dPrev_Time As Date

' Timers
Public tMainFlush As Timer
Public iMainFlushTime As Integer = 3000
Public tMainSleep As Timer
Public iMainSleepTime As Integer = 50

' MySQL
Public sSQLHost As String
Public sSQLUser As String
Public sSQLPass As String
Public sSQLDatabase As String
Public bSQLDebug As Boolean
Public hDB As New Connection

' Sound
Public bSoundEnabled As Boolean ' enable sound support
Public bSoundDebug As Boolean ' debug sound
Public iSoundVolume As Integer ' default volume level

' VoiceText
Public bVoiceTextEnabled As Boolean ' enable TTS support
Public sVoiceTextEngine As String ' currently only 'cepstral' and 'espeak' are supported
Public sVoiceTextVoicesMale As String ' list of voices, first is default
Public sVoiceTextVoicesFemale As String ' list of voices, first is default
Public sVoiceTextPrefixCmd As String ' prefix command like 'padsp'
Public bVoiceTextDebug As Boolean ' debug TTS

' Astro
Public iAstroLatitude As Float
Public iAstroLongitude As Float
Public iAstroTimezone As Float
Public sAstroSeasons As String
Public sAstroSeasonStarts As String
Public sAstroTwilight As String
Public bAstroDebug As Boolean
Public bAstroDST As Boolean
Public sTemperature As String
Public sCurrency As String

' Astro MoonPhase
Public MoonPhase As String
Public MoonZodiac As String
Public MoonAge As Integer
Public MoonDistance As Float
Public MoonLatitude As Float
Public MoonLongitude As Float
Public MoonIsLeapYear As Boolean

' Thermostat
Public bThermostatEnabled As Boolean
Public bThermostatDebug As Boolean
Public iThermostatPolltime As Integer

' X10Cmd
Public bX10CmdEnabled As Boolean
Public sX10CmdCommand As String
Public bX10CmdMonitor As Boolean
Public bX10CmdGlobalX10 As Boolean
Public iX10CmdType As Integer
Public bX10CmdDebug As Boolean

' CTX35
Public bCTX35Enabled As Boolean
Public sCTX35SerialPort As String
Public sCTX35Baudrate As String
Public iCTX35PollTime As Integer
Public bCTX35Debug As Boolean
Public bCTX35GlobalX10 As Boolean
Public hCTX35 As CCTX35

' SMS Modem
Public bSMSEnabled As Boolean
Public sSMSSerialPort As String
Public sSMSBaudrate As String
Public sSMSPIN As String
Public sSMSServiceCentre As String
Public sSMSContact As String
Public iSMSPollTime As Integer
Public bSMSDebug As Boolean
Public hSMS As CSMS

' RFXCom Receiver
Public bRFXComRXEnabled As Boolean
Public sRFXComRXTCPHost As String
Public iRFXComRXTCPPort As Integer
Public sRFXComRXSerialPort As String
Public sRFXComRXBaudrate As String
Public sRFXComRXType As String
Public hRFXComRX As CRFXComRX
Public bRFXComRXRelayEnabled As Boolean
Public iRFXComRXRelayPort As Integer
Public bRFXComRXGlobalX10 As Boolean
Public bRFXComRXDebug As Boolean

' RFXCom Transmitter
Public bRFXComTXEnabled As Boolean
Public sRFXComTXTCPHost As String
Public iRFXComTXTCPPort As Integer
Public sRFXComTXSerialPort As String
Public sRFXComTXBaudrate As String
Public sRFXComTXType As String
Public hRFXComTX As CRFXComTX
Public bRFXComTXHandshake As Boolean
Public bRFXComTXRelayEnabled As Boolean
Public iRFXComTXRelayPort As Integer
Public bRFXComTXDisableX10 As Boolean
Public bRFXComTXEnableARC As Boolean
Public bRFXComTXEnableHarrison As Boolean
Public bRFXComTXEnableKoppla As Boolean
Public bRFXComTXRFXmitter As Boolean
Public bRFXComTXDebug As Boolean

' UPS
Public bUPSEnabled As Boolean
Public sUPSTCPHost As String
Public iUPSTCPPort As Integer
Public iUPSPollTime As Integer
Public bUPSDebug As Boolean
Public hUPS As CUPS

' E-mail
Public bEmailEnabled As Boolean
Public sEmailSMTPServer As String
Public iEmailSMTPPort As Integer
Public sEmailFromAddress As String
Public sEmailToAddress As String
Public sEmailSubject As String
Public bEmailDebug As Boolean

' GMail RSS
Public bGmailEnabled As Boolean
Public sGmailUser As String
Public sGmailPassword As String
Public iGmailPollTime As Integer
Public bGmailDebug As Boolean

' Google Latitude
Public bGLatitudeEnabled As Boolean
Public iGLatitudeRangeType As Integer
Public iGLatitudeRange As Integer
Public iGLatitudePollTime As Integer
Public bGLatitudeDebug As Boolean

' Google Translate
Public bGTranslateEnabled As Boolean = False ' use Google Translate
Public sGTranslateAPIKey As String ' Google Translate (paid) API key

' Webserver
Public bWebserverEnabled As Boolean
Public sWebserverDocRoot As String
Public iWebserverHTTPPort As Integer
Public bWebserverDebug As Boolean
Public hWebserver As CWebserver

' GPS
Public bGPSEnabled As Boolean
Public sGPSSerialPort As String
Public sGPSBaudrate As String
Public iGPSPollTime As Integer
Public bGPSDebug As Boolean
Public hGPS As CGPS

' Temp08
Public bTemp08Enabled As Boolean
Public sTemp08SerialPort As String
Public sTemp08Baudrate As String
Public bTemp08Debug As Boolean
Public hTemp08 As CTemp08

' VISCA
Public bVISCAEnabled As Boolean
Public sVISCASerialPort As String
Public sVISCABaudrate As String
Public iVISCACameraAddress As Integer
Public bVISCADebug As Boolean
Public sVISCAVideoDevice As String
Public hVISCA As CVISCA

' VideoServer
Public bVideoServerEnabled As Boolean
Public sVideoServerAddress As String
Public iVideoServerPort As Integer
Public sVideoServerUser As String
Public sVideoServerPassword As String
Public bVideoServerDebug As Boolean
Public sVideoServerChannel1 As String
Public sVideoServerChannel2 As String
Public sVideoServerChannel3 As String
Public sVideoServerChannel4 As String

' HDDTemp
Public bHDDTempEnabled As Boolean
Public sHDDTempTCPHost As String
Public iHDDTempTCPPort As Integer
Public iHDDTempPollTime As Integer
Public iHDDTempThreshold As Integer
Public bHDDTempDebug As Boolean

' RRDTool
Public bRRDToolEnabled As Boolean
Public iRRDToolPollTime As Integer
Public sRRDToolRRA As String
Public bRRDToolDebug As Boolean

' Asterisk *
Public bAsteriskEnabled As Boolean
Public sAsteriskTCPHost As String
Public iAsteriskTCPPort As Integer
Public iAsteriskPollTime As Integer
Public sAsteriskUser As String
Public sAsteriskPassword As String
Public bAsteriskDebug As Boolean
Public hAsterisk As CAsterisk

' Bluetooth
Public bBluetoothEnabled As Boolean
Public sBluetoothDevice As String
Public iBluetoothThreshold As Integer
Public iBluetoothPollTime As Integer
Public bBluetoothDebug As Boolean

' Weeder I/O
Public bWeederEnabled As Boolean
Public sWeederSerialPort As String
Public bWeederDebug As Boolean
Public hWeeder As CWeeder

' TV Guide
Public bTVGuideEnabled As Boolean
Public sTVGuideXMLGrabCommand As String
Public sTVGuideXMLFile As String
Public bTVGuideDebug As Boolean

' Server Stats
Public bServerStatsEnabled As Boolean
Public sServerStatsName As String
Public bServerStatsDebug As Boolean

' IRMan Infrared
Public bIRManEnabled As Boolean
Public sIRManSerialPort As String
Public bIRManDebug As Boolean
Public hIRMan As CIRMan

' WakeOnLan
Public hBroadcast As UdpSocket

' Plugwise
Public bPlugwiseEnabled As Boolean
Public sPlugwiseSerialPort As String
Public iPlugwisePollTime As Integer
Public bPlugwiseDebug As Boolean
Public hPlugwise As CPlugwise

' Fritz!Box
Public bFritzBoxEnabled As Boolean
Public sFritzBoxTCPHost As String
Public bFritzBoxDebug As Boolean
Public hFritzBox As CFritzBox

' XMLRPC
Public bXMLRPCEnabled As Boolean
Public iXMLRPCMaxConn As Integer
Public iXMLRPCHTTPPort As Integer
Public bXMLRPCDebug As Boolean
Public hXMLRPC As CXMLRPC

' Broadcast UDP
Public bBroadcastUDPEnabled As Boolean

' Bwired Domotica World
Public bBwiredMapEnabled As Boolean
Public sBwiredMapTitle As String
Public sBwiredMapWebsite As String
Public sBwiredMapWebsitePicUrl As String
Public sBwiredMapUser As String
Public sBwiredMapPassword As String
Public sBwiredMapScreenName As String
Public sBwiredMapGpsLat As String
Public sBwiredMapGpsLong As String
Public sBwiredMapCity As String
Public iBwiredMapPushTime As Integer
Public bBwiredMapDebug As Boolean

' Twitter
Public bTwitterEnabled As Boolean
Public sTwitterUser As String
Public sTwitterPassword As String
Public bTwitterTimeStamp As Boolean
Public bTwitterDebug As Boolean

' DSC Security
Public bDSCEnabled As Boolean
Public sDSCSerialPort As String
Public sDSCBaudrate As String
Public iDSCType As Integer
Public sDSCMasterCode As String
Public bDSCDebug As Boolean
Public hDSC As CDSC

' Visonic Security
Public bVisonicEnabled As Boolean
Public sVisonicSerialPort As String
Public iVisonicType As Integer
Public sVisonicMasterCode As String
Public bVisonicDebug As Boolean
Public hVisonic As CVisonic

' KNX/EIB
Public bEIBEnabled As Boolean
Public sEIBTCPHost As String
Public iEIBTCPPort As Integer
Public bEIBDebug As Boolean
Public hEIB As CEIB

' Domotica
Public bDomoticaEnabled As Boolean
Public sDomoticaSerialPort As String
Public bDomoticaDebug As Boolean
Public hDomotica As CDomotica

' Digitemp
Public bDigitempEnabled As Boolean
Public sDigitempCommand As String
Public sDigitempConfig As String
Public iDigitempReadTime As Integer
Public iDigitempPollTime As Integer
Public bDigitempDebug As Boolean

' Z-Wave
Public bZWaveEnabled As Boolean
Public sZWaveSerialPort As String
Public bZWaveDebug As Boolean
Public iZWavePollTime As Integer
Public sZWavePollTimeListening As String
Public bZWaveEnablePollListening As Boolean
Public sZWavePollTimeSleeping As String
Public bZWaveEnablePollSleeping As Boolean
Public sZWaveUpdateNeighbor As String
Public bZWaveEnableUpdateNeighbor As Boolean
Public hZWave As CZWave

' One-Wire Weather
Public bOWWEnabled As Boolean
Public sOWWTCPHost As String
Public iOWWTCPPort As Integer
Public sOWWServerType As String
Public bOWWDebug As Boolean
Public hOWWTCP As COWW
Public hOWWUDP As COWW

' LIRC
Public bLIRCEnabled As Boolean
Public sLIRCTCPHost As String
Public iLIRCTCPPort As Integer
Public bLIRCDebug As Boolean
Public hLIRC As CLIRC

' Pachube
Public bPachubeEnabled As Boolean
Public iPachubeFeed As Integer
Public iPachubePushTime As Integer
Public sPachubeAPIKey As String
Public bPachubeDebug As Boolean

' JeeLabs JeeLink
Public bJeeLabsEnabled As Boolean
Public sJeeLabsSerialPort As String
Public sJeeLabsBaudrate As String
Public bJeeLabsDebug As Boolean
Public hJeeLabs As CJeeLabs

' Ping
Public bPingEnabled As Boolean
Public iPingPollTime As Integer
Public bPingDebug As Boolean

' PLCBUS
Public bPLCBUSEnabled As Boolean
Public sPLCBUSSerialPort As String
Public sPLCBUSUserCode As String
Public sPLCBUSBaudrate As String
Public iPLCBUSPollTime As Integer
Public bPLCBUSDebug As Boolean
Public bPLCBUSThreePhase As Boolean
Public sPLCBUSHouseCodes As String
Public bPLCBUSAck As Boolean
Public hPLCBUS As CPLCBUS

' CallerID
Public bCallerIDEnabled As Boolean
Public sCallerIDCountryCode As String
Public sCallerIDAreaCode As String
Public sCallerIDNationalPrefix As String
Public sCallerIDInternationalPrefix As String
Public bCallerIDAutoCreateContacts As Boolean
Public bCallerIDDebug As Boolean

' TemperatureNu
Public bTemperaturNuEnabled As Boolean
Public sTemperaturNuCity As String
Public sTemperaturNuId As Integer
Public iTemperaturNuPushTime As Integer
Public bTemperaturNuDebug As Boolean
Public iTemperaturNuDeviceId As Integer
Public sTemperaturNuDeviceValue As String

' PVoutput
Public bPVoutputEnabled As Boolean
Public sPVoutputApi As String
Public sPVoutputId As String
Public iPVoutputPushTime As Integer
Public bPVoutputDebug As Boolean
Public iPVoutputDeviceId As Integer
Public sPVoutputDeviceValue As String
Public iPVoutputTempDeviceId As Integer
Public sPVoutputTempDeviceValue As String
Public iPVoutputUsageDeviceId As Integer
Public sPVoutputUsageDeviceValue As String

' SqueezeServer
Public bSqueezeServerEnabled As Boolean
Public sSqueezeServerTCPHost As String
Public iSqueezeServerTCPPort As Integer
Public bSqueezeServerDebug As Boolean
Public hSqueezeServer As CSqueezeServer

' LEDMatrix
Public bLEDMatrixEnabled As Boolean
Public sLEDMatrixSerialPort As String
Public sLEDMatrixID As String
Public iLEDMatrixColor As Integer
Public iLEDMatrixSpeed As Integer
Public bLEDMatrixDebug As Boolean
Public hLEDMatrix As CLEDMatrix

' WeatherBug
Public bWeatherBugEnabled As Boolean
Public sWeatherBugID As String
Public sWeatherBugCity As String
Public sWeatherBugCityCode As String
Public sWeatherBugCountryName As String
Public bWeatherBugDebug As Boolean

' EZcontrol
Public bEZcontrolEnabled As Boolean
Public sEZcontrolUDPHost As String
Public iEZcontrolUDPPort As Integer = 7042
Public bEZcontrolDebug As Boolean
Public hEZcontrol As CEZcontrol

' Current Cost
Public bCurrentCostEnabled As Boolean
Public sCurrentCostSerialPort As String
Public sCurrentCostBaudrate As String
Public bCurrentCostDebug As Boolean
Public hCurrentCost As CCurrentCost

' Denon
Public bDenonEnabled As Boolean
Public sDenonTCPHost As String
Public iDenonTCPPort As Integer
Public sDenonSerialPort As String
Public sDenonBaudrate As String
Public sDenonType As String
Public bDenonDebug As Boolean
Public hDenon As CDenon

' Pioneer
Public bPioneerEnabled As Boolean
Public sPioneerTCPHost As String
Public iPioneerTCPPort As Integer
Public sPioneerSerialPort As String
Public sPioneerBaudrate As String
Public sPioneerType As String
Public bPioneerDebug As Boolean
Public hPioneer As CPioneer

' IRTrans
Public bIRTransEnabled As Boolean
Public sIRTransTCPHost As String
Public iIRTransTCPPort As Integer
Public bIRTransDebug As Boolean
Public hIRTrans As CIRTrans

' Mochad
Public bMochadEnabled As Boolean
Public sMochadTCPHost As String
Public iMochadTCPPort As Integer
Public bMochadDebug As Boolean
Public bMochadGlobalX10 As Boolean
Public hMochad As CMochad

' Onkyo/Intergra
Public bOnkyoEnabled As Boolean
Public sOnkyoTCPHost As String
Public iOnkyoTCPPort As Integer
Public sOnkyoSerialPort As String
Public sOnkyoBaudrate As String
Public sOnkyoType As String
Public bOnkyoDebug As Boolean
Public hOnkyo As COnkyo

' Anel PwrCtrl
Public bPwrCtrlEnabled As Boolean
Public iPwrCtrlUDPRead As Integer
Public iPwrCtrlUDPSend As Integer
Public bPwrCtrlDebug As Boolean
Public sPwrCtrlUserPw As String
Public hPwrCtrl As CPwrCtrl

' SharpTV
Public bSharpTVEnabled As Boolean
Public sSharpTVTCPHost As String
Public iSharpTVTCPPort As Integer
Public sSharpTVSerialPort As String
Public sSharpTVBaudrate As String
Public sSharpTVType As String
Public bSharpTVDebug As Boolean
Public hSharpTV As CSharpTV

' iViewer
Public bIViewerEnabled As Boolean
Public iIViewerTCPPort As Integer
Public bIViewerDebug As Boolean
Public sIViewerPassword As String
Public hIViewer As CIViewer

' LGTV
Public bLGTVEnabled As Boolean
Public sLGTVTCPHost As String
Public iLGTVTCPPort As Integer
Public sLGTVSerialPort As String
Public sLGTVBaudrate As String
Public sLGTVType As String
Public bLGTVDebug As Boolean
Public hLGTV As CLGTV

' iPort
Public bIPortEnabled As Boolean
Public sIPortTCPHost As String
Public iIPortTCPPort As Integer
Public sIPortSerialPort As String
Public sIPortBaudrate As String
Public sIPortType As String
Public bIPortDebug As Boolean
Public hIPort As CIPort

' Velleman K8055
Public bK8055Enabled As Boolean
Public sK8055SerialPort As String
Public iK8055BoardAddress As Integer
Public iK8055PollTime As Integer
Public iK8055DebounceTime1 As Integer
Public iK8055DebounceTime2 As Integer
Public bK8055Debug As Boolean
Public hK8055 As CK8055

' OWFS
Public bOWFSEnabled As Boolean
Public iOWFSPollTime As Integer
Public sOWFSBaseDir As String
Public bOWFSCached As Boolean
Public bOWFSDebug As Boolean
Public hOWFS As COWFS

' CUL
Public bCULEnabled As Boolean
Public sCULTCPHost As String
Public iCULTCPPort As Integer
Public sCULSerialPort As String
Public sCULBaudrate As String
Public sCULType As String
Public sCULFHTid As String
Public hCUL As CCUL
Public iCULModel As Integer
Public bCULDebug As Boolean

' xPL
Public bxPLEnabled As Boolean
Public ixPLHeartBeatTime As Integer
Public bxPLDebug As Boolean
Public hxPL As CxPL

' RFXCom xPL
Public bRFXComxPLEnabled As Boolean
Public sRFXComxPLRXAddress As String
Public sRFXComxPLTXAddress As String
Public bRFXComxPLOldAddrFmt As Boolean
Public bRFXComxPLGlobalX10 As Boolean
Public bRFXComxPLDebug As Boolean
Public hRFXComxPL As CRFXComxPL

' Shell
Public bShellEnabled As Boolean
Public iShellPollTime As Integer
Public bShellDebug As Boolean

' TelnetServer
Public bTelnetServerEnabled As Boolean
Public iTelnetServerPort As Integer
Public bTelnetServerDebug As Boolean
Public hTelnetServer As CTelnetServer

' RFXCom Tranceiver
Public bRFXComTRXEnabled As Boolean
Public sRFXComTRXTCPHost As String
Public iRFXComTRXTCPPort As Integer
Public sRFXComTRXSerialPort As String
Public sRFXComTRXBaudrate As String
Public sRFXComTRXType As String
Public hRFXComTRX As CRFXComTRX
Public bRFXComTRXRelayEnabled As Boolean
Public iRFXComTRXRelayPort As Integer
Public bRFXComTRXGlobalX10 As Boolean
Public bRFXComTRXOldAddrFmt As Boolean
Public bRFXComTRXDebug As Boolean

' HomeMatic (Conrad, ELV)
Public bHMEnabled As Boolean
Public sHMTCPHost As String
Public iHMTCPPort As Integer
Public hHM As CHomeMatic
Public bHMDebug As Boolean
Public sHMhmid As String
Public iHM_Pairing As Boolean
Public iHM_PairSer As Boolean
Public iHMPairSec As Integer

' Ncid
Public bNcidEnabled As Boolean
Public sNcidTCPHost As String
Public iNcidTCPPort As Integer
Public bNcidDebug As Boolean
Public hNcid As CNcid

' OpenTherm gateway
Public bOpenThermEnabled As Boolean
Public sOpenThermSerialPort As String
Public iOpenThermPollTime As Integer
Public sOpenThermThermostat As String
Public sOpenThermTemperatureOverride As String
Public bOpenThermSyncClock As Boolean
Public bOpenThermDebug As Boolean
Public sOpenThermTCPhost As String
Public sOpenThermTCPport As String
Public sOpenThermType As String
Public bOpenThermRelayEnabled As Boolean
Public iOpenThermRelayPort As Integer
Public hOpenTherm As COpenTherm

' SmartMeter
Public bSmartMeterEnabled As Boolean
Public sSmartMeterTCPHost As String
Public iSmartMeterTCPPort As Integer
Public sSmartMeterSerialPort As String
Public sSmartMeterBaudrate As String
Public iSmartMeterParity As Integer
Public iSmartMeterDatabits As Integer
Public iSmartMeterStopbits As Integer
Public sSmartMeterType As String
Public bSmartMeterDebug As Boolean
Public hSmartMeter As CSmartMeter

' XBMC xPL
Public bXBMCxPLEnabled As Boolean
Public sXBMCxPLRXAddress As String
Public sXBMCxPLTXAddress As String
Public bXBMCxPLDebug As Boolean
Public hXBMCxPL As CXBMCxPL

' MQTT
Public bMQTTEnabled As Boolean
Public sMQTTTCPHost As String
Public iMQTTTCPPort As Integer
Public sMQTTUsername As String
Public sMQTTPassword As String
Public sMQTTPubTopic As String
Public sMQTTSubTopic As String
Public iMQTTHeartbeat As Integer
Public bMQTTDebug As Boolean
Public hMQTT As CMQTT

' Meteohub
Public bMeteohubEnabled As Boolean
Public sMeteohubFetchURL As String
Public iMeteohubPolltime As Integer
Public bMeteohubDebug As Boolean
Public hMeteohub As CMeteohub

' ELV MAX!
Public bELVMAXEnabled As Boolean
Public sELVMAXTCPHost As String
Public iELVMAXTCPPort As Integer
Public bELVMAXDebug As Boolean
Public hELVMAX As CELVMAX

' YouLess
Public bYouLessEnabled As Boolean
Public iYouLessPolltime As Integer
Public bYouLessDebug As Boolean
Public hYouLess As CYouLess

' KMTronicUDP
Public bKMTronicUDPEnabled As Boolean
Public iKMTronicUDPPolltime As Integer
Public iKMTronicUDPPort As Integer
Public bKMTronicUDPDebug As Boolean
Public hKMTronicUDP As CKMTronicUDP

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' this is where domotiga starts
' determine basedir, set language and run application
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Main() As Boolean

  Dim sBackTrace, sTrace As String

  ' determine basedir
  If Exist(Application.Path &/ "logs") Then
    sBaseDir = Application.Path
  Else If Exist(Mid$(Application.Path &/ "logs", 1, RInStr(Application.Path, "/")))
    sBaseDir = Mid$(Application.Path, 1, RInStr(Application.Path, "/"))
  Else
    Main.WriteLog(("Error: Couldn't determine DomotiGaServer's base directory."))
    Quit
  End If

  ' parse cmd line arguments
  ParseArgs()

  ' load program settings
  Main.GetConfig()
  ' set language
  System.Language = sLanguage
  ' start different sections
  Main.Setup_BroadcastAddrs()
  Main.Setup_Logfiles()
  Main.DisplayProgramInfo()
  Main.WriteLog(("Checking directory structure ..."))
  Main.CreateDirectoryTree()

  ' connect to the mysql database
  WriteLog(("Connecting to database ..."))
  If Not Main.ConnectDatabase() Then
    Main.WriteLog(("Error: Couldn't open the database (called '") & Main.sSQLDatabase & ("') Check '") & Main.sSettings & ("' or create & load a database."))
    Quit
  End If

  ' check versions
  CheckDatabaseVersion()

  ' start all setups for modules
  Main.WriteLog(("Loading modules ..."))
  Main.Setup()

  ' update house status
  Main.WriteLog(("Starting main program ..."))
  If Not Main.GlobalVar["House_Mode"] Then Main.GlobalVar["House_Mode"] = "normal"
  If Len(Main.GlobalVar["Mute"]) < 1 Then Main.GlobalVar["Mute"] = False
  Main.ChangeHouseMode(Main.GlobalVar["House_Mode"])
  Main.ChangeMuteMode(Main.GlobalVar["Mute"])

  Main.WriteLog(("Entering main program loop ..."))

  UpdateGlobalVars()
  Check_for_Action()
  SetupTimers() ' start timers

  If Main.bMainDebug Then Main.WriteLog(("Main Debug enabled."))
  Main.GlobalVar["Tagline"] = Main.Random_Text("remarks_tags")
  Main.WriteLog("The current tagline is '" & Main.GlobalVar["Tagline"] & "'")
  Sounds.PlaySnd("click.wav")

  If Main.GlobalVar["EmailCount"] Then Main.iNewMails = Main.GlobalVar["EmailCount"]
  If Main.GlobalVar["CallCount"] Then Main.iNewCalls = Main.GlobalVar["CallCount"]
  If Main.GlobalVar["VoiceMailCount"] Then Main.iNewVoicemails = Main.GlobalVar["VoiceMailCount"]

  ' exit program

Catch ' error trap
  For Each sBackTrace In Error.Backtrace
    sTrace &= sBackTrace & "\n"
  Next
  Main.WriteLog(("Error: ") & Error.Text & " " & Error.Code & " at\n" & sTrace)
  Main.WriteLog(("Program abort."))
  Quit

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse command line arguments
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function ParseArgs()

  Dim sArg As String
  Dim iCnt As Integer

  For iCnt = 1 To Application.Args.Count - 1
    sArg = Application.Args[iCnt]
    If Left(sArg) = "-" Then
      If sArg = "-d" Then
        ' start as a daemon in the background
        Application.Daemon = True
      Else If sArg = "-h" Then
        ' display help info
        Print Application.Name & " version " & sProgramVersion
        Print "Copyright(C) 2008-" & Year(Now) & " Ron Klinkien"
        Print
        Print "This program is free software; you can redistribute it and/or"
        Print "modify it under the terms of the GNU General Public License as"
        Print "published by the Free Software Foundation; either version 2, or"
        Print "(at your option) any later version."
        Print
        Print "Usage: " & Application.Args[0] & " [options]"
        Print
        Print "Options:"
        Print " -h              display this help"
        Print " -a              allow automatic upgrade"
        Print " -c <configfile> specify config file"
        Print
        Quit
      Else If sArg = "-a" Then
        ' allow automatic database upgrade
        bAllowAutoUpgrade = True
      Else If Left(sArg, 2) = "-c" Then
        ' run with specified config file
        If Len(sArg) > 2 Then
          sSettings = Trim(Right(sArg, Len(sArg) - 2))
        Else
          If iCnt < (Application.Args.Count - 1) Then
            sSettings = Trim(Application.Args[iCnt + 1])
          Else
            Main.WriteLog(("Error: No config filename specified, using default ..."))
          Endif
        Endif
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the mysql database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectDatabase() As Boolean

  ' try to close the connection first
  Try hDB.Close

  ' get a new one
  With hDB
    .Type = "mysql"
    .Host = sSQLHost
    .Login = sSQLUser
    .Password = sSQLPass
    .Name = sSQLDatabase
    .Open
  End With

  ' all ok
  Return True

Catch ' some errors
   Main.WriteLog(("MySQL Error: ") & ERROR.Text)
   Return False

End

'-------------------------------------------------------
' update the mysql database
'-------------------------------------------------------
Public Function UpdateDatabase() As Boolean

  Dim rResult As Result
  Dim sSalt, sMD5 As String

  rResult = Main.hDB.Exec("SELECT username, password FROM users WHERE NOT ISNULL(password) AND (length(password) != 33 OR (length(password) = 33 AND substring(password,1,3) != 'MD5'))")
  ' update the 'users' table in database: set all passwords to an md5 hash
  For Each rResult
    sMD5 = Crypt.MD5(rResult!password)
    sSalt = Right$(Left$(sMD5, 11), 8)
    sMD5 = Right$(sMD5, 22)
    Main.hDB.Exec("UPDATE users SET password = &1 WHERE username = &2", "MD5" & sSalt & sMD5, rResult!username)
    Main.WriteLog(("MySQL users table password changed to MD5 hash for user '") & rResult!username & "'")
  Next
  Return True

Catch ' some errors in update db
  Main.WriteLog(("MySQL update error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display startup information
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DisplayProgramInfo()

  Dim sUptime, sModified As String

  With Stat(Application.Path)
    sModified = Format$(.LastModified, "yyyy-mm-dd hh:nn:ss")
  End With

  Exec ["uptime"] To sUptime
  WriteLog(("  ---- Program Restart ----"))
  WriteLog(("Starting ") & Application.Name & " V" & Main.sProgramVersion & (" last updated on ") & sModified)
  WriteLog(("Running on host '") & System.Host & "' (pid " & Application.Id & (") as user '") & System.User.Name & "' (id " & System.User.Id & ")" & (" with language ") & System.Language)
  WriteLog(("Program base directory is '") & sBaseDir & "'.")
  WriteLog(("Database settings are loaded from '") & sSettings & "'.")
  WriteLog(("Active logfiles are '") & sMainLogFile & "', '" & sSpeakLogFile & ("' and '") & sDebugLogFile & "'.")
  WriteLog(("Running on Gambas version ") & GetGambasVersion())
  WriteLog(("Server uptime is ") & Left$(Replace$(sUptime, "  ", " "), -1))

  ' check if started as superuser
  If System.User.Id = 0 Then
    WriteLog(("******* You have started DomotiGaServer as superuser/root!\nDoing this imposes a huge security risk!\nSo you have been warned! *******"))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create main directory structure if incomplete
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateDirectoryTree()

  If Not Exist(sBaseDir) Then
    WriteLog(("Creating default directory structure."))
    Try Mkdir (sBaseDir)
    Try Mkdir (sBaseDir &/ "logs")
    Try Mkdir (sBaseDir &/ "www")
    Try Mkdir (sBaseDir &/ "icons")
    Try Mkdir (sBaseDir &/ "images")
    Try Mkdir (sBaseDir &/ "sounds")
    Try Mkdir (sBaseDir &/ "rrd")
    Try Mkdir (sBaseDir &/ "rrd/graphs")
    Try Mkdir (sBaseDir &/ "tvguide")
    Try Mkdir (sBaseDir &/ "tvguide/imdb")
    Try Mkdir (sBaseDir &/ "tvguide/cache")
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save settings to file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetConfig()

  SetConfigValue("MySQL/Host", sSQLHost)
  SetConfigValue("MySQL/User", sSQLUser)
  SetConfigValue("MySQL/Password", sSQLPass)
  SetConfigValue("MySQL/Database", sSQLDatabase)
  SetConfigValue("Program/Language", sLanguage)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' load config, create default config file if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetConfig()

  Dim hSettings As Settings

  ' load basic settings from file, if the settings file is not
  ' found then create one with default settings
  If Not Exist(sBaseDir &/ sSettings) Then
    hSettings = New Settings(sBaseDir &/ sSettings)
    hSettings["MySQL/Host"] = "localhost"
    hSettings["MySQL/User"] = "domouser"
    hSettings["MySQL/Password"] = "kung-fu"
    hSettings["MySQL/Database"] = "domotiga"
    hSettings["Program/Language"] = "en_US.UTF-8"
    hSettings.Save
    ' re-load
    GetConfig()
    Main.WriteLog(("Couldn't open config file called '") & Main.sSettings & ("'. Created one with default settings!"))
  Else
    sSQLHost = GetConfigValue("MySQL/Host", "localhost")
    sSQLUser = GetConfigValue("MySQL/User", "domouser")
    sSQLPass = GetConfigValue("MySQL/Password", "kung-fu")
    sSQLDatabase = GetConfigValue("MySQL/Database", "domotiga")
    sLanguage = GetConfigValue("Program/Language", "en_US.UTF-8")
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get all settings from settings_ database tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetSettings()

  Dim rResult As Result

  ' Main
  rResult = GetSettingTable("main")
  bMainDebug = rResult!debug
  bDevicesDebug = rResult!debugdevices
  bEventsDebug = rResult!debugevents
  bEnergyDebug = rResult!debugenergy
  iMainSleepTime = rResult!sleeptime
  iMainFlushTime = rResult!flushtime
  iLogBuffer = rResult!logbuffer
  bAutoDeviceCreate = rResult!autodevicecreate
  sLogPrefix = rResult!logprefix

  ' Sound
  rResult = GetSettingTable("sound")
  bSoundEnabled = rResult!enabled
  bSoundDebug = rResult!debug
  iSoundVolume = rResult!volume

  ' Voice Text
  rResult = GetSettingTable("voicetext")
  bVoiceTextEnabled = rResult!enabled
  sVoiceTextEngine = rResult!engine
  sVoiceTextPrefixCmd = rResult!prefixcmd
  sVoiceTextVoicesMale = rResult!voicesmale
  sVoiceTextVoicesFemale = rResult!voicesfemale
  bVoiceTextDebug = rResult!debug

  ' Astro and Location
  rResult = GetSettingTable("astro")
  iAstroLatitude = rResult!latitude
  iAstroLongitude = rResult!longitude
  iAstroTimezone = rResult!timezone
  sAstroTwilight = rResult!twilight
  sAstroSeasons = rResult!seasons
  sAstroSeasonStarts = rResult!seasonstarts
  bAstroDebug = rResult!debug
  sTemperature = rResult!temperature
  sCurrency = rResult!currency
  bAstroDST = rResult!dst

  ' X10Cmd
  rResult = GetSettingTable("x10cmd")
  bX10CmdEnabled = rResult!enabled
  sX10CmdCommand = rResult!command
  bX10CmdMonitor = rResult!monitor
  bX10CmdGlobalX10 = rResult!globalx10
  bX10CmdDebug = rResult!debug
  iX10CmdType = rResult!type

  ' Thermostat
  rResult = GetSettingTable("thermostat")
  bThermostatEnabled = rResult!enabled
  bThermostatDebug = rResult!debug
  iThermostatPolltime = rResult!polltime

  ' CTX35
  rResult = GetSettingTable("ctx35")
  bCTX35Enabled = rResult!enabled
  sCTX35SerialPort = rResult!serialport
  sCTX35Baudrate = rResult!baudrate
  iCTX35PollTime = rResult!polltime
  bCTX35GlobalX10 = rResult!globalx10
  bCTX35Debug = rResult!debug

  ' SMS
  rResult = GetSettingTable("sms")
  bSMSEnabled = rResult!enabled
  sSMSSerialPort = rResult!serialport
  sSMSBaudrate = rResult!baudrate
  iSMSPollTime = rResult!polltime
  sSMSPIN = rResult!pin
  sSMSServiceCentre = rResult!servicecentre
  sSMSContact = rResult!contact
  bSMSDebug = rResult!debug

  ' RFXCom Receiver
  rResult = GetSettingTable("rfxcomrx")
  bRFXComRXEnabled = rResult!enabled
  sRFXComRXTCPHost = rResult!tcphost
  iRFXComRXTCPPort = rResult!tcpport
  sRFXComRXType = rResult!type
  sRFXComRXSerialPort = rResult!serialport
  sRFXComRXBaudrate = rResult!baudrate
  bRFXComRXRelayEnabled = rResult!relayenabled
  iRFXComRXRelayPort = rResult!relayport
  bRFXComRXGlobalX10 = rResult!globalx10
  bRFXComRXDebug = rResult!debug

  ' RFXCom Transmitter
  rResult = GetSettingTable("rfxcomtx")
  bRFXComTXEnabled = rResult!enabled
  sRFXComTXTCPHost = rResult!tcphost
  iRFXComTXTCPPort = rResult!tcpport
  sRFXComTXType = rResult!type
  sRFXComTXSerialPort = rResult!serialport
  sRFXComTXBaudrate = rResult!baudrate
  bRFXComTXHandshake = rResult!handshake
  bRFXComTXRelayEnabled = rResult!relayenabled
  iRFXComTXRelayPort = rResult!relayport
  bRFXComTXDisableX10 = rResult!disablex10
  bRFXComTXEnableARC = rResult!enablearc
  bRFXComTXEnableHarrison = rResult!enableharrison
  bRFXComTXEnableKoppla = rResult!enablekoppla
  bRFXComTXRFXmitter = rResult!rfxmitter
  bRFXComTXDebug = rResult!debug

  ' E-Mail
  rResult = GetSettingTable("email")
  bEmailEnabled = rResult!enabled
  sEmailSMTPServer = rResult!smtpserver
  iEmailSMTPPort = rResult!smtpport
  sEmailFromAddress = rResult!fromaddress
  sEmailToAddress = rResult!toaddress
  bEmailDebug = rResult!debug

  ' GMail RSS
  rResult = GetSettingTable("gmail")
  bGmailEnabled = rResult!enabled
  sGmailUser = rResult!user
  sGmailPassword = rResult!password
  iGmailPollTime = rResult!polltime
  bGmailDebug = rResult!debug

  ' UPS
  rResult = GetSettingTable("ups")
  bUPSEnabled = rResult!enabled
  sUPSTCPHost = rResult!tcphost
  iUPSTCPPort = rResult!tcpport
  iUPSPollTime = rResult!polltime
  bUPSDebug = rResult!debug

  ' Webserver
  rResult = GetSettingTable("webserver")
  bWebserverEnabled = rResult!enabled
  sWebserverDocRoot = rResult!docroot
  iWebserverHTTPPort = rResult!httpport
  bWebserverDebug = rResult!debug

  ' GPS
  rResult = GetSettingTable("gps")
  bGPSEnabled = rResult!enabled
  sGPSSerialPort = rResult!serialport
  sGPSBaudrate = rResult!baudrate
  iGPSPollTime = rResult!polltime
  bGPSDebug = rResult!debug

  ' Temp08
  rResult = GetSettingTable("temp08")
  bTemp08Enabled = rResult!enabled
  sTemp08SerialPort = rResult!serialport
  sTemp08Baudrate = rResult!baudrate
  bTemp08Debug = rResult!debug

  ' VISCA
  rResult = GetSettingTable("visca")
  bVISCAEnabled = rResult!enabled
  sVISCASerialPort = rResult!serialport
  sVISCABaudrate = rResult!baudrate
  iVISCACameraAddress = rResult!cameraaddress
  sVISCAVideoDevice = rResult!device
  bVISCADebug = rResult!debug

  ' HDDTemp
  rResult = GetSettingTable("hddtemp")
  bHDDTempEnabled = rResult!enabled
  sHDDTempTCPHost = rResult!tcphost
  iHDDTempTCPPort = rResult!tcpport
  iHDDTempPollTime = rResult!polltime
  iHDDTempThreshold = rResult!threshold
  bHDDTempDebug = rResult!debug

  ' VideoServer
  rResult = GetSettingTable("videoserver")
  bVideoServerEnabled = rResult!enabled
  sVideoServerAddress = rResult!tcphost
  iVideoServerPort = rResult!tcpport
  sVideoServerUser = rResult!user
  sVideoServerPassword = rResult!password
  bVideoServerDebug = rResult!debug
  sVideoServerChannel1 = rResult!channel1
  sVideoServerChannel2 = rResult!channel2
  sVideoServerChannel3 = rResult!channel3
  sVideoServerChannel4 = rResult!channel4

  ' RRDTool
  rResult = GetSettingTable("rrdtool")
  bRRDToolEnabled = rResult!enabled
  iRRDToolPollTime = rResult!polltime
  sRRDToolRRA = rResult!rra
  bRRDToolDebug = rResult!debug

  ' Asterisk *
  rResult = GetSettingTable("asterisk")
  bAsteriskEnabled = rResult!enabled
  sAsteriskTCPHost = rResult!tcphost
  iAsteriskTCPPort = rResult!tcpport
  iAsteriskPollTime = rResult!polltime
  sAsteriskUser = rResult!user
  sAsteriskPassword = rResult!password
  bAsteriskDebug = rResult!debug

  ' Bluetooth
  rResult = GetSettingTable("bluetooth")
  bBluetoothEnabled = rResult!enabled
  sBluetoothDevice = rResult!device
  iBluetoothThreshold = rResult!threshold
  iBluetoothPollTime = rResult!polltime
  bBluetoothDebug = rResult!debug

  ' Weeder I/O
  rResult = GetSettingTable("weeder")
  bWeederEnabled = rResult!enabled
  sWeederSerialPort = rResult!serialport
  bWeederDebug = rResult!debug

  ' XML TVGuide
  rResult = GetSettingTable("tvguide")
  bTVGuideEnabled = rResult!enabled
  sTVGuideXMLGrabCommand = rResult!xmlgrabcmd
  sTVGuideXMLFile = rResult!xmlfile
  bTVGuideDebug = rResult!debug

  ' Server Stats
  rResult = GetSettingTable("serverstats")
  bServerStatsEnabled = rResult!enabled
  sServerStatsName = rResult!servername
  bServerStatsDebug = rResult!debug

  ' IRMan Infrared
  rResult = GetSettingTable("irman")
  bIRManEnabled = rResult!enabled
  sIRManSerialPort = rResult!serialport
  bIRManDebug = rResult!debug

  ' Plugwise
  rResult = GetSettingTable("plugwise")
  bPlugwiseEnabled = rResult!enabled
  iPlugwisePollTime = rResult!polltime
  sPlugwiseSerialPort = rResult!serialport
  bPlugwiseDebug = rResult!debug

  ' Fritz!Box
  rResult = GetSettingTable("fritzbox")
  bFritzBoxEnabled = rResult!enabled
  sFritzBoxTCPHost = rResult!tcphost
  bFritzBoxDebug = rResult!debug

  ' XMLRPC
  rResult = GetSettingTable("xmlrpc")
  bXMLRPCEnabled = rResult!enabled
  iXMLRPCMaxConn = rResult!maxconn
  iXMLRPCHTTPPort = rResult!httpport
  bXMLRPCDebug = rResult!debug
  bBroadcastUDPEnabled = rResult!broadcastudp

  ' Bwired GoogleMap
  rResult = GetSettingTable("bwiredmap")
  bBwiredMapEnabled = rResult!enabled
  sBwiredMapTitle = rResult!title
  sBwiredMapWebsite = rResult!website
  sBwiredMapWebsitePicUrl = rResult!websitepicurl
  sBwiredMapUser = rResult!user
  sBwiredMapPassword = rResult!password
  sBwiredMapScreenName = rResult!screenname
  sBwiredMapGpsLat = rResult!gpslat
  sBwiredMapGpsLong = rResult!gpslong
  sBwiredMapCity = rResult!city
  iBwiredMapPushTime = rResult!pushtime
  bBwiredMapDebug = rResult!debug

  ' Twitter
  rResult = GetSettingTable("twitter")
  bTwitterEnabled = rResult!enabled
  sTwitterUser = rResult!username
  sTwitterPassword = rResult!password
  bTwitterTimeStamp = rResult!sendtimestamp
  bTwitterDebug = rResult!debug

  ' DSC Security
  rResult = GetSettingTable("dsc")
  bDSCEnabled = rResult!enabled
  sDSCSerialPort = rResult!serialport
  sDSCBaudrate = rResult!baudrate
  iDSCType = rResult!type
  sDSCMasterCode = rResult!mastercode
  bDSCDebug = rResult!debug

  ' Visonic Security
  rResult = GetSettingTable("visonic")
  bVisonicEnabled = rResult!enabled
  sVisonicSerialPort = rResult!serialport
  iVisonicType = rResult!type
  sVisonicMasterCode = rResult!mastercode
  bVisonicDebug = rResult!debug

  ' KNX/EIB
  rResult = GetSettingTable("eib")
  bEIBEnabled = rResult!enabled
  sEIBTCPHost = rResult!tcphost
  iEIBTCPPort = rResult!tcpport
  bEIBDebug = rResult!debug

  ' Domotica
  rResult = GetSettingTable("domotica")
  bDomoticaEnabled = rResult!enabled
  sDomoticaSerialPort = rResult!serialport
  bDomoticaDebug = rResult!debug

  ' Digitemp
  rResult = GetSettingTable("digitemp")
  bDigitempEnabled = rResult!enabled
  sDigitempCommand = rResult!command
  sDigitempConfig = rResult!config
  iDigitempReadTime = rResult!readtime
  iDigitempPollTime = rResult!polltime
  bDigitempDebug = rResult!debug

  ' Z-Wave
  rResult = GetSettingTable("zwave")
  bZWaveEnabled = rResult!enabled
  sZWaveSerialPort = rResult!serialport
  bZWaveDebug = rResult!debug
  iZWavePollTime = rResult!polltime
  sZWavePollTimeListening = rResult!polltimelistening
  bZWaveEnablePollListening = rResult!enablepolllistening
  sZWavePollTimeSleeping = rResult!polltimesleeping
  bZWaveEnablePollSleeping = rResult!enablepollsleeping
  sZWaveUpdateNeighbor = rResult!updateneighbor
  bZWaveEnableUpdateNeighbor = rResult!enableupdateneighbor

  ' One-Wire Weather
  rResult = GetSettingTable("oww")
  bOWWEnabled = rResult!enabled
  sOWWTCPHost = rResult!tcphost
  iOWWTCPPort = rResult!tcpport
  sOWWServerType = rResult!servertype
  bOWWDebug = rResult!debug

  ' LIRC
  rResult = GetSettingTable("lirc")
  bLIRCEnabled = rResult!enabled
  sLIRCTCPHost = rResult!tcphost
  iLIRCTCPPort = rResult!tcpport
  bLIRCDebug = rResult!debug

  ' Pachube
  rResult = GetSettingTable("pachube")
  bPachubeEnabled = rResult!enabled
  iPachubeFeed = rResult!feed
  sPachubeAPIKey = rResult!apikey
  iPachubePushTime = rResult!pushtime
  bPachubeDebug = rResult!debug

  ' JeeLabs JeeLink
  rResult = GetSettingTable("jeelabs")
  bJeeLabsEnabled = rResult!enabled
  sJeeLabsSerialPort = rResult!serialport
  sJeeLabsBaudrate = rResult!baudrate
  bJeeLabsDebug = rResult!debug

  ' Ping
  rResult = GetSettingTable("ping")
  bPingEnabled = rResult!enabled
  iPingPollTime = rResult!polltime
  bPingDebug = rResult!debug

  ' PLCBUS
  rResult = GetSettingTable("plcbus")
  bPLCBUSEnabled = rResult!enabled
  sPLCBUSSerialPort = rResult!serialport
  sPLCBUSBaudrate = rResult!baudrate
  sPLCBUSUserCode = rResult!usercode
  iPLCBUSPollTime = rResult!polltime
  bPLCBUSThreePhase = rResult!threephase
  sPLCBUSHouseCodes = rResult!housecodes
  bPLCBUSAck = rResult!ack
  bPLCBUSDebug = rResult!debug

  ' CallerID
  rResult = GetSettingTable("callerid")
  bCallerIDEnabled = rResult!enabled
  sCallerIDCountryCode = rResult!countrycode
  sCallerIDAreaCode = rResult!areacode
  sCallerIDNationalPrefix = rResult!prefixnational
  sCallerIDInternationalPrefix = rResult!prefixinternational
  bCallerIDAutoCreateContacts = rResult!autocreatecontacts
  bCallerIDDebug = rResult!debug

  ' TemperaturNu
  rResult = GetSettingTable("temperaturnu")
  bTemperaturNuEnabled = rResult!enabled
  sTemperaturNuCity = rResult!city
  sTemperaturNuId = rResult!apikey
  iTemperaturNuPushTime = rResult!pushtime
  iTemperaturNuDeviceId = rResult!deviceid
  sTemperaturNuDeviceValue = rResult!devicevalue
  bTemperaturNuDebug = rResult!debug

  ' PVoutput
  rResult = GetSettingTable("pvoutput")
  bPVoutputEnabled = rResult!enabled
  sPVoutputApi = rResult!api
  sPVoutputId = rResult!pvoutputid
  iPVoutputPushTime = rResult!pushtime
  iPVoutputDeviceId = rResult!deviceid
  sPVoutputDeviceValue = rResult!devicevalue
  iPVoutputTempDeviceId = rResult!tempdeviceid
  sPVoutputTempDeviceValue = rResult!tempdevicevalue
  iPVoutputUsageDeviceId = rResult!usagedeviceid
  sPVoutputUsageDeviceValue = rResult!usagedevicevalue
  bPVoutputDebug = rResult!debug

  ' Squeeze Server
  rResult = GetSettingTable("squeezeserver")
  bSqueezeServerEnabled = rResult!enabled
  sSqueezeServerTCPHost = rResult!tcphost
  iSqueezeServerTCPPort = rResult!tcpport
  bSqueezeServerDebug = rResult!debug

  ' LED Matrix
  rResult = GetSettingTable("ledmatrix")
  bLEDMatrixEnabled = rResult!enabled
  sLEDMatrixSerialPort = rResult!serialport
  sLEDMatrixID = rResult!displayid
  iLEDMatrixColor = rResult!color
  iLEDMatrixSpeed = rResult!speed
  bLEDMatrixDebug = rResult!debug

  ' WeatherBug
  rResult = GetSettingTable("weatherbug")
  bWeatherBugEnabled = rResult!enabled
  sWeatherBugID = rResult!weatherbugid
  sWeatherBugCity = rResult!city
  sWeatherBugCityCode = rResult!citycode
  sWeatherBugCountryName = rResult!countryname
  bWeatherBugDebug = rResult!debug

  ' EZcontrol
  rResult = GetSettingTable("ezcontrol")
  bEZcontrolEnabled = rResult!enabled
  sEZcontrolUDPHost = rResult!udphost
  bEZcontrolDebug = rResult!debug

  ' Current Cost
  rResult = GetSettingTable("currentcost")
  bCurrentCostEnabled = rResult!enabled
  sCurrentCostSerialPort = rResult!serialport
  sCurrentCostBaudrate = rResult!baudrate
  bCurrentCostDebug = rResult!debug

  ' Denon
  rResult = GetSettingTable("denon")
  bDenonEnabled = rResult!enabled
  sDenonTCPHost = rResult!tcphost
  iDenonTCPPort = rResult!tcpport
  sDenonType = rResult!type
  sDenonSerialPort = rResult!serialport
  sDenonBaudrate = rResult!baudrate
  bDenonDebug = rResult!debug

  ' Pioneer
  rResult = GetSettingTable("pioneer")
  bPioneerEnabled = rResult!enabled
  sPioneerTCPHost = rResult!tcphost
  iPioneerTCPPort = rResult!tcpport
  sPioneerType = rResult!type
  sPioneerSerialPort = rResult!serialport
  sPioneerBaudrate = rResult!baudrate
  bPioneerDebug = rResult!debug

  ' IRTrans
  rResult = GetSettingTable("irtrans")
  bIRTransEnabled = rResult!enabled
  sIRTransTCPHost = rResult!tcphost
  iIRTransTCPPort = rResult!tcpport
  bIRTransDebug = rResult!debug

  ' Mochad
  rResult = GetSettingTable("mochad")
  bMochadEnabled = rResult!enabled
  sMochadTCPHost = rResult!tcphost
  iMochadTCPPort = rResult!tcpport
  bMochadGlobalX10 = rResult!globalX10
  bMochadDebug = rResult!debug

  ' Onkyo/Integra
  rResult = GetSettingTable("onkyo")
  bOnkyoEnabled = rResult!enabled
  sOnkyoTCPHost = rResult!tcphost
  iOnkyoTCPPort = rResult!tcpport
  sOnkyoType = rResult!type
  sOnkyoSerialPort = rResult!serialport
  sOnkyoBaudrate = rResult!baudrate
  bOnkyoDebug = rResult!debug

  ' Anel PWrCtrl
  rResult = GetSettingTable("pwrctrl")
  bPwrCtrlEnabled = rResult!enabled
  iPwrCtrlUDPRead = rResult!udpread
  iPwrCtrlUDPSend = rResult!udpsend
  sPwrCtrlUserPw = rResult!userpw
  bPwrCtrlDebug = rResult!debug

  ' SharpTV
  rResult = GetSettingTable("sharptv")
  bSharpTVEnabled = rResult!enabled
  sSharpTVTCPHost = rResult!tcphost
  iSharpTVTCPPort = rResult!tcpport
  sSharpTVType = rResult!type
  sSharpTVSerialPort = rResult!serialport
  sSharpTVBaudrate = rResult!baudrate
  bSharpTVDebug = rResult!debug

  ' iViewer
  rResult = GetSettingTable("iviewer")
  bIViewerEnabled = rResult!enabled
  iIViewerTCPPort = rResult!tcpport
  sIViewerPassword = rResult!password
  bIViewerDebug = rResult!debug

  ' iPort
  rResult = GetSettingTable("iport")
  bIPortEnabled = rResult!enabled
  sIPortTCPHost = rResult!tcphost
  iIPortTCPPort = rResult!tcpport
  sIPortType = rResult!type
  sIPortSerialPort = rResult!serialport
  sIPortBaudrate = rResult!baudrate
  bIPortDebug = rResult!debug

  ' LGTV
  rResult = GetSettingTable("lgtv")
  bLGTVEnabled = rResult!enabled
  sLGTVTCPHost = rResult!tcphost
  iLGTVTCPPort = rResult!tcpport
  sLGTVType = rResult!type
  sLGTVSerialPort = rResult!serialport
  sLGTVBaudrate = rResult!baudrate
  bLGTVDebug = rResult!debug

  ' Google Latitude
  rResult = GetSettingTable("glatitude")
  bGLatitudeEnabled = rResult!enabled
  iGLatitudeRange = rResult!rangevalue
  iGLatitudeRangeType = rResult!rangetype
  iGLatitudePollTime = rResult!polltime
  bGLatitudeDebug = rResult!debug

  ' Velleman K8055
  rResult = GetSettingTable("k8055")
  bK8055Enabled = rResult!enabled
  iK8055BoardAddress = rResult!boardaddress
  iK8055PollTime = rResult!polltime
  iK8055DebounceTime1 = rResult!debouncetime1
  iK8055DebounceTime2 = rResult!debouncetime2
  bK8055Debug = rResult!debug

  ' OWFS
  rResult = GetSettingTable("owfs")
  bOWFSEnabled = rResult!enabled
  sOWFSBaseDir = rResult!basedir
  bOWFSCached = rResult!cached
  iOWFSPollTime = rResult!polltime
  bOWFSDebug = rResult!debug

  ' CUL
  rResult = GetSettingTable("cul")
  bCULEnabled = rResult!enabled
  sCULTCPHost = rResult!tcphost
  iCULTCPPort = rResult!tcpport
  sCULType = rResult!type
  sCULSerialPort = rResult!serialport
  sCULBaudrate = rResult!baudrate
  sCULFHTid = rResult!fhtid
  iCULModel = rResult!model
  bCULDebug = rResult!debug

  ' xPL
  rResult = GetSettingTable("xpl")
  bxPLEnabled = rResult!enabled
  ixPLHeartBeatTime = rResult!heartbeat
  bxPLDebug = rResult!debug

  ' RFXCom xPL
  rResult = GetSettingTable("rfxcomxpl")
  bRFXComxPLEnabled = rResult!enabled
  sRFXComxPLRXAddress = rResult!rxaddress
  sRFXComxPLTXAddress = rResult!txaddress
  bRFXComxPLOldAddrFmt = rResult!oldaddrfmt
  bRFXComxPLGlobalX10 = rResult!globalx10
  bRFXComxPLDebug = rResult!debug

  ' Shell
  rResult = GetSettingTable("shell")
  bShellEnabled = rResult!enabled
  iShellPollTime = rResult!polltime
  bShellDebug = rResult!debug

  ' TelnetServer
  rResult = GetSettingTable("telnetserver")
  bTelnetServerEnabled = rResult!enabled
  iTelnetServerPort = rResult!telnetport
  bTelnetServerDebug = rResult!debug

  ' Ncid
  rResult = GetSettingTable("ncid")
  bNcidEnabled = rResult!enabled
  sNcidTCPHost = rResult!tcphost
  iNcidTCPPort = rResult!tcpport
  bNcidDebug = rResult!debug

  ' RFXCom Tranceiver
  rResult = GetSettingTable("rfxcomtrx")
  bRFXComTRXEnabled = rResult!enabled
  sRFXComTRXTCPHost = rResult!tcphost
  iRFXComTRXTCPPort = rResult!tcpport
  sRFXComTRXType = rResult!type
  sRFXComTRXSerialPort = rResult!serialport
  sRFXComTRXBaudrate = rResult!baudrate
  bRFXComTRXRelayEnabled = rResult!relayenabled
  iRFXComTRXRelayPort = rResult!relayport
  bRFXComTRXGlobalX10 = rResult!globalx10
  bRFXComTRXOldAddrFmt = rResult!oldaddrfmt
  bRFXComTRXDebug = rResult!debug

  ' HomeMatic
  rResult = GetSettingTable("homematic")
  bHMEnabled = rResult!enabled
  sHMTCPHost = rResult!tcphost
  iHMTCPPort = rResult!tcpport
  sHMhmid = rResult!hmid
  bHMDebug = rResult!debug

  ' OpenTherm gateway
  rResult = GetSettingTable("opentherm")
  bOpenThermEnabled = rResult!enabled
  sOpenThermSerialPort = rResult!serialport
  sOpenThermTCPhost = rResult!tcphost
  sOpenThermTCPport = rResult!tcpport
  sOpenThermType = rResult!type
  sOpenThermThermostat = rResult!thermostat
  iOpenThermPollTime = rResult!polltime
  bOpenThermDebug = rResult!debug
  sOpenThermTemperatureOverride = rResult!temperatureoverride
  bOpenThermRelayEnabled = rResult!relayenabled
  iOpenThermRelayPort = rResult!relayport
  bOpenThermSyncClock = rResult!syncclock

  ' SmartMeter
  rResult = GetSettingTable("nta8130")
  bSmartMeterEnabled = rResult!enabled
  sSmartMeterTCPHost = rResult!tcphost
  iSmartMeterTCPPort = rResult!tcpport
  sSmartMeterType = rResult!type
  sSmartMeterSerialPort = rResult!serialport
  sSmartMeterBaudrate = rResult!baudrate
  iSmartMeterDatabits = rResult!databits
  iSmartMeterStopbits = rResult!stopbits
  iSmartMeterParity = rResult!parity
  bSmartMeterDebug = rResult!debug

  ' XBMC xPL
  rResult = GetSettingTable("xbmcxpl")
  bXBMCxPLEnabled = rResult!enabled
  sXBMCxPLRXAddress = rResult!rxaddress
  sXBMCxPLTXAddress = rResult!txaddress
  bXBMCxPLDebug = rResult!debug

  ' MQTT
  rResult = GetSettingTable("mqtt")
  bMQTTEnabled = rResult!enabled
  sMQTTTCPHost = rResult!tcphost
  iMQTTTCPPort = rResult!tcpport
  sMQTTUsername = rResult!username
  sMQTTPassword = rResult!password
  sMQTTPubTopic = rResult!pubtopic
  sMQTTSubTopic = rResult!subtopic
  iMQTTHeartbeat = rResult!heartbeat
  bMQTTDebug = rResult!debug

  ' Meteohub
  rResult = GetSettingTable("meteohub")
  bMeteohubEnabled = rResult!enabled
  sMeteohubFetchURL = rResult!fetchurl
  iMeteohubPolltime = rResult!polltime
  bMeteohubDebug = rResult!debug

  ' ELV MAX!
  rResult = GetSettingTable("elvmax")
  bELVMAXEnabled = rResult!enabled
  sELVMAXTCPHost = rResult!tcphost
  iELVMAXTCPPort = rResult!tcpport
  bELVMAXDebug = rResult!debug

  ' YouLess
  rResult = GetSettingTable("youless")
  bYouLessEnabled = rResult!enabled
  iYouLessPolltime = rResult!polltime
  bYouLessDebug = rResult!debug

  ' KMTronicUDP
  rResult = GetSettingTable("kmtronicudp")
  bKMTronicUDPEnabled = rResult!enabled
  iKMTronicUDPPort = rResult!udpport
  iKMTronicUDPPolltime = rResult!polltime
  bKMTronicUDPDebug = rResult!debug

Catch
  WriteLog(("Error: " & Error.Text & " " & Error.Code & " while loading settings at ") & Error.Where & ("!\nIs your database version correct?"))
  CloseAll()
  Quit

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set a value in the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetConfigValue(sKey As String, vValue As Variant)

   Dim hSettings As Settings

   hSettings = New Settings(sBaseDir &/ sSettings)
   hSettings[sKey] = vValue
   hSettings.Save

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get a value from the config file
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GetConfigValue(sKey As String, Optional vValue As Variant) As Variant

  Dim hSettings As Settings

  hSettings = New Settings(sBaseDir &/ sSettings)

  If Not IsNull(vValue) Then
    Return hSettings[sKey, vValue]
  Else
    Return hSettings[sKey]
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hMainLogFile Then
    Print #hMainLogFile, sText;
    Flush #hMainLogFile
  End If
  Main.BroadcastEvent("[MainLog]" & sLogPrefix & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteSpeakLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hSpeakLogFile Then
    Print #hSpeakLogFile, sText;
    Flush #hSpeakLogFile
  End If
  Main.BroadcastEvent("[SpeakLog]" & sLogPrefix & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteDebugLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText &= "\n"
  sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hDebugLogFile Then
    Print #hDebugLogFile, sText;
    Flush #hDebugLogFile
  Endif
  Main.BroadcastEvent("[DebugLog]" & sLogPrefix & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' display text on console and save to log without date/time (for RFXCom)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteRFXDebugLog(sText As String, Optional bStrip As Boolean)

  If Not bStrip Then sText = Format$(Now, "yyyy/mm/dd hh:nn:ss") & " " & sText
  Print sText;
  If hDebugLogFile Then
    Print #hDebugLogFile, sText;
    Flush #hDebugLogFile
  Endif
  Main.BroadcastEvent("[DebugLog]" & sText)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return version of gambas we are running with
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetGambasVersion() As String

  Dim sVer As String

  Shell "gbx" & System.Version & " -V " To sVer
  Return Trim(Mid$(sVer, InStr(sVer, "-") + 1))

Catch
  Return "?"

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get settings table from db, return defaults if not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetSettingTable(sGroup As String, Optional bDefault As Boolean) As Result

  Dim rResult As Result

  If bDefault Then
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' load default settings
  Else
    rResult = hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 1") ' try to load active settings
    If (rResult.Count < 1) Then
      hDB.Exec("SELECT * FROM " & hDB.Quote("settings_" & sGroup) & " WHERE id = 0") ' fall back to defaults
    End If
  End If

  Return rResult

Catch
  WriteLog(("GetSettings : ") & Error.Text & (" for ") & sGroup)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close all what's open
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CloseAll()

  ' stop all running timers
  StopTimers()
  ' save all globalvars in db
  If bServer Then SaveGlobalVars()
  ' kmtronicudp close
  Try hKMTronicUDP.Disconnect
  ' YouLess close
  Try hYouLess.Disconnect
  ' ELV MAX! close
  Try hELVMAX.Disconnect
  ' Meteohub close
  Try hMeteohub.Disconnect
  ' MQTT close
  Try hMQTT.Disconnect
  ' XBMCxPl close
  Try hXBMCxPL = Null
  ' SmartMeter
  Try hSmartMeter.Disconnect
  ' OpenTherm gateway close
  Try hOpenTherm.Disconnect
  ' telnetserver close
  Try hTelnetServer.Disconnect
  ' HomeMatic close
  Try hHM.Disconnect
  ' ping
  Try Ping.tPing.Stop
  ' shell
  Try Shell.tShell.Stop
  ' xpl close
  Try hxPL.Disconnect
  ' cul close
  Try hCUL.Disconnect
  ' k8055 close
  Try hK8055.Disconnect
  ' google latitude
  Try GLatitude.hLatitudeBadge.Close
  Try GLatitude.hLatitudeGeo.Close
  ' stop X10Cmd Heyu monitor
  Try X10Cmd.Monitor_Stop
  ' iviewer close
  Try hIViewer.Disconnect
  ' squeezeserver close
  Try hSqueezeServer.Disconnect
  ' UDP broadcast server close
  Try hBroadcastEvent.Close
  ' pachube
  Try Pachube.hPost.Close
  ' hddtemp
  Try HDDTemp.hHDDTemp.Close
  ' plcbus close
  Try hPLCBUS.Disconnect
  ' ctx35 close
  Try hCTX35.Disconnect
  ' ledmatrix close
  Try hLEDMatrix.Disconnect
  ' rfxcom close
  Try hRFXComxPL = Null
  Try hRFXComRX.Disconnect
  Try hRFXComTX.Disconnect
  Try hRFXComTRX.Disconnect
  ' ups close
  Try hUPS.Disconnect
  ' sms close
  Try hSMS.Disconnect
  ' gps close
  Try hGPS.Disconnect
  ' temp08 close
  Try hTemp08.Disconnect
  ' visca close
  Try hVISCA.Disconnect
  ' asterisk TCP socket close
  Try hAsterisk.Disconnect
  ' weeder close
  Try hWeeder.Disconnect
  ' irman close
  Try hIRMan.Disconnect
  ' plugwise close
  Try hPlugwise.Disconnect
  ' fritzbox close
  Try hFritzBox.Disconnect
  ' xmlrpc close
  Try hXMLRPC.Disconnect
  ' dsc close
  Try hDSC.Disconnect
  ' Visonic close
  Try hVisonic.Disconnect
  ' denon close
  Try hDenon.Disconnect
  ' Pioneer close
  Try hPioneer.Disconnect
  ' onkyo close
  Try hOnkyo.Disconnect
  ' mochad close
  Try hMochad.Disconnect
  ' irtrans close
  Try hIRTrans.Disconnect
  ' ncid close
  Try hNcid.Disconnect
  ' eib close
  Try hEIB.Disconnect
  ' domotica close
  Try hDomotica.Disconnect
  ' z-wave close
  Try hZWave.Disconnect
  ' one-wire weather close
  Try hOWWTCP.Disconnect
  Try hOWWUDP.Disconnect
  ' lirc close
  Try hLIRC.Disconnect
  ' jeelabs close
  Try hJeeLabs.Disconnect
  ' ezcontrol close
  Try hEZcontrol.Disconnect()
  ' current cost close
  Try hCurrentCost.Disconnect()
  ' pwrctrl cloese
  Try hPwrCtrl.Disconnect()
  ' sharptv close
  Try hSharpTV.Disconnect
  ' lgtv close
  Try hLGTV.Disconnect
  ' iport close
  Try hIPort.Disconnect
  ' webserver close
  Try hWebserver.Disconnect
  ' db close
  Try hDB.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start various stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Setup()

  WriteLog(("Starting setup ..."))

  ' setup modules
  GetSettings() ' read all settings from database
  RestoreGlobalVars() ' restore globalvars from database
  If Not bMainDebug Then WriteLog(("NOTE: All disabled module log entries are muted, enable main debug if you want to see them!"))
  Setup_IPAddr() ' get our ip address
  Setup_Webserver() ' built in HTTP server (very minimal)
  Setup_Email() ' e-mail SMTP client
  Setup_Sound() ' built in sound player
  Setup_VoiceText() ' text2speech support
  Setup_Thermostat() ' Thermostat function
  Setup_RRDTool() ' RRDTool graphing framework
  Setup_XMLRPC() ' XML-RPC server
  Setup_X10Cmd() ' X10 command interface
  Setup_RFXComRX() ' RFXCom receiver
  Setup_RFXComTX() ' RFXCom transmitter
  Setup_CTX35() ' Xanura CTX35 X10 interface
  Setup_UPS() ' Nut SmartUPS monitoring client
  Setup_SMS() ' SMS modem support
  Setup_GPS() ' uBlox GPS receiver
  Setup_Temp08() ' Midon TEMP08 1-wire interface
  Setup_VISCA() ' Sony VISCA PTZ interface
  Setup_HDDTemp() ' read disk temperatures
  Setup_VideoServer() ' IP9100 videoserver
  Setup_Asterisk() ' Asterisk PABX support
  Setup_Bluetooth() ' Bluetooth Proximity support
  Setup_Weeder() ' Weeder I/O modules support
  Setup_Gmail() ' fetch Gmail RSS feed
  Setup_TVGuide() ' XMLTV guide
  Setup_ServerStats() ' Server Statistics
  Setup_IRMan() ' IRMan Infrared
  Setup_Plugwise() ' Plugwise support
  Setup_FritzBox() ' FritzBox support
  Setup_BwiredMap() ' Bwired support
  Setup_Twitter() ' Twitter support
  Setup_DSC() ' DSC security interface support
  Setup_Visonic() ' Visonic PowerMax/PowerMaster security interface support
  Setup_EIB() ' KNX/EIB support
  Setup_Domotica() ' Domotica modules support
  Setup_Digitemp() ' Digitemp support
  Setup_ZWave() ' Z-Wave support
  Setup_OWW() ' One-Wire Weather support
  Setup_LIRC() ' LIRC support
  Setup_Pachube() ' Pachube support
  Setup_JeeLabs() ' JeeLabs support
  Setup_Ping() ' Ping support
  Setup_PLCBUS() ' PLCBUS support
  Setup_TemperaturNu() ' TemperaturNu support
  Setup_PVoutput() ' PVoutput support
  Setup_SqueezeServer() ' SqueezeServer support
  Setup_LEDMatrix() ' LED Matrix message support
  Setup_WeatherBug() ' WeatherBug support
  Setup_EZcontrol() ' EZcontrol support
  Setup_CurrentCost() ' Current Cost support
  Setup_Denon() ' Denon support
  Setup_Pioneer() ' Pioneer support
  Setup_IRTrans() ' IRTrans support
  Setup_Mochad() ' Mochad support
  Setup_Onkyo() ' Onkyo/Integra support
  Setup_PwrCtrl() ' Anel PwrCtrl support
  Setup_SharpTV() ' Sharp TV support
  Setup_iViewer() ' iViewer support
  Setup_iPort() ' iPort dock support
  Setup_LGTV() ' LG TV support
  Setup_GLatitude() ' Google Latitude support
  Setup_K8055() ' Velleman K8055 support
  Setup_OWFS() ' OWFS support
  Setup_CUL() ' CULFW support
  Setup_xPL() ' xPL support
  Setup_RFXComxPL() ' RFXCom xPL support
  Setup_Shell() ' Shell support
  Setup_TelnetServer() ' TelnetServer support
  Setup_Calendar() 'Calendar planning support
  Setup_Ncid() 'Ncid Support
  Setup_RFXComTRX() ' RFXCom Tranceiver support
  Setup_HomeMatic() ' HMLAN support
  Setup_OpenTherm() ' OpenTherm support
  Setup_SmartMeter() ' NTA8130 smart meter support
  Setup_XBMCxPL() ' XBMC control via xPL
  Setup_MQTT() ' MQTT client support
  Setup_Meteohub() ' Meteohub support
  Setup_ELVMAX() ' ELV MAX! support
  Setup_YouLess() ' YouLess support
  Setup_KMTronicUDP() ' KMTronicUDP support
  WriteLog(("Done with setup ..."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open logfiles
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Setup_Logfiles()

  ' close open files first (in case of new month)
  Try Close #hMainLogFile
  Try Close #hSpeakLogFile
  Try Close #hDebugLogFile

  sMainLogFile As String = "server-main-" & Format(Now, "yyyy-mm") & ".log"
  sSpeakLogFile As String = "server-speak-" & Format(Now, "yyyy-mm") & ".log"
  sDebugLogFile As String = "server-debug-" & Format(Now, "yyyy-mm") & ".log"
  sDomoZWaveFile As String = "server-domozwave-"

  ' open the file in append mode and write to it
  ' [GB2:OPEN] OPEN sBaseDir &/ "logs" &/ sMainLogFile FOR APPEND AS #hMainLogFile
  hMainLogFile = Open sBaseDir &/ "logs" &/ sMainLogFile For Append
  ' [GB2:OPEN] OPEN sBaseDir &/ "logs" &/ sSpeakLogFile FOR APPEND AS #hSpeakLogFile
  hSpeakLogFile = Open sBaseDir &/ "logs" &/ sSpeakLogFile For Append
  ' [GB2:OPEN] OPEN sBaseDir &/ "logs" &/ sDebugLogFile FOR APPEND AS #hDebugLogFile
  hDebugLogFile = Open sBaseDir &/ "logs" &/ sDebugLogFile For Append

Catch
  WriteLog(("ERROR: While opening logfiles: ") & Error.Text & (" at ") & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reload main settings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Main()

  ' not much todo now
  GetSettings()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' location info, and calc. sunset/sunrise and moonphase
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Astro()

  Dim bSunRise As Boolean = True
  Dim bSunSet As Boolean = False
  Dim iTwilight As Integer
  Dim rResult As Result
  Dim aSplitTime As String[]
  Dim sSeasons, sSeason_Starts As String[]

  WriteLog(("Latitude: ") & iAstroLatitude & (" Longitude: ") & iAstroLongitude & (" Timezone: ") & iAstroTimezone)

  ' calculate sun set/rise
  SetGlobalVar("Sunrise", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunRise, 0))
  SetGlobalVar("Sunset", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunSet, 0))

  ' update Sunset/Sunrise triggers in database
  aSplitTime = Split(GlobalVar["Sunset"], ":")
  rResult = hDB.Exec("UPDATE triggers t SET t.param1 = &1 WHERE t.name = 'Time is Sunset' ", Format(aSplitTime[1], "#") & " " & Format(aSplitTime[0], "#") & " * * *")
  aSplitTime = Split(GlobalVar["Sunrise"], ":")
  rResult = hDB.Exec("UPDATE triggers t SET t.param1 = &1 WHERE t.name = 'Time is Sunrise' ", Format(aSplitTime[1], "#") & " " & Format(aSplitTime[0], "#") & " * * *")

  If (sAstroTwilight = "civil") Then iTwilight = 1
  If (sAstroTwilight = "nautical") Then iTwilight = 2
  If (sAstroTwilight = "astronomical") Then iTwilight = 3
  SetGlobalVar("Sunrise_Twilight", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunRise, iTwilight))
  SetGlobalVar("Sunset_Twilight", Astro.CalcSunTimes(iAstroLongitude, iAstroLatitude, iAstroTimezone, bSunSet, iTwilight))

  If bServer Then
    WriteLog(("Sunrise at ") & GlobalVar["Sunrise"] & (", Sunset at ") & GlobalVar["Sunset"])
    WriteLog(("Twilight Sunrise at ") & GlobalVar["Sunrise_Twilight"] & (", Twilight Sunset at ") & GlobalVar["Sunset_Twilight"] & " " & sAstroTwilight)

    ' calculate moon data
    Astro.CalcMoonPhase()
    WriteLog(("Moon phase is ") & MoonPhase & ".")
    WriteLog(("Moon is in ") & MoonZodiac & ".")
    WriteLog(("Age from new ") & MoonAge & (" days."))
    WriteLog(("Distance ") & MoonDistance & (" Earth radii."))
    WriteLog(("Ecliptic latitude: ") & MoonLatitude & (" degrees."))
    WriteLog(("Ecliptic longitude: ") & MoonLongitude & (" degrees."))
    If MoonIsLeapYear Then WriteLog(("This is a leap year."))
  Endif

  ' calculate season
  sSeasons = Split(sAstroSeasons, ",")
  sSeason_Starts = Split(sAstroSeasonStarts, ",")
  If (CInt(GlobalVar["Month"]) < 3) Then
    SetGlobalVar("Season", sSeasons[0])
  Else If (CInt(GlobalVar["Month"]) = 3) And If (CInt(GlobalVar["Day"]) < CInt(sSeason_Starts[0])) Then
    SetGlobalVar("Season", sSeasons[0])
  Else If (CInt(GlobalVar["Month"]) = 12) And If (CInt(GlobalVar["Day"]) > CInt(sSeason_Starts[3])) Then
    SetGlobalVar("Season", sSeasons[0])
  Else If (CInt(GlobalVar["Month"]) < 6) Then
    SetGlobalVar("Season", sSeasons[1])
  Else If (CInt(GlobalVar["Month"]) = 6) And If (CInt(GlobalVar["Day"]) < CInt(sSeason_Starts[1])) Then
    SetGlobalVar("Season", sSeasons[1])
  Else If (CInt(GlobalVar["Month"]) < 9) Then
    SetGlobalVar("Season", sSeasons[2])
  Else If (CInt(GlobalVar["Month"]) = 9) And If (CInt(GlobalVar["Day"]) < CInt(sSeason_Starts[2])) Then
    SetGlobalVar("Season", sSeasons[2])
  Else
    SetGlobalVar("Season", sSeasons[3])
  End If
  If bServer Then WriteLog(("Season is ") & GlobalVar["Season"] & ".")

Catch
  WriteLog(("ERROR: ") & Error.Text & (" at ") & Error.Where & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reload astro settings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Astro()

  GetSettings()
  Setup_Astro()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start webserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_WebServer()

  If bWebserverEnabled Then
    If bWebserverDebug Then WriteLog(("Web Server enabled."))
    If bServer Then
      ' create a new WebServer class instance
      hWebserver = New CWebServer

      ' set the properties
      hWebserver.DocRoot = sWebserverDocRoot
      hWebserver.HTTPPort = iWebserverHTTPPort
      hWebserver.WebServerDebug = bWebserverDebug

      ' start webserver
      If hWebserver.Connect() Then
        WriteLog(("Web Server active on Port ") & iWebserverHTTPPort, bMainDebug)
      Else
        WriteLog(("ERROR: Web Server FAILED to start on Port ") & iWebserverHTTPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Web Server disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart webserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Webserver()

  If hWebserver Then
    hWebserver.Disconnect
    hWebserver = Null
  End If
  Setup_Webserver()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start kmtronicudp
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_KMTronicUDP()

  If bKMTronicUDPEnabled Then
    WriteLog(("KMTronicUDP support enabled."))
    If bServer Then
      ' create a new KMTronicUDP class instance
      hKMTronicUDP = New CKMTronicUDP
      ' set the properties
      With hKMTronicUDP
        .PollTime = iKMTronicUDPPolltime
        .UDPPort = iKMTronicUDPPort
        .KMTronicUDPDebug = bKMTronicUDPDebug
      End With
      ' start
      hKMTronicUDP.Run()
    End If
  Else
    If bMainDebug Then WriteLog(("KMTronicUDP support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart kmtronicudp after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_KMTronicUDP()

  If hKMTronicUDP Then
    hKMTronicUDP.Disconnect
    hKMTronicUDP = Null
  End If
  Setup_KMTronicUDP()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start xmlrpc
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_XMLRPC()

  If bXMLRPCEnabled Then
    If bXMLRPCDebug Then WriteLog(("XML-RPC server enabled."))
    If bServer Then
      ' create a new xmlrpc class instance
      hXMLRPC = New CXMLRPC

      ' set the properties
      hXMLRPC.MaxConn = iXMLRPCMaxconn
      hXMLRPC.HTTPPort = iXMLRPCHTTPPort
      hXMLRPC.XMLRPCDebug = bXMLRPCDebug

      ' start xmlrpc server
      If hXMLRPC.Connect() Then
        WriteLog(("XML-RPC server listening on Port ") & iXMLRPCHTTPPort, bMainDebug)
      Else
        WriteLog(("ERROR: XML-RPC server FAILED to start on Port ") & iXMLRPCHTTPPort)
      End If
      If bBroadcastUDPEnabled Then
        WriteLog(("UDP Broadcasts are enabled on Port ") & Str(iXMLRPCHTTPPort + 10000))
      Else
        WriteLog(("UDP Broadcasts are disabled."))
      End If

      ' Setup Broadcast UDP socket
      hBroadcastEvent = New UdpSocket As "BroadcastUDP"
      hBroadcastEvent.Broadcast = True
      ' [GB2:BIND] hBroadcastEvent.Bind(0)
      hBroadcastEvent.Port = 0
      hBroadcastEvent.Bind()
      Try hBroadcastEvent.TargetPort = iXMLRPCHTTPPort + 10000
      If Error Then
        hBroadcastEvent = Null
        WriteLog(("ERROR: UDP Broadcast server FAILED to start on Port ") & Str(iXMLRPCHTTPPort + 10000))
      End If

    End If
  Else
    If bMainDebug Then WriteLog(("XML-RPC server disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart xmlrpc server after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_XMLRPC()

  If hXMLRPC Then
    hXMLRPC.Disconnect
    hXMLRPC = Null
  End If

  ' Also re-init the BroadcastUDP
  If hBroadcastEvent Then
    hBroadcastEvent = Null
  End If

  Setup_XMLRPC()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if e-mail client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Email()

  If bEmailEnabled Then
    WriteLog(("e-mail client enabled."), bMainDebug)
  Else
    If bMainDebug Then WriteLog(("e-mail client disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart e-mail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Email()

  ' not much todo now
  Setup_Email()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Gmail Rss client is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Gmail()

  If bGmailEnabled Then
    WriteLog(("Gmail RSS feed support enabled."), bMainDebug)
    If bServer Then Mail.GmailRun()
  Else
    If bMainDebug Then WriteLog(("Gmail RSS feed support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Gmail after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Gmail()

  ' not much todo now
  Setup_Gmail()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup sound related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Sound()

  If bSoundEnabled Then
    WriteLog(("Sound support enabled."))
    Sounds.LoadSounds()
  Else
    If bMainDebug Then WriteLog(("Sound support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sound after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Sound()

  ' not much todo now
  Setup_Sound()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup bwired related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_BwiredMap()

  If bBwiredMapEnabled Then
    WriteLog(("Bwired XML upload support enabled."))
    If bServer Then Bwired.Run()
  Else
    Try Bwired.tBwired.Stop
    If bMainDebug Then WriteLog(("Bwired XML upload support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart bwired after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_BwiredMap()

  Try Bwired.tBwired.Stop
  ' not much todo now
  Setup_BwiredMap()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' setup voicetext related stuff
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_VoiceText()

  If bVoiceTextEnabled Then
    WriteLog(("VoiceText support enabled."))
  Else
    If bMainDebug Then WriteLog(("VoiceText support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart voicetext after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_VoiceText()

  ' not much todo now
  Setup_VoiceText()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize x10cmd if needed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_X10Cmd()

  Dim sTemp As String

  If bX10CmdEnabled Then
    WriteLog(("X10Cmd support enabled."))
    If bServer Then
      If ProgramExist(sX10CmdCommand) Then
        If iX10CmdType = 0 Then
          Exec [sX10CmdCommand, "version"] To sTemp
          WriteLog(("Found Heyu executable ") & sTemp)
          If bX10CmdMonitor Then
            WriteLog(("X10Cmd Heyu monitor enabled."))
            X10Cmd.Monitor
          Else
            WriteLog(("X10Cmd Heyu monitor disabled."))
          Endif
        Else If iX10CmdType = 1 Then
          If bX10CmdMonitor Then
            WriteLog(("X10Cmd monitor enabled."))
            X10Cmd.Monitor
          Else
            WriteLog(("X10Cmd monitor disabled."))
           Endif
        Endif
      Else
        WriteLog(("ERROR: X10Cmd command '") & sX10CmdCommand & ("' not found, did you install it?"))
        bX10CmdEnabled = False
        WriteLog(("X10Cmd interface disabled."))
      End If
    End If
  Else
    Try X10Cmd.Monitor_Stop
    If bMainDebug Then WriteLog(("X10Cmd support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart x10cmd after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_X10Cmd()

  ' not much todo now
  Try X10Cmd.Monitor_Stop
  Setup_X10Cmd()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RFXComRX()

  If bRFXComRXEnabled Then
    WriteLog(("RFXCom receiver support enabled."))
    If bServer Then
      ' create a new RFXCom class instance
      hRFXComRX = New CRFXComRX
      ' set the properties
      With hRFXComRX
        .TCPHost = sRFXComRXTCPHost
        .TCPPort = iRFXComRXTCPPort
        .Interface = sRFXComRXType
        .Baud = sRFXComRXBaudrate
        .SerPort = sRFXComRXSerialPort
        .RFXComDebug = bRFXComRXDebug
        .RelayPort = iRFXComRXRelayPort
        .GlobalX10 = bRFXComRXGlobalX10
      End With
      If InStr(sRFXComRXType, "tcp") Then
        ' connect to the rfxcom host:port
        If hRFXComRX.ConnectTCP() Then
          WriteLog(("RFXCom receiver TCP interface connecting to ") & sRFXComRXTCPHost & ":" & iRFXComRXTCPPort)
        Else
          WriteLog(("ERROR: RFXCom receiver TCP interface FAILED to connect to ") & sRFXComRXTCPHost & ":" & iRFXComRXTCPPort)
          hRFXComRX = Null
        End If
      Else
        ' connect to the rfxcom serial interface
        If hRFXComRX.ConnectSerial() Then
          WriteLog(("RFXCom receiver serial interface connected to Port ") & sRFXComRXSerialPort)
          hRFXComRX.ProtocolSetup("MODEVAR")
        Else
          WriteLog(("ERROR: RFXCom receiver serial interface FAILED to connect to Port ") & sRFXComRXSerialPort)
          hRFXComRX = Null
        End If
      End If
      If hRFXComRX And If bRFXComRXRelayEnabled Then
        If hRFXComRX.StartRelay() Then
          WriteLog(("RFXCom receiver Relay listening for client on port ") & iRFXComRXRelayPort)
        Else
          WriteLog(("ERROR: RFXCom receiver Relay FAILED to listen on port ") & iRFXComRXRelayPort)
        End If
      Else
        WriteLog(("RFXCom receiver Relay disabled."))
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("RFXCom receiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RFXComRX()

  If hRFXComRX Then
    hRFXComRX.Disconnect
    hRFXComRX = Null
  End If
  Setup_RFXComRX()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom transmitter tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RFXComTX()

  Dim sInterfaceType As String = "transmitter"

  If bRFXComTXEnabled Then
    If bRFXComTXRFXmitter Then sInterfaceType = "xmitter"

    WriteLog(("RFXCom ") & sInterfaceType & (" support enabled."))
    If bServer Then
      ' create a new RFXCom class instance
      hRFXComTX = New CRFXComTX
      ' set the properties
      With hRFXComTX
        .TCPHost = sRFXComTXTCPHost
        .TCPPort = iRFXComTXTCPPort
        .Interface = sRFXComTXType
        .Baud = sRFXComTXBaudrate
        .SerPort = sRFXComTXSerialPort
        .RFXComDebug = bRFXComTXDebug
        .RelayPort = iRFXComTXRelayPort
        .Handshake = bRFXComTXHandshake
        .DisableX10 = bRFXComTXDisableX10
        .EnableARC = bRFXComTXEnableARC
        .EnableHarrison = bRFXComTXEnableHarrison
        .EnableKoppla = bRFXComTXEnableKoppla
        .RFXMitter = bRFXComTXRFXmitter
        .InterfaceType = sInterfaceType
      End With
      If InStr(sRFXComTXType, "tcp") Then
        ' connect to the rfxcom host:port
        If hRFXComTX.ConnectTCP() Then
          WriteLog(("RFXCom ") & sInterfaceType & (" TCP interface connecting to ") & sRFXComTXTCPHost & ":" & iRFXComTXTCPPort)
        Else
          WriteLog(("ERROR: RFXCom ") & sInterfaceType & (" TCP interface FAILED to connect to ") & sRFXComTXTCPHost & ":" & iRFXComTXTCPPort)
          hRFXComTX = Null
        End If
      Else
        ' connect to the rfxcom serial interface
        If hRFXComTX.ConnectSerial() Then
          WriteLog(("RFXCom ") & sInterfaceType & (" serial interface connected to Port ") & sRFXComTXSerialPort)
        Else
          WriteLog(("ERROR: RFXCom ") & sInterfaceType & (" serial interface FAILED to connect to Port ") & sRFXComTXSerialPort)
          hRFXComTX = Null
        End If
      End If
      If hRFXComTX And If bRFXComTXRelayEnabled Then
        If hRFXComTX.StartRelay() Then
          WriteLog(("RFXCom ") & sInterfaceType & (" Relay listening for client on port ") & iRFXComTXRelayPort)
        Else
          WriteLog(("ERROR: RFXCom ") & sInterfaceType & (" Relay FAILED to listen on port ") & iRFXComTXRelayPort)
        End If
      Else
        WriteLog(("RFXCom ") & sInterfaceType & (" Relay disabled."))
      End If
    End If
  Else
    hRFXComTX = Null
    If bMainDebug Then WriteLog(("RFXCom ") & sInterfaceType & (" support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom transmitter after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RFXComTX()

  If hRFXComTX Then
    hRFXComTX.Disconnect
    hRFXComTX = Null
  End If
  Setup_RFXComTX()

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom tranceiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RFXComTRX()

  If bRFXComTRXEnabled Then
    WriteLog(("RFXCom tranceiver support enabled."))
    If bServer Then
      ' create a new RFXCom class instance
      hRFXComTRX = New CRFXComTRX
      ' set the properties
      With hRFXComTRX
        .TCPHost = sRFXComTRXTCPHost
        .TCPPort = iRFXComTRXTCPPort
        .Interface = sRFXComTRXType
        .Baud = sRFXComTRXBaudrate
        .SerPort = sRFXComTRXSerialPort
        .RFXComDebug = bRFXComTRXDebug
        .RelayPort = iRFXComTRXRelayPort
        .GlobalX10 = bRFXComTRXGlobalX10
        .OldAddrFmt = bRFXComTRXOldAddrFmt
      End With
      If InStr(sRFXComTRXType, "tcp") Then
        ' connect to the rfxcom host:port
        If hRFXComTRX.ConnectTCP() Then
          WriteLog(("RFXCom tranceiver TCP interface connecting to ") & sRFXComTRXTCPHost & ":" & iRFXComTRXTCPPort)
        Else
          WriteLog(("ERROR: RFXCom tranceiver TCP interface FAILED to connect to ") & sRFXComTRXTCPHost & ":" & iRFXComTRXTCPPort)
          hRFXComTRX = Null
        End If
      Else
        ' connect to the rfxcom serial interface
        If hRFXComTRX.ConnectSerial() Then
          WriteLog(("RFXCom tranceiver serial interface connected to Port ") & sRFXComTRXSerialPort)
          hRFXComTRX.ResetInterface()
        Else
          WriteLog(("ERROR: RFXCom tranceiver serial interface FAILED to connect to Port ") & sRFXComTRXSerialPort)
          hRFXComTRX = Null
        End If
      End If
      If hRFXComTRX And If bRFXComTRXRelayEnabled Then
        If hRFXComTRX.StartRelay() Then
          WriteLog(("RFXCom tranceiver Relay listening for client on port ") & iRFXComTRXRelayPort)
        Else
          WriteLog(("ERROR: RFXCom tranceiver Relay FAILED to listen on port ") & iRFXComTRXRelayPort)
        End If
      Else
        WriteLog(("RFXCom tranceiver Relay disabled."))
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("RFXCom tranceiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RFXComTRX()

  If hRFXComTRX Then
    hRFXComTRX.Disconnect
    hRFXComTRX = Null
  End If
  Setup_RFXComTRX()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open ctx35 serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_CTX35()

  If bCTX35Enabled Then
    WriteLog(("Xanura CTX35 X10 support enabled."))
    If bServer Then
      ' create a new CTX35 class instance
      hCTX35 = New CCTX35
      ' set the properties
      With hCTX35
        .Port = sCTX35SerialPort
        .Baud = sCTX35Baudrate
        .PollTime = iCTX35PollTime
        .GlobalX10 = bCTX35GlobalX10
        .CTX35Debug = bCTX35Debug
      End With
      ' connect to the serial port
      If hCTX35.Connect() Then
        WriteLog(("Xanura CTX35 interface connected to Port ") & sCTX35SerialPort)
        hCTX35.Run()
      Else
        WriteLog(("ERROR: Xanura CTX35 interface FAILED to connect to Port ") & sCTX35SerialPort)
        hCTX35 = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Xanura CTX35 X10 support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ctx35 after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_CTX35()

  If hCTX35 Then
    Try hCTX35.tCTX35.Stop
    hCTX35.Disconnect
    hCTX35 = Null
  End If
  Setup_CTX35()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open plcbus serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_PLCBUS()

  If bPLCBUSEnabled Then
    WriteLog(("PLCBUS support enabled."))
    If bServer Then
      ' create a new PLCBUS class instance
      hPLCBUS = New CPLCBUS
      ' set the properties
      With hPLCBUS
        .Port = sPLCBUSSerialPort
        .Baud = sPLCBUSBaudrate
        .PollTime = iPLCBUSPollTime
        .UserCode = sPLCBUSUserCode
        .ThreePhase = bPLCBUSThreePhase
        .HouseCodes = sPLCBUSHouseCodes
        .PLCBUSDebug = bPLCBUSDebug
        .Ack = bPLCBUSAck
      End With
      ' connect to the serial port
      If hPLCBUS.Connect() Then
        WriteLog(("PLCBUS interface connected to Port ") & sPLCBUSSerialPort)
        hPLCBUS.Run()
      Else
        WriteLog(("ERROR: PLCBUS interface FAILED to connect to Port ") & sPLCBUSSerialPort)
        hPLCBUS = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("PLCBUS support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart plcbus after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_PLCBUS()

  If hPLCBUS Then
    Try hPLCBUS.tPLCBUS.Stop
    Try hPLCBUS.tPLCBUSLed.Stop
    hPLCBUS.Disconnect
    hPLCBUS = Null
  End If
  Setup_PLCBUS()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with ups tcp host and port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_UPS()

  If bUPSEnabled Then
    WriteLog(("UPS TCP support enabled."))
    If bServer Then
      ' create a new UPS class instance
      hUPS = New CUPS
      ' set the properties
      With hUPS
        .Host = sUPSTCPHost
        .Port = iUPSTCPPort
        .PollTime = iUPSPollTime
        .UPSDebug = bUPSDebug
      End With
      ' connect to the ups host:port
      If hUPS.Connect() Then
        WriteLog(("UPS TCP interface connecting to ") & sUPSTCPHost & ":" & iUPSTCPPort)
      Else
        WriteLog(("ERROR: UPS TCP interface FAILED to connect to ") & sUPSTCPHost & ":" & iUPSTCPPort)
      End If
    End If
  Else
    Try hUPS.tUPS.Stop
    If bMainDebug Then WriteLog(("UPS TCP support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ups after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_UPS()

  If hUPS Then
    Try hUPS.tUPS.Stop
    hUPS.Disconnect
    hUPS = Null
  End If
  Setup_UPS()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize sms modem
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_SMS()

  If bSMSEnabled Then
    WriteLog(("SMS modem support enabled."))
    If bServer Then
      ' create a new SMS class instance
      hSMS = New CSMS
      ' set the properties
      With hSMS
        .Port = sSMSSerialPort
        .Baud = sSMSBaudrate
        .PIN = sSMSPIN
        .ServiceCentre = sSMSServiceCentre
        .Contact = sSMSContact
        .SMSDebug = bSMSDebug
      End With
      ' connect to the serial port
      If hSMS.Connect() Then
        WriteLog(("SMS modem interface connected to Port ") & sSMSSerialPort)
        If Not hSMS.InitModem() Then
          WriteLog(("ERROR: SMS modem interface FAILED to initialize."))
        End If
      Else
        WriteLog(("ERROR: SMS modem interface FAILED to connect to Port ") & sSMSSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("SMS modem support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sms after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_SMS()

  If hSMS Then
    hSMS.Disconnect
    hSMS = Null
  End If
  Setup_SMS()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if network device is reachable
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Ping()

  If bPingEnabled Then
    WriteLog(("Network Ping support enabled."))
    ' start timer
    If bServer Then Ping.Run()
  Else
    Try Ping.tPing.Stop
    If bMainDebug Then WriteLog(("Network Ping support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ping after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Ping()

  Try Ping.tPing.Stop
  ' not much todo now
  Setup_Ping()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if bluetooth devices are around
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Bluetooth()

  If bBluetoothEnabled Then
    If ProgramExist("hcitool") Then
      WriteLog(("Bluetooth Proximity support enabled."))
      ' start timer
      If bServer Then Bluetooth.Run()
    Else
      If bServer Then
        WriteLog(("ERROR: Bluetooth command 'hcitool' not found, did you install it?"))
        bBluetoothEnabled = False
        WriteLog(("Bluetooth Proximity support disabled."))
      End If
    End If
  Else
    Try Bluetooth.tBluetooth.Stop
    If bMainDebug Then WriteLog(("Bluetooth Proximity support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart bluetooth after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Bluetooth()

  ' not much todo now
   Setup_Bluetooth()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize gps receiver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_GPS()

  If bGPSEnabled Then
    WriteLog(("GPS receiver support enabled."))
    If bServer Then
      ' create a new GPS class instance
      hGPS = New CGPS
      ' set the properties
      With hGPS
        .Port = sGPSSerialPort
        .Baud = sGPSBaudrate
        .GPSDebug = bGPSDebug
      End With
      ' connect to the serial port
      If hGPS.Connect() Then
        WriteLog(("GPS receiver connected to Port ") & sGPSSerialPort)
      Else
        WriteLog(("ERROR: GPS receiver FAILED to connect to Port ") & sGPSSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("GPS receiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart gps after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_GPS()

  If hGPS Then
    hGPS.Disconnect
    hGPS = Null
  End If
  Setup_GPS()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize weeder i/o
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Weeder()

  If bWeederEnabled Then
    WriteLog(("Weeder Module support enabled."))
    If bServer Then
      ' create a new Weeder class instance
      hWeeder = New CWeeder
      ' set the properties
      With hWeeder
        .Port = sWeederSerialPort
        .WeederDebug = bWeederDebug
      End With

      ' connect to the serial port
      If hWeeder.Connect() Then
        WriteLog(("Weeder Module(s) connected to Port ") & sWeederSerialPort)
      Else
        WriteLog(("ERROR: Weeder Module FAILED to connect to Port ") & sWeederSerialPort)
        hWeeder = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Weeder Module support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart weeder after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Weeder()

  If hWeeder Then
    hWeeder.Disconnect
    hWeeder = Null
  End If
  Setup_Weeder()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open 1-wire serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Temp08()

  If bTemp08Enabled Then
    WriteLog(("Midon Temp08 support enabled."))
    If bServer Then
      ' create a newTemp08 class instance
      hTemp08 = New CTemp08
      ' set the properties
      With hTemp08
        .Port = sTemp08SerialPort
        .Baud = sTemp08Baudrate
        .Temp08Debug = bTemp08Debug
      End With
      ' connect to the serial port
      If hTemp08.Connect() Then
        WriteLog(("Midon Temp08 interface connected to Port ") & sTemp08SerialPort)
      Else
        WriteLog(("ERROR: Midon Temp08 interface FAILED to connect to Port ") & sTemp08SerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Midon Temp08 support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart temp08 after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Temp08()

  If hTemp08 Then
    hTemp08.Disconnect
    hTemp08 = Null
  End If
  Setup_Temp08()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open visca ptz control serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_VISCA()

  If bVISCAEnabled Then
    WriteLog(("Sony VISCA support enabled."))
    If bServer Then
      ' create a new VISCA class instance
      hVISCA = New CVISCA
      ' set the properties
      hVISCA.Port = sVISCASerialPort
      hVISCA.VISCADebug = bVISCADebug
      ' connect to the serial port
      If hVISCA.Connect() Then
        WriteLog(("Sony VISCA interface connected to Port ") & sVISCASerialPort)
      Else
        WriteLog(("ERROR: Sony VISCA interface FAILED to connect to Port ") & sVISCASerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Sony VISCA support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart visca after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_VISCA()

  If hVISCA Then
    hVISCA.Disconnect
    hVISCA = Null
  End If
  Setup_VISCA()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if HDD temps are below threshold
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_HDDTemp()

  If bHDDTempEnabled Then
    WriteLog(("HDDTemp support enabled."))
    ' start timer
    If bServer Then HDDTemp.Run()
  Else
    Try HDDTemp.tHDDTemp.Stop
    Try HDDTemp.hHDDTemp.Close
    If bMainDebug Then WriteLog(("HDDTemp support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart hddtemp after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_HDDTemp()

  Setup_HDDTemp()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' capture video images from videoserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_VideoServer()

  If bVideoServerEnabled Then
    WriteLog(("IP9100 VideoServer support enabled."))
  Else
    If bMainDebug Then WriteLog(("IP9100 VideoServer support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart videoserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_VideoServer()

  ' not much todo now
   Setup_VideoServer()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if rrdtool support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RRDTool()

    If bRRDToolEnabled Then
      If bServer Then
        If ProgramExist("rrdtool") Then
          RRDTool.Run()
          WriteLog(("RRDTool support enabled."))
        Else
          WriteLog(("ERROR: RRDTool command 'rrdtool' not found, did you install it?"))
          bRRDToolEnabled = False
          WriteLog(("RRDTool support disabled."))
        End If
      Else
        WriteLog(("RRDTool support enabled."))
      Endif
    Else
      Try RRDTool.tRRDTool.Stop
      If bMainDebug Then WriteLog(("RRDTool support disabled."))
    End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rrdtool after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RRDTool()

  ' not much todo now
  Setup_RRDTool()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if asterisk support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Asterisk()

  If bAsteriskEnabled Then
    WriteLog(("Asterisk API support enabled."))
    If bServer Then
      ' create a new Asterisk class instance
      hAsterisk = New CAsterisk
      ' set the properties
      With hAsterisk
        .TCPHost = sAsteriskTCPHost
        .TCPPort = iAsteriskTCPPort
        .User = sAsteriskUser
        .Password = sAsteriskPassword
        .PollTime = iAsteriskPollTime
        .AsteriskDebug = bAsteriskDebug
      End With
      ' connect to the asterisk host:port
      If hAsterisk.Connect() Then
        WriteLog(("Asterisk API interface connecting to ") & sAsteriskTCPHost & ":" & iAsteriskTCPPort)
      Else
        WriteLog(("ERROR: Asterisk API interface FAILED to connect to ") & sAsteriskTCPHost & ":" & iAsteriskTCPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Asterisk API support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart asterisk support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Asterisk()

  If hAsterisk Then
    hAsterisk.Disconnect
    hAsterisk = Null
  End If
  Setup_Asterisk()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if tvguide support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_TVGuide()

  If bTVGuideEnabled Then
    WriteLog(("TV Guide support enabled."))
  Else
    If bMainDebug Then WriteLog(("TV Guide support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart tvguide after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_TVGuide()

  Setup_TVGuide()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if server statistics is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_ServerStats()

  If bServerStatsEnabled Then
    If bServer Then ServerStats.Run()
    WriteLog(("Server Statistics enabled."))
  Else
    Try ServerStats.tServerStats.Stop
    If bMainDebug Then WriteLog(("Server Statistics disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart server statistics after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_ServerStats()

  Setup_ServerStats()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open IRMan serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_IRMan()

  If bIRManEnabled Then
    WriteLog(("IRMan IR support enabled."))
    If bServer Then
      ' create a new IRMan class instance
      hIRMan = New CIRMan
      ' set the properties
      With hIRMan
        .Port = sIRManSerialPort
        .IRManDebug = bIRManDebug
      End With
      ' connect to the serial port
      If hIRMan.Connect() Then
        WriteLog(("IRMan IR interface connected to Port ") & sIRManSerialPort)
        ' wakeup device
        hIRMan.Run()
      Else
        WriteLog(("ERROR: IRMan IR interface FAILED to connect to Port ") & sIRManSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("IRMan IR support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart irman after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_IRMan()

  If hIRMan Then
    hIRMan.Disconnect
    hIRMan = Null
  End If
  Setup_IRMan()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open plugwise serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Plugwise()

  If bPlugwiseEnabled Then
    WriteLog(("Plugwise support enabled."))
    If bServer Then
      ' create a new Plugwise class instance
      hPlugwise = New CPlugwise
      ' set the properties
      With hPlugwise
        .Port = sPlugwiseSerialPort
        .PollTime = iPlugwisePolltime
        .PlugwiseDebug = bPlugwiseDebug
      End With
      ' connect to the serial port
      If hPlugwise.Connect() Then
        WriteLog(("Plugwise interface connected to Port ") & sPlugwiseSerialPort)
        hPlugwise.Run()
      Else
        WriteLog(("ERROR: Plugwise interface FAILED to connect to Port ") & sPlugwiseSerialPort)
        hPlugwise = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Plugwise support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart plugwise after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Plugwise()

  If hPlugwise Then
    Try hPlugwise.tPlugwise.Stop
    hPlugwise.Disconnect
    hPlugwise = Null
  End If
  Setup_Plugwise()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if fritzbox support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_FritzBox()

  If bFritzBoxEnabled Then
    WriteLog(("Fritz!Box API support enabled."))
    If bServer Then
      ' create a new FritzBox class instance
      hFritzBox = New CFritzBox
      ' set the properties
      With hFritzBox
        .TCPHost = sFritzBoxTCPHost
        .FritzBoxDebug = bFritzBoxDebug
      End With
      ' connect to the fritzbox host:port
      If hFritzBox.Connect() Then
        WriteLog(("Fritz!Box API interface connecting to ") & sFritzBoxTCPHost & ":1012")
      Else
        WriteLog(("ERROR: Fritz!Box API interface FAILED to connect to ") & sFritzBoxTCPHost & ":1012")
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Fritz!Box API support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart fritzbox support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_FritzBox()

  If hFritzBox Then
    hFritzBox.Disconnect
    hFritzBox = Null
  End If
  Setup_FritzBox()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Twitter support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Twitter()

  If bTwitterEnabled Then
    WriteLog(("Twitter support enabled."))
  Else
    If bMainDebug Then WriteLog(("Twitter support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Twitter settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Twitter()

  ' not much todo now
  Setup_Twitter()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open DSC serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_DSC()

  If bDSCEnabled Then
    WriteLog(("DSC Security support enabled."))
    If bServer Then
      ' create a new DSC class instance
      hDSC = New CDSC
      ' set the properties
      With hDSC
        .Port = sDSCSerialPort
        .Baud = sDSCBaudrate
        .Type = iDSCType
        .MasterCode = sDSCMasterCode
        .DSCDebug = bDSCDebug
      End With
      ' connect to the serial port
      If hDSC.Connect() Then
        WriteLog(("DSC Security interface connected to Port ") & sDSCSerialPort)
      Else
        WriteLog(("ERROR: DSC Security interface FAILED to connect to Port ") & sDSCSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("DSC Security support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart DSC after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_DSC()

  If hDSC Then
    hDSC.Disconnect
    hDSC = Null
  End If
  Setup_DSC()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open Visonic serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Visonic()

  If bVisonicEnabled Then
    WriteLog(("Visonic PowerMax/PowerMaster Security support enabled."))
    If bServer Then
      ' create a new Visonic class instance
      hVisonic = New CVisonic
      ' set the properties
      With hVisonic
        .Port = sVisonicSerialPort
        .MasterCode = sVisonicMasterCode
        .VisonicDebug = bVisonicDebug
      End With
      ' connect to the serial port
      If hVisonic.Connect() Then
        WriteLog(("Visonic PowerMax/PowerMaster Security interface connected to Port ") & sVisonicSerialPort)
        hVisonic.Run()
      Else
        WriteLog(("ERROR: Visonic PowerMax/PowerMaster Security interface FAILED to connect to Port ") & sVisonicSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Visonic PowerMax/PowerMaster Security support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Visonic after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Visonic()

  If hVisonic Then
    hVisonic.Disconnect
    hVisonic = Null
  End If
  Setup_Visonic()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with eibd via tcp
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_EIB()

  If bEIBEnabled Then
    WriteLog(("KNX/EIB TCP support enabled."))
    If bServer Then
      ' create a new EIB class instance
      hEIB = New CEIB
      ' set the properties
      With hEIB
        .TCPHost = sEIBTCPHost
        .TCPPort = iEIBTCPPort
        .EIBDebug = bEIBDebug
      End With
      ' connect to eibd host:port
      If hEIB.Connect() Then
        WriteLog(("KNX/EIB TCP interface connecting to ") & sEIBTCPHost & ":" & iEIBTCPPort)
      Else
        WriteLog(("ERROR: KNX/EIB TCP interface FAILED to connect to ") & sEIBTCPHost & ":" & iEIBTCPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("KNX/EIB TCP support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart eib after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_EIB()

  If hEIB Then
    hEIB.Disconnect
    hEIB = Null
  End If
  Setup_EIB()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open Domotica serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Domotica()

  If bDomoticaEnabled Then
    WriteLog(("Domotica support enabled."))
    If bServer Then
      ' create a new Domotica class instance
      hDomotica = New CDomotica
      ' set the properties
      With hDomotica
        .Port = sDomoticaSerialPort
        .DomoticaDebug = bDomoticaDebug
      End With
      ' connect to the serial port
      If hDomotica.Connect() Then
        WriteLog(("Domotica interface connected to Port ") & sDomoticaSerialPort)
      Else
        WriteLog(("ERROR: Domotica interface FAILED to connect to Port ") & sDomoticaSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Domotica support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Domotica after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Domotica()

  If hDomotica Then
    hDomotica.Disconnect
    hDomotica = Null
  End If
  Setup_Domotica()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read sensors via digitemp
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Digitemp()

  Dim bNotOk As Boolean

  If bDigitempEnabled Then
    If bServer Then
      If Not ProgramExist(sDigitempCommand) Then
        bNotOk = True
        WriteLog(("ERROR: Digitemp command ") & sDigitempCommand & (" not found, did you install it?"))
      Endif
      If Not Exist(sDigitempConfig) Then
        bNotOk = True
        WriteLog(("ERROR: Digitemp config file ") & sDigitempConfig & (" not found, did you initialize it?"))
      Endif
    Endif
    If bNotOk And If bServer Then
      bDigitempEnabled = False
      WriteLog(("Digitemp support disabled."))
    Else
      WriteLog(("Digitemp support enabled."))
      ' start timer
      If bServer Then Digitemp.Run()
    End If
  Else
    Try Digitemp.tDigitemp.Stop
    If bMainDebug Then WriteLog(("Digitemp support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart digitemp after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Digitemp()

  ' not much todo now
   Setup_Digitemp()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open Z-Wave serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_ZWave()

  If bZWaveEnabled Then
    WriteLog(("Z-Wave support enabled."))
    If bServer Then
      ' create a new Z-Wave class instance
      hZWave = New CZWave
      ' set the properties
      With hZWave
        .Port = sZWaveSerialPort
        .ZWaveDebug = bZWaveDebug
        .Polltime = iZWavePollTime
        .PollTimeListening = sZWavePollTimeListening
        .PollTimeSleeping = sZWavePollTimeSleeping
        .UpdateNeighbor = sZWaveUpdateNeighbor
        .EnablePollListening = bZWaveEnablePollListening
        .EnablePollSleeping = bZWaveEnablePollSleeping
        .EnableUpdateNeighbor = bZWaveEnableUpdateNeighbor
        .tOZWKeepAlive.Delay = iZWavePollTime
      End With

      If hZWave.sLibDomoZwave <> hZWave.Version() Then
        WriteLog(("ERROR: ***************************************************************************************************"))
        WriteLog(("ERROR: *** Z-Wave interface is disabled, because of a version mismatch ***"))
        WriteLog(("ERROR: *** The OpenZWave wrapper version doesn't match the required version ***"))
        WriteLog(("ERROR: *** Required by DomotiGa: " & hZWave.sLibDomoZwave & " ***"))
        WriteLog(("ERROR: *** OpenZWave wrapper: " & hZWave.Version() & " ***"))
        WriteLog(("ERROR: *** Please recompile as described on page: http://www.domotiga.nl/projects/domotiga/wiki/Z-Wave ***"))
        WriteLog(("ERROR: ***************************************************************************************************"))
        hZWave = Null
        Return
      Endif

      If Exist(Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/") = False Then
        WriteLog(("ERROR: Z-Wave interface is disabled, the open-zwave configuration directory is missing (" & Main.sBaseDir &/ "wrappers/domozwave/open-zwave/config/" & ")"))
        hZWave = Null
        Return
      End If

      WriteLog(("Z-Wave interface trying to connect to Port ") & sZWaveSerialPort)

      ' connect to the serial port
      hZWave.Connect()

    End If
  Else
    If bMainDebug Then WriteLog(("Z-Wave support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Z-Wave after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_ZWave()

  If hZWave Then
    Try hZWave.tZWave.Stop
    Try hZWave.tZWaveOZWKeepAlive.Stop
    hZWave.Disconnect
    hZWave = Null
  End If
  Setup_ZWave()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if One-Wire Weather support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_OWW()

  If bOWWEnabled Then
    WriteLog(("One-Wire Weather support enabled."))
    If bServer Then
      ' create a new One-Wire Weather class instance
      If sOWWServerType = "Henriksen WServer UDP" Then
        hOWWUDP = New COWW
        ' set the properties
        With hOWWUDP
          .TCPHost = sOWWTCPHost
          .TCPPort = iOWWTCPPort
          .ServerType = sOWWServerType
          .OWWDebug = bOWWDebug
        End With
        ' connect to the One-Wire Weather host:port
        If hOWWUDP.Connect() Then
          WriteLog(("One-Wire Weather UDP interface listening on port: ") & iOWWTCPPort)
        Else
          WriteLog(("ERROR: One-Wire Weather UDP interface FAILED to connect to port: ") & iOWWTCPPort)
        End If
      Else
        hOWWTCP = New COWW
        ' set the properties
        With hOWWTCP
          .TCPHost = sOWWTCPHost
          .TCPPort = iOWWTCPPort
          .ServerType = sOWWServerType
          .OWWDebug = bOWWDebug
        End With
        ' connect to the One-Wire Weather host:port
        If hOWWTCP.Connect() Then
          WriteLog(("One-Wire Weather TCP interface connecting to ") & sOWWTCPHost & ":" & iOWWTCPPort)
        Else
          WriteLog(("ERROR: One-Wire Weather TCP interface FAILED to connect to ") & sOWWTCPHost & ":" & iOWWTCPPort)
        End If
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("One-Wire Weather support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart One-Wire Weather support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_OWW()

  If hOWWUDP Then
    hOWWUDP.Disconnect
    hOWWUDP = Null
  End If
  If hOWWTCP Then
    hOWWTCP.Disconnect
    hOWWTCP = Null
  End If
  Setup_OWW()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if LIRC support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_LIRC()

  If bLIRCEnabled Then
    WriteLog(("LIRC support enabled."))
    If bServer Then
      ' create a new LIRC class instance
      hLIRC = New CLIRC
      ' set the properties
      With hLIRC
        .TCPHost = sLIRCTCPHost
        .TCPPort = iLIRCTCPPort
        .LIRCDebug = bLIRCDebug
      End With
      ' connect to the LIRC host:port
      If hLIRC.Connect() Then
        WriteLog(("LIRC interface connecting to ") & sLIRCTCPHost & ":" & iLIRCTCPPort)
      Else
        WriteLog(("ERROR: LIRC interface FAILED to connect to ") & sLIRCTCPHost & ":" & iLIRCTCPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("LIRC support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart LIRC support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_LIRC()

  If hLIRC Then
    hLIRC.Disconnect
    hLIRC = Null
  End If
  Setup_LIRC()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Pachube support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Pachube()

  If bPachubeEnabled Then
    WriteLog(("Pachube support with ") & IIf(Main.iPachubePushTime, "Manual", "Automatic") & (" feeds enabled."))
    ' start timer
    If bServer Then
      If Main.iPachubePushTime Then
        Pachube.Run()
      End If
    End If
  Else
    Try Pachube.tPachube.Stop
    If bMainDebug Then WriteLog(("Pachube support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart pachube after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Pachube()

  Setup_Pachube()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open jeelink serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_JeeLabs()

  If bJeeLabsEnabled Then
    WriteLog(("JeeLabs JeeLink support enabled."))
    If bServer Then
      ' create a new JeeLabs class instance
      hJeeLabs = New CJeeLabs
      ' set the properties
      With hJeeLabs
        .Port = sJeeLabsSerialPort
        .Baud = sJeeLabsBaudrate
        .JeeLabsDebug = bJeeLabsDebug
      End With
      ' connect to the serial port
      If hJeeLabs.Connect() Then
        WriteLog(("JeeLabs JeeLink interface connected to Port ") & sJeeLabsSerialPort)
      Else
        WriteLog(("ERROR: JeeLabs JeeLink interface FAILED to connect to Port ") & sJeeLabsSerialPort)
        hJeeLabs = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("JeeLabs JeeLink support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart jeelabs after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_JeeLabs()

  If hJeeLabs Then
    hJeeLabs.Disconnect
    hJeeLabs = Null
  End If
  Setup_JeeLabs()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if TemperaturNu support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_TemperaturNu()

  If bTemperaturNuEnabled Then
    WriteLog(("TemperaturNu support enabled."))
    ' start timer
    If bServer Then
      If Main.iTemperaturNuPushTime Then
        TemperaturNu.Run()
      End If
    End If
  Else
    Try TemperaturNu.tTemperaturNu.Stop
    If bMainDebug Then WriteLog(("TemperaturNu support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart TemperaturNu after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_TemperaturNu()

  Setup_TemperaturNu()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with squeezeserver via socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_SqueezeServer()

  If bSqueezeServerEnabled Then
    WriteLog(("Squeeze Server support enabled."))
    If bServer Then
      ' create a new SqueezeServer class instance
      hSqueezeServer = New CSqueezeServer
      ' set the properties
      With hSqueezeServer
        .TCPHost = sSqueezeServerTCPHost
        .TCPPort = iSqueezeServerTCPPort
        .SqueezeServerDebug = bSqueezeServerDebug
      End With
      ' connect to squeezeserver host:port
      If hSqueezeServer.Connect() Then
        WriteLog(("Squeeze Server TCP interface connecting to ") & sSqueezeServerTCPHost & ":" & iSqueezeServerTCPPort)
      Else
        WriteLog(("ERROR: Squeeze Server TCP interface FAILED to connect to ") & sSqueezeServerTCPHost & ":" & iSqueezeServerTCPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Squeeze Server support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart squeezeserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_SqueezeServer()

  If hSqueezeServer Then
    hSqueezeServer.Disconnect
    hSqueezeServer = Null
  End If
  Setup_SqueezeServer()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open led matrix serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_LEDMatrix()

  If bLEDMatrixEnabled Then
    WriteLog(("LED Matrix support enabled."))
    If bServer Then
      ' create a new LEDMatrix class instance
      hLEDMatrix = New CLEDMatrix
      ' set the properties
      With hLEDMatrix
        .Port = sLEDMatrixSerialPort
        .LEDMatrixDebug = bLEDMatrixDebug
        .DisplayID = sLEDMatrixID
        .DisplayColor = iLEDMatrixColor
        .DisplaySpeed = iLEDMatrixSpeed
      End With
      ' connect to the serial port
      If hLEDMatrix.Connect() Then
        WriteLog(("LED Matrix interface connected to Port ") & sLEDMatrixSerialPort)
        ' show startup message
        hLEDMatrix.Run()
      Else
        WriteLog(("ERROR: LED Matrix interface FAILED to connect to Port ") & sLEDMatrixSerialPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("LED Matrix support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart led matrix after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_LEDMatrix()

  If hLEDMatrix Then
    hLEDMatrix.Disconnect
    hLEDMatrix = Null
  End If
  Setup_LEDMatrix()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if weatherbug support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_WeatherBug()

  If bWeatherBugEnabled Then
    WriteLog(("WeatherBug support enabled."))
  Else
    If bMainDebug Then WriteLog(("WeatherBug support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart weatherbug after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_WeatherBug()

  ' not much todo now
  Setup_WeatherBug()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with ezcontrol interface via udpsocket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_EZcontrol()

  If bEZcontrolEnabled Then
    WriteLog(("EZcontrol support enabled."))
    If bServer Then
      ' create a new EZcontrol class instance
      hEZcontrol = New CEZcontrol
      ' set the properties
      With hEZcontrol
        .UDPHost = sEZcontrolUDPHost
        .UDPPort = iEZcontrolUDPPort
        .EZcontrolDebug = bEZcontrolDebug
      End With
      ' connect to interface host:port
      If hEZcontrol.Connect() Then
        WriteLog(("EZcontrol UDP interface setup for ") & sEZcontrolUDPHost & ":" & iEZcontrolUDPPort & ".")
      Else
        WriteLog(("ERROR: EZcontrol UDP interface FAILED to setup for ") & sEZcontrolUDPHost & ":" & iEZcontrolUDPPort & ".")
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("EZcontrol support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ezcontrol after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_EZcontrol()

  If hEZcontrol Then
    hEZcontrol.Disconnect
    hEZcontrol = Null
  End If
  Setup_EZcontrol()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with Current Cost
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_CurrentCost()

  If bCurrentCostEnabled Then
    WriteLog(("CurrentCost receiver support enabled."))
    If bServer Then
      ' create a new CurrentCost class instance
      hCurrentCost = New CCurrentCost
      ' set the properties
      With hCurrentCost
        .Baud = sCurrentCostBaudrate
        .Port = sCurrentCostSerialPort
        .CurrentCostDebug = bCurrentCostDebug
      End With
      ' connect to the currentcost serial interface
      If hCurrentCost.Connect() Then
        WriteLog(("CurrentCost receiver serial interface connected to Port ") & sCurrentCostSerialPort)
      Else
        WriteLog(("ERROR: CurrentCost receiver serial interface FAILED to connect to Port ") & sCurrentCostSerialPort)
        hCurrentCost = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("CurrentCost receiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Current Cost after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_CurrentCost()

  If hCurrentCost Then
    hCurrentCost.Disconnect
    hCurrentCost = Null
  End If
  Setup_CurrentCost()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with denon receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Denon()

  If bDenonEnabled Then
    WriteLog(("Denon receiver support enabled."))
    If bServer Then
      ' create a new Denon class instance
      hDenon = New CDenon
      ' set the properties
      With hDenon
        .TCPHost = sDenonTCPHost
        .TCPPort = iDenonTCPPort
        .Interface = sDenonType
        .Baud = sDenonBaudrate
        .SerPort = sDenonSerialPort
        .DenonDebug = bDenonDebug
      End With
      If InStr(sDenonType, "tcp") Then
        ' connect to the denon host:port
        If hDenon.ConnectTCP() Then
          WriteLog(("Denon receiver TCP interface connecting to ") & sDenonTCPHost & ":" & iDenonTCPPort)
        Else
          WriteLog(("ERROR: Denon receiver TCP interface FAILED to connect to ") & sDenonTCPHost & ":" & iDenonTCPPort)
          hDenon = Null
        End If
      Else
        ' connect to the denon serial interface
        If hDenon.ConnectSerial() Then
          WriteLog(("Denon receiver serial interface connected to Port ") & sDenonSerialPort)
        Else
          WriteLog(("ERROR: Denon receiver serial interface FAILED to connect to Port ") & sDenonSerialPort)
          hDenon = Null
        End If
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Denon receiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart denon after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Denon()

  If hDenon Then
    hDenon.Disconnect
    hDenon = Null
  End If
  Setup_Denon()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with pioneer receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Pioneer()

  If bPioneerEnabled Then
    WriteLog(("Pioneer receiver support enabled."))
    If bServer Then
      ' create a new Pioneer class instance
      hPioneer = New CPioneer
      ' set the properties
      With hPioneer
        .TCPHost = sPioneerTCPHost
        .TCPPort = iPioneerTCPPort
        .Interface = sPioneerType
        .Baud = sPioneerBaudrate
        .SerPort = sPioneerSerialPort
        .PioneerDebug = bPioneerDebug
      End With
      If InStr(sPioneerType, "tcp") Then
        ' connect to the pioneer host:port
        If hPioneer.ConnectTCP() Then
          WriteLog(("Pioneer receiver TCP interface connecting to ") & sPioneerTCPHost & ":" & iPioneerTCPPort)
        Else
          WriteLog(("ERROR: Pioneer receiver TCP interface FAILED to connect to ") & sPioneerTCPHost & ":" & iPioneerTCPPort)
          hPioneer = Null
        End If
      Else
        ' connect to the Pioneer serial interface
        If hPioneer.ConnectSerial() Then
          WriteLog(("Pioneer receiver serial interface connected to Port ") & sPioneerSerialPort)
        Else
          WriteLog(("ERROR: Pioneer receiver serial interface FAILED to connect to Port ") & sPioneerSerialPort)
          hPioneer = Null
        End If
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Pioneer receiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart pioneer after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Pioneer()

  If hPioneer Then
    hPioneer.Disconnect
    hPioneer = Null
  End If
  Setup_Pioneer()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with irtrans receiver tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_IRTrans()

  If bIRTransEnabled Then
    WriteLog(("IRTrans support enabled."))
    If bServer Then
      ' create a new IRTrans class instance
      hIRTrans = New CIRTrans
      ' set the properties
      With hIRTrans
        .TCPHost = sIRTransTCPHost
        .TCPPort = iIRTransTCPPort
        .IRTransDebug = bIRTransDebug
      End With
      ' connect to the irtrans host:port
      If hIRTrans.Connect() Then
        WriteLog(("IRTrans TCP interface connecting to ") & sIRTransTCPHost & ":" & iIRTransTCPPort)
      Else
        WriteLog(("ERROR: IRTrans TCP interface FAILED to connect to ") & sIRTransTCPHost & ":" & iIRTransTCPPort)
        hIRTrans = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("IRTrans support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart irtrans after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_IRTrans()

  If hIRTrans Then
    hIRTrans.Disconnect
    hIRTrans = Null
  End If
  Setup_IRTrans()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with Mochad receiver tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Mochad()

  If bMochadEnabled Then
    WriteLog(("Mochad X10 support enabled."))
    If bServer Then
      ' create a new Mochad class instance
      hMochad = New CMochad
      ' set the properties
      With hMochad
        .TCPHost = sMochadTCPHost
        .TCPPort = iMochadTCPPort
        .MochadDebug = bMochadDebug
      End With
      ' connect to the Mochad host:port
      If hMochad.Connect() Then
        WriteLog(("Mochad TCP interface connecting to ") & sMochadTCPHost & ":" & iMochadTCPPort)
      Else
        WriteLog(("ERROR: Mochad TCP interface FAILED to connect to ") & sMochadTCPHost & ":" & iMochadTCPPort)
        hMochad = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Mochad X10 support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Mochad after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Mochad()

  If hMochad Then
    hMochad.Disconnect
    hMochad = Null
  End If
  Setup_Mochad()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with onkyo receiver tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Onkyo()

  If bOnkyoEnabled Then
    WriteLog(("Onkyo/Integra receiver support enabled."))
    If bServer Then
      ' create a new Onkyo class instance
      hOnkyo = New COnkyo
      ' set the properties
      With hOnkyo
        .TCPHost = sOnkyoTCPHost
        .TCPPort = iOnkyoTCPPort
        .Interface = sOnkyoType
        .Baud = sOnkyoBaudrate
        .SerPort = sOnkyoSerialPort
        .OnkyoDebug = bOnkyoDebug
      End With
      If InStr(sOnkyoType, "tcp") Then
        ' connect to the onkyo host:port
        If hOnkyo.ConnectTCP() Then
          WriteLog(("Onkyo/Integra receiver TCP interface connecting to ") & sOnkyoTCPHost & ":" & iOnkyoTCPPort)
        Else
          WriteLog(("ERROR: Onkyo/Integra receiver TCP interface FAILED to connect to ") & sOnkyoTCPHost & ":" & iOnkyoTCPPort)
          hOnkyo = Null
        End If
      Else
        ' connect to the onkyo serial interface
        If hOnkyo.ConnectSerial() Then
          WriteLog(("Onkyo/Integra receiver serial interface connected to Port ") & sOnkyoSerialPort)
        Else
          WriteLog(("ERROR: Onkyo/integra receiver serial interface FAILED to connect to Port ") & sOnkyoSerialPort)
          hOnkyo = Null
        End If
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Onkyo/Integra receiver support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart onkyo after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Onkyo()

  If hOnkyo Then
    hOnkyo.Disconnect
    hOnkyo = Null
  End If
  Setup_Onkyo()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with pwrctrl interface via udpsocket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_PwrCtrl()

  If bPwrCtrlEnabled Then
    WriteLog(("PwrCtrl support enabled."))
    If bServer Then
      ' create a new PwrCtrl class instance
      hPwrCtrl = New CPwrCtrl
      ' set the properties
      With hPwrCtrl
        .UDPPortRead = iPwrCtrlUDPRead
        .UDPPortSend = iPwrCtrlUDPSend
        .PwrCtrlDebug = bPwrCtrlDebug
        .PwrCtrlUserPw = sPwrCtrlUserPw
      End With
      ' connect to interface host:port
      If hPwrCtrl.Connect() Then
        WriteLog(("PwrCtrl listening on UDP port ") & iPwrCtrlUDPRead)
        ' get state for all devices
        hPwrCtrl.GetAllState()
      Else
        WriteLog(("ERROR: PwrCtrl UDP interface FAILED to setup to listen for Port ") & iPwrCtrlUDPRead)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("PwrCtrl support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart PwrCtrl after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_PwrCtrl()

  If hPwrCtrl Then
    hPwrCtrl.Disconnect
    hPwrCtrl = Null
  End If
  Setup_PwrCtrl()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Setup PVoutput
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_PVoutput()

  If bPVoutputEnabled Then
    WriteLog(("PVoutput support enabled."))
    ' start timer
    If bServer Then
      If Main.iPVoutputPushTime Then
        PVoutput.Run()
      End If
    End If
  Else
    Try PVoutput.tPVoutput.Stop
    If bMainDebug Then WriteLog(("PVoutput support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart PVoutput settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_PVoutput()

  Setup_PVoutput()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with sharptv
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_SharpTV()

  If bSharpTVEnabled Then
    WriteLog(("Sharp TV receiver support enabled."))
    If bServer Then
      ' create a new SharpTV class instance
      hSharpTV = New CSharpTV
      ' set the properties
      With hSharpTV
        .TCPHost = sSharpTVTCPHost
        .TCPPort = iSharpTVTCPPort
        .Interface = sSharpTVType
        .Baud = sSharpTVBaudrate
        .SerPort = sSharpTVSerialPort
        .SharpTVDebug = bSharpTVDebug
      End With
      If InStr(sSharpTVType, "tcp") Then
        ' connect to the sharptv host:port
        If hSharpTV.ConnectTCP() Then
          WriteLog(("Sharp TV receiver TCP interface connecting to ") & sSharpTVTCPHost & ":" & iSharpTVTCPPort)
        Else
          WriteLog(("ERROR: Sharp TV receiver TCP interface FAILED to connect to ") & sSharpTVTCPHost & ":" & iSharpTVTCPPort)
          hSharpTV = Null
        Endif
      Else
        ' connect to the sharptv serial interface
        If hSharpTV.ConnectSerial() Then
          WriteLog(("Sharp TV receiver serial interface connected to Port ") & sSharpTVSerialPort)
        Else
          WriteLog(("ERROR: Sharp TV receiver serial interface FAILED to connect to Port ") & sSharpTVSerialPort)
          hSharpTV = Null
        Endif
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog(("Sharp TV receiver support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart sharptv after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_SharpTV()

  If hSharpTV Then
    hSharpTV.Disconnect
    hSharpTV = Null
  End If
  Setup_SharpTV()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with lgtv
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_LGTV()

  If bLGTVEnabled Then
    WriteLog(("LG TV receiver support enabled."))
    If bServer Then
      ' create a new LGTV class instance
      hLGTV = New CLGTV
      ' set the properties
      With hLGTV
        .TCPHost = sLGTVTCPHost
        .TCPPort = iLGTVTCPPort
        .Interface = sLGTVType
        .Baud = sLGTVBaudrate
        .SerPort = sLGTVSerialPort
        .LGTVDebug = bLGTVDebug
      End With
      If InStr(sLGTVType, "tcp") Then
        ' connect to the lgtv host:port
        If hLGTV.ConnectTCP() Then
          WriteLog(("LG TV receiver TCP interface connecting to ") & sLGTVTCPHost & ":" & iLGTVTCPPort)
        Else
          WriteLog(("ERROR: LG TV receiver TCP interface FAILED to connect to ") & sLGTVTCPHost & ":" & iLGTVTCPPort)
          hLGTV = Null
        Endif
      Else
        ' connect to the lgtv serial interface
        If hLGTV.ConnectSerial() Then
          WriteLog(("LG TV receiver serial interface connected to Port ") & sLGTVSerialPort)
        Else
          WriteLog(("ERROR: LG TV receiver serial interface FAILED to connect to Port ") & sLGTVSerialPort)
          hLGTV = Null
        Endif
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog(("LG TV receiver support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart lgtv after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_LGTV()

  If hLGTV Then
    hLGTV.Disconnect
    hLGTV = Null
  End If
  Setup_LGTV()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with iport
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_iPort()

  If bIPortEnabled Then
    WriteLog(("iPort dock support enabled."))
    If bServer Then
      ' create a new IPort class instance
      hIPort = New CIPort
      ' set the properties
      With hIPort
        .TCPHost = sIPortTCPHost
        .TCPPort = iIPortTCPPort
        .Interface = sIPortType
        .Baud = sIPortBaudrate
        .SerPort = sIPortSerialPort
        .IPortDebug = bIPortDebug
      End With
      If InStr(sIPortType, "tcp") Then
        ' connect to the iport host:port
        If hIPort.ConnectTCP() Then
          WriteLog(("iPort dock TCP interface connecting to ") & sIPortTCPHost & ":" & iIPortTCPPort)
        Else
          WriteLog(("ERROR: iPort dock TCP interface FAILED to connect to ") & sIPortTCPHost & ":" & iIPortTCPPort)
          hIPort = Null
        Endif
      Else
        ' connect to the iport serial interface
        If hIPort.ConnectSerial() Then
          WriteLog(("iPort dock serial interface connected to Port ") & sIPortSerialPort)
        Else
          WriteLog(("ERROR: iPort dock serial interface FAILED to connect to Port ") & sIPortSerialPort)
          hIPort = Null
        Endif
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog(("iPort dock support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart iport after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_iPort()

  If hIPort Then
    hIPort.Disconnect
    hIPort = Null
  End If
  Setup_iPort()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start listening for cf iviewer remotes
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_iViewer()

  If bIViewerEnabled Then
    If bIViewerDebug Then Main.WriteLog(("CF iViewer support enabled."))
    If bServer Then
      ' create a new iViewer class instance
      hIViewer = New CIViewer

      ' set the properties
      hIViewer.IViewerPassword = sIViewerPassword
      hIViewer.IViewerPort = iIViewerTCPPort
      hIViewer.IViewerDebug = bIViewerDebug

      ' start iviewer
      If hIViewer.Connect() Then
        Main.WriteLog(("CF iViewer server listening on Port ") & iIViewerTCPPort)
      Else
        Main.WriteLog(("ERROR: CF iViewer server FAILED to start on Port ") & iIViewerTCPPort)
      End If
    End If
  Else
    If bMainDebug Then Main.WriteLog(("CF iViewer support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart cf iviewer after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_iViewer()

  If hIViewer Then
    hIViewer.Disconnect
    hIViewer = Null
  End If
  Setup_IViewer()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' google latitude location
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_GLatitude()

  If bGLatitudeEnabled Then
    WriteLog(("Google Latitude support enabled."))
    ' start timer
    If bServer Then GLatitude.Run()
  Else
    Try GLatitude.tGLatitude.Stop
    If bMainDebug Then WriteLog(("Google Latitude support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart google latitude after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_GLatitude()

  Try GLatitude.tLatitude.Stop
  Try GLatitude.hLatitudeGeo.Close
  Try GLatitude.hLatitudeBadge.Close
  ' not much todo now
  Setup_GLatitude()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' thermostat
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Thermostat()

  If bThermostatEnabled Then
    WriteLog(("Thermostat support enabled."))
    ' start timer
    If bServer Then Thermostat.Run()
  Else
    Try Thermostat.tThermostat.Stop
    If bMainDebug Then WriteLog(("Thermostat support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Thermostat after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Thermostat()

  Setup_Thermostat()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open Velleman K8055 board and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_K8055()

  If bK8055Enabled Then
    WriteLog(("Velleman K8055 support enabled."))
    If bServer Then
      If ProgramExist("k8055") Then
        ' create a new K8055 class instance
        hK8055 = New CK8055
        ' set the properties
        With hK8055
          .PollTime = iK8055PollTime
          .K8055Debug = bK8055Debug
          .AddressBoard = iK8055BoardAddress
          .DebounceTime1 = iK8055DebounceTime1
          .DebounceTime2 = iK8055DebounceTime2
        End With
        ' connect to the serial port
        If hK8055.Connect() Then
          WriteLog(("K8055 interface connected to board at Address ") & iK8055BoardAddress)
          hK8055.Run()
        Else
          WriteLog(("ERROR: K8055 interface FAILED to connect to board at Address ") & iK8055BoardAddress)
          hK8055 = Null
        Endif
      Else
        WriteLog(("ERROR: Velleman command 'k8055' not found, did you install it?"))
        bK8055Enabled = False
        WriteLog(("Velleman K8055 support disabled."))
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog(("Velleman K8055 support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart K8055 after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_K8055()

  If hK8055 Then
    Try hK8055.tK8055.Stop
    hK8055.Disconnect
    hK8055 = Null
  End If
  Setup_K8055()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' OWFS support
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_OWFS()

  If bOWFSEnabled Then
    WriteLog(("OWFS support enabled."))
    ' create a new OWFS class instance
    hOWFS = New COWFS
    ' set the properties
    With hOWFS
        .PollTime = iOWFSPollTime
        .BaseDir = sOWFSBaseDir
        .Cached = bOWFSCached
        .OWFSDebug = bOWFSDebug
    End With
    ' start timer
    If bServer Then hOWFS.Run()
  Else
    Try hOWFS.tOWFS.Stop
    If bMainDebug Then WriteLog(("OWFS support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart OWFS after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_OWFS()

  Try hOWFS.tOWFS.Stop
  If hOWFS Then
    hOWFS = Null
  End If
  ' not much todo now
  Setup_OWFS()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with CUL interface tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_CUL()

  Dim sModel As String[] = ["", "CUL", "CUN", "CUNO", "CUR"]

  If bCULEnabled Then
    WriteLog(("CUL support enabled."))
    If bServer Then
      ' create a new CUL class instance
      hCUL = New CCUL
      ' set the properties
      With hCUL
        .TCPHost = sCULTCPHost
        .TCPPort = iCULTCPPort
        .Interface = sCULType
        .Baud = sCULBaudrate
        .SerPort = sCULSerialPort
        .Model = iCULModel
        .CULDebug = bCULDebug
        .FHTid = sCULFHTid
      End With
      If InStr(sCULType, "tcp") Then
        ' connect to the CUL host:port
        If hCUL.ConnectTCP() Then
          WriteLog(("CUL TCP interface connecting to ") & sCULTCPHost & ":" & iCULTCPPort & " (" & sModel[iCULModel] & ")")
        Else
          WriteLog(("ERROR: CUL TCP interface FAILED to connect to ") & sCULTCPHost & ":" & iCULTCPPort)
          hCUL = Null
        End If
      Else
        ' connect to the CUL serial interface
        If hCUL.ConnectSerial() Then
          WriteLog(("CUL serial interface connected to Port ") & sCULSerialPort & " (" & sModel[iCULModel] & ")")
        Else
          WriteLog(("ERROR: CUL serial interface FAILED to connect to Port ") & sCULSerialPort)
          hCUL = Null
        End If
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("CUL support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart CUL after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_CUL()

  If hCUL Then
    hCUL.Disconnect
    hCUL = Null
  End If
  Setup_CUL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with xPL
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_xPL()

  If bxPLEnabled Then
    WriteLog(("xPL support enabled."))
    If bServer Then
      ' create a new xPL class instance
      hxPL = New CxPL
      ' set the properties
      With hxPL
        .TargetHost = aBroadcastAddrs[0]
        .OurIPAddress = sOurIPAddress
        .HeartBeatTime = ixPLHeartBeatTime
        .xPLDebug = bxPLDebug
      End With
      ' start listening
      If hxPL.StartListener() Then
        WriteLog(("xPL listener started!"))
      Else
        WriteLog(("ERROR: FAILED to start xPL listener!"))
        hSharpTV = Null
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog(("xPL support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart xPL after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_xPL()

  If hxPL Then
    hxPL.Disconnect
    hxPL = Null
  End If
  Setup_xPL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with rfxcom xpl
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_RFXComxPL()

  If bRFXComxPLEnabled Then
    WriteLog(("RFXCom xPL support enabled."))
    If Not bxPLEnabled Then WriteLog(("Warning: xPL support is disabled!"))
    If bServer Then
      ' create a new RFXCom class instance
      hRFXComxPL = New CRFXComxPL
      ' set the properties
      With hRFXComxPL
        .RXAddress = sRFXComxPLRXAddress
        .TXAddress = sRFXComxPLTXAddress
        .RFXComDebug = bRFXComxPLDebug
        .GlobalX10 = bRFXComxPLGlobalX10
        .OldAddrFmt = bRFXComxPLOldAddrFmt
      End With
    End If
  Else
    hRFXComxPL = Null
    If bMainDebug Then WriteLog(("RFXCom xPL support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart rfxcom xpl after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_RFXComxPL()

  If hRFXComxPL Then
    hRFXComxPL.Disconnect
    hRFXComxPL = Null
  End If
  Setup_RFXComxPL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get device values from shell command/script
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Shell()

  If bShellEnabled Then
    WriteLog(("Shell support enabled."))
    ' start timer
    If bServer Then Shell.Run()
  Else
    Try Shell.tShell.Stop
    If bMainDebug Then WriteLog(("Shell support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart shell after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Shell()

  Try Shell.tShell.Stop
  ' not much todo now
  Setup_Shell()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start telnetserver
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_TelnetServer()

  If bTelnetServerEnabled Then
    If bTelnetServerDebug Then WriteLog(("Telnet Server enabled."))
    If bServer Then
      ' create a new TelnetServer class instance
      hTelnetServer = New CTelnetServer

      ' set the properties
      hTelnetServer.TelnetPort = iTelnetServerPort
      hTelnetServer.TelnetServerDebug = bTelnetServerDebug

      ' start telnetserver
      If hTelnetServer.Connect() Then
        WriteLog(("Telnet Server active on Port ") & iTelnetServerPort, bMainDebug)
      Else
        WriteLog(("ERROR: Telnet Server FAILED to start on Port ") & iTelnetServerPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Telnet Server disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart telnetserver after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_TelnetServer()

  If hTelnetServer Then
    hTelnetServer.Disconnect
    hTelnetServer = Null
  End If
  Setup_TelnetServer()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if Ncid support is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Ncid()

  If bNcidEnabled Then
    WriteLog(("Ncid API support enabled."))
    If bServer Then
      ' create a new Ncid class instance
      hNcid = New CNcid
      ' set the properties
      With hNcid
        .TCPHost = sNcidTCPHost
        .TCPPort = iNcidTCPPort
        .NcidDebug = bNcidDebug
      End With
      ' connect to the Ncid host:port
      If hNcid.Connect() Then
        WriteLog(("Ncid API interface connecting to ") & sNcidTCPHost & ":" & iNcidTCPPort)
      Else
        WriteLog(("ERROR: Ncid API interface FAILED to connect to ") & sNcidTCPHost & ":" & iNcidTCPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("Ncid API support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Ncid support after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Ncid()

  If hNcid Then
    hNcid.Disconnect
    hNcid = Null
  Endif
  Setup_Ncid()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with HomeMatic interface tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_HomeMatic()

  If bHMEnabled Then
    WriteLog(("HomeMatic support enabled."))
    If bServer Then
      ' create a new HomeMatic class instance
      hHM = New CHomeMatic
      ' set the properties
      With hHM
        .TCPHost = sHMTCPHost
        .TCPPort = iHMTCPPort
        .HMDebug = bHMDebug
        .HMLANid = sHMhmid
        .Pairing = False
      End With
      ' connect to the HMLAN host:port
      If hHM.ConnectTCP() Then
        WriteLog(("HomeMatic TCP interface connecting to ") & sHMTCPHost & ":" & iHMTCPPort)
      Else
        WriteLog(("ERROR: HomeMatic TCP interface FAILED to connect to ") & sHMTCPHost & ":" & iHMTCPPort)
        hHM = Null
      Endif
    Endif
  Else
    If bMainDebug Then WriteLog(("HomeMatic support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart HM after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_HomeMatic()

  If hHM Then
    hHM.Disconnect
    hHM = Null
  End If
  Setup_HomeMatic()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with NTA8130 smart meter tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_SmartMeter()

  If bSmartMeterEnabled Then
    WriteLog(("SmartMeter support enabled."))
    If bServer Then
      ' create a new SmartMeter class instance
      hSmartMeter = New CSmartMeter
      ' set the properties
      With hSmartMeter
        .TCPHost = sSmartMeterTCPHost
        .TCPPort = iSmartMeterTCPPort
        .Interface = sSmartMeterType
        .Baud = sSmartMeterBaudrate
        .SerPort = sSmartMeterSerialPort
        .Databits = iSmartMeterDatabits
        .Stopbits = iSmartMeterStopbits
        .Parity = iSmartMeterParity
        .SmartMeterDebug = bSmartMeterDebug
      End With
      If InStr(sSmartMeterType, "tcp") Then
        ' connect to the SmartMeter host:port
        If hSmartMeter.ConnectTCP() Then
          WriteLog(("SmartMeter TCP interface connecting to ") & sSmartMeterTCPHost & ":" & iSmartMeterTCPPort)
        Else
          WriteLog(("ERROR: SmartMeter TCP interface FAILED to connect to ") & sSmartMeterTCPHost & ":" & iSmartMeterTCPPort)
          hSmartMeter = Null
        End If
      Else
        ' connect to the SmartMeter serial interface
        If hSmartMeter.ConnectSerial() Then
          WriteLog(("SmartMeter serial interface connected to Port ") & sSmartMeterSerialPort)
        Else
          WriteLog(("ERROR: SmartMeter serial interface FAILED to connect to Port ") & sSmartMeterSerialPort)
          hSmartMeter = Null
        End If
      End If
    End If
  Else
    hSmartMeter = Null
    If bMainDebug Then WriteLog(("SmartMeter support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart SmartMeter after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_SmartMeter()

  If hSmartMeter Then
    hSmartMeter.Disconnect
    hSmartMeter = Null
  End If
  Setup_SmartMeter()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open OpenTherm gateway serial port and initialize
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_OpenTherm()

  If bOpenThermEnabled Then
    WriteLog(("OpenTherm gateway support enabled."))
    If bServer Then
      ' create a new OpenTherm gateway class instance
      hOpenTherm = New COpenTherm
      ' set the properties
      With hOpenTherm
        .SerPort = sOpenThermSerialPort
        .PollTime = iOpenThermPollTime
        .Thermostat = sOpenThermThermostat
        .OpenThermDebug = bOpenThermDebug
        .TemperatureOverride = sOpenThermTemperatureOverride
        .SyncClock = bOpenThermSyncClock
        .Type = sOpenThermType
        .TCPHost = sOpenThermTCPHost
        .TCPPort = sOpenThermTCPPort
      End With
      If InStr(sOpenThermType, "tcp") Then
        ' connect to the OpenTherm host:port
        If hOpenTherm.ConnectTCP() Then
          WriteLog(("OpenTherm TCP interface connecting to ") & sOpenThermTCPHost & ":" & sOpenThermTCPPort)
        Else
          WriteLog(("ERROR: OpenTherm TCP interface FAILED to connect to ") & sOpenThermTCPHost & ":" & sOpenThermTCPPort)
          hOpenTherm = Null
        End If
      Else
        ' connect to the OpenTherm serial interface
        If hOpenTherm.ConnectSerial() Then
          WriteLog(("OpenTherm gateway interface connected to Port ") & sOpenThermSerialPort)
        Else
          WriteLog(("ERROR: OpenTherm gateway interface FAILED to connect to Port ") & sOpenThermSerialPort)
          hOpenTherm = Null
        End If
      End If
    Endif
  Else
    If bMainDebug Then WriteLog(("OpenTherm gateway support disabled."))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart OpenTherm gateway after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_OpenTherm()

  If hOpenTherm Then
    hOpenTherm.Disconnect
    hOpenTherm = Null
  End If
  Setup_OpenTherm()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with XBMC xpl
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_XBMCxPL()

  If bXBMCxPLEnabled Then
    WriteLog(("XBMC xPL support enabled."))
    If Not bxPLEnabled Then WriteLog(("Warning: xPL support is disabled!"))
    If bServer Then
      ' create a new XBMC class instance
      hXBMCxPL = New CXBMCxPL
      ' set the properties
      With hXBMCxPL
        .RXAddress = sXBMCxPLRXAddress
        .TXAddress = sXBMCxPLTXAddress
        .XBMCDebug = bXBMCxPLDebug
      End With
    End If
  Else
    hXBMCxPL = Null
    If bMainDebug Then WriteLog(("XBMC xPL support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart XBMC xpl after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_XBMCxPL()

  If hXBMCxPL Then
    hXBMCxPL.Disconnect
    hXBMCxPL = Null
  End If
  Setup_XBMCxPL()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with MQTT tcp host and port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_MQTT()

  If bMQTTEnabled Then
    WriteLog(("MQTT client support enabled."))
    If bServer Then
      ' create a new MQTT class instance
      hMQTT = New CMQTT
      ' set the properties
      With hMQTT
        .Host = sMQTTTCPHost
        .Port = iMQTTTCPPort
        .Username = sMQTTUsername
        .Password = sMQTTPassword
        .PubTopic = sMQTTPubTopic
        .SubTopic = sMQTTSubTopic
        .HeartBeat = iMQTTHeartbeat
        .MQTTDebug = bMQTTDebug
      End With
      ' connect to the MQTT host:port
      If hMQTT.Connect() Then
        WriteLog(("MQTT client interface connecting to ") & sMQTTTCPHost & ":" & iMQTTTCPPort)
      Else
        WriteLog(("ERROR: MQTT client interface FAILED to connect to ") & sMQTTTCPHost & ":" & iMQTTTCPPort)
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("MQTT client support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart MQTT after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_MQTT()

  If hMQTT Then
    hMQTT.Disconnect
    hMQTT = Null
  End If
  Setup_MQTT()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize meteohub
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_Meteohub()

  If bMeteohubEnabled Then
    WriteLog(("Meteohub support enabled."))
    If bServer Then
      ' create a new Meteohub class instance
      hMeteohub = New CMeteohub
      ' set the properties
      With hMeteohub
        .FetchURL = sMeteohubFetchURL
        .Polltime = iMeteohubPolltime
        .MeteohubDebug = bMeteohubDebug
      End With
      ' start fetch timer
      hMeteohub.Connect()
    End If
  Else
    If bMainDebug Then WriteLog(("Meteohub support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart Meteohub after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Meteohub()

  If hMeteohub Then
    Try hMeteohub.tMeteohub.Stop
    hMeteohub.Disconnect
    hMeteohub = Null
  End If
  Setup_Meteohub()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect with ELV MAX! tcp host:port or serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_ELVMAX()

  If bELVMAXEnabled Then
    WriteLog(("ELV MAX! support enabled."))
    If bServer Then
      ' create a new ELV MAX! class instance
      hELVMAX = New CELVMAX
      ' set the properties
      With hELVMAX
        .TCPHost = sELVMAXTCPHost
        .TCPPort = iELVMAXTCPPort
        .ELVMaxDebug = bELVMAXDebug
      End With
      ' connect to the ELV MAX! host:port
      If hELVMAX.ConnectTCP() Then
        WriteLog(("ELV MAX! TCP interface connecting to ") & sELVMAXTCPHost & ":" & iELVMAXTCPPort)
      Else
        WriteLog(("ERROR: ELV MAX! TCP interface FAILED to connect to ") & sELVMAXTCPHost & ":" & iELVMAXTCPPort)
        hELVMAX = Null
      End If
    End If
  Else
    If bMainDebug Then WriteLog(("ELV MAX! support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart ELV MAX! after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_ELVMAX()

  If hELVMAX Then
    hELVMAX.Disconnect
    hELVMAX = Null
  End If
  Setup_ELVMAX()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize YouLess
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Setup_YouLess()

  If bYouLessEnabled Then
    WriteLog(("YouLess support enabled."))
    If bServer Then
      ' create a new YouLess class instance
      hYouLess = New CYouLess
      ' set the properties
      With hYouLess
        .Polltime = iYouLessPolltime
        .YouLessDebug = bYouLessDebug
      End With
      ' start fetch timer
      hYouLess.Connect()
    End If
  Else
    If bMainDebug Then WriteLog(("YouLess support disabled."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restart YouLess after settings change
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_YouLess()

  If hYouLess Then
    Try hYouLess.tYouLess.Stop
    hYouLess.Disconnect
    hYouLess = Null
  End If
  Setup_YouLess()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' main loop checking for action and acted upon
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Check_for_Action()

  If bExitProgram Then
    WriteLog(("Exiting loop!"))
    Return
  Endif
  SetGlobalVars()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change house mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ChangeHouseMode(sMode As String)

  SetGlobalVar("House_Mode", sMode)
  WriteLog(("House mode is set to '") & Caps(sMode) & "'.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' change mute mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ChangeMuteMode(bMode As Boolean)

  SetGlobalVar("Mute", bMode)
  If bMode Then
    WriteLog(("Mute mode is set to 'Audio Disabled'."))
  Else
    WriteLog(("Mute mode is set to 'Audio Enabled'."))
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update counters
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateCounters()

  ' IF iNewMails OR IF iNewCalls OR IF iNewVoicemails THEN Main.WriteLog(("Inbox counters are: ") & iNewMails & If(iNewMails <> 1, (" e-mails, "), (" e-mail, ")) & iNewCalls & If(iNewCalls <> 1, (" calls "), (" call ")) & ("and ") & iNewVoicemails & If(iNewVoicemails <> 1, (" voicemsgs"), (" voicemsg")) & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return with capital first letter
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Caps(sString As String) As String

  Return UCase(Mid(sString, 1, 1)) & Mid(sString, 2)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start basic timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetupTimers()

  ' main loop sleep timer
  tMainSleep = New Timer As "tSleep"

  If bServer Then
    tMainSleep.Delay = iMainSleepTime
  Else
    ' only refresh ones per second to keep clock uptodate
    tMainSleep.Delay = 1000
  End If
  tMainSleep.Enabled = True

  ' flush logfile buffers to disk
  tMainFlush = New Timer As "tFlush"
  tMainFlush.Delay = iMainFlushTime
  tMainFlush.Enabled = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' stop all timers
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopTimers()

  WriteLog(("Stopping running timers."))
  ' PVoutput close
  Try PVoutput.tPVoutput.Stop
  ' OpenTherm timer
  Try hOpenTherm.tOpenTherm.Stop
  ' k8055 timer
  Try hK8055.tK8055.Stop
  ' owfs timer
  Try hOWFS.tOWFS.Stop
  ' google latitude timer
  Try GLatitude.tLatitude.Stop
  ' temperaturnu timer
  Try TemperaturNu.tTemperaturNu.Stop
  ' plugwise timer
  Try hPlugwise.tPlugwise.Stop
  ' pachube timer
  Try Pachube.tPachube.Stop
  ' bwired timer
  Try Bwired.tBwired.Stop
  ' ping timer
  Try Ping.tPing.Stop
  ' digitemp timer
  Try Digitemp.tDigitemp.Stop
  ' thermostat timer
  Try Thermostat.tThermostat.Stop
  ' serverstats timer
  Try ServerStats.tServerStats.Stop
  ' bluetooth timer
  Try Bluetooth.tBluetooth.Stop
  ' dsc timer
  Try hDSC.tDSC.Stop
  ' HDDTemp timer
  Try HDDTemp.tHDDTemp.Stop
  ' z-wave timer
  Try hZWave.tZWave.Stop
  ' ups timer
  Try hUPS.tUPS.Stop
  ' rrdtool timer
  Try RRDTool.tRRDTool.Stop
  ' gmail timer
  Try Mail.tGmail.Stop
  ' flush output streams
  Try tMainFlush.Stop
  ' main loop sleep timer
  Try tMainSleep.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by flush timer, flushes buffered data to disk
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tFlush_Timer()

  Flush

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets triggered by sleep timer, triggers main loop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tSleep_Timer()

  Check_for_Action()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' time related functions
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function Time_Less_Than(sTime As String) As Boolean

  If (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Minute) < 0) Then
    Return True
  Else
    Return False
  End If

End

Private Function Time_Greater_Than(sTime As String) As Boolean

  If (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Minute) > 0) Then
    Return True
  Else
    Return False
  End If

End

Public Function Time_Now(sTime As String) As Boolean

  If (DateDiff(stime, GlobalVar["Hour"] & ":" & GlobalVar["Minute"], gb.Second) = 0) Then
    Return True
  Else
    Return False
  End If

End

Public Sub UpdateGlobalVars()

  ' only run at startup
  dTime = Now()
  SetGlobalVar("Second", Second(dTime))
  SetGlobalVar("Minute", Minute(dTime))
  SetGlobalVar("Hour", Hour(dTime))
  SetGlobalVar("Day", Day(dTime))
  SetGlobalVar("Month", Month(dTime))
  SetGlobalVar("Year", Year(dTime))
  SetGlobalVar("Weekday", WeekDay(dTime))
  GlobalVar["Program_Start"] = Now()

  If (Time_Less_Than("5:00")) Then
    GlobalVar["Time_Of_Day"] = ("night")
  Else If (Time_Less_Than("11:59")) Then
    GlobalVar["Time_Of_Day"] = ("morning")
  Else If (Time_Less_Than("17:00")) Then
    GlobalVar["Time_Of_Day"] = ("afternoon")
  Else If (Time_Less_Than("23:59")) Then
    GlobalVar["Time_Of_Day"] = ("evening")
  Else
    GlobalVar["Time_Of_Day"] = ("night")
  Endif

  If (GlobalVar["Weekday"] = 0 Or GlobalVar["Weekday"] = 6) Then
    GlobalVar["Weekend"] = True
  Else
    GlobalVar["Weekend"] = False
  Endif

  ' calc sunset / rise
  Setup_Astro()

  ' check if it's dark or light
  If (Time_Less_Than(GlobalVar["Sunrise"]) Or Time_Greater_Than(GlobalVar["Sunset"])) Then
    GlobalVar["Dark"] = True
  Else
    GlobalVar["Dark"] = False
  Endif

  WriteLog(("The Time of Day is ") & GlobalVar["Time_Of_Day"] & ".")
  WriteLog(("It's ") & IIf(GlobalVar["Dark"], ("dark"), ("light")) & (" outside."))
  WriteLog(("DomotiGa is running for ") & GlobalVar["Program_Uptime"])

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' loop with time related code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SetGlobalVars()

  Dim bTrigger As Boolean = False

  bNew_Minute = 0
  bNew_Month = 0
  dTime = Now()

  ' prevent repeating time based events
  If (dPrev_Time > dTime) Then dTime = dPrev_Time

  If (dPrev_Time <> dTime) Then

    dPrev_Time = dTime

    ' new second
    If (GlobalVar["Second"] <> Second(dTime)) Then
      SetGlobalVar("Second", Second(dTime))
      GlobalVar["Program_Uptime"] = UptimeString(DateDiff(GlobalVar["Program_Start"], Now(), gb.Second))
    Endif

    ' new minute
    If (GlobalVar["Minute"] <> Minute(dTime)) Then
      SetGlobalVar("Minute", Minute(dTime))
      bNew_Minute = 1

      btrigger = True

      ' check if it's dark or light
      If (Time_Less_Than(GlobalVar["Sunrise"]) Or Time_Greater_Than(GlobalVar["Sunset"])) Then
        GlobalVar["Dark"] = True
      Else
        GlobalVar["Dark"] = False
      Endif

      ' new hour
      If (GlobalVar["Hour"] <> Hour(dTime)) Then
        SetGlobalVar("Hour", Hour(dTime))

        ' sanity save global variables to database
        SaveGlobalVars()

        If (Time_Less_Than("5:00")) Then
          GlobalVar["Time_Of_Day"] = ("night")
        Else If (Time_Less_Than("11:59")) Then
          GlobalVar["Time_Of_Day"] = ("morning")
        Else If (Time_Less_Than("17:00")) Then
          GlobalVar["Time_Of_Day"] = ("afternoon")
        Else If (Time_Less_Than("23:59")) Then
          GlobalVar["Time_Of_Day"] = ("evening")
        Else
          GlobalVar["Time_Of_Day"] = ("night")
        Endif

        WriteLog(("The Time of Day is ") & GlobalVar["Time_Of_Day"] & ".")
        WriteLog(("It's ") & IIf(GlobalVar["Dark"], ("dark"), ("light")) & (" outside."))
        WriteLog(("DomotiGa is running for ") & GlobalVar["Program_Uptime"])

        ' new day
        If (GlobalVar["Day"] <> Day(dTime)) Then
          SetGlobalVar("Day", Day(dTime))
          If bServer Then Calendar.Run()

          SetGlobalVar("Weekday", WeekDay(dTime))

          If (GlobalVar["Weekday"] = 0 Or GlobalVar["Weekday"] = 6) Then
            GlobalVar["Weekend"] = True
          Else
            GlobalVar["Weekend"] = False
          Endif

          Setup_Astro()

          ' new month
          If (GlobalVar["Month"] <> Month(dTime)) Then
            SetGlobalVar("Month", Month(dTime))
            bNew_Month = 1

            ' new year
            If (GlobalVar["Month"] <> Month(dTime)) Then
              SetGlobalVar("Year", Year(dTime))
            Endif ' new year
          Endif ' new month

        Endif ' new day loop
      Endif ' new hour loop
    Endif ' new minute loop
  Endif ' time changed loop

  If bTrigger Then EventLoop.Run()

Catch
  WriteLog("ERROR: " & Error.Text & (" at ") & Error.Where & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return random string from table
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Random_Text(sTable As String) As String

  Dim rResult As Result

  Try rResult = Main.hDB.Exec("SELECT text FROM " & hDB.Quote(sTable) & " ORDER BY rand() LIMIT 1")
  If rResult.Count Then
    Return rResult!text
  Else
    Return ("Error fetching random text!")
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set globalvar to value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetGlobalVar(sVar As String, vValue As Variant, Optional bBroadcast As Boolean = False) As Boolean

  If bServer And If Events.CheckCondition(Main.GlobalVar[sVar], "<>", vValue, True) Then
    GlobalVar[sVar] = vValue
    Events.CheckGlobalVarEvents(sVar, vValue)
    BroadcastEvent("[GlobalVar]" & sVar & "|" & vValue)
  Endif
  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' del globalvar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DelGlobalVar(sVar As String)

  If Main.GlobalVar.Exist(sVar) Then Main.GlobalVar.Remove(sVar)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save globalvars to database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SaveGlobalVars()

  ' DIM tableGlobalVars AS Table
  Dim vValue As Variant
  Dim rResult As Result

  ' erase table contents only
  Try Main.hDB.Exec("TRUNCATE TABLE globalvars")

  ' write vars to db table
  For Each vValue In Main.GlobalVar
    Main.hDB.Begin()
    rResult = Main.hDB.Create("globalvars")
    rResult!var = Main.GlobalVar.Key
    rResult!value = vValue
    rResult.Update()
    Main.hDB.Commit()
  Next
  If Main.bMainDebug Then Main.WriteDebugLog(("[Main] Globalvars Saved."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' restore all globalvars from database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RestoreGlobalVars()

  Dim rResult As Result

  Try rResult = Main.hDB.Exec("SELECT * FROM globalvars")
  If rResult Then
    If rResult.Count Then
      For Each rResult
        Main.GlobalVar[rResult!var] = rResult!value
      Next
      If Main.bMainDebug Then Main.WriteDebugLog(("[Main] Globalvars Restored."))
    End If
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if command can be found on system
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ProgramExist(sProg As String) As Boolean

  Dim sTemp As String
  Dim iPos As Integer

  iPos = String.InStr(sProg, " ")
  If iPos Then sProg = String.Left(sProg, iPos - 1)

  Shell "which " & sProg To sTemp

  If Not sTemp Then Return False
  Return Not (Trim$(sTemp) Like "which: *")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' insert spaces at end of string until length reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SpaceAlignLeft(sString As String, iLength As Integer) As String

  While Len(sString) < iLength
    sString = sString & " "
  Wend
  Return sString

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' insert spaces at start of string until length reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function SpaceAlign(sString As String, iLength As Integer) As String

  While Len(sString) < iLength
    sString = " " & sString
  Wend
  Return sString

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' wake up a computer by sending a WOL magic packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WakeOnLan(sMAC As String)

  Dim aMAC, aIPs, athisIP As String[]
  Dim sHWAddress, sMsg, sHost, sIP As String
  Dim iCount As Integer

  aMAC = Split(sMAC, ":")

  For iCount = 0 To 5
    sHWAddress &= aMAC[icount]
  Next
  sMsg = Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255) & Chr(255)
  For iCount = 1 To 16
    sMsg &= sHWAddress
  Next

  ' sent it to all computers on this network
  hBroadcast = New UdpSocket As "Broadcast"
  hBroadcast.Broadcast = True
  ' [GB2:BIND] hBroadcast.Bind(0)
  hBroadcast.Port = 0
  hBroadcast.Bind()
  hBroadcast.TargetPort = 9

  Exec ["hostname", "-i"] To sHost
  aIPs = Split(Trim$(sHost), " ")
  For Each sIP In aIPs
    athisIP = Split(sIP, ".")
    If CInt(athisIP[0]) = 127 Then Continue
    hBroadcast.TargetHost = athisIP[0] & "." & athisIP[1] & "." & athisIP[2] & "." & "255"
    Write #hBroadcast, sMsg, Len(sMsg)
  Next
  Close hBroadcast

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Broadcast_Error()

  Select Case hBroadcast.Status
    Case Net.CannotBindSocket
      Main.WriteDebugLog(("[WOL] Unable to bind to that port."))
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(("[WOL] The system does not allow to create a socket."))
    Case Net.CannotRead
      Main.WriteDebugLog(("[WOL] Error receiving data."))
    Case Net.CannotWrite
      Main.WriteDebugLog(("[WOL] Error sending data."))
  End Select

End

Public Sub DisplayBool(bSwitch As Boolean) As String

  Select bSwitch
    Case True
        Return ("True")
    Case Else
        Return ("False")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' simple check for time string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function IsTime(sString As String) As Boolean

  If Len(sString) > 3 And InStr(sString, ":") Then
    Return True
  Else
    Return False
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' simple check for boolean string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function IsBool(sStr As String) As Boolean

  If sStr == "True" Then Return True
  If sStr == "False" Then Return True
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' calculate program uptime string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function UptimeString(lSeconds As Long) As String

  Dim lDays, lHrs, lMins, lSecs As Long

  lSecs = lSeconds Mod 60
  lMins = (lSeconds Mod 3600) \ 60
  lHrs = (lSeconds Mod (3600 * 24)) \ 3600
  lDays = lSeconds \ (3600 * 24)
  Return lDays & IIf(lDays = 1, (" day, "), (" days, ")) & lHrs & IIf(lHrs = 1, (" hr, "), (" hrs, ")) & lMins & IIf(lMins = 1, (" min,"), (" mins,")) & (" and ") & lSecs & IIf(lSecs = 1, (" sec."), (" secs."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name of caller if known
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ReturnCallerID(sPhoneNo As String) As String

  Dim rResult As Result
  Dim sName As String = ("Unknown")

  If Len(sPhoneNo) Then
    rResult = Main.hDB.Exec("SELECT name, cidphone FROM contacts WHERE phoneno = &1", sPhoneNo)
    If rResult.Count Then
      If rResult!cidphone Then
        sName = rResult!cidphone
      Else
        sName = rResult!name
      End If
    End If
    rResult = Main.hDB.Exec("SELECT name, cidmobile FROM contacts WHERE mobileno = &1", sPhoneNo)
    If rResult.Count Then
      If rResult!cidmobile Then
        sName = rResult!cidmobile
      Else
        sName = rResult!name
      End If
    End If
    Return sName
  Else
    Return ("Hidden")
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if system has minimal gambas version required
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CheckReq(iMinimalVersion As Integer) As Boolean

  Dim iVer As Integer
  Dim sVer As String

  If InStr(GetGambasVersion(), " ") = 0 Then
    sVer = GetGambasVersion()
  Else
    sVer = Left$(GetGambasVersion(), InStr(GetGambasVersion(), " ") - 1)
  End If

  iVer = Val(Replace(sVer, ".", ""))
  If iVer >= iMinimalVersion Then
    Return False
  Else
    Return True
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get ip address of this machine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Setup_IPAddr()

  Dim sHost As String

  ' inet 192.168.178.24/24 brd 192.168.178.255 scope global eth0
  Shell "ip addr | grep brd | grep inet | awk -F ' ' '{print $2}' | awk -F '/' '{print $1}'" To sHost
  sOurIPAddress = Trim(sHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' determine broadcast address(es) of this machine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Setup_BroadcastAddrs()

  Dim aIPs, athisIP As String[]
  Dim sHost, sIP As String

  Shell "ip addr | grep brd | grep inet | awk -F ' ' '{print $4}'" To sHost
  aIPs = Split(Trim$(sHost), " ")
  For Each sIP In aIPs
    athisIP = Split(sIP, ".")
    If CInt(athisIP[0]) = 127 Then Continue
    aBroadcastAddrs.Add(athisIP[0] & "." & athisIP[1] & "." & athisIP[2] & "." & athisIP[3])
    Main.WriteLog(("Found broadcast address '") & Trim(sHost) & "'")
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' broadcast events via UDP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BroadcastEvent(sMessage As String)

  Dim sIP As String

  ' not ready yet
  If hBroadcastEvent = Null Then Return
  ' broadcast msg on network(s)
  For Each sIp In aBroadcastAddrs
    hBroadcastEvent.TargetHost = sIp
    Try Write #hBroadcastEvent, sMessage, Len(sMessage)
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub BroadcastUDP_Error()

  Select Case hBroadcastEvent.Status
    Case Net.CannotBindSocket
      Main.WriteDebugLog(("[BroadcastUDP] Unable to bind to that port."))
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(("[BroadcastUDP] The system does not allow to create a socket."))
    Case Net.CannotRead
      Main.WriteDebugLog(("[BroadcastUDP] Error receiving data."))
    Case Net.CannotWrite
      Main.WriteDebugLog(("[BroadcastUDP] Error sending data."))
  End Select

Catch

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if program and database versions match and try to update
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckDatabaseVersion()

  Dim rResult As Result
  Dim sDBVersion, sPrgVersion, sDumpFile, sToVersion As String
  Dim iDBVersion, iPrgVersion As Integer
  Dim hMysql As Process

  sPrgVersion = sProgramVersion
  iPrgVersion = Val(Replace(sPrgVersion, ".", ""))

  ' fetch database version from database
  rResult = Main.hDB.Exec("SELECT * FROM version ORDER BY db DESC LIMIT 1 ")
  If rResult.Count = 1 Then
    sDBVersion = Str(rResult!db)
    ' convert 0.1.180 to 01180
    iDBVersion = Val(Replace(sDBVersion, ".", ""))
    If iDBVersion < iPrgVersion Then
      WriteLog(("The version of your database is ") & sDBVersion & (" but the version of the program is ") & sPrgVersion & ("!"))
      Repeat
        If bAllowAutoUpgrade Then
          If Main.ProgramExist("mysql") Then
            sToVersion = Format(Str(iDBVersion + 1), "00000")
            ' make the jump to version 1.0.000
            If sToVersion = "01210" Then sToVersion = "10000"
            sDumpFile = "upgrade/" & Replace(sDBVersion, ".", "") & "to" & sToVersion & ".sql"
            If Exist(sBaseDir &/ sDumpFile) Then
              hMysql = Shell "mysql --host=" & sSQLHost & " --user=" & sSQLUser & " --password=" & sSQLPass & " --database=" & sSQLDatabase & " --execute='SOURCE " & sBaseDir &/ sDumpFile & "'" Wait
              If hMysql.Value Then ' mysql returned an error
                WriteLog(("Mysql command returned an error! The database is now at version ") & sDBVersion)
                Quit
              Else
                ' check if we are there yet
                rResult = Main.hDB.Exec("SELECT * FROM version ORDER BY db DESC LIMIT 1")
                If rResult.Count = 1 Then
                  sDBVersion = Str(rResult!db)
                  ' convert 0.1.180 to 01180
                  iDBVersion = Val(Replace(sDBVersion, ".", ""))
                End If
              End If
            Else
              WriteLog(("Couldn't find upgrade file ") & sDumpFile & ("! The Database is now at version ") & sDBVersion)
              Quit
            End If
            WriteLog(("Database has been upgraded to version ") & sDBVersion)
            If iPrgVersion = iDBVersion Then Return
          Else
            WriteLog(("Couldn't find mysql program!"))
            Quit
          End If
        Else
          WriteLog(("You can run " & Application.Name & " with the -a parameter to allow automatic upgrade!"))
          Quit
        End If
      Until iPrgVersion = iDBVersion
    End If
  End If

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' some GUI related routines are placed here, so max number of
' modules for client and server can share code.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run notify-send to display notification
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub NotifySend(sTitle As String, sText As String)

  Dim sCommand As String

  If Main.bServer Then
    If Main.bBroadcastUDPEnabled Then Main.BroadcastEvent("[NotifySend]" & sTitle & "|" & sText & "|" & sBaseDir &/ "icons" &/ "logo.png")
  Endif

End

Public Sub ControlLed(sLed As String, sStatus As String)

  ' do nothing

End

Public Sub PLCBUSStatus(sStatus As String)

  Main.BroadcastEvent("[PLCBUSStatus]" & sStatus)

End

Public Sub RefreshDeviceList()

  Main.BroadcastEvent("[DeviceUpdate]")

End

Public Sub RefreshControlPage()

  Main.BroadcastEvent("[ControlUpdate]")

End

Public Sub RefreshPhoneCallList()

  Main.BroadcastEvent("[PhoneCallUpdate]")

End

Public Sub SendSMS(sText As String, sTo As String)

  If Main.hSMS Then Main.hSMS.SendSMS(sText, sTo)

End

Private Sub Setup_Calendar()
  
  Calendar.Init()
  
End
