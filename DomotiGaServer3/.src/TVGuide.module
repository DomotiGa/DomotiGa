' Gambas module file

' Description:
' TVGuide.module
' Download and parse XMLTV files.

' Development Status:
' Just started, lots of things to build!
' Only fetching channel icons and tvguide.xml is finished.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Almost all of this code is written by Kris Wauters on February, 14th - 2010
' For more info or help: kris@digitalplayground.be

' Read file called COPYING for license details.

Private hTVProcess As Process
Private sMC2XMLLog As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' grab XML with grab command string
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ImportGuide()

  If Not Main.bTVGuideEnabled Then Return
  sMC2XMLLog = ""
  hTVProcess = Shell (Main.sTVGuideXMLGrabCommand) For Read Write As "hTVProcess"
  Main.WriteDebugLog(("[TVGuide] Started grabbing XML with '") & Main.sTVGuideXMLGrabCommand & "'.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save grab command output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hTVProcess_Read()

  '--- declare variables ---
  Dim sLine As String

  sLine = Read #hTVProcess, Lof(hTVProcess)
  sMC2XMLLog = sMC2XMLLog & sLine

End

Public Sub hTVProcess_Kill()

  '--- declare variables ---
  Dim hFile As File
  Dim sLine, sFile As String = Temp()

  '--- command not found etc. ---
  If hTVProcess.Value Then Main.WriteDebugLog(("[TVGuide] Error return value: ") & hTVProcess.Value)

  File.Save(sFile, sMC2XMLLog)
  hFile = Open sFile For Input
  While Not Eof(hFile)
    Line Input #hFile, sLine
    If Left(sLine, 15) = "Start time .. :" Then Main.WriteDebugLog(("[TVGuide] EPG - Valid from:") & " " & Right(sLine, Len(sLine) - 15))
    If Left(sLine, 15) = "End time .... :" Then Main.WriteDebugLog(("[TVGuide] EPG - Valid until:") & " " & Right(sLine, Len(sLine) - 15))
    If Left(sLine, 15) = "Parsing ..... :" Then Main.WriteDebugLog(("[TVGuide] Identifier:") & " " & Right(sLine, Len(sLine) - 15))
    If Left(sLine, 15) = "Completed ... :" Then Main.WriteDebugLog(("[TVGuide] Summary:") & " " & PushTVGuideXMLToDB(Main.sTVGuideXMLFile))
    If Left(sLine, 15) = "Status ...... :" Then Main.WriteDebugLog(("[TVGuide] Status:") & " " & Right(sLine, Len(sLine) - 15))
  Wend
  hFile.Close
  Kill sFile

End

' push the retrieved xml file to the DB
Public Function PushTVGuideXMLToDB(sData As String) As String

    ' declare variables
   Dim XmlR As New XmlReader
   Dim iCI, iPI, iChannelCount, iProgramCount, iCategoriesCount As Integer
   Dim sChannel, sProgram, sChannelInfo, sProgramInfo As String

   ' init variables & cleanup database
   sChannelInfo = ("[TVGuide] Processing XML file ... Channels so far: ")
   sProgramInfo = ("[TVGuide] Processing XML file ... Programs so far: ")
   XmlR = New XmlReader
   XmlR.Open(sData)
   Main.hDB.Exec("UPDATE tv_channels SET isupdated = 0")
   Main.hDB.Exec("UPDATE tv_categories SET isupdated = 0")
   Main.hDB.Exec("UPDATE tv_subcategories SET isupdated = 0")
   Main.hDB.Exec("DELETE FROM tv_programs")
   sChannel = ""
   sProgram = ""
   iChannelCount = 0
   iProgramCount = 0
   iPI = 0
   iCI = 0

   ' loop trough the whole XML buffer
   While Not XmlR.Eof
    Select Case XmlR.Node.Name
      Case "display-name"
        Inc iCI
      Case "title", "desc", "category"
        Inc iPI
    End Select
    If XmlR.Node.name = "#text" Then
      If iCI = 6 Then
        sChannel &= XmlR.Node.Value
        SaveChannelToDB(sChannel, Main.sActiveUserID)
      Else
        If iPI = 2 Or If iPI = 4 Or If iPI = 6 Or If iPI = 8 Then
          sProgram &= XmlR.Node.value & "|"
        Endif
        If iPI = 8 Then
          SaveProgramToDB(sProgram, Main.sActiveUserID)
        Endif
      Endif
    Else
      ' here we have an XML node with subelements, split it up in different lines
      Select Case XmlR.Node.Type
        Case XmlReaderNodeType.Element
          If XmlR.Node.Attributes.count > 0 Then
            For Each XmlR.Node.Attributes
              Select Case XmlR.Node.Name
                Case "id"
                  sChannel = XmlR.Node.Value & "|"
                  iCI = 1
                  Inc iChannelCount
                  If iChannelCount / 10 = Int(iChannelCount / 10) Then
                    Main.WriteDebugLog(sChannelInfo & CStr(iChannelCount))
                    Wait
                  Endif
                Case "start"
                  sProgram = Left(XmlR.Node.Value, 12) & "|"
                  iPI = 1
                  Inc iProgramCount
                  If (iProgramCount / 1000 = Int(iProgramCount / 1000)) Or If (iProgramCount = 1) Then
                    Main.WriteDebugLog(sProgramInfo & CStr(iProgramCount))
                    Wait
                  Endif
                Case "stop"
                  sProgram &= Left(XmlR.Node.Value, 12) & "|"
                Case "channel"
                  sProgram &= XmlR.Node.Value & "|"
              End Select
            Next
          Endif
        End Select
    Endif
    XmlR.Read()
   Wend
   XmlR.Close
   XmlR = Null
   ' do a little cleanup in the channels
   Main.hDB.Exec("DELETE FROM tv_channels WHERE IsUpdated = 0")
   Main.hDB.Exec("DELETE FROM tv_categories WHERE IsUpdated = 0")
   Main.hDB.Exec("DELETE FROM tv_subcategories WHERE IsUpdated = 0")
   ' we converted all channels and programs, now update category/subcategory tables
   iCategoriesCount = UpdateTVCategories(Main.sActiveUserID)
   Return "Finished. " & iChannelCount & " " & ("Channels") & ", " & CStr(iCategoriesCount) & " " & ("Main Categories and") & " " & CStr(iProgramCount) & " " & ("Programs processed !")

Catch
  Main.WriteDebugLog(("[TVGuide] Error parsing XML file: ") & Error.Text & (" at ") & Error.Where)

End

' write the info in the channeltag (taken from the MC XML file) into the database
Private Sub SaveChannelToDB(sChannelTag As String, sUserID As String)

  ' declare variables
  Dim rRes As Result

  ' first check if channel already exists
  rRes = Main.hDB.Exec("SELECT * FROM tv_channels WHERE ChannelName = &1 AND ChannelID = &2", Main.ParseTag(sChannelTag, 2, "|"), Main.ParseTag(sChannelTag, 1, "|"))
  If rRes Then
    ' channel found, update modification info, and set IsUpdated
    If rRes.Count Then
      Main.hDB.Exec("UPDATE tv_channels SET IsUpdated = 1, ModificationDate = &1, FK_Users = &2 WHERE ChannelName = &3 AND ChannelID = &4", Format(Now, "yyyymmddhhnn"), sUserID, Main.ParseTag(sChannelTag, 2, "|"), Main.ParseTag(sChannelTag, 1, "|"))
    Else
      sChannelTag = Replace(sChannelTag, "'", "`")
      Main.hDB.Exec("INSERT INTO tv_channels (ChannelName, ChannelID, CreationDate, ModificationDate, FK_Users, IsUsed, IsUpdated) VALUES(&1,&2,&3,&4,&5,&6,&7)", Main.ParseTag(sChannelTag, 2, "|"), Main.ParseTag(sChannelTag, 1, "|"), Format(Now, "yyyymmddhhnn"), Format(Now, "yyyymmddhhnn"), sUserID, 0, 1)
    Endif
  Endif

End

' update the categories/categories table, based on contents of the tv_programs table
Private Sub UpdateTVCategories(sUserID As String) As Integer

  ' declare variables
  Dim rRes, rResTmp As Result
  Dim bOK As Boolean

  Main.WriteDebugLog(("[TVGuide] Processing Categories ..."))
  rRes = Main.hDB.Exec("SELECT DISTINCT CategoryName FROM tv_programs ORDER BY CategoryName")
  If rRes Then
    If rRes.Count > 0 Then
      For Each rRes
        ' first check if category exists
        bOK = False
        rResTmp = Main.hDB.Exec("SELECT * FROM tv_categories WHERE CategoryName = &1", rRes!CategoryName)
        If rResTmp Then
          ' category found, update it
          If rResTmp.count > 0 Then
            bOK = True
            Main.hDB.Exec("UPDATE tv_categories SET IsUpdated = 1, ModificationDate = &1, FK_Users = &2 WHERE CategoryName = &3", Format(Now, "yyyymmddhhnn"), sUserID, rRes!CategoryName)
          Endif
        Endif
        ' when category not yet found, add it to database
        If bOK = False Then
          Main.hDB.Exec("INSERT INTO tv_categories (CategoryName, CreationDate, ModificationDate, FK_Users, IsUpdated) VALUES(&1,&2,&3,&4,&5)", rRes!CategoryName, Format(Now, "yyyymmddhhnn"), Format(Now, "yyyymmddhhnn"), sUserID, 1)
        Endif
      Next
    Endif
  Endif
  ' return count of categories
  rRes = Main.hDB.Exec("SELECT * FROM tv_categories")
  If rRes Then
    If rRes.count > 0 Then
      Return rRes.Count
    Endif
  Endif

End

' write the info in the ProgramTag (taken from the XML file) into the database
Private Sub SaveProgramToDB(sProgramTag As String, sUserID As String)

  Main.hDB.Exec("INSERT INTO tv_programs (StartPoint, EndPoint, ChannelID, ProgramName, ProgramDescription, CategoryName, SubCategoryName, CreationDate, FK_Users) VALUES(&1,&2,&3,&4,&5,&6,&7,&8,&9)", Main.ParseTag(sProgramTag, 1, "|"), Main.ParseTag(sProgramTag, 2, "|"), Main.ParseTag(sProgramTag, 3, "|"), Main.ParseTag(sProgramTag, 4, "|"), Main.ParseTag(sProgramTag, 5, "|"), Main.ParseTag(sProgramTag, 6, "|"), Main.ParseTag(sProgramTag, 7, "|"), Format(Now, "yyyymmddhhnn"), sUserID)

End
