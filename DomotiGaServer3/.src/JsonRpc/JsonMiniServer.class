' Gambas class file

' Description:
' JsonMiniServer.class

' Development Status:
' Just Started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'***************************************************************************

' TODO:
' Accept: audio/*; q=0.2, audio/basic
' SHOULD be interpreted as "I prefer audio/basic, but send me any audio type if it is the best available after an 80% mark-down in quality."

' If no Accept header field is present, then it is assumed that the client accepts all media types. If an Accept header field is present, and if the server cannot send a response which is acceptable according to the combined Accept field value, then the server SHOULD send a 406 (not acceptable) response.

'***************************************************************************
Private Const ParseError As Integer = -32700
Private Const InvalidRequest As Integer = -32600
Private Const MethodNotFound As Integer = -32601
Private Const InvalidParams As Integer = -32602
Private Const InternalError As Integer = -32603

'***************************************************************************
Private Http As ServerSocket
Private SockColl As Collection
Private $bDebug As Boolean
Private hReply As Variant
Private iReply As Integer
Private IPWhiteList As New String[]

Event CheckMethod(sMethod As String)
Event ProcessData(cData As Collection)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send HTTP error, something wrong in the packet
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub hError(hS As Socket, hErr As String)

  hS.Begin
  hS.EndOfLine = gb.Windows
  Print #hS, "HTTP/1.1 " & hErr
  Print #hS, "Server: Gambas XML-RPC Server"
  Print #hS, "Connection: close"
  Print #hS, ""

  Try hS.Send

Catch
  ' Catch any errors with a closed stream

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Create a Json Collection with a specific error message
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JsonError(iError As Integer, Optional vId As Variant = Null) As Collection

  Dim cJsonData As New Collection
  Dim cError As New Collection

  ' Fill the error fields first
  cError["code"] = iError
  Select Case iError
    Case ParseError
      cError["message"] = "Parse error"
    Case InvalidRequest
      cError["message"] = "Invalid Request"
    Case MethodNotFound
      cError["message"] = "Method not found"
    Case InvalidParams
      cError["message"] = "Invalid params"
    Case InternalError
      cError["message"] = "Internal error"
    Default
      cError["message"] = "Unknown error"
  End Select

  ' Build up the collection
  ' NOTE: "id": null is NOT supported by Gambas, but required
  ' The "id": "null" will be replaced by "id": null later
  cJsonData["jsonrpc"] = "2.0"
  cJsonData["error"] = cError
  If vId = Null Then
    cJsonData["id"] = "null"
  Else
    cJsonData["id"] = vId
  Endif

  Return cJsonData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JsonToRpc(cJsonResponse As Variant, vId As Variant) As Collection

  Dim cJsonData As New Collection

  ' Build up the collection
  ' NOTE: "id": null is NOT supported by Gambas
  cJsonData["jsonrpc"] = "2.0"
  cJsonData["result"] = cJsonResponse
  cJsonData["id"] = vId

  Return cJsonData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetReply(iCode As Integer, vData As Variant)

  iReply = iCode
  hReply = vData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JsonSend(hS As Socket, vJsonData As Variant, Optional bGzip As Boolean = False)

  Dim sJsonData As String
  Dim sGzipData As String
  Dim cCz As New Compress

  Try sJsonData = JSON.Encode(vJsonData)
  If Error Then
    ' JSON data is invalid, thrown an internal error
    sJsonData = JSON.Encode(JsonError(InternalError))
  Endif

  ' Replace the "id": "null", because Gambas doesn't support it
  sJsonData = Replace(sJsonData, "\"id\": \"null\"", "\"id\": null")

  ' Replace the "\u00x0", because Gambas doesn't support empty strings
  ' As workaround we fill the string with Chr(1). DomotiGa should never
  ' use that value
  sJsonData = Replace(sJsonData, " \"\\u00x0\"", " \"\"")
  sJsonData = Replace(sJsonData, "[\"\\u00x0\"", "[\"\"")
  sJsonData = Replace(sJsonData, " \"\\u0001\"", " \"\"")
  sJsonData = Replace(sJsonData, "[\"\\u0001\"", "[\"\"")

  ' TODO: Reply with same content-type as the request
  ' TODO: Reject accept-content types which aren't e.g. application/json

  ' If we *send* send a compressed stream, try to compress
  If bGzip Then
    cCz.Type = "zlib"
    Try sGzipData = cCz.String(sJsonData)
    If Not Error Then
      If Len(sGzipData) >= Len(sJsonData) Then
        ' Most likely the string/data is to small
        bGzip = False
      Endif
    Else
      ' don't do anything
      bGzip = False
    Endif
  Endif

  hS.Begin
  hS.EndOfLine = gb.Windows
  Print #hS, "HTTP/1.1 200 OK"
  Print #hS, "Connection: close"
  If bGzip Then
    Print #hS, "Content-Length: " & Len(sGzipData)
  Else
    Print #hS, "Content-Length: " & Len(sJsonData)
  Endif
  Print #hS, "Content-Type: application/json"
  If bGzip Then Print #hS, "Content-Encoding: gzip"
  Print #hS, "Server: Gambas RPC Server"
  Print #hS, ""

  ' Writes compress data when possible
  If bGzip Then
    Write #hS, sGzipData, Len(sGzipData)
  Else
    Write #hS, sJsonData, Len(sJsonData)
  Endif

  Try hS.Send

Catch
  ' Catch any errors with a closed stream

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ProcessQuery(hS As Socket, Buf As String, Optional bGzip As Boolean = False)

  Dim sJsonData As String
  Dim vTestData As Variant
  Dim vJsonData As New Variant[]
  Dim Entry As Variant
  Dim vOutput As New Variant[]
  Dim sJSONVersion As String
  Dim sMethod As String
  Dim bMethod As Boolean
  Dim JsonBatch As Boolean
  Dim vId As Variant

  ' Get the Json data from the HTTP request
  Try sJsonData = Mid(Buf, InStr(Buf, Chr(13) & Chr(10) & Chr(13) & Chr(10)) + 4)
  sJsonData = Replace(sJsonData, Chr(13), "")
  sJsonData = Replace(sJsonData, Chr(10), "")

  ' Replace the "", because Gambas doesn't support empty strings
  ' Also we need do it only when we have a space or [ in front of it
  sJsonData = Replace(sJsonData, " \"\"", " \"\\u0001\"")
  sJsonData = Replace(sJsonData, "[\"\"", "[\"\\u0001\"")

  ' Try to decode the string
  Try vTestData = JSON.Decode(sJsonData)
  If Error Then
    JsonSend(hS, JsonError(ParseError))
    Return
  Endif

  Try Entry = vTestData[0]
  If Error Then
    JsonSend(hS, JsonError(ParseError))
    Return
  Endif

  ' No array, just 1 call
  If Entry = Null Then
    JsonBatch = False
    vJsonData.Add(vTestData)
  Else
    JsonBatch = True
    vJsonData = vTestData
  Endif

  For Each Entry In vJsonData

    Try sJSONVersion = Entry["jsonrpc"]
    ' Check if we got a method name

    If sJSONVersion = "2.0" Then
      ' Check if we got a method name
      Try sMethod = Entry["method"]
      If Error Then
        vOutput.Add(JsonError(InvalidRequest))
      Else
        If TypeOf(Entry["method"]) = gb.String Then
          Try vId = Entry["id"]

          ' Check if the method is registered
          bMethod = Raise CheckMethod(sMethod)
          If bMethod Then
            vOutput.Add(JsonError(MethodNotFound, vId))
          Else
            hReply = Null
            iReply = 0 
            Raise ProcessData(Entry)

            ' If id=Null then it is most likely a Json-Rpc notification
            ' we shouldn't respond to it
            If vId <> Null Then

              ' The response from JSON-RPC handle can't be empty!
              If hReply = Null Then
                If iReply <> 0 Then
                  vOutput.Add(JsonError(iReply, vId))
                Else
                  vOutput.Add(JsonError(InternalError, vId))
                Endif
              Else
                vOutput.Add(JsonToRpc(hReply, vId))
              Endif
            Endif
          Endif
        Else
          vOutput.Add(JsonError(InvalidRequest))
        Endif
      Endif
    Else
      vOutput.Add(JsonError(InvalidRequest))
    Endif

  Next

  If vOutput.Count >= 1 Then
    If JsonBatch Then
      JsonSend(hS, vOutput, bGzip)
    Else
      JsonSend(hS, vOutput[0], bGzip)
    Endif
  Endif

Catch
  Print Error.Text
  JsonSend(hS, JsonError(InternalError))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Socket_Read()

  Dim Buf As String
  Dim sCad As String
  Dim hS As Socket
  Dim cCount As Integer
  Dim cLen As Integer
  Dim cWait As Integer = 1
  Dim cCol As Collection

  For Each cCol In SockColl
    If cCol["socket"] = Last Then
      hS = Last
      Break
    Endif
  Next

  If hS = Null Then Return

  If cCol["buffer"] = "" Then
    If Lof(hS) >= 5 Then

      Try Read #hS, Buf, Lof(hS)
      cCol["buffer"] &= Buf
      If Left(cCol["buffer"], 5) <> "POST " Then
        hError(hS, "405 Method Not Allowed")
        RemoveSocket(hS)
        Return
      End If
    Else
      ' We expect at LEAST something like "POST /"
      RemoveSocket(hS)
      Return
    End If
  Else
    Try Read #hS, Buf, Lof(hS)
    cCol["buffer"] &= Buf

    ' Don't continue, because this is the second (or more) iteration to read the data
    ' The first iteration will handle the complete request
    Return
  End If

  If cCol["protocol"] = - 1 Then
    If InStr(cCol["buffer"], Chr(13)) > 0 Then
      Buf = Trim(Left(cCol["buffer"], InStr(cCol["buffer"], Chr(13)) - 1))
      Buf = Right(Buf, 8)
      If Buf = "HTTP/1.1" Then
        cCol["protocol"] = 1
      Else If Buf = "HTTP/1.0" Then
        cCol["protocol"] = 0
      Else
        hError(hS, "505 HTTP Version Not Supported")
        RemoveSocket(hS)
        Return
      End If

    Else
      If Len(cCol["buffer"]) > 65535 Then
        hError(hS, "413 Request Entity Too Large")
        RemoveSocket(hS)
        Return
      End If
    End If
  End If

  ' It is possible the HTTP headers are send in separate TCP packets, we will wait a maximum of 1000msec
  For cCount = cWait To 199 Step 1
    If hS = Null Then Return
    If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) Then Break
    Wait 0.005
  Next

  If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) Then
    If cCol["type"] = 0 Then
      Buf = Left(cCol["buffer"], InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)))

      ' Check for "Accept-Encoding" header, the format can be "gzip" or "gzip, deflate"
      If InStr(UCase(Buf), "ACCEPT-ENCODING:") > 0 Then
        sCad = Mid(Buf, InStr(UCase(Buf), "ACCEPT-ENCODING:") + 16)
        sCad = Trim(Left(sCad, InStr(sCad, Chr(13))))
        If InStr(UCase(sCad), "GZIP") Then
          ' The client support gzip
          cCol["gzip"] = True
        Endif
      Endif

      If InStr(UCase(Buf), "CONTENT-TYPE:") > 0 Then
        sCad = Mid(Buf, InStr(UCase(Buf), "CONTENT-TYPE:") + 13)
        sCad = Trim(Left(sCad, InStr(sCad, Chr(13))))
        If (LCase(sCad) <> "application/json") And (LCase(sCad) <> "application/json-rpc") Then
          hError(hS, "415 Unsupported Media Type")
          RemoveSocket(hS)
          Return
        Else
          cCol["type"] = 1
        End If
      Else
        hError(hS, "415 Unsupported Media Type")
        RemoveSocket(hS)
        Return
      End If

      If InStr(UCase(Buf), "CONTENT-LENGTH:") > 0 Then
        sCad = Mid(Buf, InStr(UCase(Buf), "CONTENT-LENGTH:") + 15)
        sCad = Trim(Left(sCad, InStr(sCad, Chr(13))))
        Try cCol["length"] = CInt(sCad)
        If Error Then
          hError(hS, "411 Length Required")
          RemoveSocket(hS)
          Return
        End If

        If cCol["length"] < 0 Then
          hError(hS, "400 Bad Request")
          RemoveSocket(hS)
          Return
        Endif
      Else
        cCol["length"] = -1
      End If

      ' We should check if the request is in the URL
      If cCol["length"] = 0 Or If cCol["length"] = -1 Then
        ' First get the first line, this is the URL and remove the HTTP/1.x
        sCad = Trim(Left(cCol["buffer"], InStr(cCol["buffer"], Chr(13)) - 9))
        If InStr(sCad, "?request=") Then
          sCad = Mid(sCad, InStr(sCad, "?request=") + 9)
          Try sCad = URL.Decode(sCad)
          If Error Then
            hError(hS, "400 Bad Request")
            RemoveSocket(hS)
            Return
          Endif

          ' We seem to have a valid request, append mandatory characters and process it
          ProcessQuery(hS, Chr(13) & Chr(10) & Chr(13) & Chr(10) & sCad, cCol["gzip"])
          RemoveSocket(hS)
          Return
        Endif

        If cCol["length"] = -1 Then
          hError(hS, "411 Length Required")
          RemoveSocket(hS)
          Return
        Endif
      Endif

    Endif
  Endif

  If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) Then

    If cCol["length"] = -1 Or cCol["type"] <> 1 Then
      hError(hS, "406 Not Acceptable")
      RemoveSocket(hS)
      Return
    End If

    For cCount = cWait To 200 Step 1
      If hS = Null Then Return
      cLen = Len(cCol["buffer"]) - InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) - 3
      If cLen >= cCol["length"] Then Break
      Wait 0.005
    Next

    ' Content-Length and data size doesn't match
    If cLen <> cCol["length"] Then
      hError(hS, "413 Request Entity Too Large")
      RemoveSocket(hS)
    End If

    If cLen = cCol["length"] Then 
      ProcessQuery(hS, cCol["buffer"], cCol["gzip"])
      RemoveSocket(hS)
      Return
    Else

      If Len(cCol["buffer"]) > 65535 Then
        hError(hS, "413 Request Entity Too Large")
        RemoveSocket(hS)
        Return
      Else
        ' If size doesn't match - we give an internal error
        hError(hS, "500 Internal Server Error")
        RemoveSocket(hS)
        Return
      Endif
      
    Endif

  Else
    If Len(cCol["buffer"]) > 65535 Then
      hError(hS, "413 Request Entity Too Large")
      RemoveSocket(hS)
      Return
    Endif
  Endif

  ' Always give a response
  ' We wait long enough for the information = 1000msec
  hError(hS, "408 Request Timeout")
  RemoveSocket(hS)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub RemoveSocket(hS As Socket)

  Dim cCol As Collection

  For Each cCol In SockColl
    If hS = cCol["socket"] Then
      Try Close #hS
      SockColl.Remove(cCol["id"])
      Break
    End If

  Next

End


Public Sub Http_Connection(RemoteHost As String)

  Dim SockCollEntry As New Collection
  Dim iId As Integer
  Dim hS As Socket

  ' If a whitelist exist, reject all other IP address
  If IPWhiteList.Count >= 1 Then
    If Not IPWhiteList.Exist(RemoteHost) Then
      hS = Http.Accept()
      Try Close #hS
      Return
    Endif
  Endif

  Randomize
  Do
    iId = Int(Rnd(1, 32768))
  Loop Until Not SockColl.Exist(iId)

  SockCollEntry.Add("", "buffer")
  SockCollEntry.Add(Http.Accept(), "socket")
  SockCollEntry.Add(-1, "protocol")
  SockCollEntry.Add(-1, "length")
  SockCollEntry.Add(0, "type")
  SockCollEntry.Add(False, "gzip")
  SockCollEntry.Add(CStr(iId), "id")

  SockColl.Add(SockCollEntry, CStr(iId))

End

Public Sub Close()

  Dim cCol As Collection

  For Each cCol In SockColl
    RemoveSocket(cCol["socket"])
  Next

  Try Http.Close()
  Http = Null

End


Public Sub Listen(Port As Integer, MaxConn As Integer, bDebug As Boolean, Optional WhiteList As String = "")

  If Not Http Then
    Http = New ServerSocket As "Http"
  Else
    If Http.Status <> 0 Then Http.Close()
  End If

  ' Store debug flag
  $bDebug = bDebug

  ' Split and store the IP whitelist
  IPWhiteList = Split(WhiteList, ";")

  Try Http.Port = Port
  If Error Then
    Error.Raise("Invalid TCP port")
    Return
  End If

  If MaxConn > 0 Then
    Try Http.Listen(MaxConn)
  Else
    Try Http.Listen()
  End If

  If Error Then Error.Raise("Unable to listen at TCP port " & Port)
  If Http.Status < 0 Then Error.Raise("Unable to listen at TCP port " & Port)

End


Public Sub _New()

  SockColl = New Collection

End


Public Sub _Free()

  Me.Close()

End

