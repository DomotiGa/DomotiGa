' Gambas class file

' Description:
' JsonRpcServer.class

' Development Status:
' Just Started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'***************************************************************************
Export

Private Methods As Object[]
Private JsonMiniSrv As JsonMiniServer
Private CurrIndex As Integer

Property Read Count As Integer
Property Read Listening As Boolean

Event RemoteCall(Method As String, Params As Collection)

Function Count_Read() As Integer

  Return Methods.Count()

End

Function Listening_Read() As Boolean

  If JsonMiniSrv Then Return True
  Return False

End

Public Sub Unregister(methodName As String)

  Dim Bucle As Integer

  If CurrIndex <> -1 Then
    Error.Raise("Unable to Unregister a function in a RemoteCall event")
    Return
  Endif

  For Bucle = 0 To Methods.Count - 1

    If Methods[Bucle].MethodName = MethodName Then
      Methods[Bucle] = Null
      Methods.Remove(Bucle)
      Return
    Endif

  Next

End

Public Sub Register(remoteFunction As JsonRpcFunction)

  Dim Bucle As Integer

  If remoteFunction.MethodName = "system.listMethods" Then
    Error.Raise("system.listMethods is a reserved keyword")
    Return
  Endif

  If remoteFunction.MethodName = "system.methodHelp" Then
    Error.Raise("system.methodHelp is a reserved keyword")
    Return
  Endif

  If remoteFunction = Null Then
    Error.Raise("Null function")
    Return
  Endif

  For Bucle = 0 To Methods.Count - 1

    If Methods[Bucle] = remoteFunction Then
      Error.Raise("Function already registered")
      Return
    Endif

    If Methods[Bucle].methodName = remoteFunction.methodName Then
      Error.Raise("Function already registered")
      Return
    Endif

  Next

  ' Don't allow methodNames with "rpc."
  If InStr(remoteFunction.methodName, "rpc.") = 1 Then 
    Error.Raise("Function not allowed")
    Return
  Endif

  Methods.Add(remoteFunction)

End

Public Sub Listen(Port As Integer, MaxConn As Integer)

  If Port < 1 Or Port > 65535 Then
    Error.Raise("Invalid port number")
    Return
  Endif

  If MaxConn < 0 Then
    Error.Raise("Invalid maximum connections number")
    Return
  Endif

  If JsonMiniSrv Then JsonMiniSrv = Null
  JsonMiniSrv = New JsonMiniServer As "JsonMiniSrv"
  Try JsonMiniSrv.Listen(Port, MaxConn)
  If Error Then
    JsonMiniSrv = Null
    Error.Raise("Unable to listen at port " & Port)
  Endif

End

Public Sub Stop()

  If JsonMiniSrv Then
    JsonMiniSrv.Close()
    JsonMiniSrv = Null
  Endif

End

Public Sub SetReply(iCode As Integer, vData As Variant)

  If CurrIndex = -1 Then
    Error.Raise("No remote function available")
    Return
  End If

  JsonMiniSrv.SetReply(iCode, vData)

End

Public Sub JsonMiniSrv_ProcessData(cData As Collection)

  Dim sMethod As String
  Dim cParams As New Collection

  sMethod = cData["method"]
  cParams = cData["params"]

  If sMethod = "system.listMethods" Then
    System_ListMethods()
  Else If sMethod = "system.methodHelp" Then
    'System_methodHelp(hPar[0])
  Else
    ' Just pass all the data for testing
    Raise RemoteCall(sMethod, cParams)
  End If

  CurrIndex = -1
End

Public Sub JsonMiniSrv_CheckMethod(sMethod As String)

  Dim Bucle As Integer

  For Bucle = 0 To Methods.Count - 1
    If Methods[Bucle].methodName = sMethod Then
      CurrIndex = bucle
      Return
    End If
  Next

  ' No Method found, Stop Event (=false)
  Stop Event
  Return

End

Public Sub _New()

  Dim Rpc As JsonRpcFunction

  CurrIndex = - 1
  Methods = New Object[]

  Rpc = New JsonRpcFunction("system.listMethods")
  Methods.Add(Rpc)
  Rpc = New JsonRpcFunction("system.methodHelp")
  Methods.Add(Rpc)
  'Rpc = New JsonRpcFunction("system.methodSignature")
  'Methods.Add(Rpc)

  End

Private Sub System_ListMethods()

  Dim MethodList As New String[]
  Dim Bucle As Integer

  For Bucle = 0 To Methods.Count - 1
    MethodList.Add(Methods[Bucle].MethodName)
  Next

  SetReply(0, MethodList)

End

Private Sub System_methodHelp(Data As String)

  'Dim Bucle As Integer

  'Data = Trim(Data)

  'For Bucle = 0 To Methods.Count - 1
  '  If Methods[Bucle].MethodName = Data Then
  '    SetReply(Methods[Bucle].Help)
  '    Return
  '  End If
  'Next

  'miniSrv.SetReply(tools.FaultReply("2", "Unknown method"))

End
