' Gambas class file

' Description:
' Asterisk.class
' Provide support for Asterisk PABX monitoring. (via manager API port)

' Development Status:
' Just started to build this one.
' Incoming call detection and Voicebox status implemented.
' Tested with Asterisk 1.4.21.2 and Digium TDM400

' Links:
' http://www.voip-info.org/wiki/view/Asterisk+-+documentation+of+application+commands

' DomotiGa - an open source home automation program.
' Copyright(C) 2008 Ron Klinkien

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS Integer
PROPERTY AsteriskDebug AS Boolean
PROPERTY User AS String
PROPERTY Password AS String
PROPERTY Polltime AS Integer

PRIVATE sTCPHost AS String
PRIVATE iTCPPort AS Integer
PRIVATE sUser AS String
PRIVATE sPassword AS String
PRIVATE iPolltime AS Integer
PRIVATE bAsteriskDebug AS Boolean

PUBLIC hAsterisk AS NEW Socket

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the connection
  TRY hAsterisk.Close

  ' get a new one
  hAsterisk = NEW Socket AS "Asterisk"
  hAsterisk.Connect(sTCPHost, iTCPPort)

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Asterisk Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB Asterisk_Ready()

  Main.WriteLog(("Asterisk TCP socket connected."))

  ' authenticate ourself to API interface
  ManagerLogin()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hAsterisk.Close
  Main.WriteLog(("Asterisk TCP socket port close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("Asterisk Error: ") & ERROR.Text)
  RETURN FALSE

END

PUBLIC SUB Asterisk_Error()

  DIM sString AS String = "Asterisk: "

  ' handle error
  SELECT CASE hAsterisk.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  END SELECT

END

PUBLIC SUB Asterisk_Read()

  DIM sData AS String

  IF hAsterisk.Status = Net.Connected THEN
    LINE INPUT #hAsterisk, sData
    IF InStr(sData, "Asterisk Call Manager") THEN Main.WriteLog(sData)
    IF InStr(sData, "Response: Error") OR InStr(sData, "Response: Success") THEN
      LINE INPUT #hAsterisk, sData
      IF Main.bAsteriskDebug THEN Main.WriteDebugLog("[Asterisk] " & sData)
      ' put support for parsing incoming events/calls here
    END IF
  END IF

END

PUBLIC SUB ManagerLogin()

  DIM sCommand AS String

  sCommand = "ACTION: LOGIN\r\nUSERNAME: " & sUser & "\r\nSECRET: " & sPassword & "\r\nEVENTS: ON\r\n\r\n"
  PRINT #hAsterisk, sCommand

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS Integer

  RETURN iTCPPort

END

PRIVATE SUB TCPPort_Write(Value AS Integer)

  iTCPPort = Value

END

PRIVATE FUNCTION User_Read() AS String

  RETURN sUser

END

PRIVATE SUB User_Write(Value AS String)

  sUser = Value

END

PRIVATE FUNCTION Password_Read() AS String

  RETURN sPassword

END

PRIVATE SUB Password_Write(Value AS String)

  sPassword = Value

END

PRIVATE FUNCTION Polltime_Read() AS Integer

  RETURN iPolltime

END

PRIVATE SUB Polltime_Write(Value AS Integer)

  iPolltime = Value

END

PRIVATE FUNCTION AsteriskDebug_Read() AS Boolean

  RETURN bAsteriskDebug

END

PRIVATE SUB AsteriskDebug_Write(Value AS Boolean)

  bAsteriskDebug = Value

END
