' Gambas class file

' Description:
' CX10Cmd.class
' Use Heyu or other command to control X10 devices.

' Development Status:
' Writing is working, maybe better error checking is needed.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Reading device status code was written by Renaud.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "X10Cmd"
Public PluginFriendlyName As String = "X10Cmd"
Public PluginVersion As String = "1.01"
Public PluginAuthor As String = "Renaud"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[X10Cmd] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sCommand As String
Private $bMonitor As Boolean
Private $bGlobalX10 As Boolean
Private $iType As Integer
Private $bDebug As Boolean

Private sOutput As String
Private sMonitorBuffer As String
Private pMonitor As Process
Private cQueue As New Collection  ' command buffer
Private bX10CmdBusy As Boolean  ' waiting for command to finish

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const Type_cm11a As Integer = 0 ' cm11a heyu
Public Const Type_cma15a As Integer = 1 ' cma15a cm15ademo
Public Const Type_cm17a As Integer = 2  ' cm17a heyu

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  Dim sTemp As String

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sCommand = cPl.Settings["command"]
  $bMonitor = cPl.Settings["monitor"]
  $bGlobalX10 = cPl.Settings["globalx10"]
  $iType = cPl.Settings["type"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("X10Cmd Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Initialize
  IsRunning = True

  If Util.ProgramExist($sCommand) Then
    If $iType = Type_cm11a Then
      Exec [$sCommand, "version"] To sTemp
      sTemp = Replace$(sTemp, "\n", "")
      Main.WriteLog(LogLabel & "Found Heyu executable " & sTemp)
      If $bMonitor Then
        Main.WriteLog(LogLabel & "Heyu monitor enabled.")
        Monitor
      Else
        Main.WriteLog(LogLabel & "Heyu monitor disabled.")
      Endif
    Else If $iType = Type_cma15a Then
      If $bMonitor Then
        Main.WriteLog(LogLabel & "monitor enabled.")
        Monitor
      Else
        Main.WriteLog(LogLabel & "monitor disabled.")
      Endif
    Endif
  Else
    Main.WriteLog(LogLabel & "ERROR: command '" & $sCommand & "' not found, did you install it?")
    IsRunning = False
    Main.WriteLog("[Plugin] X10Cmd interface disabled.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Dim sProcList As String
  Dim aProcList As String[]
  Dim sProc As String

  ' There is a possible the "heyu_relay" is started, we need to kill it first
  If pMonitor And If pMonitor.Running Then

    ' Find all child processes of our heyu
    Exec ["ps", "-o", "pid", "--no-headers", "--ppid", pMonitor.Handle] To sProcList

    ' Go through the list and kill -TERM them
    If sProcList Then
      aProcList = Split(sProcList, "\n")
      For Each sProc In aProcList
        If sProc Then Exec ["kill", sProc]
      Next
    Endif

  Endif

  Try pMonitor.Kill
  Try pMonitor = Null
  IsRunning = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command with heyu or other command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sCommand As String
  Dim aDim As String[]
  Dim iDim As Integer

  sCmd = UCase(sCmd)

  If InStr(sCmd, "ON") Or InStr(sCmd, "OFF") Then
    Select $iType
      Case Type_cm11a
        sCommand = LCase(sCmd) & " " & sAddress
      Case Type_cma15a
        sCommand = LCase(sAddress) & " " & LCase(sCmd)
      Case Type_cm17a
        sCommand = "f" & LCase(sCmd) & " " & sAddress
    End Select
  Else If InStr(sCmd, "DIM ") Then ' DIM 1 - 99
    aDim = Split(sCmd, " ")
    If aDim.Count = 2 Then
      iDim = Val(aDim[1])
      Select $iType
        Case Type_cm11a
          iDim = Round(0.63 * iDim) ' 0-63 steps
          sCommand = "xpreset " & sAddress & " " & iDim
        Case Type_cma15a
          sCommand = LCase(sAddress) & " " & "xDim " & iDim
      End Select
    Else
      Main.WriteDebugLog(LogLabel & "Invalid dim command format '" & sCmd & "'")
      Return
    Endif
  Else If InStr(sCmd, "DIM") Or InStr(sCmd, "BRIGHT") Then
    Select $iType
      Case Type_cm11a
        sCommand = LCase(sCmd) & " " & sAddress & " 2"
      Case Type_cma15a
        sCommand = LCase(sAddress) & " " & LCase(sCmd)
    End Select
  Else If InStr(sCmd, "STOP")
    ' ignore
  Else
    Main.WriteDebugLog(LogLabel & "Unsupported command '" & $sCommand & " " & sCmd & "'")
    Return
  Endif
  QueueCommand(sCommand)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sCmd As String)

  ' add command to queue
  cQueue.Add(sCmd, Rnd)

  ' if interface is not busy process it
  If bX10CmdBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim sCmd As String

  For Each sCmd In cQueue
    RunCommand(sCmd, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunCommand(sCmd As String, sKey As String)

  If $iType = Type_cma15a And $bMonitor = True Then
     If $bDebug Then Main.WriteDebugLog(LogLabel & "Run: " & sCmd)
     Print #pMonitor, "x " & sCmd
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Run: " & $sCommand & " " & sCmd)
    Shell $sCommand & " " & sCmd & " 2>&1" For Read As "X10Cmd"
    If bX10CmdBusy = False Then bX10CmdBusy = True
  Endif

  ' remove command from queue
  cQueue.Remove(sKey)

Catch
  Main.WriteDebugLog(LogLabel & "Error executing: '" & $sCommand & " " & sCmd & "' '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10Cmd_Read()

  Dim sLine As String

  sLine = Read #Last, -256
  sOutput &= sLine

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' command has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10Cmd_Kill()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Result: " & sOutput)
  sOutput = Null

  bX10CmdBusy = False
  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending next command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start heyu monitor
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Monitor()

  Select $iType
    Case Type_cm11a
      pMonitor = Exec [$sCommand, "monitor"] For Read As "X10CmdMonitor"
    Case Type_cma15a
      pMonitor = Exec [$sCommand] For Read Write As "X10CmdMonitor"
    Case Type_cm17a
      Main.WriteDebugLog(LogLabel & "Monitor not avaliable")
  End Select

Catch
  Main.WriteDebugLog(LogLabel & "Error executing: '" & $sCommand & " monitor' '" & Error.Text & "' at '" & Error.Where & "'")
  IsRunning = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read monitor output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub X10CmdMonitor_Read()

  Dim sLine As String
  Dim SingleMessage As String
  Dim iPosFunc, iPosEOL As Integer

  Try sLine = Read #Last, -256
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from monitor output-> " & Error.Text)
  If Len(sLine) > 0 Then
    sMonitorBuffer &= sLine
    
    If InStr(sMonitorBuffer, "func") > 0 And $iType = 0 Then ' heyu
      Do While InStr(sMonitorBuffer, "func") > 0
        'Read until first "func" is observed & store remainder in sMonitorBuffer
        '& repeat until sMonitorBuffer contains no more "func" Messages (remainder of incomplete message is kept for next call to X10CmdMonitor)
        iPosFunc = InStr(sMonitorBuffer, "func")
        iPosEOL = InStr(sMonitorBuffer, "\n", iPosFunc)
        If iPosEOL = 0 Then 'We have a func line which is still incomplete
          Break
        Else
          SingleMessage = Left(sMonitorBuffer, iPosEOL)
          sMonitorBuffer = Right(sMonitorBuffer, Len(sMonitorBuffer) - iPosEOL)
          'Process Single Function Message
          ParseMonitorMessageHeyu(SingleMessage)
        Endif
      Loop
    Endif

    If InStr(sMonitorBuffer, "PLC-") > 0 And $iType = 1 Then  ' cm15demo
      ParseMonitorMessageCm15demo(sMonitorBuffer)
      sMonitorBuffer = Null
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse monitor output for heyu
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseMonitorMessageHeyu(sMessage As String)

  Dim aAddressLine, aFunctionLine, aValueLine As String[]
  Dim sAddress, sFunction, sValue As String
  Dim aAddress As New String[]
  Dim sMessageBuffer As String
  Dim iAddressCount As Integer

  'If $bDebug Then Main.WriteDebugLog(LogLabel & "Monitor get: " & sMessage)

  ' Message sample :
    ' 08/28 09:57:34 Monitor started
    '         TIMESTAMP          SOURCE   ADDR/FUNC   Unit/Order  : hu/hc/level   Home/Address/Value    Alias/Dim/Bright     Value       Alias
    ' Double line commands:
    ' Line 1: 08/28 09:57:43     rcvi     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 09:57:43     rcvi     func        Off         : hc            A
    ' Line 1: 08/28 09:57:51     rcvi     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 09:57:51     rcvi     func        On          : hc            A
    ' Single line commands (note that function is either applied to all Units in Housecode or for the Dim/Bright command on the last selected unit):
    ' Line 1: 08/28 09:57:58     rcvi     func        Dim         : hc            A                     dim %17 [36]
    ' Line 1: 08/28 09:58:01     rcvi     func        Bright      : hc            A                     bright %12 [25]
    ' Line 1: 08/28 09:58:54     rcvi     func        LightsOn    : hc            A
    ' Line 1: 08/28 09:59:00     rcvi     func        AllOff      : hc            A
    ' Many line command: AllOn
    ' Line 1: 08/28 12:03:13     sndc     addr        unit 1      : hu            A1                    (_no_alias_)
    ' Line 2: 08/28 12:03:13     sndc     addr        unit 2      : hu            A2                    (_no_alias_)
    '... 
    ' Line 16: 08/28 12:03:13    sndc     addr        unit 16     : hu           A16                   (_no_alias_)
    ' Line 17: 08/28 12:03:15    sndc     func        On          : hc            A

    ' Double line commands:
    ' Line 1: 08/28 09:59:17     sndc     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 09:59:18     sndc     func        On          : hc            A
    ' Line 1: 08/28 09:59:21     sndc     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 09:59:22     sndc     func        Off         : hc            A
    ' Line 1: 08/28 09:59:33     sndc     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 09:59:34     sndc     func        Dim         : hc            A                     dim %22 [~46]
    ' Line 1: 08/28 09:59:49     sndc     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 09:59:50     sndc     func        Bright      : hc            A                     bright %22 [~46]
    ' Line 1: 08/28 10:00:19     sndc     addr        unit 11     : hu            A11                   (_no_alias_)
    ' Line 2: 08/28 10:00:20     sndc     func        Preset      : level         5
    'Single line commands:
    ' Line 1: 08/28 10:00:26     sndc     func        xPreset     : hu            A11                   level                 5         (_no_alias_)

  'Find Function (AllOn,AllOff, Preset,...), line always exists
  aFunctionLine = Scan(sMessage, "*func*: *\n*") 'Scan for Function
  sFunction = Trim(aFunctionLine[1])

  'Find Address (HouseCode or UnitCode)
  If InStr(sMessage, "addr") Then           'Scan for Address, line does not always exist
    aAddressLine = Scan(sMessage, "*addr*: hu*(*") 
    If InStr(aAddressLine[3], "addr") Then  'Check if it has multiple address's available, then collect all "addr"
      sMessageBuffer = sMessage
      Do While InStr(sMessageBuffer, "addr") > 0  'Read all "addr" 
        aAddressLine = Scan(sMessageBuffer, "*addr*: hu*(*") 
        aAddress.Add(Trim(aAddressLine[2]))
        sMessageBuffer = aAddressLine[3]
      Loop
    Else                                    'Only a single "addr"
      aAddress.Add(Trim(aAddressLine[2]))
    Endif
  Else                                      'Extract Address from function line
    aFunctionLine = Scan(sMessage, "*func*: h* * *")
    If aFunctionLine.Length >= 3
      aAddress.Add(Trim(aFunctionLine[3]))
    Else                                    'A message I could not translate ...
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Incomplete X10 message received by Heyu!")
      Return
    Endif
  Endif

  For iAddressCount = 0 To (aAddress.Count - 1)
    sAddress = aAddress[iAddressCount]
    If Len(sAddress) == 2 Then sAddress = Left(sAddress, 1) & "0" & Right(sAddress, 1) 'Creating a double digit UnitCode
    'Find Value for each Function & update Device Values

    Select sFunction
      Case "AllOn", "AllOff", "LightsOff", "LightsOn"
        If Comp(sFunction, "AllOn") = 0 Or Comp(sFunction, "LightsOn") = 0 Then sValue = "On"
        If Comp(sFunction, "AllOff") = 0 Or Comp(sFunction, "LightsOff") = 0 Then sValue = "Off"
        X10DeviceValueUpdate(sAddress, sFunction, sValue)
      Case "On", "Off"
        sValue = sFunction
        X10DeviceValueUpdate(sAddress, sFunction, sValue)
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Switching device " & sAddress & " " & sValue)
      Case "xPreset" 'Dimming command for X10 Dimmers with eXtended Functionality
        aValueLine = Scan(sMessage, "*level*(*")
        sValue = "Dim " & Round(Trim(aValueLine[1]) * (100 / 63)) 'xPreset takes values from 0...63 (=100%)
        X10DeviceValueUpdate(sAddress, sFunction, sValue)
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Dimming (extended code X10) device " & sAddress & " to " & sValue & "%")
      Case "Preset" '"Old" dimming command for X10 Dimmers, allegedly only applicable to Smarthome company devices ??? 
        aValueLine = Scan(sMessage, "*level*(*")
        sValue = "Dim " & Round(Max(CInt(Trim(aValueLine[1])), 1) * (100 / 32)) 'Preset takes values from 1...32 (=100%), note: not allowed to be zero !
        X10DeviceValueUpdate(sAddress, sFunction, sValue)
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Dimming (non-extended code X10) device " & sAddress & " to " & sValue & "%")
      Case "Dim" 
        'Nasty one: 
        '- succesive Dim/Bright commands do not have a UnitCode (it uses the last seen unitcode)
        '- Dim & Bright use relative commands, without the starting point (history) you don't know the absolute intensity/dim level
        'So we will not update Domotiga with any value for Dim & Bright function
        aValueLine = Scan(sMessage, "*%* *")
        sValue = Trim(aValueLine[1])
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Relative Dimming of last selected X10-device by " & sValue & "%")
      Case "Bright" 'See comments "Dim"
        aValueLine = Scan(sMessage, "*%* *")
        sValue = Trim(aValueLine[1])
        If $bDebug Then Main.WriteDebugLog(LogLabel & "Relative Brightening of last selected X10-device by " & sValue & "%")
    End Select
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse monitor output for cm15demo
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseMonitorMessageCm15demo(sMessage As String)

  Dim iDeviceId As Integer
  Dim data As String[]
  Dim sAddress, sOrder, sCurrentValue As String

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Monitor get: " & sMessage)

  ' Message sample:
  ' date X PLC-R: C-1  Off        ?

  data = Scan(sMessage, "*PLC-R: * * *")

  If data.Count = 4
    sAddress = Trim(data[1])
    sAddress = Replace$(sAddress, "-", "")
    If Len(sAddress) = 2 Then
      sAddress = Left(sAddress, 1) & "0" & Right(sAddress, 1)
    Endif

    sOrder = Trim(data[2])

    If $bGlobalX10 Then
       iDeviceId = Devices.FindAll(Instance, sAddress, 9999, "X10")
    Else
       iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "X10")
    Endif
  
    If iDeviceId > 0 Then ' if found then update it's value
      sCurrentValue = Devices.GetCurrentValueForDevice(iDeviceId, 1)
      If Not (sCurrentValue Like sOrder) Then 
        Devices.ValueUpdate(iDeviceId, 1, sOrder)
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Update the X10 device value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub X10DeviceValueUpdate(sAddress As String, sFunction As String, sValue As String)

  Dim rDevice As Result
  Dim sHouseCode As String
  Dim iDeviceId, iCnt As Integer

  If Len(sAddress) == 1 Then 'HouseCode Function
    sHouseCode = sAddress
    If $bDebug Then Main.WriteDebugLog(LogLabel & sFunction & " command detected for HouseCode: " & sHouseCode)
    For iCnt = 1 To 16 Step 1 'There are 16 Unit addresses in a Housecode
      sAddress = sHouseCode & Format(iCnt, "0#")
      If $bGlobalX10 Then 'If there are multiple devices on the same address
        iDeviceId = Devices.FindAll(Instance, sAddress, 9999, "X10")
      Else
        iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "X10")
      Endif
      Select sFunction
        Case "AllOn", "AllOff"
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Switching device " & sHouseCode & iCnt & " " & sValue)
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValue)
        Case "LightsOff", "LightsOn"
          rDevice = Main.hDB.Exec("SELECT groups FROM devices WHERE id = &1", iDeviceId)
            If rDevice.Available
              If InStr(LCase$(rDevice!groups), "light") Then 'The X10 device must be in a group that contains the word "light" 
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Switching device " & sHouseCode & icnt & " " & sValue)
                If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValue)
                Endif
            Endif
      End Select
    Next
  Else If Len(sAddress) > 1 Then 'Single UnitCode Function
    If $bGlobalX10 Then
      iDeviceId = Devices.FindAll(Instance, sAddress, 9999, "X10")
    Else
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "X10")
    Endif
    If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValue)      ' if found then update it's value    
  Endif

End
