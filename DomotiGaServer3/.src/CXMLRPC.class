' Gambas class file

' Description:
' CXMLRPC.class
' Built-in XML-RPC server.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

Property HTTPPort As Integer
Property MaxConn As Integer
Property XMLRPCDebug As Boolean

Private iHTTPPort As Integer
Private iMaxConn As Integer
Private bXMLRPCDebug As Boolean

Public hXMLRPC As RpcServer
Private APIVersion As String = "0.08"

Public Function Connect() As Boolean

  Dim hRpcFunc As RpcFunction

  hXMLRPC = New RpcServer As "hXMLRPC"

  ' start method definitions
  hRpcFunc = New RpcFunction("system.program_uptime", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the program uptime.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.program_version", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the program version.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("api.version", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the api version.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.pid", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the process id.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.hostname", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the hostname.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("data.newmessages", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns new mails, calls and voicemails.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("data.sunmoon", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns sun and moon data.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("mode.get_housemode", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the house mode.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("mode.get_mutemode", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("returns the mute mode.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.list", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns a list of global variables.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.list", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.listswitch", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices which can be switched.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.listdim", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices which can be dimmed.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("module.restart", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("reload config and restart module param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.email", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send email to param1, with subject param2 and body param3.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.tweet", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send tweet with param1 as contents.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.sms", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send sms to param1, with param2 as contents.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.housemode", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set house mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.mutemode", [XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set mute mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.setdevice", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set device param1 with value param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.alarmpin", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set alarm pin to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.alarmmode", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set alarm mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("play.sound", [XmlRpc.xString, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("play sound param1 with volume param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("voicetext.speak", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("speak text param1 with voice param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("pachube.list", Null, XmlRpc.xString)
  hRpcFunc.Help = ("get pachube device list in eeml.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.listgraphs", Null, XmlRpc.xString)
  hRpcFunc.Help = ("get list of rrdtool graph images in group param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.updategraphs", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("update rrdtool graph images in group param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.createrrds", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("create rrdtool database for device id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("display.ledmessage", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("display message param2 on display with id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("av.setcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set audio/video param1 with command param2, value param3, address param4.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("av.getcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("get audio/video param1 setting param2, address param3.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.save", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("saves global variables to database.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.get", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns a list of global variables with values.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.set", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set global variable param1 to param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.removenodes", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave - remove all nodes.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.createnode", [XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave - create node.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.setids", [XmlRpc.xInteger, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave - set ids.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.basicreport", [XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave - basic report.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.allqueried", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave - all queried.")
  hXMLRPC.Register(hRpcFunc)
  Try hXMLRPC.Listen(iHTTPPort, iMaxConn)

  If Not hXMLRPC.Listening Then
    Return False
  End If
  Return True

End

' shutdown our xmlrpc server
Public Sub Disconnect()

  hXMLRPC.Stop()

End

Private Sub ReturnDeviceListDimSwitch(sType As String)

  Dim rResult As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim sStatusIcon As String
  Dim iCnt As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")

  If Not rResult.Available Then
    Main.WriteLog(("Error: table 'devices' not found!"))
    Return
  End If

  For iCnt = 0 To rResult.Count - 1
    If Not rResult!hide Then
      If (sType = "switchable" And rResult!switchable) Or (sType = "dimable" And rResult!dimable) Then
        ' status icon
        If rResult!onicon Or rResult!officon Then
          If UCase$(rResult!value) = "ON" Or UCase$(rResult!value) = "OPEN" Or UCase$(rResult!value) = "MOTION" Then
            sStatusIcon = rResult!onicon
          Else
            sStatusIcon = rResult!officon
          End If
        End If
        sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & rResult!value
        sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
      End If
    End If
    rResult.MoveNext
  Next

  hXMLRPC.SetReply(sList)

End

Private Sub ModuleRestart(sParams As Variant[])

  If sParams.Count = 1 Then
    Main.GetSettings()
    Try Object.Call(Main, "Restart_" & sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when restarting module!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SendEmail(sParams As Variant[])

  If sParams.Count = 3 Then
    Try Mail.SendMail(sParams[1], sParams[2], sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when sending an e-mail!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SendTweet(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Twitter.PostTweet(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when sending an Tweet!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SendSMS(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hSMS.SendSMS(sParams[1], sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when sending an SMS!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SetHouseMode(sParams As Variant[])

  If sParams.Count = 1 Then
    If InStr("normal away vacation work", sParams[0]) Then
      Try Main.ChangeHouseMode(sParams[0])
      If Error Then
        Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting House mode!"))
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      End If
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SetAlarmMode(sParams As Variant[])

  If sParams.Count = 1 Then
    If InStr("0311 0301", sParams[0]) Then
      If Main.hDSC Then Try Main.hDSC.TX(sParams[0])
      If Error Then
        Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting Alarm mode!"))
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      End If
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SetAlarmPin(sParams As Variant[])

  If sParams.Count = 1 Then
    If Main.hDSC Then Try Main.hDSC.TX("0401" & sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting Alarm pin!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SetMuteMode(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.ChangeMuteMode(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting Mute mode!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub DeviceSetDevice(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Devices.SetDevice(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting device value!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub ReturnDeviceList()

  Dim rResult, rResult3 As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sStatusIcon, sLastseen, sValue, sValue2, sValue3, sValue4 As String

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")

  If Not rResult.Available Then
    Main.WriteLog(("Error: table 'devices' not found!"))
    Return
  End If

  For iCnt = 0 To rResult.Count - 1
    If Not rResult!hide Then
      ' status icon
      If rResult!onicon Or rResult!officon Then
        If UCase$(rResult!value) = "ON" Or UCase$(rResult!value) = "OPEN" Or UCase$(rResult!value) = "MOTION" Then
          sStatusIcon = rResult!onicon
        Else
          sStatusIcon = rResult!officon
        End If
      Else
        sStatusIcon = ""
      End If
      ' location
      Try rResult3 = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResult!location)
      ' last seen
      If rResult!lastseen Then
        sLastSeen = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      Else
        sLastSeen = "Never"
      End If

      sValue = rResult!value
      Try sValue = (sValue / rResult!divider) + rResult!calibration
      sValue2 = rResult!value2
      Try sValue2 = (sValue2 / rResult!divider2) + rResult!calibration2
      sValue3 = rResult!value3
      Try sValue3 = (sValue3 / rResult!divider3) + rResult!calibration3
      sValue4 = rResult!value4
      Try sValue4 = (sValue4 / rResult!divider4) + rResult!calibration4

      sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & rResult3!name & ";;" & sValue & ";;" & rResult!label & ";;" & sValue2 & ";;" & rResult!label2 & ";;" & sValue3 & ";;" & rResult!label3 & ";;" & sValue4 & ";;" & rResult!label4 & ";;" & sLastSeen
      sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
    End If
    rResult.MoveNext
  Next

  hXMLRPC.SetReply(sList)

End

Private Sub PlaySound(sParams As Variant[])

  If sParams.Count > 1 And If sParams.Count < 3 Then
    Try Sounds.PlaySnd(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when playing sound!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub VoiceTextSpeak(sParams As Variant[])

  If sParams.Count > 1 And If sParams.Count < 3 Then
    Try VoiceText.Speak(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when speaking voicetext!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub RRDToolListGraphs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try RRDTool.Graphs(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when listing rrdtool graphs!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub RRDToolUpdateGraphs(sParams As Variant[])

  If sParams.Count = 2 Then
    Try RRDTool.CreateGraphs(sParams[0], sParams[1])
    Try RRDTool.CreateExtGraphs(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when creating rrdtool graphs!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub RRDToolCreateRRDs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try RRDTool.CreateRRDs(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when creating rrdtool database!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub DisplayLEDMessage(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hLEDMatrix.DisplayMessage(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & ERROR.Text & "' at '" & Error.Where & "' when displaying a message!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub SetAVControl(sParams As Variant[])

  If sParams.Count = 4 Then
    Try AVControl.Set(sParams[0], sParams[1], sParams[2], sParams[3])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting audio/video control!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub GetAVControl(sParams As Variant[])

  If sParams.Count = 2 Then
    Try AVControl.Get(sParams[0], sParams[1], sParams[2])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when getting audio/video control!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub GetGlobalVars()

  Dim vValue As Variant
  Dim aArray As New RpcArray

  For Each vValue In Main.GlobalVar
    aArray.Add(Main.GlobalVar.Key, XmlRpc.xString)
    aArray.Add(vValue, XmlRpc.xString)
  Next
  hXMLRPC.SetReply(aArray)

End

Private Sub SetGlobalVar(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.SetGlobalVar(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' when setting globalvar!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SaveGlobalVars()

  Try Main.SaveGlobalVars()
  If Error Then
    Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' when saving globalvars!"))
    hXMLRPC.SetReply(False)
  Else
    hXMLRPC.SetReply(True)
  Endif

End

Private Sub ZWaveRemoveNodes(sParams As Variant[])

  Try Main.hZWave.RemoveNodes()
  If Error Then
    Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when removing zwave nodes"))
    hXMLRPC.SetReply(False)
  Else
    hXMLRPC.SetReply(True)
  End If

End

Private Sub ZWaveCreateNode(sParams As Variant[])

  If sParams.Count = 7 Then
    Try Main.hZWave.CreateNode(sParams[0], sParams[1], sParams[2], sParams[3], sParams[4], sParams[5], sParams[6])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when creating a zwave node!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub ZWaveSetIds(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hZWave.OZW_SetIds(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting zwave ids!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Private Sub ZWaveBasicReport(sParams As Variant[])

  If sParams.Count = 3 Then
    Try Main.hZWave.OZW_BasicReport(sParams[0], sParams[1], sParams[2])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when handling zwave basic report!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    End If
  Else
    hXMLRPC.SetReply(False)
  End If

End

Public Sub hXMLRPC_RemoteCall(sName As String, sData As Variant[])

  Dim vValue As Variant
  Dim aArray As New RpcArray
  Dim sParam As String
  Dim iParam As Integer

  If bXMLRPCDebug Then
    Main.WriteDebugLog(("[XMLRPC] Got a RemoteCall for method '" & sName & "'"))
    For Each sParam In sData
      Main.WriteDebugLog(("[XMLRPC] Param[" & iParam & "] = '" & sParam & "'"))
      Inc iParam
    Next
  Endif

  Select Case sName
    Case "system.program_uptime"
      hXMLRPC.SetReply(Main.GlobalVar["Program_Uptime"])
    Case "system.program_version"
      hXMLRPC.SetReply(Main.sProgramVersion)
    Case "system.pid"
      hXMLRPC.SetReply(Application.Id)
    Case "system.hostname"
      hXMLRPC.SetReply(System.Host)
    Case "api.version"
      hXMLRPC.SetReply(APIVersion)
    Case "mode.get_housemode"
      hXMLRPC.SetReply(Main.GlobalVar["House_Mode"])
    Case "mode.get_mutemode"
      hXMLRPC.SetReply(Main.GlobalVar["Mute"])
    Case "globalvar.list"
      For Each vValue In Main.GlobalVar
        aArray.Add(Main.GlobalVar.Key, XmlRpc.xString)
      Next
      hXMLRPC.SetReply(aArray)
    Case "globalvar.get"
      GetGlobalVars()
    Case "set.globalvar"
      SetGlobalVar(sData)
    Case "globalvar.save"
      SaveGlobalVars()
    Case "data.sunmoon"
      aArray.Add(Main.GlobalVar["Sunrise"], XmlRpc.xString)
      aArray.Add(Main.GlobalVar["Sunset"], XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    Case "data.newmessages"
      aArray.Add(Main.iNewMails, XmlRpc.xString)
      aArray.Add(Main.iNewCalls, XmlRpc.xString)
      aArray.Add(Main.iNewVoicemails, XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    Case "device.list"
      ReturnDeviceList()
    Case "device.listswitch"
      ReturnDeviceListDimSwitch("switchable")
    Case "device.listdim"
      ReturnDeviceListDimSwitch("dimable")
    Case "module.restart"
      ModuleRestart(sData)
    Case "send.email"
      SendEmail(sData)
    Case "send.tweet"
      SendTweet(sData)
    Case "send.sms"
      SendSMS(sData)
    Case "set.housemode"
      SetHouseMode(sData)
    Case "set.mutemode"
      SetMuteMode(sData)
    Case "set.alarmpin"
      SetAlarmPin(sData)
    Case "set.alarmmode"
      SetAlarmMode(sData)
    Case "device.setdevice"
      DeviceSetDevice(sData)
    Case "play.sound"
      PlaySound(sData)
    Case "voicetext.speak"
      VoiceTextSpeak(sData)
    Case "pachube.list"
      hXMLRPC.SetReply(Pachube.CreatePachubeData())
    Case "rrdtool.listgraphs"
      RRDToolListGraphs(sData)
    Case "rrdtool.updategraphs"
      RRDToolUpdateGraphs(sData)
    Case "rrdtool.createrrds"
      RRDToolCreateRRDs(sData)
    Case "display.ledmessage"
      DisplayLEDMessage(sData)
    Case "av.setcontrol"
      SetAVControl(sData)
    Case "av.getcontrol"
      GetAVControl(sData)
    Case "zwave.removenodes"
      ZWaveRemoveNodes(sData)
    Case "zwave.createnode"
      ZWaveCreateNode(sData)
    Case "zwave.setids"
      ZWaveSetIds(sData)
    Case "zwave.basicreport"
      ZWaveBasicReport(sData)
    Case "zwave.allqueried"
      Main.hZWave.OZW_AllQueried()
      hXMLRPC.SetReply(True)
    Default
      Return
  End Select

End

Private Function HTTPPort_Read() As Integer

  Return iHTTPPort

End

Private Sub HTTPPort_Write(Value As Integer)

  iHTTPPort = Value

End

Private Function MaxConn_Read() As Integer

  Return iMaxConn

End

Private Sub MaxConn_Write(Value As Integer)

  iMaxConn = Value

End

Private Function XMLRPCDebug_Read() As Boolean

  Return bXMLRPCDebug

End

Private Sub XMLRPCDebug_Write(Value As Boolean)

  bXMLRPCDebug = Value

End
