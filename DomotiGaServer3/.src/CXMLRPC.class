' Gambas class file

' Description:
' CXMLRPC.class
' Built-in XML-RPC server.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Property HTTPPort As Integer
Property MaxConn As Integer
Property XMLRPCDebug As Boolean

Private iHTTPPort As Integer
Private iMaxConn As Integer
Private bXMLRPCDebug As Boolean

Public hXMLRPC As RpcServer
Private APIVersion As String = "0.16"

Public Function Connect() As Boolean

  Dim hRpcFunc As RpcFunction

  hXMLRPC = New RpcServer As "hXMLRPC"

  ' start method definitions
  hRpcFunc = New RpcFunction("system.program_uptime", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the program uptime.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.program_version", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the program version.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("api.version", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the api version.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.pid", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the process id.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("system.hostname", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the hostname.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("data.newmessages", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns new mails, calls and voicemails.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("data.sunmoon", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns sun and moon data.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("mode.get_housemode", Null, XmlRpc.xString)
  hRpcFunc.Help = ("returns the house mode.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("mode.get_mutemode", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("returns the mute mode.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.list", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns a list of global variables.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.list", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.listswitch", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices which can be switched.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.listdim", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("returns a list of devices which can be dimmed.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("module.restart", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("reload config and restart module param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.email", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send email to param1, with subject param2 and body param3.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.tweet", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send tweet with param1 as contents.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("send.sms", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("send sms to param1, with param2 as contents.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.housemode", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set house mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.mutemode", [XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set mute mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.setdevice", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set device param1 with value param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("device.getstate", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get device state from device with name param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.alarmpin", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set alarm pin to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("set.alarmmode", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set alarm mode to param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("play.sound", [XmlRpc.xString, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("play sound param1 with volume param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("voicetext.speak", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("speak text param1 with voice param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("pachube.list", Null, XmlRpc.xString)
  hRpcFunc.Help = ("get pachube device list in eeml.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("serverstats.updategraphs", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("update serverstats graph images for range param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.listgraphs", Null, XmlRpc.xString)
  hRpcFunc.Help = ("get list of rrdtool graph images in group param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.updategraphs", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("update rrdtool graph images in group param1 for range param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("rrdtool.createrrds", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("create rrdtool database for device id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("display.ledmessage", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("display message param2 on display with id param1.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("av.setcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set audio/video param1 with command param2, value param3, address param4.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("av.getcontrol", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("get audio/video param1 setting param2, address param3.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.save", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("saves global variables to database.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.get", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("returns a list of global variables with values.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.set", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set global variable param1 to param2.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("globalvar.del", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("delete global variable param1")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.removenodes", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave remove all nodes.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.createnode", [XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xBoolean], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave create node.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.setids", [XmlRpc.xInteger, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave set ids.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.setvalue", [XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xInteger, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave set device value.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("zwave.allqueried", Null, XmlRpc.xBoolean)
  hRpcFunc.Help = ("zwave all queried.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("cmdr.culsimulate", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("cmdr inject cul packet in simulator.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("cmdr.culqueuecommand", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("cmdr cul queue command.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("cmdr.plcbustxcommand", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xBoolean, XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("cmdr plcbus queue command.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.listscenario", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("thermostat list all scenarii.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.getscenario", Null, XmlRpc.xStruct)
  hRpcFunc.Help = ("thermostat get active scenario.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.setscenario", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("thermostat set scenario.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("thermostat.derogateheating", [XmlRpc.xString, XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("thermostat change requested temperature for a heating.")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("events.runactions", [XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("run all actions from event with id param1")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("events.runaction", [XmlRpc.xInteger], XmlRpc.xBoolean)
  hRpcFunc.Help = ("run action with id param1")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("calendar.setplanning", [XmlRpc.xArray], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set occupancy planning")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("calendar.getplanning", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("get occupancy planning")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.setvolumeplayer", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("set volume with player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getvolumeplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get volume with player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.stopplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("stop player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.playplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("start player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.nextnumberplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("next number")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.prevnumberplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("prev number")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getcurrentnumberplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get current number")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getalbums", Null, XmlRpc.xArray)
  hRpcFunc.Help = ("get albums")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getmodeplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get mode player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getplayerid", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get player id")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getplayername", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get player name")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getisplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get is player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.clearplaylistplayer", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("clear playlist player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.addalbumtoplaylistplayer", [XmlRpc.xString, XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("add album to playlist for player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getcurrentartistplayer", [XmlRpc.xString], XmlRpc.xString)
  hRpcFunc.Help = ("get current artist for player")
  hXMLRPC.Register(hRpcFunc)
  hRpcFunc = New RpcFunction("squeezebox.getplayerisconnectedtoserver", [XmlRpc.xString], XmlRpc.xBoolean)
  hRpcFunc.Help = ("is player connected to server")
  hXMLRPC.Register(hRpcFunc)

  Try hXMLRPC.Listen(iHTTPPort, iMaxConn)
  If Not hXMLRPC.Listening Then
    Return False
  Endif
  Return True

End

' shutdown our xmlrpc server
Public Sub Disconnect()

  hXMLRPC.Stop()

End

Private Sub ReturnDeviceListDimSwitch(sType As String)

  Dim rResult As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim sStatusIcon As String
  Dim iCnt As Integer

'  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  rResult = Devices.FindAllEnabledDevices()

  If Not rResult.Available Then
    Main.WriteLog(("Error: table 'devices' not found!"))
    Return
  Endif

  For iCnt = 0 To rResult.Max
    If Not rResult!hide Then
      If (sType = "switchable" And rResult!switchable) Or (sType = "dimable" And rResult!dimable) Then
        ' status icon
        If Not IsNull(rResult!onicon) Or Not IsNull(rResult!officon) Then
          If UCase$(rResult!value) = "ON" Or UCase$(rResult!value) = "OPEN" Or UCase$(rResult!value) = "MOTION" Then
            sStatusIcon = rResult!onicon
          Else
            sStatusIcon = rResult!officon
          Endif
        Endif
        sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & rResult!value
        sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
      Endif
    Endif
    rResult.MoveNext
  Next
  hXMLRPC.SetReply(sList)

End

Private Sub ModuleRestart(sParams As Variant[])

  If sParams.Count = 1 Then
    Main.GetSettings()
    Try Object.Call(Main, "Restart_" & sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when restarting module!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SendEmail(sParams As Variant[])

  If sParams.Count = 3 Then
    Try Mail.SendMail(sParams[1], sParams[2], sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when sending an e-mail!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SendTweet(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Twitter.PostTweet(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when sending an Tweet!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SendSMS(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hSMS.SendSMS(sParams[1], sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when sending an SMS!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetHouseMode(sParams As Variant[])

  If sParams.Count = 1 Then
    If InStr("normal away vacation work", sParams[0]) Then
      Try Main.ChangeHouseMode(sParams[0])
      If Error Then
        Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting House mode!"))
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetAlarmMode(sParams As Variant[])

  If sParams.Count = 1 Then
    If InStr("0311 0301", sParams[0]) Then
      If Main.hDSC Then Try Main.hDSC.TX(sParams[0])
      If Error Then
        Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting Alarm mode!"))
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetAlarmPin(sParams As Variant[])

  If sParams.Count = 1 Then
    If Main.hDSC Then Try Main.hDSC.TX("0401" & sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting Alarm pin!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetMuteMode(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.ChangeMuteMode(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting Mute mode!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub DeviceSetDevice(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Devices.SetDevice(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting device value!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub DeviceGetState(sParams As Variant[])

  Dim sValue As String

  If sParams.Count = 1 Then
    Try sValue = Devices.GetValueForDevice(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when getting device state!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(sValue)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ReturnDeviceList()

  Dim rResult, rResult3 As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sStatusIcon, sLastseen, sValue, sValue2, sValue3, sValue4, sLocation As String

'  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE")
  rResult = Devices.FindAllEnabledDevices()

  If Not rResult.Available Then
    Main.WriteLog(("Error: table 'devices' not found!"))
    Return
  Endif

  For iCnt = 0 To rResult.Max
    If Not rResult!hide Then
      ' status icon
      If Not IsNull(rResult!onicon) Or Not IsNull(rResult!officon) Then
        If UCase$(rResult!value) = "ON" Or UCase$(rResult!value) = "OPEN" Or UCase$(rResult!value) = "MOTION" Then
          sStatusIcon = rResult!onicon
        Else
          sStatusIcon = rResult!officon
        Endif
      Else
        sStatusIcon = ""
      Endif
      ' location
      sLocation = ""
      Try rResult3 = Main.hDB.Exec("SELECT * FROM locations WHERE id = &1", rResult!location)
      If Not Error Then
        If rResult3.Available Then
          sLocation = rResult3!name
        Endif
      Endif
      ' last seen
      Try sLastseen = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
      If Error Then
        sLastSeen = "Never"
      Endif

      Try sValue = Devices.CorrectValue(rResult!value, rResult!correction, rResult)
      Try sValue2 = Devices.CorrectValue(rResult!value2, rResult!correction2, rResult)
      Try sValue3 = Devices.CorrectValue(rResult!value3, rResult!correction3, rResult)
      Try sValue4 = Devices.CorrectValue(rResult!value4, rResult!correction4, rResult)

      sString[iCnt] = rResult!id & ";;" & sStatusIcon & ";;" & rResult!name & ";;" & sLocation & ";;" & sValue & ";;" & rResult!label & ";;" & sValue2 & ";;" & rResult!label2 & ";;" & sValue3 & ";;" & rResult!label3 & ";;" & sValue4 & ";;" & rResult!label4 & ";;" & sLastSeen & ";;" & rResult!dimable & ";;" & rResult!switchable & ";;" & rResult!batterystatus
      sList.Add(rResult!name, sString[iCnt], XmlRpc.xString)
    Endif
    rResult.MoveNext
  Next
  hXMLRPC.SetReply(sList)

End

Private Sub PlaySound(sParams As Variant[])

  If sParams.Count > 1 And If sParams.Count < 3 Then
    Try Sounds.PlaySnd(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when playing sound!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub VoiceTextSpeak(sParams As Variant[])

  If sParams.Count > 1 And If sParams.Count < 3 Then
    Try VoiceText.Speak(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when speaking voicetext!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ServerStatsUpdateGraphs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try ServerStats.CreateGraphs(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when updating serverstats graphs!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub RRDToolListGraphs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try RRDTool.Graphs(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when listing rrdtool graphs!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub RRDToolUpdateGraphs(sParams As Variant[])

  If sParams.Count = 2 Then
    Try RRDTool.CreateGraphs(sParams[0], sParams[1])
    Try RRDTool.CreateExtGraphs(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when updating rrdtool graphs!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub RRDToolCreateRRDs(sParams As Variant[])

  If sParams.Count = 1 Then
    Try RRDTool.CreateRRDs(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when creating rrdtool database!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub DisplayLEDMessage(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hLEDMatrix.DisplayMessage(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & ERROR.Text & "' at '" & Error.Where & "' when displaying a message!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SetAVControl(sParams As Variant[])

  If sParams.Count = 4 Then
    Try AVControl.Set(sParams[0], sParams[1], sParams[2], sParams[3])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting audio/video control!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub GetAVControl(sParams As Variant[])

  If sParams.Count = 2 Then
    Try AVControl.Get(sParams[0], sParams[1], sParams[2])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when getting audio/video control!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub GetGlobalVars()

  Dim vValue As Variant
  Dim aArray As New RpcArray

  For Each vValue In Main.GlobalVar
    aArray.Add(Main.GlobalVar.Key, XmlRpc.xString)
    ' Temporary fix to allow gambas2 DomotiGa to work with gambas3 DomotiGaServer3
    If vValue = "" Then vValue = " "
    aArray.Add(vValue, XmlRpc.xString)
  Next
  hXMLRPC.SetReply(aArray)

End

Private Sub SetGlobalVar(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.SetGlobalVar(sParams[0], PrepareValue(sParams[1]), False)
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' when setting globalvar!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SaveGlobalVars()

  Try Main.SaveGlobalVars()
  If Error Then
    Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' when saving globalvars!"))
    hXMLRPC.SetReply(False)
  Else
    hXMLRPC.SetReply(True)
  Endif

End

Private Sub EventsRunActions(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Events.RunActions(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running event actions!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub EventsRunAction(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Events.RunAction(sParams[0], 0, 0)
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running action!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ZWaveRemoveNodes(sParams As Variant[])

  Try Main.hZWave.RemoveNodes()
  If Error Then
    Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when removing zwave nodes"))
    hXMLRPC.SetReply(False)
  Else
    hXMLRPC.SetReply(True)
  Endif

End

Private Sub ZWaveCreateNode(sParams As Variant[])

  If sParams.Count = 7 Then
    Try Main.hZWave.CreateNode(sParams[0], sParams[1], sParams[2], sParams[3], sParams[4], sParams[5], sParams[6])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when creating a zwave node!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ZWaveSetIds(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hZWave.OZW_SetIds(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when setting zwave ids!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ZWaveSetValue(sParams As Variant[])

  If sParams.Count = 5 Then
    Try Main.hZWave.OZW_SetValue(sParams[0], sParams[1], sParams[2], sParams[3], sParams[4])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when handling zwave set value!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub CULSimulate(sParams As Variant[])

  If sParams.Count = 1 Then
    If Main.hCUL Then Try Main.hCUL.Simulate(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when injecting CUL packet!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub CULqueuecommand(sParams As Variant[])

  If sParams.Count = 1 Then
    If Main.hCUL Then Try Main.hCUL.QueueCommand(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when queueing CUL command!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub PLCBUSTXcommand(sParams As Variant[])

  If sParams.Count = 4 Then
    If Main.hPLCBUS Then Try Main.hPLCBUS.PLCBUSTXCommand(sParams[0], sParams[1], sParams[2], sParams[3])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when queueing PLCBUS command!"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub ThermostatListScenarii(sParams As Variant[])

  Dim rResultScenarii As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer

  Try rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii")
  If rResultScenarii Then
    For Each rResultScenarii
    iCnt = iCnt + 1
      sString[iCnt] = rResultScenarii!id & ";;" & rResultScenarii!name & ";;" & rResultScenarii!description
      sList.Add(rResultScenarii!name, sString[iCnt], XmlRpc.xString)
    Next
    hXMLRPC.SetReply(sList)
  Endif

End

Private Sub ThermostatGetScenario(sParams As Variant[])

  Dim rResultScenarii, rResultHeatings As Result
  Dim sString As New Collection
  Dim sList As New RpcStruct
  Dim iCnt As Integer
  Dim sCurrTemp, sReqTemp As String
  Dim fTemp As Float

  Try rResultScenarii = Main.hDB.Exec("SELECT * FROM thermostat_scenarii where name=&1", Main.GlobalVar["Thermostat_Mode"])
  If rResultScenarii.Count > 0 Then
    iCnt = 1
    sString[iCnt] = rResultScenarii!id & ";;" & rResultScenarii!name & ";;" & rResultScenarii!description
    sList.Add(rResultScenarii!name, sString[iCnt], XmlRpc.xString)

    rResultHeatings = Main.hDB.Exec("SELECT * FROM thermostat_schedule, thermostat_heating where heating=id and scenario=&1 ORDER BY name", rResultScenarii!id)
    For Each rResultHeatings
      Inc iCnt
      sCurrTemp = Devices.GetCurrentValueForDevice(rResultHeatings!sensor, 1)
      fTemp = Thermostat.GetDerogateHeating(rResultHeatings!id)
      If fTemp = Thermostat.NO_TEMP Then fTemp = Thermostat.GetRequestedTempForHeating(rResultHeatings!scenario, rResultHeatings!id)
      sReqTemp = fTemp
      sString[iCnt] = rResultHeatings!id & ";;" & rResultHeatings!name & ";;" & sCurrTemp & ";;" & sReqTemp
      sList.Add(rResultHeatings!name, sString[iCnt], XmlRpc.xString)
    Next
  Endif
  hXMLRPC.SetReply(sList)

End

Private Sub ThermostatSetScenario(sParams As Variant[])

  ' param0 must be the scenario name
  If sParams.Count = 1 Then
    Try Main.SetGlobalVar("Thermostat_Mode", sParams[0])
    Thermostat.DeleteAllDerogateHeating()
    hXMLRPC.SetReply(True)
  Else
    hXMLRPC.SetReply(False)
  Endif

End

' param 0 : scenario id
' param 1 : heating id
' param 2 : '+' or '-'
Private Sub ThermostatDerogateHeating(sParams As Variant[])

  Dim fNewVal, fVal, fDerVal As Float
  Dim scenarioId, heatingId As Integer

  If sParams.Count = 3 Then
    scenarioId = CInt(sParams[0])
    heatingId = CInt(sParams[1])
    fVal = Thermostat.GetRequestedTempForHeating(scenarioId, heatingId)
    fDerVal = Thermostat.GetDerogateHeating(heatingId)
    If fDerVal <> Thermostat.NO_TEMP Then
      fval = fderval
    Endif
    If sParams[2] = "+" Then
      If fDerVal = Thermostat.NO_TEMP Then
        fNewVal = Thermostat.GetNextRequestedTempForHeating(scenarioId, heatingId)
        If fNewVal <> Thermostat.NO_TEMP Then
          If fNewVal < fval Then
            fNewVal = fval + 0.5
          Endif
        Else
          fNewVal = fval + 0.5
        Endif
      Else
        fNewVal = fval + 0.5
      Endif
    Else
      If fDerVal = Thermostat.NO_TEMP Then
        fNewVal = Thermostat.GetNextRequestedTempForHeating(scenarioId, heatingId)
        If fNewVal <> Thermostat.NO_TEMP Then
          If fNewVal > fval Then
            fNewVal = fval - 0.5
          Endif
        Else
          fNewVal = fval - 0.5
        Endif
      Else
        fNewVal = fval - 0.5
      Endif
    Endif
    Thermostat.SetDerogateHeating(scenarioId, heatingId, fNewVal)
    hXMLRPC.SetReply(True)
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxSetVolumePlayer(sParams As Variant[])

  If sParams.Count = 2 Then
    If Val(sParams[1]) >= 0 Or If Val(sParams[1]) <= 100 Then
      Try Main.hSqueezeServer.SetVolumePlayer(sParams[0], sParams[1])
      If Error Then
        Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when changing volume"))
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
    Else
      hXMLRPC.SetReply(False)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxGetVolumePlayer(sParams As Variant[])

  Dim sVolume As String = "0"
  If sParams.Count = 1 Then
    Try sVolume = Main.hSqueezeServer.GetVolumePlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when prev number player"))
      hXMLRPC.SetReply(sVolume)
    Else
      hXMLRPC.SetReply(sVolume)
    Endif
  Else
    hXMLRPC.SetReply(sVolume)
  Endif

End

Private Sub SqueezeboxStopPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.hSqueezeServer.StopPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running stop player"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxPlayPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.hSqueezeServer.PlayPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running play player"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxNextNumberPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.hSqueezeServer.NextNumberPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running next number player"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxPrevNumberPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.hSqueezeServer.PrevNumberPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running prev number player"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxCurrentTitlePlayer(sParams As Variant[])

  Dim sCurrentTitle As String = "No title"
  If sParams.Count = 1 Then
    Try sCurrentTitle = Main.hSqueezeServer.GetCurrentTitle(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running current title player"))
      hXMLRPC.SetReply(sCurrentTitle)
    Else
      hXMLRPC.SetReply(sCurrentTitle)
    Endif
  Else
    hXMLRPC.SetReply(sCurrentTitle)
  Endif

End

Private Sub SqueezeboxModePlayer(sParams As Variant[])

  Dim sStatus As String = "Unknown status"
  If sParams.Count = 1 Then
    Try sStatus = Main.hSqueezeServer.GetModePlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running mode player"))
      hXMLRPC.SetReply(sStatus)
    Else
      hXMLRPC.SetReply(sStatus)
    Endif
  Else
    hXMLRPC.SetReply(sStatus)
  Endif

End

Private Sub SqueezeboxPlayerId(sParams As Variant[])

  Dim sId As String = "Unknown id"
  If sParams.Count = 1 Then
    Try sId = Main.hSqueezeServer.GetPlayerId(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running get player id"))
      hXMLRPC.SetReply(sId)
    Else
      hXMLRPC.SetReply(sId)
    Endif
  Else
    hXMLRPC.SetReply(sId)
  Endif

End

Private Sub SqueezeboxPlayerName(sParams As Variant[])

  Dim sName As String = "Unknown name"
  If sParams.Count = 1 Then
    Try sName = Main.hSqueezeServer.GetPlayerName(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running get player name"))
      hXMLRPC.SetReply(sName)
    Else
      hXMLRPC.SetReply(sName)
    Endif
  Else
    hXMLRPC.SetReply(sName)
  Endif

End

Private Sub SqueezeboxIsPlayer(sParams As Variant[])

  Dim sStatus As String = "Unknown status"
  If sParams.Count = 1 Then
    Try sStatus = Main.hSqueezeServer.GetIsPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running is player command"))
      hXMLRPC.SetReply(sStatus)
    Else
      hXMLRPC.SetReply(sStatus)
    Endif
  Else
    hXMLRPC.SetReply(sStatus)
  Endif

End

Public Sub SqueezeboxGetAlbums()

  Dim aAlbums As New RpcArray
  Dim asAlbums As New String[]
  Dim s As String
  Try asAlbums = Main.hSqueezeServer.GetAlbums()
  If Error Then
    Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running get albums command"))
    'hXMLRPC.SetReply(aAlbums)
  Else
    For Each s In asAlbums
      aAlbums.Add(s, XmlRpc.xString)
    Next
    hXMLRPC.SetReply(aAlbums)
  Endif

End

Public Sub SqueezeboxClearPlaylistPlayer(sParams As Variant[])

  If sParams.Count = 1 Then
    Try Main.hSqueezeServer.ClearPlaylistPlayer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running clear playlist player"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Public Sub SqueezeboxAddAlbumToPlaylistPlayer(sParams As Variant[])

  If sParams.Count = 2 Then
    Try Main.hSqueezeServer.AddAlbumToPlaylistPlayer(sParams[0], sParams[1])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running add album to playlist player"))
      hXMLRPC.SetReply(False)
    Else
      hXMLRPC.SetReply(True)
    Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub SqueezeboxGetCurrentArtistPlayer(sParams As Variant[])

  Dim sName As String = "Unknown artist"

  If sParams.Count = 1 Then
    Try sName = Main.hSqueezeServer.GetCurrentArtist(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running get player name"))
      hXMLRPC.SetReply(sName)
    Else
      hXMLRPC.SetReply(sName)
    Endif
  Else
    hXMLRPC.SetReply(sName)
  Endif

End

Private Sub SqueezeboxGetIsPlayerConnectedToServer(sParams As Variant[])

  Dim bConnected As Boolean

  If sParams.Count = 1 Then
    Try bConnected = Main.hSqueezeServer.PlayerConnectedToServer(sParams[0])
    If Error Then
      Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' at '" & Error.Where & "' when running get player name"))
      hXMLRPC.SetReply(bConnected)
    Else
      hXMLRPC.SetReply(bConnected)
    Endif
  Else
    hXMLRPC.SetReply(bConnected)
  Endif

End

Public Sub hXMLRPC_RemoteCall(sName As String, sData As Variant[])

  Dim vValue As Variant
  Dim aArray As New RpcArray
  Dim sParam As String
  Dim iParam As Integer

  If bXMLRPCDebug Then
    Main.WriteDebugLog(("[XMLRPC] Got a RemoteCall for method '" & sName & "'"))
    For Each sParam In sData
      Main.WriteDebugLog(("[XMLRPC] Param[" & iParam & "] = '" & sParam & "'"))
      Inc iParam
    Next
  Endif

  Select Case sName
    Case "system.program_uptime"
      hXMLRPC.SetReply(Main.GlobalVar["Program_Uptime"])
    Case "system.program_version"
      hXMLRPC.SetReply(Main.sProgramVersion)
    Case "system.pid"
      hXMLRPC.SetReply(Application.Id)
    Case "system.hostname"
      hXMLRPC.SetReply(System.Host)
    Case "api.version"
      hXMLRPC.SetReply(APIVersion)
    Case "mode.get_housemode"
      hXMLRPC.SetReply(Main.GlobalVar["House_Mode"])
    Case "mode.get_mutemode"
      hXMLRPC.SetReply(Main.GlobalVar["Mute"])
    Case "globalvar.list"
      For Each vValue In Main.GlobalVar
        aArray.Add(Main.GlobalVar.Key, XmlRpc.xString)
      Next
      hXMLRPC.SetReply(aArray)
    Case "globalvar.get"
      GetGlobalVars()
    Case "globalvar.set"
      SetGlobalVar(sData)
    Case "globalvar.save"
      SaveGlobalVars()
    Case "globalvar.del"
      DelGlobalVar(sData)
    Case "data.sunmoon"
      aArray.Add(Main.GlobalVar["Sunrise"], XmlRpc.xString)
      aArray.Add(Main.GlobalVar["Sunset"], XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    Case "data.newmessages"
      aArray.Add(Main.iNewMails, XmlRpc.xString)
      aArray.Add(Main.iNewCalls, XmlRpc.xString)
      aArray.Add(Main.iNewVoicemails, XmlRpc.xString)
      hXMLRPC.SetReply(aArray)
    Case "device.list"
      ReturnDeviceList()
    Case "device.listswitch"
      ReturnDeviceListDimSwitch("switchable")
    Case "device.listdim"
      ReturnDeviceListDimSwitch("dimable")
    Case "module.restart"
      ModuleRestart(sData)
    Case "send.email"
      SendEmail(sData)
    Case "send.tweet"
      SendTweet(sData)
    Case "send.sms"
      SendSMS(sData)
    Case "set.housemode"
      SetHouseMode(sData)
    Case "set.mutemode"
      SetMuteMode(sData)
    Case "set.alarmpin"
      SetAlarmPin(sData)
    Case "set.alarmmode"
      SetAlarmMode(sData)
    Case "device.setdevice"
      DeviceSetDevice(sData)
    Case "device.getstate"
      DeviceGetState(sData)
    Case "play.sound"
      PlaySound(sData)
    Case "voicetext.speak"
      VoiceTextSpeak(sData)
    Case "pachube.list"
      hXMLRPC.SetReply(Pachube.CreatePachubeData())
    Case "serverstats.updategraphs"
      ServerStatsUpdateGraphs(sData)
    Case "rrdtool.listgraphs"
      RRDToolListGraphs(sData)
    Case "rrdtool.updategraphs"
      RRDToolUpdateGraphs(sData)
    Case "rrdtool.createrrds"
      RRDToolCreateRRDs(sData)
    Case "display.ledmessage"
      DisplayLEDMessage(sData)
    Case "av.setcontrol"
      SetAVControl(sData)
    Case "av.getcontrol"
      GetAVControl(sData)
    Case "zwave.removenodes"
      ZWaveRemoveNodes(sData)
    Case "zwave.createnode"
      ZWaveCreateNode(sData)
    Case "zwave.setids"
      ZWaveSetIds(sData)
    Case "zwave.setvalue"
      ZWaveSetValue(sData)
    Case "zwave.allqueried"
      Main.hZWave.OZW_AllQueried()
      hXMLRPC.SetReply(True)
    Case "cmdr.culsimulate"
      CULSimulate(sData)
    Case "cmdr.culqueuecommand"
      CULqueuecommand(sData)
    Case "cmdr.plcbustxcommand"
      PLCBUSTXcommand(sData)
    Case "thermostat.listscenario"
      ThermostatListScenarii(sData)
    Case "thermostat.getscenario"
      ThermostatGetScenario(sData)
    Case "thermostat.setscenario"
      ThermostatSetScenario(sData)
    Case "thermostat.derogateheating"
      ThermostatDerogateHeating(sData)
    Case "events.runactions"
      EventsRunActions(sData)
    Case "events.runaction"
      EventsRunAction(sData)
    Case "calendar.setplanning"
      Calendar.SetPlanning(sData)
    Case "calendar.getplanning"
      Calendar.GetPlanning()
    Case "squeezebox.setvolumeplayer"
      SqueezeboxSetVolumePlayer(sData)
    Case "squeezebox.getvolumeplayer"
      SqueezeboxGetVolumePlayer(sData)
    Case "squeezebox.stopplayer"
      SqueezeboxStopPlayer(sData)
    Case "squeezebox.playplayer"
      SqueezeboxPlayPlayer(sData)
    Case "squeezebox.nextnumberplayer"
      SqueezeboxNextNumberPlayer(sData)
    Case "squeezebox.prevnumberplayer"
      SqueezeboxPrevNumberPlayer(sData)
    Case "squeezebox.getcurrentnumberplayer"
      SqueezeboxCurrentTitlePlayer(sData)
    Case "squeezebox.getmodeplayer"
      SqueezeboxModePlayer(sData)
    Case "squeezebox.getplayerid"
      SqueezeboxPlayerId(sData)
    Case "squeezebox.getplayername"
      SqueezeboxPlayerName(sData)
    Case "squeezebox.getisplayer"
      SqueezeboxIsPlayer(sData)
    Case "squeezebox.getalbums"
      SqueezeboxGetAlbums()
    Case "squeezebox.clearplaylistplayer"
      SqueezeboxClearPlaylistPlayer(sData)
    Case "squeezebox.addalbumtoplaylistplayer"
      SqueezeboxAddAlbumToPlaylistPlayer(sData)
    Case "squeezebox.getcurrentartistplayer"
      SqueezeboxGetCurrentArtistPlayer(sData)
    Case "squeezebox.getplayerisconnectedtoserver"
      SqueezeboxGetIsPlayerConnectedToServer(sData)
    Default
      Return
  End Select

End

Private Function HTTPPort_Read() As Integer

  Return iHTTPPort

End

Private Sub HTTPPort_Write(Value As Integer)

  iHTTPPort = Value

End

Private Function MaxConn_Read() As Integer

  Return iMaxConn

End

Private Sub MaxConn_Write(Value As Integer)

  iMaxConn = Value

End

Private Function XMLRPCDebug_Read() As Boolean

  Return bXMLRPCDebug

End

Private Sub XMLRPCDebug_Write(Value As Boolean)

  bXMLRPCDebug = Value

End

Private Sub DelGlobalVar(sParams As Variant[])

  If sParams.Count = 1 Then
      Try Main.DelGlobalVar(sParams[0])
      If Error Then
        Main.WriteDebugLog(("XMLRPC Error: '" & Error.Text & "' when deleting globalvar!"))
        hXMLRPC.SetReply(False)
      Else
        hXMLRPC.SetReply(True)
      Endif
  Else
    hXMLRPC.SetReply(False)
  Endif

End

Private Sub PrepareValue(sText As String) As Variant

  If sText == "true" Then
    Return True
  Else If sText == "false" Then
    Return False
  Else
    Return sText
  Endif

End
