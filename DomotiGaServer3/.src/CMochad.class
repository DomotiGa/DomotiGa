' Gambas class file

' Description:
' Mochad.class
' Provide support for Mochad.

' Development Status:
' Just started developing this one.

' Links:
' http://sourceforge.net/apps/mediawiki/mochad/index.php?title=Main_Page

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by and Copyright(C) 2012 Roland van Hulzen.
' This class only support standard X10 but the mochad interface can do much more.

' Read file called COPYING for license details.

Property TCPHost As String
Property TCPPort As String
Property GlobalX10 As Boolean
Property MochadDebug As Boolean

Private sTCPHost As String
Private iTCPPort As String
Private bMochadDebug As Boolean
Private bGlobalX10 As Boolean

Public hMochad As New Socket

Public sBuffer As String
Public tMochadConnect As Timer
Private iConnectRetry As Integer = 0 ' retries
Private iConnectDelay As Integer = 60000 ' 1 minute

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hMochad.Close

  ' get a new one
  hMochad = New Socket As "Mochad"
  hMochad.Connect(sTCPHost, iTCPPort)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Mochad Error: ") & Error.Text & (" at ") & Error.Where)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Mochad_Ready()

  Main.WriteLog(("Mochad TCP socket connected."))

  ' initialise the ASCII communication
  Try Write #hMochad, "ASCI", 4

  ' define timer for reconnect
  tMochadConnect = New Timer As "MochadConnect"
  tMochadConnect.Delay = iConnectRetry
  tMochadConnect.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Mochad_Closed()

  Main.WriteLog(("Mochad Error: TCP socket closed."))
  If iConnectRetry < 6 Then
    Main.WriteDebugLog(("[Mochad] Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", ".")))
    tMochadConnect.Start
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tMochadConnect_Timer()

  If Not Connect() Then
    Inc iConnectRetry
    iConnectDelay *= iConnectRetry
    tMochadConnect.Delay = iConnectDelay
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try tMochadConnect.Stop
  Try hMochad.Close
  Main.WriteLog(("Mochad TCP socket close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Mochad Error: ") & Error.Text & (" at ") & Error.Where)
  Return False

End

Public Sub Mochad_Found()

  Main.WriteLog(("Mochad IP address resolved."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Mochad_Error()

  ' handle error
  Select Case hMochad.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(("Mochad: The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(("Mochad: Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(("Mochad: Unable to connect to interface. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(("Mochad: Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(("Mochad: Error writing data."))
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send generic command via tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim sCmd As String

  sCmd = "PL " & Left(sAddress, 1) & Val(Right(sAddress, 2)) & " " & Upper(sValue) 
  If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Send command: ") & sCmd)
  Try Write #hMochad, sCmd & Chr$(10), Len(sCmd) + 1
  If Error Then Main.WriteDebugLog(("[Mochad] Error writing data to the TCP port! -> ") & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Mochad_Read()

  Dim sData As String

  Try Read #hMochad, sData, 1
  If Error Then Main.WriteDebugLog(("[Mochad] Error reading data from the TCP port! -> ") & Error.Text)
  If sData = Chr(10) Then ' buffer until linefeed then parse
    ParseData(sBuffer)
  Else
    sBuffer &= sData
  Endif

End

Private Sub ParseData(sStr As String)

  Dim sAddress, sType, sValue, sTamper, sBatt As String
  Dim aData, aType, aCmd As String[]
  Dim iDeviceId As Integer

  sBuffer = Null
  If InStr(sStr, "Raw data received:") = 0 Then
    If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] < ") & sStr)
    Select Mid(sStr, 19, 2)
      Case "PL"
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: All units off
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: All lights On
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: On
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Off
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Dim <Dims>
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Bright <Dims>
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Ext code 1 Data: <Xdims> Command: 31
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: All lights off 
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Status On
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Status off
        ' mm/dd hh:mm:ss Rx PL House: <H> Func: Status request
        aData = Scan(sStr, "* HouseUnit: * Func: *")
        If aData.Count = 3 Then
          sAddress = Left(aData[1], 1) & Format$(Right(aData[1], 1), "00")
          sValue = aData[2]
          Select sValue
            Case "On", "Off"
              If Main.bMochadDebug Then
                Main.WriteDebugLog("[Mochad] Address = " & sAddress)
                Main.WriteDebugLog("[Mochad] Command = " & sValue)
                Main.WriteDebugLog("[Mochad] Type = X10")
              Endif
              UpdateX10(sAddress, sValue)
            Case Else
              If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Unsupported command: ") & aData[2])
              Return
          End Select
        Else
          If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Invalid data: ") & sStr)
        Endif

      Case "RF"
        ' mm/dd hh:mm:ss Rx RF House: <H><U> Func: On
        ' mm/dd hh:mm:ss Rx RF House: <H><U> Func: Off
        ' mm/dd hh:mm:ss Rx RF House: <H><U> Func: Dim
        ' mm/dd hh:mm:ss Rx RF House: <H><U> Func: Bright

        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Arm_Home_min_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Arm_Away_min_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Arm_Home_max_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Arm_Away_max_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Disarm_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Panic_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Lights_On_SH624
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr8> Func: Lights_Off_SH624

        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Motion_alert_MS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Motion_normal_MS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_alert_min_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_normal_min_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_alert_max_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_normal_max_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_alert_min_low_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_normal_min_low_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_alert_max_low_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Contact_normal_max_low_DS10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Arm_KR10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Disarm_KR10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Lights_On_KR10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Lights_Off_KR10A
        ' mm/dd hh:mm:ss Rx RFSEC Addr: <Secaddr17> Func: Panic_KR10A
        aData = Scan(sStr, "* Rx RFSEC Addr: * Func: *")
        If aData.Count = 3 Then
          sAddress = "x10sec 0x" & Lower(Replace(aData[1], ":", ""))
          If aData[2] = "(null)" Then Return
          aType = Scan(aData[2], "*_*")
          If aType.Count = 2 Then
          Select aType[0]
            Case "Motion"
              sType = "MOTION"
              aCmd = Scan(aType[1], "*_*")
              If aCmd.Count = 2 Then
                sValue = IIf(aCmd[0] = "alert", "Motion", "No Motion")
              Endif
            Case "Contact"
              sType = "DWS"
              aCmd = Scan(aType[1], "*_*_*")
              If aCmd.Count = 3 Then
                sValue = IIf(aCmd[0] = "alert", "Alert", "Normal")
                sTamper = IIf(aCmd[1] = "min", "Secure", "Tamper")
                sBatt = "Low"
              Else
                aCmd = Scan(aType[1], "*_*")
                If aCmd.Count = 2 Then
                  sValue = IIf(aCmd[0] = "alert", "Alert", "Normal")
                  sTamper = IIf(aCmd[1] = "min", "Secure", "Tamper")
                  sBatt = "Ok"
                Endif
              Endif
            Case "Arm"
              sType = "REMOTE"
              aCmd = Scan(aType[1], "*_*_*")
              If aCmd.Count = 3 Then
                sValue = aCmd[0]
                sTamper = IIf(aCmd[1] = "min", "Secure", "Tamper")
              Else
                sValue = aType[0]
              Endif
            Case "Disarm", "Panic"
              sType = "REMOTE"
              sValue = aType[0]
            Case "Lights"
              sType = "REMOTE"
              aCmd = Scan(aType[1], "*_*")
              If aCmd.Count = 2 Then
                sValue = "Lights " & aCmd[0]
              Endif
            Case Else
              If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Unknown device type: ") & aData[1])
          End Select
        Else
          If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Invalid command data: ") & aData[2])
        Endif
      Else
        If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Invalid data: ") & sStr)
      Endif
      If Main.bMochadDebug Then
        Main.WriteDebugLog("[Mochad] Address = " & sAddress)
        Main.WriteDebugLog("[Mochad] Command = " & sValue)
        Main.WriteDebugLog("[Mochad] Type = " & sType)
        Main.WriteDebugLog("[Mochad] Battery level = " & sBatt)
        Main.WriteDebugLog("[Mochad] Tamper = " & sTamper)
      Endif
      iDeviceId = Devices.Find(sAddress, Devices.FindInterface("Mochad Interface"), sType)
      ' update value & battery status
      If iDeviceId Then
        Devices.ValueUpdate(iDeviceId, sValue, sTamper, "", "")
        If Len(sBatt) Then Devices.Battery(iDeviceId, sBatt)
      Endif
    End Select
  Endif

Catch
   Main.WriteDebugLog(("[Mochad] Error while Parsing: ") & Error.Text & (" at ") & Error.Where)

End

Private Sub UpdateX10(sCode As String, sCommand As String)

  Dim iDeviceId As Integer

  If Main.bMochadDebug Then Main.WriteDebugLog(("[Mochad] Received command '") & sCommand & ("' for device '") & sCode & "'")

  If bGlobalX10 Then
    iDeviceId = Devices.FindAll(sCode, 9999, "X10")
  Else
    iDeviceId = Devices.Find(sCode, Devices.FindInterface("Mochad Interface"), "X10")
  Endif
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, sCommand, "", "", "")

End

' implement properties
Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function TCPPort_Read() As String

  Return iTCPPort

End

Private Sub TCPPort_Write(Value As String)

  iTCPPort = Value

End

Private Function MochadDebug_Read() As Boolean

  Return bMochadDebug

End

Private Sub MochadDebug_Write(Value As Boolean)

  bMochadDebug = Value

End

Private Function GlobalX10_Read() As Boolean

  Return bGlobalX10

End

Private Sub GlobalX10_Write(Value As Boolean)

  bGlobalX10 = Value

End
