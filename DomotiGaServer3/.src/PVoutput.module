' Gambas module file

' Description:
' PVoutput.module
' Support for PVoutput related functions.

' Development Status:
' Development just started.

' Links:
' http://www.pvoutput.org/
' http://www.pvoutput.org/help.html#api-spec

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Pieter Blom in 2013.
' Added temperature and power usage support by Ron Klinkien.

' Read file called COPYING for license details.

Public hPost As New HttpClient As "hPost"
Public tPVoutput As Timer
Private sDownloadBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for PVoutput
  tPVoutput = New Timer As "tPVoutput"
  tPVoutput.Delay = Main.iPVoutputPushTime * 1000 * 60 ' multiply for minutes
  tPVoutput.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tPVoutput_Timer()

  UploadPVoutputData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' create url string and upload it to the service
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UploadPVoutputData()

  Dim sContent As String

  sDownloadBuffer = ""

  ' if we are already uploading return
  If hPost.Status > 0 Then
    Main.WriteLog(("I'm already uploading data to PVoutput, skipping."))
    Return
  Endif

  ' create string
  sContent = CreatePVoutputData()

  ' use httpclient to post data to service
  hPost.URL = "http://pvoutput.org/service/r2/addstatus.jsp?" & sContent
  hPost.TimeOut = 10
  hPost.Async = True
  hPost.Get()

  If Main.bPVoutputDebug Then Main.WriteDebugLog("[PVoutput] " & hPost.URL)

End

Public Sub CreatePVoutputData() As String

  Dim sUrl As String = "key=" & Main.sPVoutputApi & "&sid=" & Main.sPVoutputId & "&d=" & Format$(Now, "yyyymmdd") & "&t=" & Format$(Now, "hh:nn")

  If Main.iPVoutputDeviceId Then sUrl &= "&v2=" & Devices.GetCurrentValueForDevice(Main.iPVoutputDeviceId, Main.sPVoutputDeviceValue)
  If Main.iPVoutputTempDeviceId Then sUrl &= "&v5=" & Devices.GetCurrentValueForDevice(Main.iPVoutputTempDeviceId, Main.sPVoutputTempDeviceValue)
  If Main.iPVoutputUsageDeviceId Then sUrl &= "&v4=" & Devices.GetCurrentValueForDevice(Main.iPVoutputUsageDeviceId, Main.sPVoutputUsageDeviceValue)

  Return sUrl

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' catch error
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Error()

  Main.WriteDebugLog(("[PVoutput] PVoutput data post error."))

End

Public Sub hPost_Read()

  Dim sBuffer As String

  Read #Last, sBuffer, Lof(Last)
  sDownloadBuffer &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check http return code
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPost_Finished()

  Dim iCount As Integer

  ' select on http result code and display message
  Select hPost.Code
    Case 200
      Main.WriteLog(("Uploaded data to PVoutput. Response from server: ") & sDownloadBuffer)
    Case 401
      Main.WriteLog(("Error authenticating while uploading data to PVoutput!"))
    Case 404
      Main.WriteLog(("Error page not found while uploading data to PVoutput!"))
    Case Else
      Main.WriteLog(("Unknown error occured while uploading data to PVoutput! Response from server: ") & sDownloadBuffer)
  End Select

  ' if debug is on print all http headers
  If Not Main.bPVoutputDebug Then Return
  For iCount = 0 To hPost.Headers.Count - 1
    Main.WriteDebugLog("[PVoutput] " & Left(hPost.Headers[iCount], Len(hPost.Headers[iCount])))
  Next

End
