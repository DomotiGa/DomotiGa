' Gambas class file

' Description:
' Ncid.class
' Provide support for Ncid phonecall monitoring. (via call log port)

' Development Status:
' Just started to build this one.
' Incoming/outgoing call logging implemented.
' Tested with a Ncid 7170 Annex A running Firmware upto 58.04.76

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Property TCPHost As String
Property TCPPort As Integer
Property NcidDebug As Boolean

Private sTCPHost As String
Private iTCPPort As Integer
Private bNcidDebug As Boolean
Public tNcidConnect As Timer

Private iConnectRetry As Integer = 0 ' retries
Private iConnectDelay As Integer = 60000 ' 1 minute

Private hNcid As New Socket
Private sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tNcidConnect_Timer()

  If Not Connect() Then
    Inc iConnectRetry
    iConnectDelay *= iConnectRetry
    tNcidConnect.Delay = iConnectDelay
  Endif

End
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hNcid.Close

  ' get a new one
  hNcid = New Socket As "Ncid"
  hNcid.Connect(sTCPHost, iTCPPort)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Ncid Error: ") & ERROR.Text)
  Return False

End

Public Sub Ncid_Ready()

  Main.WriteLog(("Ncid TCP socket connected."))
   ' define timer for Ncid reconnect
  tNcidConnect = New Timer As "tNcidConnect"
  tNcidConnect.Delay = iConnectRetry
  tNcidConnect.Stop

End

Public Sub Ncid_Closed()

  Main.WriteLog(("ERROR: Ncid TCP socket connection is lost."))
  If iConnectRetry < 6 Then
    Main.WriteDebugLog(("[Ncid] Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", ".")))
    tNcidConnect.Start
  Endif


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hNcid.Close
  Try tNcidConnect.Stop
  Main.WriteLog(("Ncid TCP socket port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Ncid Error: ") & ERROR.Text)
  Return False

End

Public Sub Ncid_Read()

  Dim sData As String

  sData = Read #hNcid, 1
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  End If

End

Private Sub ParseLine(sStr As String)

  Dim aScan As String[]
  Dim rResult As Result
  Dim sName As String

  If Main.bNcidDebug Then Main.WriteDebugLog("[Ncid] " & sStr)
  ' CID: *DATE*12102011*TIME*1326*LINE*-*NMBR*0612954340*MESG*NONE*NAME*NO NAME*
  If InStr(sStr, "CID:") Then
    sStr = Replace(sStr, "*", ";")
    aScan = Scan(sStr, "CID: ;DATE;*;TIME;*;LINE;*;NMBR;*;MESG;*;NAME;*;")
    If aScan.Count = 6 Then
      sName = CallerID.ReturnCallerID(aScan[3])
      Main.WriteLog("Incoming phone call from " & IIf(aScan[3], aScan[3] & " (" & sName & ")", "0000000000") & ".")
      Main.SetGlobalVar("PhoneCall_Incoming", aScan[3] & " (" & sName & ") at " & Format(Now(), "hh:nn:ss dd-mm-yyyy"))
      If Main.bNcidDebug Then Main.WriteDebugLog(("[Ncid] Incoming call [id=") & aScan[0] & aScan[1] & ("] from ") & aScan[3] & (" on line ") & aScan[2] & " (" & aScan[5] & ")")
      ' write data to cdr table
      Main.hDB.Begin()
      rResult = Main.hDB.Create("cdr")
      rResult!calldate = Now()
      rResult!uniqueid = aScan[0] & aScan[1]
      rResult!clid = IIf(aScan[3], aScan[3], "0000000000")
      rResult!src = IIf(aScan[3], aScan[3], "0000000000")
      rResult!dcontext = "incoming"
      rResult!channel = aScan[2]
      rResult!disposition = "NO ANSWER"
      rResult.Update()
      Main.hDB.Commit()
      Main.RefreshPhoneCallList()
    Else
      Main.WriteDebugLog(("[Ncid] Error couldn't parse: ") & sStr)
    End If
  End If

End

Public Sub Ncid_Error()

  Dim sString As String = "Ncid: "

  ' handle error
  Select Case hNcid.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  End Select

End

' implement properties
Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function TCPPort_Read() As Integer

  Return iTCPPort

End

Private Sub TCPPort_Write(Value As Integer)

  iTCPPort = Value

End

Private Function NcidDebug_Read() As Boolean

  Return bNcidDebug

End

Private Sub NcidDebug_Write(Value As Boolean)

  bNcidDebug = Value

End
