' Gambas class file

' Description:
' Ncid.class
' Provide support for Ncid phonecall monitoring. (via call log port)

' Development Status:
' Just started to build this one.
' Incoming/outgoing call logging implemented.
' Tested with a Ncid 7170 Annex A running Firmware upto 58.04.76

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Ncid"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "Ncid API"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Ncid] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bNcidDebug As Boolean

Public tNcidConnect As Timer

Private iConnectRetry As Integer = 0 ' retries
Private iConnectDelay As Integer = 60000 ' 1 minute

Private hNcid As New Socket
Private sBuffer As String


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $bNcidDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tNcidConnect_Timer()

  If Not Connect(False) Then
    Inc iConnectRetry
    iConnectDelay *= iConnectRetry
    tNcidConnect.Delay = iConnectDelay
  Endif

End
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect(Optional bFirstStart As Boolean = True) As Boolean

  ' try to close the connection
  Try hNcid.Close

  ' get a new one
  hNcid = New Socket As "Ncid"
  hNcid.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  If bFirstStart Then Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to Server " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

Public Sub Ncid_Ready()

   ' define timer for Ncid reconnect
  tNcidConnect = New Timer As "tNcidConnect"
  tNcidConnect.Delay = iConnectRetry
  tNcidConnect.Stop

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

Public Sub Ncid_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket connection is lost.")
  If iConnectRetry < 6 Then
    Main.WriteDebugLog(LogLabel & "Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", "."))
    tNcidConnect.Start
  Endif


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hNcid.Close
  Try tNcidConnect.Stop

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub Ncid_Read()

  Dim sData As String

  sData = Read #hNcid, 1
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Private Sub ParseLine(sStr As String)

  Dim aScan As String[]
  Dim rResult As Result
  Dim sName As String

  If $bNcidDebug Then Main.WriteDebugLog(LogLabel & sStr)
  ' CID: *DATE*12102011*TIME*1326*LINE*-*NMBR*0612954340*MESG*NONE*NAME*NO NAME*
  If InStr(sStr, "CID:") Then
    sStr = Replace(sStr, "*", ";")
    aScan = Scan(sStr, "CID: ;DATE;*;TIME;*;LINE;*;NMBR;*;MESG;*;NAME;*;")
    If aScan.Count = 6 Then
      sName = CallerID.ReturnCallerID(aScan[3])
      Main.WriteLog(LogLabel & "Incoming phone call from " & IIf(aScan[3], aScan[3] & " (" & sName & ")", "0000000000") & ".")
      Main.SetGlobalVar("PhoneCall_Incoming", aScan[3] & " (" & sName & ") at " & Format(Now(), "hh:nn:ss dd-mm-yyyy"))
      If $bNcidDebug Then Main.WriteDebugLog(LogLabel & "Incoming call [id=" & aScan[0] & aScan[1] & "] from " & aScan[3] & " on line " & aScan[2] & " (" & aScan[5] & ")")
      ' write data to cdr table
      Main.hDB.Begin()
      rResult = Main.hDB.Create("cdr")
      rResult!calldate = Now()
      rResult!uniqueid = aScan[0] & aScan[1]
      rResult!clid = IIf(aScan[3], aScan[3], "0000000000")
      rResult!src = IIf(aScan[3], aScan[3], "0000000000")
      rResult!dcontext = "incoming"
      rResult!channel = aScan[2]
      rResult!disposition = "NO ANSWER"
      rResult.Update()
      Main.hDB.Commit()
      Main.RefreshPhoneCallList()
    Else
      Main.WriteDebugLog(LogLabel & "Error couldn't parse: " & sStr)
    Endif
  Endif

End

Public Sub Ncid_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

