' Gambas class file

' Description:
' CGenericIO.class
' Support for generic two way serial and IP devices using configurable regular expressions (regex) to determine the device identifier and values.

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This code is written by 'thechad' in 2013.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "GenericIO"
Public PluginFriendlyName As String = "GenericIO Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "thecad"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 9

Public KeyName As String
Public LogLabel As String = "[GenericIO] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public hGenericIOSer As New SerialPort
Public hGenericIOTCP As New Socket

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sInterface As String
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean
Private $sGenericIORegex As String
Private $sGenericIODelimiter As String

Private sBuffer As String

Public tReConnect As Timer
Private iReConnectRetry As Integer = 0 ' retries
Private aReConnectDelay As Integer[] = [5000, 10000, 30000, 60000, 300000, 900000, 1800000, 3600000, 7200000, 14400000] ' 5sec, 10sec, 30sec, 1min, 5min, 15min, 1/2hour, 1hour, 2hours, 4hours

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sInterface = cPl.Settings["type"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]
  $sGenericIORegex = cPl.Settings["regex"]
  $sGenericIODelimiter = cPl.Settings["delimiter"]

  InterfaceId = Devices.FindInterface("GenericIO Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ' Define timer for TCP reconnect
    tReConnect = New Timer As "tReConnect"
    tReConnect.Delay = iReConnectRetry
    tReConnect.Stop

    ConnectTCP()

  Else
    Connect()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                        TCP HANDLING
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hGenericIOTCP.Close

  ' get a new one
  hGenericIOTCP = New Socket As "GenericIOTCP"
  hGenericIOTCP.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect - if first start
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 
  IsRunning = False

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GenericIOTCP_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' tcp socket ready
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GenericIOTCP_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

  ' connected so reset retry counter
  tReConnect.Stop
  iReConnectRetry = 0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ReConnect()

  If iReConnectRetry < aReConnectDelay.Max + 1 Then
    Main.WriteLog(LogLabel & "Retry to connect in " & IIf(aReConnectDelay[iReConnectRetry] > 60000, CStr(aReConnectDelay[iReConnectRetry] / 60000) & " minutes.", CStr(aReConnectDelay[iReConnectRetry] / 1000) & " seconds."))
    tReConnect.Delay = aReConnectDelay[iReConnectRetry]
    tReConnect.Start
  Else
    tReConnect.Stop
    Main.WriteLog(LogLabel & "Too many reconnect failures, stopped trying.")
  Endif
  Inc iReConnectRetry

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' peer closed tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GenericIOTCP_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")
  ReConnect()

End

Public Sub GenericIOTCP_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg
  ReConnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tReConnect_Timer()

  ConnectTCP()

End

Public Sub GenericIOTCP_Read()

  Dim sData As String

  If Last.Status <> Net.Connected Then Return
  sData = Read #Last, 1
  If sData = Chr(10) Or sData = Chr(13) Then ' buffer until carriage return or linefeed
    If Len(sBuffer) > 1 Then ParseLine(sBuffer) ' Parse the text
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                       SERIAL PORT HANDLING
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hGenericIOSer.Close

  ' get a new one
  hGenericIOSer = New Serialport As "GenericIOSer"

  With hGenericIOSer
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  Flush #hGenericIOSer  ' Start with a clean buffer

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try tReConnect.Stop
  Try hGenericIOSer.Close
  Try hGenericIOTCP.Close

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub GenericIOSer_Read()

  Dim sData As String

  Try sData = Read #hGenericIOSer, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from serial port! -> " & Error.Text)
  If sData = Chr(10) Or sData = Chr(13) Then ' buffer until carriage return or linefeed
    If Len(sBuffer) > 1 Then ParseLine(sBuffer) ' parse the text
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'                                                PARSE/HANDLE INPUT DATA RECEIVED FROM SERIAL/TCP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sData As String)

  Dim aScan, aValueToUpdate As String[]
  Dim sLine, sAddress, sRegexExpression, sAddressToChange, sValueFields As String
  Dim iDeviceId, iValueToUpdate, iAddressPosition As Integer
  Dim rRegex As Regexp

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Raw Data read '" & sData & "'")
  'If sData = "." Then Return ' A single "." is a heartbeat message sent every few seconds and does not have any action at the moment.
  For Each sLine In Split(sData, "\n")
    sRegexExpression = Replace$($sGenericIORegex, "\\", "\\")  ' Gambas needs the " \ " character in a regex to be doubled to be recognised"
    ' parse each line
    ' parse sensor data using the regex for the interface to get the Address field to change
    rRegex = New Regexp(sLine, sRegexExpression)
    sAddressToChange = rRegex.text
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Data read ('" & sLine & "') with regex ('" & sRegexExpression & "') applied gives AddressToChange of : '" & sAddressToChange & "'")

    ' try to find device with the address from the parsed input data as part of it's address field, and correct interface type.
    iDeviceId = Devices.FindRegExp("|" & sAddressToChange & "|", InterfaceId, Instance, "GenericIO", "\"", "\"")

    If Error Then Main.WriteDebugLog(LogLabel & "Could not find a matching device for incomming address :  Looking for '" & sAddressToChange & "' in DeviceId '" & iDeviceId & "'")
    If iDeviceId Then
      ' if we have found the device, then retrieve the full address field and then work out the index number of the match
      ' this is the value field we need to update. ie. if address we are looking for is "temp" and address field in device is |R1|R2|temp|litres|, the we are updating value field 3 in this device.
      sAddress = Devices.FindAddressForDevice(iDeviceId)
      aScan = Split(sAddress, "|")
      iValueToUpdate = aScan.Find(sAddressToChange)
      iAddressPosition = String.InStr(sLine, sAddressToChange)
      sValueFields = Mid(sLine, iAddressPosition + Len(sAddressToChange))
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating iDeviceId '" & iDeviceId & "' Address '" & sAddressToChange & "' to '" & sValueFields & "'")

      aValueToUpdate = Split(sValueFields, $sGenericIODelimiter)

      Select aValueToUpdate.Count
        Case 1
          Select iValueToUpdate
            Case 1
              Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 2
              Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[0]))
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 3
              Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[0]))
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Case 4
              Devices.ValueUpdate(iDeviceId, 4, Trim(aValueToUpdate[0]))
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value" & iValueToUpdate & " to '" & Trim(aValueToUpdate[0]) & "'")
            Default
              Main.WriteDebugLog(LogLabel & "Unknown value to update :" & iValueToUpdate)
        End Select
        Case 2
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value1:'" & Trim(aValueToUpdate[0]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "'")
        Case 3
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[2]))
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value1:'" & Trim(aValueToUpdate[0]) & "' Value2:" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "'")
        Case 4
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[2]))
          Devices.ValueUpdate(iDeviceId, 4, Trim(aValueToUpdate[3]))
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value1:'" & Trim(aValueToUpdate[1]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "' Value4:'" & Trim(aValueToUpdate[3]) & "'")
        Case 5
          Devices.ValueUpdate(iDeviceId, 1, Trim(aValueToUpdate[0]))
          Devices.ValueUpdate(iDeviceId, 2, Trim(aValueToUpdate[1]))
          Devices.ValueUpdate(iDeviceId, 3, Trim(aValueToUpdate[2]))
          Devices.ValueUpdate(iDeviceId, 4, Trim(aValueToUpdate[3]))
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Value1:'" & Trim(aValueToUpdate[1]) & "' Value2:'" & Trim(aValueToUpdate[1]) & "' Value3:'" & Trim(aValueToUpdate[2]) & "' Value4:'" & Trim(aValueToUpdate[3]) & "'")
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Update Battery:'" & Trim(aValueToUpdate[4]) & "'")
          Devices.Battery(iDeviceId, Trim(aValueToUpdate[4]))
        Default
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown value to update :" & aValueToUpdate.Count)
          Return
      End Select
   Endif

Catch
  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: Parsing data packet: '" & sLine & "' '" & Error.Text & "' at '" & Error.Where & "'")
  
Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module to send a command to serial/TCP interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sRawCmd As String

  ' Ignore sAddress, not used
  sAddress = sAddress

  ' Replace control characters in the string if present with actual values
  sRawCmd = Replace$(sCmd, "\\r", Chr$(13))
  sRawCmd = Replace$(sRawCmd, "\\n", Chr$(10))
  sRawCmd = sRawCmd & "\r\n"

  If $sInterface = "tcp" Then
    ' send the message to the tcp stream
    If $bDebug Then Main.WriteDebugLog(LogLabel & "SendCommand '" & sCmd & "' to " & $sTCPHost & ":" & $iTCPPort & " as '" & sRawCmd & "'")
    Try Write #hGenericIOTCP, sRawCmd, Len(sRawCmd)
    If Error Then Main.WriteDebugLog(LogLabel & "Unable to write to TCP port! -> " & Error.Text)
  Else
    ' send the message to the serial port
    If $bDebug Then Main.WriteDebugLog(LogLabel & "SendCommand '" & sCmd & "' to " & $sSerPort & " as '" & sRawCmd & "'")
    Try Write #hGenericIOSer, sRawCmd, Len(sRawCmd)
    If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the serial port! -> " & Error.Text)
  Endif

End
