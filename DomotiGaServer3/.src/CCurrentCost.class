' Gambas class file

' Description:
' CCurrentCost.class
' Support for Current Cost energy meters.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Renaud in 2010.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "CurrentCost"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "CurrentCost Receiver"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[CurrentCost] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $bCurrentCostDebug As Boolean

Public hCurrentCost As New SerialPort

Public sBuffer As String
Public sAddress As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bCurrentCostDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hCurrentCost.Close

  ' get a new one
  hCurrentCost = New Serialport As "CurrentCost"

  With hCurrentCost
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " interface connected to Port " & $sSerPort)
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " interface FAILED to connect to Port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

Public Sub CurrentCost_Read()

  Dim sData As String

  Try sData = Read #hCurrentCost, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from serial port! -> " & Error.Text)
  If sData = Chr(10) Or If sData = Chr(13) Then ' buffer until newline or cr then parse
    If Right(sBuffer, 6) = "</msg>" Then ParseMessage(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub ParseMessage(sStr As String)

  Dim iDeviceId As Integer
  Dim aScan As String[]
  Dim sValue, sMaxValue As String

  If $bCurrentCostDebug Then Main.WriteDebugLog(LogLabel & sStr)

  ' scan message
  aScan = Scan(sStr, "*<id>*</id>*<watts>*</watts>*")
  ' scan again with different pattern
  If aScan.Count <> 5 Then aScan = Scan(sStr, "*<sensor>*</sensor>*<watts>*</watts>*")
  ' here we have instantaneous data logging
  If aScan.Count = 5 Then
    sValue = aScan[3]
    sAddress = aScan[1]
    ' try to find device with address, and correct interface type.
    iDeviceId = Devices.Find(Instance, sAddress, Devices.FindInterface("Current Cost Receiver"), "CCOST")
    ' if found then update it's value
    If iDeviceId Then
      Devices.ValueUpdateExt(iDeviceId, 2, sValue)
      sMaxValue = Devices.GetCurrentValueForDevice(iDeviceId, 3)
      If sValue > sMaxValue Then
        Main.WriteLog((LogLabel & "Max electrical consumption reached ") & sValue & (" Watts"))
        Devices.ValueUpdateExt(iDeviceId, 3, sValue)
      Endif
    Endif
    aScan = Scan(sStr, "*<h004>*</h004>*")
    ' here we have real time data
    If aScan.Count = 3 Then
      ' if found then update it's value
      If iDeviceId Then Devices.ValueUpdateExt(iDeviceId, 1, aScan[1])
    Endif
    aScan = Scan(sStr, "*<tmpr>*</tmpr>*")
    ' here we have temperature data
    If aScan.Count = 3 Then
      ' if found then update it's value
      If iDeviceId Then Devices.ValueUpdateExt(iDeviceId, 4, Trim(aScan[1]))
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hCurrentCost.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

