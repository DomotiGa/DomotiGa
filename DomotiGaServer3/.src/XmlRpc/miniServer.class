' Gambas class file

'***************************************************************************
' 
' miniServer.class
' 
' (c)2005 - Daniel Campos Fernández
' 
' XML-RPC Component
' 
' Realizado para la Junta de Extremadura.
' Consejería de Educación Ciencia y Tecnología.
' Proyecto gnuLinEx
'
' This program Is free software; you can redistribute it And / Or modify
' it under the terms OF the GNU General PUBLIC License AS published by
' the Free Software Foundation; either version 1, Or (at your option)
' any later version.
' 
' This program Is distributed IN the hope that it will be useful,
' but WITHOUT ANY WARRANTY; WITHOUT even the implied WARRANTY OF
' MERCHANTABILITY Or FITNESS FOR A PARTICULAR PURPOSE.See the
' GNU General PUBLIC License FOR more details.
' 
' You should have received a COPY OF the GNU General PUBLIC License
' along WITH this program; IF Not, WRITE TO the Free Software
' Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
' 
'***************************************************************************
Private Http As ServerSocket
Private SockColl As Collection

Private hReply As String

Event GotData(Data As String)
Event ProcessData(Data As String)

Private Sub hError(hS As Socket, hErr As String)

  hS.Begin
  hS.EndOfLine = gb.Windows
  Print #hS, "HTTP/1.1 " & hErr
  Print #hS, "Server: Gambas XML-RPC Server"
  Print #hS, "Connection: close"
  Print #hS, "Content-Type: text/html; charset=iso-8859-1"
  Print #hS, ""
  Print #hS, "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">"
  Print #hS, "<HTML><HEAD>"
  Print #hS, "<TITLE>" & hErr & "</TITLE>"
  Print #hS, "</HEAD><BODY>"
  Print #hS, "<H1>Bad Request</H1>"
  Print #hS, hErr & ".<P>"
  Print #hS, "<HR>"
  Print #hS, "<ADDRESS>Gambas XML-RPC Server</ADDRESS>"
  Print #hS, "</BODY></HTML>"
  Print #hS, ""
  Print #hS, ""
  
  Try hS.Send

Catch
  ' Catch any errors with a closed stream

End



Private Sub RemoveSocket(hS As Socket)

  Dim cCol As Collection

  For Each cCol In SockColl
    If hS = cCol["socket"] Then
      Try Close #hS
      SockColl.Remove(cCol["id"])
      Break
    End If

  Next

End

Private Function FirstTest(Xml As XmlReader) As Boolean

  Do While Not Xml.Eof

    Try Xml.Read()
    If Error Then Return False
    If Xml.Eof Then Return True
    If Xml.Node.Type = XmlReaderNodeType.Element Then

      Select Case Xml.Node.Name

        Case "methodCall"
        Case "methodName"
        Case "params"
        Case "param"
        Case "i4"
        Case "int"
        Case "boolean"
        Case "string"
        Case "double"
        Case "dateTime.iso8601"
        Case "base64"
        Case "struct"
        Case "array"
        Case "data"
        Case "member"
        Case "value"
        Case "name"
        Default
          Return False

      End Select

    End If

  Loop

  Return True

End


Public Sub SetReply(sCad As String)

  hReply = sCad

End


Private Sub ProcessQuery(hS As Socket, Buf As String)

  Dim hBuf As String[]
  Dim Bucle As Integer
  Dim Point As Integer
  Dim Resul As String
  Dim sReply As String
  Dim hBol As Boolean
  Dim Xml As XmlReader

  Point = - 1
  hBuf = Split(Buf, Chr(13))

  For Bucle = 0 To hBuf.Count - 1
    hBuf[Bucle] = Replace(hBuf[Bucle], Chr(10), "")
  Next

  For Bucle = 0 To hBuf.Count - 1
    If hBuf[Bucle] = "" Then
      Point = Bucle
      Break
    End If
  Next

  If Point = - 1 Then
    hError(hS, "400 Bad Request")
    RemoveSocket(hS)
    Return
  End If

  For Bucle = Point + 1 To hBuf.Count - 1
    Resul = Resul & hBuf[Bucle]
    If Bucle < (hBuf.Count - 1) Then Resul = Resul & "\n"
  Next

  Xml = New XmlReader
  Try Xml.FromString(Trim(Resul))
  If Error Then
    Xml = Null
    hError(hS, "400 Bad Request")
    RemoveSocket(Hs)
    Return
  End If

  sReply = "OK"

  If Not FirstTest(Xml) Then
    sReply = Tools.FaultReply("1", "Malformed XML-RPC document")
  Else
    hBol = Raise GotData(Resul)
    If hBol Then
      sReply = Tools.FaultReply("2", "Unknown method")
    Else
      sReply = Tools.FaultReply("3", "Can not perform desired request")
      hReply = ""
      Raise ProcessData(Resul)
      If hReply <> "" Then sReply = hReply
    End If
  End If

  hS.Begin
  hS.EndOfLine = gb.Windows
  Print #hS, "HTTP/1.1 200 OK"
  Print #hS, "Connection: close"
  Print #hS, "Content-Length: " & Len(sReply)
  Print #hS, "Content-Type: text/xml"
  Print #hS, "Server: Gambas RPC Server"
  Print #hS, ""
  Write #hS, sReply, Len(sReply)
  Try hS.Send
  
Finally

  RemoveSocket(hS)

Catch
  ' Catch any errors with a closed stream

End


Public Sub Socket_Read()

  Dim Buf As String
  Dim sCad As String
  Dim Bucle As Integer
  Dim hS As Socket
  Dim cCount As Integer
  Dim cLen As Integer
  Dim cWait As Integer = 1
  Dim cCol As Collection

  For Each cCol In SockColl
    If cCol["socket"] = Last Then
      hS = Last
      Break
    Endif
  Next

  If hS = Null Then Return

  If cCol["buffer"] = "" Then
    If Lof(hS) >= 5 Then

      Try Read #hS, Buf, Lof(hS)
      cCol["buffer"] &= Buf
      If Left(cCol["buffer"], 5) <> "POST " Then
        hError(hS, "405 Method Not Allowed")
        RemoveSocket(hS)
        Return
      End If

    End If
  Else
    Try Read #hS, Buf, Lof(hS)
    cCol["buffer"] &= Buf

    ' Don't continue, because this is the second (or more) iteration to read the data
    ' The first iteration will handle the complete request
    Return
  End If

  If cCol["protocol"] = - 1 Then
    If InStr(cCol["buffer"], Chr(13)) > 0 Then
      Buf = Trim(Left(cCol["buffer"], InStr(cCol["buffer"], Chr(13)) - 1))
      Buf = Right(Buf, 8)
      If Buf = "HTTP/1.1" Then
        cCol["protocol"] = 1
      Else If Buf = "HTTP/1.0" Then
        cCol["protocol"] = 0
      Else
        hError(hS, "505 HTTP Version Not Supported")
        RemoveSocket(hS)
        Return
      End If

    Else
      If Len(cCol["buffer"]) > 4096 Then
        hError(hS, "413 Request Entity Too Large")
        RemoveSocket(hS)
        Return
      End If
    End If
  End If

  ' It is possible the HTTP headers are send in separate TCP packets, we will wait a maximum of 1000msec
  For cCount = cWait To 199 Step 1
    If hS = Null Then Return
    If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) Then Break
    Wait 0.005
  Next

  If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) Then
    If cCol["type"] = 0 Then
      Buf = Left(cCol["buffer"], InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)))

      If InStr(UCase(Buf), "CONTENT-TYPE:") > 0 Then
        sCad = Mid(Buf, InStr(UCase(Buf), "CONTENT-TYPE:") + 13)
        sCad = Trim(Left(sCad, InStr(sCad, Chr(13))))
        If LCase(sCad) <> "text/xml" Then
          hError(hS, "415 Unsupported Media Type")
          RemoveSocket(hS)
          Return
        Else
          cCol["type"] = 1
        End If
      Else
        hError(hS, "415 Unsupported Media Type")
        RemoveSocket(hS)
        Return
      End If

      If InStr(UCase(Buf), "CONTENT-LENGTH:") > 0 Then
        sCad = Mid(Buf, InStr(UCase(Buf), "CONTENT-LENGTH:") + 15)
        sCad = Trim(Left(sCad, InStr(sCad, Chr(13))))
        Try cCol["length"] = CInt(sCad)
        If Error Then
          hError(hS, "411 Length Required")
          RemoveSocket(hS)
          Return
        End If
      Else
        hError(hS, "411 Length Required")
        RemoveSocket(hS)
        Return
      End If

      ' Check for "Expect: 100-continue" option & HTTP/1.1
      If cCol["protocol"] = 1 And InStr(UCase(Buf), "EXPECT: 100-CONTINUE") > 0 Then
        ' Do a special check if no body is received - only then reply
        If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) + 3 = Len(cCol["buffer"]) Then
          hS.Begin
          hS.EndOfLine = gb.Windows
          Print #hS, "HTTP/1.1 100 Continue"
          Print #hS, ""
          Try hS.Send
        End If
      End If

    End If
  End If

  If InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) Then

    If cCol["length"] = - 1 Or cCol["type"] <> 1 Then
      hError(hS, "406 Not Acceptable")
      RemoveSocket(hS)
      Return
    End If

    For cCount = cWait To 200 Step 1
      If hS = Null Then Return
      cLen = Len(cCol["buffer"]) - InStr(cCol["buffer"], Chr(13) & Chr(10) & Chr(13) & Chr(10)) - 3
      If cLen >= cCol["length"] Then Break
      Wait 0.005
    Next

    ' HTTP/1.0 = looseless checking, some older clients generation wrong length
    ' HTTP/1.1 = strict checking
    If (cCol["protocol"] = 1 And cCol["length"] = cLen) Or (cCol["protocol"] = 0 And cCol["length"] <= cLen) Then
      ProcessQuery(hS, cCol["buffer"])
      Return
    Else

      If Len(cCol["buffer"]) > 4096 Then
        hError(hS, "413 Request Entity Too Large")
        RemoveSocket(hS)
        Return
      Else
        ' If size doesn't match - we give an internal error
        hError(hS, "500 Internal Server Error")
        RemoveSocket(hS)
        Return
      End If
      
    End If

  Else
    If Len(cCol["buffer"]) > 4096 Then
      hError(hS, "413 Request Entity Too Large")
      RemoveSocket(hS)
      Return
    End If
  End If

  ' Always give a response
  ' We wait long enough for the information = 1000msec
  hError(hS, "408 Request Timeout")
  RemoveSocket(hS)

End


Public Sub Http_Connection(RemoteHost As String)

  Dim SockCollEntry As New Collection
  Dim iId As Integer

  Randomize
  Do
    iId = Int(Rnd(1, 32768))
  Loop Until Not SockColl.Exist(iId)

  SockCollEntry.Add("", "buffer")
  SockCollEntry.Add(Http.Accept(), "socket")
  SockCollEntry.Add(-1, "protocol")
  SockCollEntry.Add(-1, "length")
  SockCollEntry.Add(0, "type")
  SockCollEntry.Add(CStr(iId), "id")

  SockColl.Add(SockCollEntry, CStr(iId))

End


Public Sub Close()

  Dim cCol As Collection

  For Each cCol In SockColl
    RemoveSocket(cCol["socket"])
  Next

  Try Http.Close()
  Http = Null

End


Public Sub Listen(Port As Integer, MaxConn As Integer)

  If Not Http Then
    Http = New ServerSocket As "Http"
  Else
    If Http.Status <> 0 Then Http.Close()
  End If

  Try Http.Port = Port
  If Error Then
    Error.Raise("Invalid TCP port")
    Return
  End If

  If MaxConn > 0 Then
    Try Http.Listen(MaxConn)
  Else
    Try Http.Listen()
  End If

  If Error Then Error.Raise("Unable to listen at port " & Port)
  If Http.Status < 0 Then Error.Raise("Unable to listen at port " & Port)


End


Public Sub _New()

  SockColl = New Collection

End


Public Sub _Free()

  Me.Close()

End



