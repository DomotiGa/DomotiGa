' Gambas module file

' Description:
' Calendar.module
' Support for calendar related functions.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright(C) 2009-2012 Ron Klinkien

' Read file called COPYING for license details.

PUBLIC dPlanning AS Date[]

PUBLIC SUB Init()

  DIM rResult AS Result

  dPlanning = NEW Date[]

  IF Main.bServer THEN
    ' load calendar from database
    rResult = Main.hDB.Exec("SELECT * FROM calendar")
    IF NOT rResult THEN
      Main.WriteLog("Error: table 'calendar' not found!")
      RETURN
    ELSE
      FOR EACH rResult
        dPlanning.Add(rResult!date)
        rResult.MoveNext
      NEXT
    ENDIF
  ELSE
    ' retrieve calendar from server
    ' XMLClient.GetPlanning()
  ENDIF

END

' read a planning received from client and store it in database
PUBLIC SUB SetPlanning(sParams AS Variant[])

  DIM i AS Integer
  DIM rResult AS Result
  DIM tableCalendar AS Table
  DIM d AS Date

  IF sParams.Count = 1 THEN
    dPlanning.Clear()
    FOR i = 0 TO (sParams[0].Count - 1)
      dPlanning.Add(sParams[0].Pop())
    NEXT
    Run()
    Main.hXMLRPC.hXMLRPC.SetReply(TRUE)
  ELSE
    Main.hXMLRPC.hXMLRPC.SetReply(FALSE)
  ENDIF

  ' delete complete history
  TRY Main.hDB.Tables.Remove("calendar")
  ' recreate empty one
  tableCalendar = Main.hDB.Tables.Add("calendar")
  tableCalendar.Fields.Add("id", db.Serial)
  tableCalendar.Fields.Add("date", db.Date, 64)
  tableCalendar.PrimaryKey = ["id"]
  tableCalendar.Update()

  FOR EACH d IN Calendar.dPlanning
    Main.hDB.Begin()
    rResult = Main.hDB.Create("calendar")
    rResult!date = d
    rResult.Update()
    Main.hDB.Commit()
  NEXT

END

' send a planning to client
PUBLIC SUB GetPlanning()

  DIM d AS Date
  DIM aArray AS NEW RpcArray

  FOR EACH d IN Calendar.dPlanning
    aArray.Add(d, XmlRpc.xDate)
  NEXT
  Main.hXMLRPC.hXMLRPC.SetReply(aArray)

END

' compute the next marked day in the planning
PUBLIC SUB Run()

  DIM d, NextPlanning AS Date
  DIM offset, smallestOffset AS Integer

  smallestOffset = 10000

  FOR EACH d IN dPlanning
    offset = DateDiff(Now(), d, gb.Day)
    IF offset > 0 THEN
      IF offset < smallestOffset THEN
        smallestOffset = offset
        NextPlanning = d
      ENDIF
    ENDIF
  NEXT
  Main.SetGlobalVar("NextPlanning", NextPlanning, TRUE)

END
