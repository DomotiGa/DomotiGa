' Gambas module file

' Description:
' Devices.module
' Contains code which is device related.

' Development Status:
' Working, maybe needs more error checking.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' ValueType Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const ValueType_Undefined As Integer = 0
Public Const ValueType_Switch As Integer = 1
Public Const ValueType_Temperature As Integer = 2
Public Const ValueType_Humidity As Integer = 3
Public Const ValueType_Luminance As Integer = 4
Public Const ValueType_WindSpeed As Integer = 5
Public Const ValueType_WindDirection As Integer = 6
Public Const ValueType_WindDescription As Integer = 7
Public Const ValueType_WindAvgSpeed As Integer = 8
Public Const ValueType_Weight As Integer = 9
Public Const ValueType_UV As Integer = 10
Public Const ValueType_RainRate As Integer = 11
Public Const ValueType_RainTotal As Integer = 12
Public Const ValueType_Remote As Integer = 13
Public Const ValueType_Security As Integer = 14
Public Const ValueType_Tamper As Integer = 15
Public Const ValueType_Blinds As Integer = 16
Public Const ValueType_Energy_kWh As Integer = 17
Public Const ValueType_Power_Watt As Integer = 18

'Public Const ValueType_ As Integer = X
' barometric, datetime, current, gas, water, volt, camera

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device value with name
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateDevice(vDeviceName As Variant, sValue As String, iValueNum As Integer) As Boolean

  Dim iInterface, iDeviceId As Integer
  Dim iInstance As Integer
  Dim sAddress As String
  Dim sDeviceName As String
  
  ' If we get a byte/integer, we should try to find the device with an id
  If TypeOf(vDeviceName) = gb.String Then
    sDeviceName = vDeviceName
  Else
    Try sDeviceName = FindNameForDevice(CInt(vDeviceName))
    If Error Then
      Main.WriteDebugLog(("[Devices] Device with id '") & vDeviceName & ("' not found!"))
      Return
    Endif
  Endif

  iInterface = FindInterfaceForDevice(sDeviceName)
  If Not iInterface Then Return

  sAddress = FindAddressForDevice(sDeviceName)
  'iInstance = FindInstanceForDevice(sDeviceName)

  If Not sAddress Then Return

  iDeviceId = Devices.Find(iInstance, sAddress, iInterface)
  If Not iDeviceId Then Return

  Select iValueNum
    Case 1
      ValueUpdateV2(iDeviceId, 1, sValue)
    Case 2
      ValueUpdateV2(iDeviceId, 2, sValue)
    Case 3
      ValueUpdateV2(iDeviceId, 3, sValue)
    Case 4
      ValueUpdateV2(iDeviceId, 4, sValue)
    Case Else
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Invalid valuenum given!"))
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control device via linked interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SetDevice(vDeviceName As Variant, sValue As String) As Boolean

  Dim iInterface, iDeviceId As Integer
  Dim iInstance As Integer
  Dim sText, sAddress, sCurValue As String
  Dim sDeviceName As String

  ' TODO: fix for server code
  ' If Not Main.bServer Then
  '   XMLClient.DeviceSetDevice(sDeviceName, sValue)
  '   Return True
  ' Endif

  ' If we get a byte/integer or a string that can be parsed to integer, we should try to find the device with an id
  Try iDeviceId = CInt(vDeviceName)
  If Error Then
    sDeviceName = vDeviceName
  Else
    Try sDeviceName = FindNameForDevice(iDeviceId)
    If Error Then
      Main.WriteDebugLog(("[Devices] Device with id '") & iDeviceId & ("' not found!"))
      Return
    Endif
    If Not sDeviceName Then Return
  Endif
  
  iInterface = FindInterfaceForDevice(sDeviceName)
  If Not iInterface Then Return

  sAddress = FindAddressForDevice(sDeviceName)
  'iInstance = FindInstanceForDevice(sDeviceName)

  If Not sAddress Then Return

  If iDeviceId Then
    If Not iDeviceId == Devices.Find(iInstance, sAddress, iInterface) Then Return
  Else
     iDeviceId = Devices.Find(iInstance, sAddress, iInterface)
  Endif
  If Not iDeviceId Then Return

  If LCase(sValue) = "toggle" And If iDeviceId Then
    sCurValue = GetCurrentValueForDevice(iDeviceId, 1)
    sValue = Toggle(LCase(sCurValue))
  Endif

  ' Convert "Dim 100" to "On" and "Dim 0" to "Off - some devices don't support "Dim 100"
  If LCase(sValue) = "dim 100" Then sValue = "On"
  If LCase(sValue) = "dim 0" Then sValue = "Off"

  Select Case iInterface
    Case 1 ' RFXCom Receiver
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] RFXCom Receiver can't control anything!"))
    Case 2 ' Xanura CTX35
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Xanura CTX35: " & sAddress & " " & sValue)
      If Main.hCTX35 Then
        Main.hCTX35.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because CTX35 is disabled!"))
      Endif
    Case 3, 4, 5, 6, 8
      Main.WriteDebugLog(("[Devices] Error, read-only interface used for switching!"))
    Case 7 ' X10Cmd
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] X10Cmd: " & sAddress & " " & sValue)
      If Main.bX10CmdEnabled Then
        X10Cmd.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because X10Cmd is disabled!"))
      Endif
    Case 9 ' Weeder WTSSR
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Weeder WTSSR: " & sAddress & " " & sValue)
      If Main.hWeeder Then
        If iDeviceId Then
          If InStr(FindTypeNameForDevice(iDeviceId), "ITHO ECO Fan") Then
            If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] ITHO ECO Fan")
            Main.hWeeder.ControlITHO(sAddress, sValue)
            If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
          Endif
        Else
          Main.WriteDebugLog(("[Devices] ITHO ECO Fan not enabled!"))
        Endif
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Weeder is disabled!"))
      Endif
    Case 10 ' Plugwise
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Plugwise Stick: " & sAddress & " " & sValue)
      If Main.hPlugwise Then
        Main.hPlugwise.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Plugwise is disabled!"))
      Endif
    Case 11 ' DSC
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] DSC Alarm: " & sAddress & " " & sValue)
      If Main.hDSC Then
        Main.hDSC.SendCommand(sAddress, sValue, iDeviceId)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Partition ") & sDeviceName & " set to " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because DSC is disabled!"))
      Endif
    Case 12 ' RFXCom Transmitter
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] RFXCom Transmitter: " & sAddress & " " & sValue)
      If Main.hRFXComTX Then
        If sValue <> "STOP" Then
          Main.hRFXComTX.SendCommand(sAddress, sValue)
          If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
          sText = ("Switched ") & sDeviceName & " " & sValue
        Endif
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because RFXCom Transmitter is disabled!"))
      Endif
    Case 13 ' KNX/EIB Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] KNX/EIB Interface: " & sAddress & " " & sValue)
      If Main.hEIB Then
        Main.hEIB.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because KNX/EIB is disabled!"))
      Endif
    Case 15 ' Z-Wave Controller
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Z-Wave Interface: " & sAddress & " " & sValue)
      If Main.hZWave Then
        Main.hZWave.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Z-Wave interface is disabled!"))
      Endif
    Case 16 ' PLCBUS Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] PLCBUS Interface: " & sAddress & " " & sValue)
      If Main.hPLCBUS Then
        Main.hPLCBUS.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because PLCBUS interface is disabled!"))
      Endif
    Case 17 ' Virtual Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Virtual Interface: " & sAddress & " " & sValue)
      If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
      sText = ("Set ") & sDeviceName & " to " & sValue
    Case 20 ' EZcontrol Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] EZcontrol Interface: " & sAddress & " " & sValue)
      If Main.hEZcontrol Then
        Main.hEZcontrol.SendCommand(sAddress, sValue, iDeviceId)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because EZcontrol interface is disabled!"))
      Endif
    Case 22 ' PwrCtrl Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] PwrCtrl Interface: " & sAddress & " " & sValue)
      If Main.hPwrCtrl Then
        Main.hPwrCtrl.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because PwrCtrl interface is disabled!"))
      Endif
    Case 23 ' Denon Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Denon Interface: " & sAddress & " " & sValue)
      If Main.hDenon Then
        Main.hDenon.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Denon interface is disabled!"))
      Endif
    Case 24 ' Onkyo Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Onkyo Interface: " & sAddress & " " & sValue)
      If Main.hOnkyo Then
        Main.hOnkyo.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Onkyo interface is disabled!"))
      Endif
    Case 25 ' SharpTV Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] SharpTV Interface: " & sAddress & " " & sValue)
      If Main.hSharpTV Then
        Main.hSharpTV.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because SharpTV interface is disabled!"))
      Endif
    Case 26 ' LGTV Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] LGTV Interface: " & sAddress & " " & sValue)
      If Main.hLGTV Then
        Main.hLGTV.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because LGTV interface is disabled!"))
      Endif
    Case 29 ' JeeLabs Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Jeelabs Interface: " & sAddress & " " & sValue)
      If Main.hJeeLabs Then
        Main.hJeeLabs.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Jeelabs interface is disabled!"))
      Endif
    Case 30 ' Velleman Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Velleman K8055 : " & sAddress & " " & sValue)
      If Main.hK8055 Then
        Main.hK8055.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because K8055 is disabled!"))
      Endif
    Case 31 ' OWFS Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] OWFS Interface: " & sAddress & " " & sValue)
      If Main.hOWFS Then
        Main.hOWFS.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because OWFS interface is disabled!"))
      Endif
    Case 32 ' CUL Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] CUL Interface: " & sAddress & " " & sValue)
      If Main.hCUL Then
        Main.hCUL.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because CUL interface is disabled!"))
      Endif
    Case 33 ' RFXCom xPL
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] RFXCom xPL Interface: " & sAddress & " " & sValue)
      If Main.hRFXComxPL Then
        Main.hRFXComxPL.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because RFXCom xPL interface is disabled!"))
      Endif
    Case 34 ' Shell
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Shell Interface: " & sAddress & " " & sValue)
      If Main.bShellEnabled Then
        Shell.RunShellCommand(iDeviceId, sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Shell interface is disabled!"))
      Endif
    Case 35 ' RFXCom TRX
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] RFXCom Transceiver Interface: " & sAddress & " " & sValue)
      If Main.hRFXComTRX Then
        Main.hRFXComTRX.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because RFXCom Transceiver interface is disabled!"))
      Endif
    Case 36 ' HomeMatic LAN
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] HomeMatic Interface: " & sAddress & " " & sValue)
      If Main.hHM Then
        Main.hHM.SendCommand(iDeviceId, "Temperature " & sValue)
        ' Main.hHM.SendCommand(sAddress, sValue, iDeviceId)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because HomeMatic interface is disabled!"))
      Endif
    Case 37 ' OpenTherm gateway
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] OpenTherm gateway interface: " & sAddress & " " & sValue)
      If Main.hOpenTherm Then
        Main.hOpenTherm.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Changed ") & sDeviceName & " temperature setpoint to " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because OpenTherm gateway interface is disabled!"))
      Endif
    Case 39 ' Pioneer interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Pioneer Interface: " & sAddress & " " & sValue)
      If Main.hPioneer Then
        Main.hPioneer.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Pioneer interface is disabled!"))
      Endif
    Case 40 ' XBMC xPL interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] XBMC xPL Interface: " & sAddress & " " & sValue)
      If Main.hXBMCxPL Then
        Main.hXBMCxPL.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because XBMC xPL interface is disabled!"))
      Endif
    Case 42 ' ELV MAX! Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] ELV MAX! Interface: " & sAddress & " " & sValue)
      If Main.hELVMAX Then
        Main.hELVMAX.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because ELV MAX! interface is disabled!"))
      Endif
    Case 44 ' Mochad
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Mochad: " & sAddress & " " & sValue)
      If Main.hMochad Then
        Main.hMochad.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because Mochad is disabled!"))
      Endif
    Case 47 ' KMTronicUDP Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] KMTronicUDP Interface: " & sAddress & " " & sValue)
      If Main.hKMTronicUDP Then
        Main.hKMTronicUDP.SendCommand(sAddress, sValue, iDeviceId)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because KMTronicUDP interface is disabled!"))
      Endif
    Case 48 ' DMXPlayer
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] DMXPlayer Interface: " & sAddress & " " & sValue)
      If Main.hDMXPlayer Then
        Main.hDMXPlayer.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because DMXPlayer interface is disabled!"))
      Endif
    Case 49 ' GenericIO Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] GenericIO Interface: Calling SendCommand with Address='" & sAddress & "' and command='" & sValue & "'")
      If Main.hGenericIO Then
        Main.hGenericIO.SendCommand(sAddress, sValue)
        ' Note: Unlike many of the above interface commands, this does not update the value.
        '       Value needs to be updated by the device we have sent the command to.
        '       ie. we send a command to turn on a relay. Device then responds that the relay is on (which updates Value).
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because GenericIO interface is disabled!"))
      Endif
    Case 51 ' RaZberry Interface
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] RaZberry Interface: " & sAddress & " " & sValue)
      If Main.hRaZberry Then
        Main.hRaZberry.SendCommand(sAddress, sValue)
        If iDeviceId Then Devices.ValueUpdateV2(iDeviceId, 1, sValue)
        sText = ("Switched ") & sDeviceName & " " & sValue
      Else
        Main.WriteDebugLog(("[Devices] Can't control device '") & sDeviceName & ("' because RaZberry interface is disabled!"))
      Endif
    Case -1
      Main.WriteDebugLog(("[Devices] Interface for device '") & sDeviceName & ("' does not support Write!"))
      Return False
  Case Else
    Main.WriteDebugLog(("[Devices] Unknown Interface ") & Str(iInterface) & (" for device '") & sDeviceName & "'!")
    Return False
  End Select

  If sText And If iInterface Then
    If iDeviceId And If FindLogSpeakForDevice(iDeviceId) Then VoiceText.Speak(sText)
  Endif
  Return True

End

Public Sub SetDeviceIfDifferent(iId As Integer, sValue As String) As Boolean

  If sValue == GetCurrentValueForDevice(iId, 1) Then
    Return False
  Else
    SetDevice(FindNameForDevice(iId), sValue)
  Endif

End

Private Sub AddDeviceToContext(cContext As Collection, rResult As Result)

  Dim rResultDev As Result

  cContext["Value"] = rResult!value
  cContext["Value2"] = rResult!value2
  cContext["Value3"] = rResult!value3
  cContext["Value4"] = rResult!value4

  rResultDev = Main.hDB.Exec("SELECT id,value,value2,value3,value4 FROM devices WHERE enabled IS TRUE ORDER BY name")

  rResultDev.MoveFirst()
  While rResultDev.Available
    cContext["Dev_" & rResultDev!id & "_Value"] = rResultDev!value
    cContext["Dev_" & rResultDev!id & "_Value2"] = rResultDev!value2
    cContext["Dev_" & rResultDev!id & "_Value3"] = rResultDev!value3
    cContext["Dev_" & rResultDev!id & "_Value4"] = rResultDev!value4
    rResultDev.MoveNext()
  Wend

End

Public Function CorrectValue(sValue As String, sFormula As String, rResult As Result) As String

  Dim sResult As String
  Dim cContext As New Collection

  ' calibration needed
  If Len(sFormula) > 0
    ' insert devices values
    AddDeviceToContext(cContext, rResult)
    ' evaluate the formula
    Try sResult = Eval(Replace(sFormula, "\n", " "), cContext)
    If Error Then
      sResult = "ERROR: " & Error.Text
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] CorrectValue failed. sValue=" & sValue & ", sFormula=" & sFormula & ". Message=" & sResult)
    Endif
    Return sResult
  Else
    ' nothing to calibrate
    Return sValue
  Endif

Catch
  Return Error.Text

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' toggle value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Toggle(sValue As String) As String

  If Lower(sValue) = "on" Or If InStr(Lower(sValue), "dim") Then
    Return "Off"
  Else
    Return "On"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface with name sInterfaceName, return it's id.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInterface(sInterfaceName As String) As Integer

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT * FROM interfaces WHERE name = &1", sInterfaceName)
  If Not Error Then
  If rInterface.Available Then
    If rInterface.Count = 1 Then
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Interface with name '") & sInterfaceName & ("' has id '") & rInterface!id & "'")
      Return rInterface!id
    Else
      Main.WriteDebugLog(("[Devices] More then one interface with name '") & sInterfaceName & ("' found!"))
      Return 0
    Endif
  Else
    Main.WriteDebugLog(("[Devices] Interface with name '") & sInterfaceName & ("' not found!"))
    Return 0
  Endif
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find devicetype with type, return it's id.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDeviceType(sDeviceType As String) As Integer

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT * FROM devicetypes WHERE type LIKE &1", sDeviceType)
  If Not Error Then
    If rDeviceType.Available Then
      If rDeviceType.Count = 1 Then
        If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] DeviceType with type '") & sDeviceType & ("' has id '") & rDeviceType!id & "'")
        Return rDeviceType!id
      Else
        If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] DeviceType with type '") & sDeviceType & ("' not found!"))
        Return 0
      Endif
    Else
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Cannot get DeviceType records!"))
      Return 0
    Endif
  Else
    If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Cannot get DeviceType records!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return module/devicetype for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindModuleForDevice(iDeviceId As Integer) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT module FROM devices WHERE id = &1", iDeviceId)
  If Not Error Then
    If rDevice.Available Then
      Return rDevice!module
    Else
      Return 0
    Endif
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindTypeForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result
  Dim iDeviceType As Integer

  iDeviceType = FindModuleForDevice(iDeviceId)
  Try rDevice = Main.hDB.Exec("SELECT type FROM devicetypes WHERE id = &1", iDeviceType)
  Return rDevice!type

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return typename for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindTypeNameForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result
  Dim iDeviceType As Integer

  iDeviceType = FindModuleForDevice(iDeviceId)
  Try rDevice = Main.hDB.Exec("SELECT name FROM devicetypes WHERE id = &1", iDeviceType)
  Return rDevice!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return description for devicetype with iId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDescrForDeviceType(iId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT description FROM devicetypes WHERE id = &1", iId)
  If rDevice.Available Then
    Return rDevice!description
  Else
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT name FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then
    Return rDevice!name
  Else
    Main.WriteDebugLog(("[Devices] Cannot find name for device with id ") & iDeviceId)
    Return ""
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return device id for virtual device with address
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindVirtualDeviceID(sAddress As String) As Integer

  Dim iId As Integer

  iId = Find(sAddress, FindInterface("Virtual Interface"), "Virtual Device")
  Return iId

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for interface with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForInterface(iInterfaceId As Integer) As String

  Dim rInterface As Result

  Try rInterface = Main.hDB.Exec("SELECT name FROM interfaces WHERE id = &1", iInterfaceId)
  If Not Error And If rInterface.Available Then Return rInterface!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return name for devicetype with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindNameForDeviceType(iDeviceTypeId As Integer) As String

  Dim rDeviceType As Result

  Try rDeviceType = Main.hDB.Exec("SELECT name FROM devicetypes WHERE id = &1", iDeviceTypeId)
  If Not Error And If rDeviceType.Available Then Return rDeviceType!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return log boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT log FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!log

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return address string for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAddressForDeviceId(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT address FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!address

End


'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return print boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogDisplayForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT logdisplay FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!logdisplay

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return speak boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindLogSpeakForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT logspeak FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!logspeak

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return hide boolean for device with id
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindHideForDevice(iDeviceId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT hide FROM devices WHERE id = &1", iDeviceId)
  If Not Error And If rDevice.Available Then Return rDevice!hide

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all enabled devices, return all fields from database
' sorted by sOrder if specified.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAllEnabledDevices(Optional sSortOrder As String) As Result

  Dim rDevice As Result
  
 If sSortOrder Then
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled IS TRUE ORDER BY &1", sSortOrder)
  Else
    Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE enabled IS TRUE")
  Endif
  Return rDevice

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with interface iInterface, return complete device details.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDevicesForInterface(iInterface As Integer, Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If iInterface Then
   If sSortOrder Then
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE ORDER BY &2", iInterface, sSortOrder)
    Else
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", iInterface)
    Endif
    Return rDevice
  Else
    Main.WriteDebugLog(("[Devices] FindDeviceForInterface: No interface Id given!"))
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with group sGroup, return complete device details.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindDevicesForGroup(sGroup As String, Optional sSortOrder As String) As Result

  Dim rDevice As Result

  If sGroup Then
   If sSortOrder Then
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND enabled is TRUE ORDER BY &2", sGroup, sSortOrder)
    Else
      Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE groups LIKE &1 AND enabled is TRUE", sGroup)
    Endif
    Return rDevice
  Else
    Main.WriteDebugLog(("[Devices] FindDeviceForGroup: No group specified!"))
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find interface for device with sdeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindInterfaceForDevice(sDeviceName As String) As Integer

  Dim rDevice, rResult As Result

  Try rDevice = Main.hDB.Exec("SELECT address, name, interface FROM devices WHERE name = &1", sDeviceName)
  ' found only one unique entry?
  If rDevice.Count > 1 Then
    Main.WriteDebugLog(("[Devices] The following devices have same name:"))
    For Each rDevice
      Main.WriteDebugLog(("[Devices] Device with address '") & rDevice!address & "' is '" & rDevice!name & "'")
    Next
    Return 0
  ' ok this one seems useful
  Else If rDevice.Count = 1 Then
    Try rResult = Main.hDB.Exec("SELECT mode FROM interfaces WHERE id = &1", rDevice!interface)
    If InStr(rResult!mode, "Write") Then
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Interface for device with name '") & sDeviceName & "' is '" & rDevice!interface & "'")
      Return rDevice!interface
    Else
      ' read-only
      Return -1
    Endif
  ' no interface found, something is wrong
  Else
    Main.WriteDebugLog(("[Devices] Device with name '") & sDeviceName & ("' not found!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find address for device with sDeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAddressForDevice(sDeviceName As String) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT address FROM devices WHERE name = &1", sDeviceName)
  If rDevice.Count > 1 Then
    Main.WriteDebugLog(("[Devices] The following devices have same name:"))
    For Each rDevice
      Main.WriteDebugLog(("[Devices] Device with address '") & rDevice!address & ("' is '") & rDevice!name & "'")
    Next
    Return 0
  Else If rDevice.Count = 1 Then
    If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Address for device with name '") & sDeviceName & ("' is '") & rDevice!address & "'")
    Return rDevice!address
  Else
    Main.WriteDebugLog(("[Devices] Device with name '") & sDeviceName & ("' not found!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sName, return it's current value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetValueForDevice(sDeviceName As String, Optional sValue As String) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT value, value2, value3, value4, lastseen, address FROM devices WHERE name = &1", sDeviceName)
  If rDevice.Count > 1 Then
    Main.WriteDebugLog(("[Devices] The following devices have same name:"))
    For Each rDevice
      Main.WriteDebugLog(("[Devices] Device with address '") & rDevice!address & ("' is '") & rDevice!name & "'")
    Next
    Return 0
  Else If rDevice.Count = 1 Then
    If Len(svalue) > 0 Then
      Select Case sValue
        Case "1", "value"
          Return rDevice!value
        Case "2", "value2"
          Return rDevice!value2
        Case "3", "value3"
          Return rDevice!value3
        Case "4", "value4"
          Return rDevice!value4
        Case "lastseen"
          Return rDevice!lastseen
        Case Else
          Return rDevice!value
      End Select
    Else
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Value of device with name '") & sDeviceName & ("' is ") & rDevice!value)
      Return rDevice!value
    Endif
  Else
    Main.WriteDebugLog(("[Devices] Device with name '") & sDeviceName & ("' not found!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's lastchanged value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLastChangedForDevice(iId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT lastchanged FROM devices WHERE id = &1", iId)
  If rDevice.Count Then
    Return rDevice!lastchanged
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's lastseen value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetLastSeenForDevice(iId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT lastseen FROM devices WHERE id = &1", iId)
  If rDevice.Count Then
    Return rDevice!lastseen
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's batterystatus value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetBatteryStatusForDevice(iId As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT batterystatus FROM devices WHERE id = &1", iId)
  If rDevice.Count Then
    Return rDevice!batterystatus
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with iId, return it's current calibrated iValue value
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetCurrentValueForDevice(iId As Integer, iValue As Integer) As String

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT value, value2, value3, value4, lastseen, correction, correction2, correction3, correction4 FROM devices WHERE id = &1", iId)
  If rDevice.Count Then
    Select Case iValue
      Case 1
        Return Devices.CorrectValue(rDevice!value, rDevice!correction, rDevice)
      Case 2
        Return Devices.CorrectValue(rDevice!value2, rDevice!correction2, rDevice)
      Case 3
        Return Devices.CorrectValue(rDevice!value3, rDevice!correction3, rDevice)
      Case 4
        Return Devices.CorrectValue(rDevice!value4, rDevice!correction4, rDevice)
      Case 5
        Return rDevice!lastseen
    End Select
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress and iInterface, return id if found.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Find(iInstance As Integer, sAddress As String, iInterface As Integer, Optional sDevice As String, sPrefName As String) As Integer

  Dim rDeviceFind As Result

  If iInterface Then
    Try rDeviceFind = Main.hDB.Exec("SELECT * FROM devices WHERE address LIKE &1 AND interface = &2 AND enabled is TRUE", sAddress, iInterface)
    If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, sDevice, sPrefName)
  Else
    Main.WriteDebugLog(("[Devices] Interface for device '") & sDevice & ("' with address '") & sAddress & ("' not found!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress in it's address and iInterface, return id if found.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindRegExp(sAddress As String, iInterface As Integer, Optional sDevice As String, sRegex1 As String = "[[:<:]]", sRegex2 As String = "[[:>:]]") As Integer

  Dim rDeviceFind As Result

  If iInterface Then
    Try rDeviceFind = Main.hDB.Exec("SELECT * FROM devices WHERE address REGEXP '" & sRegex1 & sAddress & sRegex2 & "' AND interface = &1 AND enabled is TRUE", iInterface)
    If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, sDevice)
  Else
    Main.WriteDebugLog(("[Devices] Interface for device '") & sDevice & ("' with address '") & sAddress & ("' not found!"))
    Return 0
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find device with sAddress for all Interfaces, return id if found.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindAll(sAddress As String, iInterface As Integer, Optional sDevice As String) As Integer

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT devices.* FROM devices, interfaces WHERE devices.interface = interfaces.id AND interfaces.type REGEXP '[[:<:]]" & sDevice & "[[:>:]]' AND devices.address LIKE &1 AND devices.enabled is TRUE LIMIT 1", sAddress)
  If Not Error Then Return FindDevice(rDeviceFind, sAddress, iInterface, sDevice)

End

Public Sub FindDevice(rDevice As Result, sAddress As String, iInterface As Integer, Optional sDevice As String, sPrefName As String) As Integer

  Dim rResult As Result

  If Not sDevice Then sDevice = "Unknown"

  If rDevice.Count > 1 Then
    Main.WriteDebugLog(("[Devices] The following devices have the same address:"))
    For Each rDevice
      Main.WriteDebugLog(("[Devices] Device with address '") & sAddress & ("' is '") & rDevice!name & "'")
    Next
    Return 0
  Else If rDevice.Count = 1 Then
    If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device with address '") & sAddress & ("' is '") & rDevice!name & "'")
    If rDevice!firstseen = "00:00:00" Or If rDevice!firstseen = "" Then
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device with address '") & sAddress & ("' and '") & rDevice!name & ("' is a new device"))
      rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
    Endif
    Return rDevice!id
  Else
    If Not IsBlacklisted(sAddress, iInterface) Then
      If sDevice Then
        Main.WriteDebugLog(("[Devices] Device of type '" & sDevice & "' with address '") & sAddress & ("' and interface '") & FindNameForInterface(iInterface) & ("' not found!"))
      Else
        Main.WriteDebugLog(("[Devices] Device with address '") & sAddress & ("' and interface '") & FindNameForInterface(iInterface) & ("' not found!"))
      Endif
      If Main.bAutoDeviceCreate Then
        Return AutoCreateDevice(sAddress, iInterface, sDevice, sPrefName)
      Else
        Return 0
      Endif
    Else
      If Main.bDevicesDebug Then
        If sDevice Then
          Main.WriteDebugLog(("[Devices] Device " & IIf(Len(sDevice), "of type '" & sDevice & "' ", "") & "with address '") & sAddress & ("' and interface '") & FindNameForInterface(iInterface) & ("' is blacklisted!"))
        Else
          Main.WriteDebugLog(("[Devices] Device with address '") & sAddress & ("' and interface '") & FindNameForInterface(iInterface) & ("' is blacklisted!"))
        Endif
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if an device has firstseen filled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckFirstSeen(iId As Integer)

  Dim rResult, rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM devices WHERE id = &1", iId)
  If rDevice.Count Then
    If rDevice!firstseen = "00:00:00" Or If rDevice!firstseen = "" Then
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device with address '") & rDevice!address & ("' and '") & rDevice!name & ("' is a new device!"))
      rResult = Main.hDB.Exec("UPDATE devices SET firstseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), rDevice!id)
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find out if address is blacklisted and return true
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsBlacklisted(sAddress As String, iInterface As Integer) As Boolean

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT * FROM deviceblacklist WHERE address = &1", sAddress)
  If rDevice.Count Then
    If rDevice!id Then
      If iInterface = rDevice!id Then
        If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Address '") & sAddress & ("' with Interface '") & FindNameForInterface(iInterface) & ("' is blacklisted, so I ignore it."))
        Return True
      Else
        Return False
      Endif
    Endif
    If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Address '") & sAddress & ("' is blacklisted, so I ignore it."))
    Return True
  Endif
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' TEMPORARY wrapper for the new ValueUpdate functionality,
' this allows us to safely migrate all the calls to V2 without
' having to update the DB too
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValueUpdateV2(iId As Integer, iValueNum As Integer, vValue As Variant, Optional iValueType As Integer = ValueType_Undefined) As Boolean

  Select iValueNum
    Case 1
      Return ValueUpdate(iId, vValue, "", "", "")
    Case 2
      Return ValueUpdate(iId, "", vValue, "", "")
    Case 3
      Return ValueUpdate(iId, "", "", vValue, "")
    Case 4
      Return ValueUpdate(iId, "", "", "", vValue)
    Case Else
      If Main.bDevicesDebug Then Main.WriteDebugLog("[Devices] Invalid valuenum given!")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update device with iId with vValue, vValue2 etc
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ValueUpdate(iId As Integer, vValue As Variant, vValue2 As Variant, vValue3 As Variant, vValue4 As Variant) As Boolean

  Dim rResult, rDevice As Result
  Dim bUpdated As Boolean
  Dim vValUpdated As New Collection
  Dim rDeviceLog As Result
  Dim vVal As Variant
  Dim sLabel, sLabel2, sLabel3, sLabel4, sValue, sValue2, sValue3, sValue4, sName, sType As String

  If vValue = "Dim 100" Then vValue = "On"
  If vValue = "Dim 99" Then vValue = "On"
  If vValue = "Dim 0" Then vValue = "Off"

  rDevice = Main.hDB.Exec("SELECT name, label, label2, label3, label4, value, value2, value3, value4, log, dimable, switchable FROM devices WHERE id = &1", iId)
  If rDevice.Count = 1 Then
    sName = rDevice!name
    sLabel = rDevice!label
    sLabel2 = rDevice!label2
    sLabel3 = rDevice!label3
    sLabel4 = rDevice!label4
    sValue = rDevice!value
    sValue2 = rDevice!value2
    sValue3 = rDevice!value3
    sValue4 = rDevice!value4
    If rDevice!switchable Then
      sType = "switch"
    Else If rDevice!dimable Then
      sType = "dimmer"
    Endif
  Endif

  If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] ValueUpdate() called for device with id '") & iId & ("' and name '") & rDevice!name & "'")
  If vValue <> Null Then
    If Comp(vValue, sValue, gb.IgnoreCase) <> 0 Then
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue, iId)
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device change triggered for device with id '") & iId & ("' and value1 '") & vValue & "'")
      EventLoop.DeviceChanged(iId, 1, vValue, sLabel)
      bUpdated = True
      If rDevice!log Then vValUpdated["value"] = vValue
      If rDevice!dimable = True Or If rDevice!switchable = True Then Main.RefreshControlPage()
      ' Move EndIf down further so that RPC calls from zwave devices where the value has not actually changed do not cause "spam" messages
      If Main.hIViewer Then Main.hIViewer.SendUpdateForDevice(sName, vValue, "value", IIf(sType, sType, "value"))
      If Main.hMQTT Then Main.hMQTT.PublishMsg(sName & "/value", vValue)
      If Main.hSmartVisuServer Then Main.hSmartVisuServer.SendUpdateDevice(sName, vValue, IIf(sType, sType, "value"))
    Endif
  Endif
  If vValue2 <> Null Then
    If Comp(vValue2, sValue2, gb.IgnoreCase) <> 0 Then
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value2 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue2, iId)
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device change triggered for device with id '") & iId & ("' and value2 '") & vValue2 & "'")
      EventLoop.DeviceChanged(iId, 2, vValue2, sLabel2)
      bUpdated = True
      If rDevice!log Then vValUpdated["value2"] = vValue2
      ' Move EndIf down further so that RPC calls from zwave devices where the value has not actually changed do not cause "spam" messages
      If Main.hIViewer Then Main.hIViewer.SendUpdateForDevice(sName, vValue2, "value2", IIf(sType, sType, "value2"))
      If Main.hMQTT Then Main.hMQTT.PublishMsg(sName & "/value2", vValue2)
      If Main.hSmartVisuServer Then Main.hSmartVisuServer.SendUpdateDevice(sName, vValue, IIf(sType, sType, "value2"))
    Endif
  Endif
  If vValue3 <> Null Then
    If Comp(vValue3, sValue3, gb.IgnoreCase) <> 0 Then
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value3 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue3, iId)
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device change triggered for device with id '") & iId & ("' and value3 '") & vValue3 & "'")
      EventLoop.DeviceChanged(iId, 3, vValue3, sLabel3)
      bUpdated = True
      If rDevice!log Then vValUpdated["value3"] = vValue3
      ' Move EndIf down further so that RPC calls from zwave devices where the value has not actually changed do not cause "spam" messages
      If Main.hIViewer Then Main.hIViewer.SendUpdateForDevice(sName, vValue3, "value3", IIf(sType, sType, "value3"))
      If Main.hMQTT Then Main.hMQTT.PublishMsg(sName & "/value3", vValue3)
      If Main.hSmartVisuServer Then Main.hSmartVisuServer.SendUpdateDevice(sName, vValue, IIf(sType, sType, "value3"))
    Endif
  Endif
  If vValue4 <> Null Then
    If Comp(vValue4, sValue4, gb.IgnoreCase) <> 0 Then
      rResult = Main.hDB.Exec("UPDATE devices SET lastchanged = &1, lastseen = &2, value4 = &3 WHERE id = &4", Format(Now(), "yyyy-mm-dd hh:nn:ss"), Format(Now(), "yyyy-mm-dd hh:nn:ss"), vValue4, iId)
      If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Device change triggered for device with id '") & iId & ("' and value4 '") & vValue4 & "'")
      EventLoop.DeviceChanged(iId, 4, vValue4, sLabel4)
      bUpdated = True
      If rDevice!log Then vValUpdated["value4"] = vValue4
      ' Move EndIf down further so that RPC calls from zwave devices where the value has not actually changed do not cause "spam" messages
      If Main.hIViewer Then Main.hIViewer.SendUpdateForDevice(sName, vValue4, "value4", IIf(sType, sType, "value4"))
      If Main.hMQTT Then Main.hMQTT.PublishMsg(sName & "/value4", vValue4)
      If Main.hSmartVisuServer Then Main.hSmartVisuServer.SendUpdateDevice(sName, vValue, IIf(sType, sType, "value4"))
    Endif
  Endif
  If Not bUpdated Then
    rResult = Main.hDB.Exec("UPDATE devices SET lastseen = &1 WHERE id = &2", Format(Now(), "yyyy-mm-dd hh:nn:ss"), iId)
  Else
    If rDevice!log Then
      Main.hDB.Begin()
      rDeviceLog = Main.hDB.Create("devices_log")
      rDeviceLog!deviceid = iId
      rDeviceLog!lastchanged = Now()
      For Each vVal In vValUpdated
        rDeviceLog[vValUpdated.Key] = vVal
        If Main.bDevicesDebug Then Main.WriteDebugLog(("[Devices] Creating log record for device with id '") & iId & "' and '" & vValUpdated.Key & "' = '" & vVal & "'")
      Next
      rDeviceLog.Update()
      Main.hDB.Commit()
    Endif
  Endif

  Events.CheckDeviceChangeEvents(iId, 5, Format(Now(), "yyyy-mm-dd hh:nn:ss"))
  Main.RefreshDeviceList()

  If rResult Then
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update battery status for device with iId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Battery(iId As Integer, vValue As Variant) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("UPDATE devices SET batterystatus = &1 WHERE id = &2", vValue, iId)

  If rResult.Count Then
    Return True
  Else
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' mail battery status for device with battery status set (sType can be '', all or empty)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function MailBatteryStatus(Optional sType As String) As Boolean

  Dim rDevice As Result
  Dim sMessageBody As String
  Dim bFound As Boolean = False

  Try rDevice = Main.hDB.Exec("SELECT name, address, batterystatus, lastseen FROM devices WHERE enabled is TRUE")
  If rDevice.Available Then
    If rDevice.Count Then
      For Each rDevice
        If LCase(sType) = "empty" Then
          If LCase(rDevice!batterystatus) = "empty" Then
            sMessageBody &= "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus & "  " & Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
            bFound = True
          Endif
        Else
          If rDevice!batterystatus Then
            sMessageBody &= "\r" & rDevice!address & " - " & rDevice!name & "  " & rDevice!batterystatus & "  " & Replace$(Str$(Format(rDevice!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
            bFound = True
          Endif
        Endif
      Next
      ' sent e-mail with status
      If bFound Then
        Mail.SendMail(Application.Name & (": Battery Status"), ("These Devices have their Battery status match selection '") & sType & "':\n" & sMessageBody, Main.sEmailToAddress)
      Endif
    Endif
  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' erase all logged data for device with iId
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EraseLog(iId As Integer)

  Try Main.hDB.Exec("DELETE FROM devices_log WHERE deviceid = &1", iId)

End

Private Sub FindUniqueName(sName As String) As String

  Dim rResult As Result
  Dim iNo As Integer

  For iNo = 1 To 50
    Try rResult = Main.hDB.Exec("SELECT * FROM devices WHERE name = &1", sName & iNo)
    If rResult.Count Then
      Continue
    Else
      Return sName & iNo
    Endif
  Next

End

Public Sub AutoCreateDevice(sAddress As String, iInterface As Integer, sType As String, Optional sPrefName As String) As Integer

  Dim rResult As Result
  Dim sName As String
  Dim iType As Integer

  If sPrefName Then
    sName = FindUniqueName(Trim(sPrefName) & " #")
  Else
    sName = FindUniqueName(sType & " device #")
  Endif

  ' try to select correct device type
  Select UCase(sType)
    Case "DS18S20"
      iType = 15
    Case "DS2423"
      iType = 58
    Case "DS2438"
      iType = 65
    Case "DS18B20"
      iType = 213
    Case "X10"
      iType = 36
    Case "X10SECURITY", "VISONICSENSOR", "VISONICMOTION", "VISONICCODE", "VISONICPWRCODE"
      iType = 1
    Case "AC"
      iType = 60
    Case "FS20"
      iType = 210
    Case "FHTTFK"
      iType = 156
    Case "FHT80"
      iType = 157
    Case "EM1000", "EM1000-S", "EM1000-EM"
      iType = 166
    Case "EM1000-GZ"
      iType = 167
    Case "HDDTEMP"
      iType = 11
    Case "DSC DWS"
      iType = 41
    Case "DSC PIR"
      iType = 40
    Case "DSC SMOKE"
      iType = 42
    Case "PLCBUS"
      iType = 117
    Case "JEELABS NODE"
      iType = 142
    Case "PWRCTRL"
      iType = 135
    Case "RFXSENSOR TEMP"
      iType = 100
    Case "RFXSENSOR BARO"
      iType = 139
    Case "RFXSENSOR SUPPLY"
      iType = 102
    Case "ARC"
      iType = 59
    Case "ATI REMOTE WONDER", "ATI"
      iType = 113
    Case "ATI WONDER PLUS", "ATI2"
      iType = 114
    Case "HE", "HEUK"
      iType = 43
    Case "HEEU"
      iType = 154
    Case "RFXMETER"
      iType = 9
    Case "TEMP1"
      iType = 214
    Case "TEMP2"
      iType = 81
    Case "TEMP3"
      iType = 84
    Case "TEMP4"
      iType = 85
    Case "TEMP5"
      iType = 223
    Case "HUM1"
      iType = 223
    Case "TH1"
      iType = 7
    Case "TH2"
      iType = 26
    Case "TH3"
      iType = 39
    Case "TH4"
      iType = 215
    Case "TH5"
      iType = 74
    Case "TH6"
      iType = 93
    Case "TH7"
      iType = 226
    Case "TH8"
      iType = 235
    Case "THB1"
      iType = 32
    Case "THB2"
      iType = 33
    Case "RAIN1"
      iType = 95
    Case "RAIN2"
      iType = 38
    Case "RAIN3"
      iType = 231
    Case "WIND1"
      iType = 74
    Case "WIND2"
      iType = 97
    Case "WIND3"
      iType = 37
    Case "WIND4"
      iType = 233
    Case "UV1"
      iType = 8
    Case "UV2"
      iType = 99
    Case "UV3"
      iType = 232
    Case "DT1"
      iType = 39
    Case "WEIGHT1"
      iType = 22
    Case "WEIGHT2"
      iType = 23
    Case "ELEC1", "ELEC1_1", "ELEC1_2", "ELEC1_3"
      iType = 66
    Case "ELEC2"
      iType = 78
    Case "DWS"
      iType = 1
    Case "MOTION"
      iType = 69
    Case "REMOTE"
      iType = 71
    Case "ANSLUT"
      iType = 228
    Case "DM10"
      iType = 179
    Case "DIGIMAX"
      iType = 180
    Case "NINJA"
      iType = 194
    Case "SMOKE"
      iType = 174
    Case "IO0", "IO1", "IO2", "IO3", "IO4", "IO5", "IO6", "IO7"
      iType = 192
    Case "UPS"
      iType = 14
    Case "ZWAVE"
      iType = 61
    Case "BLUETOOTH"
      iType = 18
    Case "S300TH"
      iType = 173
    Case "SQUEEZEPLAYER"
      iType = 112
    Case "HM_CC_TC"
      iType = 234
    Case "P1-POWERUSAGE"
      iType = 246
    Case "P1-POWERDELIVER"
      iType = 255
    Case "P1-GASUSAGE"
      iType = 256
    Case "CCOST"
      iType = 131
    Case "TEMP6"
      iType = 248
    Case "TEMP7"
      iType = 251
    Case "TEMP8"
      iType = 247
    Case "TEMP9"
      iType = 252
    Case "HUM2"
      iType = 247
    Case "TH9"
      iType = 250
    Case "RAIN4"
      iType = 253
    Case "RAIN5"
      iType = 247
    Case "WIND5"
      iType = 254
    Case "WIND6"
      iType = 247
    Case "PIONEER"
      iType = 258
    Case "MEDIA.BASIC"
      iType = 259
    Case "MEDIA.MPTRNSPT"
      iType = 260
    Case "MEDIA.MPMEDIA"
      iType = 261
    Case "OSD.BASIC"
      iType = 262
    Case "T"
      iType = 263
    Case "TH"
      iType = 264
    Case "THB"
      iType = 265
    Case "WIND"
      iType = 266
    Case "RAIN"
      iType = 267
    Case "SOL"
      iType = 268
    Case "UV"
      iType = 269
    Case "ELVCUBE"
      iType = 270
    Case "ELVDOOR"
      iType = 271
    Case "ELVWALLTHERMO"
      iType = 272
    Case "ELVRADTHERMO"
      iType = 273
    Case "ELEC3"
      iType = 274
    Case "YOULESS"
      iType = 281
    Case "OPENTHERM THERMOSTAT"
      iType = 237
    Case "OPENTHERM BURNER"
      iType = 238
    Case "OPENTHERM BOILER"
      iType = 239
    Case "OPENTHERM CENTRAL HEATING"
      iType = 240
    Case "OPENTHERM OUTSIDE SENSOR"
      iType = 241
    Case "LIGHTWAVERF"
      iType = 230
    Case "MEIANTECH"
      iType = 285
    Case "PLUGWISE SWITCH"
      iType = 297
    Case "KMTRONIC INPUT"
      iType = 298
    Case "KMTRONIC OUTPUT"
      iType = 299
    Case "GENERICIO"
      iType = 301
    Case "BINARY POWER SWITCH"
      iType = 61
    Case "ROUTING MULTILEVEL SWITCH", "MULTILEVEL SWITCH"
      iType = 62
    Case "ROUTING BINARY SENSOR", "BINARY SENSOR"
      iType = 63
    Case "DOOR LOCK"
      iType = 333
    Case Else
      Main.WriteDebugLog(("[Devices] Auto create device '" & sName & "' failed, because of unknown type!"))
      Main.WriteDebugLog(("[Devices] Please report device type '" & sType & "' with address '" & sAddress & "' and interface '" & FindNameForInterface(iInterface) & "' (" & iInterface & ") to support@domotiga.nl"))
      Return
  End Select

  Main.WriteDebugLog(("[Devices] Auto created device '" & sName & "' with address '" & sAddress & "' of type '" & FindNameForDeviceType(iType) & "' with interface '" & FindNameForInterface(iInterface) & "'"))

  ' create device
  Main.hDB.Begin()
  rResult = Main.hDB.Create("devices")
  rResult!name = sName
  rResult!module = iType
  rResult!interface = iInterface
  rResult!address = sAddress
  rResult!enabled = True
  rResult!onicon = "new.png"
  rResult!dimicon = "new.png"
  rResult!officon = "new.png"
  rResult!hide = False
  rResult!log = False
  rResult!logdisplay = False
  rResult!logspeak = False
  rResult!dimable = False
  rResult!switchable = False
  rResult!firstseen = Now()
  rResult!lastseen = Now()
  rResult!location = 1
  rResult.Update()
  Main.hDB.Commit()

  ' try to get id of created device
  Try rResult = Main.hDB.Exec("SELECT MAX(id) AS lastid FROM devices")
  If Not Error Then
    Return rResult!lastid
  Else
    Return 0
  Endif

End

Public Sub CheckRepeatDevice()

  Dim rResult As Result
  Dim dLastSeen As Date
  Dim period As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE repeatstate IS TRUE AND enabled is TRUE")
  For Each rResult
    period = rResult!repeatperiod
    dLastSeen = rResult!lastseen
    If (Now() > DateAdd(dLastSeen, gb.Minute, period)) Then
      Devices.SetDevice(rResult!name, rResult!value)
    Endif
  Next

End

Public Sub CheckResetDevice()

  Dim rResult As Result
  Dim dLastSeen As Date
  Dim period As Integer

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE reset IS TRUE AND enabled is TRUE")
  For Each rResult
    period = rResult!resetperiod
    dLastSeen = rResult!lastseen
    If (rResult!value <> rResult!resetvalue) And (Now() > DateAdd(dLastSeen, gb.Minute, period)) Then
      If rResult!switchable Then
        Devices.SetDevice(rResult!name, rResult!resetvalue)
      Else
        Devices.ValueUpdateV2(rResult!id, 1, rResult!resetvalue)
        Devices.ValueUpdateV2(rResult!id, 2, rResult!value2)
        Devices.ValueUpdateV2(rResult!id, 3, rResult!value3)
        Devices.ValueUpdateV2(rResult!id, 4, rResult!value4)
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return type of control for device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CheckControlDevice(sAddress As String, iInterface As Integer) As String

  Dim rDeviceFind As Result

  Try rDeviceFind = Main.hDB.Exec("SELECT switchable, dimable FROM devices WHERE address LIKE &1 AND interface = &2 AND enabled is TRUE", sAddress, iInterface)
  If rDeviceFind.Available Then
    If rDeviceFind!switchable Then
      Return "Switch"
    Else If rDeviceFind!dimable Then
      Return "Dimmer"
    Else
      Return "Other"
    Endif
  Else
    Return "Switch"
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get the ID of the device with sDeviceName.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FindIdForDevice(sDeviceName As String) As Integer

  Dim rDevice As Result

  Try rDevice = Main.hDB.Exec("SELECT id FROM devices WHERE name = &1", sDeviceName)
  ' found only one unique entry?
  If rDevice.Count > 1 Then
    Main.WriteDebugLog(("[Devices] The following devices have same name:"))
    For Each rDevice
      Main.WriteDebugLog(("[Devices] Device with address '") & rDevice!address & "' is '" & rDevice!name & "'")
    Next
    Return 0
  ' ok this one seems useful
  Else If rDevice.Count = 1 Then
      Return rDevice!id
  ' no interface found, something is wrong
  Else
    Main.WriteDebugLog(("[Devices] Device with name '") & sDeviceName & ("' not found!"))
    Return 0
  Endif

Catch
  Main.WriteDebugLog(("[Devices] Error while trying to find id: ") & Error.Text & (" at ") & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' delete device with iId.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DeleteDevice(iId As Integer) As Boolean

  Main.hDB.Exec("DELETE FROM devices WHERE id = &1", iId)
  Main.hDB.Exec("DELETE FROM devices_log WHERE deviceid = &1", iId)
  Main.hDB.Exec("DELETE FROM devices_pachube WHERE deviceid = &1", iId)
  Main.hDB.Exec("DELETE FROM devices_bwired WHERE deviceid = &1", iId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' make device with iId hidden.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub HideDevice(iId As Integer) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("UPDATE devices SET hide = TRUE WHERE id = &1", iId)
  Return True

Catch
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Toggle device state
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ToggleDeviceValue(iId As Integer) As Boolean

  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT name , value FROM devices WHERE id = &1", iId)
  If rResult.count > 0 Then 
    Return SetDevice(rResult!name, Toggle(rResult!value))
  Else 
    Main.WriteDebugLog(("[Devices] Device with id '") & iId & ("' not found!"))
    Return False
  Endif 

Catch
  Return False

End
