' Gambas module file

' Description:
' GLatitude.module
' Contains code for Google Latitude.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public tLatitude As Timer
Public hLatitudeBadge As HttpClient
Public hLatitudeGeo As HttpClient
Public cLatitude As New Collection
Public cReverseGeo As New Collection

Public Sub Run()

  tLatitude = New Timer As "tLatitude"
  tLatitude.Delay = Main.iGLatitudePollTime * 1000 ' multiply for seconds
  tLatitude.Start

  FindBadges()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tLatitude_Timer()

  FindBadges()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find latitude devices and look up their locations
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub FindBadges()

  Dim sUrl As String
  Dim rResult As Result

  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Google Latitude"))
  If rResult.Available Then
    If rResult.Count Then

      If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] " & rResult.Count & " Google Latitude badge ID(s) found")

      For Each rResult
        sUrl = "http://www.google.com/latitude/apps/badge/api?user=" & rResult!address & "&type=json"
        hLatitudeBadge = New HttpClient As "hLatitudeBadge"
        hLatitudeBadge.URL = sUrl
        hLatitudeBadge.TimeOut = 8
        hLatitudeBadge.Tag = rResult!address
        hLatitudeBadge.Async = True
        hLatitudeBadge.Get()
        If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Fetching " & sUrl)
      Next
    Else
      Main.WriteDebugLog("[GLatitude] No Latitude devices found.")
    Endif
  Else
    Main.WriteDebugLog("[GLatitude] No Latitude devices found.")
  Endif

Catch
  Main.WriteDebugLog("[GLatitude] Error fetching Google Latitude data " & ERROR.Text & " at " & ERROR.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get latitude data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hLatitudeBadge_Read()

  Dim sData, sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cLatitude[Last.Tag] Then
    sData = cLatitude[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cLatitude[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' latitude data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hLatitudeBadge_Finished()

  Dim sBuffer, sMarker, sAddress, sLongitude, sLatitude As String
  Dim cGLat As Collection
  Dim dDate As Date

  Select Last.Code
    Case 200
      sBuffer = cLatitude[Last.Tag]
      cGLat = JSON.Decode(sBuffer)
      If cGLat.Count = 2 Then
        Try sLongitude = cGLat["features"][0]["geometry"]["coordinates"][0]
        If Error Then
          Main.WriteDebugLog(("[GLatitude] Received empty location fields, did you enable Latitude on your device? Used badge ID '" & Last.Tag & "'"))
          Last.Close
          Return
        Endif
        sLatitude = cGLat["features"][0]["geometry"]["coordinates"][1]
        dDate = DateAdd(Date(1970, 1, 1, 0, 0, 0), gb.Second, CInt(cGLat["features"][0]["properties"]["timeStamp"]))
        dDate = DateAdd(dDate, gb.Hour, 1)
        If Main.bGLatitudeDebug Then
          Main.WriteDebugLog("[GLatitude] BadgeID: " & Last.Tag)
          Main.WriteDebugLog("[GLatitude] Position Lng: " & sLongitude)
          Main.WriteDebugLog("[GLatitude] Position Lat: " & sLatitude)
          Main.WriteDebugLog("[GLatitude] Updated at: " & dDate)
          ' PRINT "PhotoUrl: " & cGLat["features"][0]["properties"]["photoUrl"]
          ' PRINT "PlaceCardUrl: " & cGLat["features"][0]["properties"]["placardUrl"]
        Endif
        sMarker = FindMarker(sLatitude, sLongitude, Main.iGLatitudeRange)
        If Len(sMarker) Then
          If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Found Marker: " & sMarker)
          UpdateUser(Last.Tag, sMarker, sLatitude, sLongitude, dDate)
        Else
          ReverseGeo(Last.Tag, sLatitude, sLongitude, dDate)
        Endif
      Endif
    Case Else
      Main.WriteDebugLog(("Unknown error occured while trying to get Google Latitude data!"))
  End Select
  Last.Close

Catch
  Main.WriteDebugLog("[GLatitude] Error parsing Google Latitude data " & ERROR.Text & " at " & ERROR.Where)

End

Public Sub hLatitudeBadge_Error()

  Main.WriteDebugLog(("[GLatitude] Error fetching latitude data: ") & hLatitudeBadge.Status)
  hLatitudeBadge.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find address for a given location
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ReverseGeo(sBadgeID As String, sLatitude As String, sLongitude As String, dUpdate As Date)

  Dim sUrl As String = "http://maps.googleapis.com/maps/api/geocode/json?latlng=" & sLatitude & "," & sLongitude & "&sensor=true"

  hLatitudeGeo = New HttpClient As "hLatitudeGeo"
  hLatitudeGeo.URL = sUrl
  hLatitudeGeo.TimeOut = 8
  hLatitudeGeo.Tag = sBadgeID & "|" & sLatitude & "|" & sLongitude & "|" & dUpdate
  hLatitudeGeo.Async = True
  hLatitudeGeo.Get()
  If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Fetching reverse Geo data with " & sUrl)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get address data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hLatitudeGeo_Read()

  Dim sData, sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cReverseGeo[Last.Tag] Then
    sData = cReverseGeo[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cReverseGeo[Last.Tag] = sData

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse and save address data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hLatitudeGeo_Finished()

  Dim sBuffer, sAddress As String
  Dim cGMap As Collection
  Dim sSplit As String[]

  Select Last.Code
    Case 200
      sBuffer = cReverseGeo[Last.Tag]
      cGMap = JSON.Decode(sBuffer)
      Try sAddress = cGMap["results"][0]["formatted_address"]
      If Not Error Then
        If Len(sAddress) Then
          If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Found Address: " & sAddress)
        Else
          If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Didn't find Address")
          sAddress = "Unknown Address"
        Endif
      Endif
      sSplit = Split(Last.Tag, "|")
      If sSplit.Count = 4 Then UpdateUser(sSplit[0], sAddress, sSplit[1], sSplit[2], sSplit[3])
    Case Else
      Main.WriteLog(("Unknown error occured while trying to get Google reverse Geo data!"))
  End Select
  Last.Close

End

Public Sub hLatitudeGeo_Error()

  Main.WriteDebugLog(("[GLatitude] Error fetching geo data: ") & hLatitudeGeo.Status)
  hLatitudeGeo.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' search database for nearest marker
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub FindMarker(fLat As String, fLong As String, iDist As Integer) As String

  Dim iCalc As Integer = IIf(Main.iGLatitudeRangeType, 6371, 3959) ' km's or miles
  Dim rResult As Result
  Dim sSql As String

  ' find the closest location that is within a radius of iDist km/miles to the lat/long coordinate
  sSql = "SELECT id,name, ( &1 * acos( cos( radians(&2) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(&3) ) + sin( radians(&4) ) * sin( radians( lat ) ) ) ) AS distance FROM markers HAVING distance < &5 ORDER BY distance LIMIT 1"
  rResult = Main.hDB.Exec(sSql, iCalc, fLat, fLong, fLat, iDist)
  If rResult.Count Then Return rResult!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update latitude devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub UpdateUser(sBadgeID As String, sLocation As String, sLatitude As String, sLongitude As String, dUpdated As Date)

  Dim iDeviceId As Integer

  iDeviceId = Devices.Find(sBadgeID, Devices.FindInterface("Google Latitude"), "Google Latitude")
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, sLocation, sLatitude, sLongitude, Format(dUpdated, "yyyy-mm-dd hh:nn:ss"))

End
