' Gambas module file

' Description:
' GLatitude.module
' Contains code for Google Latitude.

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2010 Ron Klinkien

' Read file called COPYING for license details.

Public tLatitude As Timer
Public hLatitudeBadge As HttpClient
Public hLatitudeGeo As HttpClient

Public Sub Run()

  tLatitude = New Timer As "tLatitude"
  tLatitude.Delay = Main.iGLatitudePollTime * 1000 ' multiply for seconds
  tLatitude.Start

  FindBadges()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tLatitude_Timer()

  FindBadges()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find latitude devices and look up their locations
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub FindBadges()

  Dim sUrl As String
  Dim rResult As Result

  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("Google Latitude"))
  If rResult.Available Then
    If rResult.Count Then
      For Each rResult
        If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] " & rResult.Count & " Google Latitude badge ID(s) found")
        sUrl = "http://www.google.com/latitude/apps/badge/api?user=" & rResult!address & "&type=json"
        hLatitudeBadge = New HttpClient As "hLatitudeBadge"
        hLatitudeBadge.URL = sUrl
        hLatitudeBadge.TimeOut = 8
        hLatitudeBadge.Tag = rResult!address
        hLatitudeBadge.Async = True
        hLatitudeBadge.Get()
        If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Fetching badgeid " & rResult!address & " with " & sUrl)
      Next
    Else
      Main.WriteDebugLog("[GLatitude] No Latitude devices found.")
    Endif
  Else
    Main.WriteDebugLog("[GLatitude] No Latitude devices found.")
  Endif

Catch
  Main.WriteDebugLog("[GLatitude] Error fetching Google Latitude data " & ERROR.Text & " at " & ERROR.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' latitude data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hLatitudeBadge_Finished()

  Dim sBuffer, sMarker, sAddress, sLongitude, sLatitude As String
  Dim cGLat As Collection
  Dim dDate As Date

  Select hLatitudeBadge.Code
    Case 200
      If Lof(hLatitudeBadge) Then Read #hLatitudeBadge, sBuffer, Lof(hLatitudeBadge)
      cGLat = JSON.Decode(sBuffer)
      If cGLat.Count = 2 Then
        sLongitude = cGLat["features"][0]["geometry"]["coordinates"][0]
        sLatitude = cGLat["features"][0]["geometry"]["coordinates"][1]
        dDate = DateAdd(Date(1970, 1, 1, 0, 0, 0), gb.Second, CInt(cGLat["features"][0]["properties"]["timeStamp"]))
        dDate = DateAdd(dDate, gb.Hour, 1)
        If Main.bGLatitudeDebug Then
          Main.WriteDebugLog("[GLatitude] BadgeID: " & hLatitudeBadge.Tag)
          Main.WriteDebugLog("[GLatitude] Position Lng: " & sLongitude)
          Main.WriteDebugLog("[GLatitude] Position Lat: " & sLatitude)
          Main.WriteDebugLog("[GLatitude] Updated at: " & dDate)
          ' PRINT "PhotoUrl: " & cGLat["features"][0]["properties"]["photoUrl"]
          ' PRINT "PlaceCardUrl: " & cGLat["features"][0]["properties"]["placardUrl"]
        Endif
        sMarker = FindMarker(sLatitude, sLongitude, Main.iGLatitudeRange)
        If Len(sMarker) Then
          If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Found Marker: " & sMarker)
          UpdateUser(hLatitudeBadge.Tag, sMarker, sLatitude, sLongitude, dDate)
        Else
          ReverseGeo(hLatitudeBadge.Tag, sLatitude, sLongitude, dDate)
        Endif
      Endif
    Case Else
      Main.WriteLog(("Unknown error occured while trying to get Google Latitude data!"))
  End Select
  hLatitudeBadge.Close

Catch
  Main.WriteDebugLog("[GLatitude] Error parsing Google Latitude data " & ERROR.Text & " at " & ERROR.Where)

End

Public Sub hLatitudeBadge_Error()

  Main.WriteDebugLog(("[GLatitude] Error fetching latitude data: ") & hLatitudeBadge.Status)
  hLatitudeBadge.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find address for a given location
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ReverseGeo(sBadgeID As String, sLatitude As String, sLongitude As String, dUpdate As Date)

  Dim sUrl As String = "http://maps.google.com/maps/geo?q=" & sLatitude & "," & sLongitude & "&output=json"

  hLatitudeGeo = New HttpClient As "hLatitudeGeo"
  hLatitudeGeo.URL = sUrl
  hLatitudeGeo.TimeOut = 8
  hLatitudeGeo.Tag = sBadgeID & "|" & sLatitude & "|" & sLongitude & "|" & dUpdate
  hLatitudeGeo.Async = True
  hLatitudeGeo.Get()
  If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Fetching reverse Geo data with " & sUrl)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' fetched address data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hLatitudeGeo_Finished()

  Dim sBuffer, sAddress As String
  Dim cGMap As Collection
  Dim sSplit As String[]

  Select hLatitudeGeo.Code
    Case 200
      If Lof(hLatitudeGeo) Then Read #hLatitudeGeo, sBuffer, Lof(hLatitudeGeo)
      cGMap = JSON.Decode(sBuffer)
      Try sAddress = cGMap["Placemark"][0]["address"]
      If Not Error Then
        If Len(sAddress) Then
          If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Found Address: " & sAddress)
        Else
          If Main.bGLatitudeDebug Then Main.WriteDebugLog("[GLatitude] Didn't find Address")
          sAddress = "Unknown Address"
        Endif
      Endif
      sSplit = Split(hLatitudeGeo.Tag, "|")
      If sSplit.Count = 4 Then UpdateUser(sSplit[0], sAddress, sSplit[1], sSplit[2], sSplit[3])
    Case Else
      Main.WriteLog(("Unknown error occured while trying to get Google reverse Geo data!"))
  End Select
  hLatitudeGeo.Close

End

Public Sub hLatitudeGeo_Error()

  Main.WriteDebugLog(("[GLatitude] Error fetching geo data: ") & hLatitudeGeo.Status)
  hLatitudeGeo.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' search database for nearest marker
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub FindMarker(fLat As String, fLong As String, iDist As Integer) As String

  Dim iCalc As Integer = IIf(Main.iGLatitudeRangeType, 6371, 3959) ' km's or miles
  Dim rResult As Result
  Dim sSql As String

  ' find the closest location that is within a radius of iDist km/miles to the lat/long coordinate
  sSql = "SELECT id,name, ( &1 * acos( cos( radians(&2) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(&3) ) + sin( radians(&4) ) * sin( radians( lat ) ) ) ) AS distance FROM markers HAVING distance < &5 ORDER BY distance LIMIT 1"
  rResult = Main.hDB.Exec(sSql, iCalc, fLat, fLong, fLat, iDist)
  If rResult.Count Then Return rResult!name

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' update latitude devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub UpdateUser(sBadgeID As String, sLocation As String, sLatitude As String, sLongitude As String, dUpdated As Date)

  Dim iDeviceId As Integer

  iDeviceId = Devices.Find(sBadgeID, Devices.FindInterface("Google Latitude"), "Google Latitude")
  If iDeviceId Then Devices.ValueUpdate(iDeviceId, sLocation, sLatitude, sLongitude, Format(dUpdated, "yyyy-mm-dd hh:nn:ss"))

End
