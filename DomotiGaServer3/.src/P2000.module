' Gambas module file

' Description:
' P2000.module
' Monitor P2000 feed for ambulance, firebrigade dispatches near your location.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Credits: Inspired by AZ_P2000.vb which was written by A.A. van Zoelen.

' Read file called COPYING for license details.

Public hP2000 As HttpClient
Public tP2000 As New Timer
Public sBuffer As String

Public cTitle As New Collection
Public cLink As New Collection
Public cDescription As New Collection
Public cInfo As New Collection
Public cGeoLat As New Collection
Public cGeoLong As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  Try tP2000.Stop

  ' create poll timer
  tP2000 = New Timer As "tP2000"
  tP2000.Delay = Main.iP2000Polltime * 1000
  tP2000.Start
  If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Started poll timer."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tP2000_Timer()

  If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Updating data."))
  FetchFeedData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Tries to fetch p2000 data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FetchFeedData()

  Dim sURL As String = "http://feeds.livep2000.nl"

  ' if regio(s) set, add parameter to url
  ' 0 = All
  ' 1 = Groningen
  ' 2 = Friesland
  ' 3 = Drenthe
  ' 4 = IJsselland
  ' 5 = Twente
  ' 6 = Noord en Oost Gelderland
  ' 7 = Gelderland Midden
  ' 8 = Gelderland Zuid
  ' 9 = Utrecht
  ' 10 = Noord Holland Noord
  ' 11 = Zaanstreek-Waterland
  ' 12 = Kennemerland
  ' 13 = Amsterdam-Amstelland
  ' 14 = Gooi en Vechtstreek
  ' 15 = Haaglanden
  ' 16 = Hollands Midden
  ' 17 = Rotterdam Rijnmond
  ' 18 = Zuid Holland Zuid
  ' 19 = Zeeland
  ' 20 = Midden- en West-Brabant
  ' 21 = Brabant Noord
  ' 22 = Brabant Zuid en Oost
  ' 23 = Limburg Noord
  ' 24 = Limburg Zuid
  ' 25 = Flevoland

  If Len(Main.sP2000Regios) And If Main.sP2000Regios <> "0" Then sURL = sURL & "?r=" & Main.sP2000Regios

  ' if discipline(s) set, add parameter to url
  ' 0 = All
  ' 1 = Brandweer
  ' 2 = Ambulance
  ' 3 = Politie
  ' 4 = KNRM

  If Len(Main.sP2000Disciplines) And If Main.sP2000Disciplines <> "0" Then sURL = sURL & IIf(Main.sP2000Regios, "&", "?") & "d=" & Main.sP2000Disciplines

  If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Fetching data with request '") & sURL & "'")

  hP2000 = New HttpClient As "hP2000"
  hP2000.URL = sURL
  hP2000.Async = True
  hP2000.TimeOut = 5
  hP2000.Get

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hP2000_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hP2000_Finished()

  Select Last.Code
    Case 200
      ' too noisy
      ' If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Received data '") & sBuffer & "'")
      ParseP2000Data(sBuffer)
    Case Else
      If Main.bP2000Debug Then Main.WriteLog(("[P2000] Unknown error occured while trying to fetch P2000 feed data!"))
  End Select
  Last.Close
  sBuffer = Null

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error raised
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hP2000_Error()

  If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] Error fetching P200) feed: " & Last.Status)
  Try Last.Close

End

Private Sub ParseP2000Data(sData As String)

  Dim sTitle, sMsg, sMap As String
  Dim iCnt As Integer

  If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Processing XML data."))
  ParseP2000XML(sBuffer)
  'sMsg = "<html>"
  For Each sTitle In cTitle
    sMsg &= sTitle & "\n"
    If Main.bP2000CreateMapLink Then
      sMap = CreateImage(cGeoLat[cTitle.Key], cGeoLong[cTitle.Key])
      sMsg &= sMap & "\n"
    Endif
    sMsg &= "\n"
  Next
  'sMsg &= "</html>"
  Main.SetGlobalVar("P2000_Message", sMsg)

End

Private Sub CreateImage(fLat As String, fLon As String) As String

  Dim sLink As String

  fLat = Replace(fLat, ",", ".")
  fLon = Replace(fLon, ",", ".")

  'sLink = "<a href='http://maps.google.com/maps?q=" & fLat & "%" & fLon & "'></br>"
  sLink = "<a href='https://www.google.com/maps/preview#!q=" & fLat & "&2" & fLon & "'></br>"
  sLink &= "<img src='http://cbk3.google.com/cbk?output=thumbnail&cb_client=maps_sv&thumb=2&ll=" & fLat & "," & fLon & "&w=300&h=118'>"
  Return sLink

End

Private Sub ParseP2000XML(sBuffer As String)

  Dim XmlR As New XmlReader
  Dim iMsg, iCnt As Integer
  Dim sFieldName, sFieldPos As String
  Dim sFieldHeader As New String[10]
  Dim iMtrsAway As Long

  ' empty collections first
  cTitle.Clear
  cLink.Clear
  cDescription.Clear
  cInfo.Clear
  cGeoLat.Clear
  cGeoLong.Clear

  XmlR.FromString(sBuffer)

  ' loop through the buffer
  While Not XmlR.Eof
    If XmlR.State = XmlReaderNodeType.Element Then sFieldHeader[XmlR.Node.depth] = XmlR.Node.name

    If CStr(XmlR.Node.Name) = "#text" Or If CStr(XmlR.Node.Name) = "#cdata" Then
      ' concat all headers to store position
      For iCnt = 0 To XmlR.Node.Depth - 1
        sFieldPos &= sFieldHeader[iCnt] & "|"
      Next

      ' found an item field, parse data
      If sFieldPos = "rss|channel|item|" Then 
        Select sFieldName
          Case "title"

            ' if max number of messages is reached bail out
            If iMsg = Main.iP2000Messages Then 
              XmlR.Close
              Break
            Endif
            cTitle.Add(XmlR.Node.value, iMsg)
            If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] Title: " & XmlR.Node.Value)
          Case "link"
            cLink.Add(XmlR.Node.value, iMsg)
            If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] Link: " & XmlR.Node.Value)
          Case "br"
            If XmlR.Node.Value <> "]]>" Then
              If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] Info: " & XmlR.Node.Value)
              If cInfo.Exist(iMsg) Then
                cInfo[iMsg] &= XmlR.Node.Value
              Else
                cInfo.Add(XmlR.Node.value, iMsg)
              Endif
            Endif
          Case "geo:lat"
            cGeoLat.Add(XmlR.Node.value, iMsg)
            If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] GeoLat: " & XmlR.Node.Value)
          Case "geo:long"
            cGeoLong.Add(XmlR.Node.value, iMsg)
            If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] GeoLong: " & XmlR.Node.Value)

            ' if match text defined check if found in info text
            If Len(Main.sP2000Filter) And If Not InStr(cTitle[iMsg], Main.sP2000Filter) Then
              If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Match text '") & Main.sP2000Filter & ("' not found in '") & cTitle[iMsg] & ("', skipping message."))
              RemoveCollection(iMsg)
              Continue
            Else
              ' if location is within specified range keep msg
              If Main.iP2000GeoRange Then
                iMtrsAway = GetDistance(Main.iAstroLatitude, Main.iAstroLongitude, cGeoLat[iMsg], cGeoLong[iMsg])
                If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Location is ") & iMtrsAway & (" meters away from home."))
                If iMtrsAway < Main.iP2000GeoRange Then
                  If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Which is inside range specified."))
                Else
                  If Main.bP2000Debug Then Main.WriteDebugLog(("[P2000] Which is outside range specified, skipping message."))
                  RemoveCollection(iMsg)
                  Continue
                Endif
              Endif
            Endif
            Inc iMsg
          Case "description"
            cDescription.Add(XmlR.Node.value, iMsg)
            If Main.bP2000Debug Then Main.WriteDebugLog("[P2000] Description: " & XmlR.Node.Value)
        End Select
      Endif
      sFieldPos = ""
    Else
      sFieldName = XmlR.Node.Name
    Endif
    XmlR.Read()
  Wend
  XmlR.Close

Catch
  Main.WriteDebugLog("ERROR: ParseP2000XML " & Error.Text & " at " & Error.Where)

End

Private Function RemoveCollection(sKey As String)

  ' remove collection
  cTitle.Remove(sKey)
  cLink.Remove(sKey)
  cDescription.Remove(sKey)
  cInfo.Remove(sKey)
  cGeoLat.Remove(sKey)
  cGeoLong.Remove(sKey)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' calculate the distance
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GetDistance(fLat As String, fLon As String, fLatMsg As String, fLonMsg As String) As Long

  Dim theta As Float
  Dim dist As Float

  theta = Val(fLon) - Val(fLonMsg)
  dist = Sin(deg2rad(Val(fLat))) * Sin(deg2rad(Val(fLatMsg))) + Cos(deg2rad(Val(fLat))) * Cos(deg2rad(Val(fLatMsg))) * Cos(deg2rad(theta))
  dist = ACos(dist)
  dist = rad2deg(dist)
  dist = dist * 60 * 1.1515
  ' convert from miles to meters
  dist = (dist * 1.609344) * 1000
  Return CLong(dist)

End

'
'  This function get the arccos function from arctan function    
'
Private Function acos(fRad As Float) As Float

  Dim fPi As Float = 3.14159265358979323846

  If Abs(fRad) <> 1 Then
    Return fPi / 2 - ATan(fRad / Sqr(1 - fRad * fRad))
  Else If fRad = -1 Then
    Return fPi
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'  this function converts decimal degrees to radians
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function deg2rad(fDeg As Float) As Float

  Dim fPi As Float = 3.14159265358979323846

  Return (fDeg * fPi / 180)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'  this function converts radians to decimal degrees
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function rad2deg(fRad As Float) As Float

  Dim fPi As Float = 3.14159265358979323846

  Return (fRad * 180 / fPi)

End
