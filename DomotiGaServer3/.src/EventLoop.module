' Gambas module file

' Description:
' EventLoop.module
' This is a program loop where all events run which are not started by a timer event.
' It will be run 4 times per second (every 250mS)

' Development Status:
' This currently holds hardcodes events, these should be places inside the database instead and
' should be configurable via a GUI.

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2009 Ron Klinkien

' Read file called COPYING for license details.

Public Sub Run()

  Dim sPlantTalk, sFrom, sTo, sSql As String
  Dim rResult As Result

  ' create new log files if needed
  If Main.bNew_Month Then
    Main.Setup_Logfiles()
  End If

  ' put things that can be triggered on a minute boundary here
  ' this should be placed in a database table instead, with nice gui to manage. ;-)

  If Main.bNew_Minute Then

    Events.CheckTimeNowEvents()

    ' update DSC virtual LCD screen
    If Main.hDSC Then Main.hDSC.DSC_LCDText()

    ' store energy usage in database and rrd files every 5 minutes
    If Main.GlobalVar["Minute"] Mod 5 = 0 Then
      Energy.Log() ' write energy usage to *_usage tables
    End If

    ' mail list of devices with low battery
    ' and fetch random quote for this day
    If Main.bNew_Day Then
      ' Devices.MailBatteryStatus()
      Main.GlobalVar["Tagline"] = Main.Random_Text("remarks_tags")
    End If

    ' generate plant watering messages
    If Events.TimeCron("30 12,16,18 * * 0") Then
      sPlantTalk = Main.Random_Text("remarks_plants")
      VoiceText.Speak(("Your plants want to be watered. They gave me the following message: ") & sPlantTalk)
      Twitter.PostTweet(("Your plants wrote this msg: ") & sPlantTalk)
    End If

    ' if in normal/house mode, auto-go to mute mode
    If Events.TimeCron("30 22 * * 0-4") And InStr(Main.GlobalVar["House_Mode"], "normal") Then
      VoiceText.Speak(("I am going to mute mode now. Nite nite."))
      Main.ChangeMuteMode(True)
      Main.SetGlobalVar("Mode_Set", "auto")
    End If

    ' if I auto-went to mute mode, go to normal mode (don't mess with manually overides)
    If Events.TimeCron("0 7 * * 1-5") And InStr(Main.GlobalVar["Mode_Set"], "auto") Then
      Main.ChangeMuteMode(False)
      VoiceText.Speak(("Gooooodmorning."))
    End If

    ' home simulation
    If Main.GlobalVar["Simulation"] = "On" Then
      sFrom = Format(Date(Now() - 7), "yyyy-mm-dd") & " " & Format(Time(), "hh:nn")
      sTo = sFrom & ":59"
      sFrom = sFrom & ":00"
      sSql = "SELECT devices.name, devices_log. * FROM devices, devices_log where groups LIKE '%|Simulation|%' AND enabled = -1 AND Log = -1 AND (switchable = -1 OR dimable = -1) AND devices.id = deviceid AND devices_log.lastchanged >= '" & sFrom & "' and devices_log.lastchanged <='" & sTo & "'"
      rResult = Main.hDB.Exec(sSql)
      If rResult.Count Then
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Simulate] Got ") & rResult.Count & (" result(s)."))
        For Each rResult
          If Main.bEventsDebug Then Main.WriteDebugLog(("[Simulate] Setting device '") & rResult!name & "' to '" & rResult!value & "'")
          Devices.SetDevice(rResult!name, rResult!value)
        Next
      Endif
    Endif
  Endif

End

Public Sub DeviceChanged(iId As Integer, sField As String, sValue As String, sLabel As String)

  ' log device status changes who are not hidden and have log changes enabled
  If Devices.FindLogDisplayForDevice(iId) And Not Devices.FindHideForDevice(iId) Then
    Main.WriteLog(Devices.FindNameForDevice(iId) & " status changed to " & sValue & IIf(sLabel, " " & sLabel, "") & ".")
  End If

  Events.CheckDeviceChangeEvents(iId, sField, sValue)

  ' detect postal mail delivery
  If Devices.FindNameForDevice(iId) = "Mailbox Sensor" And If sValue == "open" Then
    ' grab video image with frontdoor camera
    If Main.bVideoServerEnabled Then
      VideoServer.Grab(0, ("Mailbox Status"), ("Someone just delivered you postal mail!"), Main.sEmailToAddress)
    End If
    'Mail.SendMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", Main.sEmailToAddress)
    ' Mail.SendCaptureByMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", 0, Main.sEmailToAddress)
    Main.WriteLog(("Mail delivered at front door, sending an e-mail."))
    Twitter.PostTweet(("Mail is just delivered at the front door."))
  End If

  ' detect doorbell ring
  If Devices.FindNameForDevice(iId) = "Doorbell" And If sValue == "on" Then
    ' grab video image with frontdoor camera
    If Main.bVideoServerEnabled Then
      VideoServer.Grab(0, ("Doorbell Status"), ("Someone just rang your doorbell!"), Main.sEmailToAddress)
    End If
    Main.WriteLog(("Someone just rang the Doorbell, sending an e-mail."))
    Twitter.PostTweet(("Someone just rang the Doorbell."))
  End If

  ' detect front door opening
  If Devices.FindNameForDevice(iId) = "Front Door Sensor" And If sValue == "open" Then
    ' grab video image with frontdoor camera
    If Main.bVideoServerEnabled Then
      VideoServer.Grab(0, ("Front Door Status"), ("Someone just opened the Front Door!"), Main.sEmailToAddress)
    End If
    Main.WriteLog(("Someone just opened the front door, sending an e-mail."))
    Twitter.PostTweet(("Someone just opened the front door."))
  End If

End
