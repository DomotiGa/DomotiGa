' Gambas module file

' Description:
' EventLoop.module
' This is a program loop where all events run which are not started by a timer event.
' It will be run 4 times per second (every 250mS)

' Development Status:
' This currently holds hardcodes events, these should be places inside the database instead and
' should be configurable via a GUI.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Public Sub Run()

  Dim sFrom, sTo, sSql As String
  Dim rResult As Result

  ' create new log files if needed
  If Main.bNew_Month Then
    Main.Setup_Logfiles()
  Endif

  ' put things that can be triggered on a minute boundary here
  ' this should be placed in a database table instead, with nice gui to manage. ;-)

  Events.CheckTimeNowEvents()

  Devices.CheckRepeatDevice()
  Devices.CheckResetDevice()

  ' Call the Plugin RunTask hook, to allow Modules/Interfaces to use it dynamically
  Plugin.RunTask()

  ' update DSC virtual LCD screen
  If Main.hDSC Then Main.hDSC.DSC_LCDText()

  ' run Z-Wave tasks
  If Main.hZWave Then Main.hZWave.RunTasks

  ' store energy usage in database and rrd files every 5 minutes
  If Main.GetGlobalVar("Minute") Mod 5 = 0 Then
    Energy.Log() ' write energy usage to *_usage tables
  Endif

  ' mail list of devices with low battery
  ' and fetch random quote for this day
  ' Devices.MailBatteryStatus("all")
  Main.SetGlobalVar("Tagline", Main.Random_Text("remarks_tags"))

  ' generate plant watering messages
  'IF Events.TimeCron("30 12,16,18 * * 0") THEN
  '  sPlantTalk = Main.Random_Text("remarks_plants")
  '  VoiceText.Speak(("Your plants want to be watered. They gave me the following message: ") & sPlantTalk)
  '  Twitter.PostTweet(("Your plants wrote this msg: ") & sPlantTalk)
  'END IF

  ' if in normal/house mode, auto-go to mute mode
  'IF Events.TimeCron("30 22 * * 0-4") AND InStr(Main.GetGlobalVar("House_Mode"), "normal") THEN
  '  VoiceText.Speak(("I am going to mute mode now. Nite nite."))
  '  Main.ChangeMuteMode(TRUE)
  '  Main.SetGlobalVar("Mode_Set", "auto")
  'END IF

  ' if I auto-went to mute mode, go to normal mode (don't mess with manually overides)
  'IF Events.TimeCron("0 7 * * 1-5") AND InStr(Main.GetGlobalVar("Mode_Set"), "auto") THEN
  '  Main.ChangeMuteMode(FALSE)
  '  VoiceText.Speak(("Gooooodmorning."))
  'END IF

  ' home simulation
  If Main.GetGlobalVar("Simulation") = "On" Then
    sFrom = Format(Date(Now() - 7), "yyyy-mm-dd") & " " & Format(Time(), "hh:nn")
    sTo = sFrom & ":59"
    sFrom = sFrom & ":00"
    sSql = "SELECT devices.name, devices_log. * FROM devices, devices_log where groups LIKE '%|Simulation|%' AND enabled = -1 AND Log = -1 AND (switchable = -1 OR dimable = -1) AND devices.id = deviceid AND devices_log.lastchanged >= '" & sFrom & "' and devices_log.lastchanged <='" & sTo & "'"
    rResult = Main.hDB.Exec(sSql)
    If rResult.Count Then
      If Main.bEventsDebug Then Main.WriteDebugLog(("[Simulate] Got ") & rResult.Count & (" result(s)."))
      For Each rResult
        If Main.bEventsDebug Then Main.WriteDebugLog(("[Simulate] Setting device '") & rResult!name & "' to '" & rResult!value & "'")
        Devices.SetDevice(rResult!id, rResult!value)
      Next
    Endif
  Endif

Catch
  Main.WriteDebugLog(("[EventLoop.Run] Error ") & Error.Text & (" at ") & Error.Where)

End

Public Sub DeviceChanged(iId As Integer, sField As String, sValue As String, sLabel As String)

  ' log device status changes for which log changes is enabled
  If Devices.FindLogDisplayForDevice(iId) Then
    Main.WriteLog(Devices.FindNameForDevice(iId) & " status changed to " & sValue & IIf(sLabel, " " & sLabel, "") & ".")
  Endif

  Events.CheckDeviceChangeEvents(iId, sField, sValue)

  ' detect postal mail delivery
  If Devices.FindNameForDevice(iId) = "Mailbox Sensor" And If sValue == "open" Then
    ' grab video image with frontdoor camera
    If Main.bVideoServerEnabled Then
      VideoServer.Grab(0, ("Mailbox Status"), ("Someone just delivered you postal mail!"), Main.sEmailToAddress)
    Endif
    'Mail.SendMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", Main.sEmailToAddress)
    ' Mail.SendCaptureByMail(Application.Name & ": Mailbox Status", "Someone just delivered you postal mail!", 0, Main.sEmailToAddress)
    Main.WriteLog(("Mail delivered at front door, sending an e-mail."))
    Twitter.PostTweet(("Mail is just delivered at the front door."))
  Endif

  ' detect doorbell ring
  If Devices.FindNameForDevice(iId) = "Doorbell" And If sValue == "on" Then
    ' grab video image with frontdoor camera
    If Main.bVideoServerEnabled Then
      VideoServer.Grab(0, ("Doorbell Status"), ("Someone just rang your doorbell!"), Main.sEmailToAddress)
    Endif
    Main.WriteLog(("Someone just rang the Doorbell, sending an e-mail."))
    Twitter.PostTweet(("Someone just rang the Doorbell."))
  Endif

  ' detect front door opening
  If Devices.FindNameForDevice(iId) = "Front Door Sensor" And If sValue == "open" Then
    ' grab video image with frontdoor camera
    If Main.bVideoServerEnabled Then
      VideoServer.Grab(0, ("Front Door Status"), ("Someone just opened the Front Door!"), Main.sEmailToAddress)
    Endif
    Main.WriteLog(("Someone just opened the front door, sending an e-mail."))
    Twitter.PostTweet(("Someone just opened the front door."))
  Endif

End
