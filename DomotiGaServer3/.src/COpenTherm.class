' Gambas class file

' Description:
' COpenTherm.class
' Support for OpenTherm gateway interface

' Development Status: Work in progress

' Links:
' http://www.tclcode.com/opentherm/index.html#intro

' Supported device addresses:
'
' Thermostat      : value1 = Room Temperature set point (°C)      - OpenTherm MsgID=16
'                   value2 = Room Temperature sensor (°C)         - OpenTherm MsgID=24
'                   value3 = Outside Temperature Sensor (°C)      - OpenTherm MsgID=27
'                   value4 = Status OpenTherm master
'                            - "Idle"                             - OpenTherm MsgID=0, Lowerbyte: 0000 0000
'                            - "Heating up room"                  - OpenTherm MsgID=0, Lowerbyte: 0000 0010
'                            - "Heating up boiler"                - OpenTherm MsgID=0, Lowerbyte: 0000 0100
'                            - "Cooling down room"                - OpenTherm MsgID=0, Lowerbyte: 0001 0000
'                            - "Error"                            - OpenTherm MsgID=0, Lowerbyte: 0000 0001
'
' CentralHeating  : value1 = CH set point (°C)                    - OpenTherm MsgID=57
'                   value2 = CH temperature (°C)                  - OpenTherm MsgID=1
'                   value3 = Modulation level (%)                 - OpenTherm MsgID=17
'                   value4 = Water pressure (Bar)                 - OpenTherm MsgID=18
'
'
' Boiler          : value1 = Boiler set point (°C)                - OpenTherm MsgID=56
'                   value2 = Boiler water temperature (°C)        - OpenTherm MsgID=25
'                   value3
'                   value4
'
' Burner          : value1 = Flame status  (On/Off)               - OpenTherm MsgID=0, Lowerbyte: 0000 1000
'                   value2 = Burner starts (counter)              - OpenTherm MsgID=116
'                   value3 = CH Burner operation (hours)          - OpenTherm MsgID=120
'                   value4 = DHW Burner operation (hours)         - OpenTherm MsgID=123
'
' Outside         : value1 = Outside Temperature Sensor (°C)      - OpenTherm MsgID=27
'                   value2
'                   value3
'                   value4

' Credits: BreFra (Frank van Breugel)

' DomotiGa - an open source home automation program.
' Copyright(C) 2009-2012 Ron Klinkien.

' Read file called COPYING for license details.

Property Port As String
Property OpenThermDebug As Boolean
Property OutsideSensor As Boolean
Property SyncClock As Boolean
Property PollTime As Integer
Property TemperatureOverride As String
Property Thermostat As String

Private sPort As String
Private bOpenThermDebug As Boolean
Private bOutsideSensor As Boolean
Private bSyncClock As Boolean
Private sThermostat As String
Private sTemperatureOverride As String
Private iPollTime As Integer

Public tOpenTherm As Timer

Public hOpenTherm As New SerialPort
Private sBuffer As String
Private sTemperatureOverrideStatus As String = ""
Private bValidOutsideSensor As Boolean = False

Private sDescription As String[] = Split("Status,Control setpoint,Remote parameter flags,Maximum relative modulation level,Boiler capacity and modulation limits,Room Setpoint,Relative modulation level,CH water pressure,Room temperature,Boiler water temperatur,DHW temperature,Outside temperature,Return water temperatur,DHW setpoint boundaries,Max CH setpoint boundaries,DHW setpoint,Max CH water setpoint,Burner starts,CH pump starts,DHW pump/valve starts,DHW burner starts,Burner operation hours,CH pump operation hours,DHW pump/valve operation hours,DHW burner operation hours", ",")

' local status variables
Private sOutsideTemp As String            ' outside temperature
Private bOverrideActive As Boolean        ' indicates if setpoint override is active
Private bOverrideSend As Boolean          ' indicates if override setpoint is send to gateway
Private fCurrentSetPoint As Float         ' setpoint received from gateway
Private fOverrideSetPoint As Float        ' setpoint to override existing thermostat setpoint
Private fOriginalSetPoint As Float        ' setpoint of thermostat before override
Private fBoilerSetPoint As Float          ' boiler setpoint
Private fCentralHeatingSetPoint As Float  ' central heating setpoint
Private bClockSyncedToday As Boolean      ' indicates if clock is already synced
Private iDayOfMonth As Integer            '

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hOpenTherm.Close

  ' get a new one
  hOpenTherm = New Serialport As "OpenTherm"

  With hOpenTherm
    .PortName = sPort
    .Speed = 9600
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  Try Print #hOpenTherm, "PS=1\r"
  If Error Then
    Main.WriteDebugLog(("[OpenTherm] Error writing data to serial port! -> ") & Error.Text)
    Return False
  Else
    ' all ok
    Return True
  Endif

Catch ' some errors
  Main.WriteLog(("OpenTherm Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try tOpenTherm.Stop
  Try hOpenTherm.Close
  Main.WriteLog(("OpenTherm serial port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("OpenTherm Error: ") & ERROR.Text)
  Return False

End

Public Sub Run()

  ' start poll timer
  tOpenTherm = New Timer As "tOpenTherm"
  tOpenTherm.Delay = iPollTime * 1000 ' multiply for seconds
  tOpenTherm.Start

  GetStatus()

End

Public Sub tOpenTherm_Timer()

  GetStatus()

End

' request latest status report of OpenTherm gateway
Public Sub GetStatus()

  Dim rResult As Result
  Dim sDay As String

  ' request new status report
  WriteCmd("PS=1")
  If bSyncClock Then
    If iDayOfMonth <> Day(Now) Then
      bClockSyncedToday = False
      iDayOfMonth = Day(Now)
    Endif
    If Not bClockSyncedToday Then
      ' TO DO: make TimeCron configurable from GUI
      If Events.TimeCron("15 3 * * *") Then ' only once a day at 3:15
        Sleep 0.5 ' wait a little so reply of status report doesn't interfere
        bClockSyncedToday = True
        sDay = CStr(WeekDay(Now))
        If sDay = "0" Then sDay = "7" ' correct sundays
        WriteCmd("SC=" & Format(Now, "h:n") & "/" & sDay)
      Endif
    Endif
  Endif

End

Public Sub OpenTherm_Read()

  Dim sData As String

  Try Read #hOpenTherm, sData, 1
  If Error Then Main.WriteDebugLog(("[OpenTherm] Error reading data from serial port! -> ") & Error.Text)
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Private Sub ParseLine(sData As String)

  Dim sLine, sResponse, sLast2, sLast8, sBM, sCHM, sFlame, sFailure, sFault, sThermostat As String
  Dim sResponses As String[]
  Dim iResponse, iDeviceId As Integer
  Dim rResult As Result
  Dim bParseLine As Boolean

  'IF Main.bOpenThermDebug THEN Main.WriteDebugLog("[OpenTherm] " & sData)

  ' parse each line
  For Each sLine In Split(sData, "\n")
    bParseLine = True

    Select Case Right(sLine, 2)
      Case "OK"
        'IF Main.bOpenThermDebug THEN Main.WriteDebugLog(("[OpenTherm] Received 'OK' response: The command was accepted."))
        bParseLine = False
      Case "NG"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'NG' response: The command code is unknown."))
        bParseLine = False
      Case "SE"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'SE' response: The command contained an unexpected character or was incomplete."))
        bParseLine = False
      Case "BV"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'BV' response: The command contained a value that is not allowed"))
        bParseLine = False
      Case "OR"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'OR' response: A number was specified outside of the allowed range"))
        bParseLine = False
      Case "NS"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'NS' response: The alternative Data-ID could not be added because the table is full."))
        bParseLine = False
      Case "NF"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'NF' response: The specified alternative Data-ID could not be removed because it does not exist in the table."))
        bParseLine = False
      Case "IP"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'IP' response: The device cannot perform the action at this time, but will do so as soon as possible."))
        bParseLine = False
      Case "PF"
        'IF Main.bOpenThermDebug THEN Main.WriteDebugLog(("[OpenTherm] Received 'PF' response: The requested information will be printed in a separate report."))
        bParseLine = False
    End Select

    Select Case Right(sLine, 8)
      Case "Error 01"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'Error 01' response: A bit transistion happend at an unexpected time"))
        bParseLine = False
      Case "Error 02"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'Error 02' response: The stop bit was 0 while it should be 1"))
        bParseLine = False
      Case "Error 03"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'Error 03' response: A bit was not received when it was expected"))
        bParseLine = False
      Case "Error 04"
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'Error 04' response: A parity error was detected on a received opentherm message"))
        bParseLine = False
    End Select

    If Right(sLine, 21) = "OpenTherm Gateway 2.0" Then
      If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Received 'OpenTherm Gateway 2.0' response: OpenTherm gateway device has been restarted unexpectedly"))
      If bOverrideActive Then
        If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm]   resending thermostat override setpoint '" & CStr(fOverrideSetPoint) & "'"))
        SendCommand("THERMOSTAT", CStr(fOverrideSetPoint))
      Endif
      bParseLine = False
    Endif

    If bParseLine Then
      Try sResponses = Split(sLine)
      If Error Then
        If Main.bOpenThermDebug Then
          Main.WriteDebugLog(("[OpenTherm] ERROR: Parsing OpenTherm data packet: ") & sLine)
          Main.WriteDebugLog(("[OpenTherm]   " & ERROR.Text & " at " & ERROR.Where))
        Endif
      Else
        ' Example of sResponses:
        '  0 - 00000011/00001010   Status (MsgID=0) - Printed as two 8-bit bitfields
        '  1 - 59.00               Control setpoint (MsgID=1) - Printed as a floating point value
        '  2 - 00000000/00000000   Remote parameter flags (MsgID= 6) - Printed as two 8-bit bitfields
        '  3 - 100.00              Maximum relative modulation level (MsgID=14) - Printed as a floating point value
        '  4 - 0/0                 Boiler capacity and modulation limits (MsgID=15) - Printed as two bytes
        '  5 - 19.50               Room Setpoint (MsgID=16) - Printed as a floating point value
        '  6 - 0.00                Relative modulation level (MsgID=17) - Printed as a floating point value
        '  7 - 1.80                CH water pressure (MsgID=18) - Printed as a floating point value
        '  8 - 19.57               Room temperature (MsgID=24) - Printed as a floating point value
        '  9 - 59.00               Boiler water temperature (MsgID=25) - Printed as a floating point value
        ' 10 - 0.00                DHW temperature (MsgID=26) - Printed as a floating point value
        ' 11 - 0.00                Outside temperature (MsgID=27) - Printed as a floating point value
        ' 12 - 0.00                Return water temperature (MsgID=28) - Printed as a floating point value
        ' 13 - 0/0                 DHW setpoint boundaries (MsgID=48) - Printed as two bytes
        ' 14 - 0/0                 Max CH setpoint boundaries (MsgID=49) - Printed as two bytes
        ' 15 - 60.00               DHW setpoint (MsgID=56) - Printed as a floating point value
        ' 16 - 90.00               Max CH water setpoint (MsgID=57) - Printed as a floating point value
        ' 17 - 31442               Burner starts (MsgID=116) - Printed as a decimal value
        ' 18 - 0                   CH pump starts (MsgID=117) - Printed as a decimal value
        ' 19 - 0                   DHW pump/valve starts (MsgID=118) - Printed as a decimal value
        ' 20 - 0                   DHW burner starts (MsgID=119) - Printed as a decimal value
        ' 21 - 3027                Burner operation hours (MsgID=120) - Printed as a decimal value
        ' 22 - 0                   CH pump operation hours (MsgID=121) - Printed as a decimal value
        ' 23 - 0                   DHW pump/valve operation hours (MsgID=122) - Printed as a decimal value
        ' 24 - 258                 DHW burner operation hours (MsgID=123) - Printed as a decimal value

        If sResponses.count = 25 Then
          ' update outside sensor value if valid value is received from gateway
          If sResponses[11] <> "0.00" Then sOutsideTemp = Format(CStr(sResponses[11]), "#0.0#")

          ' update current setpoint
          fCurrentSetPoint = Val(Format(CStr(sResponses[5]), "#.#"))

          ' update existing devices
          rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE AND interface = &1", Devices.FindInterface("OpenTherm gateway"))
          If rResult.Available Then
            If rResult.Count Then
              For Each rResult
                Select UCase(rResult!address)
                  Case "THERMOSTAT"
                    ' update thermostat override status
                    If Not bOverrideSend And Not bOverrideActive Then sTemperatureOverrideStatus = "Override inactive"
                    If bOverrideSend Then
                      If fOverrideSetPoint = fCurrentSetPoint Then
                        Main.WriteDebugLog(("[OpenTherm] Override active at : " & CStr(fOverrideSetPoint)))
                        bOverrideActive = True
                        sTemperatureOverrideStatus = "Override active"
                        bOverrideSend = False
                      Else
                        Main.WriteDebugLog(("[OpenTherm] Override not active yet : " & CStr(fOverrideSetPoint) & " < > " & CStr(fCurrentSetPoint)))
                      Endif
                    Endif
                    If bOverrideActive And (sTemperatureOverride = "Temporarily") Then
                      If fCurrentSetPoint <> fOverrideSetPoint Then
                        Main.WriteDebugLog(("[OpenTherm] Override inactive due to setpoint change"))
                        bOverrideActive = False
                        sTemperatureOverrideStatus = "Override inactive"
                      Endif
                    Endif

                    sThermostat = "Idle" ' defauls to Idle
                    If (Mid(sResponses[0], 13, 1)) = "1" Then sThermostat = "Cooling down room" ' OpenTherm MsgID=0, LWB, 0001 0000
                    If (Mid(sResponses[0], 15, 1)) = "1" Then sThermostat = "Heating up boiler" ' OpenTherm MsgID=0, LWB, 0000 0100
                    If (Mid(sResponses[0], 16, 1)) = "1" Then sThermostat = "Heating up room"   ' OpenTherm MsgID=0, LWB, 0000 0010
                    If (Mid(sResponses[0], 17, 1)) = "1" Then sThermostat = "Error"             ' OpenTherm MsgID=0, LWB, 0000 0001
                    Devices.ValueUpdate(rResult!id, Format(CStr(sResponses[5]), "#0.0#"), Format(CStr(sResponses[8]), "#0.0#"), sTemperatureOverrideStatus, sThermostat)
                  Case "CENTRALHEATING"
                    Devices.ValueUpdate(rResult!id, Format(CStr(sResponses[16]), "##0.0#"), Format(CStr(sResponses[1]), "##0.0#"), Format(CStr(sResponses[6]), "##0"), Format(CStr(sResponses[7]), "0.##"))
                  Case "BOILER"
                    Devices.ValueUpdate(rResult!id, Format(CStr(sResponses[15]), "##0.0#"), Format(CStr(sResponses[9]), "##0.0#"), "", "")
                  Case "BURNER"
                    If (Mid(sResponses[0], 14, 1)) = "1" Then ' get bit 3 of lower byte of status message
                      sFlame = "On"
                    Else
                      sFlame = "Off"
                    Endif
                    Devices.ValueUpdate(rResult!id, sFlame, Format(CStr(sResponses[17]), "#####"), Format(CStr(sResponses[21]), "#####"), Format(CStr(sResponses[24]), "#####"))
                  Case "OUTSIDE"
                    Devices.ValueUpdate(rResult!id, sOutsideTemp, "", "", "")
                  Case Else
                    If Main.bOpenThermDebug Then
                      MAIN.WriteDebugLog("[OpenTherm] Invalid address '" & rResult!address & "', valid addresses are:")
                      MAIN.WriteDebugLog("[OpenTherm]   - Thermostat")
                      MAIN.WriteDebugLog("[OpenTherm]   - Centralheating")
                      MAIN.WriteDebugLog("[OpenTherm]   - Boiler")
                      MAIN.WriteDebugLog("[OpenTherm]   - Burner")
                      MAIN.WriteDebugLog("[OpenTherm]   - Outside")
                    Endif
                End Select
              Next
            Endif
          Endif
        Else
          If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid response '") & sLine & "'")
        Endif
      Endif
    Endif
  Next

Catch
  If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] ERROR: Parsing OpenTherm data packet: ") & sLine & " " & ERROR.Text & " at " & ERROR.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType, sDay, sCmdPrefix As String

  iDeviceId = Devices.Find(sAddress, Devices.FindInterface("OpenTherm gateway"))
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Device '") & sAddress & "' not found!")
    Return
  Endif

  If Len(sCmd) > 0 Then
    Select Case UCase(sAddress)
      Case "THERMOSTAT"  ' set new thermostat setpoint (override currently active setpoint)
        sCmdPrefix = ""
        fOriginalSetPoint = fCurrentSetPoint
        fOverrideSetPoint = CFloat(Fix(Val(sCmd)))
        Select Case UCase(sTemperatureOverride)
          Case "CONSTANT"
            sCmdPrefix = "TC="
            bOverrideSend = True
          Case "TEMPORARILY"
            ' set temporarily override for configured thermostat type
            Select Case sThermostat
              Case "Remeha Celcia 20"
                sCmdPrefix = "TR="
                bOverrideSend = True
              Case "Other"
                sCmdPrefix = "TT="
                bOverrideSend = True
              Case Else
                If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid Thermostat type: ") & sThermostat)
            End Select
          Case Else
            If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid temperature override: ") & sTemperatureOverride)
        End Select
        If Len(sCmdPrefix) = 3 Then
          If fOverrideSetPoint >= 0 And fOverrideSetPoint < 30 Then 'validate new thermostat override setpoint
            If fCurrentSetPoint = fOverrideSetPoint Then
              If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Thermostat setpoint already set to '" & sCmd & "'"))
            Else
              If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] send new thermostat setpoint command: '" & sCmdPrefix & sCmd & "'"))
              WriteCmd(sCmdPrefix & CStr(fOverrideSetPoint))
              If sCmd = "0" Or sCmd = "0.0" Then
                sTemperatureOverrideStatus = ""
                fOriginalSetPoint = 0
                fOverrideSetPoint = 0
                bOverrideSend = False
                bOverrideActive = False
              Endif
              If bOverrideSend Then sTemperatureOverrideStatus = "Override send"
            Endif
          Else
            If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid thermostat override setpoint value '" & sCmd & "'. Valid values are between 0.0 and 30.0"))
            bOverrideSend = False
          Endif
        Else
          If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid thermostat override prefix '") & sCmdPrefix * "'")
          bOverrideSend = False
        Endif

      Case "BOILER"           ' set the domestic hot water setpoint
        If CFloat(Val(sCmd)) > 0 And CFloat(Val(sCmd)) < 100 Then
          fBoilerSetPoint = CFloat(Val(sCmd))
          WriteCmd("SW=" & CStr(fBoilerSetPoint))
        Else
          If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid boiler setpoint value '" & CStr(fBoilerSetPoint) & "'. Valid values are between 0.0 and 100.0"))
        Endif

      Case "CENTRALHEATING"   ' set the maximum central heating setpoint
        If CFloat(Val(sCmd)) > 0 And CFloat(Val(sCmd)) < 100 Then
          fCentralHeatingSetPoint = CFloat(Val(sCmd))
          WriteCmd("SH=" & CStr(fCentralHeatingSetPoint))
        Else
          If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid central heating setpoint value '" & CStr(fCentralHeatingSetPoint) & "'. Valid values are between 0.0 and 100.0"))
        Endif

      Case "OUTSIDE"          ' send new outside temperature to thermostat
        If CFloat(Val(sCmd)) > -40 And CFloat(Val(sCmd)) < 127 Then
          sOutsideTemp = CFloat(Val(sCmd))
          WriteCmd("OT=" & CStr(sOutsideTemp))
        Else
          If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid outside temperature '" & CStr(sOutsideTemp) & "'. Valid values are between -40.0 and +127.0"))
        Endif

      Case "CLOCK"            ' synchonize clock with local clock by sending current time
        If sCmd = "sync" Then
          sDay = CStr(WeekDay(Now))
          If sDay = "0" Then sDay = "7" ' correct sundays
          WriteCmd("SC=" & Format(Now, "hh:mm") & "/" & sDay)
        Else
          If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid command for 'Clock' device: " & sCmd))
        Endif
    End Select
  Else
    If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid command '") & sCmd & "' for device " & sAddress)
  Endif

End

Public Sub WriteCmd(sCommand As String)

  If Main.bOpenThermDebug Then
    If sCommand <> "PS=1" Then ' don't log default report request
      Main.WriteDebugLog(("[OpenTherm] write command: ") & sCommand)
    Endif
  Endif

  If Len(sCommand) > 3 And InStr(sCommand, "=") Then
    Try Print #hOpenTherm, sCommand & "\r"
    If Error Then
      Main.WriteDebugLog(("[OpenTherm] Error writing data to serial port! -> ") & Error.Text)
    Endif
  Else
    If Main.bOpenThermDebug Then Main.WriteDebugLog(("[OpenTherm] Invalid command: ") & sCommand)
  Endif

End

' implement properties
Function Port_Read() As String

  Return sPort

End

Sub Port_Write(Value As String)

  sPort = Value

End

Private Function OpenThermDebug_Read() As Boolean

  Return bOpenThermDebug

End

Private Sub OpenThermDebug_Write(Value As Boolean)

  bOpenThermDebug = Value

End

Private Sub PollTime_Read() As Integer

  Return iPollTime

End

Private Function PollTime_Write(Value As Integer)

  iPollTime = Value

End

Private Sub Thermostat_Read() As String

  Return sThermostat

End

Private Function Thermostat_Write(Value As String)

  sThermostat = Value

End

Private Sub TemperatureOverride_Read() As String

  Return sTemperatureOverride

End

Private Function TemperatureOverride_Write(Value As String)

  sTemperatureOverride = Value

End

Private Function OutsideSensor_Read() As Boolean

  Return bOutsideSensor

End

Private Sub OutsideSensor_Write(Value As Boolean)

  bOutsideSensor = Value

End

Private Function SyncClock_Read() As Boolean

  Return bSyncClock

End

Private Sub SyncClock_Write(Value As Boolean)

  bSyncClock = Value

End
