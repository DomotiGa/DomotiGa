' Gambas class file

' Gambas Class file

' Description:
' GMail.class
' Support for fetching number of new emails from a gmail account

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "GMail"
Public PluginFriendlyName As String = "GMail"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[GMail] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sUser As String
Private $sPassword As String
Private $iPollTime As Integer
Private $bDebug As Boolean

Public tGMail As Timer
Public hGMailClient As New HttpClient
Private sGMailXml As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sUser = cPl.Settings["user"]
  $sPassword = cPl.Settings["password"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]
 
  ' Start timers
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tGMail.Stop
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Stopped poll timer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start poll timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Run()

  ' start poll timer for GMail
  tGMail = New Timer As "tGMail"
  tGMail.Delay = $iPollTime * 1000 ' multiply for seconds
  tGMail.Start

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Started poll timer.")

  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tGMail_Timer()

  CheckGMail()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' fetch xml from gmail
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckGMail()

  ' if we are already fetching return
  If hGMailClient.Status > 0 Then
    Main.WriteLog(LogLabel & "I'm already featchin GMail RSS feed, skipping.")
    Return
  Endif

  sGMailXml = ""

  ' fetch rss xml in the background
  hGMailClient = New HttpClient As "GMailClient"

  hGMailClient.URL = "https://mail.google.com/mail/feed/atom"
  hGMailClient.TimeOut = 10
  hGMailClient.Auth = Net.AuthBasic
  hGMailClient.User = $sUser
  hGMailClient.Password = $sPassword
  hGMailClient.Async = True
  hGMailClient.Get()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "fetching GMail RSS feed for new message count.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read gmail xml data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GMailClient_Read()

  Dim sXml As String

  sXml = Read #Last, Lof(Last)
  sGMailXml &= sXml

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' All data has been read
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GMailClient_Finished()

  If hGMailClient.Code = 200 Then
    ParseFeed(sGMailXml)
  Else
    If hGMailClient.Code = 401 Then
      If $bDebug Then Main.WriteLog(LogLabel & "Invalid user/password supplied")
    Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received HTTP Code '" & hGMailClient.Code & "'")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Show that we are connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GMailClient_Connect()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Successfully connected to " & hGMailClient.URL)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Show possible cURL errors
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GMailClient_Error()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "ERROR: " & hGMailClient.Status & " while downloading " & hGMailClient.URL)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse xml document
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseFeed(sXml As String)

  Dim Xml As New XmlReader
  Dim iCurrentMails As Integer

  ' check if we got a complete xml document
  If InStr(sXml, "</feed>") Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Parsing RSS xml.")

    iCurrentMails = Main.iNewMails

    Try Xml.FromString(sXml)
    If Not Error Then
      Do While True
        Try Xml.Read()
        If Error Or Xml.Eof Then Break

        Select Xml.Node.Type
          Case XmlReaderNodeType.Element
            ' The root element
            ParseNode(Xml, 1)
        End Select
      Loop
    Endif

    If $bDebug Then Main.WriteDebugLog(LogLabel & "You have " & Main.iNewMails & " new e-mails.")
    If (Main.iNewMails <> iCurrentMails) Or If Main.GetGlobalVar("Minute") Mod 30 = 0 Then
      If Main.iNewMails Then Main.WriteLog(LogLabel & "You have " & Main.iNewMails & " new " & If(Main.iNewMails <> 1, "e-mails", "e-mail") & " on GMail.")
      Main.SetGlobalVar("EmailCount", Main.iNewMails)
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse xml node
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseNode(Xml As XmlReader, iElement As Integer)

  Dim sName As String

  ' if it has no children, stop
  If Xml.Node.IsEmptyElement Then Return

  ' check all nodes of the element
  sName = Xml.Node.Name

  Do While True
    Try Xml.Read()
    If Error Or Xml.Eof Then Break

    Select Xml.Node.Type
      Case XmlReaderNodeType.EndElement
        'If Xml.Node.Name = sName Then Return
        Return
      Case XmlReaderNodeType.Element
        ParseNode(Xml, iElement + 1)
      Case XmlReaderNodeType.Text
        ' look for element called fullcount
        If sName = "fullcount" Then
          Main.iNewMails = Val(Xml.Node.Value)
          Main.UpdateCounters()
        Endif

    End Select
  Loop

End
