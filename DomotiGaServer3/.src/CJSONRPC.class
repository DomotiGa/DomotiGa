' Gambas class file

' Description:
' CJSONRPC.class
' Built-in JSON-RPC server.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "JSONRPC"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "JSON-RPC"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[JSONRPC] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' JSON-RPC API Version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private APIVersion As String = "0.02"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iHTTPPort As Integer
Private $iMaxConn As Integer
Private $iTypeConn As Integer
Private $iAuth As Integer
Private $bDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Other Variable definitions like sockets, timers, etc
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public hJSONRPC As JsonRpcServer
Private $sCurrentMethod As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Const Type_Auth_None As Integer = 0 ' No authentication done
Private Const Type_Auth_Basic As Integer = 1 ' Basic HTTP authentication done - against the user list
Private Const Type_Auth_Session As Integer = 2 ' Session based authentication?

Private Const Type_Conn_HTTP As Integer = 0 ' Only HTTP connections
Private Const Type_Conn_Socket As Integer = 1 ' Only real sockets

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' iType constants, used by BuildFilterFields & FilterFields
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Const Type_Data_Device As Integer = 1
Private Const Type_Data_DeviceValue As Integer = 6
Private Const Type_Data_Event As Integer = 2
Private Const Type_Data_Action As Integer = 3
Private Const Type_Data_Scene As Integer = 4
Private Const Type_Data_Location As Integer = 5

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iMaxConn = cPl.Settings["maxconn"]
  $iHTTPPort = cPl.Settings["httpport"]
  $iTypeConn = cPl.Settings["type"]
  $iAuth = cPl.Settings["auth"]
  $bDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Initialize the JSON-RPC server and register all methods
' It is possible to also register the help, but we don't use it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  Dim hRpcFunc As JsonRpcFunction

  hJSONRPC = New JsonRpcServer As "hJSONRPC"

  ' ------------------------
  ' start method definitions
  ' ------------------------

  ' ### System methods ###
  hRpcFunc = New JsonRpcFunction("system.hostname")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("system.ipaddress")
  hJSONRPC.Register(hRpcFunc)

  ' ### API methods ###
  hRpcFunc = New JsonRpcFunction("api.version")
  hJSONRPC.Register(hRpcFunc)

  ' ### Global methods ###
  hRpcFunc = New JsonRpcFunction("domotiga.pid")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.uptime")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.version")
  hJSONRPC.Register(hRpcFunc)

  ' ### Astro methods ###
  hRpcFunc = New JsonRpcFunction("astro.get")
  hJSONRPC.Register(hRpcFunc)

  ' ### Data methods ###
  hRpcFunc = New JsonRpcFunction("data.newmessage")
  hJSONRPC.Register(hRpcFunc)

  ' ### Mode methods ###
  hRpcFunc = New JsonRpcFunction("housemode.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("housemode.get")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("housemode.set")
  hJSONRPC.Register(hRpcFunc)

  ' ### Sound methods ###
  hRpcFunc = New JsonRpcFunction("sound.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("sound.play")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("voicetext.speak")
  hJSONRPC.Register(hRpcFunc)

  ' ### GlobalVar methods ###
  hRpcFunc = New JsonRpcFunction("globalvar.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("globalvar.get")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("globalvar.set")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("globalvar.del")
  hJSONRPC.Register(hRpcFunc)

  ' ### Device methods ###
  hRpcFunc = New JsonRpcFunction("device.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("device.get")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("device.set")
  hJSONRPC.Register(hRpcFunc)

  ' ### Location methods ###
  hRpcFunc = New JsonRpcFunction("location.list")
  hJSONRPC.Register(hRpcFunc)

  ' ### Plugin methods ###
  hRpcFunc = New JsonRpcFunction("plugin.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("plugin.restart")
  hJSONRPC.Register(hRpcFunc)

  ' ### Message methods ###
  hRpcFunc = New JsonRpcFunction("email.send")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("twitter.send")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("sms.send")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("nma.send")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("prowl.send")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("pushover.send")
  hJSONRPC.Register(hRpcFunc)

  ' ### Event methods ###
  hRpcFunc = New JsonRpcFunction("event.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("action.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("scene.list")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("scene.run")
  hJSONRPC.Register(hRpcFunc)

  ' ### SqueezeBox methods ###
  hRpcFunc = New JsonRpcFunction("squeezebox.get")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("squeezebox.set")
  hJSONRPC.Register(hRpcFunc)

  ' ### Razberry methods ###
  hRpcFunc = New JsonRpcFunction("razberry.updatesready")
  hJSONRPC.Register(hRpcFunc)

  ' ### RRDTool methods ###
  hRpcFunc = New JsonRpcFunction("rrdtool.create")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("rrdtool.update")
  hJSONRPC.Register(hRpcFunc)

  ' ### ServerStats methods ###
  hRpcFunc = New JsonRpcFunction("serverstat.update")
  hJSONRPC.Register(hRpcFunc)

  ' ### DSC Security methods ###
  hRpcFunc = New JsonRpcFunction("dsc.setpin")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("dsc.setarm")
  hJSONRPC.Register(hRpcFunc)

  ' ### LEDMatrix methods ###
  hRpcFunc = New JsonRpcFunction("ledmatrix.display")
  hJSONRPC.Register(hRpcFunc)

  ' ### AVControl methods ###
  hRpcFunc = New JsonRpcFunction("avcontrol.set")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("avcontrol.get")
  hJSONRPC.Register(hRpcFunc)

  ' ### CUL methods ###
  hRpcFunc = New JsonRpcFunction("cul.simulate")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("cul.queuecommand")
  hJSONRPC.Register(hRpcFunc)

  ' ### Calendar methods ###
  hRpcFunc = New JsonRpcFunction("calendar.get")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("calendar.set")
  hJSONRPC.Register(hRpcFunc)

  ' ### Thermostat methods ###
  hRpcFunc = New JsonRpcFunction("thermostat.derogateheating")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("thermostat.getderogateheating")
  hJSONRPC.Register(hRpcFunc)

  ' ### Commander methods ###
  hRpcFunc = New JsonRpcFunction("cmdr.plcbus.txcommand")
  hJSONRPC.Register(hRpcFunc)

  ' ### Subscribe methods ###
  hRpcFunc = New JsonRpcFunction("subscribe.logupdate")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("subscribe.deviceupdate")
  hJSONRPC.Register(hRpcFunc)

  ' ### Tools Commander OpenZWave methods ###
  hRpcFunc = New JsonRpcFunction("tools.openzwave.get")
  hJSONRPC.Register(hRpcFunc)

  ' ---------------------------------------------------------
  ' All have been setup, now try to start the JSOC-RPC server
  ' ---------------------------------------------------------
  Try hJSONRPC.Listen($iHTTPPort, $iMaxConn, $bDebug)
  If hJSONRPC.Listening Then
    ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " Server listening on Port " & $iHTTPPort)
    IsRunning = True
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
    IsRunning = False
    ErrorText = "Net Not Active"
    Return False
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Shutdown our JSON-RPC server
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Disconnect()

  hJSONRPC.Stop()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Handle the JSON-RPC Remote Calls
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hJSONRPC_RemoteCall(sName As String, cData As Collection)

  Dim sParam As String

  ' Set method to private variable for logging purposes
  $sCurrentMethod = sName

  If $bDebug Then
    Try sParam = JSON.Encode(cData)
    sParam = Replace(sParam, "\"\\u00x0\"", "\"\"")
    sParam = Replace(sParam, "\"\\u0001\"", "\"\"")

    Main.WriteDebugLog(LogLabel & "Got a RemoteCall for Method '" & sName & "'" & IIf(sParam, ", Params '" & sParam & "'", ""))
  Endif

  Select sName
      ' ### System methods ###
    Case "system.hostname"
      Call_System_Hostname()
    Case "system.ipaddress"
      ' TODO

      ' ### API methods ###
    Case "api.version"
      Call_API_Version()

      ' ### Generic methods ###
    Case "domotiga.pid"
      Call_DomotiGa_PID()
    Case "domotiga.uptime"
      Call_DomotiGa_Uptime()
    Case "domotiga.version"
      Call_DomotiGa_Version()

      ' ### Astro methods ###
    Case "astro.get"
      Call_Astro_Get()

      ' ### Data methods ###
    Case "data.newmessage"
      Call_Data_NewMessage()

      ' ### Mode methods ###
    Case "housemode.list"
      Call_HouseMode_List()
    Case "housemode.get"
      Call_HouseMode_Get()
    Case "housemode.set"
      Call_HouseMode_Set(cData)

      ' ### Sound methods ###
    Case "sound.list"
      Call_Sound_List()
    Case "sound.play"
      Call_Sound_Play(cData)
    Case "voicetext.speak"
      Call_VoiceText_Speak(cData)

      ' ### GlobalVar methods ###
    Case "globalvar.list"
      Call_GlobalVar_List()
    Case "globalvar.get"
      Call_GlobalVar_Get(cData)
    Case "globalvar.set"
      Call_GlobalVar_Set(cData)
    Case "globalvar.del"
      Call_GlobalVar_Del(cData)

      ' ### Device methods ###
    Case "device.list"
      Call_Device_List(cData)
    Case "device.get"
      Call_Device_Get(cData)
    Case "device.set"
      Call_Device_Set(cData)

      ' ## Location methods ###
    Case "location.list"
      Call_Location_List(cData)

      ' ### Plugin methods ###
    Case "plugin.list"
      Call_Plugin_List()
    Case "plugin.restart"
      Call_Plugin_Restart(cData)

      ' ### Message methods ###
    Case "email.send"
      Call_Email_Send(cData)
    Case "twitter.send"
      Call_Twitter_Send(cData)
    Case "nma.send"
      Call_NMA_Send(cData)
    Case "prowl.send"
      Call_Prowl_Send(cData)
    Case "pushover.send"
      Call_Pushover_Send(cData)

      ' ### Event methods ###
    Case "event.list"
      Call_Event_List(cData)
    Case "action.list"
      Call_Action_List(cData)
    Case "scene.list"
      Call_Scene_List(cData)
    Case "scene.run"
      Call_Scene_Run(cData)

      ' ### SqueezeBox methods ###
    Case "squeezebox.get"
      Call_SqueezeBox_Get(cData)
    Case "squeezebox.set"
      Call_SqueezeBox_Set(cData)

      ' ### RaZberry methods ###
    Case "razberry.updatesready"
      Call_RaZberry_Updatesready(cData)

      ' ### RRDTool methods ### 
    Case "rrdtool.create"
      Call_RRDTool_Create(cData)
    Case "rrdtool.update"
      Call_RRDTool_Update(cData)

      ' ### ServerStats methods ###
    Case "serverstat.update"
      Call_ServerStat_Update(cData)

      ' ### DSC Security methods ###
    Case "dsc.setpin"
      Call_DSC_SetPin(cData)
    Case "dsc.setarm"
      Call_DSC_SetArm(cData)

      ' ### LEDMatrix methods ###
    Case "ledmatrix.display"
      Call_LEDMatrix_Display(cData)

      ' ### AVControl methods ###
    Case "avcontrol.get"
      Call_AVControl_Get(cData)
    Case "avcontrol.set"
      Call_AVControl_Set(cData)

      ' ### CUL methods ###
    Case "cul.simulate"
      Call_CUL_Simulate(cData)
    Case "cul.queuecommand"
      Call_CUL_QueueCommand(cData)

      ' ### Calendar methods ###
    Case "calendar.get"
      Call_Calendar_Get()
    Case "calendar.set"
      Call_Calendar_Set(cData)

      ' ### Thermostat methods ###
    Case "thermostat.derogateheating"
      Call_Thermostat_DerogateHeating(cData)
    Case "thermostat.getderogateheating"
      Call_Thermostat_GetDerogateHeating(cData)

      ' ### Commander methods ###
    Case "cmdr.plcbus.txcommand"
      Call_Cmdr_PLCBus_TxCommand(cData)

      ' ### subscribe methods ###
    Case "subscribe.logupdate"
      Call_Subscribe_LogUpdate()
    Case "subscribe.deviceupdate"
      Call_Subscribe_DeviceUpdate()

      ' ### Tools ###
    Case "tools.openzwave.get"
      Call_Tools_OpenZWave_Get(cData)

      ' ### Default - return an error ###
    Default
      hJSONRPC.SetReply(-32601, Null)
      Return
  End Select

Catch
  ' Handle errors - and we *NEED* always send a request
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at " & Error.Where)
  hJSONRPC.SetReply(-32603, Null)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if Variable if it is number. JSON decode doesn't
' always give it back as gb.Integer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONCheckNumber(vValue As Variant) As Boolean

  If TypeOf(vValue) = gb.Float Then Return True
  If TypeOf(vValue) = gb.Long Then Return True
  If TypeOf(vValue) = gb.Integer Then Return True

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts empty string to Chr(1), because Gambas doesn't
' support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONToEmptyString(sValue As String) As String

  If sValue Then
    Return sValue
  Else
    Return Chr(1)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts Chr(1) to empty string, because Gambas doesn't
' support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub JSONFromEmptyString(sValue As String) As String

  If sValue = Chr(1) Then
    Return ""
  Else
    Return sValue
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if an instance is present
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckParmInstance(cData As Collection, sPlugin As String) As Integer

  Dim iInstance As Integer

  If cData = Null Then Return 1
  If cData["instance"] = Null Then Return 1

  If Not JSONCheckNumber(cData["instance"]) Then
    WriteDebugLogError("params 'instance' isn't numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return 0
  Endif

  Try iInstance = CInt(cData["instance"])
  If Error Then
    WriteDebugLogError("params 'instance' isn't numeric integer")
    hJSONRPC.SetReply(-32602, Null)
    Return 0
  Endif

  If iInstance <= 0 Then iInstance = 1

  ' Check if plugin instance really is created
  If Plugin.IsPluginEnabled(sPlugin, iInstance) Then
    WriteDebugLogError("Plugin '" & sPlugin & "' instance '" & iInstance & "' isn't enabled")
    hJSONRPC.SetReply(0, False)
    Return 0
  Endif

  Return iInstance

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Generic call check
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckParmString(cData As Collection, sParam As String, Optional bNotEmpty As Boolean = True) As Boolean
  
  If cData = Null Then
    WriteDebugLogError("params '" & sParam & "' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif
  
  ' Can't be an empty string if bNotEmpty is set
  If bNotEmpty Then
    If TypeOf(cData[sParam]) <> gb.String Then
      WriteDebugLogError("params '" & sParam & "' is missing or isn't a string")
      hJSONRPC.SetReply(-32602, Null)
      Return False
    Endif
    
    If Not JSONFromEmptyString(cData[sParam]) Then
      WriteDebugLogError("params '" & sParam & "' is empty string")
      hJSONRPC.SetReply(-32602, Null)
      Return False
    Endif
  Else
    If TypeOf(cData[sParam]) <> gb.Null And If TypeOf(cData[sParam]) <> gb.String Then
      WriteDebugLogError("params '" & sParam & "' is missing or isn't a string")
      hJSONRPC.SetReply(-32602, Null)
      Return False
    Endif
  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Do filtering of fields - trying to keep it generic as possible
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub FilterFields(iType As Integer, aFields As String[], rResult As Result, cMap As Collection, cValue As Collection) As Boolean

  Dim sAttrName As String
  Dim sKey As String
  Dim vAttrValue As Variant

  If aFields = Null Then
    WriteDebugLogError("No fields list supplied")
    hJSONRPC.SetReply(-32602, Null)
    Return False
  Endif

  For Each sAttrName In aFields

    ' Determine if a mapping is in place
    If cMap.Exist(sAttrName) Then
      sKey = cMap[sAttrName]
    Else
      sKey = sAttrName
    Endif

    ' First we test if the field exists
    Try vAttrValue = rResult[sKey]

    ' Somebody passed an invalid field - bail now
    If Error Then
      ' Put exceptions here
      If sKey = "NA" Then
      Else
        WriteDebugLogError("Field '" & sAttrName & IIf(cMap.Exist(sAttrName), "/" & sKey, "") & "' doesn't exist in the devices database")
        hJSONRPC.SetReply(-32602, Null)
        Return False
      Endif
    Endif

    ' Override values
    Select sAttrName
      Case "value"
        Try vAttrValue = Devices.CorrectValue(rResult!value, rResult!correction, rResult!device_id)
        If Error Then vAttrValue = ""
      Case "lastchanged" 'last seen
        Try vAttrValue = Replace$(Str$(Format(rResult!lastchanged, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        If Error Then vAttrValue = "Never"
      Case "firstseen" 'last seen
        Try vAttrValue = Replace$(Str$(Format(rResult!firstseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        If Error Then vAttrValue = "Never"
      Case "lastseen" 'last seen
        Try vAttrValue = Replace$(Str$(Format(rResult!lastseen, "yyyy-mm-dd hh:nn:ss")), Format(Date(), "yyyy-mm-dd") & " ", "")
        If Error Then vAttrValue = "Never"
      Case "icon" 'status icon - only valid for devices table - NOT set, this happens during device values
        vAttrValue = ""
    End Select

    If TypeOf(vAttrValue) = gb.String Or If TypeOf(vAttrValue) = gb.Null Then
      cValue[sAttrName] = JSONToEmptyString(vAttrValue)
    Else
      cValue[sAttrName] = vAttrValue
    Endif
  Next

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Build up the ALL filter fields
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub BuildFilterFields(iType As Integer, rResult As Result, cMap As Collection, GetField As String[])

  Dim bFound As Boolean
  Dim hField As ResultField
  Dim hsField, mField As String

  GetField.Clear()

  For Each hField In rResult.Fields

    bFound = False
    If InStr(hField.Name, ".") Then
      hsField = Mid(hField.Name, RInStr(hField.Name, ".") + 1)
    Else
      hsField = hField.Name
    Endif

    For Each mField In cMap
      If hsField = mField Then
        GetField.Add(cMap.Key)

        If iType = Type_Data_DeviceValue Then ' Devices - Also add valueX if we found rawvalueX
          If InStr(cMap.Key, "rawvalue") = 1 Then
            GetField.Add("value" & Mid(cMap.Key, 9))
          Endif
        Endif

        bFound = True
        Break
      Endif
    Next

    If Not bFound Then
      If iType = Type_Data_DeviceValue Then
        If hsField = "id" Or If hsField = "device_id" Then
          Continue
        Endif
      Endif

      GetField.Add(hsField)
    Endif
  Next

  If iType = Type_Data_Device Then ' For devices add the icon
    GetField.Add("icon")
  Endif

  If iType = Type_Data_Action Then ' For Events add the action list
    GetField.Add("actionlist")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Write to debug logfile
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLogError(sError As String)

  If $bDebug Then
    Main.WriteDebugLog(LogLabel & "ERROR: Method '" & $sCurrentMethod & "' - " & sError)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=system.hostname
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_System_Hostname()

  hJSONRPC.SetReply(0, System.Host)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=api.version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_API_Version()

  hJSONRPC.SetReply(0, APIVersion)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=domotiga.pid
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DomotiGa_PID()

  hJSONRPC.SetReply(0, Application.Id)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=domotiga.uptime
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DomotiGa_Uptime()
  
  hJSONRPC.SetReply(0, Main.GetGlobalVar("Program_Uptime"))
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=domotiga.version
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DomotiGa_Version()

  hJSONRPC.SetReply(0, Main.sProgramVersion)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=astro.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Astro_Get()

  Dim cValue As New Collection

  cValue["sunrise"] = JSONToEmptyString(Main.GetGlobalVar("Sunrise"))
  cValue["sunset"] = JSONToEmptyString(Main.GetGlobalVar("Sunset"))
  cValue["sunrise_twilight"] = JSONToEmptyString(Main.GetGlobalVar("Sunrise_Twilight"))
  cValue["sunset_twilight"] = JSONToEmptyString(Main.GetGlobalVar("Sunset_Twilight"))
  cValue["latitude"] = Main.iAstroLatitude
  cValue["longitude"] = Main.iAstroLongitude
  cValue["timezone"] = Main.fAstroAutoTimezone
  cValue["timezonename"] = JSONToEmptyString(Main.sAstroAutoTimezoneName)

  hJSONRPC.SetReply(0, cValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=housemode.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_HouseMode_List()
  
  hJSONRPC.SetReply(0, ["normal", "work", "away", "vacation"])
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=housemode.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_HouseMode_Get()

  Dim cValue As New Collection

  cValue["mode"] = JSONToEmptyString(Main.GetGlobalVar("House_Mode"))
  cValue["mute"] = Main.GetGlobalVar("Mute")

  hJSONRPC.SetReply(0, cValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=housemode.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_HouseMode_Set(cData As Collection)

  If cData = Null Then
    WriteDebugLogError("params 'mode' or 'mute' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  ' Check and validate if "mode" param exists
  If cData.Exist("mode") Then
    If TypeOf(cData["mode"]) <> gb.String Then
      WriteDebugLogError("params 'mode' isn't a string")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif

    If Not JSONFromEmptyString(cData["mode"]) Then
      WriteDebugLogError("params 'mode' is empty string")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif
  Endif

  ' Check and validate if "mute" param exists
  If cData.Exist("mute") Then
    If TypeOf(cData["mute"]) <> gb.Boolean Then
      WriteDebugLogError("params 'mute' isn't a boolean")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif
  Endif

  hJSONRPC.SetReply(0, False)
  If cData.Exist("mode") Then
    Main.SetGlobalVar("House_Mode", JSONFromEmptyString(cData["mode"]))
    hJSONRPC.SetReply(0, True)
  Endif

  If cData.Exist("mute") Then
    Main.SetGlobalVar("Mute", cData["mute"])
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=sound.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Sound_List()

  ' fill array with available sounds
  hJSONRPC.SetReply(0, Dir(Main.sBaseDir &/ "sounds", "*.wav"))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=sound.play
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Sound_Play(cData As Collection)

  Dim bReturn As Boolean

  If Not CheckParmString(cData, "file") Then Return

  If cData["volume"] <> Null And If Not JSONCheckNumber(cData["volume"]) Then
    WriteDebugLogError("params 'volume' isn't numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return

    If cData["volume"] < 0 Or If cData["volume"] > 100 Then
      WriteDebugLogError("params 'volume' isn't between 0-100%")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif
  Endif

  ' If no volume is specific, don't specify anything (=system default)
  If cData["volume"] = Null Then
    Try bReturn = Sounds.PlaySnd(cData["file"])
  Else
    Try bReturn = Sounds.PlaySnd(cData["file"], cData["volume"])
  Endif

  hJSONRPC.SetReply(0, bReturn)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=voicetext.speak
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_VoiceText_Speak(cData As Collection)
  
  Dim bReturn As Boolean
  
  If Not CheckParmString(cData, "text") Then Return
  
  If cData["voice"] <> Null And If TypeOf(cData["voice"]) <> gb.String Then
    WriteDebugLogError("params 'voice' isn't a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  ' If no volume is specific, don't specify anything (=system default)
  If cData["voice"] = Null Then
    Try bReturn = VoiceText.Speak(cData["text"])
  Else
    Try bReturn = VoiceText.Speak(cData["text"], cData["voice"])
  Endif
  
  hJSONRPC.SetReply(0, bReturn)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_List()
  
  Dim cGV As CGlobalVarEntry
  Dim cValue As New Collection
  
  For Each cGV In Main.GlobalVar
    If cGV.Value = Null Then
      cValue[Main.GlobalVar.Key] = "<EMPTY>"
    Else
      cValue[Main.GlobalVar.Key] = cGV.Value
    Endif
  Next
  
  hJSONRPC.SetReply(0, cValue)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_Get(cData As Collection)
  
  Dim vValue As Variant
  
  If Not CheckParmString(cData, "name") Then Return
  
  If Main.GlobalVar.Exist(cData["name"]) Then
    vValue = Main.GlobalVar[cData["name"]].Value
    hJSONRPC.SetReply(0, vValue)
  Else
    hJSONRPC.SetReply(-1, Null)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_Set(cData As Collection)
  
  Dim vValue As Variant
  
  If Not CheckParmString(cData, "name") Then Return
  
  If Not cData["value"] Then
    WriteDebugLogError("params 'value' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  ' Check if somebody wants to set a ReadOnly variable
  If Main.GlobalVar.Exist(cData["name"]) Then
    If Main.GlobalVar[cData["name"]].ReadOnly Then
      WriteDebugLogError("params 'name'='" & cData["name"] & "' is a read-only variable")
      hJSONRPC.SetReply(0, False)
      Return
    Endif
  Endif
  
  vValue = Main.SetGlobalVar(cData["name"], JSONFromEmptyString(cData["value"]))
  hJSONRPC.SetReply(0, True)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=globalvar.del
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_GlobalVar_Del(cData As Collection)

  If Not CheckParmString(cData, "name") Then Return

  ' Check if somebody wants to set a ReadOnly variable
  If Main.GlobalVar.Exist(cData["name"]) Then
    If Main.GlobalVar[cData["name"]].System Then
      WriteDebugLogError("params 'name'='" & cData["name"] & "' is a system variable, can't be deleted")
      hJSONRPC.SetReply(0, False)
      Return
    Endif
  Endif

  Try Main.DelGlobalVar(cData["name"])
  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=device.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Device_Set(cData As Collection)
  
  If cData = Null Then
    WriteDebugLogError("params 'device_id' and 'value' are missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  ' The device_id has to be an integer and value a string
  If Not JSONCheckNumber(cData["device_id"]) Then
    WriteDebugLogError("params 'device_id' is missing or isn't numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  If TypeOf(cData["value"]) <> gb.String Then
    WriteDebugLogError("params 'value' is missing or isn't a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  If Devices.SetDevice(cData["device_id"], JSONFromEmptyString(cData["value"])) Then
    hJSONRPC.SetReply(0, True)
  Else
    hJSONRPC.SetReply(0, False)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=device.list
' Returns: Array
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Device_List(cData As Collection)
  
  Dim cValue As New Collection
  Dim aValue As New Collection[]
  Dim cValueValue As New Collection
  Dim aValueValue As New Collection[]
  Dim hValueValue As New Collection
  Dim rResult As Result
  Dim rResultValues As Result
  Dim iGrp As Integer
  Dim sList As String
  Dim MapField As New Collection
  Dim GetField As New String[]
  Dim MapFieldValues As New Collection
  Dim GetFieldValues As New String[]
  Dim GetGroup As New String[]
  Dim GetLocation As New Integer[]
  Dim sValuesFormat As String
  Dim bFound As Boolean
  
  ' Mapping of attribute names from SQL to JSON. Hopefully to be removed in the future
  MapField.Add("id", "device_id")
  MapField.Add("location", "location_id")
  MapField.Add("floorplan", "floorplan_id")
  MapField.Add("module", "devicetype_id")
  MapField.Add("interface", "interface_id")
  MapField.Add("poll", "disablepoll")
  MapField.Add("NA", "icon")
  
  MapFieldValues.Add("value", "rawvalue")
  MapFieldValues.Add("NA", "value")
  
  ' Determine if we got a "list" parameter/value
  If cData <> Null Then
    If cData["list"] <> Null And If TypeOf(cData["list"]) <> gb.String Then
      WriteDebugLogError("params 'list' is not a string")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif
    
    sList = cData["list"]
    If sList = "" Then
      sList = "enabled"
    Endif
    
    ' Detect if the "fields" parameter is supplied, it has to be an array of strings
    If cData["fields"] <> Null And If TypeOf(cData["fields"]) = gb.Object Then
      Try GetField = cData["fields"]
      If Error Then
        WriteDebugLogError("params 'fields' is not an array of strings")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif
    Endif
    
    ' Detect if the "groups" parameter is supplied, it has to be an array of strings
    If cData["groups"] <> Null And If TypeOf(cData["groups"]) = gb.Object Then
      Try GetGroup = cData["groups"]
      If Error Then
        WriteDebugLogError("params 'groups' is not an array of strings")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif
    Endif
    
    ' Detect if the "locations" parameter is supplied, it has to be an array of integers
    If cData["locations"] <> Null And If TypeOf(cData["locations"]) = gb.Object Then
      Try GetLocation = cData["locations"]
      If Error Then
        WriteDebugLogError("params 'locations' is not an array of strings")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif
    Endif

    ' Get ValuesFormat item, used to format the values in array (default) or hash
    If cData["valuesformat"] <> Null And If TypeOf(cData["valuesformat"]) <> gb.String Then
      WriteDebugLogError("params 'valuesformat' is not a string")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif

    sValuesFormat = cData["valuesformat"]

  Endif
  
  ' If we got a field list, we don't know what to retrieve exactly, so we will do it all
  If GetField.Count >= 1 Then
    sList &= "+ext"
  Endif
  
  ' Retrieve the information from the database
  rResult = Devices.GetDeviceList(sList)
  
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No devices found in table 'devices'!")
    hJSONRPC.SetReply(0, aValue)
    Return
  Endif
  
  ' If we didn't get a field list, use the defaults
  If GetField.Count = 0 Then
    If InStr(sList, "ext") Then
      GetField = ["device_id", "name", "icon", "lastseen", "enabled", "hide", "dimable", "switchable", "batterystatus", "location_id", "locationname", "floorplan_id", "floorplanname", "floorplanimage", "x", "y", "devicetype_id", "devicetypename", "interface_id", "interfacename", "groups"]
    Else
      GetField = ["device_id", "name", "icon", "lastseen", "enabled", "hide", "dimable", "switchable", "batterystatus", "location_id", "locationname"]
      GetFieldValues = ["valuenum", "value", "units"]
    Endif
  Else
    ' If get "ALL", then just return all fields
    If GetField.Count = 1 And If GetField.Exist("ALL") Then
      BuildFilterFields(Type_Data_Device, rResult, MapField, GetField)
    Endif
  Endif

  For Each rResult
    
    cValue = New Collection
    
    ' If a group or groups are supplied, filter on them
    If GetGroup.Count >= 1 Then
      bFound = False
      
      For iGrp = 0 To (GetGroup.Count - 1)
        If InStr(rResult!groups, "|" & GetGroup[iGrp] & "|") Then bFound = True
      Next
      
      If Not bFound Then Continue
    Endif
    
    ' If a location or locations are supplied, filter on them
    If GetLocation.Count >= 1 Then
      If Not GetLocation.Exist(rResult!location) Then Continue
    Endif
    
    ' Filter out the fields - if get get a False, an error happened
    If Not FilterFields(Type_Data_Device, GetField, rResult, MapField, cValue) Then
      Return
    Endif
    
    ' Add device values
    aValueValue = New Collection[]
    hValueValue = New Collection

    rResultValues = Devices.GetValues(["device_id": rResult!id])
    For Each rResultValues
      cValueValue = New Collection
      If GetFieldValues.Count = 0 Then
        BuildFilterFields(Type_Data_DeviceValue, rResultValues, MapFieldValues, GetFieldValues)
      Endif

      FilterFields(Type_Data_DeviceValue, GetFieldValues, rResultValues, MapFieldValues, cValueValue) 
      If sValuesFormat = "hash" Then
        hValueValue[rResultValues!valuenum] = cValueValue
      Else
        aValueValue.Add(cValueValue)
      Endif

      ' Overrule the icon value if we have valuenum 1
      If rResultValues!valuenum = 1 Then
        If Not IsNull(rResult!onicon) Or Not IsNull(rResult!officon) Then
          If UCase$(rResultValues!value) = "ON" Or UCase$(rResultValues!value) = "OPEN" Or UCase$(rResultValues!value) = "MOTION" Then
            Try cValue["icon"] = JSONToEmptyString(rResult!onicon)
          Else
            Try cValue["icon"] = JSONToEmptyString(rResult!officon)
          Endif
        Endif
      Endif

    Next

    ' Add the values to the device
    If sValuesFormat = "hash" Then
      cValue.Add(hValueValue, "values")
    Else
      cValue.Add(aValueValue, "values")
    Endif

    ' Finished, now add the device to the output list
    aValue.Add(cValue)
  Next

  hJSONRPC.SetReply(0, aValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=device.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Device_Get(cData As Collection)

  Dim cValue As New Collection
  Dim cValueValue As New Collection
  Dim aValueValue As New Collection[]
  Dim GetField As New String[]
  Dim GetFieldValues As New String[]
  Dim rResult As Result
  Dim rResultValues As Result
  Dim MapField As New Collection
  Dim MapFieldValues As New Collection

  ' Mapping of attribute names from SQL to JSON. Hopefully to be removed in the future
  MapField.Add("id", "device_id")
  MapField.Add("location", "location_id")
  MapField.Add("floorplan", "floorplan_id")
  MapField.Add("module", "devicetype_id")
  MapField.Add("interface", "interface_id")
  MapField.Add("poll", "disablepoll")
  MapField.Add("NA", "icon")

  MapFieldValues.Add("value", "rawvalue")
  MapFieldValues.Add("NA", "value")
  
  If cData = Null Then
    WriteDebugLogError("params 'device_id' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  ' The device_id has to be an integer and value a string
  If Not JSONCheckNumber(cData["device_id"]) Then
    WriteDebugLogError("params 'device_id' is missing or isn't numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  ' Detect if the "fields" parameter is supplied, it has to be an array of strings
  If cData["fields"] <> Null And If TypeOf(cData["fields"]) = gb.Object Then
    Try GetField = cData["fields"]
    If Error Then
      WriteDebugLogError("params 'fields' is not an array of strings")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif
  Endif

  ' Retrieve the information from the database, we will filter out in the next steps
  rResult = Devices.GetDeviceList("all+ext")
  
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No devices found in table 'devices'!")
    hJSONRPC.SetReply(0, cValue)
    Return
  Endif

  If GetField.Count = 0 Then
    BuildFilterFields(Type_Data_Device, rResult, MapField, GetField)
  Else
    If GetField.Count = 1 And If GetField.Exist("ALL") Then
      BuildFilterFields(Type_Data_Device, rResult, MapField, GetField)
    Endif
  Endif

  For Each rResult
    If cData["device_id"] = rResult!id Then
      ' Filter out the fields - if get get a False, an error happened
      If Not FilterFields(Type_Data_Device, GetField, rResult, MapField, cValue) Then
        Return
      Endif
      Break
    Endif

  Next

  ' Add device values
  aValueValue = New Collection[]
  rResultValues = Devices.GetValues(["device_id": cData["device_id"]])
  For Each rResultValues
    cValueValue = New Collection
    BuildFilterFields(Type_Data_DeviceValue, rResultValues, MapFieldValues, GetFieldValues)
    FilterFields(Type_Data_DeviceValue, GetFieldValues, rResultValues, MapFieldValues, cValueValue) 

    ' Overrule the icon value if we have valuenum 1
    If rResultValues!valuenum = 1 Then
      If Not IsNull(rResult!onicon) Or Not IsNull(rResult!officon) Then
        If UCase$(rResultValues!value) = "ON" Or UCase$(rResultValues!value) = "OPEN" Or UCase$(rResultValues!value) = "MOTION" Then
          Try cValue["icon"] = JSONToEmptyString(rResult!onicon)
        Else
          Try cValue["icon"] = JSONToEmptyString(rResult!officon)
        Endif
      Endif
    Endif

    aValueValue.Add(cValueValue)
  Next

  cValue.Add(aValueValue, "values")

  hJSONRPC.SetReply(0, cValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=location.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Location_List(cData As Collection)

  Dim cValue As New Collection
  Dim aValue As New Collection[]
  Dim rResult As Result
  Dim MapField As New Collection
  Dim GetField As New String[]

  MapField.Add("id", "location_id")

  rResult = Devices.GetLocationList()

  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No locations found in table 'locations'!")
    hJSONRPC.SetReply(0, aValue)
    Return
  Endif

  GetField = ["location_id", "name"]

  For Each rResult 
    cValue = New Collection

    ' Filter out the fields - if get get a False, an error happened
    If Not FilterFields(Type_Data_Location, GetField, rResult, MapField, cValue) Then
      Return
    Endif

    aValue.Add(cValue)

  Next

  hJSONRPC.SetReply(0, aValue)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=plugin.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Plugin_List()
  
  Dim cPl As CPluginEntry
  Dim cValue As New Collection
  Dim aValue As New Collection[]
  
  ' friendlyname
  ' pluginversion
  
  ' Loop through all inteface and start them
  For Each cPl In Plugin.cPluginList
    
    If cPl.Instance = 0 Then Continue
    
    cValue = New Collection
    cValue["name"] = JSONToEmptyString(cPl.Name)
    cValue["instance"] = cPl.Instance
    cValue["enabled"] = cPl.Settings["enabled"]

    If cPl.Interface Then
      Try cValue["running"] = cPl.Interface.IsRunning
      If Error Then cValue["running"] = False
      
      Try cValue["error"] = cPl.Interface.ErrorText
      If Error Then cValue["error"] = "UNKNOWN"
    Endif

    aValue.Add(cValue)
  Next
  
  hJSONRPC.SetReply(0, aValue)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=plugin.restart
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Plugin_Restart(cData As Collection)
  
  If cData = Null Then
    WriteDebugLogError("params 'name' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  If TypeOf(cData["name"]) <> gb.String Then
    WriteDebugLogError("params 'name' is missing or isn't a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  Plugin.Restart(JSONFromEmptyString(cData["name"]))
  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=email.send
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Email_Send(cData As Collection)
  
  If Not CheckParmString(cData, "to", False) Then Return
  If Not CheckParmString(cData, "subject") Then Return
  If Not CheckParmString(cData, "msg") Then Return
  
  If Mail.SendMail(cData["subject"], cData["msg"], cData["to"]) Then
    hJSONRPC.SetReply(0, True)
  Else
    hJSONRPC.SetReply(0, False)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=twitter.send
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Twitter_Send(cData As Collection)

  Dim iInstance As Integer
  Dim bOk As Boolean

  iInstance = CheckParmInstance(cData, "Twitter")
  If iInstance = 0 Then Return

  If Not CheckParmString(cData, "msg") Then Return
  
  Try bOk = Plugin.GetPluginObject("Twitter", iInstance).Interface.PostTweet(cData["msg"])
  If Error Or If Not bOk Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=sms.send
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_SMS_Send(cData As Collection)

  Dim iInstance As Integer
  Dim bOk As Boolean

  iInstance = CheckParmInstance(cData, "SMS")
  If iInstance = 0 Then Return

  If Not CheckParmString(cData, "msg") Then Return
  If Not CheckParmString(cData, "to") Then Return

  Try bOk = Plugin.GetPluginObject("SMS", iInstance).Interface.SendSMS(cData["msg"], cData["to"])
  If Error Or If Not bOk Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=nma.send
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_NMA_Send(cData As Collection)

  Dim iInstance As Integer

  iInstance = CheckParmInstance(cData, "NMA")
  If iInstance = 0 Then Return

  If Not CheckParmString(cData, "msg") Then Return
  If Not CheckParmString(cData, "application", False) Then Return
  If Not CheckParmString(cData, "event", False) Then Return
  
  Try Plugin.GetPluginObject("Pushover", iInstance).Interface.PostNMA(cData["application"], cData["event"], cData["msg"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=prowl.send
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Prowl_Send(cData As Collection)

  Dim iInstance As Integer

  iInstance = CheckParmInstance(cData, "Prowl")
  If iInstance = 0 Then Return
  
  If Not CheckParmString(cData, "msg") Then Return
  If Not CheckParmString(cData, "application", False) Then Return
  If Not CheckParmString(cData, "event", False) Then Return
  
  Try Plugin.GetPluginObject("Prowl", iInstance).Interface.PostProwl(cData["application"], cData["event"], cData["msg"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=pushover.send
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Pushover_Send(cData As Collection)

  Dim iInstance As Integer
  Dim bSound As Boolean

  iInstance = CheckParmInstance(cData, "Pushover")
  If iInstance = 0 Then Return

  If Not CheckParmString(cData, "msg") Then Return
  If Not CheckParmString(cData, "device", False) Then Return
  If Not CheckParmString(cData, "priority", False) Then Return
  If Not CheckParmString(cData, "sound", False) Then Return

  ' Check if it is in the allowed list
  If cData["sound"] <> "" Then
    Try bSound = Plugin.GetPluginObject("Pushover", iInstance).Interface.Sound_List.Exist(cData["sound"])
    If Not bSound Or If cData["sound"] = "pushover (default)" Then
      WriteDebugLogError("params 'sound' has an invalid value")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif 
  Endif
  
  ' Check the priority
  If cData["priority"] <> "" Then
    If cData["priority"] = "normal" Or If cData["priority"] = "0" Then cData["priority"] = ""
    If cData["priority"] = "low" Then cData["priority"] = "-1"
    If cData["priority"] = "high" Then cData["priority"] = "1"
    If cData["priority"] = "emergency" Then cData["priority"] = "2"
    
    Select cData["priority"]
      Case "", "-1", "1", "2"
      Default
        WriteDebugLogError("params 'priority' has an invalid value")
        hJSONRPC.SetReply(-32602, Null)
        Return
    End Select 
  Endif

  Try Plugin.GetPluginObject("Pushover", iInstance).Interface.PostPushover(cData["device"], cData["msg"], cData["priority"], cData["sound"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=event.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Event_List(cData As Collection)
  
  Dim cValue As New Collection
  Dim cValueAction As New Collection
  Dim aValue As New Collection[]
  Dim aValueAction As New Collection[]
  Dim rResult As Result
  Dim rResultAction As Result
  Dim jCnt As Integer
  Dim MapField As New Collection
  Dim GetField As New String[]
  
  ' Mapping of attribute names from SQL to JSON. Hopefully to be removed in the future
  MapField.Add("id", "event_id")
  MapField.Add("NA", "actionlist")
  
  ' Determine if we got a "field" parameter/value
  If cData <> Null Then
    
    ' Detect if the "fields" parameter is supplied, it has to be an array of strings
    If cData["fields"] <> Null And If TypeOf(cData["fields"]) = gb.Object Then
      Try GetField = cData["fields"]
      If Error Then
        WriteDebugLogError("params 'fields' is not an array of strings")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif
    Endif
    
  Endif
  
  rResult = Events.GetEventList()
  
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No events found in table 'events'!")
    hJSONRPC.SetReply(0, aValue)
    Return
  Endif
  
  If GetField.Count = 0 Then
    BuildFilterFields(Type_Data_Event, rResult, MapField, GetField)
  Endif
  
  For Each rResult
    
    cValue = New Collection
    
    ' Filter out the fields - if get get a False, an error happened
    If Not FilterFields(Type_Data_Event, GetField, rResult, MapField, cValue) Then
      Return
    Endif
    
    ' Add the action list - Only actionid & order, delay doesn't seem to be used?
    If GetField.Exist("actionlist") Then
      
      rResultAction = Events.GetEventActionList(rResult!id)
      
      aValueAction = New Collection[]
      
      For jCnt = 0 To rResultAction.Max
        cValueAction = New Collection
        
        cValueAction["action_id"] = rResultAction!action
        cValueAction["order"] = rResultAction!order
        
        aValueAction.Add(cValueAction)
        
        rResultAction.MoveNext
      Next
      
      cValue["actionlist"] = aValueAction
    Endif
    
    aValue.Add(cValue)
    
  Next
  
  hJSONRPC.SetReply(0, aValue)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=action.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Action_List(cData As Collection)
  
  Dim cValue As New Collection
  Dim aValue As New Collection[]
  Dim rResult As Result
  Dim MapField As New Collection
  Dim GetField As New String[]
  
  ' Mapping of attribute names from SQL to JSON. Hopefully to be removed in the future
  MapField.Add("id", "action_id")
  
  ' Determine if we got a "field" parameter/value
  If cData <> Null Then
    
    ' Detect if the "fields" parameter is supplied, it has to be an array of strings
    If cData["fields"] <> Null And If TypeOf(cData["fields"]) = gb.Object Then
      Try GetField = cData["fields"]
      If Error Then
        WriteDebugLogError("params 'fields' is not an array of strings")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif
    Endif
    
  Endif
  
  rResult = Events.GetActionList()
  
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No actions found in table 'actions'!")
    hJSONRPC.SetReply(0, aValue)
    Return
  Endif
  
  If GetField.Count = 0 Then
    BuildFilterFields(Type_Data_Action, rResult, MapField, GetField)
  Endif
  
  For Each rResult
    
    cValue = New Collection
    
    ' Filter out the fields - if get get a False, an error happened
    If Not FilterFields(Type_Data_Action, GetField, rResult, MapField, cValue) Then
      Return
    Endif
    
    aValue.Add(cValue)
    
  Next
  
  hJSONRPC.SetReply(0, aValue)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=scene.list
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Scene_List(cData As Collection)
  
  Dim cValue As New Collection
  Dim aValue As New Collection[]
  Dim rResult As Result
  Dim MapField As New Collection
  Dim GetField As New String[]
  
  ' Mapping of attribute names from SQL to JSON. Hopefully to be removed in the future
  MapField.Add("id", "scene_id")
  
  ' Determine if we got a "field" parameter/value
  If cData <> Null Then
    
    ' Detect if the "fields" parameter is supplied, it has to be an array of strings
    If cData["fields"] <> Null And If TypeOf(cData["fields"]) = gb.Object Then
      Try GetField = cData["fields"]
      If Error Then
        WriteDebugLogError("params 'fields' is not an array of strings")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif
    Endif
    
  Endif
  
  rResult = Scenes.GetSceneList()
  
  If Not rResult.Available Then
    Main.WriteLog(LogLabel & "ERROR: No scenes found in table 'scenes'!")
    hJSONRPC.SetReply(0, aValue)
    Return
  Endif
  
  If GetField.Count = 0 Then
    BuildFilterFields(Type_Data_Scene, rResult, MapField, GetField)
  Endif
  
  For Each rResult
    
    cValue = New Collection
    
    ' Filter out the fields - if get get a False, an error happened
    If Not FilterFields(Type_Data_Scene, GetField, rResult, MapField, cValue) Then
      Return
    Endif
    
    aValue.Add(cValue)
    
  Next
  
  hJSONRPC.SetReply(0, aValue)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=scene.run
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Scene_Run(cData As Collection)
  
  If cData = Null Then
    WriteDebugLogError("params 'scene_id' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  ' The id has to be an integer and value a string
  If Not JSONCheckNumber(cData["scene_id"]) Then
    WriteDebugLogError("params 'scene_id' is missing or isn't numeric")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  If Scenes.Run(cData["scene_id"]) Then
    hJSONRPC.SetReply(0, True)
  Else
    hJSONRPC.SetReply(0, False)
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=data.newmessage
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Data_Newmessage()
  
  Dim cValue As New Collection
  
  cValue["email"] = Main.iNewMails
  cValue["call"] = Main.iNewCalls
  cValue["voicemail"] = Main.iNewVoicemails
  
  hJSONRPC.SetReply(0, cValue)
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=squeezebox.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_SqueezeBox_Get(cData As Collection)
  
  Dim sValue As String
  Dim bValue As Boolean
  Dim aValue As New String[]
  
  If cData = Null Then
    WriteDebugLogError("params 'function' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  ' Detect if the "function" parameter is a string
  If TypeOf(cData["function"]) <> gb.String Then
    WriteDebugLogError("params 'function' is not a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  If cData["player"] <> Null Or If TypeOf(cData["player"]) <> gb.String Then
    WriteDebugLogError("params 'player' is not a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif
  
  Select cData["function"]
    Case "volume" ' get current volume of squeezebox player
      sValue = "0"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetVolumePlayer(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when prev number player")
      hJSONRPC.SetReply(0, sValue)
      
    Case "currentnumber" ' get current playing number (title)
      sValue = "No title"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentTitle(cData["player"])
      ' If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running current title player")
      hJSONRPC.SetReply(0, sValue)
      
    Case "currentartist" ' get current playing artist name
      sValue = "Unknown artist"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetCurrentArtist(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player name")
      hJSONRPC.SetReply(0, sValue)
      
    Case "albums" ' get the list of all the available albums
      Try aValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetAlbums()
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get albums command")
      hJSONRPC.SetReply(0, aValue)
      
    Case "mode" ' get the mode of the player
      sValue = "Unknown status"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetModePlayer(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running mode player")
      hJSONRPC.SetReply(0, sValue)
      
    Case "playerid" ' get the player id
      sValue = "Unknown id"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetPlayerId(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player id")
      hJSONRPC.SetReply(0, sValue)
      
    Case "playername" ' get the player name, using the id
      sValue = "Unknown name"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetPlayerName(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running get player name")
      hJSONRPC.SetReply(0, sValue)
      
    Case "playertype" ' get player type e.g. Stream, Squeezebox 2, Slimp3
      sValue = "Unknown type"
      Try sValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.GetIsPlayer(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running is player command")
      hJSONRPC.SetReply(0, sValue)
      
    Case "isconnected" ' get if the player is connected to SqueezeServer daemon
      Try bValue = Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayerConnectedToServer(cData["player"])
      'If Error Then Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' when running is player command")
      hJSONRPC.SetReply(0, bValue)
      
    Default ' not an allowed or invalid function type
      WriteDebugLogError("params 'function' = '" & cData["function"] & "' is an invalid value")
      hJSONRPC.SetReply(-32602, Null)
  End Select
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=squeezebox.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_SqueezeBox_Set(cData As Collection)

  Dim bValue As Boolean

  If cData = Null Then
    WriteDebugLogError("params 'function' is missing")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  ' Detect if the "function" parameter is a string
  If TypeOf(cData["function"]) <> gb.String Then
    WriteDebugLogError("params 'function' is not a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  If cData["player"] <> Null Or If TypeOf(cData["player"]) <> gb.String Then
    WriteDebugLogError("params 'player' is not a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  Select cData["function"]
    Case "volume" ' get current volume of squeezebox player
      If Not JSONCheckNumber(cData["volume"]) Then
        WriteDebugLogError("params 'volume' is not numeric")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif

      If Val(cData["volume"]) >= 0 And If Val(cData["volume"]) <= 100 Then
        Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.SetVolumePlayer(cData["player"], cData["volume"])
        If Not Error Then
          bValue = True
        Else
          ' Write error
        Endif
        hJSONRPC.SetReply(0, bValue)
      Else
        WriteDebugLogError("params 'volume' is not between 0 and 100")
        hJSONRPC.SetReply(-32602, Null)
      Endif 

    Case "startplayer"
      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.PlayPlayer(cData["player"])
      If Not Error Then
        bValue = True
      Else
        ' Write error
      Endif
      hJSONRPC.SetReply(0, bValue)

    Case "stopplayer"
      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.StopPlayer(cData["player"])
      If Not Error Then
        bValue = True
      Else
        ' Write error
      Endif
      hJSONRPC.SetReply(0, bValue)

    Case "nextnumber"
      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.NextNumberPlayer(cData["player"])
      If Not Error Then
        bValue = True
      Else
        ' Write error
      Endif
      hJSONRPC.SetReply(0, bValue)

    Case "prevnumber"
      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.PrevNumberPlayer(cData["player"])
      If Not Error Then
        bValue = True
      Else
        ' Write error
      Endif
      hJSONRPC.SetReply(0, bValue)

    Case "clearplaylist"
      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.ClearPlaylistPlayer(cData["player"])
      If Not Error Then
        bValue = True
      Else
        ' Write error
      Endif
      hJSONRPC.SetReply(0, bValue)

    Case "addalbumtoplaylist"
      If TypeOf(cData["volume"]) <> gb.String Then
        WriteDebugLogError("params 'album' is missing or is not a string")
        hJSONRPC.SetReply(-32602, Null)
        Return
      Endif

      Try Plugin.GetPluginObject("SqueezeServer", 1).Interface.AddAlbumToPlaylistPlayer(cData["player"], cData["album"])
      If Not Error Then
        bValue = True
      Else
        ' Write error
      Endif
      hJSONRPC.SetReply(0, bValue)

    Default
      WriteDebugLogError("params 'function' = '" & cData["function"] & "' is an invalid value")
      hJSONRPC.SetReply(-32602, Null)

  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=razberry.updatesready
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_RaZberry_Updatesready(cData As Collection)

  Dim iInstance As Integer = 1

  ' Check if we received an instanceid
  If cData <> Null Then
    If TypeOf(cData["instance_id"]) <> gb.Integer Then
      WriteDebugLogError("params 'instance_id' is missing or isn't numeric")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif

    Try iInstance = CInt(cData["instance_id"])
    If Error Then
      WriteDebugLogError("params 'instance_id' can't be converted to integer")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif
  Endif

  ' TODO: Fix instance  
  Try Plugin.GetPluginObject("RaZberry", iInstance).interface.GetUpdates()
  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=rrdtool.create
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_RRDTool_Create(cData As Collection)

  ' cData["device_id"]
  Try RRDTool.CreateRRDs(cData["device_id"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=rrdtool.update
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_RRDTool_Update(cData As Collection)

  Try RRDTool.CreateGraphs(cData["group"], cData["time"])
  Try RRDTool.CreateExtGraphs(cData["group"], cData["time"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=serverstat.update
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_ServerStat_Update(cData As Collection)

  Try ServerStats.CreateGraphs(cData["time"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=dsc.setpin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DSC_SetPin(cData As Collection)

  Try Plugin.GetPluginObject("DSC", 1).Interface.TX("0401" & cData["pin"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=dsc.setarm
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_DSC_SetArm(cData As Collection)

  'If InStr("0311 0301", sParams[0]) Then
  Try Plugin.GetPluginObject("DSC", 1).Interface.TX(cData["mode"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=ledmatrix.display
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_LEDMatrix_Display(cData As Collection)

  Try Plugin.GetPluginObject("LEDMatrix", 1).Interface.DisplayMessage(cData["displayid"], cData["msg"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=avcontrol.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_AVControl_Get(cData As Collection)

  Try AVControl.Get(JSONFromEmptyString(cData["model"]), JSONFromEmptyString(cData["cmd"]), JSONFromEmptyString(cData["address"]))
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=avcontrol.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_AVControl_Set(cData As Collection)

  Try AVControl.Set(JSONFromEmptyString(cData["model"]), JSONFromEmptyString(cData["cmd"]), JSONFromEmptyString(cData["value"]), JSONFromEmptyString(cData["address"]))
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=cul.simulate
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_CUL_Simulate(cData As Collection)

  Try Plugin.GetPluginObject("CUL", 1).Interface.Simulate(JSONFromEmptyString(cData["data"]))
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=cul.queuecommand
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_CUL_QueueCommand(cData As Collection)

  Try Plugin.GetPluginObject("CUL", 1).Interface.QueueCommand(JSONFromEmptyString(cData["cmd"]))
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif


End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=calendar.get
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Calendar_Get()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=calendar.set
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Calendar_Set(cData As Collection)

  ' cData["planning"] = String[]

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=thermostat.derogateheating
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Thermostat_DerogateHeating(cData As Collection)

  ' cData["scenario_id"] = CInt(iScenarioId)
  ' cData["heating_id"] = CInt(iHeatingId)
  ' cData["operator"] = JSONToEmptyString(sOperator)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=thermostat.getderogateheating
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Thermostat_GetDerogateHeating(cData As Collection)

  ' cData["heating_id"] = CInt(iHeatingId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Method=cmdr.plcbus.txcommand
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Cmdr_PLCBUS_TxCommand(cData As Collection)

  Try Plugin.GetPluginObject("PLCBUS", 1).Interface.PLCBUSTXCommand(cData["cmd"], cData["address"], cData["ack"], cData["data"])
  If Error Then
    hJSONRPC.SetReply(0, False)
  Else
    hJSONRPC.SetReply(0, True)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' method=subscribe.logupdate
' It always need to give a successful response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Subscribe_LogUpdate()

  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' This is NOT a method to be called by the JSON-RPC server
' It is used to push information to the JSON-RPC server when connections are subscribed to it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Subscribe_LogUpdate(cData As Collection)

  hJSONRPC.LogUpdate(cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' method=subscribe.deviceupdate 
' It always need to give a successful response
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Subscribe_DeviceUpdate()

  hJSONRPC.SetReply(0, True)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' This is NOT a method to be called by the JSON-RPC server
' It is used to push information to the JSON-RPC server when connections are subscribed to it
' It publish the DeviceUpdate information, the caller is responsible for delivering the right format
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Subscribe_DeviceUpdate(cData As Collection)

  hJSONRPC.DeviceUpdate(cData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' method=tools.openzwave.get
' Params:
' - command: list, controller
' - instance_id: numeric
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Call_Tools_OpenZWave_Get(cData As Collection)

  Dim cOpenZWaveNode As New COpenZWaveEntry
  Dim iInstance As Integer
  Dim hOpenZWave As Object
  Dim aNodeList As New Integer[]
  Dim aInstanceList As New Integer[]
  Dim iCnt As Integer
  Dim jCnt As Integer
  Dim iTemp As Integer
  Dim cInfo As New Collection
  Dim sValue As String
  Dim sValueValue As String
  Dim cValueValue As New Collection
  Dim aValueValue As New Collection[]
  Dim aValue As New Collection[]
  Dim cValue As New Collection
  Dim sElt As String[]
  Dim iGroup As Integer
  Dim iUserCode As Integer

  If cData = Null Then
    WriteDebugLogError("params 'command' and 'instance_id' is not supplied")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  ' Detect if the "command" is a string
  If TypeOf(cData["command"]) <> gb.String Then
    WriteDebugLogError("params 'command' is not a string")
    hJSONRPC.SetReply(-32602, Null)
    Return
  Endif

  ' Check for "instance_id", only not needed when getting instance list
  If cData["command"] <> "list" Then
    If Not JSONCheckNumber(cData["instance_id"]) Then
      WriteDebugLogError("params 'instance_id' is missing or isn't numeric")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif

    Try iInstance = CInt(cData["instance_id"])
    If Error Then
      WriteDebugLogError("params 'instance_id' can't be converted to integer")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif

    If iInstance <= 0 Then
      WriteDebugLogError("params 'instance_id' can't be zero or negative")
      hJSONRPC.SetReply(-32602, Null)
      Return
    Endif

    ' Don't continue if the Plugin isn't enabled
    If Not Plugin.IsPluginEnabled("OpenZWave", Instance) Then
      '...
    Endif

    ' Make reference to our local object, makes it easier to code
    Try hOpenZWave = Plugin.GetPluginObject("OpenZWave", iInstance).Interface
    If Error Then
      '...
    Endif

  Endif

  Select cData["command"]
    ' Get available/enabled controller list
    Case "list"
      aInstanceList = Plugin.GetPluginEnabledList("OpenZWave")
      cValue["count"] = aInstanceList.Count
      cValue["instance_id"] = aInstanceList

    ' Get controller information. If working, which API, HomeId, etc
    Case "controller"
      cValue["instance_id"] = iInstance
      cValue["running"] = hOpenZWave.IsRunning
      If Not hOpenZWave.IsRunning Then cValue["errortext"] = hOpenZWave.ErrorText
      cValue["homeid"] = hOpenZWave.GetHomeId()
      cValue["controllerid"] = hOpenZWave.GetControllerId() 
      cValue["controllertype"] = hOpenZWave.GetControllerType()
      cValue["apiversion"] = hOpenZWave.GetAPIVersion()
      cValue["sdkversion"] = hOpenZWave.GetSDKVersion()
      cValue["wrapperversion"] = hOpenZWave.GetWrapperVersion()
      cValue["ozwversion"] = hOpenZWave.GetOZWVersion()
      cValue["allqueried"] = hOpenZWave.bAllQueried

      aNodeList = hOpenZWave.GetNodeList()

      If aNodeList.Count >= 1 Then
        For iCnt = 0 To (aNodeList.Count - 1)
          cOpenZWaveNode = hOpenZWave.GetNodeInfo(aNodeList[iCnt])
          If cOpenZWaveNode <> Null Then
            cInfo = New Collection
            cInfo["node_id"] = cOpenZWaveNode.NodeId
            cInfo["basic"] = JSONToEmptyString(hOpenZWave.BasicTypeName(cOpenZWaveNode.Basic))
            cInfo["generic"] = JSONToEmptyString(hOpenZWave.GenericTypeName(cOpenZWaveNode.Generic))
            cInfo["listening"] = cOpenZWaveNode.Listening
            cInfo["frequentListening"] = cOpenZWaveNode.FrequentListening
            cInfo["routing"] = cOpenZWaveNode.Routing
            cInfo["security"] = cOpenZWaveNode.Security
            cInfo["manufacturername"] = JSONToEmptyString(hOpenZWave.GetNodeManufacturerName(cOpenZWaveNode.NodeId))
            cInfo["productname"] = JSONToEmptyString(hOpenZWave.GetNodeProductName(cOpenZWaveNode.NodeId))
            cInfo["neighbors"] = JSONToEmptyString(hOpenZWave.GetNodeNeighborsList(cOpenZWaveNode.NodeId))
            cInfo["commandclass"] = JSONToEmptyString(hOpenZWave.GetNodeCommandClassList(cOpenZWaveNode.NodeId))

            aValueValue = New Collection[]
            For Each sValueValue In cOpenZWaveNode.Values
              Try iTemp = CInt(cOpenZWaveNode.Values.Key) 
              If Not Error Then
                cValueValue = New Collection
                cValueValue["valuenum"] = iTemp
                cValueValue["value"] = JSONToEmptyString(sValueValue)
                aValueValue.Add(cValueValue)
              Endif
            Next

            cInfo.Add(aValueValue, "values")

            ' Add config items
            aValueValue = New Collection[]

            sValue = hOpenZWave.GetNodeConfigList(cOpenZWaveNode.NodeId)
            If sValue Then

              ' We got a list, fill the table now
              sElt = Split(sValue, "|")
              For Each sValue In sElt
                cValueValue = New Collection
                cValueValue["index"] = CInt(sValue)
                cValueValue["label"] = hOpenZWave.GetNodeConfigLabel(cOpenZWaveNode.NodeId, CInt(sValue))
                cValueValue["value"] = hOpenZWave.GetNodeConfigValue(cOpenZWaveNode.NodeId, CInt(sValue))
                aValueValue.Add(cValueValue)
              Next
            Endif

            cInfo.Add(aValueValue, "config")

            ' Add group items
            aValueValue = New Collection[]

            iGroup = hOpenZWave.GetNodeGroupCount(COpenZWaveNode.NodeId)

            For jCnt = 1 To iGroup
              cValueValue = New Collection
              cValueValue["group"] = jCnt
              cValueValue["label"] = hOpenZWave.GetNodeGroupLabel(COpenZWaveNode.NodeId, jCnt)
              cValueValue["list"] = hOpenZWave.GetNodeGroupList(COpenZWaveNode.NodeId, jCnt)
              cValueValue["help"] = hOpenZWave.GetNodeConfigHelp(COpenZWaveNode.NodeId, jCnt)
              aValueValue.Add(cValueValue)
            Next

            cInfo.Add(aValueValue, "groups")

            ' Add wakeup timer
            cInfo.Add(hOpenZWave.GetNodeWakeUpInterval(COpenZWaveNode.NodeId), "wakeup")

            ' Add UserCodes
            aValueValue = New Collection[]

            iUserCode = hOpenZWave.GetNodeUserCodeCount(COpenZWaveNode.NodeId)
            For jCnt = 1 To iUserCode
              cValueValue = New Collection
              cValueValue["usercode"] = jCnt
              cValueValue["label"] = hOpenZWave.GetNodeUserCodeLabel(COpenZWaveNode.NodeId, jCnt)
              cValueValue["value"] = hOpenZWave.GetNodeUserCodeValue(COpenZWaveNode.NodeId, jCnt)
              cValueValue["text"] = IIf(Left(cValueValue["value"], 4) = "0x00", "Free", "Enrolled")
              aValueValue.Add(cValueValue)
            Next

            cInfo.Add(aValueValue, "usercode")

            ' Add nodeinfo to an array
            aValue.Add(cInfo)

          Endif
        Next
      Endif

      cValue["count"] = aNodeList.Count
      cValue["nodeinfo"] = aValue

    Default
      WriteDebugLogError("params 'mode' has unknown value '" & cData["mode"] & "'")
      hJSONRPC.SetReply(-32602, Null)
      Return
  End Select

  hJSONRPC.SetReply(0, cValue)

End

