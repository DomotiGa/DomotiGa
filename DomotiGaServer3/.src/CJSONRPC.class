' Gambas class file

' Description:
' CJSONRPC.class
' Built-in JSON-RPC server.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "JSONRPC"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "JSON-RPC"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Alexander Kuiper"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[JSONRPC] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property HTTPPort As Integer
Property MaxConn As Integer
Property JSONRPCDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iHTTPPort As Integer
Private $iMaxConn As Integer
Private $bJSONRPCDebug As Boolean

Public hJSONRPC As JsonRpcServer
Private APIVersion As String = "0.18"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iMaxConn = cPl.Settings["maxconn"]
  $iHTTPPort = cPl.Settings["httpport"]
  $bJSONRPCDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  Dim hRpcFunc As JsonRpcFunction

  hJSONRPC = New JsonRpcServer As "hJSONRPC"

  ' start method definitions
  ' system methods
  hRpcFunc = New JsonRpcFunction("domotiga.system.program_uptime")
  hRpcFunc.Help = ("returns the program uptime.")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.system.program_version")
  hRpcFunc.Help = ("returns the program version.")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.system.hostname")
  hRpcFunc.Help = ("returns the hostname.")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.globalvar.list")
  hRpcFunc.Help = ("returns a list of global variables.")
  hJSONRPC.Register(hRpcFunc)
  hRpcFunc = New JsonRpcFunction("domotiga.globalvar.get")
  hRpcFunc.Help = ("returns a list of global variables with values.")
  hJSONRPC.Register(hRpcFunc)


  Try hJSONRPC.Listen($iHTTPPort, $iMaxConn)
  If hJSONRPC.Listening Then
    ' Write to main logfile we connected successfully
    Main.WriteLog(LogLabel & PluginFriendlyName & " Server listening on Port " & $iHTTPPort)
    IsRunning = True
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
    Print Error.Text
    IsRunning = False
    ErrorText = "Net Not Active"
    Return False
  Endif

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " Server FAILED listen on  Port " & $iHTTPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

' shutdown our xmlrpc server
Public Sub Disconnect()

  hJSONRPC.Stop()

End

Public Sub hJSONRPC_RemoteCall(sName As String, sData As Collection)

  Dim vValue As Variant
  Dim cValue As New Collection
  Dim sAValue As New String[]
  Dim sParam As String
  Dim iParam As Integer

  If $bJSONRPCDebug Then
    Main.WriteDebugLog(LogLabel & "Got a RemoteCall for method '" & sName & "'")
    'For Each sParam In sData
    '  Main.WriteDebugLog(LogLabel & "Param[" & iParam & "] = '" & Main.HtmlDecode(sParam) & "'")
    '  Inc iParam
    'Next
  Endif

  ' -32602 = Invalid parameters
  ' -32601 = Invalid method

  Select Case sName
    ' system methods
    Case "domotiga.system.hostname"
      hJSONRPC.SetReply(0, System.Host)
    Case "domotiga.system.program_uptime"
      hJSONRPC.SetReply(0, Main.GetGlobalVar("Program_Uptime"))
    Case "domotiga.system.program_version"
      hJSONRPC.SetReply(0, Main.sProgramVersion)
    Case "domotiga.globalvar.list"
      For Each vValue In Main.GlobalVar
        sAValue.Add(Main.GlobalVar.Key)
      Next
      hJSONRPC.SetReply(0, sAValue)
    Case "domotiga.globalvar.get"
      For Each vValue In Main.GlobalVar
        cValue[Main.GlobalVar.Key] = vValue
      Next
      hJSONRPC.SetReply(0, cValue)
    Default
      hJSONRPC.SetReply(-32601, Null)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function HTTPPort_Read() As Integer

  Return $iHTTPPort

End

Private Sub HTTPPort_Write(Value As Integer)

  $iHTTPPort = Value

End

Private Function MaxConn_Read() As Integer

  Return $iMaxConn

End

Private Sub MaxConn_Write(Value As Integer)

  $iMaxConn = Value

End

Private Function JSONRPCDebug_Read() As Boolean

  Return $bJSONRPCDebug

End

Private Sub JSONRPCDebug_Write(Value As Boolean)

  $bJSONRPCDebug = Value

End
