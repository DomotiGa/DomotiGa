' Gambas module file

' Description:
' Util.module
' This module provides generic routines available in all other modules and classes, and not putting it in the Main.module anymore

' Development Status:
' Just started

' Credits:
' Alexander Kuiper

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

' Following collection stores already downloaded files, normally no need to re-download
Private $cDownloadedFiles As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts empty string to Chr(1), because Gambas doesn't support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSON_AddEmpty(sValue As String) As String

  If sValue Then
    Return sValue
  Else
    Return Chr(1)
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Converts Chr(1) to empty string, because Gambas doesn't support "" strings in collections
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub JSON_RemoveEmpty(sValue As String) As String

  If sValue = Chr(1) Then
    Return ""
  Else
    Return sValue
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Convert Unix Epoch to readable format 
' UTC=True - then timezone info will be added
' Hex=True - we expect a length of 8 and in hex format
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub TimeSinceEpoch(sTime As String, Optional bUTC As Boolean = False, Optional bHex As Boolean = False) As String

  Dim gTime As Date

  If bHex Then
    If Len(sTime) <> 8 Then Return ""
  Endif

  ' calculate time since epoch
  If bHex Then
    gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val("&H" & sTime & "&"))
  Else
    gTime = DateAdd(Date(1970, 1, 1), gb.Second, Val(sTime))
  Endif

  If bUTC Then
    gTime = DateAdd(gTime, gb.Second, CInt(Main.fAstroAutoTimezone * 3600))
  Endif

  Return Format$(gTime, "yyyy/mm/dd hh:nn:ss")

Catch ' some errors
  Main.WriteDebugLog("[Util] ERROR: TimeSinceEpoch Failed (" & sTime & "), " & Error.Text & " at " & Error.Where)

End