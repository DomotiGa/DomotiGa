' Gambas module file

' Description:
' Plugin.module
' Functionality to work with Plugins
'
' Development Status:
' Finished

' Credits:
' Based on an idea of Teus Hagen, coded by Alexander Kuiper

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

' TODO: Main, Astro, etc - special settings_* aren't supported YET

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public $bDebug As Boolean
Public $tRestartDelayTimer As CTimerGeneric

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginList contain all the modules/interfaces available on the system
' Key format is "<pluginname#<instance>". E.g. Key=ups#1
' NOTE: E.g. Key=ups#0 is a special key, this one always exists and 
'       defines that the Class is available
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginList As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginEnabled contains the shortlist of classes,
' should only be used by FMain.class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginEnabled As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginRunTask contains the modules/classes list which 
' have to be called every minute for crontab check. This
' only applies for OpenZWave and DSC.
' NOTE: The module/class will have "PluginRunTask=True"
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginRunTask As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const Type_None As Integer = 0
Public Const Type_OpenZWave As Integer = 1

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Init - Register all known plugins
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Init()

  Dim rPlugins As Result
  Dim sPluginName, sPlugintype As String

  ' find all plugins
  Try rPlugins = Devices.FindPlugins()
  If rPlugins Then
    For Each rPlugins
      sPluginName = rPlugins!name
      sPluginType = rPlugins!type
      Select Case LCase(sPluginType)
        Case "class"
          If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin named '" & sPluginName & "' of type '" & sPluginType & "' found.")

          If Main.bServer Then
            Register(sPluginName)
          Else
            Register_Client(sPluginName)
          Endif

        Case "module", "virtual"
          If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin named '" & sPluginName & "' of type '" & sPluginType & "' found, skipping.")
        Case Else
          Main.WriteDebugLog("[Plugin] Unknown Plugin type found '" & sPluginType & "'!")
      End Select
    Next
  Else
    Main.WriteDebugLog("[Plugin] No Plugins found in database, something is wrong!")
    Return
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Register interfaces/module in Client mode
' sPluginName = Displayname like UPS, Twitter, Visonic
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Register_Client(sPluginName As String)

  Dim rResult As Result
  Dim cPl, cPlZero As CPluginEntry
  Dim hField As ResultField
  Dim sTableName As String = "settings_" & LCase(sPluginName)
  Dim sClassName As String = "C" & sPluginName

    ' Get the first row of the settings_<sPluginName>
    rResult = GetSettingsTable(sTableName, 0)

    If rResult = Null Then
      Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' not found in database (id=0)")
      Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
      Return
    Endif

  If rResult.Count = 0 Then
    Main.WriteLog("[Plugin] ERROR: No data found, table '" & sTableName & "' is empty (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
    Return
  Endif

  cPlZero = New CPluginEntry
  cPlZero.Name = sPluginName
  cPlZero.KeyName = LCase(sPluginName) & "#0"
  cPlZero.Instance = 0
  cPlZero.ClassName = sClassName

  ' All initialized, put it in the collection
  cPluginList[LCase(sPluginName) & "#0"] = cPlZero

  rResult = GetSettingsTable(sTableName)

  If rResult = Null Or rResult.Count = 0 Then
    Return
  Endif

  For Each rResult
    cPl = New CPluginEntry
    cPl.Name = sPluginName
    cPl.KeyName = LCase(sPluginName) & "#" & rResult!id
    cPl.Instance = rResult!id
    cPl.ClassName = sClassName

    For Each hField In rResult.Fields
      cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

    If cPl.Settings["enabled"] Then
      cPluginEnabled[LCase(sPluginName)] = "enabled"
    Endif

    ' All initialized, put it in the collection
    cPluginList[LCase(sPluginName) & "#" & rResult!id] = cPl

  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Register interfaces/modules
' sPluginName = Displayname like UPS, Twitter, Visonic
' bClient = Register also in client mode, normally only applicable for BroadcastUDP
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Register(sPluginName As String)

  Dim rResult As Result
  Dim cPl, cPlZero As CPluginEntry
  Dim hField As ResultField
  Dim oTemp As Object
  Dim sTemp As String
  Dim cTemp As String[]
  Dim sTableName As String = "settings_" & LCase(sPluginName)
  Dim sClassName As String = "C" & sPluginName
  Dim iType As Integer
  Dim bAutoStart As Boolean

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & " Register - Started")

  ' Plugin name can't contain a "#" character
  If InStr(LCase(sPluginName), "#") Then
    Main.WriteLog("[Plugin] ERROR: Plugin '" & sClassName & "' name can't contain a '#' character!")
    Return
  Endif

  ' Try to load the class first. If it fails, don't continue
  Try Class.Load(sClassName)
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Failed to load Plugin '" & sClassName & "'")
    Return
  Endif

  ' Assign the Module to the oTemp or create the Class temporary
  ' NOTE: We need to *only* cleanup the class at the end
  oTemp = Object.New(sClassName)

  ' Try to get the PluginName, don't continue if it fails. Most likely an invalid Module/Class
  Try sTemp = oTemp.PluginName
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' looks to be invalid, the 'PluginName' is missing!")
    Return
  Endif

  ' Try to get the PluginFriendlyName, don't continue if it fails. Most likely an invalid Module/Class
  Try sTemp = oTemp.PluginFriendlyName
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' looks to be invalid, the 'PluginFriendlyName' is missing!")
    Return
  Endif

  ' Safety check: that Class matches loaded module
  If LCase(sPluginName) <> LCase(oTemp.PluginName) Then
    Main.WriteLog("[Plugin] ERROR: Plugin Mismatch Name='" & sPluginName & "', Plugin='" & oTemp.PluginName & "'")
    Return
  Endif

  ' Check for Plugin specific Type value
  Try iType = oTemp.PluginType
  If Error Then
    iType = 0
  Endif

  ' Check for Plugin specific Type value
  Try bAutoStart = oTemp.PluginAutoStart
  If Error Then
    bAutoStart = True
  Endif

  ' Report plugin information
  If Main.bDebugPlugin Then
    Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & " Information:")
    Try Main.WriteDebugLog("[Plugin]     Class=" & sClassName)
    Try Main.WriteDebugLog("[Plugin]     FriendlyName=" & oTemp.PluginFriendlyName)
    Try Main.WriteDebugLog("[Plugin]     Version=" & oTemp.PluginVersion)
    Try Main.WriteDebugLog("[Plugin]     Author=" & oTemp.PluginAuthor)
    Try Main.WriteDebugLog("[Plugin]     MaxInstances=" & oTemp.PluginMaxInstances)
    Try Main.WriteDebugLog("[Plugin]     AutoStart=" & IIf(bAutoStart, "True", "False"))
    Try cTemp = oTemp.PluginProtocols
    If cTemp Then
      For Each sTemp In cTemp
        Main.WriteDebugLog("[Plugin]   Protocols=" & sTemp)
      Next
    Endif
  Endif

  ' Get the first row of the settings_<sPluginName>
  rResult = GetSettingsTable(sTableName, 0)

  If rResult = Null Then
    Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' not found in database (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
    Return
  Endif

  If rResult.Count = 0 Then
    Main.WriteLog("[Plugin] ERROR: No data found, table '" & sTableName & "' is empty (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Plugin '" & sPluginName & "'")
    Return
  Endif

  cPlZero = New CPluginEntry
  cPlZero.Type = iType
  cPlZero.Name = sPluginName
  cPlZero.KeyName = LCase(sPluginName) & "#0"
  cPlZero.Instance = 0
  cPlZero.ClassName = sClassName
  cPlZero.AutoStart = bAutoStart

  Try cPlZero.MaxInstances = oTemp.PluginMaxInstances
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' looks to be invalid, the 'PluginMaxInstances' is missing!")
    Return
  Endif

  ' All initialized, put it in the collection
  cPluginList[LCase(sPluginName) & "#0"] = cPlZero

  rResult = GetSettingsTable(sTableName)

  If rResult = Null Or rResult.Count = 0 Then
    Return
  Endif

  For Each rResult
    cPl = New CPluginEntry
    cPl.Type = iType
    cPl.Name = sPluginName
    cPl.KeyName = LCase(sPluginName) & "#" & rResult!id
    cPl.Instance = rResult!id
    cPl.MaxInstances = oTemp.PluginMaxInstances
    cPl.ClassName = sClassName
    cPl.AutoStart = bAutoStart

    For Each hField In rResult.Fields
      cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

   If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & ", Instance=" & rResult!id & ", Settings=" & JSON.Encode(cPl.Settings))

    ' All initialized, put it in the collection
    cPluginList[LCase(sPluginName) & "#" & rResult!id] = cPl

    ' Do special things for e.g. OpenZWave
    Select iType
      Case Type_OpenZWave
        If cPlZero.Settings.Exist("debug") Then
          If cPl.Settings["debug"] Then
            cPlZero.Settings["debug"] = True
          Endif
        Else
          cPlZero.Settings["debug"] = cPl.Settings["debug"]
        Endif
    End Select

  Next

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & sPluginName & " Register - Finished")

' Don't crash DomotiGa if we hit an error
Catch
  Main.WriteLog("[Plugin] ERROR: '" & Error.Text & "' while registering Plugin '" & sPluginName & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start All modules/classes in cPluginList
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartAll()

  Dim cPl As CPluginEntry
  Dim cReported As New Collection
  Dim bRunTask As Boolean

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StartAll - Started")

  ' Loop through all plugins and start them
  For Each cPl In cPluginList

    ' Skip the #0 entries, these can't be started
    If InStr(cPl.KeyName, "#0") = 0 And If cPl.AutoStart Then

      ' Also only start enabled modules/classes
      If cPl.Settings["enabled"] Then

        If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & cPl.Name & ", Instance=" & cPl.Instance & " - ENABLED")

        ' Put this plugin in the enabled list
        cPluginEnabled[LCase(cPl.Name)] = "enabled"

        ' Create the new Object
        cPl.Interface = Object.New(cPl.ClassName)

        ' Print module enabled information - only once
        ' We don't do it in the module/class, because that isn't reliable enough
        If cReported.Exist(cPl.Name) = False Then
          Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & " enabled.")
          cReported[cPl.Name] = True
        Endif

        ' Do special things for Types. Normally we store it in Settings, gives us most flexiblity
        Select cPl.Type
          Case Type_OpenZWave
            Try cPl.Settings["libdebug"] = cPluginList[Mid$(cPl.KeyName, 1, InStr(cPl.KeyName, "#")) & "0"].Settings["debug"]
            If Error Then
              cPl.Settings["libdebug"] = False
            Endif
        End Select

        If cPl.Settings["debug"] Then LogSettings(cPl)

        Try Object.Call(cPl.Interface, "StartPlugin", [cPl])
        If Error Then
          Main.WriteLog("[Plugin] ERROR: Plugin '" & cPl.Name & "' doesn't have a StartPlugin Function. ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
          Continue
        Endif

        ' Check if the PluginRunTask exist, then we need to call it every minute
        Try bRunTask = cPl.Interface.PluginRunTask
        If Not Error Then
          If bRunTask Then
            cPluginRunTask[cPl.KeyName] = "active"
          Endif
        Endif
      Else
        If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & cPl.Name & ", Instance=" & cPl.Instance & " - DISABLED")
      Endif
    Endif
  Next

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StartAll - Finished")

Catch
  Main.WriteLog("[Plugin] ERROR: '" & Error.Text & "' while starting Plugin at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop All modules/classes in cPluginList
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopAll()

  Dim cPl As CPluginEntry

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StopAll - Started")

  ' Destroy all objects
  For Each cPl In cPluginList

    ' Skip the #0 entries, these can't be stopped - we try to stop the AutoStart plugins too
    If InStr(cPl.KeyName, "#0") = 0 Then

      If Not cPl.Settings["enabled"] Then Continue
      If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin=" & cPl.Name & ", Instance=" & cPl.Instance & " - STOPPING")

      Try Object.Call(cPl.Interface, "StopPlugin")

      ' Destroy the object
      cPl.Interface = Null

      ' Remove possible RunTask
      If cPluginRunTask.Exist(cPl.KeyName) Then
        cPluginRunTask.Remove(cPl.KeyName)
      Endif

    Endif
  Next

  If Main.bDebugPlugin Then Main.WriteDebugLog("[Plugin] Plugin StopAll - Finished")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Restart Interface & Instance after FSettings in Client mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart_Client(sPluginName As String, Optional iInstance As Integer = 1)

  Dim rResult As Result
  Dim cPl As CPluginEntry
  Dim hField As ResultField
  Dim sTableName As String = "settings_" & LCase(sPluginName)

  ' Try to load settings_<sPluginName>
  rResult = GetSettingsTable(sTableName, iInstance)

  ' Row doesn't exist anymore, stop interface/instance and remove from list
  If rResult = Null Or rResult.Count = 0 Then
    cPluginList.Remove(LCase(sPluginName) & "#" & iInstance)
    Return
  Else
    ' Get a local copy
    cPl = cPluginList[LCase(sPluginName) & "#" & iInstance]

    ' Empty the collection and fill it again
    cPl.Settings.Clear()
    For Each hField In rResult.Fields
      cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next
  Endif

  ' Update the cPluginEnabled list now
  If cPluginEnabled.Exist(LCase(sPluginName)) Then
    cPluginEnabled.Remove(LCase(sPluginName))
  Endif

  ' Loop through all plugins and tag enabled modules/classes
  For Each cPl In cPluginList
    If LCase(cPl.Name) = LCase(sPluginName) Then
      If cPl.Instance >= 1 Then
        If cPl.Settings["enabled"] Then cPluginEnabled[LCase(sPluginName)] = "enabled"
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Restart Interface & Instance in Server Mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart(sPluginName As String, Optional iInstance As Integer = 1)

  Dim rResult As Result
  Dim cPl As CPluginEntry
  Dim cPlNew As CPluginEntry
  Dim hField As ResultField
  Dim bRunTask As Boolean
  Dim sTableName As String = "settings_" & LCase(sPluginName)

  ' First instance *has* to exist
  If cPluginList.Exist(LCase(sPluginName) & "#0") = False Then
    ' Load settings from database first
    Main.GetSettings()
    ' Temporary workaround to allow restart of none managed modules
    Try Object.Call(Main, "Restart_" & sPluginName)
    If Error Then
      Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' isn't properly initialized!")
    Endif

    Return
  Endif

  ' try to load settings_<sPluginName>
  rResult = GetSettingsTable(sTableName, iInstance)

  ' Remove possible RunTask
  If cPluginRunTask.Exist(LCase(sPluginName) & "#" & iInstance) Then
    cPluginRunTask.Remove(LCase(sPluginName) & "#" & iInstance)
  Endif

  ' Module/Class exists - if something changed we need to restart
  ' Covers an interface removed or modified
  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then

    ' Get a local copy
    cPl = cPluginList[LCase(sPluginName) & "#" & iInstance]

    ' Stop the interface/instance
    If cPl.Interface <> Null Then
      Try Object.Call(cPl.Interface, "StopPlugin")
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' doesn't have a StopPlugin Function. ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
      Endif
    Endif

    ' Report for enabled ones, that it is disabled now
    If cPl.Settings["enabled"] And If cPl.Interface Then
      Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & IIf(cPl.Interface.PluginMaxInstances > 1, ", Instance #" & iInstance, "") & " disabled.")
    Endif

    ' Destroy the object
    cPl.Interface = Null

    ' Row doesn't exist anymore, stop interface/instance and remove from list
    If rResult = Null Or rResult.Count = 0 Then
      cPluginList.Remove(LCase(sPluginName) & "#" & iInstance)
      Return
    Else

      ' Empty the collection and fill it again
      cPl.Settings.Clear()
      For Each hField In rResult.Fields
        cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
      Next

      ' If the module is enabled (or still is) start now
      If cPl.Settings["enabled"] Then

        ' Create object first
        cPl.Interface = Object.New(cPl.ClassName)

        ' Report that it is enabled
        Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & IIf(cPl.Interface.PluginMaxInstances > 1, ", Instance #" & iInstance, "") & " enabled.")

        If cPl.Settings["debug"] Then LogSettings(cPl)

        Try Object.Call(cPl.Interface, "StartPlugin", [cPl])
        If Error Then
          Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' doesn't have a StartPlugin Function. ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
        Else
          ' Check if the PluginRunTask exist, then we need to call it every minute
          Try bRunTask = cPl.Interface.PluginRunTask
          If Not Error Then
            If bRunTask Then
              cPluginRunTask[LCase(sPluginName) & "#" & iInstance] = "active"
            Endif
          Endif
        Endif

      Endif

    Endif

  Else

    ' Instance doesn't exist yet, we need to initialize it
    cPl = cPluginList[LCase(sPluginName) & "#0"]

    ' Copy information from instance 0
    cPlNew = New CPluginEntry
    cPlNew.Name = cPl.Name
    cPlNew.KeyName = LCase(sPluginName) & "#" & iInstance
    cPlNew.Instance = iInstance
    cPlNew.ClassName = cPl.ClassName
    cPlNew.Interface = Null
    For Each hField In rResult.Fields
      cPlNew.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

    cPluginList[LCase(sPluginName) & "#" & iInstance] = cPlNew

    ' If the module is enabled start now
    If cPlNew.Settings["enabled"] Then

      ' Create object first
      cPlNew.Interface = Object.New(cPl.ClassName)

      Try Object.Call(cPlNew.Interface, "StartPlugin", [cPlNew])
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Plugin '" & sPluginName & "' doesn't have a StartPlugin Function. ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
      Endif

      ' Check if the PluginRunTask exist, then we need to call it every minute
      Try bRunTask = cPlNew.Interface.PluginRunTask
      If Not Error Then
        If bRunTask Then
          cPluginRunTask[LCase(sPluginName) & "#" & iInstance] = "active"
        Endif
      Endif

    Endif

  Endif

  ' Update the cPluginEnabled list now
  If cPluginEnabled.Exist(LCase(sPluginName)) Then
    cPluginEnabled.Remove(LCase(sPluginName))
  Endif

  ' Loop through all plugins and tag enabled modules/classes
  For Each cPl In cPluginList
    If LCase(cPl.Name) = LCase(sPluginName) Then
      If cPl.Instance >= 1 Then
        If cPl.Settings["enabled"] Then cPluginEnabled[LCase(sPluginName)] = "enabled"
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Restart a plugin with delay (timer), mainly used for JSON-RPC with client/server mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RestartDelay(sPluginName As String, Optional iInstance As Integer = 1)

  If Not $tRestartDelayTimer Then
    $tRestartDelayTimer = New CTimerGeneric As "tRestartDelayTimer"
  Endif

  $tRestartDelayTimer.Tag = sPluginName & "|" & iInstance
  $tRestartDelayTimer.Trigger

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' We got the delayed Restart of a plugin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tRestartDelayTimer_Timer()

  If InStr(Last.Tag, "|") Then
    Restart(Mid(Last.Tag, 1, InStr(Last.Tag, "|") - 1), CInt(Mid(Last.Tag, InStr(Last.Tag, "|") + 1)))
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return if plugin is registered
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsPluginRegistered(sPluginName As String, Optional iInstance As Integer = 1) As Boolean

  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then
    Return True
  Else
    ' If the Instance doesn't exist, check for #0 and error if not existing
    If cPluginList.Exist(LCase(sPluginName) & "#0") = False Then
      Main.WriteLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' isn't properly initialized!")
    Endif

    Return False
  Endif

End 

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Return True if plugin is enabled
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsPluginEnabled(sPluginName As String, Optional iInstance As Integer = 1) As Boolean

  Dim bEnabled As Boolean

  If iInstance = 0 Then
    Return cPluginEnabled.Exist(LCase(sPluginName))
  Else

    ' First check if the Plugin & Instance do exist in our Plugin list
    If IsPluginRegistered(sPluginName, iInstance) Then

      ' First check if the module/interface is enabled
      Try bEnabled = GetPluginObject(sPluginName, iInstance).Settings["enabled"]

      ' Check for errors, it is possible the Object doesn't have a valid "Settings[enabled]" (faulty module/interface)
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' looks to be invalid, the 'Settings[enabled]' is missing!")
        bEnabled = False
      Endif
    Else
      bEnabled = False
    Endif
  Endif

  Return bEnabled

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return if plugin is enabled and running
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub IsPluginRunning(sPluginName As String, Optional iInstance As Integer = 1) As Boolean

  Dim bRunning As Boolean

  ' First check if the Plugin & Instance do exist in our Plugin list
  If IsPluginRegistered(sPluginName, iInstance) Then

    ' First check/try IsRunning variable
    Try bRunning = GetPluginObject(sPluginName, iInstance).Interface.IsRunning

    ' Check for errors, it is possible the Object doesn't have an "IsRunning" (faulty module/interface)
    If Error Then
      Main.WriteLog("[Plugin] ERROR: Module/Class '" & sPluginName & "' looks to be invalid, the 'IsRunning' is missing!")
      bRunning = False
    Endif
  Else
    bRunning = False
  Endif

  Return bRunning

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve max number of instances for a certain plugin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPluginMaxInstances(sPluginName As String) As Integer

  Dim cPl As CPluginEntry

  ' Loop through all plugins
  For Each cPl In cPluginList

   ' Now match the requested plugin
    If InStr(cPl.KeyName, LCase(sPluginName) & "#") >= 1 Then
      Return cPl.MaxInstances
    Endif
  Next

  ' Plugin not found
  Return 0

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Retrieve the list of enabled instances of a certain plugin
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPluginEnabledList(sPluginName As String) As Integer[]

  Dim cPl As CPluginEntry
  Dim AValue As New Integer[]

  ' Loop through all plugins
  For Each cPl In cPluginList

    ' Skip #0 entries
    If InStr(cPl.KeyName, "#0") = 0 Then

      ' Now match the requested plugin
      If InStr(cPl.KeyName, LCase(sPluginName) & "#") >= 1 Then

        If cPl.Settings["enabled"] Then
          aValue.Add(cPl.Instance)
        Endif
      Endif
    Endif
  Next

  ' Return a sort instance list
  Return aValue.Sort()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Pointer to the Object ... Don't modify data !
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPluginObject(sPluginName As String, Optional iInstance As Integer = 1) As Object

  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then
    Try Return cPluginList[LCase(sPluginName) & "#" & iInstance]
  Else
    Return Null
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Send command to plugin. The "SendCommand" routine is a
' fixed name, but doesn't have to exist
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sPluginName As String, iInstance As Integer, sAddress As String, sCmd As String, Optional sDeviceName As String) As Boolean

  ' The Plugin needs to be enabled
  If isPluginEnabled(sPluginName, iInstance) Then

    ' The Plugin needs to be in IsRunning state
    If isPluginRunning(sPluginName, iInstance) Then

      ' Send the command to the right interface/instance
      Try GetPluginObject(sPluginName, iInstance).Interface.SendCommand(sAddress, sCmd)

      ' Throw an error, because we are sending a SendCommand to a plugin without the routine
      If Not Error Then
        Return True
      Else
        Main.WriteDebugLog("[Plugin] ERROR: '" & sPluginName & "' doesn't have a 'SendCommand' function, most likely you are trying to control a ReadOnly interface!")
        Return False
      Endif
    Else
      If Len(sDeviceName) Then
        Main.WriteLog("[Plugin] ERROR: Can't control device '" & sDeviceName & "' with address '" & sAddress & "' because plugin '" & sPluginName & "' is in error state!")
      Else
        Main.WriteLog("[Plugin] ERROR: Can't control device with address '" & sAddress & "' because plugin '" & sPluginName & "' is in error state!")
      Endif
      Return False 
    Endif

  Else
    Main.WriteLog("[Plugin] ERROR: Can't control device because plugin '" & sPluginName & "' is not enabled!")
    Return False 
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get the configuration from the settings table
' If iRow = -1 give all the rows back (except row=0, this is default)
' If iRow >= 0 give only the requested row back
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetSettingsTable(sTableName As String, Optional iRow As Integer = -1) As Result

  Dim rResult As Result

  sTableName = LCase(sTableName)

  If iRow >= 0 Then
    Try rResult = Main.hDB.Exec("SELECT * FROM " & sTableName & " WHERE id = &1", iRow)
    If Error Then Main.WriteLog("[Plugin] Read failed on table '" & sTableName & "'. Error=" & Error.Text)
    Return rResult
  Else
    Try rResult = Main.hDB.Exec("SELECT * FROM " & sTableName & " WHERE id >= 1 ORDER BY id")
    If Error Then Main.WriteLog("[Plugin] Read failed on table '" & sTableName & "'. Error=" & Error.Text)
    Return rResult
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' The RunTask will be called every minute by EventLoop
' In registered, it should only do crontab alike checks
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunTask()

  Dim vValue As Variant

  ' Go through the whole list, and try to start RunTask
  For Each vValue In cPluginRunTask
    If cPluginList.Exist(cPluginRunTask.Key) Then
      Try Object.Call(cPluginList[cPluginRunTask.Key].Interface, "RunTask")

      If Error Then
        Main.WriteLog("[Plugin] ERROR: Module/Class '" & cPluginRunTask.Key & "' doesn't have a RunTask Function, but it has the 'PluginRunTask=True'. ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

        ' Remove the entry, because it isn't useful to run it in the next minute
        ' NOTE: After a restart it will show up again, this is per design
        cPluginRunTask.Remove(cPluginRunTask.Key)
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Log plugin settings in debug mode
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LogSettings(oSettings As Object)

  Dim sStr As String
  Dim sLogLabel As String

  sLogLabel = oSettings.Interface.LogLabel
  If oSettings.Instance <> 1 Then sLogLabel = Replace(sLogLabel, "] ", "#" & oSettings.Instance & "] ")

  Main.WriteDebugLog(sLogLabel & "*** Start Plugin: " & oSettings.Interface.PluginFriendlyName & " " & " Version: " & oSettings.Interface.PluginVersion & " *** ")
  For Each sStr In oSettings.Settings
    Main.WriteDebugLog(sLogLabel & "  [Settings] " & oSettings.Settings.Key & ": " & sStr)
  Next

End
