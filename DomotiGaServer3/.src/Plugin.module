' Gambas module file

' Description:
' Plugin.module
' This module stores all the interface information
'
' Development Status:
' Initial testing build

' Credits:
' Based on an idea of Teun Hagen, coded by Alexander Kuiper

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

' TODO:
' Main, Astro, etc - special settings_* aren't supported YET

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cPluginList contain all the modules/interfaces available on the system
' Key format is "<pluginname#<instance>". E.g. Key=ups#1
' NOTE: E.g. Key=ups#0 is a special key, this one always exists and 
'       defines that the Module/Class is available
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public cPluginList As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Constants
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Const Type_Unknown As Integer = 0 ' When unitialized
Public Const Type_Module As Integer = 1 ' e.g. Email, NMA
Public Const Type_Class As Integer = 2  ' e.g. UPS, RFXComTRX

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Init - Register all known plugins
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Init()

  'Register(Type_Class, "Asterisk", "CAsterisk", Null)
  'Register(Type_Module, "Bluetooth", "Bluetooth", Bluetooth)
  'Register(Type_Module, "Bwired", "Bwired", Bwired)
  'Register(Type_Class, "CTX35", "CCTX35", Null)
  'Register(Type_Class, "CUL", "CCUL", Null)
  'Register(Type_Class, "CurrentCost", "CCurrentCost", Null)
  'Register(Type_Class, "Denon", "CDenon", Null)
  'Register(Type_Module, "Digitemp", "Digitemp", Digitemp)
  'Register(Type_Class, "DMXPlayer", "CDMXPlayer", Null)
  'Register(Type_Class, "Domotica", "CDomotica", Null)
  'Register(Type_Class, "DSC", "CDSC", Null)
  'Register(Type_Class, "EIB", "CEIB", Null)
  'Register(Type_Class, "ELVMAX", "CELVMAX", Null)
  'Register(Type_Class, "EZcontrol", "CEZcontrol", Null)
  'Register(Type_Class, "FritzBox", "CFritzBox", Null)
  'Register(Type_Class, "GenericIO", "CGenericIO", Null)
  'Register(Type_Class, "GPS", "CGPS", Null)
  'Register(Type_Module, "HDDTemp", "HDDTemp", HDDTemp)
  'Register(Type_Class, "HomeMatic", "CHomeMatic", Null)
  'Register(Type_Class, "IPort", "CIPort", Null)
  'Register(Type_Class, "IRMan", "CIRMan", Null)
  'Register(Type_Class, "IRTrans", "CIRTrans", Null)
  'Register(Type_Class, "Items", "CItems", Null)
  'Register(Type_Class, "IViewer", "CIViewer", Null)
  'Register(Type_Class, "JeeLabs", "CJeeLabs", Null)
  'Register(Type_Class, "K8055", "CK8055", Null)
  'Register(Type_Class, "KMTronicUDP", "CKMTronicUDP", Null)
  'Register(Type_Class, "LEDMatrix", "CLEDMatrix", Null)
  'Register(Type_Class, "LGTV", "CLGTV", Null)
  'Register(Type_Class, "LIRC", "CLIRC", Null)
  'Register(Type_Class, "Meteohub", "CMeteohub", Null)
  'Register(Type_Class, "Mochad", "CMochad", Null)
  'Register(Type_Class, "MQTT", "CMQTT", Null)
  'Register(Type_Class, "Ncid", "CNcid", Null)
  'Register(Type_Module, "NMA", "NMA", NMA)
  'Register(Type_Class, "Onkyo", "COnkyo", Null)
  'Register(Type_Class, "OpenTherm", "COpenTherm", Null)
  'Register(Type_Class, "OWFS", "COWFS", Null)
  'Register(Type_Class, "OWW", "COWW", Null)
  'Register(Type_Module, "P2000", "P2000", P2000)
  'Register(Type_Module, "Pachube", "Pachube", Pachube)
  'Register(Type_Module, "Ping", "Ping", Ping)
  'Register(Type_Class, "Pioneer", "CPioneer", Null)
  'Register(Type_Class, "PLCBUS", "CPLCBUS", Null)
  'Register(Type_Class, "Plugwise", "CPlugwise", Null)
  'Register(Type_Module, "Prowl", "Prowl", Prowl)
  'Register(Type_Module, "PVoutput", "PVoutput", PVoutput)
  'Register(Type_Module, "Pushover", "Pushover", Pushover)
  'Register(Type_Class, "PwrCtrl", "CPwrCtrl", Null)
  Register(Type_Class, "RaZberry", "CRaZberry", Null)
  'Register(Type_Module, "RRDTool", "RRDTool", RRDTool)
  'Register(Type_Class, "RFXComRX", "CRFXComRX", Null)
  'Register(Type_Class, "RFXComTRX", "CRFXComTRX", Null)
  'Register(Type_Class, "RFXComTX", "CRFXComTX", Null)
  'Register(Type_Class, "RFXComxPL", "CRFXComxPL", Null)
  'Register(Type_Module, "ServerStats", "ServerStats", ServerStats)
  'Register(Type_Class, "SharpTV", "CSharpTV", Null)
  'Register(Type_Module, "Shell", "Shell", Shell)
  'Register(Type_Class, "SmartMeter", "CSmartMeter", Null)
  'Register(Type_Class, "SmartVISUServer", "CSmartVISUServer", Null)
  'Register(Type_Class, "SMS", "CSMS", Null)
  'Register(Type_Module, "Sounds", "Sounds", Sounds)
  'Register(Type_Class, "SqueezeServer", "CSqueezeServer", Null)
  'Register(Type_Class, "TelnetServer", "CTelnetServer", Null)
  'Register(Type_Class, "Temp08", "CTemp08", Null)
  'Register(Type_Module, "TemperaturNu", "TemperaturNu", TemperaturNu)
  'Register(Type_Module, "Thermostat", "Thermostat", Thermostat)
  'Register(Type_Module, "TVGuide", "TVGuide", TVGuide)
  'Register(Type_Module, "Twitter", "Twitter", Twitter)
  'Register(Type_Class, "UPS", "CUPS", Null)
  'Register(Type_Module, "VideoServer", "VideoServer", VideoServer)
  'Register(Type_Class, "VISCA", "CVISCA", Null)
  'Register(Type_Class, "Visonic", "CVisonic", Null)
  'Register(Type_Module, "VoiceText", "VoiceText", VoiceText)
  'Register(Type_Module, "WeatherUG", "WeatherUG", WeatherUG)
  'Register(Type_Class, "Weeder", "CWeeder", Null)
  'Register(Type_Module, "X10Cmd", "X10Cmd", X10Cmd)
  'Register(Type_Class, "XBMCxPL", "CXBMCxPL", Null)
  'Register(Type_Class, "XMLRPC", "CXMLRPC", Null)
  'Register(Type_Class, "xPL", "CxPL", Null)
  'Register(Type_Class, "YouLess", "CYouLess", Null)
  'Register(Type_Class, "ZWave", "CZWave", Null)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Register interfaces/modules
' sType = Module or Class
' sPluginName = Displayname like UPS, Twitter, Visonic
' sClassName = Class name, will loaded during Setup
' oModule = Object reference to *.module
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Register(sType As Byte, sPluginName As String, sClassName As String, oModule As Object)

  Dim rResult As Result
  Dim cPl As CPluginEntry
  Dim hField As ResultField
  Dim oTemp As Object
  Dim sTableName As String = "settings_" & LCase(sPluginName)

  ' Only allow module & class
  If sType <> Type_Module And sType <> Type_Class Then
    Main.WriteLog("[Plugin] ERROR: Unknown Module/Class type specific (" & sType & ")")
    Return
  Endif 

  ' Plugin name can't contain a "#" character
  If InStr(sPluginName, "#") Then
    Main.WriteLog("[Plugin] ERROR: Module/Class '" & sClassName & "' name can't contain a '#' character")
    Return
  Endif

  ' Try to load the module/class first. If it fails, don't continue
  Try Class.Load(sClassName)
  If Error Then
    Main.WriteLog("[Plugin] ERROR: Failed to load Module/Class '" & sClassName & "'")
    Return
  Endif

  ' Check if settings_<sPluginName> exists
  If TableExists(sTableName) = False Then
    Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' doesn't exist in the database")
    Return
  Endif

  ' A module is already loaded/initialized. We just symbolic link to the object reference
  ' A module is like a Class, but only 1 instance exists and doesn't have to be created

  ' Assign the Module to the oTemp or create the Class temporary
  ' NOTE: We need to *only* cleanup the class at the end
  Select sType
    Case Type_Module
      oTemp = oModule
    Case Type_Class
      oTemp = Object.New(sClassName)
  End Select

  ' Safety check: that Class matches loaded module
  If sPluginName <> oTemp.PluginName Then
    Main.WriteLog("[Plugin] ERROR: Plugin mismatch Class='" & sClassName & "', Module='" & oTemp.PluginName & "'")
    Return
  Endif

  ' Get the first row of the settings_<sPluginName>
  rResult = GetSettingsTable(sTableName, 0)

  If rResult = Null Then
    Main.WriteLog("[Plugin] ERROR: Unable to retrieve data from the table '" & sTableName & "' (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Module/Interface '" & sPluginName & "'")
    Return
  Endif

  If rResult.Count = 0 Then
    Main.WriteLog("[Plugin] ERROR: No data retrieved from the table '" & sTableName & "' (id=0)")
    Main.WriteLog("[Plugin] ERROR: Unable to initialize Module/Interface '" & sPluginName & "'")
    Return
  Endif

  cPl = New CPluginEntry
  cPl.Type = sType
  cPl.Name = sPluginName
  cPl.KeyName = sPluginName & "#0"
  cPl.Instance = 0
  cPl.Interface = Null
  cPl.MaxInstances = oTemp.PluginMaxInstances

  ' Store the ClassName if it is a Type_Class
  If sType = Type_Class Then
    cPl.ClassName = sClassName
  Else
    cPl.ClassName = ""
  Endif

  ' All initialized, put it in the collection
  cPluginList[LCase(sPluginName) & "#0"] = cPl

  ' Now retrieve row=1 for modules and all other rows for classes
  If sType = Type_Module Then
    rResult = GetSettingsTable(sTableName, 1)
  Else
    rResult = GetSettingsTable(sTableName)
  Endif

  If rResult = Null Or rResult.Count = 0 Then
    Return
  Endif

  For Each rResult
    cPl = New CPluginEntry
    cPl.Type = sType
    cPl.Name = sPluginName
    cPl.KeyName = sPluginName & "#" & rResult!id
    cPl.Instance = rResult!id
    cPl.MaxInstances = oTemp.PluginMaxInstances

    Select sType
      Case Type_Module
        cPl.ClassName = ""
        cPl.Interface = oModule
      Case Type_Class
        cPl.ClassName = sClassName
        cPl.Interface = Null
    End Select

    For Each hField In rResult.Fields
      cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

    ' All initialized, put it in the collection
    cPluginList[LCase(sPluginName) & "#" & rResult!id] = cPl
  Next
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Start All modules/classes in cPluginList
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartAll()

  Dim cPl As CPluginEntry
  Dim cReported As New Collection

  ' Loop through all inteface and start them
  For Each cPl In cPluginList

    ' Skip the #0 entries, these can't be started
    If InStr(cPl.KeyName, "#0") = 0 Then

      ' Also only start enabled modules/classes
      If cPl.Settings["enabled"] Then

        If cPl.Type = Type_Class Then
          cPl.Interface = Object.New(cPl.ClassName)
        Endif

        ' Print module enabled information - only once
        ' We don't do it in the module/class, because that isn't reliable enough
        If cReported.Exist(cPl.Name) = False Then 
          Main.WriteLog("[Plugin] " & cPl.Interface.PluginFriendlyName & " enabled.")
          cReported[cPl.Name] = True
        Endif

        Try Object.Call(cPl.Interface, "StartPlugin", [cPl])
        If Error Then
          Main.WriteLog("[Plugin] ERROR: Module/Interface '" & cPl.Name & "' doesn't have a StartPlugin Function")
        Endif
      Endif
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Stop All modules/classes in cPluginList
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopAll()

  Dim cPl As CPluginEntry
  Dim cReported As New Collection

  ' Destroy all objects
  For Each cPl In cPluginList

    ' Skip the #0 entries, these can't be stopped
    If InStr(cPl.KeyName, "#0") = 0 Then
      Try Object.Call(cPl.Interface, "StopPlugin", [cPl])
      cPl.Interface = Null
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Restart Interface & Instance after FSettings
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Restart(sPluginName As String, Optional iInstance As Integer = 1)

  Dim rResult As Result
  Dim cPl As CPluginEntry
  Dim cPlNew As CPluginEntry
  Dim hField As ResultField
  Dim sTableName As String = "settings_" & LCase(sPluginName)

  ' First instance *has* to exist
  If cPluginList.Exist(LCase(sPluginName) & "#0") = False Then
    Main.WriteLog("[Plugin] ERROR: Module/Interface '" & sPluginName & "' isn't properly initialized")
    Return
  Endif 

  ' Check if settings_<sPluginName> exists
  If TableExists(sTableName) = False Then
    Main.WriteLog("[Plugin] ERROR: Table '" & sTableName & "' doesn't exist in the database")
    Return
  Endif

  rResult = GetSettingsTable(sTableName, iInstance)

  ' Module/Interface exists - if something changed we need to restart
  ' Covers an interface removed or modified
  If cPluginList.Exist(LCase(sPluginName) & "#" & iInstance) Then

    ' Get a local copy
    cPl = cPluginList[LCase(sPluginName) & "#" & iInstance]

    ' Stop the interface/instance
    If cPl.Interface <> Null Then
      Try Object.Call(cPl.Interface, "StopPlugin")
      If Error Then
        Main.WriteLog("[Plugin] ERROR: Module/Interface '" & sPluginName & "' doesn't have a StopPlugin Function")
      Endif
    Endif

    ' If it is a Class type, destroy the object
    If cPl.Type = Type_Class Then
      cPl.Interface = Null
    Endif

    ' Row doesn't exist anymore, stop interface/instance and remove from list
    If rResult = Null Or rResult.Count = 0 Then
      cPluginList.Remove(LCase(sPluginName) & "#" & iInstance)
      Return
    Else

      ' Empty the collection and fill it again
      cPl.Settings.Clear()
      For Each hField In rResult.Fields
        cPl.Settings[LCase(hField.Name)] = rResult[hField.Name]
      Next

      ' If the module is enabled (or still is) start now
      If cPl.Settings["enabled"] Then

        ' If it is Class type, create object first
        If cPl.Type = Type_Class Then
          cPl.Interface = Object.New(cPl.ClassName)
        Endif

        Try Object.Call(cPl.Interface, "StartPlugin", [cPl])
      Endif

    Endif

  Else

    cPl = cPluginList[LCase(sPluginName) & "#" & iInstance]

    ' Copy information from instance 1
    cPlNew = New CPluginEntry
    cPlNew.Type = cPl.Type
    cPlNew.Name = cPl.Name
    cPlNew.KeyName = sPluginName & "#" & rResult!id
    cPlNew.Instance = rResult!id
    cPlNew.ClassName = cPl.sClassName
    cPlNew.Interface = Null
    For Each hField In rResult.Fields
      cPlNew.Settings[LCase(hField.Name)] = rResult[hField.Name]
    Next

    cPluginList[LCase(sPluginName) & "#" & rResult!id] = cPlNew

    ' If the module is enabled start now
    If cPlNew.Settings["enabled"] Then

      ' If it is Class type, create object first
      If cPlNew.Type = Type_Class Then
        cPlNew.Interface = Object.New(cPl.ClassName)
      Endif

      Try Object.Call(cPlNew.Interface, "StartPlugin", [cPlNew])
    Endif

  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Pointer to the Object ... Don't modify data !
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetPluginObject(sPluginName As String, Optional iInstance As Byte = 1) As Object

End 

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check if settings_* table exists in the database
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub TableExists(sTable As String) As Boolean

  Dim rResult As Result

  If Not sTable Then Return False
  sTable = LCase(sTable)
  Try rResult = Main.hDB.Exec("SHOW TABLES")
  If Error Or rResult = Null Then
    Main.WriteLog("[Plugin] ERROR: Can't retrieve table list from the database")
    Return False
  Endif

  If rResult.Count Then
    For Each rResult
      If rResult["Tables_in_" & Main.sSQLDatabase] = sTable Then Return True
    Next
  Endif

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Get the configuration from the settings table
' If iRow = -1 give all the rows back (except row=0, this is default)
' If iRow >= 0 give only the requested row back
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub GetSettingsTable(sTableName As String, Optional iRow As Integer = -1) As Result

  sTableName = LCase(sTableName)

  ' We don't allow more then 9 instances
  If iRow > 9 Then Return Null

  If iRow >= 0 Then
    Try Return Main.hDB.Exec("SELECT * FROM " & sTableName & " WHERE id = &1", iRow)
  Else
    Try Return Main.hDB.Exec("SELECT * FROM " & sTableName & " WHERE id >= 1 AND id <= 9")
  Endif

End

