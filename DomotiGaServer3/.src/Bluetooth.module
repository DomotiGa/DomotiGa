' Gambas module file

' Description:
' Bluetooth.module
' Support for Bluetooth proximity, see if a user is around by checking his bluetooth device(s).

' Development Status:
' Works.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Bluetooth"
Public PluginType As Integer = Plugin.Type_Module
Public PluginFriendlyName As String = "Bluetooth"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[Bluetooth] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sDevice As String
Private $iThreshold As Integer
Private $iPollTime As Integer
Private $bBluetoothDebug As Boolean

Public tBluetooth As Timer
Private sScan As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sDevice = cPl.Settings["device"]
  $iThreshold = cPl.Settings["threshold"]
  $iPollTime = cPl.Settings["polltime"]
  $bBluetoothDebug = cPl.Settings["debug"]

  ' Check if bluetooth binary exists
  If CheckBinary() Then

    ' Initialize timer
    Run()
  Else

    ' Disable bluetooth
    cPl.Settings["enabled"] = False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tBluetooth.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Check for binary
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function CheckBinary() As Boolean

  If Main.ProgramExist("hcitool") Then
    Return True
  Else
    Main.WriteLog(LogLabel & "ERROR: command 'hcitool' not found, did you install it?")
    Return False
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer for polling
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Run()

  ' start poll timer for bluetooth
  tBluetooth = New Timer As "tBluetooth"
  tBluetooth.Delay = Main.iBluetoothPollTime * 1000 ' multiply for seconds
  tBluetooth.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start one of two scan types depending on Threshold setting
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tBluetooth_Timer()

  If Main.iBluetoothThreshold = 255 Then
    ScanBluetooth()
  Else
    CheckBluetooth()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan for BT devices, don't calculate RSSI
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckBluetooth()

  Dim rResult As Result
  Dim iDeviceId, iRSSI As Integer
  Dim sRSSI, sProx As String

  ' get all enabled devices of type blutooth
  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Bluetooth Dongle"))
  If rResult.Available Then
    If rResult.Count >= 1 Then
      ' check each device
      For Each rResult
        iDeviceId = rResult!id
        If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "Checking device named '" & rResult!name & "' with address '" & rResult!address & "'.")
        ' check device for signal strenght
        sRSSI = GetRSSI(rResult!address)
        If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & Replace(sRSSI, gb.NewLine, ""))
        If TypeOf(Val(sRSSI)) = gb.Integer Then
          iRSSI = TypeOf(Val(sRSSI)) = gb.Integer
          sProx = IIf(iRSSI > Main.iBluetoothThreshold, "Near", "Far")
          If iDeviceId Then
            Devices.ValueUpdateExt(iDeviceId, 1, sProx)
            Devices.ValueUpdateExt(iDeviceId, 2, Val(sRSSI))
          Endif
          If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "Got RSSI value " & iRSSI)
        Else
          If iDeviceId Then Devices.ValueUpdateExt(iDeviceId, 1, "Away")
        Endif
      Next
    Else
      Main.WriteLog(LogLabel & "No Bluetooth device(s) found in device table!")
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan bluetooth network
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function ScanBluetooth() As String

  If Main.bBluetoothDebug Then
    Main.WriteDebugLog(LogLabel & "Starting device scan.")
    Main.WriteDebugLog(LogLabel & "'hcitool -i " & Main.sBluetoothDevice & " scan'")
  Endif
  Exec ["hcitool", "-i", Main.sBluetoothDevice, "scan"] For Read As "ScanBT"

Catch
   If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "ERROR: when trying to run 'hcitool': " & Error.Text & ".")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' got output, save it
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ScanBT_Read()

  Dim sBuffer As String

  Try sBuffer = Read #Last, -256
  sScan &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' scan bluetooth has finished, process it's output
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ScanBT_Kill()

  Dim sLine As String
  Dim aScan As String[]
  Dim iDeviceId As Integer
  Dim rResult As Result

  If Len(sScan) > 13 Then
    rResult = Devices.FindDevicesForInterface(Devices.FindInterface("Bluetooth Dongle"))
    If rResult.Available Then
      If rResult.Count >= 1 Then
        ' check each device
        For Each rResult
          If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "Checking device named '" & rResult!name & "' with address '" & rResult!address & "'.")
          If InStr(sScan, rResult!address) Then
            iDeviceId = Devices.Find(Instance, rResult!address, Devices.FindInterface("Bluetooth Dongle"), "BLUETOOTH")
            If iDeviceId Then Devices.ValueUpdateExt(rResult!id, 1, "Home")
          Else
            iDeviceId = Devices.Find(Instance, rResult!address, Devices.FindInterface("Bluetooth Dongle"), "BLUETOOTH")
            If iDeviceId Then Devices.ValueUpdateExt(rResult!id, 1, "Away")
          Endif
        Next
      Else
        Main.WriteLog(LogLabel & "ERROR: No Bluetooth device(s) found in device table!")
      Endif
    Endif

    ' parse each line
    For Each sLine In Split(sScan, "\n")
      ' check for sensor data
      If InStr(sLine, "Scanning") Then Continue
      aScan = Scan(sLine, " * *")
      If aScan.Count = 2 Then
        If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "Found device with address '" & aScan[0] & "' and name '" & aScan[1] & "'.")
      Endif
    Next
    sScan = ""
  Else
    If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "No device(s) found.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' return BT field strenght info for sAddress
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function GetRSSI(sAddress As String) As String

  Dim sStrength As String

  If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "'hcitool rssi " & sAddress & "'")
  Exec ["hcitool", "rssi", sAddress] To sStrength
  Return Replace$(sStrength, "RSSI return value: ", "")

Catch
   If Main.bBluetoothDebug Then Main.WriteDebugLog(LogLabel & "ERROR: when trying to run 'hcitool': " & Error.Text & ".")

End
