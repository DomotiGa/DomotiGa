' Gambas class file

' Description:
' Oww.class
' Provide support for One-Wire Weather

' Development Status:
' Just started to build this one.

' Links:
' http://oww.sourceforge.net
' http://www.henriksens.net

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Timo Sariwating in 2009.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "OWW"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "One-Wire Weather"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Timo Sariwating"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[OWW] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sServerType As String
Private $bOWWDebug As Boolean

Private hOWWTCP As New Socket
Private hOWWUDP As New UdpSocket
Private sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sServerType = cPl.Settings["servertype"]
  $bOWWDebug = cPl.Settings["debug"]

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hOWWTCP.Close
  Try hOWWUDP.Close

  ' get a new one
  If $sServerType = "Henriksen WServer UDP" Then
    hOWWUDP = New UDPSocket As "OWW"
    hOWWUDP.Port = $iTCPPort
    hOWWUDP.Bind()

    Main.WriteLog(LogLabel & PluginFriendlyName & " UDP Server listening on Port " & $iTCPPort)

  Else
    hOWWTCP = New Socket As "OWW"
    hOWWTCP.Connect($sTCPHost, $iTCPPort)

    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to Server " & $sTCPHost & ":" & $iTCPPort)
  Endif

  ' all ok
  Return True

Catch ' some errors

  If $sServerType = "Henriksen WServer UDP" Then
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " UDP Server FAILED to listen on Port " & $iTCPPort)
  Else
    Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to Server " & $sTCPHost & ":" & $iTCPPort)
  Endif

  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

Public Sub OWW_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

Public Sub OWW_Closed()

  Main.WriteLog(LogLabel & "ERROR: socket connection is lost.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hOWWTCP.Close
  Try hOWWUDP.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Server closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub OWW_Read()

  If $sServerType = "Henriksen WServer TCP" Then
    HenriksenTCP_Read()
  Else If $sServerType = "Henriksen WServer UDP" Then
    HenriksenUDP_Read()
  Else If $sServerType = "OWW text-format" Then
    OWWTxt_Read()
  Endif

End

Public Sub HenriksenTCP_Read()

  Dim sData As String

  sData = Read #hOWWTCP, 1
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then ParseHenriksen(sBuffer & "\n")
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub HenriksenUDP_Read()

  Dim sData As String

  sData = Read #hOWWUDP, Lof(hOWWUDP)
  ParseHenriksen(sData)

End

Public Sub OWWTxt_Read()

  Dim sData As String

  sData = Read #hOWWTCP, 1
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then ParseOWWTxt(sBuffer & "\n")
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Private Sub ParseHenriksen(sStr As String)

  Dim aScan As String[] = Scan(sStr, "* * * * * * * * * * * * * * * * * * * * *\r\n")

  If aScan.Count = 21 And If aScan[20] = (aScan[6] + aScan[7]) Then ' count 21 items in string and calculate checksum
    If $bOWWDebug Then Main.WriteDebugLog(LogLabel & sStr)
  Endif

  ' current_tempC, max_tempC, min_tempC, current_speedMS, gust_speedMS, max_speedMS,
  ' current_dir, max_dir_deg, rain_rateI, rain_todayI, rain_weekI, rain_monthI,
  ' current_hum, max_hum, min_hum, current_baroI, max_baroI, min_baroI, baro_rateI,
  ' rain_rateIH, (current_dir + max_dir_deg)

End

Private Sub ParseOWWTxt(sStr As String)

  Dim aScan As String[] = Scan(sStr, "* , * , *,ï¿½* , *, *, * ,* , * , *, *")
  If aScan.Count = 11 Then
    If $bOWWDebug Then Main.WriteDebugLog(LogLabel & aScan[0] & " " & aScan[1] & " " & aScan[2] & " " & aScan[3] & " " & aScan[4] & " " & aScan[5] & " " & aScan[6] & " " & aScan[7] & " " & aScan[8] & " " & aScan[9] & " " & aScan[10])
  Else
  Endif

End

Public Sub OWW_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

