' Gambas class file

' Description:
' Oww.class
' Provide support for One-Wire Weather

' Development Status:
' Just started to build this one.

' Links:
' http://oww.sourceforge.net
' http://www.henriksens.net

' DomotiGa - an open source home automation program.
' Copyright(C) 2009 Ron Klinkien
' This module is written by and Copyright(C) 2009 Timo Sariwating

' Read file called COPYING for license details.

Property TCPHost As String
Property TCPPort As Integer
Property ServerType As String
Property OWWDebug As Boolean

Private sTCPHost As String
Private iTCPPort As Integer
Private sServerType As String
Private bOWWDebug As Boolean

Private hOWWTCP As New Socket
Private hOWWUDP As New UdpSocket
Private sBuffer As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hOWWTCP.Close
  Try hOWWUDP.Close

  ' get a new one
  If sServerType = "Henriksen WServer UDP" Then
    hOWWUDP = New UDPSocket As "OWW"
    ' [GB2:BIND] hOWWUDP.Bind(iTCPPort)
    hOWWUDP.Port = iTCPPort
    hOWWUDP.Bind()
  Else
    hOWWTCP = New Socket As "OWW"
    hOWWTCP.Connect(sTCPHost, iTCPPort)
  End If

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("One-Wire Weather Error: ") & ERROR.Text)
  Return False

End

Public Sub OWW_Ready()

  Main.WriteLog(("One-Wire Weather socket connected."))

End

Public Sub OWW_Closed()

  Main.WriteLog(("ERROR: One-Wire Weather socket connection is lost."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hOWWTCP.Close
  Try hOWWUDP.Close
  Main.WriteLog(("One-Wire Weather socket port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("One-Wire Weather Error: ") & ERROR.Text)
  Return False

End

Public Sub OWW_Read()

  If sServerType = "Henriksen WServer TCP" Then
    HenriksenTCP_Read()
  Else If sServerType = "Henriksen WServer UDP" Then
    HenriksenUDP_Read()
  Else If sServerType = "OWW text-format" Then
    OWWTxt_Read()
  End If

End

Public Sub HenriksenTCP_Read()

  Dim sData As String

  Read #hOWWTCP, sData, 1
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then ParseHenriksen(sBuffer & "\n")
    sBuffer = Null
  Else
    sBuffer &= sData
  End If

End

Public Sub HenriksenUDP_Read()

  Dim sData As String

  Read #hOWWUDP, sData, Lof(hOWWUDP)
  ParseHenriksen(sData)

End

Public Sub OWWTxt_Read()

  Dim sData As String

  Read #hOWWTCP, sData, 1
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then ParseOWWTxt(sBuffer & "\n")
    sBuffer = Null
  Else
    sBuffer &= sData
  End If

End

Private Sub ParseHenriksen(sStr As String)

  Dim aScan As String[] = Scan(sStr, "* * * * * * * * * * * * * * * * * * * * *\r\n")

  If aScan.Count = 21 And If aScan[20] = (aScan[6] + aScan[7]) Then ' count 21 items in string and calculate checksum
    If bOWWDebug Then Main.WriteDebugLog(("[One-Wire Weather] ") & sStr)
  End If

  ' current_tempC, max_tempC, min_tempC, current_speedMS, gust_speedMS, max_speedMS,
  ' current_dir, max_dir_deg, rain_rateI, rain_todayI, rain_weekI, rain_monthI,
  ' current_hum, max_hum, min_hum, current_baroI, max_baroI, min_baroI, baro_rateI,
  ' rain_rateIH, (current_dir + max_dir_deg)

End

Private Sub ParseOWWTxt(sStr As String)

  Dim aScan As String[] = Scan(sStr, "* , * , *,ï¿½* , *, *, * ,* , * , *, *")
  If aScan.Count = 11 Then
    If bOWWDebug Then Main.WriteDebugLog(("[One-Wire Weather] ") & aScan[0] & " " & aScan[1] & " " & aScan[2] & " " & aScan[3] & " " & aScan[4] & " " & aScan[5] & " " & aScan[6] & " " & aScan[7] & " " & aScan[8] & " " & aScan[9] & " " & aScan[10])
  Else
  End If

End

Public Sub OWW_Error()

  Dim sString As String = "One-Wire Weather: "

  ' handle error
  Select Case hOWWTCP.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  End Select

End

' implement properties
Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function TCPPort_Read() As Integer

  Return iTCPPort

End

Private Sub TCPPort_Write(Value As Integer)

  iTCPPort = Value

End

Private Function ServerType_Read() As String

  Return sServerType

End

Private Sub ServerType_Write(Value As String)

  sServerType = Value

End

Private Function OWWDebug_Read() As Boolean

  Return bOWWDebug

End

Private Sub OWWDebug_Write(Value As Boolean)

  bOWWDebug = Value

End
