' Gambas class file

' Description:
' EIB.class
' Provide support for KNX / EIB using eibd.

' Development Status:
' Just started developing this one.

' Links:
' http://www.auto.tuwien.ac.at/~mkoegler/index.php/eibd

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Timo Sariwating in 2009.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "EIB"
Public PluginType As Integer = Plugin.Type_Class
Public PluginFriendlyName As String = "KNX/EIB"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Byte = 1

Public KeyName As String
Public LogLabel As String = "[EIB] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Public variables - will be removed in the future
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Property TCPHost As String
Property TCPPort As Integer
Property EIBDebug As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bEIBDebug As Boolean

Public hEIB As New Socket
Public tEIB As Timer

Private Const CmdOn As Byte = &H81
Private Const CmdOff As Byte = &H80

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $bEIBDebug = cPl.Settings["debug"]
 
  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hEIB.Close

  ' get a new one
  hEIB = New Socket As "eib"
  hEIB.Connect($sTCPHost, $iTCPPort)

  ' start poll timer for KNX/EIB status LED
  tEIB = New Timer As "tEIBLED"
  tEIB.Delay = 250
  tEIB.Stop

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to Server " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready 

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to Server " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' after connecting open a group socket for group communication
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EIB_Ready()

  Dim bCommand As Byte[] = [CByte(&H00), CByte(&H26), CByte(&H00), CByte(&H00), CByte(&H00)]

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

  TX(bCommand)

  ' request status of all devices
  EIB_GroupRead()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' remote end closed socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EIB_Closed()

  Main.WriteLog(LogLabel & "TCP socket closed.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Initialize KNX/EIB devicelist
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EIB_GroupRead()

  Dim rEIBDevices As Result

  ' get a list of KNX devices
  rEIBDevices = Devices.FindDevicesForInterface(Devices.FindInterface("KNX/EIB Interface"))
  For Each rEIBDevices
    SendGroup(rEIBDevices!address)
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' blink led
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tEIBLED_Timer()

  Main.ControlLed("EIB", "Off")
  tEIB.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a packet to the KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub TX(bCommand As Byte[])

  Dim bData As Byte
  Dim iLen As Integer = bCommand.Count

  If hEIB.Status = Net.Connected Then
    bCommand.Add(&H00, 0)
    bCommand.Add(Hex(iLen), 1)
    bCommand.Write(hEIB, 0, bCommand.Length)

    If Not $bEIBDebug Then Return
    Main.WriteDebugLog(LogLabel & ">", True)
    For Each bData In bCommand
      Main.WriteRFXDebugLog(" " & Hex(bData, 2), True)
    Next
    Main.WriteRFXDebugLog("\n", True)
  Endif

Catch
  Main.WriteDebugLog(LogLabel & " Error while trying to send: " & ERROR.Text & " at " & ERROR.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hEIB.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP Server closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

Public Sub EIB_Error()

  Log.Plugin_TCP_Error(LogLabel, $sTCPHost, Last.Status)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read EIB/KNX socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub EIB_Read()

  Dim bMyBuf As New Byte[512]
  Dim iCnt As Integer
  Dim sDevice, sAddress As String
  Dim sReceived As New String[0]

  If hEIB.Status <> Net.Connected Then Return
  bMyBuf[0] = Read #hEIB As Byte ' read the first byte
  Main.ControlLed("EIB", "On")
  If Main.bServer Then tEIB.Start

  Select bMyBuf[0]
    Case 0
      bMyBuf[1] = Read #hEIB As Byte ' read the length byte
      For iCnt = 0 To bMyBuf[1] - 1 ' read the rest of the frame
        bMyBuf[2 + iCnt] = Read #hEIB As Byte
      Next
  End Select

  Select Hex$(bMyBuf[3])
    Case 26 ' open group socket reply
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "Got a group socket reply.")
    Case 27 ' group packet
      sDevice = Addr2Str((Hex$(bMyBuf[4], 2)) & (Hex(bMyBuf[5], 2)), False)
      sAddress = Addr2Str((Hex$(bMyBuf[6], 2)) & (Hex$(bMyBuf[7], 2)), True)
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "Received packet data from '" & sDevice & "' to '" & sAddress & "'")
      For iCnt = 9 To bMyBuf.Length - 1 ' bMyBuf[1]
        sReceived.Add(Hex(bMyBuf[iCnt], 2))
      Next
      LookupEIS(sAddress, sReceived)
      ' also update switch which sends status change
      If sDevice <> "0.0.0" Then
        LookupEIS(sDevice, sReceived)
      Endif
  End Select

  If Not $bEIBDebug Then Return
  Main.WriteDebugLog(LogLabel & "<", True)
  For iCnt = 0 To bMyBuf[1] + 2
    Main.WriteRFXDebugLog(" " & Hex(bMyBuf[iCnt], 2), True)
  Next
  Main.WriteRFXDebugLog("\n", True)

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' lookup the EIS type for received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub LookupEIS(sAddress As String, sReceived As String[])

  Dim iDeviceId As Integer = Devices.FindRegExp(sAddress, Devices.FindInterface("KNX/EIB Interface"))

  If iDeviceId Then
    Select Case Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iDeviceId))
      Case "EIS 1" ' On/Off
        EIS1(iDeviceId, sReceived)
      Case "EIS 2" ' Dim
        EIS2(iDeviceId, sReceived)
      Case "EIS 3" ' Time
        EIS3(iDeviceId, sReceived)
      Case "EIS 4" ' Date
        EIS4(iDeviceId, sReceived)
      Case "EIS 5" ' Values
        EIS5(iDeviceId, sReceived)
      Case Else
        Main.WriteDebugLog(LogLabel & "EIS Unknown for address '" & sAddress & "' and data '" & sReceived & "'")
    End Select
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB1 devices (switch on/off)
' tested ok, address format is 0/1/2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EIS1(iDeviceId As Integer, sReceived As String[])

  Select Case sReceived[0]
    Case 40, 80
      Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS1: " & Devices.FindNameForDevice(iDeviceId) & " Off")
    Case 41, 81
      Devices.ValueUpdate(iDeviceId, "On", "", "", "")
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS1: " & Devices.FindNameForDevice(iDeviceId) & " On")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB2 devices (dim)
' tested ok, address format is 0/1/2|0/1/3|0/1/4
' first address is used for on/off, second dim, third brighten
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EIS2(iDeviceId As Integer, sReceived As String[])

  Dim sAddress, sDeviceName As String
  Dim iPercentage As Integer

  sDeviceName = Devices.FindNameForDevice(iDeviceId)
  sAddress = Devices.FindAddressForDevice(sDeviceName)

  Select Case sReceived[0]
    Case 40
      Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      iPercentage = Val("&H" & sReceived[1]) / 255 * 100
      If iPercentage = 0 Then
        Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      Else If iPercentage = 100 Then
        Devices.ValueUpdate(iDeviceId, "On", "", "", "")
      Else
        Devices.ValueUpdate(iDeviceId, "Dim " & CStr(iPercentage), "", "", "")
      Endif
    Case 41
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS2: " & sDeviceName & " On")
        Devices.ValueUpdate(iDeviceId, "On", "", "", "")
        iPercentage = Val("&H" & sReceived[1]) / 255 * 100
        If iPercentage <> "0" And iPercentage <> "100" Then
          If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS2: " & sDeviceName & " Dim")
          Devices.ValueUpdate(iDeviceId, "Dim " & CStr(iPercentage), "", "", "")
      Endif
    Case 80
      If sReceived[1] <> "00" Then
        iPercentage = Val("&H" & sReceived[1]) / 255 * 100
        If iPercentage = 0 Then
          Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
        Else If iPercentage = 100 Then
          Devices.ValueUpdate(iDeviceId, "On", "", "", "")
        Else
          Devices.ValueUpdate(iDeviceId, "Dim " & CStr(iPercentage), "", "", "")
        Endif
        If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS2: " & sDeviceName & " Dim " & iPercentage & "%")
      Else
        If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS2: " & sDeviceName & " Off")
        Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      Endif
    Case 81
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS2: " & sDeviceName & " On")
      Devices.ValueUpdate(iDeviceId, "On", "", "", "")
    Case 89
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS2: " & sDeviceName & " Dim")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB3 devices (time)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EIS3(iDeviceId As Integer, sReceived As String[])

  Dim sAddressSplit As String[]
  Dim bCommand As New Byte[9]
  Dim sTime As String

  Select Case sReceived[0]
    Case 80
      sTime = DecodeEIS3(sReceived)
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS3: " & Devices.FindNameForDevice(iDeviceId) & " " & sTime)
      Devices.ValueUpdate(iDeviceId, sTime, "", "", "")
    Case 00
      sAddressSplit = Split(Devices.FindAddressForDevice(Devices.FindNameForDevice(iDeviceId)), "/")
      bCommand[0] = &H00
      bCommand[1] = &H27
      bCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      bCommand[3] = Val(sAddressSplit[2])
      bCommand[4] = &H00
      bCommand[5] = &H80
      bCommand[6] = Hex$(Hour(Now))
      bCommand[7] = Hex$(Minute(Now))
      bCommand[8] = Hex$(Second(Now))
      TX(bCommand)
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS3: Time " & Time(Now) & " send to bus.")
  End Select

End

' DTP10 / EIS3
'
' ## 3 Byte Time
' ## DDDHHHHH RRMMMMMM RRSSSSSS
' ## R Reserved
' ## D WeekDay
' ## H Hour
' ## M Minutes
' ## S Seconds

Public Sub DecodeEIS3(sReceived As String[]) As String

  Dim aWeekDays As String[] = ["", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
  Dim iWeekDay As Integer = Lsr((sReceived[1] And &HE0), 5)
  Dim iHour, iMin, iSec As Integer

  iHour = Val("&H" & sReceived[1]) And &H1F
  iMin = Val("&H" & sReceived[2])
  iSec = Val("&H" & sReceived[3])

  Return aWeekdays[iWeekday] & " " & Format(iHour, "00") & ":" & Format(iMin, "00") & ":" & Format(iSec, "00")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB4 devices (date)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EIS4(iDeviceId As Integer, sReceived As String[])

  Dim sAddressSplit As String[]
  Dim bCommand As New Byte[9]
  Dim sDate As String

  Select Case sReceived[0]
    Case 80
      sDate = DecodeEIS4(sReceived)
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS4: " & Devices.FindNameForDevice(iDeviceId) & " " & sDate)
      Devices.ValueUpdate(iDeviceId, sDate, "", "", "")
    Case 00
      sAddressSplit = Split(Devices.FindAddressForDevice(Devices.FindNameForDevice(iDeviceId)), "/")
      bCommand[0] = &H00
      bCommand[1] = &H27
      bCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      bCommand[3] = Val(sAddressSplit[2])
      bCommand[4] = &H00
      bCommand[5] = &H80
      bCommand[6] = Hex$(Day(Now))
      bCommand[7] = Hex$(Month(Now))
      bCommand[8] = Hex$(Right$(CStr(Year(Now)), 2))
      TX(bCommand)
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS4: Date " & Day(Now) & "/" & Month(Now) & "/" & Year(Now) & " send to bus.")
  End Select

End

' DTP11 / EIS4
'
' ## 3 byte Date
' ## RRRDDDDD RRRRMMMM RYYYYYYY
' ## R Reserved
' ## D Day
' ## M Month
' ## Y Year

Public Sub DecodeEIS4(sReceived As String[]) As String

  Dim iDay, iMonth, iYear As Integer

  iDay = Val("&H" & sReceived[1])
  iMonth = Val("&H" & sReceived[2])
  iYear = Val("&H" & sReceived[3]) + 2000

  Return Format(iDay, "00") & "-" & Format(iMonth, "00") & "-" & Format(iYear, "####")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received for EIB5 devices (values)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub EIS5(iDeviceId As Integer, sReceived As String[])

  Dim fValue As Float

  Select Case sReceived[0] ' receive
    Case 80, 40
      fValue = DecodeEIS5(sReceived[1] & sReceived[2])
      If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "EIS5: " & Devices.FindNameForDevice(iDeviceId) & " " & fValue)
      Devices.ValueUpdate(iDeviceId, fValue, "", "", "")
  End Select

End

' DTP9 / EIS5
'
' ## 2 Byte Float
' ## SEEEEMMM MMMMMMMM
' ## S Sign (0 / 1)
' ## E Exponent (0..15)
' ## M Mantisse (-2048...2047)
' ## For all Datapoint Types 9.xxx, the encoded value 7 FFFh shall always be used to denote invalid data.

Public Sub DecodeEIS5(sValue As String) As Float

  Dim iExp, iMant, iVal As Integer = Val("&H" & sValue)

  iMant = iVal And &H07FF
  If (iVal And &H08000&) Then
    iMant = iMant Or &HFFFFF800&
    iMant = - iMant
  Endif
  iExp = Lsr((iVal And &H07800&), 11)
  If (iVal And &H08000&) Then iMant = - iMant
  Return (iMant * Lsl(1, iExp) / 100)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare a command for sending status request to KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub SendGroup(sAddress As String)

  Dim sAddressSplit As String[]
  Dim bCommand As New Byte[5]

  If $bEIBDebug Then Main.WriteDebugLog(LogLabel & "Requesting status packet for device with address '" & sAddress & "'")
  sAddressSplit = Split(sAddress, "/")
  If sAddressSplit.Count = 3 Then
    sAddress = Str2Addr(sAddressSplit[0], sAddressSplit[1], sAddressSplit[2])
    bCommand[0] = &H00
    bCommand[1] = &H27
    bCommand[2] = Val("&H" & Left(sAddress, 2))
    bCommand[3] = Val("&H" & Right(sAddress, 2))
    bCommand[4] = &H00
    bCommand.Add(&H00)
    TX(bCommand)
  Else
    sAddressSplit = Split(sAddress, "|" "/")
    If sAddressSplit.Count = 9 Then
      sAddress = Str2Addr(sAddressSplit[3], sAddressSplit[4], sAddressSplit[5])
      bCommand[0] = &H00
      bCommand[1] = &H27
      bCommand[2] = Val("&H" & Left(sAddress, 2))
      bCommand[3] = Val("&H" & Right(sAddress, 2))
      bCommand[4] = &H00
      bCommand.Add(&H00)
      TX(bCommand)
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare a command for sending to the KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim sModule As String
  Dim sAddressSplit As String[]
  Dim iBrightness As Integer
  Dim bCommand As New Byte[5]

  sValue = UCase(sValue)

  sModule = Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(Devices.Find(sAddress, Devices.FindInterface("KNX/EIB Interface"))))
  Select Case sModule
    Case "EIS 1"
      ' EIB type 1. On/off switch items.
      ' One address.
      sAddressSplit = Split(sAddress, "/")
      If sAddressSplit.Count = 3 Then
        sAddress = Str2Addr(sAddressSplit[0], sAddressSplit[1], sAddressSplit[2])
        bCommand[0] = &H00
        bCommand[1] = &H27
        bCommand[2] = Val("&H" & Left(sAddress, 2))
        bCommand[3] = Val("&H" & Right(sAddress, 2))
        bCommand[4] = &H00
        Select Case sValue
          Case "ON"
            bCommand.Add(CmdOn)
            TX(bCommand)
          Case "OFF"
            bCommand.Add(CmdOff)
            TX(bCommand)
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address format for EIS1 device: '" & sAddress & "', should be '0/1/2'")
      Endif
    Case "EIS 2"
      ' EIB type 2. Dimmer switch items.
      ' An EIB dimmer consists of three different items, with different addresses: position, control, and value.
      ' Position is for switching the light on/off (EIB1), control is for starting/stopping
      ' dimming and brightening, and value for setting a specific brightness level (0-100).
      ' The "address" is the combination of three addresses: "position"|"control"|"value".
      sAddressSplit = Split(sAddress, "|" "/")
      If sAddressSplit.Count = 9 Then
        sAddress = Str2Addr(sAddressSplit[0], sAddressSplit[1], sAddressSplit[2])
        bCommand[0] = &H00
        bCommand[1] = &H27
        bCommand[2] = Val("&H" & Left(sAddress, 2))
        bCommand[3] = Val("&H" & Right(sAddress, 2))
        bCommand[4] = &H00
        Select Case sValue
          Case "ON"
            bCommand.Add(CmdOn)
            TX(bCommand)
          Case "OFF"
            bCommand.Add(CmdOff)
            TX(bCommand)
          Case "STOP"
            sAddress = Str2Addr(sAddressSplit[3], sAddressSplit[4], sAddressSplit[5])
            bCommand[2] = Val("&H" & Left(sAddress, 2))
            bCommand[3] = Val("&H" & Right(sAddress, 2))
            bCommand.Add(&H80)
            TX(bCommand)
          Case Else
            If InStr(sValue, "DIM ") Then ' DIM 0-100
              iBrightness = Val(Replace(sValue, "DIM ", ""))
              sAddress = Str2Addr(sAddressSplit[6], sAddressSplit[7], sAddressSplit[8])
              bCommand[2] = Val("&H" & Left(sAddress, 2))
              bCommand[3] = Val("&H" & Right(sAddress, 2))
              bCommand.Add(&H80)
              bCommand.Add(CInt(iBrightness * 2.55))
              TX(bCommand)
            Endif
        End Select
      Else
        Main.WriteDebugLog(LogLabel & "Invalid address format for EIS2 device: '" & sAddress & "', should be '0/1/2|0/3/4|0/5/6'")
      Endif
  End Select

End

Public Function Addr2Str(sAddress As String, bLogical As Boolean) As String

  If bLogical Then
    ' convert to logical address
    Return (Lsr((Val("&H" & sAddress)), 11) And &HF) & "/" & (Lsr((Val("&H" & sAddress)), 8) And &H7) & "/" & ((Val("&H" & sAddress)) And &HFF)
  Else
    ' convert to physical address
    Return (Lsr((Val("&H" & sAddress)), 12)) & "." & (Lsr((Val("&H" & sAddress)), 8) And &HF) & "." & ((Val("&H" & sAddress)) And &HFF)
  Endif

End

Public Function Str2Addr(sA1 As String, sA2 As String, sA3 As String) As String

  Dim sString As String = Lsl(Val(sA1), 11) Or Lsl(Val(sA2), 8) Or Val(sA3)

  Return Hex$(sString, 4)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Properties
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' implement properties
Private Function TCPHost_Read() As String

  Return $sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  $sTCPHost = Value

End

Private Function TCPPort_Read() As Integer

  Return $iTCPPort

End

Private Function TCPPort_Write(Value As Integer)

  $iTCPPort = Value

End

Private Function EIBDebug_Read() As Boolean

  Return $bEIBDebug

End

Private Sub EIBDebug_Write(Value As Boolean)

  $bEIBDebug = Value

End
