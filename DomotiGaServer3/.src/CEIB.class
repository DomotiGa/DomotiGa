' Gambas class file

' Description:
' EIB.class
' Provide support for KNX / EIB using eibd.

' Development Status:
' Just started developing this one.

' Links:
' http://www.auto.tuwien.ac.at/~mkoegler/index.php/eibd

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module is written by Timo Sariwating in 2009.

' Read file called COPYING for license details.

PROPERTY TCPHost AS String
PROPERTY TCPPort AS String
PROPERTY EIBDebug AS Boolean

PRIVATE sTCPHost AS String
PRIVATE sTCPPort AS String
PRIVATE bEIBDebug AS Boolean

PUBLIC hEIB AS NEW Socket
PUBLIC tEIB AS Timer

PRIVATE CONST CmdOn AS Byte = &H81
PRIVATE CONST CmdOff AS Byte = &H80

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Connect() AS Boolean

  ' try to close the connection
  TRY hEIB.Close

  ' get a new one
  hEIB = NEW Socket AS "eib"
  hEIB.Connect(sTCPHost, sTCPPort)

  ' start poll timer for KNX/EIB status LED
  tEIB = NEW Timer AS "tEIBLED"
  tEIB.Delay = 250
  tEIB.Stop

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("KNX/EIB Error: ") & ERROR.Text & (" at ") & ERROR.Where)
  RETURN FALSE

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' after connecting open a group socket for group communication
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB EIB_Ready()

  DIM bCommand AS Byte[] = [CByte(&H00), CByte(&H26), CByte(&H00), CByte(&H00), CByte(&H00)]

  Main.WriteLog(("KNX/EIB TCP socket connected."))
  TX(bCommand)

  ' request status of all devices
  EIB_GroupRead()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' remote end closed socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB EIB_Closed()

  Main.WriteLog(("KNX/EIB Error: TCP socket closed."))

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Initialize KNX/EIB devicelist
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB EIB_GroupRead()

  DIM rEIBDevices AS Result

  ' get a list of KNX devices
  rEIBDevices = Devices.FindDevicesForInterface(Devices.FindInterface("KNX/EIB Interface"))
  FOR EACH rEIBDevices
    SendGroup(rEIBDevices!address)
  NEXT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' blink led
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tEIBLED_Timer()

  Main.ControlLed("EIB", "Off")
  tEIB.Stop

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a packet to the KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB TX(bCommand AS Byte[])

  DIM bData AS Byte
  DIM iLen AS Integer = bCommand.Count

  IF hEIB.Status = Net.Connected THEN
    bCommand.Add(&H00, 0)
    bCommand.Add(Hex(iLen), 1)
    bCommand.Write(hEIB, 0, bCommand.Length)

    IF NOT bEIBDebug THEN RETURN
    Main.WriteDebugLog("[KNX/EIB] >", TRUE)
    FOR EACH bData IN bCommand
      Main.WriteRFXDebugLog(" " & Hex(bData, 2), TRUE)
    NEXT
    Main.WriteRFXDebugLog("\n", TRUE)
  ENDIF

CATCH
  Main.WriteDebugLog(("[KNX/EIB] Error while trying to send: ") & ERROR.Text & (" at ") & ERROR.Where)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC FUNCTION Disconnect() AS Boolean

  ' try to close the connection
  TRY hEIB.Close
  Main.WriteLog(("KNX/EIB TCP socket port close."))

  ' all ok
  RETURN TRUE

CATCH ' some errors
  Main.WriteLog(("KNX/EIB Error: ") & ERROR.Text & (" at ") & ERROR.Where)
  RETURN FALSE

END

PUBLIC SUB EIB_Error()

  ' handle error
  SELECT CASE hEIB.Status
    CASE Net.CannotCreateSocket
      Main.WriteLog(("KNX/EIB: The system does not allow to create a socket."))
    CASE Net.HostNotFound
      Main.WriteLog(("KNX/EIB: Host '") & sTCPHost & ("' not found."))
    CASE Net.ConnectionRefused
      Main.WriteLog(("KNX/EIB: Unable to connect to eibd. Connection refused."))
    CASE Net.CannotRead
      Main.WriteLog(("KNX/EIB: Error reading data."))
    CASE Net.CannotWrite
      Main.WriteLog(("KNX/EIB: Error writing data."))
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Read EIB/KNX socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB EIB_Read()

  ' [GB2:ARRD] DIM bMyBuf AS Byte[512]
  DIM bMyBuf As New Byte[512]
  DIM iCnt AS Integer
  DIM sDevice, sAddress AS String
  ' [GB2:ARRD] DIM sReceived AS String[0]
  DIM sReceived As New String[0]

  IF hEIB.Status <> Net.Connected THEN RETURN
  bMyBuf[0] = 0
  READ #hEIB, bMyBuf[0] ' read the first byte
  Main.ControlLed("EIB", "On")
  IF Main.bServer THEN tEIB.Start

  SELECT bMyBuf[0]
    CASE 0
      TRY READ #hEIB, bMyBuf[1], 1 ' read the length byte
      FOR iCnt = 0 TO bMyBuf[1] - 1 ' read the rest of the frame
        TRY READ #hEIB, bMyBuf[2 + iCnt], 1
      NEXT
  END SELECT

  SELECT Hex$(bMyBuf[3])
    CASE 26 ' open group socket reply
      IF Main.bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] got group socket reply.")
    CASE 27 ' group packet
      sDevice = Addr2Str((Hex$(bMyBuf[4], 2)) & (Hex(bMyBuf[5], 2)), FALSE)
      sAddress = Addr2Str((Hex$(bMyBuf[6], 2)) & (Hex$(bMyBuf[7], 2)), TRUE)
      IF Main.bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] received packet from '" & sDevice & "' to '" & sAddress & "'")
      FOR iCnt = 9 TO bMyBuf.Length - 1 ' bMyBuf[1]
        sReceived.Add(Hex(bMyBuf[iCnt], 2))
      NEXT
      LookupEIS(sAddress, sReceived)
      ' also update switch which sends status change
      IF sDevice <> "0.0.0" THEN
        LookupEIS(sDevice, sReceived)
      ENDIF
  END SELECT

  IF NOT bEIBDebug THEN RETURN
  Main.WriteDebugLog("[KNX/EIB] <", TRUE)
  FOR iCnt = 0 TO bMyBuf[1] + 2
    Main.WriteRFXDebugLog(" " & Hex(bMyBuf[iCnt], 2), TRUE)
  NEXT
  Main.WriteRFXDebugLog("\n", TRUE)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' lookup the EIS type for received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB LookupEIS(sAddress AS String, sReceived AS String[])

  DIM iDeviceId AS Integer = Devices.FindRegExp(sAddress, Devices.FindInterface("KNX/EIB Interface"))

  IF iDeviceId THEN
    SELECT CASE Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iDeviceId))
      CASE "EIS 1" ' On/Off
        EIS1(iDeviceId, sReceived)
      CASE "EIS 2" ' Dim
        EIS2(iDeviceId, sReceived)
      CASE "EIS 3" ' Time
        EIS3(iDeviceId, sReceived)
      CASE "EIS 4" ' Date
        EIS4(iDeviceId, sReceived)
      CASE "EIS 5" ' Values
        EIS5(iDeviceId, sReceived)
      CASE ELSE
        Main.WriteDebugLog("[KNX/EIB] EIS Unknown for address '" & sAddress & "' and data '" & sReceived & "'")
    END SELECT
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB1 devices (switch on/off)
' tested ok, address format is 0/1/2
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS1(iDeviceId AS Integer, sReceived AS String[])

  SELECT CASE sReceived[0]
    CASE 40, 80
      Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS1: " & Devices.FindNameForDevice(iDeviceId) & " Off")
    CASE 41, 81
      Devices.ValueUpdate(iDeviceId, "On", "", "", "")
      IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS1: " & Devices.FindNameForDevice(iDeviceId) & " On")
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB2 devices (dim)
' tested ok, address format is 0/1/2|0/1/3|0/1/4
' first address is used for on/off, second dim, third brighten
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS2(iDeviceId AS Integer, sReceived AS String[])

  DIM sAddress, sDeviceName AS String
  DIM iPercentage AS Integer

  sDeviceName = Devices.FindNameForDevice(iDeviceId)
  sAddress = Devices.FindAddressForDevice(sDeviceName)

  SELECT CASE sReceived[0]
    CASE 40
      Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      iPercentage = Val("&H" & sReceived[1]) / 255 * 100
      IF iPercentage = 0 THEN
        Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      ELSE IF iPercentage = 100 THEN
        Devices.ValueUpdate(iDeviceId, "On", "", "", "")
      ELSE
        Devices.ValueUpdate(iDeviceId, "Dim " & CStr(iPercentage), "", "", "")
      ENDIF
    CASE 41
      IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS2: " & sDeviceName & " On")
        Devices.ValueUpdate(iDeviceId, "On", "", "", "")
        iPercentage = Val("&H" & sReceived[1]) / 255 * 100
        IF iPercentage <> "0" AND iPercentage <> "100" THEN
          IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS2: " & sDeviceName & " Dim")
          Devices.ValueUpdate(iDeviceId, "Dim " & CStr(iPercentage), "", "", "")
      ENDIF
    CASE 80
      IF sReceived[1] <> "00" THEN
        iPercentage = Val("&H" & sReceived[1]) / 255 * 100
        IF iPercentage = 0 THEN
          Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
        ELSE IF iPercentage = 100 THEN
          Devices.ValueUpdate(iDeviceId, "On", "", "", "")
        ELSE
          Devices.ValueUpdate(iDeviceId, "Dim " & CStr(iPercentage), "", "", "")
        ENDIF
        IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS2: " & sDeviceName & " Dim " & iPercentage & "%")
      ELSE
        IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS2: " & sDeviceName & " Off")
        Devices.ValueUpdate(iDeviceId, "Off", "", "", "")
      ENDIF
    CASE 81
      IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS2: " & sDeviceName & " On")
      Devices.ValueUpdate(iDeviceId, "On", "", "", "")
    CASE 89
      IF bEIBDebug THEN Main.WriteDebugLog("[KNX/EIB] EIS2: " & sDeviceName & " Dim")
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB3 devices (time)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS3(iDeviceId AS Integer, sReceived AS String[])

  DIM sAddressSplit AS String[]
  ' [GB2:ARRD] DIM bCommand AS Byte[9]
  DIM bCommand As New Byte[9]
  DIM sTime AS String

  SELECT CASE sReceived[0]
    CASE 80
      sTime = DecodeEIS3(sReceived)
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS3: ") & Devices.FindNameForDevice(iDeviceId) & " " & sTime)
      Devices.ValueUpdate(iDeviceId, sTime, "", "", "")
    CASE 00
      sAddressSplit = Split(Devices.FindAddressForDevice(Devices.FindNameForDevice(iDeviceId)), "/")
      bCommand[0] = &H00
      bCommand[1] = &H27
      bCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      bCommand[3] = Val(sAddressSplit[2])
      bCommand[4] = &H00
      bCommand[5] = &H80
      bCommand[6] = Hex$(Hour(Now))
      bCommand[7] = Hex$(Minute(Now))
      bCommand[8] = Hex$(Second(Now))
      TX(bCommand)
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS3: Time ") & Time(Now) & (" send to bus."))
  END SELECT

END

' DTP10 / EIS3
'
' ## 3 Byte Time
' ## DDDHHHHH RRMMMMMM RRSSSSSS
' ## R Reserved
' ## D WeekDay
' ## H Hour
' ## M Minutes
' ## S Seconds

PUBLIC SUB DecodeEIS3(sReceived AS String[]) AS String

  DIM aWeekDays AS String[] = ["", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
  DIM iWeekDay AS Integer = Lsr((sReceived[1] AND &HE0), 5)
  DIM iHour, iMin, iSec AS Integer

  iHour = Val("&H" & sReceived[1]) AND &H1F
  iMin = Val("&H" & sReceived[2])
  iSec = Val("&H" & sReceived[3])

  RETURN aWeekdays[iWeekday] & " " & Format(iHour, "00") & ":" & Format(iMin, "00") & ":" & Format(iSec, "00")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received commands for EIB4 devices (date)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS4(iDeviceId AS Integer, sReceived AS String[])

  DIM sAddressSplit AS String[]
  ' [GB2:ARRD] DIM bCommand AS Byte[9]
  DIM bCommand As New Byte[9]
  DIM sDate AS String

  SELECT CASE sReceived[0]
    CASE 80
      sDate = DecodeEIS4(sReceived)
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS4: ") & Devices.FindNameForDevice(iDeviceId) & " " & sDate)
      Devices.ValueUpdate(iDeviceId, sDate, "", "", "")
    CASE 00
      sAddressSplit = Split(Devices.FindAddressForDevice(Devices.FindNameForDevice(iDeviceId)), "/")
      bCommand[0] = &H00
      bCommand[1] = &H27
      bCommand[2] = Hex$(Val(sAddressSplit[0]) & Val(sAddressSplit[1]))
      bCommand[3] = Val(sAddressSplit[2])
      bCommand[4] = &H00
      bCommand[5] = &H80
      bCommand[6] = Hex$(Day(Now))
      bCommand[7] = Hex$(Month(Now))
      bCommand[8] = Hex$(Right$(CStr(Year(Now)), 2))
      TX(bCommand)
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS4: Date ") & Day(Now) & "/" & Month(Now) & "/" & Year(Now) & (" send to bus."))
  END SELECT

END

' DTP11 / EIS4
'
' ## 3 byte Date
' ## RRRDDDDD RRRRMMMM RYYYYYYY
' ## R Reserved
' ## D Day
' ## M Month
' ## Y Year

PUBLIC SUB DecodeEIS4(sReceived AS String[]) AS String

  DIM iDay, iMonth, iYear AS Integer

  iDay = Val("&H" & sReceived[1])
  iMonth = Val("&H" & sReceived[2])
  iYear = Val("&H" & sReceived[3]) + 2000

  RETURN Format(iDay, "00") & "-" & Format(iMonth, "00") & "-" & Format(iYear, "####")

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' handle received for EIB5 devices (values)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB EIS5(iDeviceId AS Integer, sReceived AS String[])

  DIM fValue AS Float

  SELECT CASE sReceived[0] ' receive
    CASE 80, 40
      fValue = DecodeEIS5(sReceived[1] & sReceived[2])
      IF bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] EIS5: ") & Devices.FindNameForDevice(iDeviceId) & " " & fValue)
      Devices.ValueUpdate(iDeviceId, fValue, "", "", "")
  END SELECT

END

' DTP9 / EIS5
'
' ## 2 Byte Float
' ## SEEEEMMM MMMMMMMM
' ## S Sign (0 / 1)
' ## E Exponent (0..15)
' ## M Mantisse (-2048...2047)
' ## For all Datapoint Types 9.xxx, the encoded value 7 FFFh shall always be used to denote invalid data.

PUBLIC SUB DecodeEIS5(sValue AS String) AS Float

  DIM iExp, iMant, iVal AS Integer = Val("&H" & sValue)

  iMant = iVal AND &H07FF
  IF (iVal AND &H08000&) THEN
    iMant = iMant OR &HFFFFF800&
    iMant = - iMant
  ENDIF
  iExp = Lsr((iVal AND &H07800&), 11)
  IF (iVal AND &H08000&) THEN iMant = - iMant
  RETURN (iMant * Lsl(1, iExp) / 100)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare a command for sending status request to KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SendGroup(sAddress AS String)

  DIM sAddressSplit AS String[]
  ' [GB2:ARRD] DIM bCommand AS Byte[5]
  DIM bCommand As New Byte[5]

  IF Main.bEIBDebug THEN Main.WriteDebugLog(("[KNX/EIB] Requesting status packet for device with address '") & sAddress & "'")
  sAddressSplit = Split(sAddress, "/")
  IF sAddressSplit.Count = 3 THEN
    sAddress = Str2Addr(sAddressSplit[0], sAddressSplit[1], sAddressSplit[2])
    bCommand[0] = &H00
    bCommand[1] = &H27
    bCommand[2] = Val("&H" & Left(sAddress, 2))
    bCommand[3] = Val("&H" & Right(sAddress, 2))
    bCommand[4] = &H00
    bCommand.Add(&H00)
    TX(bCommand)
  ELSE
    sAddressSplit = Split(sAddress, "|" "/")
    IF sAddressSplit.Count = 9 THEN
      sAddress = Str2Addr(sAddressSplit[3], sAddressSplit[4], sAddressSplit[5])
      bCommand[0] = &H00
      bCommand[1] = &H27
      bCommand[2] = Val("&H" & Left(sAddress, 2))
      bCommand[3] = Val("&H" & Right(sAddress, 2))
      bCommand[4] = &H00
      bCommand.Add(&H00)
      TX(bCommand)
    ENDIF
  ENDIF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare a command for sending to the KNX/EIB interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCommand(sAddress AS String, sValue AS String)

  DIM sModule AS String
  DIM sAddressSplit AS String[]
  DIM iBrightness AS Integer
  ' [GB2:ARRD] DIM bCommand AS Byte[5]
  DIM bCommand As New Byte[5]

  sModule = Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(Devices.Find(sAddress, Devices.FindInterface("KNX/EIB Interface"))))
  SELECT CASE sModule
    CASE "EIS 1"
      ' EIB type 1. On/off switch items.
      ' One address.
      sAddressSplit = Split(sAddress, "/")
      IF sAddressSplit.Count = 3 THEN
        sAddress = Str2Addr(sAddressSplit[0], sAddressSplit[1], sAddressSplit[2])
        bCommand[0] = &H00
        bCommand[1] = &H27
        bCommand[2] = Val("&H" & Left(sAddress, 2))
        bCommand[3] = Val("&H" & Right(sAddress, 2))
        bCommand[4] = &H00
        SELECT CASE UCase(sValue)
          CASE "ON"
            bCommand.Add(CmdOn)
            TX(bCommand)
          CASE "OFF"
            bCommand.Add(CmdOff)
            TX(bCommand)
        END SELECT
      ELSE
        Main.WriteDebugLog("[KNX/EIB] Invalid address format for EIS1 device: '" & sAddress & "', should be '0/1/2'")
      ENDIF
    CASE "EIS 2"
      ' EIB type 2. Dimmer switch items.
      ' An EIB dimmer consists of three different items, with different addresses: position, control, and value.
      ' Position is for switching the light on/off (EIB1), control is for starting/stopping
      ' dimming and brightening, and value for setting a specific brightness level (0-100).
      ' The "address" is the combination of three addresses: "position"|"control"|"value".
      sAddressSplit = Split(sAddress, "|" "/")
      IF sAddressSplit.Count = 9 THEN
        sAddress = Str2Addr(sAddressSplit[0], sAddressSplit[1], sAddressSplit[2])
        bCommand[0] = &H00
        bCommand[1] = &H27
        bCommand[2] = Val("&H" & Left(sAddress, 2))
        bCommand[3] = Val("&H" & Right(sAddress, 2))
        bCommand[4] = &H00
        SELECT CASE UCase(sValue)
          CASE "ON"
            bCommand.Add(CmdOn)
            TX(bCommand)
          CASE "OFF"
            bCommand.Add(CmdOff)
            TX(bCommand)
          CASE "STOP"
            sAddress = Str2Addr(sAddressSplit[3], sAddressSplit[4], sAddressSplit[5])
            bCommand[2] = Val("&H" & Left(sAddress, 2))
            bCommand[3] = Val("&H" & Right(sAddress, 2))
            bCommand.Add(&H80)
            TX(bCommand)
          CASE ELSE
            IF InStr(sValue, "DIM ") THEN ' DIM 0-100
              iBrightness = Val(Replace(sValue, "DIM ", ""))
              sAddress = Str2Addr(sAddressSplit[6], sAddressSplit[7], sAddressSplit[8])
              bCommand[2] = Val("&H" & Left(sAddress, 2))
              bCommand[3] = Val("&H" & Right(sAddress, 2))
              bCommand.Add(&H80)
              bCommand.Add(CInt(iBrightness * 2.55))
              TX(bCommand)
            ENDIF
        END SELECT
      ELSE
        Main.WriteDebugLog("[KNX/EIB] Invalid address format for EIS2 device: '" & sAddress & "', should be '0/1/2|0/3/4|0/5/6'")
      ENDIF
  END SELECT

END

PUBLIC FUNCTION Addr2Str(sAddress AS String, bLogical AS Boolean) AS String

  IF bLogical THEN
    ' convert to logical address
    RETURN (Lsr((Val("&H" & sAddress)), 11) AND &HF) & "/" & (Lsr((Val("&H" & sAddress)), 8) AND &H7) & "/" & ((Val("&H" & sAddress)) AND &HFF)
  ELSE
    ' convert to physical address
    RETURN (Lsr((Val("&H" & sAddress)), 12)) & "." & (Lsr((Val("&H" & sAddress)), 8) AND &HF) & "." & ((Val("&H" & sAddress)) AND &HFF)
  ENDIF

END

PUBLIC FUNCTION Str2Addr(sA1 AS String, sA2 AS String, sA3 AS String) AS String

  DIM sString AS String = Lsl(Val(sA1), 11) OR Lsl(Val(sA2), 8) OR Val(sA3)

  RETURN Hex$(sString, 4)

END

' implement properties
PRIVATE FUNCTION TCPHost_Read() AS String

  RETURN sTCPHost

END

PRIVATE SUB TCPHost_Write(Value AS String)

  sTCPHost = Value

END

PRIVATE FUNCTION TCPPort_Read() AS String

  RETURN sTCPPort

END

PRIVATE FUNCTION TCPPort_Write(Value AS String)

  sTCPPort = Value

END

PRIVATE FUNCTION EIBDebug_Read() AS Boolean

  RETURN bEIBDebug

END

PRIVATE SUB EIBDebug_Write(Value AS Boolean)

  bEIBDebug = Value

END
