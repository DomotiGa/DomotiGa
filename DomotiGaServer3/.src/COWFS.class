' Gambas class file

' Description:
' OWFS.module
' Support for OWFS devices.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

PROPERTY PollTime AS Integer
PROPERTY Cached AS Boolean
PROPERTY BaseDir AS String
PROPERTY OWFSDebug AS Boolean

PRIVATE iPollTime AS Integer
PRIVATE bCached AS Boolean
PRIVATE sBaseDir AS String
PRIVATE bOWFSDebug AS Boolean

PUBLIC tOWFS AS Timer
PRIVATE hOWFS AS Process
PRIVATE cOutput AS NEW Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB Run()

  ' start poll timer for OWFS
  tOWFS = NEW Timer AS "tOWFS"
  tOWFS.Delay = iPollTime * 1000 ' multiply for seconds
  tOWFS.Start

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB tOWFS_Timer()

  CheckOWFS()

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices with type OWFS and get their values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB CheckOWFS()

  DIM rResult AS Result
  DIM iInterface AS Integer
  DIM sAddress AS String

  ' get all devices with this devicetype
'  rResult = Main.hDB.Exec("SELECT * FROM devices WHERE interface = &1 AND enabled is TRUE", Devices.FindInterface("OWFS Interface"))
  rResult = Devices.FindDevicesForInterface(Devices.FindInterface("OWFS Interface"))
  IF rResult.Available THEN
    IF rResult.Count >= 1 THEN
      FOR EACH rResult
        IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Checking device '") & rResult!name & ("' with address '") & rResult!address & "'.")
        sAddress = rResult!address
        ' if address contains no "." add it.
        IF InStr(sAddress, ".") = 0 THEN sAddress = Left(sAddress, 2) & "." & Right(sAddress, Len(sAddress) - 2)
        ' choose cached/uncached
        sAddress = sBaseDir &/ IIf(bCached, "/", "/uncached") &/ sAddress
        ' if address contains a "/" already don't add anything
        IF InStr(rResult!address, "/") = 0 THEN
          SELECT CASE Left(rResult!address, 2)
            CASE "05" ' DS2405 - addressable switch
              sAddress &= "/PIO"
            CASE "10", "28" ' DS18S20 and DS18B20 - temperature sensors
              sAddress &= "/temperature"
            CASE "1D" ' DS2423 - dual counter
              sAddress &= "/counters.ALL"
            CASE "26" ' DS2438 - humidity
              sAddress &= "/humidity"
            CASE "12", "3A" ' DS2406 and DS2413 - dual I/O
              sAddress &= "/sensed.B"
            CASE "20" ' DS2450 - quad A/D
              sAddress &= "/volt.A"
            CASE ELSE
              IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Unsupported 1-Wire family '") & Left(rResult!address, 2) & "'")
          END SELECT
        END IF
        GetOWFS(rResult!id, sAddress)
      NEXT
    ELSE
      Main.WriteLog(("OWFS: No 1-Wire devices found in device table!"))
    END IF
  END IF

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' to switch unit with device control
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB SendCommand(sAddress AS String, sValue AS String)

  SELECT CASE UCase(sValue)
    CASE "ON"
      SetOWFS(sAddress, "1")
    CASE "OFF"
      SetOWFS(sAddress, "0")
    CASE ELSE
      IF Main.bLGTVDebug THEN Main.WriteDebugLog(("[OWFS] Unsupported command received: ") & sValue)
  END SELECT

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' try to set value of Device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB SetOWFS(sAddress AS String, sValue AS String)

  DIM sDevice AS String

  IF InStr(sAddress, ".") = 0 THEN sAddress = Left(sAddress, 2) & "." & Right(sAddress, Len(sAddress) - 2)
  sDevice = sBaseDir &/ sAddress
  ' if address contains a "/" already don't add anything
  IF InStr(sAddress, "/") = 0 THEN
    SELECT CASE Left(sAddress, 2)
      CASE "05" ' DS2405 - addressable switch
        sDevice &= "/PIO"
      CASE "12", "3A" ' DS2406 and DS2413
        sDevice &= "/PIO.BYTE"
      CASE "20" ' DS2450- Quad A/D
        sDevice &= "/PIO.A"
      CASE ELSE
        IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Unsupported 1-Wire family '") & Left(sAddress, 2) & "' for switching.")
    END SELECT
  ENDIF
  IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Settings contents of '") & sDevice & "' to '" & sValue & "'")
  SHELL "echo \"" & sValue & "\" > " & sDevice

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' try to get value of Device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PRIVATE SUB GetOWFS(iId AS Integer, sAddress AS String)

  IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Checking contents of '") & sAddress & "'")
  hOWFS = EXEC ["cat", sAddress] FOR READ AS "OWFS"
  hOWFS.Tag = iId
  cOutput.Add("", iId)

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read OWFS output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB OWFS_Read()

  DIM sBuffer AS String
  DIM iId AS Integer

  sBuffer = READ #LAST, -256
  iId = LAST.Tag

  IF cOutput.Exist(iId) THEN cOutput[iId] &= sBuffer

END

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and return value, 0 means ok, anything else is not found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PUBLIC SUB OWFS_Kill()

  DIM iDeviceId, iRc AS Integer
  DIM sOutput, sDeviceType AS String

  iDeviceId = LAST.Tag
  iRc = LAST.Value

  IF iDeviceId THEN
    ' save ping output
    sOutput = Replace(cOutput[iDeviceId], " ", "")
    cOutput.Remove(iDeviceId)

    SELECT CASE iRc
      CASE 0

        sDeviceType = Devices.FindDescrForDeviceType(Devices.FindModuleForDevice(iDeviceId))
        SELECT sDeviceType
          CASE "Addressable Switch", "Dual Addressable Switch", "Dual I/O"
            ' a switch device, convert values
            IF sOutput = "0" THEN sOutput = "Off"
            IF sOutput = "1" THEN sOutput = "On"
        END SELECT

        ' debug output
        IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Device with id '") & iDeviceId & ("' and type '") & sDeviceType & ("' has value '") & sOutput & "'.")
        ' find and update device
        Devices.CheckFirstSeen(iDeviceId)
        Devices.ValueUpdate(iDeviceId, sOutput, "", "", "")
      CASE ELSE
        ' debug output
        IF bOWFSDebug THEN Main.WriteDebugLog(("[OWFS] Cannot open OWFS file for device with id '") & iDeviceId & "'.")
    END SELECT
  ELSE
    Main.WriteDebugLog(("[OWFS] Returned invalid device id!"))
  ENDIF

CATCH
  Main.WriteDebugLog(("ERROR: Parsing OWFS Result: ") & Error.Text & " at " & Error.Where)

END

PRIVATE FUNCTION Cached_Read() AS Boolean

  RETURN bCached

END

PRIVATE SUB Cached_Write(Value AS Boolean)

  bCached = Value

END

PRIVATE FUNCTION BaseDir_Read() AS String

  RETURN sBaseDir

END

PRIVATE SUB BaseDir_Write(Value AS String)

  sBaseDir = Value

END

PRIVATE FUNCTION PollTime_Read() AS Integer

  RETURN iPollTime

END

PRIVATE SUB PollTime_Write(Value AS Integer)

  iPollTime = Value

END

PRIVATE FUNCTION OWFSDebug_Read() AS Boolean

  RETURN bOWFSDebug

END

PRIVATE SUB OWFSDebug_Write(Value AS Boolean)

  bOWFSDebug = Value

END
