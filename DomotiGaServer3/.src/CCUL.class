' Gambas class file

' Description:
' CCUL.class
' Connect to CULFW interface via tcp socket or serial port.

' Development Status:
' Just started.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "CUL"
Public PluginFriendlyName As String = "CUL"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[CUL] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $sInterface As String
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean
Private $iModel As Integer
Private $sFHTid As String

Public hCUL As New Socket
Public hCULSer As New SerialPort
Public bSimulate As Boolean = False
Public tCULBusy As Timer
Public tCULLed As Timer

' FS20 on/off-for-timers
Private oOnOffTimers As New Object[]
Public tOnOffTimer As CTimerOnOff

Private bFirstByte As Boolean = True
Private RecBuf As New Byte[255]
Private bMessage As Boolean = False
Private iByteCount As Integer = 0
Private cQueue As New Collection  ' command buffer
Private bCULBusy As Boolean  ' waiting for delay timer to finish
Private cLowTemps As New Collection ' to store FHT low temp byte

Public tReConnect As Timer
Private iReConnectRetry As Integer = 0 ' retries
Private aReConnectDelay As Integer[] = [5000, 10000, 30000, 60000, 300000, 900000, 1800000, 3600000, 7200000, 14400000] ' 5sec, 10sec, 30sec, 1min, 5min, 15min, 1/2hour, 1hour, 2hours, 4hours

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $sInterface = cPl.Settings["type"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $sFHTid = cPl.Settings["fhtid"]
  $iModel = cPl.Settings["model"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("CUL Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Define timer for TCP reconnect
  tReConnect = New Timer As "tReConnect"
  tReConnect.Delay = iReConnectRetry
  tReConnect.Stop

  ' Connect/Initialize connection
  If InStr($sInterface, "tcp") Then
    ConnectTCP()
  Else
    ConnectSerial()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CUL_Ready()

  WriteLog("TCP interface connected.")
  IsRunning = True

  ' connected so reset retry counter
  tReConnect.Stop
  iReConnectRetry = 0

  Init()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tReConnect_Timer()

  ConnectTCP()

End

Public Sub CUL_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")
  ReConnect()

End

Public Sub ReConnect()

  If iReConnectRetry < aReConnectDelay.Max + 1 Then
    Main.WriteLog(LogLabel & "Retry to connect in " & IIf(aReConnectDelay[iReConnectRetry] > 60000, CStr(aReConnectDelay[iReConnectRetry] / 60000) & " minutes.", CStr(aReConnectDelay[iReConnectRetry] / 1000) & " seconds."))
    tReConnect.Delay = aReConnectDelay[iReConnectRetry]
    tReConnect.Start
  Else
    tReConnect.Stop
    Main.WriteLog(LogLabel & "Too many reconnect failures, stopped trying.")
  Endif
  Inc iReConnectRetry

End

Public Sub CUL_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP(Optional bFirstStart As Boolean = True) As Boolean

  Dim sModel As String[] = ["", "CUL", "CUN", "CUNO", "CUR"]

  ' try to close the connection
  Try hCUL.Close

  ' get a new one
  hCUL = New Socket As "CUL"
  hCUL.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  If bFirstStart Then Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort & " (" & sModel[$iModel] & ")")

  ' Don't set IsRunning=True, this has to be done in _Ready

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectSerial() As Boolean

  Dim sModel As String[] = ["", "CUL", "CUN", "CUNO", "CUR"]

  ' try to close the connection
  Try hCULSer.Close

  ' get a new one
  hCULSer = New Serialport As "CULSer"
  With hCULSer
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  Init()

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort & " (" & sModel[$iModel] & ")")
  IsRunning = True

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  Dim oTimer As Object

  ' try to close the connection
  Try tCULBusy.Stop
  Try tCULLed.Stop
  Try tReConnect.Stop
  Try hCUL.Close
  Try hCULSer.Close
  For Each oTimer In oOnOffTimers
    Try oTimer.Stop
  Next

  If InStr($sInterface, "tcp") Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")
  Endif

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reset led status in main status bar
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tCULLED_Timer()

  Main.ControlLed("CUL", "Off")
  tCULLED.Stop

End

Public Sub CUL_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg
  ReConnect()

End

Public Sub CUL_Read()

  Dim bData As Byte

  Try bData = Read #hCUL As Byte
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from the TCP port! -> " & Error.Text)
  ProcessReceivedChar(bData)

End

Public Sub CULSer_Read()

  Dim bData As Byte

  Try bData = Read #hCULSer As Byte
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from the serial port! -> " & Error.Text)
  ProcessReceivedChar(bData)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer
  Dim sType As String

  ' find out what kind of device we are dealing with
  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)
  If iDeviceId Then
    sType = Devices.FindTypeForDevice(iDeviceId)
  Else
    Return
  Endif

  ' select which routine to use
  Select sType
    Case "FS20"
      PrepareFS20Command(sAddress, sCmd)
      If sCmd = "On" Then
        If Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId) = "Bell Button" Then
          StartOnOffTimer(iDeviceId, "Off", 1)
        Endif
      Endif
    Default
      Main.WriteDebugLog(LogLabel & "Controlling '" & sType & "' devices is not supported in this version!")
      Return
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' prepare packet to send to FS20 device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub PrepareFS20Command(sAddress As String, sCmd As String)

  Dim sPacket, sCommand As String
  Dim aParams As String[]

  ' F <Hex>
  ' <Hex> is a Hex String of the following form:
  ' hhhhaacc or hhhhaaccee, where
  ' hhhh is the FS20 housecode,
  ' aa is the FS20 device address,
  ' cc is the FS20 command
  ' ee is the FS20 timespec. Note that cc must have the extension bit set.
  ' Example: F12340111

  ' check if address has 3 bytes
  If (Len(sAddress) <> 6) Then
    Main.WriteDebugLog(LogLabel & "FS20 address has invalid format '" & sAddress & "' we need 3 bytes!")
    Return
  Endif

  aParams = Split(sCmd, " ")
  '--- for example ON, OFF
  If aParams.Count = 1 Then
    sCommand = CommandtoFS20(aParams[0])
    If Len(sCommand) = 0 Then
      Main.WriteDebugLog(LogLabel & "Only ON, OFF and DIM are supported in this version!")
      Return
    Endif
  '--- for example DIM 1
  Else If aParams.Count = 2 Then
    If UCase(aParams[0]) = "DIM" Then
      sCommand = ConvertFS20Dim(aParams[1])
    Else
      Main.WriteDebugLog(LogLabel & "Invalid command format!")
      Return
    Endif
  Endif

  ' --- set extended bit ---
  ' IF bAck THEN bCommand = bCommand OR &H20

  sPacket = "F" & sAddress & sCommand
  QueueCommand(sPacket)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sPacket As String)

  ' add command to queue
  cQueue.Add(sPacket & "\r\n", Rnd)

  ' if interface is not busy process it
  If bCULBusy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim sPacket As String

  For Each sPacket In cQueue
    WriteCommand(sPacket, cQueue.Key)
    Break ' only do first one
  Next

End

' start on-off timer for iDeviceId and sCmd with sDuration
Private Sub StartOnOffTimer(iDeviceId As Integer, sCmd As String, iDuration As Integer)

  If FindTimer(iDeviceId, sCmd, iDuration) = False Then
    tOnOffTimer = New CTimerOnOff As "tOnOffTimer"
    oOnOffTimers.Add(tOnOffTimer)
    tOnOffTimer.Delay = iDuration * 1000
    tOnOffTimer.Duration = iDuration
    tOnOffTimer.DeviceId = iDeviceId
    tOnOffTimer.Command = sCmd
    tOnOffTimer.Started = Now()
    tOnOffTimer.Start
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Started " & IIf(sCmd = "On", "Off", "On") & "-For-Timer for device with id '" & iDeviceId & "' for a duration of " & iDuration & " seconds.")
  Endif

End

' looks if there is a on/off-for-timer running for iDeviceId
Private Sub FindTimer(iDeviceId As Integer, sCmd As String, iDuration As Integer) As Boolean

  Dim oObject As Object

  For Each oObject In oOnOffTimers
    If oObject.DeviceId = iDeviceId And If oObject.Command = sCmd And If oObject.Duration = iDuration Then
      If $bDebug Then Main.WriteDebugLog(LogLabel & IIf(sCmd = "On", "Off", "On") & "-For-Timer for device with id '" & iDeviceId & " and command " & sCmd & " with duration of " & iDuration & " seconds already runs, skipping.")
      Return True
    Endif
  Next
  Return False

End

' on/off-for-timer expired, update device
Public Sub tOnOffTimer_Timer()

  Dim iDeviceId As Integer
  Dim sCmd As String

  iDeviceId = Last.DeviceId
  sCmd = Last.Command
  Last.Stop
  oOnOffTimers.Remove(oOnOffTimers.Find(Last))

  If $bDebug Then Main.WriteDebugLog(LogLabel & IIf(sCmd = "On", "Off", "On") & "-For-Timer expired, changing value of device with id '" & iDeviceId & "' to '" & sCmd & "'")
  Try Devices.ValueUpdate(iDeviceId, 1, sCmd)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' initialize interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Init()

  ' define timer for CUL interface busy
  tCULBusy = New Timer As "tCULBusy"
  tCULBusy.Stop

  ' define timer for CUL status LED
  tCULLed = New Timer As "tCULLED"
  tCULLed.Delay = 500
  tCULLed.Stop

  ' init CUL
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Switching to X21 mode.")
  QueueCommand("X21")

  ' set FHTid
  If Len($sFHTid) And If $sFHTid <> "0000" Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Setting FHTid to '" & $sFHTid & "'. (" & HexToDec($sFHTid) & ")")
    QueueCommand("T01" & $sFHTid)
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "No FHTid set, value '" & $sFHTid & "' is not valid!")
  Endif

  ' get version
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Getting version info.")
  QueueCommand("V")

  ' ParseDump("/home/ron/S300TH.txt")

End

' just here for development/debugging
Public Sub ParseDump(sFile As String)

  Dim hFile As File
  Dim sLine As String

  Try hFile = Open sFile For Input
  If Error Then Return

  While Not Eof(hFile)
    Line Input #hFile, sLine
    If Len(sLine) > 5 Then Simulate(sLine)
  Wend

End

Private Sub ConvertFS20Dim(iLevel As Integer) As String

  Return Hex(CInt((iLevel / 6.5) + 1), 2) ' cut 1-99 down to 16 steps

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send string to CUL interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteCommand(sBuffer As String, sKey As String)

  Main.ControlLed("CUL", "On")
  If Main.bServer Then tCULLed.Start

  If $sInterface = "tcp" Then
    ' return if not connected yet
    If hCUL.Status <> Net.Connected Then Return
    ' send the message to the tcp stream
    Try Write #hCUL, sBuffer, Len(sBuffer)
    If Error Then Main.WriteDebugLog(LogLabel & "Unable to write to TCP port! -> " & Error.Text)
  Else
    ' return if not connected yet
    If hCULSer.Status <> Net.Active Then Return
    ' send the message to the serial port
    Try Write #hCULSer, sBuffer, Len(sBuffer)
    If Error Then Main.WriteDebugLog(LogLabel & "Unable to write to serial port! -> " & Error.Text)
  Endif
  If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & Mid(sBuffer, 1, Len(sBuffer) - 2))

  ' remove sent command from queue
  cQueue.Remove(sKey)

  tCULBusy.Delay = 100 ' 100mS
  If bCULBusy = False Then bCULBusy = True
  tCULBusy.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' cul interface busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tCULBusy_Timer()

  bCULBusy = False
  tCULBusy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending next command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End

Private Sub CommandtoFS20(sCmd As String) As String

  Select UCase(sCmd)
    Case "OFF"
      Return "00"
    Case "ON"
      Return "11"
    Default
      Return ""
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' inject packet into parser.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Simulate(sPacket As String)

  Dim iCnt As Integer

  bSimulate = True
  bFirstByte = True
  If $bDebug Then Main.WriteDebugLog(LogLabel & "CUL receiver Simulate String: " & sPacket)

  For iCnt = 1 To Len(sPacket)
    ProcessReceivedChar(Asc(Mid(sPacket, iCnt, 1)))
  Next
  ProcessReceivedChar(&HD)
  ProcessReceivedChar(&HA)
  bSimulate = False

End Sub

Private Sub ProcessReceivedChar(bTemp As Byte)

  If bFirstByte = True Then
    bFirstByte = False
    iByteCount = 0
  Endif

  Main.ControlLed("CUL", "On")

  Try RecBuf[iByteCount] = bTemp
  If Error Then
    bFirstByte = True
    iByteCount = 0
    Return
  Endif

  If bTemp = &H0A Then
    iByteCount -= 2 ' do not count \r\n

    If iByteCount >= 0 Then
      If $bDebug Then WriteDebugLog("< " & Util.ByteToHex(RecBuf.Copy(0, iByteCount)))
    Else
      If $bDebug Then WriteDebugLog("< ")
    Endif

    Display_Message()
  Else
    Inc iByteCount
  Endif

Catch
  WriteLog("ERROR: ProcessReceivedChar '" & Error.Text & "' at '" & Error.Where & "'")

End

Private Sub Display_Message()

  Dim iDeviceId, iCmd, iDur, iI, iJ, iFirst, iType, iSensor As Integer
  Dim sHouseCode, sAddress, sValue, sValue2, sCmd, sEMType, sEMCumulValue, sEMPeakValue, sMsgCounter, sBatt, sVal, sId, sSval, sFv, sType, sSign, sLowTemp, sSensor, sWindow As String
  Dim aEMType As String[] = ["EM1000", "EM1000-S", "EM1000-EM", "EM1000-GZ"]
  Dim aFHTc2m As String[] = ["Auto", "Manual", "Holiday", "Holiday-Short"]
  Dim aWS300Type As String[] = ["Temp", "Temp/Hum", "Rain", "Wind" "Temp/Hum/Press", "Brightness" "Pyro", "Temp/Hum"]
  Dim aFS20Values As String[] = ["Off", "Dim 6", "Dim 12", "Dim 18", "Dim 25", "Dim 31", "Dim 37", "Dim 43", "Dim 50", "Dim 56", "Dim 62", "Dim 68", "Dim 75", "Dim 81", "Dim 87", "Dim 93", "Dim 100", "On", "Toggle", "DimUp", "DimDown", "DimUpDown", "Timer", "SendState", "Off-For-Timer", "On-For-Timer", "On-Old-For-Timer", "Reset", "Ramp-On-Time", "Ramp-Of-Time", "On-Old-For-Timer-Prev", "On-100-For-Timer-Prev"]
  Dim bConfirm As Boolean
  Dim fRSSI As Float

  bMessage = False
  bFirstByte = True

  Select Chr(RecBuf[0])
    Case "F" ' FS20 message
      ' F <Hex>
      ' <Hex> is a hex string with the following format:
      ' hhhhaacc or hhhhaaccee, where
      ' hhhh is the FS20 housecode
      ' aa is the FS20 device address
      ' cc is the FS20 command
      ' ee is the FS20 timespec. Note that cc must have the extension bit set.
      ' Example: F12340111

      ' check for valid packet size
      If iByteCount < 9 Or If iByteCount > 12 Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "FS20 message received with invalid length of " & iByteCount & " bytes!")
        Return
      Endif

      sHouseCode = Chr(RecBuf[1]) & Chr(RecBuf[2]) & Chr(RecBuf[3]) & Chr(RecBuf[4])
      sAddress = Chr(RecBuf[5]) & Chr(RecBuf[6])
      iCmd = Val("&H" & Chr(RecBuf[7]) & Chr(RecBuf[8]))

      ' signal
      If iByteCount > 11 Then
        fRSSI = Val("&H" & Chr(RecBuf[11]) & Chr(RecBuf[12]))
      Else
        fRSSI = Val("&H" & Chr(RecBuf[9]) & Chr(RecBuf[10]))
      Endif

      ' calculate duration if extension bit is set
      If (iCmd And &H20) Then
        iDur = Val("&H" & Chr(RecBuf[9]) & Chr(RecBuf[10]))
        iI = (iDur And &HF0) / 16
        iJ = (iDur And &HF)
        iDur = (2 ^ iI) * iJ * 0.25

        ' calculate cmd
        iCmd = iCmd Xor &H20
      Endif

      ' test if cmd value is known
      Try sVal = aFS20Values[iCmd]
      If Not Error Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "FS20 message received with address '" & sHouseCode & sAddress & "' (" & Hex2Four(sHouseCode & sAddress) & ") and command '" & sVal & "'" & IIf(iDur, " duration " & iDur, "") & CalcRSSI(fRSSI))
        iDeviceId = Devices.Find(Instance, sHouseCode & sAddress, InterfaceId, "FS20")
        ' move some values around if needed
        If iCmd < 18 Then ' Off, Dim, On
          sValue = sVal
          sValue2 = " "
          If sValue = "On" Then
            If Devices.FindDeviceTypeDescriptionForDeviceId(iDeviceId) = "Bell Button" Then
              StartOnOffTimer(iDeviceId, "Off", 1)
            Endif
          Endif
        Else If iCmd = 24 ' Off-For-Timer
          sValue = "Off"
          sValue2 = sVal & " " & iDur
          StartOnOffTimer(iDeviceId, "On", iDur)
        Else If iCmd = 25 ' On-For-Timer
          sValue = "On"
          sValue2 = sVal & " " & iDur
          StartOnOffTimer(iDeviceId, "Off", iDur)
        Else
          sValue = ""
          sValue2 = sVal
        Endif
        ' find device id
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValue)
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, 2, sValue2)
      Else
        If $bDebug Then Main.WriteDebugLog(LogLabel & "FS20 message received with address '" & sHouseCode & sAddress & "' (" & Hex2Four(sHouseCode & sAddress) & ") and unknown/invalid command '" & Hex(iCmd) & "'")
      Endif
    Case "T" ' FHT messages
      ' check for valid packet size
      If iByteCount < 9 Or If iByteCount > 13 Then
        If $bDebug Then Main.WriteDebugLog(LogLabel & "FHT message received with invalid length of " & iByteCount & " bytes!")
        Return
      Endif

      sAddress = Chr(RecBuf[1]) & Chr(RecBuf[2]) & Chr(RecBuf[3]) & Chr(RecBuf[4]) & Chr(RecBuf[5]) & Chr(RecBuf[6])
      iCmd = Val("&H" & Chr(RecBuf[7]) & Chr(RecBuf[8]))
      If iByteCount = 10 Then ' must be FHT FTK sensor
        ' T<Hex>
        ' <Hex> is a hex string with the following format:
        ' Tccccccxx
        ' where cccccc being the id of the sensor in hex
        ' xx being the current status like 'open,close,sync,test,battlow'
        Select iCmd
          Case &H02, &H82
            sValue = "Closed"
            sBatt = "Ok"
          Case &H01, &H81
            sValue = "Open"
            sBatt = "Ok"
          Case &H11, &H91
            sValue = "Open"
            sBatt = "Low"
          Case &H12, &H92
            sValue = "Closed"
            sBatt = "Low"
          Case &H0C
            sValue2 = "Sync:Syncing"
          Case &H0F
            sValue2 = "Test:Success"
        End Select

        If $bDebug Then Main.WriteDebugLog(LogLabel & "FHT TFK message received with address '" & sHouseCode & sAddress & "', status '" & IIf(Len(sValue2), sValue2, sValue) & "' and battery level '" & sBatt & "'")
        ' find device id
        iDeviceId = Devices.Find(Instance, sHouseCode & sAddress, InterfaceId, "FHTTFK")
        If iDeviceId Then
          ' update values
          Devices.ValueUpdate(iDeviceId, 1, sValue)
          Devices.ValueUpdate(iDeviceId, 2, sValue2)
          ' store battery status
          If (Len(sBatt) > 1) Then Devices.Battery(iDeviceId, sBatt)
        Endif
      Else ' FHT80 message
        ' T<Hex>
        ' <Hex> is a hex string with the following format:
        ' Thhhhccnnvvxx
        ' hhhh = address
        ' cc = command
        ' nn = report value / id
        ' vv = value
        ' xx = rssi
        sAddress = Chr(RecBuf[1]) & Chr(RecBuf[2]) & Chr(RecBuf[3]) & Chr(RecBuf[4])
        iCmd = Val("&H" & Chr(RecBuf[5]) & Chr(RecBuf[6]))
        sCmd = FHTCode(iCmd)

        If iByteCount > 9 Then
          sVal = Val("&H" & (Chr(RecBuf[9]) & Chr(RecBuf[10])))
        Else If iByteCount < 9 Then
          sCmd = "FHT short message"
          sVal = ""
        Endif

        If iByteCount > 11 Then
          ' rssi
          fRSSI = Val("&H" & Chr(RecBuf[11]) & Chr(RecBuf[12]))
        Endif

        If sCmd = "Report1" Or If sCmd = "Report2" Then
          sVal = Val("&H" & (Chr(RecBuf[7]) & Chr(RecBuf[8])))
          bConfirm = True
        Endif

        If InStr(sCmd, "-From") Or If InStr(sCmd, "-To") Then ' time format
          sVal = Format(Val(sVal) / 6, "0#") & ":" & Format((Val(sVal) Mod 6) * 10, "0#")
        Else If sCmd = "Mode" ' auto, manual, holiday, holiday-short
          sVal = aFHTc2m[sVal]
        Else If InStr(sCmd, "-Temp")
          sVal = sVal / 2
          sVal = Format(sVal, "#.0")
        Else If sCmd = "Lowtemp-Offset"
          sVal = Format(sVal, "#.0")
        Else If InStr(sCmd, "Actuator")
          sSval = Chr(RecBuf[7]) & Chr(RecBuf[8])
          sFv = Format((100 * Val(sVal) / 255), "#")
          sId = Chr(RecBuf[8])
          If sSval = "A0" Or If sSval = "B0" Then
            sVal = sFv ' sync in the summer
          Else If Right(sSval, 1) = "0" Then
            sVal = "SyncNow"
          Else If Right(sSval, 1) = "1" Then
            sVal = "99%" ' FHT set to 30.5, FHT80B="ON"
          Else If Right(sSval, 1) = "2" Then
            sVal = "0%" ' FHT set to 5.5
          Else If Right(sSval, 1) = "6" Then
            sVal = sFv
          Else If Right(sSval, 1) = "8" Then
            sVal = "Offset: " & sFv
          Else If sSval = "2A" Or If sSval = "3A" Then
            sVal = "Lime-Protection"
          Else If sSval = "AA" Or If sSval = "BA" Then
            sVal = sFv ' lime protection bug
          Else If Right(sSval, 1) = "C" Then
            sVal = Val(sVal) / 2 - 1.5
            sVal = "SyncTime: " & Str(sVal)
          Else If Right(sSval, 1) = "E" Then
            sVal = "Test"
          Else If Right(sSval, 1) = "F" Then
            sVal = "Pair"
          Else
            sVal = "Unknown"
          Endif

          If InStr(sVal, "%") And If sId = 0 Then
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Position " & sId & " " & sVal)
          Endif
        Else If sCmd = "Measured-Low"
          cLowTemps[sAddress] = sVal
        Else If sCmd = "Measured-High"
          Try sLowTemp = cLowTemps[sAddress]
          If Not Error Then
            sVal = (sVal * 256) + sLowTemp
            sVal /= 10
            sCmd = "Measured-Temp"
          Endif
        Else If sCmd = "Warnings"
          sBatt = IIf(BTst(CInt(sVal), 0), "Low", "Ok")
          sLowTemp = IIf(BTst(CInt(sVal), 1), "Warn", "Ok")
          sWindow = IIf(BTst(CInt(sVal), 5), "Open", "Closed")
          sSensor = IIf(BTst(CInt(sVal), 4), "Fault", "Ok")
        Endif
        If $bDebug Then
          Main.WriteDebugLog(LogLabel & "FHT message received with address '" & sAddress & "' (" & HexToDec(sAddress) & ") command '" & sCmd & "' (" & Hex(iCmd) & ") value '" & sVal & "'" & CalcRSSI(fRSSI))
          If sCmd = "Warnings" Then Main.WriteDebugLog(LogLabel & "Warnings: Battery=" & sBatt & " LowTemp=" & sLowTemp & " Sensor=" & sSensor & " Window=" & sWindow)
        Endif
        ' find device id
        iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "FHT80")
        If iDeviceId Then
          If sCmd = "Measured-Temp" Then
            ' update values
            Devices.ValueUpdate(iDeviceId, 1, sVal)
          Else If sCmd = "Desired-Temp" Then
            Devices.ValueUpdate(iDeviceId, 2, sVal)
          Else If InStr(sCmd, "Actuator") Then
            Devices.ValueUpdate(iDeviceId, 3, sVal)
          Endif
          ' store battery status
          If (Len(sBatt) > 1) Then Devices.Battery(iDeviceId, sBatt)
        Endif
      Endif
    Case "E"
      ' E<Hex>
      ' EM message. <Hex> is a hex string with the following format:
      ' Ettaacc111122223333
      ' tt: type 01 = EM-1000S, 02 = EM-1000EM, 03 = EM-1000GZ
      ' aa: address, depending on the type above 01: 01-04, 02: 05-08, 03: 09-12
      ' cc: counter, will be incremented by one for each message
      ' 1111: cumulated value
      ' 2222: last value(not set for type 2)
      ' 3333: top value(not set for type 2)
      sEMType = Chr(RecBuf[1]) & Chr(RecBuf[2])
      sAddress = Chr(RecBuf[3]) & Chr(RecBuf[4])
      sEMCumulValue = Chr(RecBuf[7]) & Chr(RecBuf[8]) & Chr(RecBuf[9]) & Chr(RecBuf[10])
      sMsgCounter = Chr(RecBuf[5]) & Chr(RecBuf[6])
      Try sValue = Chr(RecBuf[11]) & Chr(RecBuf[12]) & Chr(RecBuf[13]) & Chr(RecBuf[14])
      Try sEMPeakValue = Chr(RecBuf[15]) & Chr(RecBuf[16]) & Chr(RecBuf[17]) & Chr(RecBuf[18])

      If $bDebug Then Main.WriteDebugLog(LogLabel & "EM message received sensor '" & aEMType[Val(sEMType)] & "' [" & sEMType & "]" & " with address '" & sAddress & "' cumulated value: " & sEMCumulValue & " last: " & sValue & " top: " & sEMPeakValue & " msg count: " & Val("&H" & sMsgCounter))
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, aEMType[Val(sEMType)])
      ' update value
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sEMCumulValue)
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 2, sValue)
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 3, sEMPeakValue)
    Case "K" ' WS300 messages
      ' K<Hex>
      ' <Hex> is a hex string with the following format:
      ' Example: K010212593C
      ' For S300TH: KaaTTHTHHRR
      ' H: humid
      ' T: temperature
      ' aa: address/sensor type
      ' RR: signal strenght
      ' first byte
      'iFirst = RecBuf[1]
      iFirst = Val("&H" & Chr(RecBuf[1]))
      ' get sensor type
      'iSensor = RecBuf[2]
      iSensor = Chr(RecBuf[2])
      iType = iSensor And 7
      sAddress = (iFirst And 7) + 1

      If iFirst = 7 Then ' firstbyte
        If iType = 0 And If iByteCount > 6 Then ' temp
          sType = "WS300 TEMP"
          ' todo
        Endif
        If iType = 1 And If iByteCount > 8 Then ' temp/hum
          sType = "WS300 TEMP/HUM"
          ' todo
          If iByteCount > 8 Then ' RSSI
          Endif
        Endif
        If iType = 2 And If iByteCount > 5 Then ' rain
          sType = "WS300 RAIN"
          ' todo
        Endif
        If iType = 3 And If iByteCount > 8 Then ' wind
          sType = "WS300 WIND"
          ' todo
        Endif
        If iType = 4 And If iByteCount > 10 Then ' temp/humid/baro
          sType = "WS300 INDOOR"
          ' todo
        Endif
        If iType = 5 And If iByteCount > 5 Then ' brightness
          sType = "WS300 BRIGHTNESS"
          ' todo
        Endif
        If iType = 6 And If iByteCount > 0 Then ' pyro
          sType = "WS300 PYRO"
          ' not released
        Endif
        If iType = 7 And If iByteCount > 8 Then ' temp/hum
          sType = "WS300 TEMP/HUM"
          ' todo
        Endif
      Else
        If iByteCount > 8 Then ' S300TH
          sType = "S300TH"
          sSign = IIf((iFirst And 8), "-", "")
          'sValue = sSign & Format(Chr(RecBuf[6]) & Chr(RecBuf[3]) & "." & Chr(RecBuf[4]), "#0.0") ' temp
          sValue = Format(sSign & Chr(RecBuf[6]) & Chr(RecBuf[3]) & "." & Chr(RecBuf[4]), "0.0") ' temp
          sValue2 = Format(Chr(RecBuf[7]) & Chr(RecBuf[8]) & "." & Chr(RecBuf[5]), "0.0") ' humid
          If iByteCount = 10 Then ' RSSI
            fRSSI = Val("&H" & Chr(RecBuf[9]) & Chr(RecBuf[10]))
          Endif
        Else If iByteCount > 14 Then ' KS300/2
          sType = "KS300/2"
          ' todo
          If iByteCount = 14 Then ' RSSI
          Endif
        Endif
      Endif

      If $bDebug Then
        Main.WriteDebugLog(LogLabel & "WS300 message received from sensor type '" & sType & "' (" & aWS300Type[iSensor] & ") with address '" & sAddress & "'" & CalcRSSI(fRSSI))
        Select sType
          Case "S300TH"
            Main.WriteDebugLog(LogLabel & "Reported a Temperature of " & sValue & "°C and Humidity of " & sValue2 & "%")
        End Select
      Endif
      iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, sType)
      ' update value
      Select sType
        Case "S300TH"
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValue)
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 2, sValue2)
        Case Else
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValue)
      End Select
    Case "V"
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Version string received.")
    Case Else
      Main.WriteDebugLog(LogLabel & "Unknown/unsupported message format received!")
  End Select
  Main.ControlLed("CUL", "Off")

Catch
   Main.WriteDebugLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "' Parsing CUL data packet: " & DisplayPacket(RecBuf))

End

Private Sub CalcRSSI(fRSSI As Float) As String

  If fRSSI Then
    Return " RSSI: " & IIf(fRSSI >= 128, (fRSSI - 256) / 2 - 74, fRSSI / 2 - 74)
  Else
    Return ""
  Endif

End

' convert doubles bytes hex to decimal
Private Sub HexToDec(sHex As String) As String

  Return Val("&H" & Mid(sHex, 1, 2)) & Val("&H" & Mid(sHex, 3, 2))

End

' converting CUL Hex IDs into ELV-4-Ids
Private Sub Hex2Four(sHex As String) As String

  Dim iCnt As Integer
  Dim sELV As String

  For iCnt = 1 To Len(sHex)
    sELV &= Left(Str((Val("&H" & Mid(sHex, iCnt, 1)) / 4) + 1), 1)
    sELV &= (Val("&H" & Mid(sHex, iCnt, 1)) Mod 4) + 1
  Next
  Return sELV

End

Private Sub FHTCode(iCode As Byte) As String

  Select iCode
    Case &H00
      Return "Actuator"
    Case &H01
      Return "Actuator1"
    Case &H02
      Return "Actuator2"
    Case &H03
      Return "Actuator3"
    Case &H04
      Return "Actuator4"
    Case &H05
      Return "Actuator5"
    Case &H06
      Return "Actuator6"
    Case &H07
      Return "Actuator7"
    Case &H08
      Return "Actuator8"
    Case &H14
      Return "Mon-From1"
    Case &H15
      Return "Mon-To1"
    Case &H16
      Return "Mon-From2"
    Case &H17
      Return "Mon-To2"
    Case &H18
      Return "Tue-From1"
    Case &H19
      Return "Tue-To1"
    Case &H1A
      Return "Tue-From2"
    Case &H1B
      Return "Tue-To2"
    Case &H1C
      Return "Wed-From1"
    Case &H1D
      Return "Wed-To1"
    Case &H1E
      Return "Wed-From2"
    Case &H1F
      Return "Wed-To2"
    Case &H20
      Return "Thu-From1"
    Case &H21
      Return "Thu-To1"
    Case &H22
      Return "Thu-From2"
    Case &H23
      Return "Thu-To2"
    Case &H24
      Return "Fri-From1"
    Case &H25
      Return "Fri-To1"
    Case &H26
      Return "Fri-From2"
    Case &H27
      Return "Fri-To2"
    Case &H28
      Return "Sat-From1"
    Case &H29
      Return "Sat-To1"
    Case &H2A
      Return "Sat-From2"
    Case &H2B
      Return "Sat-To2"
    Case &H2C
      Return "Sun-From1"
    Case &H2D
      Return "Sun-To1"
    Case &H2E
      Return "Sun-From2"
    Case &H2F
      Return "Sun-To2"
    Case &H3E
      Return "Mode"
    Case &H3F
      Return "Holiday1"
    Case &H40
      Return "Holiday2"
    Case &H41
      Return "Desired-Temp"
    Case &H42
      Return "Measured-Low"
    Case &H43
      Return "Measured-High"
    Case &H44
      Return "Warnings"
    Case &H45
      Return "Manu-Temp"
    Case &H4B
      Return "Ack"
    Case &H53
      Return "Can-Xmit"
    Case &H54
      Return "Can-Rcv"
    Case &H60
      Return "Year"
    Case &H61
      Return "Month"
    Case &H62
      Return "Day"
    Case &H63
      Return "Hour"
    Case &H64
      Return "Minute"
    Case &H65
      Return "Report1"
    Case &H66
      Return "Report2"
    Case &H69
      Return "Ack2"
    Case &H7D
      Return "Start-Xmit"
    Case &H7E
      Return "End-Xmit"
    Case &H82
      Return "Day-Temp"
    Case &H84
      Return "Night-Temp"
    Case &H85
      Return "Lowtemp-Offset"
    Case &H8A
      Return "WindowOpen-Temp"
    Case Else
      Return "Unknown"
    End Select

End

Private Sub DisplayPacket(bBuf As Byte[]) As String

  Dim sMsg As String
  Dim iCnt As Integer

  For iCnt = 0 To iByteCount
    sMsg &= Chr(bBuf[iCnt])
  Next
  Return sMsg

End

