' Gambas class file

' Description
' CViera.class
' Obtain status and control of Panasonic Viera TV's
'
' Development Status
' Just starting.
'
' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Credits
' Ported to DomotiGa by Simon Jones < si at sc-jones dot co dot uk>
' parts orginally written in 2013 by Tobias Vaupel < fhem at 622 mbit dot de > for fhem
'
' Read file called COPYING for license details.

Public PluginName As String = "Viera"
Public PluginFriendlyName As String = "Viera Plugin"
Public PluginVersion As String = "0.02"
Public PluginAuthor As String = "Simon Jones"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1 

Public KeyName As String
Public LogLabel As String = "[Viera] "
Public ErrorText As String
Public ErrorWhere As String
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $sTCPHost As String
Private $sPower As String
Private $iTCPPort As Integer
Private $iRefresh As Integer
Private $bEnabled As Boolean
Private $bDebug As Boolean
Private $bStopping As Boolean

Private hVieraSocket As New Socket
Public tVieraServer As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  $bStopping = False
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $iRefresh = cPl.Settings["refresh"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Viera Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  If Not $sTCPHost = "localhost" Or $sTCPHost Then
    IsRunning = True
    tVieraServer = New Timer As "VieraTimer"
    tVieraServer.Delay = $iRefresh * 1000
    tVieraServer.Start
    Main.WriteLog(LogLabel & PluginFriendlyName & " Started.")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  IsRunning = False
  Try tVieraServer.Stop 
  Try Disconnect()
  Main.WriteLog(LogLabel & PluginFriendlyName & " Stopped.")
End

Public Sub VieraTimer_Timer()

   UpdateStatus()

End

'
' Function looks in the soap return message and parses the value
' for updating the values in DomotiGa
'
Private Sub FindReturnValue(xmlstring As String) As String

  Dim rRegExr As RegExp
  Dim sReturnValue As String = ""

  ' If nothing is passed in, return nothing.
  If Not xmlstring Then Return ""

  rRegExr = New RegExp(xmlstring, ">\\d*<")
  If rRegExr.Offset = -1 Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " ERROR: No Return Value found?")
    Else
      If Len(rRegExr.Text) >= 3 Then
        sReturnValue = Mid(rRegExr.Text, 2, Len(rRegExr.Text) - 2)
        If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Return Value Found: " & sReturnValue)
      Else
         If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Error with Return Value: " & rRegExr.Text)
      Endif
  Endif

  Return sReturnValue 

End

'
' Get if mute is on or off - return empty if error
'
Public Function GetMute() As String

  Dim sResponse As String = ConnectandSend(BuildXML_RendCtrl("Get", "Mute"))
  Dim sMute As String

  If sResponse Then
    sMute = FindReturnValue(sResponse)
  Else
    Return ""
  Endif

  If sMute Then
    If sMute = "0" Then
      Return "Off"
    Else
      Return "On"
    Endif
  Endif

End

'
' Return current volume level
' returns -1 if an error occured.
'
Public Function GetVolume() As Integer

  Dim sResponse As String = ConnectandSend(BuildXML_RendCtrl("Get", "Volume"))
  Dim sVolume As String

  If sResponse Then 
    sVolume = FindReturnValue(sResponse)
  Else
    Return -1
  Endif

  If IsNumber(sVolume) Then 
    Return sVolume
  Else
    Return -1
  Endif

End

Private Sub SetMute(Status As Boolean) As Boolean

  ' TODO - Implement Mute Function

End

Private Sub SetVolume(Vol As String) As Boolean

  ' TODO - Implement Volume Control

End


Private Sub UpdateStatus() As Boolean

  Dim sVolume, sMute As String

  sMute = GetMute()

  If Not sMute Then
    If $sPower = "On" Then
      VieraSetValue("Power", "Off")
      $sPower = "Off"
    Endif
    Return False
  Else
    VieraSetValue("Power", "On")  
    VieraSetValue("Mute", sMute)
    $sPower = "On"
  Endif

  sVolume = GetVolume()

  If sVolume Then
    VieraSetValue("Volume", sVolume)
  Endif

  Return True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port and send soap request
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectandSend(sMessage As String) As String

Dim sBuffer As String = ""
Dim iCount As Integer = 0
hVieraSocket = New Socket As "VieraSocket"

  ' Write to main logfile we are trying to connect
  If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to Viera TV " & $sTCPHost & ":" & $iTCPPort)

  Try hVieraSocket.Connect($sTCPHost, $iTCPPort)

  Do While (hVieraSocket.Status <> 7) And (hVieraSocket.Status > 0)
    Wait 0.1
    If iCount >= 10 Then
      Try hVieraSocket.Close
      If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Failed to Send to Viera TV (Timeout 1 sec)")
      Return ""
    Else
        iCount += 1
    Endif
  Loop

  ' if we get here then we connected ok

  Write #hVieraSocket, sMessage, Len(sMessage)

  ' All went ok
  IsRunning = True
  sbuffer = ReceiveData()

  Disconnect()

  Return sBuffer

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to TV at " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return ""

End

Private Sub ReceiveData() As String

  Dim sBuffer As String
  Dim iCount As Integer = 0

  Do While Lof(hVieraSocket) = 0
    Wait 0.1
    If iCount >= 10 Then
      Return ""
    Else
      Inc iCount
    Endif
  Loop

  Read #hVieraSocket, sBuffer, Lof(hVieraSocket)

  'If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Received: " & sBuffer)

  Return sBuffer

End

Public Sub VieraSocket_Error()

    ' handle error
  Select hVieraSocket.Status
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(LogLabel & PluginFriendlyName & " OS not allowing socket to be created.")
    Case Net.CannotBindSocket
      Main.WriteDebugLog(LogLabel & PluginFriendlyName & " Cannot bind socket.")
    Case Net.CannotListen
      Main.WriteDebugLog(LogLabel & PluginFriendlyName & " Cannot listen on port.")
  End Select 

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' host ip address found
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub VieraSocket_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connection is lost?
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub VieraSocket_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

End

Public Sub VieraSocket_Ready()

End

Public Function SendCommand(sAddress As String, sCmd As String) As Boolean

  If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " SendCommand Received: " & sCmd)

  sAddress = sAddress

  If sCmd = "Off" Then
    If SetCommand("Off", "Power", "Viera") Then
       If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Off command has been sent.")
       Return True
    Else
       If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Off command failed.")
       Return False
    Endif

  Else If sCmd = "On" Then
    Main.WriteLog(LogLabel & PluginFriendlyName & " On command is not supported.")
  Endif

End


Public Function SetCommand(sCmd As String, sValue As String, sAddress As String) As Boolean

  Dim sResponse As String

  If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " SetCommand Called with sCmd: " & sCmd & " sValue: " & sValue & " sAddress: " & sAddress)

  sAddress = sAddress

  Select sValue
    Case "Value1", "Power"
      If sCmd = "Off" Then 
        sResponse = ConnectandSend(BuildXML_NetCtrl("POWER"))
        If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Power off response: " & sResponse)
        Return True
      Endif
    Case "Value2"

    Case "Value3"

    Case "Value4"

  End Select

End

Public Sub GetCommand(sCmd As String, sAddress As String)

  sCmd = sCmd
  sAddress = sAddress

End

Private Sub BuildXML_RendCtrl(Method As String, Command As String, Optional Value As String) As String

  Dim sCallSoap, sMessage, sHead, sSize As String = ""

  If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Building with method: " & Method & " Command: " & Command & " Value: " & Value)

  If Not Value Then Value = ""

  sCallSoap = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n"
  sCallSoap &= "<s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n"
  sCallSoap &= "<s:Body>\r\n"
  sCallSoap &= "<u:" & Method & Command & " xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\">\r\n"
  sCallSoap &= "<InstanceID>0</InstanceID>\r\n"
  sCallSoap &= "<Channel>Master</Channel>\r\n"
  sCallSoap &= "<Desired" & Command & ">" & Value & "</Desired" & Command & ">\r\n"
  sCallSoap &= "</u:" & Method & Command & ">\r\n"
  sCallSoap &= "</s:Body>\r\n"
  sCallSoap &= "</s:Envelope>\r\n"

  sSize = CStr(Len(sCallSoap))

  sHead = "POST /dmr/control_0 HTTP/1.1\r\n"
  sHead &= "Host: " & $sTCPHost & ":55000\r\n"
  sHead &= "SOAPACTION: \"urn:schemas-upnp-org:service:RenderingControl:1#" & Method & Command & "\"\r\n"
  sHead &= "Content-Type: text/xml; charset=\"utf-8\"\r\n"
  sHead &= "Content-Length: " & sSize & "\r\n"
  sHead &= "\r\n"

  sMessage = sHead
  sMessage &= sCallSoap

  'If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Sending: " & sMessage)

  Return sMessage

End

Private Sub BuildXML_NetCtrl(Command As String) As String

  Dim sCallSoap, sMessage, sHead, sSize As String = ""

  If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Building XML SOAP (NetworkControl) for command: " & Command & " to host " & $sTCPHost & " on port " & $iTCPPort)

  sCallSoap = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n"
  sCallSoap &= "<s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n"
  sCallSoap &= "<s:Body>\r\n"
  sCallSoap &= "<u:X_SendKey xmlns:u=\"urn:panasonic-com:service:p00NetworkControl:1\">\r\n"
  sCallSoap &= "<X_KeyEvent>NRC_" & Command & "-ONOFF</X_KeyEvent>\r\n"
  sCallSoap &= "</u:X_SendKey>\r\n"
  sCallSoap &= "</s:Body>\r\n"
  sCallSoap &= "</s:Envelope>\r\n"

  sSize = CStr(Len(sCallSoap))

  sHead = "POST /nrc/control_0 HTTP/1.1\r\n"
  sHead &= "Host: " & $sTCPHost & ":" & $iTCPPort & "\r\n"
  sHead &= "SOAPACTION: \"urn:panasonic-com:service:p00NetworkControl:1#X_SendKey\"\r\n"
  sHead &= "Content-Type: text/xml; charset=\"utf-8\"\r\n"
  sHead &= "Content-Length: " & sSize & "\r\n"
  sHead &= "\r\n"

  sMessage = sHead
  sMessage &= sCallSoap

  If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " Command Built: " & sMessage)

  Return sMessage

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try hVieraSocket.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")


Finally
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & PluginFriendlyName & "ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub VieraSetValue(sItem As String, vValue As Variant)

  Dim sAddress As String = "Viera"
  Dim iDeviceId As Integer = 0
  Dim rResult As Result

  If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " Received Item: " & sItem & " Value: " & vValue)

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId, "Viera")
  If iDeviceId < 1 Then
    rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
    If rResult And If rResult.Available Then
      Main.WriteDebugLog(LogLabel & PluginFriendlyName & " Device Result Count: " & CStr(rResult.Count))
      iDeviceId = Devices.FindDevice(rResult, sAddress, InterfaceId, "Viera")
    Endif
  Endif

  If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " our Device ID: " & CStr(iDeviceId))

  Select sItem
    Case "Power"
      Main.SetGlobalVar("Viera_" & sItem, vValue)
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, vValue)
    Case "Mute"
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 2, vValue)
    Case "Volume"
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 3, vValue)
  End Select

End
