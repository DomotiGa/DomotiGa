' Gambas class file

' Description:
' CP2000.class
' Monitor P2000 feed for ambulance, firebrigade dispatches near your location.

' Development Status:
' Working

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Credits: Inspired by AZ_P2000.vb which was written by A.A. van Zoelen.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "P2000"
Public PluginFriendlyName As String = "P2000"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[P2000] "
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sRegios As String
Private $iMessages As Integer
Private $sDisciplines As String
Private $sFilter As String
Private $iGeoRange As Integer
Private $bFetchImage As Boolean
Private $bCreateMapLink As Boolean
Private $iPollTime As Integer
Private $bDebug As Boolean

Public hP2000 As HttpClient
Public tP2000 As New Timer
Public sBuffer As String

Public cTitle As New Collection
Public cLink As New Collection
Public cDescription As New Collection
Public cInfo As New Collection
Public cGeoLat As New Collection
Public cGeoLong As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sRegios = cPl.Settings["regios"]
  $iMessages = cPl.Settings["messages"]
  $sDisciplines = cPl.Settings["discipline"]
  $sFilter = cPl.Settings["filter"]
  $iGeoRange = cPl.Settings["georange"]
  $bFetchImage = cPl.Settings["fetchimage"]
  $bCreateMapLink = cPl.Settings["maplink"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  ' Initialize
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tP2000.Stop
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Stopped poll timer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  Try tP2000.Stop

  ' create poll timer
  tP2000 = New Timer As "tP2000"
  tP2000.Delay = $iPolltime * 1000
  tP2000.Start

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Started poll timer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tP2000_Timer()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating data.")
  FetchFeedData()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Tries to fetch p2000 data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub FetchFeedData()

  Dim sURL As String = "http://feeds.livep2000.nl"

  ' if regio(s) set, add parameter to url
  ' 0 = All
  ' 1 = Groningen
  ' 2 = Friesland
  ' 3 = Drenthe
  ' 4 = IJsselland
  ' 5 = Twente
  ' 6 = Noord en Oost Gelderland
  ' 7 = Gelderland Midden
  ' 8 = Gelderland Zuid
  ' 9 = Utrecht
  ' 10 = Noord Holland Noord
  ' 11 = Zaanstreek-Waterland
  ' 12 = Kennemerland
  ' 13 = Amsterdam-Amstelland
  ' 14 = Gooi en Vechtstreek
  ' 15 = Haaglanden
  ' 16 = Hollands Midden
  ' 17 = Rotterdam Rijnmond
  ' 18 = Zuid Holland Zuid
  ' 19 = Zeeland
  ' 20 = Midden- en West-Brabant
  ' 21 = Brabant Noord
  ' 22 = Brabant Zuid en Oost
  ' 23 = Limburg Noord
  ' 24 = Limburg Zuid
  ' 25 = Flevoland

  If Len($sRegios) And If $sRegios <> "0" Then sURL = sURL & "?r=" & $sRegios

  ' if discipline(s) set, add parameter to url
  ' 0 = All
  ' 1 = Brandweer
  ' 2 = Ambulance
  ' 3 = Politie
  ' 4 = KNRM

  If Len($sDisciplines) And If $sDisciplines <> "0" Then sURL = sURL & IIf($sRegios, "&", "?") & "d=" & $sDisciplines

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Fetching data with request '" & sURL & "'")

  hP2000 = New HttpClient As "hP2000"
  hP2000.URL = sURL
  hP2000.Async = True
  hP2000.TimeOut = 5
  hP2000.Get

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hP2000_Read()

  If Lof(Last) Then sBuffer &= Read #Last, Lof(Last)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hP2000_Finished()

  Select Last.Code
    Case 200
      ' too noisy
      ' If $bDebug Then Main.WriteDebugLog(LogLabel & "Received data '" & sBuffer & "'")
      ParseP2000Data(sBuffer)
    Case Else
      If $bDebug Then Main.WriteLog(LogLabel & "Unknown error occured while trying to fetch P2000 feed data! HTTP=" & Last.Code & ", Buffer=" & sBuffer)
  End Select

  Last.Close
  sBuffer = Null

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error raised
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hP2000_Error()

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Error fetching P2000 feed: " & Last.Status)
  Try Last.Close

End

Private Sub ParseP2000Data(sData As String)

  Dim sTitle, sMsg, sMap As String

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Processing XML data.")
  ParseP2000XML(sData)
  'sMsg = "<html>"
  For Each sTitle In cTitle
    sMsg &= sTitle & "\n"
    If $bCreateMapLink Then
      sMap = CreateImage(cGeoLat[cTitle.Key], cGeoLong[cTitle.Key])
      sMsg &= sMap & "\n"
    Endif
    sMsg &= "\n"
  Next
  'sMsg &= "</html>"

  If Main.GetGlobalVar("P2000_Message") <> sMsg Then 
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Current contents of P2000 globalvar is different, updating...")
    Main.SetGlobalVar("P2000_Message", sMsg)
  Else
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Current contents of P2000 globalvar is the same, skipping...")
  Endif

End

Private Sub CreateImage(fLat As String, fLon As String) As String

  Dim sLink As String

  fLat = Replace(fLat, ",", ".")
  fLon = Replace(fLon, ",", ".")

  'sLink = "<a href='http://maps.google.com/maps?q=" & fLat & "%" & fLon & "'></br>"
  sLink = "<a href='https://www.google.com/maps/preview#!q=" & fLat & "&" & fLon & "'></br>"
  sLink &= "<img src='http://cbk3.google.com/cbk?output=thumbnail&cb_client=maps_sv&thumb=2&ll=" & fLat & "," & fLon & "&w=300&h=118'>"
  Return sLink

End

Private Sub ParseP2000XML(sData As String)

  Dim XmlR As New XmlReader
  Dim iMsg, iCnt As Integer
  Dim sFieldName, sFieldPos, sTitle As String
  Dim sFieldHeader As New String[10]
  Dim iMtrsAway As Long

  ' empty collections first
  cTitle.Clear
  cLink.Clear
  cDescription.Clear
  cInfo.Clear
  cGeoLat.Clear
  cGeoLong.Clear

  XmlR.FromString(sData)

  ' loop through the buffer
  While Not XmlR.Eof
    If XmlR.State = XmlReaderNodeType.Element Then sFieldHeader[XmlR.Node.depth] = XmlR.Node.name

    If CStr(XmlR.Node.Name) = "#text" Or If CStr(XmlR.Node.Name) = "#cdata" Then
      ' concat all headers to store position
      For iCnt = 0 To XmlR.Node.Depth - 1
        sFieldPos &= sFieldHeader[iCnt] & "|"
      Next

      ' found an item field, parse data
      If sFieldPos = "rss|channel|item|" Then
        Select sFieldName
          Case "title"

            ' if max number of messages is reached bail out
            If iMsg = $iMessages Then
              XmlR.Close
              Break
            Endif
            ' workaround to remove garbage
            sTitle = Replace(XmlR.Node.value, "]]>", "")
            cTitle.Add(sTitle, iMsg)
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Title: " & sTitle)
          Case "link"
            cLink.Add(XmlR.Node.value, iMsg)
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Link: " & XmlR.Node.Value)
          Case "br"
            If XmlR.Node.Value <> "]]>" Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Info: " & XmlR.Node.Value)
              If cInfo.Exist(iMsg) Then
                cInfo[iMsg] &= XmlR.Node.Value
              Else
                cInfo.Add(XmlR.Node.value, iMsg)
              Endif
            Endif
          Case "geo:lat"
            cGeoLat.Add(XmlR.Node.value, iMsg)
            If $bDebug Then Main.WriteDebugLog(LogLabel & "GeoLat: " & XmlR.Node.Value)
          Case "geo:long"
            cGeoLong.Add(XmlR.Node.value, iMsg)
            If $bDebug Then Main.WriteDebugLog(LogLabel & "GeoLong: " & XmlR.Node.Value)

            ' if match text defined check if found in info text
            If Len($sFilter) And If Not InStr(cTitle[iMsg], $sFilter) Then
              If $bDebug Then Main.WriteDebugLog(LogLabel & "Match text '" & $sFilter & "' not found in '" & cTitle[iMsg] & "', skipping message.")
              RemoveCollection(iMsg)
              Continue
            Else
              ' if location is within specified range keep msg
              If $iGeoRange Then
                iMtrsAway = GetDistance(Main.iAstroLatitude, Main.iAstroLongitude, cGeoLat[iMsg], cGeoLong[iMsg])
                If $bDebug Then Main.WriteDebugLog(LogLabel & "Location is " & iMtrsAway & " meters away from home.")
                If iMtrsAway < $iGeoRange Then
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Which is inside range specified.")
                Else
                  If $bDebug Then Main.WriteDebugLog(LogLabel & "Which is outside range specified, skipping message.")
                  RemoveCollection(iMsg)
                  Continue
                Endif
              Endif
            Endif
            Inc iMsg
          Case "description"
            cDescription.Add(XmlR.Node.value, iMsg)
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Description: " & XmlR.Node.Value)
        End Select
      Endif
      sFieldPos = ""
    Else
      sFieldName = XmlR.Node.Name
    Endif
    XmlR.Read()
  Wend
  XmlR.Close

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: ParseXML '" & Error.Text & "' at '" & Error.Where & "'")

End

Private Function RemoveCollection(sKey As String)

  ' remove collection
  cTitle.Remove(sKey)
  cLink.Remove(sKey)
  cDescription.Remove(sKey)
  cInfo.Remove(sKey)
  cGeoLat.Remove(sKey)
  cGeoLong.Remove(sKey)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' calculate the distance
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Function GetDistance(fLat As String, fLon As String, fLatMsg As String, fLonMsg As String) As Long

  Dim theta As Float
  Dim dist As Float

  theta = Val(fLon) - Val(fLonMsg)
  dist = Sin(Rad(Val(fLat))) * Sin(Rad(Val(fLatMsg))) + Cos(Rad(Val(fLat))) * Cos(Rad(Val(fLatMsg))) * Cos(Rad(theta))
  dist = ACos(dist)
  dist = Deg(dist)
  dist = dist * 60 * 1.1515
  ' convert from miles to meters
  dist = (dist * 1.609344) * 1000
  Return CLong(dist)

End


