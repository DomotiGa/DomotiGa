' Gambas class file

' Description:
' CSmartVISUServer.class
' Built-in SmartVISU server support.

' Development Status:
' Just started, minimal tested, some SmartVISU options missing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Property Port As String
Property SmartVisuServerDebug As Boolean

Private iPort As String
Private bSmartVisuServerDebug As Boolean

Public hWebSocketServer As ServerSocket
Public client As CWebSocket

Private oClients As New CWebSocket[]
Private cMonitors As New Collection

Private hFetch As Process
Private cOutput As New Collection

Public Function Connect() As Boolean

  hWebSocketServer = New ServerSocket As "WebSocketServer"
  hWebSocketServer.Port = iPort
  hWebSocketServer.Listen(0)

  If hWebSocketServer.Status = Net.Active Then Return True

  Return False

End

Public Sub WebSocketServer_Connection(sRemoteHost As String)

  client = New CWebSocket(hWebSocketServer.Accept()) As "VisuClient"
  oClients.Add(client)
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Got a connection from client with IP address '") & sRemoteHost & "'")

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

Public Sub WebSocketServer_Error()

  ' handle error
  Select Case hWebSocketServer.Status
    Case Net.CannotCreateSocket
      Main.WriteDebugLog(("[SmartVISU] The system does not allow to create a socket."))
    Case Net.CannotBindSocket
      Main.WriteDebugLog(("[SmartVISU] Cannot bind socket."))
    Case Net.CannotListen
      Main.WriteDebugLog(("[SmartVISU] Cannot listen on port."))
  End Select

End

' shutdown our websocket server
Public Sub Disconnect()

  hWebSocketServer.Close()

End

Private Sub SendProtoVersion(iVersion As String, socks As Object)

  Dim cCmd As New Collection
  Dim sData As String

  ' create json data
  cCmd.Add("proto", "cmd")
  cCmd.Add(iVersion, "ver")
  sData = JSON.Encode(cCmd)
  If bSmartVisuServerDebug Then Main.WriteDebugLog("[SmartVISU] > " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
  If socks Then socks.Send(sData)

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

Private Sub SendItemUpdate(cUpdate As String[])

  Dim cCmd As New Collection
  Dim socks As CWebSocket
  Dim sData As String

  ' create json data
  cCmd.Add("item", "cmd")
  cCmd.Add(cUpdate, "items")
  sData = JSON.Encode(cCmd)

  ' send cmd to each connected client
  For Each socks In oClients
    If bSmartVisuServerDebug Then Main.WriteDebugLog("[SmartVISU] > " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
    If socks Then socks.Send(sData)
  Next

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

Public Sub UpdateItem(sItem As String, sValue As String)

  Dim aCmd As New String[]

  aCmd.Add(Replace(sItem, " ", "_"))
  aCmd.Add(sValue)
  SendItemUpdate(aCmd)
  aCmd.Clear

End

Private Sub SendSeriesUpdate(cUpdate As Collection)

  Dim socks As CWebSocket
  Dim sData As String

  ' create json data
  sData = JSON.Encode(cUpdate)

  ' send cmd to each connected client
  For Each socks In oClients
    If bSmartVisuServerDebug Then Main.WriteDebugLog("[SmartVISU] > " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
    If socks Then socks.Send(sData)
  Next

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

Public Sub UpdateSeries(sItem As String, cData As Collection)

  Dim cCmd As New Collection

  ' {"cmd":"series","sid":"bath_plot_value.avg.2h.0","series": [[t1, y1], [t2, y2]]}
  cCmd.Add("series", "cmd")
  cCmd.Add(Replace(sItem, " ", "_"), "sid")
  cCmd.Add(JSON.Encode(cData), "series")
  SendSeriesUpdate(cCmd)
  cCmd.Clear

End

Private Sub SendDialog(sHeader As String, sContent As String)

  Dim cCmd As New Collection
  Dim socks As CWebSocket
  Dim sData As String

  ' create json data
  cCmd.Add("dialog", "cmd")
  cCmd.Add(sHeader, "header")
  cCmd.Add(sContent, "content")
  sData = JSON.Encode(cCmd)

  ' send cmd to each connected client
  For Each socks In oClients
    If bSmartVisuServerDebug Then Main.WriteDebugLog("[SmartVISU] > " & socks.sock.RemoteHost & ":" & socks.sock.RemotePort & " " & sData)
    If socks Then socks.Send(sData)
  Next

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

Public Sub SendUpdateDevice(sDevice As String, sValue As String, sType As String)

  Dim sItem, sMonitorDevice As String = Replace(sDevice & "_" & sType, " ", "_")
  Dim aItems As Variant[]

  If cMonitors.Count = 0 Then
    If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] No clients connected, so aborting item updates."))
    Return ' no clients connected
  Endif

  ' check if it's in a monitors collection of a client
  For Each aItems In cMonitors
    For Each sItem In aItems
      If sMonitorDevice == sItem Then ' send update
        If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Monitored item found, updating: ") & sMonitorDevice)
        Select LCase(sType)
          Case "value", "value1", "setpoint"
            UpdateItem(sMonitorDevice, sValue)
          Case "value2"
            UpdateItem(sMonitorDevice, sValue)
          Case "value3"
            UpdateItem(sMonitorDevice, sValue)
          Case "value4"
            UpdateItem(sMonitorDevice, sValue)
          Case "motion"
            UpdateItem(sMonitorDevice, IIf(sValue == "Motion", 1, 0))
          Case "switch"
            If LCase(sValue) = "off" Then
              UpdateItem(sMonitorDevice, "0")
            Else If LCase(sValue) = "on" Or If InStr(LCase(sValue), "dim") Then
              UpdateItem(sMonitorDevice, "1")
            Endif
          Case "dimmer", "dim"
            Select LCase(sValue)
              Case "on"
                UpdateItem(sMonitorDevice, "100")
              Case "off"
                UpdateItem(sMonitorDevice, "0")
              Case Else
                UpdateItem(sMonitorDevice, Replace(sValue, "dim ", "", gb.IgnoreCase))
            End Select
        End Select
        Break
      Endif
    Next
  Next
  ' not found
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Device '") & sMonitorDevice & "' not found in monitored items.")

End

Public Sub VisuClient_Ready()

  SendProtoVersion("0.1", Last)

End

Public Sub VisuClient_Read(sMsg As String)

  Dim cData As New Collection
  Dim sItem, sDevice, sValue, sVersion, sCmd, sType, sMonitorDevice, sSeries, sStart As String
  Dim iUnder, iBrightness, iDim, iDeviceId As Integer
  Dim aMonitor As Variant[]
  ' Dim sdat1 As String[] = ["12,20"]
  ' Dim sdat2 As String[] = ["10,10"]

  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] < ") & sMsg)

  cData = JSON.Decode(sMsg)
  Select cData["cmd"]
    Case "item"
      sItem = cData["id"]
      sValue = cData["val"]
      iUnder = RInStr(sItem, "_")

      If iUnder Then
        sDevice = Replace(Mid(sItem, 1, iUnder - 1), "_", " ")
        sType = Mid(sItem, iUnder + 1, Len(sItem) - iUnder)
        sCmd = sValue
        Select LCase(sType)
          Case "switch"
            ' convert 0/1 to Off/On
            sCmd = IIf(sCmd = 0, "Off", "On")
            ' update other connected clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(sDevice, sCmd)
          Case "dimmer", "dim"
            ' convert 1-100
            Try iBrightness = Val(sCmd)
            If Not Error Then
              If iBrightness > 100 Then
                iDim = Round(0.39 * iBrightness)
                sCmd = "Dim " & iDim
              Else
                sCmd = "Dim " & sCmd
              Endif
            Else
              Return
            Endif
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(sDevice, sCmd)
          Case "thermostat", "setpoint"
            If sCmd = "NaN" Then Return
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(sDevice, sCmd)
          Case "value", "value1"
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.UpdateDevice(sDevice, sCmd, 1)
          Case "value2"
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.UpdateDevice(sDevice, sCmd, 2)
          Case "value3"
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.UpdateDevice(sDevice, sCmd, 3)
          Case "value4"
            ' update the other connected smartvisu clients
            UpdateItem(sItem, sValue)
            Devices.UpdateDevice(sDevice, sCmd, 4)
          Case "shutter"
             ' convert 0/1 to Stop/Start
            sCmd = IIf(sCmd = 0, "Up", "Down")
            ' update other connected clients
            UpdateItem(sItem, sValue)
            Devices.SetDevice(sDevice, sCmd)
          Case Else
            If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Unknown device type or value '") & sType & ("' specified after _ in device name!"))
        End Select
      Else
        If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] No Device type specified after _ in name!"))
      Endif
      If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Received Device Update: '") & sDevice & ("' Value: '") & sCmd & "'")

    Case "monitor"
      aMonitor = cData["items"]
      ' save monitor items
      cMonitors.Add(aMonitor, Last.sock.RemoteHost & ":" & Last.sock.RemotePort)
      If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Monitor Count: ") & aMonitor.Count)

      For Each sMonitorDevice In cData["items"]
        sItem = sMonitorDevice
        iUnder = RInStr(sItem, "_")

        If iUnder Then
          sDevice = Replace(Mid(sItem, 1, iUnder - 1), "_", " ")
          sType = Mid(sItem, iUnder + 1, Len(sItem) - iUnder)
          iDeviceId = Devices.FindIdForDevice(sDevice)
          If iDeviceId Then
            If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Monitor Item: ") & sDevice & (" Type: ") & sType)
            Select LCase(sType)
              Case "value", "value1", "setpoint"
                UpdateItem(sMonitorDevice, Devices.GetCurrentValueForDevice(iDeviceId, 1))
              Case "value2"
                UpdateItem(sMonitorDevice, Devices.GetCurrentValueForDevice(iDeviceId, 2))
              Case "value3"
                UpdateItem(sMonitorDevice, Devices.GetCurrentValueForDevice(iDeviceId, 3))
              Case "value4"
                UpdateItem(sMonitorDevice, Devices.GetCurrentValueForDevice(iDeviceId, 4))
              Case "motion"
                UpdateItem(sMonitorDevice, IIf(Devices.GetCurrentValueForDevice(iDeviceId, 1) == "Motion", 1, 0))
              Case "switch"
                sValue = LCase(Devices.GetCurrentValueForDevice(iDeviceId, 1))
                If sValue = "off" Then
                  UpdateItem(sMonitorDevice, "0")
                Else If sValue = "on" Or If InStr(sValue, "dim") Then
                  UpdateItem(sMonitorDevice, "1")
                Endif
              Case "dimmer", "dim"
                sValue = Devices.GetCurrentValueForDevice(iDeviceId, 1)
                Select LCase(sValue)
                  Case "on"
                    UpdateItem(sMonitorDevice, "100")
                  Case "off"
                    UpdateItem(sMonitorDevice, "0")
                  Case Else
                    UpdateItem(sMonitorDevice, Replace(sValue, "dim ", "", gb.IgnoreCase))
                End Select
            End Select
          Endif
        Endif
      Next
    Case "series"
      ' sItem = cData["item"]
      ' sSeries = cData["series"]
      ' sStart = cData["start"]
      ' Print sItem & "." & sSeries & "." & sStart
      ' GetPlotData(333, "average")
      ' UpdateSeries(sItem & "." & sSeries & "." & sStart & ".0", cPlot)
    Case "proto"
      sVersion = cData["ver"]
      If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Protocol Version: ") & sVersion)

    Case Else
      If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Unknown Cmd received: ") & cData["cmd"])
  End Select

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get rrdtool fetch data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub GetPlotData(iId As Integer, sType As String)

  Dim sRRD As String = Main.sBaseDir &/ "rrd" &/ iId & ".rrd"

  hFetch = Exec ["rrdtool", "fetch", sRRD, UCase(sType)] For Read As "Fetch"
  hFetch.Tag = iId
  cOutput.Add("", iId)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read rrdtool fetch output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Fetch_Read()

  Dim sBuffer As String
  Dim iId As Integer

  sBuffer = Read #Last, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and return value, 0 means ok, anything else is not reached
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Fetch_Kill()

  Dim iId, iRc As Integer
  Dim sLine, sOutput As String
  Dim aData As String[]
  Dim cData As New Collection

  iId = Last.Tag
  iRc = Last.Value

  If iId Then
    If iRc = 0 Then
      ' save output
      sOutput = cOutput[iId]
      cOutput.Remove(iId)

      For Each sLine In Split(sOutput, "\n")
        ' 1369479300: 2,2600000000e+01
        If InStr(sLine, "-nan") Then Continue

        aData = Scan(sLine, "*:*")
        If aData.Count = 2 Then
          Print aData[0]
          Print aData[1]
          cData.Add(Trim(aData[1]), aData[0])
        Endif

      Next
      UpdateSeries("bath_plot3.avg.1h.0", cData)
    Else
      Print (("[Fetch] Returned error!"))
    Endif
  Else
    Print (("[Fetch] Returned invalid device id!"))
  Endif

Catch
  Print (("ERROR: Parsing Fetch Result: ") & Error.Text & (" at ") & Error.Where)

End

Public Sub VisuClient_Closed()

  ' remove client's socket and monitors array
  cMonitors.Remove(Last.sock.Host & ":" & Last.sock.Port)
  oClients.Remove(oClients.Find(Last))
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Client with IP address '") & Last.Sock.Host & ("' closed connection."))

Catch
  If bSmartVisuServerDebug Then Main.WriteDebugLog(("[SmartVISU] Error: ") & Error.Text & (" at ") & Error.Where)

End

Private Function Port_Read() As String

  Return iPort

End

Private Sub Port_Write(Value As String)

  iPort = Value

End

Private Function SmartVisuServerDebug_Read() As Boolean

  Return bSmartVisuServerDebug

End

Private Sub SmartVisuServerDebug_Write(Value As Boolean)

  bSmartVisuServerDebug = Value

End
