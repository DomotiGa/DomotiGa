' Gambas class file

' Description:
' CPhilipsHue.class
' Support for Philips Hue Lights.

' Development Status:
' Working

' TODO: Add color
' TODO: Add groups ??
' TODO: Add event, blink

' DomotiGa - an open source home automation program.
' Copyright (C) DomotiGa Community, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "PhilipsHue"
Public PluginFriendlyName As String = "PhilipsHue"
Public PluginVersion As String = "0.01"
Public PluginAuthor As String = "Jesse Kerkhoven"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[PhilipsHue] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sUsername As String
Private $iPolltime As Integer
Private $bDebug As Boolean

Private tDiscoverHue As Timer
Private tCreateUsername As Timer
Private tUpdateLights As Timer

Private ipaddress As String
Private sApiUrl As String
Private sAuthorizedApiUrl As String
Private sApiVersion As String
Private sRequiredApiVersion As String = "1.3.0"  ' Version 1.3.0 or more

Private hGetApi As HttpClient
Private hPostApi As HttpClient
Private hPutApi As HttpClient

Private cJsonData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sUsername = cPl.Settings["username"]
  $iPolltime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]
  
  InterfaceId = Devices.FindInterface("Philips Hue Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif
  
  ' Start the discover timer after 5 seconds to allow for start up
  tDiscoverHue = New Timer As "DiscoverHue"
  tDiscoverHue.Delay = 5000
  tDiscoverHue.Start
  
  tUpdateLights = New Timer As "UpdateLights"
  tUpdateLights.Delay = $iPolltime * 1000
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()
  
  tUpdateLights.Stop
  IsRunning = False
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)
  
  Dim cContent As New Collection
  Dim aDim As String[]
  Dim iDim As Integer
  Dim sHdr As New String[]
  
  sCmd = UCase(sCmd)
  If InStr(sCmd, "ON") Then
    cContent.Add(True, "on")
  Else If InStr(sCmd, "OFF") Then
    cContent.Add(False, "on")
  Else If InStr(sCmd, "DIM ") Then
    aDim = Split(sCmd, " ")
    If aDim.Count = 2 Then
      iDim = Val(aDim[1])
      If iDim > 0 Then
        iDim = Format((255 * iDim / 100), "#")
        cContent.Add(True, "on")
        cContent.Add(iDim, "bri")
      Else
        cContent.Add(False, "on")
      Endif
    Endif
  Endif
  
  ' use httpclient to post json
  sHdr.Add("Expect:")
  hPutApi = New HttpClient As "hPutApi"
  hPutApi.URL = sAuthorizedApiUrl & "/lights/" & sAddress & "/state"
  hPutApi.Tag = getRandomId()
  hPutApi.TimeOut = 10
  hPutApi.Async = True
  hPutApi.Put("application/json", JSON.Encode(cContent), sHdr)
  
End

Public Sub DiscoverHue_Timer()
  
  tDiscoverHue.Stop
  
  If Not Plugin.IsPluginEnabled("DeviceDiscover", 1) Then
    IsRunning = False
    Main.WriteLog(LogLabel & PluginFriendlyName & " stopping, Device Discover plugin is not running.")
    Return
  Endif
  
  Try ipaddress = Plugin.GetPluginObject("DeviceDiscover", 1).Interface.FindDeviceWhereModelNameIsLike("Philips hue bridge")
  
  If Len(ipaddress) = 0 Then
    ' TODO: Limit amount of tries
    tDiscoverHue.Start
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " brige found with ipadress: " & ipaddress)
    sApiUrl = "http://" & ipaddress & "/api"
    
    ' Determine if username is correct and the api version 
    checkAuthenticationAndApi()
    
    ' Initialize
    IsRunning = True
    
  Endif
  
End

Public Sub CreateUsername_Timer()
  
  Dim cContent As Collection
  
  Main.WriteLog(LogLabel & PluginFriendlyName & " getting acces, please push the button on the bridge!")
  
  cContent = New Collection
  cContent.Add("DomotiGa", "devicetype")
  
  ' use httpclient to post json
  hPostApi = New HttpClient As "hPostApi"
  hPostApi.URL = sApiUrl
  hPostApi.Tag = getRandomId()
  hPostApi.TimeOut = 10
  hPostApi.Async = True
  hPostApi.Post("application/json", JSON.Encode(cContent))
  
End

Public Sub UpdateLights_Timer()
  
  hGetApi = New HttpClient As "hGetApi"
  hGetApi.URL = sAuthorizedApiUrl & "/lights"
  hGetApi.Tag = getRandomId()
  hGetApi.TimeOut = 10
  hGetApi.Async = True
  hGetApi.Get()
  
End

Private Function checkAuthenticationAndApi()
  
  If Len($sUsername) > 0 Then
    sAuthorizedApiUrl = sApiUrl & "/" & $sUsername
    
    hGetApi = New HttpClient As "hGetApi"
    hGetApi.URL = sAuthorizedApiUrl & "/config"
    hGetApi.Tag = getRandomId()
    hGetApi.TimeOut = 10
    hGetApi.Async = True
    hGetApi.Get()
  Else
    tCreateUsername = New Timer As "CreateUsername"
    tCreateUsername.Delay = 5000
    tCreateUsername.Start
  Endif
  
End

Private Function getRandomId() As Integer
  
  Dim iId As Integer
  
  Randomize
  Do
    iId = Int(Rnd(1, 32768))
  Loop Until Not cJsonData.Exist(iId)
  
  Return iId
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hGetApi_Read()
  
  Dim sData, sBuffer As String
  
  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    sData = cJsonData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cJsonData[Last.Tag] = sData
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse and save json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hGetApi_Finished()
  
  Dim sBuffer As String
  Dim iId As Integer
  Dim cData As Collection
  Dim cDataArray As Collection[]
  
  Select Last.Code
    Case 200
      iId = Last.Tag
      sBuffer = cJsonData[iId] 
      cJsonData.Remove(iId)
      
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received json: '" & sBuffer & "'")
      
      If Len(sBuffer) Then
        Try cDataArray = JSON.Decode(sBuffer)
        If Error 
          Try cData = JSON.Decode(sBuffer)
          If Error And If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " error by getting get json")
        Else
          cData = cDataArray[0]
        Endif
        parseGetJson(cData, Last.URL)
      Endif
    Case Else
      If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " " & Last.Code & " error occured while trying to get JSON data!")
  End Select
  Last.Close
  
End

Public Sub hGetApi_Error()
  
  If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " " & Last.Status)
  Last.Close
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostApi_Read()
  
  Dim sData, sBuffer As String
  
  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    sData = cJsonData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cJsonData[Last.Tag] = sData
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if json post ok
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostApi_Finished()
  
  Dim sBuffer As String
  Dim iId As Integer
  Dim cData As Collection
  Dim cDataArray As Collection[]
  
  Select Last.Code
    Case 200
      If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " JSON data posted!")
      iId = Last.Tag
      sBuffer = cJsonData[iId]
      cJsonData.Remove(iId)
      If Len(sBuffer) Then
        Try cDataArray = JSON.Decode(sBuffer)
        If Error 
          Try cData = JSON.Decode(sBuffer)
          If Error And If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " error by getting get json")
        Else
          cData = cDataArray[0]
        Endif
        parsePostedJson(cData, Last.URL)
      Endif
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " " & Last.Code & " error occured while trying to get JSON data!")
  End Select
  Last.Close
  
End

Public Sub hPostApi_Error()
  
  If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " error posting JSON data: " & Last.Status)
  
End

Public Sub hPutApi_Read()
  
  Dim sData, sBuffer As String
  
  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    sData = cJsonData[Last.Tag] & sBuffer
  Else
    sData = sBuffer
  Endif
  cJsonData[Last.Tag] = sData
  
End

Public Sub hPutApi_Finished()
  
  Dim sBuffer As String
  Dim iId As Integer
  Dim cData As Collection
  Dim cDataArray As Collection[]
  
  Select Last.Code
    Case 200
      iId = Last.Tag
      sBuffer = cJsonData[iId] 
      cJsonData.Remove(iId)
      If Len(sBuffer) Then
        Try cDataArray = JSON.Decode(sBuffer)
        If Error 
          Try cData = JSON.Decode(sBuffer)
          If Error And If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " error by getting put json")
        Else
          cData = cDataArray[0]
        Endif
        parsePutJson(cData, Last.URL)
      Endif
    Case Else
      If $bDebug Then Main.WriteLog(LogLabel & PluginFriendlyName & " " & Last.Code & " error occured while trying to put JSON data!")
  End Select
  Last.Close
  
End

Public Sub hPutApi_Error()
  
  If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " " & Last.Status)
  Last.Close
  
End

' ~~~~~~~~~~~~~~~~~~~~~~~~
' Parse data from bridge
' ~~~~~~~~~~~~~~~~~~~~~~~~

Private Function parseGetJson(cData As Collection, sUrl As String)
  
  ' handle errors from posted data
  If cData.Exist("error") Then
    If cData["error"].Exist("type") Then
      Select cData["error"]["type"]
        Case 1
          sAuthorizedApiUrl = Null
          IsRunning = False
          Main.WriteDebugLog(LogLabel & PluginFriendlyName & " unauthorized user")
        Case Else
          Main.WriteDebugLog(LogLabel & PluginFriendlyName & " json form post url(" & sUrl & ") errorcode: " & cData["error"]["type"])
      End Select
    Endif
  Endif
  
  Select Case Replace$(sUrl, sAuthorizedApiUrl, "")
    Case "/lights"
      proccessLightsInfo(cData)
    Case "/config"
      proccessConfig(cData)
    Case Else
      ' URL not found
  End Select
  
End

Private Function parsePostedJson(cData As Collection, sUrl As String)
  
  Dim rResult As Result
  
  ' Don't continue if data is completely empty
  If cData = Null Then Return
  
  ' handle errors from posted data
  If cData.Exist("error") Then
    If cData["error"].Exist("type") Then
      Select cData["error"]["type"]
        Case 101
          checkAuthenticationAndApi()
        Case Else
          Main.WriteDebugLog(LogLabel & PluginFriendlyName & " json form post url(" & sUrl & ") errorcode: " & cData["error"]["type"])
      End Select
    Endif
  Endif
  
  If cData.Exist("success") Then
    If cData["success"].Exist("username") Then
      tCreateUsername.Stop
      $sUsername = cData["success"]["username"]
      Try rResult = Main.hDB.Exec("UPDATE settings_philipshue SET username = &1 WHERE id = &2", $sUsername, Instance)
      If Error Then
        Main.WriteLog(LogLabel & PluginFriendlyName & " cannot save username")
        IsRunning = False
      Else
        Main.WriteLog(LogLabel & PluginFriendlyName & " created user!")
        checkAuthenticationAndApi()
      Endif
    Endif
  Endif
  
End

Private Function parsePutJson(cData As Collection, sUrl As String)
  
  ' handle errors from posted data
  If cData.Exist("error") Then
    If cData["error"].Exist("type") Then
      Select cData["error"]["type"]
        Case Else
          Main.WriteDebugLog(LogLabel & PluginFriendlyName & " json form post url(" & sUrl & ") errorcode: " & cData["error"]["type"])
      End Select
    Endif
  Endif
  
  If cData.Exist("success") Then
    ' Do nothing
  Endif
  
End

' ~~~~~~~~~~~~~~~~~~~~~~~~
' Proccess data from bridge
' ~~~~~~~~~~~~~~~~~~~~~~~~

Private Function proccessLightsInfo(cLights As Collection)
  
  Dim cLight As Collection
  Dim iDeviceId, iBri As Integer
  Dim sValue, sReachable As String
  
  For Each cLight In cLights
    iDeviceId = Devices.Find(Instance, cLights.Key, InterfaceId, cLight["modelid"], cLight["name"])
    If iDeviceId > 0 Then
      sReachable = IIf(cLight["state"]["reachable"], "Online", "Offline")
      If cLight["state"]["on"] Then
        '  0 is not off, 255 max
        iBri = cLight["state"]["bri"]
        svalue = "Dim " & Format((100 * iBri / 255), "#")
      Else
        sValue = "Off"
      Endif
      Devices.ValueUpdate(iDeviceId, 1, sValue)
      'Devices.ValueUpdate(iDeviceId, 2, "#ffffff")
      'Devices.ValueUpdate(iDeviceId, 3, sReachable)
    Endif
  Next
  
End

Private Function proccessConfig(cData As Collection)
  
  If cData.Exist("apiversion")
    sApiVersion = cData["apiversion"]
  Else 
    sApiVersion = "1.2.0" ' Included since 1.2.1 
  Endif
  
  If Val(Replace(sApiVersion, ".", "")) >= Val(Replace(sRequiredApiVersion, ".", "")) Then
    If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " required bridge version: " & sRequiredApiVersion & " currently using: " & sApiVersion)
    ' Config correct, start with updating lights
    tUpdateLights.Start
  Else
    Main.WriteLog(LogLabel & PluginFriendlyName & " required bridge version: " & sRequiredApiVersion & " currently using: " & sApiVersion & ", please upgrade your bridge.")
    StopPlugin()
  Endif
  
End

' ~~~~~~~~~~~~~~~~~~~~~~~~
' Internal info about all types of hue lights
' ~~~~~~~~~~~~~~~~~~~~~~~~

Private Function getDeviceInfo(sModelId As String) As JSONCollection
  
  Dim cInfo As New JSONCollection
  ' typeId As Integer of DomotiGa database
  ' productName As String
  ' deviceId As Integer, Type from hex
  '   0x0100 (256) Dimmable Light
  '   0x0200 (512) Color Light
  '   0x0210 (528) Extended Color Light
  ' colorGamut As String
  '   "" no
  '   A
  '   B
  ' friendlyName As String
  ' friendOfHue As Boolean
  
  Select sModelId
    Case "LCT001"
      cInfo.Add(373, "typeId")
      cInfo.Add("Hue bulb A19", "productName")
      cInfo.Add(528, "deviceId")
      cInfo.Add("B", "colorGamut")
      cInfo.Add("Hue Lamp", "friendlyName")
      cInfo.Add(True, "friendOfHue")
    ' Case "LCT002"
    ' Case "LCT003"
    ' Case "LST001"
    ' Case "LLC010"
    ' Case "LLC011"
    ' Case "LLC012"
    ' Case "LLC006"
    ' Case "LLC007"
    ' Case "LLC013"
    Case "LWB004"
      cInfo.Add(308, "typeId") 
      cInfo.Add("Hue A19 Lux", "productName")
      cInfo.Add(256, "deviceId")
      cInfo.Add("", "colorGamut")
      cInfo.Add("LUX Lamp", "friendlyName")
      cInfo.Add(True, "friendOfHue")
    ' Case "LLM001"
    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & PluginFriendlyName & " modelId not found: " & sModelId)
      cInfo.Add(0, "typeId")
      cInfo.Add("", "productName")
      cInfo.Add(0, "deviceId")
      cInfo.Add("", "colorGamut")
      cInfo.Add("", "friendlyName")
      cInfo.Add(False, "friendOfHue")
  End Select

  Return cInfo
End
