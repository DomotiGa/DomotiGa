' Gambas class file

' Description:
' CPhilipsHue.class
' Support for Philips Hue Lights.

' Development Status:
' Working

' TODO: Add color
' TODO: Add groups ??
' TODO: Add event, blink

' DomotiGa - an open source home automation program.
' Copyright (C) DomotiGa Community, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "PhilipsHue"
Public PluginFriendlyName As String = "Philips Hue"
Public PluginVersion As String = "0.01"
Public PluginAuthor As String = "Jesse Kerkhoven"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[PhilipsHue] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sUsername As String
Private $iPolltime As Integer
Private $bDebug As Boolean

Private tDiscoverHue As Timer
Private tCreateUsername As Timer
Private tUpdateLights As Timer

Private ipaddress As String
Private sApiUrl As String
Private sAuthorizedApiUrl As String
Private sApiVersion As String
Private sRequiredApiVersion As String = "1.3.0" ' Version 1.3.0 or more

Private hGetApi As HttpClient
Private hPostApi As HttpClient
Private hPutApi As HttpClient

Private cJsonData As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)
  
  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")
  
  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sUsername = cPl.Settings["username"]
  $iPolltime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]
  
  InterfaceId = Devices.FindInterface("Philips Hue Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    WriteLog("ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif
  
  ' Start the discover timer after 5 seconds to allow for start up
  tDiscoverHue = New Timer As "DiscoverHue"
  tDiscoverHue.Delay = 5000
  tDiscoverHue.Start
  
  tUpdateLights = New Timer As "UpdateLights"
  tUpdateLights.Delay = $iPolltime * 1000
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for EACH Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tDiscoverHue.Stop
  Try tUpdateLights.Stop
  Try tCreateUsername.Stop

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteLog(sLog As String)

  Main.WriteLog(LogLabel & sLog)
  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Easy helper for WriteDebugLog
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub WriteDebugLog(sLog As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & sLog)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' control devices
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)
  
  Dim cContent As New Collection
  Dim aDim As String[]
  Dim iDim As Integer
  Dim sHdr As New String[]

  sCmd = UCase(sCmd)
  If InStr(sCmd, "ON") Then
    cContent.Add(True, "on")
  Else If InStr(sCmd, "OFF") Then
    cContent.Add(False, "on")
  Else If InStr(sCmd, "DIM ") Then
    aDim = Split(sCmd, " ")
    If aDim.Count = 2 Then
      iDim = Val(aDim[1])
      If iDim > 0 Then
        iDim = Format((255 * iDim / 100), "#")
        cContent.Add(True, "on")
        cContent.Add(iDim, "bri")
      Else
        cContent.Add(False, "on")
      Endif
    Endif
  Endif

  ' use httpclient to post json
  sHdr.Add("Expect:")
  hPutApi = New HttpClient As "hPutApi"
  hPutApi.URL = sAuthorizedApiUrl & "/lights/" & sAddress & "/state"
  hPutApi.Tag = getRandomId()
  hPutApi.TimeOut = 10
  hPutApi.Async = True
  hPutApi.Put("application/json", JSON.Encode(cContent), sHdr)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DiscoverHue_Timer()

  tDiscoverHue.Stop

  If Not Plugin.IsPluginEnabled("DeviceDiscover", 1) Then
    IsRunning = False
    WriteLog("Stopping, Device Discover plugin is not running.")
    Return
  Endif

  Try ipaddress = Plugin.GetPluginObject("DeviceDiscover", 1).Interface.FindDeviceWhereModelNameIsLike("Philips hue bridge")

  If Len(ipaddress) = 0 Then
    ' TODO: Limit amount of tries
    tDiscoverHue.Start
  Else
    WriteLog(PluginFriendlyName & " brige found with ipadress: " & ipaddress)
    sApiUrl = "http://" & ipaddress & "/api"

    ' Determine if username is correct and the api version 
    checkAuthenticationAndApi()

    ' Initialize
    IsRunning = True

  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub CreateUsername_Timer()

  Dim cContent As Collection

  WriteLog("Getting acces, please push the button on the bridge!")

  cContent = New Collection
  cContent.Add("DomotiGa", "devicetype")

  ' use httpclient to post json
  hPostApi = New HttpClient As "hPostApi"
  hPostApi.URL = sApiUrl
  hPostApi.Tag = getRandomId()
  hPostApi.TimeOut = 10
  hPostApi.Async = True
  hPostApi.Post("application/json", JSON.Encode(cContent))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub UpdateLights_Timer()

  hGetApi = New HttpClient As "hGetApi"
  hGetApi.URL = sAuthorizedApiUrl & "/lights"
  hGetApi.Tag = getRandomId()
  hGetApi.TimeOut = 10
  hGetApi.Async = True
  hGetApi.Get()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub checkAuthenticationAndApi()

  If Len($sUsername) > 0 Then
    sAuthorizedApiUrl = sApiUrl & "/" & $sUsername

    hGetApi = New HttpClient As "hGetApi"
    hGetApi.URL = sAuthorizedApiUrl & "/config"
    hGetApi.Tag = getRandomId()
    hGetApi.TimeOut = 10
    hGetApi.Async = True
    hGetApi.Get()
  Else
    tCreateUsername = New Timer As "CreateUsername"
    tCreateUsername.Delay = 5000
    tCreateUsername.Start
  Endif
  
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub getRandomId() As Integer

  Dim iId As Integer

  Randomize
  Do
    iId = Int(Rnd(1, 32768))
  Loop Until Not cJsonData.Exist(iId)

  Return iId

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hGetApi_Read()

  Dim sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    cJsonData[Last.Tag] &= sBuffer
  Else
    cJsonData[Last.Tag] = sBuffer
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse and save json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hGetApi_Finished()

  Dim sBuffer As String
  Dim cDataArray As Collection[]
  Dim cData As Collection

  Select Last.Code
    Case 200
      sBuffer = cJsonData[Last.Tag] 
      cJsonData.Remove(Last.Tag)

      If $bDebug Then WriteDebugLog("Received GET JSON: '" & sBuffer & "'")

      If Len(sBuffer) Then
        Try cDataArray = JSON.Decode(sBuffer)

        If Error Then
          Try cData = JSON.Decode(sBuffer)
          If Error Then
            WriteLog("ERROR: Getting JSON data '" & sBuffer & "'")
            Return
          Endif
        Else
          cData = cDataArray[0]
        Endif

        parseGetJson(cData, Last.URL)
      Endif
    Case Else
      WriteLog("ERROR: GET=" & Last.Code & ", error occured while trying to GET JSON data!")
  End Select

  Try Last.Close

Catch
  WriteLog("ERROR: parsing data '" & sBuffer & "': '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hGetApi_Error()

  WriteLog("ERROR: GET " & Last.ErrorText & "(" & Last.Status & ")")
  Try Last.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get json data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostApi_Read()

  Dim sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    cJsonData[Last.Tag] &= sBuffer
  Else
    cJsonData[Last.Tag] = sBuffer
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' check if json post ok
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostApi_Finished()

  Dim sBuffer As String
  Dim cData As Collection
  Dim cDataArray As Collection[]

  Select Last.Code
    Case 200
      sBuffer = cJsonData[Last.Tag]
      cJsonData.Remove(Last.Tag)

      If $bDebug Then WriteDebugLog("Received POST JSON: '" & sBuffer & "'")

      If Len(sBuffer) Then

        Try cDataArray = JSON.Decode(sBuffer)
        If Error Then
          Try cData = JSON.Decode(sBuffer)
          If Error Then
            WriteLog("ERROR: Posting JSON data '" & sBuffer & "'")
            Return
          Endif
        Else
          cData = cDataArray[0]
        Endif

        parsePostedJson(cData, Last.URL)
      Endif
    Case Else
      WriteLog("ERROR: POST=" & Last.Code & ", error occured while trying to POST JSON data!")
  End Select

  Try Last.Close

Catch
  WriteLog("ERROR: parsing data '" & sBuffer & "': '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPostApi_Error()

  WriteLog("ERROR: POST " & Last.ErrorText & "(" & Last.Status & ")")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPutApi_Read()

  Dim sBuffer As String

  If Lof(Last) Then sBuffer = Read #Last, Lof(Last)
  If cJsonData[Last.Tag] Then
    cJsonData[Last.Tag] &= sBuffer
  Else
    cJsonData[Last.Tag] = sBuffer
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPutApi_Finished()

  Dim sBuffer As String
  Dim cDataArray As Collection[]
  Dim cData As Collection

  Select Last.Code
    Case 200
      sBuffer = cJsonData[Last.Tag] 
      cJsonData.Remove(Last.Tag)

      If $bDebug Then WriteDebugLog("Received PUT JSON: '" & sBuffer & "'")

      If Len(sBuffer) Then

        Try cDataArray = JSON.Decode(sBuffer)
        If Error Then
          Try cData = JSON.Decode(sBuffer)
          If Error Then
            WriteLog("ERROR: Putting JSON data '" & sBuffer & "'")
            Return
          Endif
        Else
          cData = cDataArray[0]
        Endif

        parsePutJson(cData, Last.URL)
      Endif
    Case Else
      WriteLog("ERROR: PUT=" & Last.Code & ", error occured while trying PUT JSON data!")
  End Select

  Try Last.Close

Catch
  WriteLog("ERROR: parsing data '" & sBuffer & "': '" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hPutApi_Error()

  WriteLog("ERROR: PUT " & Last.ErrorText & "(" & Last.Status & ")")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Parse data from bridge
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub parseGetJson(cData As Collection, sUrl As String)

  ' handle errors from posted data
  If cData.Exist("error") Then
    If cData["error"].Exist("type") Then
      Select cData["error"]["type"]
        Case 1
          sAuthorizedApiUrl = Null
          IsRunning = False
          WriteLog("ERROR: unauthorized user")
        Case Else
          WriteLog("ERROR: JSON form GET URL '" & sUrl & "', errorcode: " & cData["error"]["type"])
      End Select
    Endif
  Endif

  Select Case Replace$(sUrl, sAuthorizedApiUrl, "")
    Case "/lights"
      proccessLightsInfo(cData)
    Case "/config"
      proccessConfig(cData)
    Case Else
      ' URL not found
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub parsePostedJson(cData As Collection, sUrl As String)

  Dim rResult As Result

  ' Don't continue if data is completely empty
  If cData = Null Then Return

  ' handle errors from posted data
  If cData.Exist("error") Then
    If cData["error"].Exist("type") Then
      Select cData["error"]["type"]
        Case 101
          checkAuthenticationAndApi()
        Case Else
          WriteLog("ERROR: JSON form POST URL '" & sUrl & "', errorcode: " & cData["error"]["type"])
      End Select
    Endif
  Endif

  If cData.Exist("success") Then
    If cData["success"].Exist("username") Then
      tCreateUsername.Stop
      $sUsername = cData["success"]["username"]
      Try rResult = Main.hDB.Exec("UPDATE settings_philipshue SET username = &1 WHERE id = &2", $sUsername, Instance)
      If Error Then
        WriteLog("ERROR: cannot save username")
        IsRunning = False
      Else
        WriteLog("INFO: created user!")
        checkAuthenticationAndApi()
      Endif
    Endif
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub parsePutJson(cData As Collection, sUrl As String)

  ' handle errors from posted data
  If cData.Exist("error") Then
    If cData["error"].Exist("type") Then
      Select cData["error"]["type"]
        Case Else
          WriteLog("ERROR: JSON form PUT URL '" & sUrl & "', errorcode: " & cData["error"]["type"])
      End Select
    Endif
  Endif

  If cData.Exist("success") Then
    ' Do nothing
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Proccess data from bridge
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub proccessLightsInfo(cLights As Collection)

  Dim cLight As Collection
  Dim iDeviceId, iBri As Integer
  Dim sValue, sReachable As String

  For Each cLight In cLights
    iDeviceId = Devices.Find(Instance, cLights.Key, InterfaceId, cLight["modelid"], cLight["name"])
    If iDeviceId Then
      sReachable = IIf(cLight["state"]["reachable"], "Online", "Offline")
      If cLight["state"]["on"] Then
        '  0 is not off, 255 max
        If cLight["state"].Exist("bri") Then
          iBri = cLight["state"]["bri"]
          svalue = "Dim " & Format((100 * iBri / 255), "#")
        Else
          sValue = "On"
        Endif
      Else
        sValue = "Off"
      Endif

      Devices.ValueUpdate(iDeviceId, 1, sValue)
      'Devices.ValueUpdate(iDeviceId, 2, "#ffffff")
      'Devices.ValueUpdate(iDeviceId, 3, sReachable)
    Endif
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub proccessConfig(cData As Collection)

  If cData.Exist("apiversion") Then
    sApiVersion = cData["apiversion"]
  Else 
    sApiVersion = "1.2.0" ' Included since 1.2.1 
  Endif

  If Val(Replace(sApiVersion, ".", "")) >= Val(Replace(sRequiredApiVersion, ".", "")) Then
    If $bDebug Then WriteDebugLog("Required bridge version: " & sRequiredApiVersion & " currently using: " & sApiVersion)
    ' Config correct, start with updating lights
    tUpdateLights.Start
  Else
    WriteLog("Required bridge version: " & sRequiredApiVersion & " currently using: " & sApiVersion & ", please upgrade your bridge.")
    StopPlugin()
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Internal info about all types of hue lights - NOT USED
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'Private Sub getDeviceInfo(sModelId As String) As JSONCollection

'  Dim cInfo As New JSONCollection

  ' typeId As Integer of DomotiGa database
  ' productName As String
  ' deviceId As Integer, Type from hex
  '   0x0100 (256) Dimmable Light
  '   0x0200 (512) Color Light
  '   0x0210 (528) Extended Color Light
  ' colorGamut As String
  '   "" no
  '   A
  '   B
  ' friendlyName As String
  ' friendOfHue As Boolean

'  Select sModelId
'    Case "LCT001"
'      cInfo.Add(373, "typeId")
'      cInfo.Add("Hue bulb A19", "productName")
'      cInfo.Add(528, "deviceId")
'      cInfo.Add("B", "colorGamut")
'      cInfo.Add("Hue Lamp", "friendlyName")
'      cInfo.Add(True, "friendOfHue")
    ' Case "LCT002"
    ' Case "LCT003"
    ' Case "LST001"
    ' Case "LLC010"
    ' Case "LLC011"
    ' Case "LLC012"
    ' Case "LLC006"
    ' Case "LLC007"
    ' Case "LLC013"
'    Case "LWB004"
'      cInfo.Add(308, "typeId") 
'      cInfo.Add("Hue A19 Lux", "productName")
'      cInfo.Add(256, "deviceId")
'      cInfo.Add("", "colorGamut")
'      cInfo.Add("LUX Lamp", "friendlyName")
'      cInfo.Add(True, "friendOfHue")
    ' Case "LLM001"
'    Case "Plug 01"
'      cInfo.Add(0, "typeId") 
'      cInfo.Add("Osram Plug", "productName")
'      cInfo.Add(0, "deviceId")
'      cInfo.Add("", "colorGamut")
'      cInfo.Add("Osram Lamp", "friendlyName")
'      cInfo.Add(True, "friendOfHue")
'    Case Else
'      If $bDebug Then WriteDebugLog("Modelid not found: " & sModelId)
'      cInfo.Add(0, "typeId")
'      cInfo.Add("", "productName")
'      cInfo.Add(0, "deviceId")
'      cInfo.Add("", "colorGamut")
'      cInfo.Add("", "friendlyName")
'      cInfo.Add(False, "friendOfHue")
'  End Select

'  Return cInfo

'End
