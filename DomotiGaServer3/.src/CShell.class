' Gambas class file

' Description:
' Shell.class
' Support for getting shell script output in device values and calling scripts.

' Development Status:
' Finished

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Shell"
Public PluginFriendlyName As String = "Shell"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Shell] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $iPollTime As Integer
Private $bDebug As Boolean

Public tShell As Timer
Private hShell As Process
Private cOutput As New Collection
Private cProcess As New Collection

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = 1 ' Module can only have 1 instance

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Shell Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Initialize
  Run()

  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try tShell.Stop

  ' Kill any running processes
  ' The _Kill event will ignore them
  If cProcess.Count Then
    For Each hShell In cProcess
      Try hShell.Kill
    Next
    hShell = Null
  Endif

  IsRunning = False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Run()

  ' start poll timer for Shell
  tShell = New Timer As "tShell"
  tShell.Delay = $iPollTime * 1000 ' multiply for seconds
  tShell.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tShell_Timer()

  CheckShell()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' find all devices of type Shell and run command to get value(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub CheckShell()

  Dim rResult As Result

  ' get all devices with this devicetype
  rResult = Devices.FindDevicesForInterface(InterfaceId, Instance)
  If rResult And If rResult.Available Then
    For Each rResult
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Getting value(s) for device '" & rResult!name & "' with command '" & rResult!address & "'.")
      Try RunShellCommand(rResult!id, rResult!address)
      If Error Then Main.WriteDebugLog(LogLabel & "Error when trying to run '" & rResult!address & "' : '" & Error.Text & "' at '" & Error.Where & "'")
    Next
  Else
    Main.WriteLog(LogLabel & "No devices of type Shell found in device table!")
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' run command to get value(s)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub RunShellCommand(iId As Integer, sCmdArgs As String) As Boolean

  Dim CmdArgs As String[]

  If Not $bEnabled Then
    Main.WriteDebugLog(LogLabel & PluginFriendlyName & " is disabled")
    Return False
  Endif

  ' Split in command on spaces into the command and arguments
  CmdArgs = Split(sCmdArgs, " ")

  hShell = Exec CmdArgs For Read As "Shell" ' ["script.sh"] or ["script", "on", "17"] etc.
  hShell.Tag = iId
  cOutput.Add("", iId)
  cProcess.Add(hShell, iId)

  ' Set Process to null again, else Gambas can hang and/or cause 100%
  hShell = Null

  Return True

Catch
   Main.WriteDebugLog(LogLabel & "Error when trying to run '" & sCmdArgs & "' : " & Error.Text & ".")
   Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' called from devices module to send a command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim iDeviceId As Integer

  iDeviceId = Devices.Find(Instance, sAddress, InterfaceId)

  RunShellCommand(iDeviceId, sAddress & " " & sCmd)
End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read command output and store it in collection
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Shell_Read()

  Dim sBuffer As String
  Dim iId As Integer

  sBuffer = Read #Last, -256
  iId = Last.Tag

  If cOutput.Exist(iId) Then cOutput[iId] &= sBuffer

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' get id and returned value(s) and store them
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Shell_Kill()

  Dim iDeviceId, iRc, iCnt As Integer
  Dim sLines As String[]
  Dim sOutput, sValue, sDebugVals As String

  iDeviceId = Last.Tag
  iRc = Last.Value

  If Last.State <> Process.Stopped Then
    If cOutput.Exist(iDeviceId) Then cOutput.Remove(iDeviceId)
    If cProcess.Exist(iDeviceId) Then cProcess.Remove(iDeviceId)
    Main.WriteDebugLog(LogLabel & "Command for device with id '" & iDeviceId & "' crashed or received a signal!")
    Return
  Endif

  If iDeviceId Then
    ' save shell output
    sOutput = cOutput[iDeviceId]
    cOutput.Remove(iDeviceId)
    cProcess.Remove(iDeviceId)

    Select iRC
      Case 0
        sLines = Split(sOutput, "\n")

        If sLines.Count == 0 Or If sLines[0] == "" Then
          If $bDebug Then Main.WriteDebugLog(LogLabel & "No output from device with id '" & iDeviceId & "'")
        Else
          ' Remove last line if it is empty
          If sLines[sLines.Count - 1] == "" Then
            sLines.Remove(sLines.Count - 1)
          Endif

          iCnt = 1
          For Each sValue In sLines
            Devices.ValueUpdate(iDeviceId, iCnt, sValue)
            If iCnt > 1 Then
              sDebugVals &= ", "
            Endif
            sDebugVals &= "value" & Str(iCnt) & " = '" & sValue & "'"
            Inc iCnt
          Next
          ' debug output
          If $bDebug Then
            Main.WriteDebugLog(LogLabel & "< '" & Replace(sOutput, "\n", "\\n") & "'")
            Main.WriteDebugLog(LogLabel & "Device with id '" & iDeviceId & "' returned " & sDebugVals)
          Endif
        Endif
        ' find and update device
        Devices.CheckFirstSeen(iDeviceId)
      Case 127
        Main.WriteDebugLog(LogLabel & "Command of device with id '" & iDeviceId & "' not found!")
      Case Else
        Main.WriteDebugLog(LogLabel & "Device with id '" & iDeviceId & "' returned unknown shell error '" & iRc & "'")
      End Select
  Else
    Main.WriteDebugLog(LogLabel & "Returned invalid device id!")
  Endif

Catch
  Main.WriteDebugLog(LogLabel & "ERROR: Parsing Shell Result: '" & Error.Text & "' at '" & Error.Where & "'")

End

