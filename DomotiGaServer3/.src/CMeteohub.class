' Gambas class file

' Description:
' Meteohub.class
' Provide support for fetching logged data of a Meteohub.

' Development Status:
' Just started to build this one.

' Links:
' http://wiki.meteohub.de
' http://www.meteohub.de/files/HTTP-Data-Logging-Protocol-v1.4.pdf

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Meteohub"
Public PluginFriendlyName As String = "Meteohub"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Meteohub] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sFetchURL As String
Private $iPolltime As Integer
Private $bDebug As Boolean

Private hMeteohub As New HttpClient
Private tMeteohub As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sFetchURL = cPl.Settings["fetchurl"]
  $iPollTime = cPl.Settings["polltime"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Meteohub Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  Connect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' start the poll timer
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hMeteohub.Close

  ' start poll timer for Meteohub
  tMeteohub = New Timer As "tMeteohub"
  tMeteohub.Delay = $iPolltime * 1000 ' multiply for seconds
  tMeteohub.Start

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' stop timer and close handle
  Try tMeteohub.Stop
  Try hMeteohub.Close
  Main.WriteLog(LogLabel & " closed.")

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: '" & Error.Text & "' at '" & Error.Where & "'")
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tMeteohub_Timer()

  hMeteohub = New HttpClient As "hMeteohub"
  hMeteohub.URL = $sFetchURL
  hMeteohub.TimeOut = 8
  hMeteohub.Async = True
  hMeteohub.Get()
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Fetching '" & $sFetchUrl & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' meteohub data fetched
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub hMeteohub_Finished()

  Dim sBuffer As String

  Select hMeteohub.Code
    Case 200
      If Lof(hMeteohub) Then sBuffer = Read #hMeteohub, Lof(hMeteohub)
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Received '" & sBuffer & "'")
      ParseData(sBuffer)
    Case Else
      Main.WriteDebugLog(LogLabel & "Unknown error occured while trying to get Meteohub data!")
  End Select
  Try hMeteohub.Close

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse raw data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseData(sData As String)

  Dim sLine, sSensor, sValues, sForecast As String
  Dim aLines, aValues, aEachValue As String[]
  Dim aForecast As String[] = ["Rainy", "Cloudy", "Some Clouds", "Sunny", "Snowy", "Clouds at Night", "Clear Night"]
  Dim iDeviceId As Integer

  ' 20121108170502 rain0 0.0 329.7 0.0
  ' 20121108170502 th0 10.5 94 9.6
  ' 20121108170502 thb0 19.6 66 13.1 1015.5 1015.5 -1
  ' 20121108170502 wind0 135 2.0 0.3 9.8

  ' split per line
  aLines = Split(sData, "\n")
  For Each sLine In aLines
    ' parse each line
    aValues = Scan(sLine, "* * *")

    If aValues.Count = 3 Then
      sSensor = aValues[1]
      sValues = aValues[2]
        If Left(sSensor, 3) = "thb" Then ' thb0 - thb19
          aEachValue = Scan(sValues, "* * * * * *")
          If aEachValue.Count = 6 Then
            If aEachValue[5] = "-1" Then ' not available
              sForecast = ""
            Else
              sForecast = aForecast[Val(aEachValue[5])]
            Endif
            iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, UCase(Left(sSensor, 3)))
            If iDeviceId Then
              Devices.ValueUpdate(iDeviceId, 1, aEachValue[0])
              Devices.ValueUpdate(iDeviceId, 2, aEachValue[1])
              Devices.ValueUpdate(iDeviceId, 3, aEachValue[3])
              Devices.ValueUpdate(iDeviceId, 4, sForecast)
            Endif
          Endif
        Else If Left(sSensor, 2) = "th" Then ' th0 - th39
          aEachValue = Scan(sValues, "* * *")
          If aEachValue.Count = 3 Then
            iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, UCase(Left(sSensor, 2)))
            If iDeviceId Then
              Devices.ValueUpdate(iDeviceId, 1, aEachValue[0])
              Devices.ValueUpdate(iDeviceId, 2, aEachValue[1])
              Devices.ValueUpdate(iDeviceId, 3, aEachValue[2])
            Endif
          Endif
        Else If Left(sSensor, 1) = "t" Then ' t0 - t39
          iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, Left(sSensor, 1))
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValues)
        Else If Left(sSensor, 4) = "wind" Then ' wind0 - wind19
          aEachValue = Scan(sValues, "* * * *")
          If aEachValue.Count = 4 Then
            iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, UCase(Left(sSensor, 4)))
            If iDeviceId Then
              Devices.ValueUpdate(iDeviceId, 1, aEachValue[0])
              Devices.ValueUpdate(iDeviceId, 2, aEachValue[1])
              Devices.ValueUpdate(iDeviceId, 3, aEachValue[2])
              Devices.ValueUpdate(iDeviceId, 4, aEachValue[3])
            Endif
          Endif
        Else If Left(sSensor, 4) = "rain" Then ' rain0 - rain19
          aEachValue = Scan(sValues, "* * *")
          If aEachValue.Count = 3 Then
            iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, UCase(Left(sSensor, 4)))
            If iDeviceId Then
              Devices.ValueUpdate(iDeviceId, 1, aEachValue[0])
              Devices.ValueUpdate(iDeviceId, 2, aEachValue[1])
              Devices.ValueUpdate(iDeviceId, 3, aEachValue[2])
            Endif
          Endif
        Else If Left(sSensor, 2) = "uv" Then ' uv0 - uv19
          iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, UCase(Left(sSensor, 2)))
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValues)
        Else If Left(sSensor, 3) = "sol" Then ' sol0 - sol19
          iDeviceId = Devices.Find(Instance, sSensor, InterfaceId, UCase(Left(sSensor, 3)))
          If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, sValues)
        Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Data from unsupported device type '" & sSensor & "' received.")
        Endif
    Endif
  Next

Catch
  Main.WriteDebugLog(LogLabel & "Error parsing Meteohub data " & ERROR.Text & " at " & ERROR.Where)

End

Public Sub hMeteohub_Error()

  Main.WriteDebugLog(LogLabel & "ERROR: fetching meteohub data: " & Last.Status)
  Try hMeteohub.Close

End

