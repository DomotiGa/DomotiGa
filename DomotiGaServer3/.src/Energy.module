' Gambas module file

' Description:
' Energy.module
' Routines for logging energy usage.

' TO DO: the meter to usage table mapping should have been defined in the database
' TO DO: only one meter per usage type at this moment; to be extended

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' read values from rfxmeter and pulse devices and write values to *_usage tables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub Log()

  Dim rDevice, rCounter, rDeviceType, rStore As Result
  Dim iMeter, iType As Integer
  Dim iUsage, iNewCounter, iPrevCounter, iValue As Float
  Dim aTypes As String[] = ["P1 Meter Power Usage", "P1 Meter Gas Usage", "P1 Meter Water Usage", "P1 Meter Power Exported", "RFXPwr Power", "RFXPulse Gas", "RFXPulse Water", "RFXPulse Power"]
  Dim sType, sTable As String
  Dim cTableUsed As New Collection ' just to check multiple device on one usage logging entry

  ' step through all usage related device types
  For Each sType In aTypes
    ' find devicetype id's
    Try rDeviceType = Main.hDB.Exec("SELECT id FROM devicetypes WHERE name = &1 ", sType)
    If Error Then
      Main.WriteDebugLog("[Energy] Devicetype '" & sType & ("' not found in database!"))
      Continue
    Endif

    If rDeviceType.Available Then
      If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] Looking for device(s) of type '") & sType & ("' with id '") & iType & "'.")
      iType = rDeviceType!id
      ' find device with this devicetype
      If sType = "P1 Meter Power Usage" Or If sType = "P1 Meter Power Exported" ' add the low and high tarif from the smart meter
        rDevice = Main.hDB.Exec("SELECT devices.id AS id , SUM(device_values.value) AS value, devices.name AS name FROM devices LEFT JOIN device_values ON devices.id = device_values.device_id WHERE devices.devicetype_id = &1 AND devices.enabled is TRUE AND (device_values.valuenum = 2 OR device_values.valuenum = 3)", iType)
      Else ' just get single value
        rDevice = Main.hDB.Exec("SELECT devices.id AS id , device_values.value AS value , devices.name AS name FROM devices LEFT JOIN device_values ON devices.id = device_values.device_id WHERE devicetype_id = &1 AND enabled is TRUE AND device_values.valuenum = 1", iType)
      Endif

      ' didn't found one, continue to next
      If Not rDevice.Available Then
        If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] No device(s) found with that devicetype."))
        Continue
      Endif

      ' found one device get it's value
      If rDevice.Count = 1 Then

        ' Workaround a bug in Gambas
        If rDevice!id = Null Then Continue

        iMeter = rDevice!id
        Try iNewCounter = CFloat(rDevice!value)
        If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] Found device called '" & rDevice!name & "' with value ") & iNewCounter)

        ' get table name
        Select sType
          Case "RFXPulse Power", "RFXPwr Power", "P1 Meter Power Usage"
            sTable = "power_usage"
            If Not IsNull(cTableUsed[sTable]) Then Error.Raise("More as one device for power usage defined!")
            cTableUsed[sTable] = True
          Case "RFXPulse Gas", "P1 Meter Gas Usage"
            sTable = "gas_usage"
            If Not IsNull(cTableUsed[sTable]) Then Error.Raise("More as one device for gas usage defined!")
            cTableUsed[sTable] = True
          Case "RFXPulse Water", "P1 Meter Water Usage"
            sTable = "water_usage"
            If Not IsNull(cTableUsed[sTable]) Then Error.Raise("More as one device for water usage defined!")
            cTableUsed[sTable] = True
          Case "P1 Meter Power Exported"
            sTable = "power_exported"
            If Not IsNull(cTableUsed[sTable]) Then Error.Raise("More as one device for exported power usage defined!")
            cTableUsed[sTable] = True
          Default
            Error.Raise(("[Energy] Meter usage logging called with unknown devicetype '") & sType & "'")
            Continue
        End Select

        ' get previous counter value from database
        rCounter = Main.hDB.Exec(Subst("SELECT id, counter FROM &1 ORDER BY stamp DESC LIMIT 1", sTable))
        If rCounter.Available Then
          If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] Fetched last stored usage from table '") & sTable & "'")
          iPrevCounter = rCounter!counter
          iUsage = iNewCounter - iPrevCounter
        Else
          iUsage = 0
          iValue = 0
        Endif

        ' try to save some records by deleting zero usage ones
        If iUsage = 0 Then
          Try Main.hDB.Exec(Subst("DELETE FROM &1 WHERE id = &2", sTable, rCounter!id))
        Endif

        ' calculate usage
        Select sType
          Case "RFXPulse Power", "RFXPwr Power"
            iValue = iUsage * 10 ' every pulse is 0.1 watt
          Case "P1 Meter Power Usage", "P1 Meter Power Exported", "P1 Meter Power Exported"
            iValue = iUsage ' 1 pulse = 1 kwh
          Case "RFXPulse Gas"
            sTable = "gas_usage"
            iValue = iUsage / 100 ' every pulse is 0.01 m3
          Case "P1 Meter Gas Usage"
            sTable = "gas_usage"
            iValue = iUsage ' needs work
          Case "RFXPulse Water"
            sTable = "water_usage"
            iValue = iUsage / 2 ' every pulse is 0.5 liter
          Case "P1 Meter Water Usage"
            sTable = "water_usage"
            iValue = iUsage 'needs work
          Default
            Error.Raise(("[Energy] Meter usage logging called with unknown devicetype '") & sType & "'")
            Continue
        End Select

        ' add new value to usage table
        Main.hDB.Begin()
        rStore = Main.hDB.Create(sTable)
        rStore!consumption = iUsage
        rStore!stamp = Now()
        rStore!counter = iNewCounter
        rStore.Update()
        Main.hDB.Commit()

        ' update value2 field of device with energy usage for RFXmeters
        If InStr(sType, "RFX")
          Devices.ValueUpdate(iMeter, 2, CStr(iValue))
          If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] Updated RFXMeter's Value 2 of device '") & rDevice!name & "' with '" & CStr(iValue) & "'")
        Else
          If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] No RFXMeter so not updating Value2 of device '") & rDevice!name & "'")
        Endif

      Else
        If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] More than one device with devicetype '") & sType & ("' found, skipping."))
        Continue
      Endif
    Endif
  Next

Catch
  If Main.bDebugEnergy Then Main.WriteDebugLog(("[Energy] Error '") & ERROR.Text & ("' at '") & ERROR.Where)

End
