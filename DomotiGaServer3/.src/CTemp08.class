' Gambas class file

' Description:
' CTemp08.class
' Support for Midon's TEMP08 1-wire interface.

' Development Status:
' Working, but only temp sensors implemented tested yet.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "Temp08"
Public PluginFriendlyName As String = "Midon Temp08"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Ron Klinkien"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[Temp08] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sSerPort As String
Private $sBaud As String
Private $bDebug As Boolean

Public hTemp08 As New SerialPort
Public tTemp08 As New Timer
Public tTemp08Busy As Timer

Public sBuffer As String
Private cQueue As New Collection  ' command buffer
Private bTemp08Busy As Boolean    ' waiting for command to finish

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory subroutine for each Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sSerPort = cPl.Settings["serialport"]
  $sBaud = cPl.Settings["baudrate"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("Midon TEMP08")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  ConnectSerial()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ConnectSerial()

  ' try to close the port
  Try hTemp08.Close

  ' get a new one
  hTemp08 = New Serialport As "Temp08"

  With hTemp08
    .PortName = $sSerPort
    .Speed = $sBaud
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .Open()
  End With

  ' start poll timer for Temp08 status LED
  tTemp08 = New Timer As "tTemp08LED"
  tTemp08.Delay = 250
  tTemp08.Stop

  ' define timer for port busy
  tTemp08Busy = New Timer As "tTemp08Busy"
  tTemp08Busy.Stop

  ' Write to main logfile we connected successfully
  Main.WriteLog(LogLabel & PluginFriendlyName & " serial interface connected to port " & $sSerPort)
  IsRunning = True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " serial interface FAILED to connect to port " & $sSerPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

End

Public Sub Temp08_Read()

  Dim sData As String

  Try sData = Read #hTemp08, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from serial port! -> " & Error.Text)
  If sData = Chr(10) Then ' buffer until newline then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub ParseLine(sStr As String)

  Dim iDeviceId As Integer
  Dim aScan As String[]

  Main.ControlLed("OneWire", "On")
  If Main.bServer Then tTemp08.Start

  ' example output
  ' SUN 00:36:20
  ' Reading Sensors...
  ' Voltage #01[4 D0000004FC78A26] = 00.32 V 04.98 V
  ' Temp #01[4D0000004FC78A26]=23.75C
  ' Temp #02[150008013A024910]=22.43C
  ' Temp #03[7A0008014A6BC310]=22.68C

  If $bDebug Then Main.WriteDebugLog(LogLabel & "< " & sStr)

  ' Temp08 temp sensor support
  If Mid$(sStr, 1, 4) = "Temp" Then
    aScan = Scan(sStr, "*[[]*]=*")
    If aScan.Count = 3 Then
      iDeviceId = Devices.Find(Instance, aScan[1], InterfaceId, "DS18B20")
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, 1, LTrim(Left(aScan[2], -2)), Devices.ValueType_Temperature)
    Endif
  Endif
  ' put support for other sensortypes here

End

Public Sub tTemp08LED_Timer()

  Main.ControlLed("OneWire", "Off")
  tTemp08.Stop

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub Disconnect()

  ' try to close the connection
  Try tTemp08.Stop
  Try tTemp08Busy.Stop
  Try hTemp08.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " Port closed.")

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send a command
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sCommand As String

  Select UCase(sCmd)
    Case "ON", "OFF"
      If sAddress == "all" Then
        sCommand = "rlya " & LCase(sCmd)
      Else
        sCommand = "rly " & Format(sAddress, "0#") & " " & LCase(sCmd)
      Endif
    Case Else
      Main.WriteDebugLog(LogLabel & "Invalid command '" & sCmd & "'")
      Return
  End Select
  QueueCommand(sCommand)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' add command to queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub QueueCommand(sCmd As String)

  ' add command to queue
  cQueue.Add(sCmd, Rnd)

  ' if interface is not busy process it
  If bTemp08Busy = False Then DoQueue()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' process items in queue
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub DoQueue()

  Dim sCmd As String

  For Each sCmd In cQueue
    WriteCommand(sCmd, cQueue.Key)
    Break ' only do first one
  Next

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send cmd to interface
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub WriteCommand(sCmd As String, sKey As String)

  Main.ControlLed("OneWire", "On")
  If Main.bServer Then tTemp08.Start

  If $bDebug Then Main.WriteDebugLog(LogLabel & "> " & sCmd)
  Print #hTemp08, sCmd

  ' remove sent command from queue
  cQueue.Remove(sKey)

  tTemp08Busy.Delay = 150
  tTemp08Busy.Start
  If bTemp08Busy = False Then bTemp08Busy = True

Catch
  Main.WriteDebugLog(LogLabel & "'" & Error.Text & "' at '" & Error.Where & "'")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' controller busy reset
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tTemp08Busy_Timer()

  bTemp08Busy = False
  tTemp08Busy.Stop

  If cQueue.Count Then ' if there are more commands left in queue, send next one
    If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending next command from Queue (count = " & cQueue.Count & ")")
    DoQueue()
  Endif

End
