' Gambas class file

' Description:
' FritzBox.class
' Provide support for Fritz!Box phonecall monitoring. (via call log port)

' Development Status:
' Just started to build this one.
' Incoming/outgoing call logging implemented.
' Tested with a Fritz!Box 7170 Annex A running Firmware upto 58.04.76

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' Read file called COPYING for license details.

Property TCPHost As String
Property FritzBoxDebug As Boolean

Private sTCPHost As String
Private bFritzBoxDebug As Boolean

Private hFritzBox As New Socket
Private sBuffer As String
Public tFritzBoxConnect As Timer
Private iConnectRetry As Integer = 0 ' retries
Private iConnectDelay As Integer = 60000 ' 1 minute

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the connection
  Try hFritzBox.Close

  ' get a new one
  hFritzBox = New Socket As "FritzBox"
  hFritzBox.Connect(sTCPHost, 1012)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Fritz!Box Error: ") & ERROR.Text)
  Return False

End

Public Sub FritzBox_Ready()

  Main.WriteLog(("Fritz!Box TCP socket connected."))

  ' define timer for FritzBox reconnect
  tFritzBoxConnect = New Timer As "FritzBoxConnect"
  tFritzBoxConnect.Delay = iConnectRetry
  tFritzBoxConnect.Stop

End

Public Sub FritzBox_Closed()

  Main.WriteLog(("ERROR: Fritz!Box TCP socket connection is lost."))
  If iConnectRetry < 6 Then
    Main.WriteDebugLog(("[Fritz!Box] Retry to connect" & IIf(iConnectRetry, " in " & (iConnectDelay / 60) & " minutes.", ".")))
    tFritzBoxConnect.Start
  Endif

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' reconnect routine
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tFritzBoxConnect_Timer()

  If Not Connect() Then
    Inc iConnectRetry
    iConnectDelay *= iConnectRetry
    tFritzBoxConnect.Delay = iConnectDelay
  Endif

End

Public Sub FritzBox_Found()

  Main.WriteLog(("Fritz!Box IP address resolved."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try tFritzBoxConnect.Stop
  Try hFritzBox.Close
  Main.WriteLog(("Fritz!Box TCP socket port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Fritz!Box Error: ") & ERROR.Text)
  Return False

End

Public Sub FritzBox_Read()

  Dim sData As String

  sData = Read #hFritzBox, 1
  If sData = Chr(10) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(Left(sBuffer, Len(sBuffer) - 1))
    sBuffer = Null
  Else
    sBuffer &= sData
  End If

End

Private Sub ParseLine(sStr As String)

  Dim aScan As String[]
  Dim rResult As Result
  Dim iId As Integer
  Dim sName As String

  If Main.bFritzBoxDebug Then Main.WriteDebugLog("[Fritz!Box] " & sStr)
  ' 20.01.09 20:29:10;RING;0;0XXXXXXXXX;0XXXXXXXXX;POTS;
  If InStr(sStr, ";RING;") Then
    aScan = Scan(sStr, "*;RING;*;*;*;*;")
    If aScan.Count = 5 Then
      sName = CallerID.ReturnCallerID(aScan[2])
      Main.WriteLog("Incoming phone call from " & IIf(aScan[2], aScan[2] & " (" & sName & ")", "0000000000") & ".")
      Main.SetGlobalVar("PhoneCall_Incoming", aScan[2] & " (" & sName & ") at " & Format(Now(), "hh:nn:ss dd-mm-yyyy"))
      If Main.bFritzBoxDebug Then Main.WriteDebugLog(("[Fritz!Box] Incoming call [id=") & aScan[1] & ("] from ") & aScan[2] & (" on line ") & aScan[3] & " (" & aScan[4] & ")")
      ' write data to cdr table
      Main.hDB.Begin()
      rResult = Main.hDB.Create("cdr")
      rResult!calldate = Now()
      rResult!uniqueid = aScan[1]
      rResult!clid = IIf(aScan[2], aScan[2], "0000000000")
      rResult!src = IIf(aScan[2], aScan[2], "0000000000")
      rResult!dcontext = "incoming"
      rResult!channel = aScan[3]
      rResult!disposition = "NO ANSWER"
      rResult.Update()
      Main.hDB.Commit()
      Main.RefreshPhoneCallList()
    Else
      Main.WriteDebugLog(("[Fritz!Box] Error couldn't parse: ") & sStr)
    End If
  End If
  ' 20.01.09 20:29:19;CONNECT;0;0;0XXXXXXXXX;
  If InStr(sStr, ";CONNECT;") Then
    aScan = Scan(sStr, "*;CONNECT;*;*;*;")
    If aScan.Count = 4 Then
      Main.WriteLog("Phone call answered.")
      If Main.bFritzBoxDebug Then Main.WriteDebugLog(("[Fritz!Box] Call [id=") & aScan[1] & ("] to/from ") & aScan[3] & (" answered"))
      aScan[3] = IIf(aScan[3], aScan[3], "0000000000")
      rResult = Main.hDB.Exec("SELECT * FROM cdr WHERE clid = &1 ORDER BY calldate DESC LIMIT 1", aScan[3])
      If rResult Then
        If rResult.Count Then
          iId = rResult!id
          rResult = Main.hDB.Exec("UPDATE cdr SET disposition = 'ANSWERED', calldate = &1 WHERE id = &2", Now(), iId)
          Try Main.hDB.Exec("UPDATE contacts SET lastseen = now(), callnr = callnr+1 WHERE phoneno = &1 or mobileno = &1", aScan[3])
        End If
      End If
    Else
      Main.WriteDebugLog(("[Fritz!Box] Error couldn't parse: ") & sStr)
    End If
  End If
  ' 20.01.09 20:50:11;DISCONNECT;0;1253;
  If InStr(sStr, ";DISCONNECT;") Then
    aScan = Scan(sStr, "*;DISCONNECT;*;*;")
    If aScan.Count = 3 Then
      Main.WriteLog(("Phone call ended."))
      If Main.bFritzBoxDebug Then Main.WriteDebugLog(("[Fritz!Box] Call [id=") & aScan[1] & ("] duration was ") & aScan[2] & (" seconds"))
      rResult = Main.hDB.Exec("SELECT * FROM cdr ORDER BY calldate DESC LIMIT 1")
      If rResult.Available Then
        iId = rResult!id
        rResult = Main.hDB.Exec("UPDATE cdr SET duration = &1, billsec = &1 WHERE id = &2", aScan[2], iId)
        Main.RefreshPhoneCallList()
      End If
    Else
      Main.WriteDebugLog(("[Fritz!Box] Error couldn't parse: ") & sStr)
    End If
  End If
  ' 20.01.09 22:28:50;CALL;0;0;0XXXXXXXXX;0XXXXXXXXX;POTS;
  If InStr(sStr, ";CALL;") Then
    aScan = Scan(sStr, "*;CALL;*;*;*;*;*;")
    If aScan.Count = 6 Then
      sName = CallerID.ReturnCallerID(aScan[4])
      Main.WriteLog("Outgoing phone call to " & aScan[4] & " (" & sName & ")")
      Main.SetGlobalVar("PhoneCall_Outgoing", aScan[4] & " (" & sName & ") at " & Format(Now(), "hh:nn:ss dd-mm-yyyy"))
      If Main.bFritzBoxDebug Then Main.WriteDebugLog(("[Fritz!Box] Outgoing call [id=") & aScan[1] & ("] to ") & aScan[4] & (" with line ") & aScan[3])
      ' write data to cdr table
      Main.hDB.Begin()
      rResult = Main.hDB.Create("cdr")
      rResult!calldate = Now()
      rResult!clid = aScan[4]
      rResult!uniqueid = aScan[1]
      rResult!src = aScan[3]
      rResult!dst = aScan[4]
      rResult!dcontext = "default"
      rResult!channel = aScan[3]
      rResult!disposition = "NO ANSWER"
      rResult.Update()
      Main.hDB.Commit()
      Main.RefreshPhoneCallList()
    Else
      Main.WriteDebugLog(("[Fritz!Box] Error couldn't parse: ") & sStr)
    End If
  End If

End

Public Sub FritzBox_Error()

  Dim sString As String = "Fritz!Box: "

  ' handle error
  Select Case hFritzBox.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(sString & ("The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(sString & ("Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(sString & ("Unable to connect. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(sString & ("Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(sString & ("Error writing data."))
  End Select

End

' implement properties
Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function FritzBoxDebug_Read() As Boolean

  Return bFritzBoxDebug

End

Private Sub FritzBoxDebug_Write(Value As Boolean)

  bFritzBoxDebug = Value

End
