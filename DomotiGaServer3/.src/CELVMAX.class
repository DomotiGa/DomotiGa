' Gambas class file

' Description:
' CELVMAX.class
' Support for ELV MAX!.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Wouter Wolkers in 2012.

' Read file called COPYING for license details.

Property TCPHost As String
Property TCPPort As Integer
Property ELVMAXDebug As Boolean

Private sTCPHost As String
Private iTCPPort As Integer
Private bELVMAXDebug As Boolean

Public hELVMAX As New Socket
Public sBuffer As String

Public iDeviceCount As Integer

' Converts a character to the relevant index
' See http://en.wikipedia.org/wiki/Base64
' This is used in decoding
Private Function charToIndex(char As String) As Integer

  If char >= "A" And char <= "Z" Then
    Return Asc(char) - 65
  Else If char >= "a" And char <= "z" Then
    Return Asc(char) - 71
  Else If char >= "0" And char <= "9" Then
    Return Asc(char) + 4
  Else If char = "+" Then
    Return 62
  Else If char = "/" Then
    Return 63
  End If
  Return -1

End

' Converts a 'unit' of base64 (4 characters) into a Byte array (contains up to 3 bytes)
Private Function fourEncToBytes(fourEnc As String) As String

  Dim idx, fourVal, aByteVal, charIdx As Integer
  Dim aChar, threeChars As String

  ' Ensure our value accumulator is always zero to start
  fourVal = 0
  ' Knock off the padding '=' signs from the end if required
  Do While Right$(fourEnc, 1) = "="
    fourEnc = Right$(fourEnc, -1)
  Loop
  ' For each character in the base64 unit (now may be less than 4 characters)
  For idx = 1 To Len(fourEnc)
    achar = Mid$(fourEnc, idx, 1)
    ' Use the conversion table for base64 (see for example http://en.wikipedia.org/wiki/Base64 and look for...  The Base64 index table:)
    charIdx = charToIndex(aChar)
    ' Accumulate the values, multiplying by 64 to the power 3 for the first character index, 64 to the power 2 for the second character index etc.
    fourVal = fourVal + (charIdx * 64 ^ (4 - idx))
  Next
  ' Ensure our result is always empty to start with
  For idx = 1 To Len(fourEnc) - 1
    threeChars &= Chr$(fourVal / (256 ^ (3 - idx)))
    aByteVal = Int(fourVal / (256 ^ (3 - idx)))
    fourVal = fourVal - aByteVal * (256 ^ (3 - idx))
  Next
  Return threeChars

End

Private Function Base64Decode(sBase64 As String) As String

  Dim idx As Integer
  Dim aChar, fourEnc, result, threeChars As String

  ' Step through the complete base64 string character by character
  For idx = 1 To Len(sBase64)
    aChar = Mid$(sBase64, idx, 1)
    ' Only include what is not whitespace
    If Asc(aChar) > 31 Then
      ' Build up a 4-character string
      fourEnc = fourEnc & aChar
      ' Once we have 4 characters in our string (it can include padding consisting of '=' signs)
      If Len(fourEnc) = 4 Then
        ' Convert a unit (4 characters) of base64 to ascii (3 characters)
        threeChars = fourEncToBytes(fourEnc)
        result &= threeChars
        ' Be sure to clear out fourEnc for the next unit of base64
        fourEnc = ""
      End If
    End If
  Next
  Return result

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hELVMAX.Close

  ' get a new one
  hELVMAX = New Socket As "ELVMAX"
  hELVMAX.Connect(sTCPHost, iTCPPort)

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("ELV MAX! TCP Connect Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMAX_Ready()

  Main.WriteLog(("ELV MAX! TCP socket connected."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMAX_Closed()

  Main.WriteLog(("ELV MAX! TCP socket closed."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  Try hELVMAX.Close
  Main.WriteLog(("ELV MAX! TCP socket close."))
  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("ELV MAX! Disconnect Error: ") & ERROR.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMAX_Error()

  ' handle error
  Select Case hELVMAX.Status
    Case Net.CannotCreateSocket
      Main.WriteLog(("ELV MAX!: The system does not allow to create a socket."))
    Case Net.HostNotFound
      Main.WriteLog(("ELV MAX!: Host '") & sTCPHost & ("' not found."))
    Case Net.ConnectionRefused
      Main.WriteLog(("ELV MAX!: Unable to connect. Connection refused."))
    Case Net.CannotRead
      Main.WriteLog(("ELV MAX!: Error reading data."))
    Case Net.CannotWrite
      Main.WriteLog(("ELV MAX!: Error writing data."))
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCmd(sCmd As String)

  If Main.bELVMAXDebug Then Main.WriteDebugLog(("[ELVMAX] Sending '") & sCmd)
  Try Write #hELVMAX, sCmd & Chr$(13), Len(sCmd) + 1
  If Error Then Main.WriteDebugLog(("[ELVMAX] Error writing data to the TCP port! -> ") & ERROR.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Select Case LCase(sValue)
    Case "on"
      ' SendCmd("PWSTANDBY")
    Case "off"
      ' SendCmd("PWON")
    Case Else
      If Main.bELVMAXDebug Then Main.WriteDebugLog(("[ELVMAX] Unsupported command received: ") & sValue)
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMax_Read()

  Dim sData As String

  Try sData = Read #hELVMAX, 1
  If Error Then Main.WriteDebugLog(("[ELVMAX] Error reading data from the TCP port! -> ") & Error.Text)
  If sData = Chr$(13) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  End If

End

Public Sub ELVMAX_Found()

  Main.WriteLog(("ELV MAX! IP address resolved."))

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sStr As String)

  Dim sMaincat, sDecoded, sMessage, sDeviceSerial, sComfortTemp, sRoomName, sRoomAddress, sDeviceType, sDeviceAddress, sSerialNumber, sDeviceName, sCubeURL As String
  Dim aArray As String[]
  Dim iDeviceId, iRooms, iPos, iDataLength, iEcoTemp, iMaxSetpointTemp, iMinSetpointTemp, iTempOffset, iWindowOpenTemp, iWindowOpenDuration, iBoost, iRoomNumber As Integer
  Dim i, iNameLength, iRoomID, iPortalEnabled, Name_Length, Mi As Integer
  Dim iBoostDuration, iBoostValue, iDecalc, iDecalcDay, iDecalcTime, iMaximumValveSetting, iValveOffset, iData1, iData2, iTemperature, iValvePosition, iTimeUntil As Integer

  sMaincat = sStr

  ' Remove all CR and LF
  If Left(sMaincat, 1) = Chr$(10) Then sMaincat = Right(sMaincat, -1)
  If Left(sMaincat, 1) = Chr$(13) Then sMaincat = Right(sMaincat, -1)
  sMessage = Left(sMaincat, 2)
  If Main.bELVMAXDebug Then Main.WriteDebugLog(("[ELVMAX] Received: ") & sMaincat)

  Select Case sMessage

    Case "H:"
      ' Hello
      aArray = Split(Right$(sMaincat, -2))

      Main.WriteDebugLog(("[ELVMAX] SerialNumber: '") & aArray[0] & "'")
      '     $data["sys"]["Date"] = hexdec(Mid$(aArray[7],4,2)).".".hexdec(Mid$(aArray[7],2,2)).".".hexdec(Mid$(aArray[7],0,2));
      '     $data["sys"]["Time"] = hexdec(substr($arr2[8],0,2)).":".hexdec(substr($arr2[8],2,2));
      '     $data["sys"]["Timestamp"] = mktime(hexdec(substr($arr2[8],0,2)),hexdec(substr($arr2[8],2,2)),0,hexdec(substr($arr2[7],2,2)),hexdec(substr($arr2[7],4,2));
      ' try to find device with address, and correct interface type.
      iDeviceId = Devices.Find(aArray[1], Devices.FindInterface("ELV MAX! Interface"), "ELVCube")
      ' if found then update it's value
      If iDeviceId Then Devices.ValueUpdate(iDeviceId, aArray[0], aArray[2], "", "")

    Case "M:"
      ' Metadata: Rooms, Device names
      aArray = Split(Right$(sMaincat, -2))
      iPos = 1 ' Start reading at 1

      sDecoded = Base64Decode(aArray[2])
      ' Print the decoded string in printable chars. Abuse sDeviceType to save some memory on vars :)
      For i = 1 To Len(sDecoded)
        sDeviceType &= Hex$(Asc(Mid$(sDecoded, i, 1)), 2)
      Next
      If Main.bELVMAXDebug Then Main.WriteDebugLog(("[ELVMAX] M: ") & sDeviceType)
      sDeviceType = ""

      For Mi = 1 To Len(sDecoded)
        sRoomName &= Hex$(Asc(Mid$(sDecoded, Mi, 1)), 2)
      Next
      Main.WriteDebugLog(sRoomName)

      iPos += 2 ' first 2 bytes are unknown still.
      iRooms = Asc(Mid(sDecoded, iPos, 1))
      iPos += 1
      If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] Found '" & iRooms & "' rooms.")

      For Mi = 1 To iRooms
        iRoomNumber = Asc(Mid(sDecoded, iPos, 2))
        iPos += 1
        Name_Length = Asc(Mid(sDecoded, iPos, 2))
        iPos += 1
        sRoomName = Mid(sDecoded, iPos, Name_Length)
        iPos += Name_Length
        sRoomAddress = ""
        For i = iPos To iPos + 2 ' read 3 bytes
          sRoomAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
        Next
        iPos += 3
        If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] M: #rooms: '" & CStr(iRooms) & "' RoomNumber: '" & CStr(iRoomNumber) & "' RoomName: '" & sRoomName & "' 1stAddressInRoom: '" & sRoomAddress & "'")
      Next

      iDeviceCount = Asc(Mid(sDecoded, iPos, 1))
      iPos += 1

      If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] Found " & iDeviceCount & " devices.")

      For Mi = 1 To iDeviceCount
        sDeviceType = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        sDeviceAddress = ""
        For i = iPos To iPos + 2 ' read 3 bytes
          sDeviceAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
        Next
        iPos += 3
        For i = iPos To iPos + 9 ' read 10 bytes
          sSerialNumber = Asc(Mid(sDecoded, i, 1))
        Next
        iPos += 10
        iNameLength = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        sDeviceName = Mid(sDecoded, iPos, iNameLength)
        iPos += iNameLength
        iRoomID = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] M: DeviceType: '" & sDeviceType & "' DeviceAddress: '" & sDeviceAddress & "' DeviceName: '" & sDeviceName & "'")

        ' Update this device info in DomotiGa
        Select Case sDeviceType
          Case "0"
            ' Cube
            sDeviceType = "ELVCube"
          Case "1"
            ' Radiator thermostat
            sDeviceType = "ELVRadThermo"
          Case "4"
            ' Door/window sensor
            sDeviceType = "ELVDOOR"
          Case Else
            sDeviceType = "Unknown"
            Main.WriteDebugLog("[ELVMAX] Unknown device type '" & sDeviceType & "' Please report this to support.")
        End Select
        ' try to find device with address, and correct interface type.
        iDeviceId = Devices.Find(sDeviceAddress, Devices.FindInterface("ELV MAX! Interface"), sDeviceType)
        ' if found then update it's value
        If iDeviceId Then Devices.ValueUpdate(iDeviceId, sDeviceName, sSerialNumber, "", "")
      Next

    Case "C:"
      If Main.bELVMAXDebug Then Main.WriteDebugLog(("[ELVMax] C: ") & sMaincat)

      aArray = Split(Right$(sMaincat, -2))

      sDeviceAddress = aArray[0]
      sDecoded = Base64Decode(aArray[1])

      iPos = 1   ' Start reading at 1
      iDataLength = Asc(Mid(sDecoded, iPos, 1))
      iPos += 1
      For i = iPos To iPos + 2             ' read 3 bytes, RF Address of device
        sRoomAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
      Next
      iPos += 3
      sDeviceType = Asc(Mid(sDecoded, iPos, 1))    ' Device Type
      iPos += 1
      iPos += 3    ' Unknown bytes
      For i = iPos To iPos + 9             ' read 10 bytes, Serial of device
        sDeviceSerial = sDeviceSerial & Mid(sDecoded, i, 1)
      Next
      iPos += 10
      If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] C:Header Len: '" & iDataLength & "' Address: '" & sRoomAddress & "' Serial: '" & sDeviceSerial & "'")

      Select Case sDeviceType
        Case "0" ' Cube
          If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] CASE 0 Data: " & sDecoded & "'")
          iPortalEnabled = Asc(Mid(sDecoded, iPos, 1))
          iPos += 1
          iPos += 66 ' Unknown
          For i = iPos To iPos + 36             ' read 10 bytes, URL for portal
            sCubeURL &= Mid(sDecoded, i, 1)
          Next
          If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] CubeURL: '" & sCubeURL & "'")

        Case "1" ' Radiator Thermostat
          If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] CASE 1")
          sComfortTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iEcoTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iMaxSetpointTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iMinsetpointTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          itempOffset = Asc(Mid(sDecoded, iPos, 1)) / 2 - 3.5
          iPos += 1
          iWindowOpenTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iWindowOpenDuration = Hex$(Asc(Mid(sDecoded, iPos, 1)))
          iPos += 1
          iBoost = Asc(Mid(sDecoded, iPos, 1))
          iPos += 1
          ' Boost Duration and Boost Valve Value
          ' The 3 MSB bits gives the duration, the 5 LSB bits the Valve Value%.
          ' Duration: With 3 bits, the possible values (Dec) are 0 to 7, 0 is not used.
          ' The duration in Minutes is: if Dec value = 7, then 30 minutes, else Dec value * 5 minutes
          ' Valve Value: dec value 5 LSB bits * 5 gives Valve Value in %
          iBoostDuration = Lsr(iBoost, 5) ' 3 MSB
          iBoostValue = iBoost And 31
          iPos += 1
          ' Decalcification: Day of week and Time
          ' In bits: DDDHHHHH
          ' The three most significant bits (MSB) are presenting the day, Saturday = 1, Friday = 7
          ' The five least significant bits (LSB) are presenting the time (in hours)
          iDecalc = Asc(Mid(sDecoded, iPos, 1))
          iDecalcDay = Lsr(iDecalc, 5)
          iDecalcTime = iDecalc And 31
          iPos += 1
          iMaximumValveSetting = Asc(Mid(sDecoded, iPos, 1)) * (100 / 255)
          iPos += 1
          iValveOffset = Asc(Mid(sDecoded, iPos, 1)) * (100 / 255)
          iPos += 1

          If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] '" & sComfortTemp & "' '" & iEcoTemp & "' '" & itempOffset & "'")

        Case "4" ' Door / window sensor
          If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] Found C: for Door / Window sensor. No further data.")

        Case Else
          Main.WriteDebugLog("[ELVMAX] Unknown device type '" & sDeviceType & "', please report this to support.")
      End Select

    Case "L:"
      Main.WriteDebugLog("[ELVMAX] L:" & Right$(sMaincat, -2))
      sDecoded = Base64Decode(Right$(sMaincat, -2))

      ' Print the decoded string in printable chars. Abuse sDeviceType to save some memory on vars :)
      For i = 1 To Len(sDecoded)
        sDeviceType &= Hex$(Asc(Mid$(sDecoded, i, 1)), 2)
      Next
      Main.WriteDebugLog("[ELVMAX] L: (decoded) " & sDeviceType)
      sDeviceType = ""

      iPos = 1

      For iPortalEnabled = 1 To iDeviceCount
        iDataLength = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        For i = iPos To iPos + 2              ' read 3 bytes
          sDeviceAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
        Next
        iPos += 3
        iPos += 1 ' Unknown byte
        iData1 = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        iData2 = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        If iDataLength > 11 Then
          iValvePosition = Asc(Mid(sDecoded, iPos, 1))
          iPos += 1
          iTemperature = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          ' DateUntil  ' 2 bytes
          iTimeUntil = Asc(Mid(sDecoded, iPos, 1)) * 0.5
        Endif
        Main.WriteDebugLog("[ELVMAX] len: " & iDataLength & " Deviceadd: " & sDeviceAddress)
        ' Do something with the values here, before we clear them.
        sDeviceAddress = ""
      Next

    Case Else
      If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] Not implemented yet!")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ELVMaxSetValue(sItem As String, vValue As Variant)

  Main.SetGlobalVar("ELVMax_" & sItem, vValue)
  If Main.bELVMAXDebug Then Main.WriteDebugLog("[ELVMAX] Received Item: " & sItem & " Value: " & vValue)

End

' implement properties
Private Function TCPHost_Read() As String

  Return sTCPHost

End

Private Sub TCPHost_Write(Value As String)

  sTCPHost = Value

End

Private Function TCPPort_Read() As Integer

  Return iTCPPort

End

Private Sub TCPPort_Write(Value As Integer)

  iTCPPort = Value

End

Private Function ELVMAXDebug_Read() As Boolean

  Return bELVMAXDebug

End

Private Sub ELVMAXDebug_Write(Value As Boolean)

  bELVMAXDebug = Value

End
