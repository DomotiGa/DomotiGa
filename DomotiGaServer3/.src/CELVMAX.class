' Gambas class file

' Description:
' CELVMAX.class
' Support for ELV MAX!.

' Development Status:
' Beta. Needs Testing.

' DomotiGa - an open source home automation program.
' Copyright (C) Ron Klinkien, The Netherlands.

' This module was written by Wouter Wolkers in 2012.
' Incorporated changes from jpl - June 2014

' Read file called COPYING for license details.

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Module/Class specific variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public PluginName As String = "ELVMAX"
Public PluginFriendlyName As String = "ELV MAX!"
Public PluginVersion As String = "1.00"
Public PluginAuthor As String = "Wouter Wolkers"
Public PluginProtocols As String[]
Public PluginMaxInstances As Integer = 1

Public KeyName As String
Public LogLabel As String = "[ELVMAX] "
Public InterfaceId As Integer
Public Instance As Integer
Public IsRunning As Boolean
Public ErrorText As String
Public ErrorWhere As String

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Private Variables
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private $bEnabled As Boolean
Private $sTCPHost As String
Private $iTCPPort As Integer
Private $bDebug As Boolean

Public hELVMAX As New Socket
Public sBuffer As String

Public iDeviceCount As Integer
' variable for timer
Public tELVMax As Timer

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory Sub for EACH Module/Class to initialize:
' - The cPlugin[x].Settings are copied into local variables
' - Port/Connection will be started (any errors caught)
' - Any other code per Class
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StartPlugin(cPl As CPluginEntry)

  KeyName = cPl.KeyName
  Instance = cPl.Instance
  If Instance <> 1 Then LogLabel = Replace(LogLabel, "] ", "#" & Instance & "] ")

  ' Copy configuration items locally
  $bEnabled = cPl.Settings["enabled"]
  $sTCPHost = cPl.Settings["tcphost"]
  $iTCPPort = cPl.Settings["tcpport"]
  $bDebug = cPl.Settings["debug"]

  InterfaceId = Devices.FindInterface("ELV MAX! Interface")
  If InterfaceId = 0 Then
    ErrorText = "Required InterfaceId can't be retrieved from the database!"
    Main.WriteLog(LogLabel & "ERROR: " & ErrorText)
    IsRunning = False
    Return
  Endif

  ' Connect/Initialize connection
  ConnectTCP()

  ' Initialize
  Run()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Mandatory sub for each Module/Class to stop
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub StopPlugin()

  Try Disconnect()

End

' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' set timer
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Public Sub Run()

  ' start poll Timer For ELVMAX
  tELVMax = New Timer As "tELVMax"
  tELVMax.Delay = 60000 ' $iPollTime * 1000 ' multiply for seconds
  tELVMax.Start

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' gets called at each timer event
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub tELVMax_Timer()

  SendCmd("l:")
  ' ELVMax_Read()

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' connect to the tcp host:port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function ConnectTCP() As Boolean

  ' try to close the connection
  Try hELVMAX.Close

  ' get a new one
  hELVMAX = New Socket As "ELVMAX"
  hELVMAX.Connect($sTCPHost, $iTCPPort)

  ' Write to main logfile we are trying to connect
  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP interface connecting to " & $sTCPHost & ":" & $iTCPPort)

  ' Don't set IsRunning=True, this has to be done in _Ready

  ' All went ok
  Return True

Catch ' some errors
  Main.WriteLog(LogLabel & "ERROR: " & PluginFriendlyName & " TCP interface FAILED to connect to " & $sTCPHost & ":" & $iTCPPort)
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  IsRunning = False
  ErrorText = Error.Text
  ErrorWhere = Error.Where

  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is connected
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMAX_Ready()

  Main.WriteLog(LogLabel & "TCP interface connected.")
  IsRunning = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' socket is closed
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMAX_Closed()

  Main.WriteLog(LogLabel & "ERROR: TCP socket closed by peer.")

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' disconnect from the tcp host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to stop the timer
  Try tELVMax.Stop
  
  ' try to close the connection
  Try hELVMAX.Close

  Main.WriteLog(LogLabel & PluginFriendlyName & " TCP connection closed.")

  ' all ok
  Return True

Finally
  IsRunning = False
  ErrorText = ""
  ErrorWhere = ""

Catch
  Main.WriteLog(LogLabel & "ERROR: " & Error.Text)
  Return False

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' error while connected/connecting to host
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMAX_Error()

  Dim sMsg As String

  sMsg = Log.Text_TCP_Error(Last.Status, $sTCPHost)
  Main.WriteLog(LogLabel & "ERROR: " & sMsg)

  IsRunning = False
  ErrorText = sMsg

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCmd(sCmd As String)

  If $bDebug Then Main.WriteDebugLog(LogLabel & "Sending '" & sCmd & "'")
  Try Write #hELVMAX, sCmd & Chr$(13) & Chr$(10)
  If Error Then Main.WriteDebugLog(LogLabel & "Error writing data to the TCP port! -> " & ERROR.Text)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' send command to device
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub SendCommand(sAddress As String, sValue As String)

  Dim sCommand, sBaseCommand As String
  Dim i As Integer
  Dim f As Float

  If $bDebug Then Main.WriteDebugLog(LogLabel & "SendCommand called for '" & sAddress & "' with value '" & sValue & "'")

  ' temperature setpoint byte. bits 0-5 are temperature, bit 6&7 are type
  ' 00 = Auto weekprog (no temp is needed, just make the whole byte 0
  ' 01 = Permanent
  ' 10 = Temporarily 
  f = Val(sValue) * 2
  i = Int(f)
  ' set bit 6, clear bit 7 to get a permanent setpoint
  i = BSet(i, 6)
  i = BClr(i, 7)

  sCommand = Chr$(00) & Chr$(04) & Chr$(64) & Chr$(00) &
  Chr$(00) & Chr$(00) &
  Chr$(Val("&H" & Left$(sAddress, 2))) & Chr$(Val("&H" & Mid$(sAddress, 3, 2))) & Chr$(Val("&H" & Right$(sAddress, 2))) &
  Chr$(02) & Chr$(i)

  ' Print the decoded string in printable chars. Abuse sBaseCommand to save some memory on vars :)
  For i = 1 To Len(sCommand)
    sBaseCommand &= Hex$(Asc(Mid$(sCommand, i, 1)), 2)
  Next

  If $bDebug Then Main.WriteDebugLog(LogLabel & "SendCommand: '" & sBaseCommand & "'")

  sBaseCommand = "s:" & Base64$(sCommand)

  Try SendCmd(sBaseCommand)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' data received on tcp socket
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Sub ELVMax_Read()

  Dim sData As String

  Try sData = Read #hELVMAX, 1
  If Error Then Main.WriteDebugLog(LogLabel & "Error reading data from the TCP port! -> " & Error.Text)
  If sData = Chr$(13) Then ' buffer until linefeed then parse
    If Len(sBuffer) > 1 Then ParseLine(sBuffer)
    sBuffer = Null
  Else
    sBuffer &= sData
  Endif

End

Public Sub ELVMAX_Found()

  Log.Plugin_DNS_Found(LogLabel, $sTCPHost)

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' parse received data
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ParseLine(sStr As String)

  Dim sMaincat, sDecoded, sMessage, sDeviceSerial, sComfortTemp, sRoomName, sRoomAddress, sDeviceType, sDeviceAddress, sSerialNumber, sDeviceName, sCubeURL, sOpen, sBattery, sLinkStatus, sMode As String
  Dim aArray As String[]
  Dim iDeviceId, iRooms, iPos, iDataLength, iEcoTemp, iMaxSetpointTemp, iMinSetpointTemp, iTempOffset, iWindowOpenTemp, iWindowOpenDuration, iBoost, iRoomNumber As Integer
  Dim i, iNameLength, iRoomID, iPortalEnabled, Name_Length, Mi As Integer
  Dim iBoostDuration, iBoostValue, iDecalc, iDecalcDay, iDecalcTime, iMaximumValveSetting, iValveOffset, iData1, iData2, iValvePosition, iTimeUntil As Integer
  Dim iSetTemp, iActualTemp As Float

  sMaincat = sStr

  ' Remove all CR and LF
  If Left(sMaincat, 1) = Chr$(10) Then sMaincat = Right(sMaincat, -1)
  If Left(sMaincat, 1) = Chr$(13) Then sMaincat = Right(sMaincat, -1)
  If Left(sMaincat, 1) = Chr$(108) Then sMaincat = Right(sMaincat, -1)
  sMessage = Left(sMaincat, 2)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received: " & sMaincat)

  Select Case sMessage

    Case "H:"
      ' Hello
      aArray = Split(Right$(sMaincat, -2))

      If $bDebug Then Main.WriteDebugLog(LogLabel & "SerialNumber: '" & aArray[0] & "'")
      '     $data["sys"]["Date"] = hexdec(Mid$(aArray[7],4,2)).".".hexdec(Mid$(aArray[7],2,2)).".".hexdec(Mid$(aArray[7],0,2));
      '     $data["sys"]["Time"] = hexdec(substr($arr2[8],0,2)).":".hexdec(substr($arr2[8],2,2));
      '     $data["sys"]["Timestamp"] = mktime(hexdec(substr($arr2[8],0,2)),hexdec(substr($arr2[8],2,2)),0,hexdec(substr($arr2[7],2,2)),hexdec(substr($arr2[7],4,2));
      ' try to find device with address, and correct interface type.
      iDeviceId = Devices.Find(Instance, aArray[1], InterfaceId, "ELVCube")
      ' if found then update it's value
      If iDeviceId Then
        Devices.ValueUpdate(iDeviceId, 3, aArray[0])
        Devices.ValueUpdate(iDeviceId, 4, aArray[2])
      Endif

    Case "M:"
      ' Metadata: Rooms, Device names
      aArray = Split(Right$(sMaincat, -2))
      iPos = 1 ' Start reading at 1

      sDecoded = UnBase64(aArray[2])

      ' Print the decoded string in printable chars. Abuse sDeviceType to save some memory on vars :)
      For i = 1 To Len(sDecoded)
        sDeviceType &= Hex$(Asc(Mid$(sDecoded, i, 1)), 2)
      Next
      If $bDebug Then Main.WriteDebugLog(LogLabel & "M: " & sDeviceType)
      sDeviceType = ""

      For Mi = 1 To Len(sDecoded)
        sRoomName &= Hex$(Asc(Mid$(sDecoded, Mi, 1)), 2)
      Next
      If $bDebug Then Main.WriteDebugLog(LogLabel & sRoomName)

      iPos += 2 ' first 2 bytes are unknown still.
      iRooms = Asc(Mid(sDecoded, iPos, 1))
      iPos += 1
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Found '" & iRooms & "' rooms.")

      For Mi = 1 To iRooms
        iRoomNumber = Asc(Mid(sDecoded, iPos, 2))
        iPos += 1
        Name_Length = Asc(Mid(sDecoded, iPos, 2))
        iPos += 1
        sRoomName = Mid(sDecoded, iPos, Name_Length)
        iPos += Name_Length
        sRoomAddress = ""
        For i = iPos To iPos + 2 ' read 3 bytes
          sRoomAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
        Next
        iPos += 3
        If $bDebug Then Main.WriteDebugLog(LogLabel & "M: #rooms: '" & CStr(iRooms) & "' RoomNumber: '" & CStr(iRoomNumber) & "' RoomName: '" & sRoomName & "' 1stAddressInRoom: '" & sRoomAddress & "'")
      Next

      iDeviceCount = Asc(Mid(sDecoded, iPos, 1))
      iPos += 1

      If $bDebug Then Main.WriteDebugLog(LogLabel & "Found " & iDeviceCount & " devices.")

      For Mi = 1 To iDeviceCount
        sDeviceType = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        sDeviceAddress = ""
        For i = iPos To iPos + 2 ' read 3 bytes
          sDeviceAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
        Next
        iPos += 3
        sSerialNumber = ""
        For i = iPos To iPos + 9 ' read 10 bytes
          sSerialNumber &= Chr$(Asc(Mid(sDecoded, i, 1)))
        Next
        iPos += 10
        iNameLength = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        sDeviceName = Mid(sDecoded, iPos, iNameLength)
        iPos += iNameLength
        iRoomID = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        If $bDebug Then Main.WriteDebugLog(LogLabel & "M: DeviceType: '" & sDeviceType & "' DeviceAddress: '" & sDeviceAddress & "' DeviceName: '" & sDeviceName & "'")

        ' Update this device info in DomotiGa
        Select Case sDeviceType
          Case "0"
            ' Cube
            sDeviceType = "ELVCube"
          Case "1"
            ' Radiator thermostat
            sDeviceType = "ELVRadThermo"
          Case "3"
            ' Wall Thermostat
            sDeviceType = "ELVWallThermo"
          Case "4"
            ' Door/window sensor
            sDeviceType = "ELVDOOR"
          Case "5"
            ' push button
            sDeviceType = "ELVBUTTON"
          Case Else
            sDeviceType = "Unknown"
            If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown device type '" & sDeviceType & "' Please report this to support.")
        End Select
        ' try to find device with address, and correct interface type.
        iDeviceId = Devices.Find(Instance, sDeviceAddress, InterfaceId, sDeviceType, sDeviceName)
        ' if found then update it's value
        If iDeviceId Then
          Devices.ValueUpdate(iDeviceId, 4, sSerialNumber)
        Endif
      Next

    Case "C:"
      If $bDebug Then Main.WriteDebugLog(LogLabel & "C: " & sMaincat)

      aArray = Split(Right$(sMaincat, -2))

      sDeviceAddress = aArray[0]
      sDecoded = UnBase64(aArray[1])

      iPos = 1   ' Start reading at 1
      iDataLength = Asc(Mid(sDecoded, iPos, 1))
      iPos += 1
      For i = iPos To iPos + 2             ' read 3 bytes, RF Address of device
        sRoomAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
      Next
      iPos += 3
      sDeviceType = Asc(Mid(sDecoded, iPos, 1))    ' Device Type
      iPos += 1
      iPos += 3    ' Unknown bytes
      For i = iPos To iPos + 9             ' read 10 bytes, Serial of device
        sDeviceSerial = sDeviceSerial & Mid(sDecoded, i, 1)
      Next
      iPos += 10
      If $bDebug Then Main.WriteDebugLog(LogLabel & "C:Header Len: '" & iDataLength & "' Address: '" & sRoomAddress & "' Serial: '" & sDeviceSerial & "'")

      Select Case sDeviceType
        Case "0" ' Cube
          iPortalEnabled = Asc(Mid(sDecoded, iPos, 1))
          iPos += 1
          iPos += 66 ' Unknown
          For i = iPos To iPos + 36             ' read 10 bytes, URL for portal
            sCubeURL &= Mid(sDecoded, i, 1)
          Next
          If $bDebug Then Main.WriteDebugLog(LogLabel & "CubeURL: '" & sCubeURL & "'")

        Case "1" ' Radiator Thermostat
          sComfortTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iEcoTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iMaxSetpointTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iMinsetpointTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          itempOffset = Asc(Mid(sDecoded, iPos, 1)) / 2 - 3.5
          iPos += 1
          iWindowOpenTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          iWindowOpenDuration = Hex$(Asc(Mid(sDecoded, iPos, 1)))
          iPos += 1
          iBoost = Asc(Mid(sDecoded, iPos, 1))
          iPos += 1
          ' Boost Duration and Boost Valve Value
          ' The 3 MSB bits gives the duration, the 5 LSB bits the Valve Value%.
          ' Duration: With 3 bits, the possible values (Dec) are 0 to 7, 0 is not used.
          ' The duration in Minutes is: if Dec value = 7, then 30 minutes, else Dec value * 5 minutes
          ' Valve Value: dec value 5 LSB bits * 5 gives Valve Value in %
          iBoostDuration = Lsr(iBoost, 5) ' 3 MSB
          iBoostValue = iBoost And 31
          iPos += 1
          ' Decalcification: Day of week and Time
          ' In bits: DDDHHHHH
          ' The three most significant bits (MSB) are presenting the day, Saturday = 1, Friday = 7
          ' The five least significant bits (LSB) are presenting the time (in hours)
          iDecalc = Asc(Mid(sDecoded, iPos, 1))
          iDecalcDay = Lsr(iDecalc, 5)
          iDecalcTime = iDecalc And 31
          iPos += 1
          iMaximumValveSetting = Asc(Mid(sDecoded, iPos, 1)) * (100 / 255)
          iPos += 1
          iValveOffset = Asc(Mid(sDecoded, iPos, 1)) * (100 / 255)
          iPos += 1

          If $bDebug Then Main.WriteDebugLog(LogLabel & "Radioator thermostat, comfort temp: '" & sComfortTemp & "' ecotemp: '" & iEcoTemp & "' temp offset: '" & itempOffset & "'")

        Case "3" ' Wall Thermostat
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Found C: for Wall Thermostat. No further data.")

        Case "4" ' Door / window sensor
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Found C: for Door / Window sensor. No further data.")
	Case "5" ' EcoButton
	  If $bDebug Then Main.WriteDebugLog(LogLabel & "Found C: for Eco Button. No Further data.")
        Case Else
          If $bDebug Then Main.WriteDebugLog(LogLabel & "Unknown device type '" & sDeviceType & "', please report this to support.")
      End Select

    Case "L:"
      sDecoded = UnBase64(Right$(sMaincat, -2))

      ' Print the decoded string in printable chars. Abuse sDeviceType to save some memory on vars :)
      For i = 1 To Len(sDecoded)
        sDeviceType &= Hex$(Asc(Mid$(sDecoded, i, 1)), 2)
      Next
      If $bDebug Then Main.WriteDebugLog(LogLabel & "L: (decoded) " & sDeviceType)

      iPos = 1

      For iPortalEnabled = 1 To iDeviceCount
        iDataLength = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        For i = iPos To iPos + 2              ' read 3 bytes
          sDeviceAddress &= Hex$(Asc(Mid(sDecoded, i, 1)), 2)
        Next
	If $bDebug Then 
	  Main.WriteDebugLog(LogLabel & "L: Found Device with address " & sDeviceAddress & " And datalength " & iDataLength & ", data: " & Mid$(sDeviceType, iPos * 2 - 1, iDataLength * 2))
	Endif

        iPos += 3
        iPos += 1 ' Unknown byte
        iData1 = Asc(Mid(sDecoded, iPos, 1))
        iPos += 1
        iData2 = Asc(Mid(sDecoded, iPos, 1))
	If $bDebug Then Main.WriteDebugLog(LogLabel & "L: Found Data1: " & Bin$(iData1, 8) & " And Data2: " & Bin$(iData2, 8))
	If BTst(iData2, 7) Then
	  Main.WriteDebugLog(LogLabel & "Battery low! Device : " & sDeviceAddress)
	  sBattery = "Low!"
	Else
	  sBattery = "OK"
	Endif
	If BTst(iData2, 6) Then
	  If $bDebug Then Main.WriteDebugLog(LogLabel & " Link status error! Device : " & sDeviceAddress)
	  sLinkStatus = "Error!"
	Else
	  sLinkStatus = "OK"
	Endif
	If Not BTst(iData2, 4) And If $bDebug Then Main.WriteDebugLog(LogLabel & "Gateway Unknown! Device : " & sDeviceAddress)
	If BTst(iData2, 4) And If $bDebug Then Main.WriteDebugLog(LogLabel & "DST active! Device : " & sDeviceAddress)
	If Not BTst(iData2, 1) And If Not BTst(iData2, 0) Then 
	  If $bDebug Then Main.WriteDebugLog(LogLabel & "Auto mode active. : " & sDeviceAddress)
	  sMode = "Auto"
	Endif
	If Not BTst(iData2, 1) And If BTst(iData2, 0) Then
	  If $bDebug Then Main.WriteDebugLog(LogLabel & "Manual mode active. : " & sDeviceAddress)
	  sMode = "Manual"
	Endif
	If BTst(iData2, 1) And If Not BTst(iData2, 0) Then 
	  If $bDebug Then Main.WriteDebugLog(LogLabel & "Vacation mode active. : " & sDeviceAddress)
	  sMode = "Vacation"
	Endif
	If BTst(iData2, 1) And If BTst(iData2, 0) Then
	  If $bDebug Then Main.WriteDebugLog(LogLabel & "Boost active! : " & sDeviceAddress)
	  sMode = "Boost"
	Endif

	If BTst(iData2, 5) Then
	  If $bDebug Then Main.WriteDebugLog(LogLabel & "Panel Locked! Device : " & sDeviceAddress)
	  sMode &= ", Locked"
	Endif

        If iDataLength = 6 Then ' Door/window sensor
	  sOpen = IIf(BTst(iData2, 1), "Open", "Closed")
          ' Update this device info in DomotiGa
          ' try to find device with address, and correct interface type.
          iDeviceId = Devices.Find(Instance, sDeviceAddress, InterfaceId)
          ' if found then update it's value
	  If iDeviceId Then
	    If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating device " & iDeviceId)
            Devices.ValueUpdate(iDeviceId, 1, sOpen)
	    Devices.ValueUpdate(iDeviceId, 3, sMode)
	    Devices.Battery(iDeviceId, sBattery)
	  Else
	    If $bDebug Then Main.WriteDebugLog(LogLabel & "Device not found with address: " & sDeviceAddress & " and Interface :" & InterfaceId)
          Endif
	Endif
        If iDataLength = 11 Then 'Radiator thermostat
          iPos += 1
          iValvePosition = Asc(Mid(sDecoded, iPos, 1))
          iPos += 1
          iSetTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 1
          ' DateUntil  ' 2 bytes
          iPos += 2
          iTimeUntil = Asc(Mid(sDecoded, iPos, 1)) * 0.5
          ' Update this device info in DomotiGa
          ' try to find device with address, and correct interface type.
          iDeviceId = Devices.Find(Instance, sDeviceAddress, InterfaceId)
          ' if found then update it's value
	  If iDeviceId Then
	    If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating device " & iDeviceId)
            Devices.ValueUpdate(iDeviceId, 1, iSetTemp)
	    Devices.ValueUpdate(iDeviceId, 2, iValvePosition)
	    Devices.ValueUpdate(iDeviceId, 3, sMode)
	    Devices.Battery(iDeviceId, sBattery)
	  Else
	    If $bDebug Then Main.WriteDebugLog(LogLabel & "Device not found with address: " & sDeviceAddress & " and Interface :" & InterfaceId)
          Endif
        Endif
        If iDataLength = 12 Then ' Wall Thermostat
          iPos += 1
	  ' unknown byte, only seen value 04 so far
          iPos += 1
	  ' unknown byte, various values guessing setpoint
          iSetTemp = Asc(Mid(sDecoded, iPos, 1)) / 2
          iPos += 2
	  ' 2 bytes, date until
          iPos += 1
	  ' 1 byte, time until
          iTimeUntil = Asc(Mid(sDecoded, iPos, 1)) * 0.5
	  iPos += 1
          iActualTemp = Round((Asc(Mid(sDecoded, iPos, 1)) / 10), -1)
          ' Update this device info in DomotiGa
          ' try to find device with address, and correct interface type.
          iDeviceId = Devices.Find(Instance, sDeviceAddress, InterfaceId)
          ' if found then update it's value
          If iDeviceId Then
	    If $bDebug Then Main.WriteDebugLog(LogLabel & "Updating device " & iDeviceId)
            Devices.ValueUpdate(iDeviceId, 1, iSetTemp)
            Devices.ValueUpdate(iDeviceId, 2, iActualTemp)
	    Devices.ValueUpdate(iDeviceId, 3, sMode)
	    Devices.Battery(iDeviceId, sBattery)
          Endif
        Endif
        iPos += 1
        If $bDebug Then Main.WriteDebugLog(LogLabel & "len: " & iDataLength & " Deviceadd: " & sDeviceAddress)
        sDeviceAddress = ""
      Next
      
    Case "S:"
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Working on implementing S:")
      ' The first byte is indeed the duty cycle.
      ' The second byte indicates whether the command has been discarded (0 = ok, 1 is discarded)
      ' The third byte is the free memory slots.
      ' example: S:63,0,01
      ' example: S:63,1,00

    Case Else
      If $bDebug Then Main.WriteDebugLog(LogLabel & "Not implemented yet!")
  End Select

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' save received values
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub ELVMaxSetValue(sItem As String, vValue As Variant)

  Main.SetGlobalVar("ELVMax_" & sItem, vValue)
  If $bDebug Then Main.WriteDebugLog(LogLabel & "Received Item: " & sItem & " Value: " & vValue)

End
