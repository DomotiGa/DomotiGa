' Gambas class file

' Description:
' CPlugwise.class
' Use Plugwise to control devices.

' Development Status:
' Working fine, only need to add support for reading usage history from plugs.

' Links:
' http://www.plugwise.nl
' http://mindprod.com/jgloss/crc.html
' http://www.maartendamen.com/?p=359

' DomotiGa - an open source home automation program.
' Copyright(C) 2008-2011 Ron Klinkien

' Read file called COPYING for license details.

Property Port As String
Property PlugwiseDebug As Boolean
Property PollTime As Integer
Property Firmware As Integer

Private sPort As String
Private bPlugwiseDebug As Boolean
Private iPollTime As Integer
Private iFirmware As Integer

Public hPlugwise As New SerialPort
Public tPlugwise As Timer

' CRC-16(CCITT) table with Poly = 0x10210
' [GB2:ARRD] Private aCRCTable As Integer[256]
Private aCRCTable As New Integer[256]
Private bTableInit As Boolean

Const STICKINITCODE As String = "000A"
Const STICKINITRESPONSECODE As String = "0000"
Const POWERCHANGECODE As String = "0017"
Const DEVICEINFOCODE As String = "0023"
Const DEVICEINFORESPONSECODE As String = "0024"
Const CALIBRATIONCODE As String = "0026"
Const CALIBRATIONRESPONSECODE As String = "0027"
Const POWERINFOCODE As String = "0012"
Const POWERINFORESPONSECODE As String = "0013"

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' open serial port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Connect() As Boolean

  ' try to close the port
  Try hPlugwise.Close

  ' get a new one
  hPlugwise = New Serialport As "Plugwise"

  With hPlugwise
    .PortName = sPort
    .Speed = 115200
    .Parity = 0
    .DataBits = 8
    .StopBits = 1
    .FlowControl = 0
    .Open()
  End With

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Plugwise Error: ") & ERROR.Text)
  Return False

End

Public Sub Run()

  ' start poll timer for power usage check
  tPlugwise = New Timer As "tPlugwise"
  tPlugwise.Delay = iPollTime * 1000 ' multiply for seconds
  tPlugwise.Start

  If iFirmware > 2008 Then InitStick()
  CheckPlugs()

End

Public Sub tPlugwise_Timer()

  CheckPlugs()

End

Public Sub InitStick()

  Dim sHeader, sString, sCRC, sComplete, sResult, sSeq, sAckCode, sMAC, sID As String

  ' <ENQ><ENQ><ETX><ETX>000AB43C<CR><LF>
  sHeader = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  sString = STICKINITCODE
  sCRC = Hex(CalculateCRC(sString))
  sComplete = sHeader & sString & sCRC & Chr(13) & Chr(10)

  If bPlugwiseDebug Then
    Main.WriteDebugLog(("[Plugwise] Initialize Stick"))
    Main.WriteDebugLog(("[Plugwise] String: ") & sString & (" CRC: ") & sCRC)
  Endif
  Send(sComplete)
  sResult = GetResult(STICKINITRESPONSECODE, sComplete)
  If sResult Then
    If bPlugwiseDebug Then
      sSeq = Mid(sResult, 1, 4)
      sAckCode = Mid(sResult, 5, 4)
      sMAC = Mid(sResult, 27, 16)
      sID = Mid(sResult, 63, 4)
      Main.WriteDebugLog(("[Plugwise] Sequence Number: ") & sSeq)
      Main.WriteDebugLog(("[Plugwise] Acknowledgement: ") & sAckCode & IIf(sAckCode = "00C1", " (Ok)", " (Error)"))
      Main.WriteDebugLog(("[Plugwise] MAC Address Stick: ") & sMAC)
      Main.WriteDebugLog(("[Plugwise] Short Network ID: ") & sID)
    Endif
  Else
    If bPlugwiseDebug Then Main.WriteDebugLog(("[Plugwise] InitStick() didn't get expected answer."))
  Endif

End

Public Sub CheckPlugs()

  Dim rResult As Result

  Try rResult = Main.hDB.Exec("SELECT * FROM devices WHERE enabled is TRUE AND interface = &1", Devices.FindInterface("Plugwise Stick"))
  If rResult.Count Then
    For Each rResult
      If Main.bPlugwiseDebug Then Main.WriteDebugLog(("[Plugwise] Checking power usage of device '") & rResult!name & ("' with address ") & rResult!address)
      GetPowerInfo(rResult!address, rResult!id)
      If Main.bPlugwiseDebug Then Main.WriteDebugLog(("[Plugwise] Checking relay state of device '") & rResult!name & ("' with address ") & rResult!address)
      GetDeviceInfo(rResult!address, rResult!id)
    Next
  Endif

End

Public Sub SendCommand(sAddress As String, sCmd As String)

  Dim sHeader, sString, sFunc, sCRC, sComplete, sMAC As String

  sMAC = Replace(sAddress, ":", "")
  sFunc = IIf(UCase(sCmd) = "ON", "01", "00")

  ' <ENQ><ENQ><ETX><ETX>0017000A1100003111AB01AC92<CR><LF>
  sHeader = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  sString = POWERCHANGECODE & sMAC & sFunc
  sCRC = Hex(CalculateCRC(sString))
  sComplete = sHeader & sString & sCRC & Chr(13) & Chr(10)

  If bPlugwiseDebug Then
    Main.WriteDebugLog(("[Plugwise] MAC: ") & sMAC)
    Main.WriteDebugLog(("[Plugwise] String: ") & sString & (" CRC: ") & sCRC)
  Endif
  Send(sComplete)

End

Public Sub GetDeviceInfo(sAddress As String, iDeviceId As Integer)

  Dim sHeader, sString, sCRC, sComplete, sResult, sRelay, sMAC, sMacRecv, sState, sLogAddress, sSeq As String
  Dim iLogAddress As Integer
  Dim iMinLength As Integer = 5

  sMAC = Replace(sAddress, ":", "")

  sHeader = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  sString = DEVICEINFOCODE & sMAC
  sCRC = Hex(CalculateCRC(sString))
  sComplete = sHeader & sString & sCRC & Chr(13) & Chr(10)

  If bPlugwiseDebug Then
    Main.WriteDebugLog(("[Plugwise] MAC: ") & sMAC)
    Main.WriteDebugLog(("[Plugwise] String: ") & sString & (" CRC: ") & sCRC)
  Endif

  If iFirmware > 2008 Then iMinLength += 34

  Send(sComplete)
  sResult = GetResult(DEVICEINFORESPONSECODE, sComplete)
  If Len(sResult) > iMinLength Then
    If iFirmware > 2008 Then
      sMacRecv = Mid(sResult, 5, 16)
      sRelay = Mid(sResult, 37, 2)
    Else
      sMacRecv = Mid(sResult, 1, 16)
      sRelay = Mid(sResult, 33, 2)
    Endif
    sState = IIf(sRelay = "01", "On", "Off")
    If bPlugwiseDebug Then
      Main.WriteDebugLog(("[Plugwise] GetDeviceInfo Result: ") & sResult)
      Main.WriteDebugLog(("[Plugwise] MAC Address: ") & sMacRecv)
      If iFirmware > 2008 Then
        sSeq = Mid(sResult, 1, 4)
        sLogAddress = Mid(sResult, 29, 8)
        iLogAddress = (HexToInt(sLogAddress) - 278528) / 32
        Main.WriteDebugLog(("[Plugwise] Sequence Number: ") & sSeq)
        Main.WriteDebugLog(("[Plugwise] Log Address: ") & iLogAddress & " (" & sLogAddress & ")")
      Endif
      Main.WriteDebugLog(("[Plugwise] RelayState: ") & sRelay & " " & sState)
    Endif
    ' update device state
    Devices.ValueUpdate(iDeviceId, sState, "", "", "")
  Else
    If bPlugwiseDebug Then
      Main.WriteDebugLog(("[Plugwise] GetDeviceInfo() didn't get expected answer."))
      Main.WriteDebugLog(("[Plugwise] Is module plugged in and address correct?"))
    Endif
  Endif

End

Public Sub GetPowerInfo(sAddress As String, iDeviceId As Integer)

  Dim sHeader, sString, sCRC, sComplete, sResult, sPulses, sPulses1Sec, sMAC, sSeq As String
  Dim iPulses As Integer
  Dim fGainA, fGainB, fOffTot, fOffNoise, fCorrectPulses, fWatt, fkWh, fTemp As Float
  Dim iMinLength As Integer = 36

  sMac = Replace(sAddress, ":", "")

  ' <ENQ><ENQ><ETX><ETX>0026000D6F00002366BB7071<CR><LF>
  sHeader = Chr(5) & Chr(5) & Chr(3) & Chr(3)
  sString = CALIBRATIONCODE & sMAC
  sCRC = Hex(CalculateCRC(sString))
  sComplete = sHeader & sString & sCRC & Chr(13) & Chr(10)

  If bPlugwiseDebug Then
    Main.WriteDebugLog(("[Plugwise] Calibration Request"))
    Main.WriteDebugLog(("[Plugwise] MAC: ") & sMAC)
    Main.WriteDebugLog(("[Plugwise] String: ") & sString & (" CRC: ") & sCRC)
  Endif

  If iFirmware > 2008 Then iMinLength += 24

  Send(sComplete)
  sResult = GetResult(CALIBRATIONRESPONSECODE, sComplete)

  If Len(sResult) > iMinLength Then
    If iFirmware > 2008 Then
      sSeq = Mid(sResult, 8, 4)
      fGainA = HexToFloat(Mid(sResult, 28, 8))
      fGainB = HexToFloat(Mid(sResult, 36, 8))
      fOffTot = HexToFloat(Mid(sResult, 44, 8))
      fOffNoise = HexToFloat(Mid(sResult, 52, 8))
    Else
      fGainA = HexToFloat(Mid(sResult, 1, 8))
      fGainB = HexToFloat(Mid(sResult, 9, 8))
      fOffTot = HexToFloat(Mid(sResult, 17, 8))
      fOffNoise = HexToFloat(Mid(sResult, 25, 8))
    Endif
    If bPlugwiseDebug Then
      Main.WriteDebugLog(("[Plugwise] GetCalibration Result: ") & sResult)
      If iFirmware > 2008 Then Main.WriteDebugLog(("[Plugwise] Sequence Number: ") & sSeq)
      Main.WriteDebugLog(("[Plugwise] GainA: ") & Str(fGainA))
      Main.WriteDebugLog(("[Plugwise] GainB: ") & Str(fGainB))
      Main.WriteDebugLog(("[Plugwise] OffTot: ") & Str(fOffTot))
      Main.WriteDebugLog(("[Plugwise] OffNoise: ") & Str(fOffNoise))
    Endif

    ' <ENQ><ENQ><ETX><ETX>0012000D6F00002366BB338B<CR><LF>
    sString = POWERINFOCODE & sMAC
    sCRC = Hex(CalculateCRC(sString))
    sComplete = sHeader & sString & sCRC & Chr(13) & Chr(10)
    Send(sComplete)
    sResult = GetResult(POWERINFORESPONSECODE, sComplete)

    If iFirmware = 2008 Then
     iMinLength = 20
    Else
     iMinLength = 32
    Endif

    If Len(sResult) > iMinLength Then
      If iFirmware > 2008 Then
        sSeq = Mid(sResult, 8, 4)
        sPulses = Mid(sResult, 28, 4)
      Else
        sPulses = Mid(sResult, 5, 4)
      Endif
      iPulses = HexToInt(sPulses) / 1.0
      fTemp = iPulses + fOffNoise
      If iPulses Then fCorrectPulses = 1.0 * ((((fTemp) ^ 2.0 * fGainB) + ((fTemp) * fGainA)) + fOffTot)
      fkWh = (fCorrectPulses / 1) / 468.9385193
      fWatt = fkWh * 1000

      If bPlugwiseDebug Then
        Main.WriteDebugLog(("[Plugwise] GetPowerInfo Result: ") & sResult)
        If iFirmware > 2008 Then Main.WriteDebugLog(("[Plugwise] Sequence Number: ") & sSeq)
        Main.WriteDebugLog(("[Plugwise] Pulses: ") & sPulses & " (hex) " & iPulses)
        Main.WriteDebugLog(("[Plugwise] Corrected Pulses: ") & fCorrectPulses)
        Main.WriteDebugLog(("[Plugwise] kWh: ") & Str(fkWh))
        Main.WriteDebugLog(("[Plugwise] Watt: ") & Str(fWatt))
      Endif
      Devices.ValueUpdate(iDeviceId, "", Format(CStr(fWatt), "0.###"), Format(CStr(fkWh), "0.###"), "")
    Endif
  Else
    If bPlugwiseDebug Then
      Main.WriteDebugLog(("[Plugwise] GetPowerInfo() didn't get expected answer for address '") & sAddress & ("' result was '") & sResult & "'")
      Main.WriteDebugLog(("[Plugwise] Is module plugged in and address correct?"))
    Endif
  Endif

End

Private Function HexToFloat(sHex As String) As Float

  Dim iSign As Integer
  Dim fExponent, fMant As Float

  If sHex Then
    ' sign
    iSign = IIf((Val("&H" & Mid(sHex, 1, 2)) And &H80) = 128, -1, 1)
    ' exponent
    fExponent = (Val("&H" & Mid(sHex, 1, 3)) And &H7F8) / 2 ^ 3 - 127
    ' mantissa
    fMant = (Val("&H" & Mid(sHex, 3, 6)) And &H7FFFFF) / 2 ^ 23 + 1
  Endif
  Return iSign * fMant * 2 ^ fExponent

Catch
  Main.WriteLog(("Plugwise Error: ") & ERROR.Text & " at " & ERROR.Where & " sHex = " & sHex)

End

Private Function HexToInt(sHex As String) As Integer

  Try Return Val("&H" & sHex)

End

Private Function GetResult(sType As String, sCommand As String) As String

  Dim iTries As Integer = 32
  Dim iAttempts As Integer = 0
  Dim sData, sTemp, sResult, sOldData As String
  Dim iBegin As Integer
  Dim bGarbage As Boolean = True

  While (bGarbage)
    iTries = 32
    While (iTries > 0)
      ' wait a bit and read response.
      Sleep 0.01
      ' see if we got some data.
      Try Read #hPlugwise, sTemp, Lof(hPlugwise)
      sData &= sTemp
      Dec iTries
    Wend
    iBegin = InStr(sData, Chr(5) & Chr(5) & Chr(3) & Chr(3) & sType)
    If (iBegin == 0) Then
      If (iAttempts < 3) Then
        bGarbage = True
        sOldData = sData
        Send(sCommand)
      Else
        bGarbage = False
      Endif
    Else
      bGarbage = False
    Endif
    Inc iAttempts
  Wend

  Select sType
    Case CALIBRATIONRESPONSECODE
      If iBegin Then
        If iFirmware > 2008 Then
          sResult = Mid(sData, iBegin + 1, 150)
        Else
          sResult = Mid(sData, iBegin + 24, 52)
        Endif
      End If
    Case POWERINFORESPONSECODE
      If iBegin Then
        If iFirmware > 2008 Then
          sResult = Mid(sData, iBegin + 1, 61)
        Else
          sResult = Mid(sData, iBegin + 24, 37)
        Endif
      End If
    Case DEVICEINFORESPONSECODE
      If iBegin Then
        If iFirmware > 2008 Then
          sResult = Mid(sData, iBegin + 8, 60)
        Else
          sResult = Mid(sData, iBegin + 8, 34)
        Endif
      Endif
    Case STICKINITRESPONSECODE
      If iBegin Then sResult = Mid(sData, iBegin + 8, 72)
  End Select

  If (iAttempts > 1) And If (Len(sResult) > 0) Then
    Main.WriteDebugLog(("[Plugwise] Needed to interrogate the stick more then once!"))
    Main.WriteDebugLog(("[Plugwise] Data wrong: ") & sOldData)
    Main.WriteDebugLog(("[Plugwise] Data correct: ") & sData)
  Endif

  Return sResult

End

Private Sub Send(sCommand As String)

  If hPlugwise.Status <> Net.Active Then Return

  If Main.bPlugwiseDebug Then Main.WriteDebugLog(("[Plugwise] Write: ") & sCommand)
  Try Write #hPlugwise, sCommand, Len(sCommand)
  ' warn the user.
  If Error Then Main.WriteDebugLog(("[Plugwise] Unable to write to serial port!"))

End

Private Function CalculateCRC(sbuf As String) As Integer

  Dim iWork, iCnt As Integer

  If Not bTableInit Then InitCrcTable()

  iWork = &H0
  For iCnt = 1 To Len(sbuf)
    iWork = (aCRCTable[(Asc(Mid(sBuf, iCnt, 1)) Xor (Lsr(iWork, 8))) And &HFF] Xor (Lsl(iWork, 8))) And &HFFFF&
  Next
  Return iWork

End

Private Sub InitCRCTable()

  Dim iTableIndex, iIndex, iAccumulator, iMask As Integer

  For iTableIndex = 0 To 255
    iMask = Lsl(iTableIndex, 8)
    iAccumulator = 0
    For iIndex = 0 To 7
      If ((iMask Xor iAccumulator) And &H8000&) Then
        iAccumulator = Lsl(iAccumulator, 1) Xor &H1021&
      Else
        iAccumulator = Lsl(iAccumulator, 1)
      End If
      iMask = Lsl(iMask, 1)
    Next
    aCRCTable[iTableIndex] = iAccumulator And &HFFFF&
  Next
  bTableInit = True

End

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' close port
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Public Function Disconnect() As Boolean

  ' try to close the connection
  hPlugwise.Close
  Main.WriteLog(("Plugwise serial port close."))

  ' all ok
  Return True

Catch ' some errors
  Main.WriteLog(("Plugwise Error: ") & ERROR.Text)
  Return False

End

' implement properties
Private Function Port_Read() As String

  Return sPort

End

Private Sub Port_Write(Value As String)

  sPort = Value

End

Private Function PlugwiseDebug_Read() As Boolean

  Return bPlugwiseDebug

End

Private Sub PlugwiseDebug_Write(Value As Boolean)

  bPlugwiseDebug = Value

End

Private Function PollTime_Read() As Integer

  Return iPollTime

End

Private Function PollTime_Write(Value As Integer)

  iPollTime = Value

End

Private Function Firmware_Read() As Integer

  Return iFirmware

End

Private Sub Firmware_Write(Value As Integer)

  iFirmware = Value

End
